name: Build and upload Rust crate

# Build on every branch push, tag push, and pull request change:
on: [push, pull_request]

env:
  RUSTFLAGS: "-D warnings"
  RUSTDOCFLAGS: "-D warnings"
  CI: "true"

jobs:
  check_fmt:
    name: Check format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup rustfmt
        run: rustup component add rustfmt

      - name: Check format
        run: cargo fmt --check

  check_clippy:
    name: Check clippy - no features
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup clippy
        run: rustup component add clippy

      - name: Run clippy
        run: cargo clippy -p gnuv2_demangle --all-targets --no-default-features

  check_clippy_all_features:
    name: Check clippy - features - all
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup clippy
        run: rustup component add clippy

      - name: Run clippy
        run: cargo clippy -p gnuv2_demangle --all-targets --all-features

  check_clippy_g2dem:
    name: Check clippy - g2dem
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup clippy
        run: rustup component add clippy

      - name: Run clippy
        run: cargo clippy -p g2dem --all-targets

  check_doc:
    name: Check doc
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run doc tets
        run: cargo test --doc --all-features

      - name: Run doc
        run: cargo doc --all-features

  run_tests:
    name: Run tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run tests
        run: cargo test -p gnuv2_demangle

  msrv_gnuv2_demangle:
    name: Check MSRV (gnuv2_demangle)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup MSRV checker
        uses: taiki-e/install-action@cargo-hack

      - name: Run MSRV checker
        run: cargo hack check --rust-version --workspace --all-targets --ignore-private --package gnuv2_demangle

  msrv_gnuv2_demangle_all_features:
    name: Check MSRV all features (gnuv2_demangle)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup MSRV checker
        uses: taiki-e/install-action@cargo-hack

      - name: Run MSRV checker
        run: cargo hack check --rust-version --workspace --all-targets --ignore-private --package gnuv2_demangle --all-features

  msrv_g2dem:
    name: Check MSRV (g2dem)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup MSRV checker
        uses: taiki-e/install-action@cargo-hack

      - name: Run MSRV checker
        run: cargo hack check --rust-version --workspace --all-targets --ignore-private --package g2dem

  msrv_g2dem_all_features:
    name: Check MSRV all features (g2dem)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup MSRV checker
        uses: taiki-e/install-action@cargo-hack

      - name: Run MSRV checker
        run: cargo hack check --rust-version --workspace --all-targets --ignore-private --package g2dem --all-features

  semver_check_no_features:
    name: Check semver - no default features
    runs-on: ubuntu-latest
    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      # Locally:
      # ```
      # cargo install cargo-semver-checks --locked
      # cargo semver-checks
      # ```
      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          feature-group: only-explicit-features # equivalent to --no-default-features

  semver_check_deafult_features:
    name: Check semver - deafult features
    runs-on: ubuntu-latest
    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          feature-group: default-features

  semver_check_all_features:
    name: Check semver - all features
    runs-on: ubuntu-latest
    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          feature-group: all-features

  publish_gnuv2_demangle:
    name: Publish crate
    runs-on: ubuntu-latest
    needs:
      - check_fmt
      - check_clippy
      - check_clippy_all_features
      - check_clippy_g2dem
      - check_doc
      - run_tests
      - msrv_gnuv2_demangle
      - msrv_gnuv2_demangle_all_features
      - msrv_g2dem
      - msrv_g2dem_all_features
      - semver_check_no_features
      - semver_check_deafult_features
      - semver_check_all_features

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@main

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build Rust package
        run: cargo build --locked --release --workspace

      - name: Publish gnuv2_demangle dry run
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
        run: cargo publish -p gnuv2_demangle --dry-run

      - name: Upload gnuv2_demangle crate
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: cargo publish -p gnuv2_demangle --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Upload g2dem crate
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: cargo publish -p g2dem --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  github_binary_release:
    name: ${{ matrix.binaries.package }} (${{ matrix.builder.target }}) binary release
    runs-on: ${{ matrix.builder.runner }}
    needs:
      - check_fmt
      - check_clippy
      - check_clippy_all_features
      - check_clippy_g2dem
      - check_doc
      - run_tests
      - msrv_gnuv2_demangle
      - msrv_gnuv2_demangle_all_features
      - msrv_g2dem
      - msrv_g2dem_all_features
      - semver_check_no_features
      - semver_check_deafult_features
      - semver_check_all_features

    strategy:
      fail-fast: false
      matrix:
        builder: [
          {
            name: linux,
            target: x86_64-unknown-linux-musl,
            runner: ubuntu-22.04,
            cp_cmd: cp,
            extension: "",
          },
          {
            name: linux,
            target: x86_64-unknown-linux-gnu,
            runner: ubuntu-22.04,
            cp_cmd: cp,
            extension: "",
          },
          {
            name: mac,
            target: x86_64-apple-darwin,
            runner: macos-latest,
            cp_cmd: cp,
            extension: "",
          },
          {
            name: mac,
            target: aarch64-apple-darwin,
            runner: macos-latest,
            cp_cmd: cp,
            extension: "",
          },
          {
            name: windows,
            target: x86_64-pc-windows-gnu,
            runner: windows-2022,
            cp_cmd: Copy-Item,
            extension: ".exe",
          },
          {
            name: windows,
            target: x86_64-pc-windows-msvc,
            runner: windows-2022,
            cp_cmd: Copy-Item,
            extension: ".exe",
          },
          {
            name: windows,
            target: aarch64-pc-windows-msvc,
            runner: windows-2022,
            cp_cmd: Copy-Item,
            extension: ".exe",
          },
        ]
        binaries: [
          {
            package: g2dem,
          },
        ]

    steps:
      - name: Checkout repo
        uses: actions/checkout@main

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.builder.target }}

      - name: Build ${{ matrix.binaries.package }}
        run: |
          cargo build --release --locked --package ${{ matrix.binaries.package }} --target ${{ matrix.builder.target }}
          cargo run --release -- --version

      - name: Move files for packaging
        run: |
          mkdir -p package/
          ${{ matrix.builder.cp_cmd }} target/${{ matrix.builder.target }}/release/${{ matrix.binaries.package }}${{ matrix.builder.extension }} package/
          ${{ matrix.builder.cp_cmd }} LICENSE-APACHE package/${{ matrix.binaries.package }}.LICENSE-APACHE
          ${{ matrix.builder.cp_cmd }} LICENSE-MIT package/${{ matrix.binaries.package }}.LICENSE-MIT
          ${{ matrix.builder.cp_cmd }} src/${{ matrix.binaries.package }}/README.md package/${{ matrix.binaries.package }}.README.md
          ${{ matrix.builder.cp_cmd }} README.md package/gnuv2_demangle.README.md
          ${{ matrix.builder.cp_cmd }} CHANGELOG.md package/gnuv2_demangle.CHANGELOG.md

      - name: Package .tar.gz
        run: |
          cd package/ && tar -czf ../${{ matrix.binaries.package }}-${{ matrix.builder.target }}.tar.gz *

      - name: Upload .tar.gz artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.binaries.package }}-${{ matrix.builder.target }}
          path: |
            ${{ matrix.binaries.package }}-${{ matrix.builder.target }}.tar.gz
          if-no-files-found: error

      - name: Publish .tar.gz release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ matrix.binaries.package }}-${{ matrix.builder.target }}.tar.gz
