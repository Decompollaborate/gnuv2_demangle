---
source: src/gnuv2_demangle/tests/snapshots.rs
expression: "demangle_lines(contents, &config)"
---
[
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper::AnimCollisionEntityDSGWrapper(void)",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper::~AnimCollisionEntityDSGWrapper(void)",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper::UpdateVisibility(void)",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper::SetGameObject(AnimCollisionEntityDSG *)",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper::GetAnimationDirection(void)",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper::SetAnimationDirection(float)",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper::GetAnimController(void) const",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper::GetDrawable(void) const",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper::Display(void)",
    ),
    Ok(
        "ActionButton::AnimEntityDSGWrapper::~AnimEntityDSGWrapper(void)",
    ),
    Ok(
        "ActionButton::AnimEntityDSGWrapper::UpdateVisibility(void)",
    ),
    Ok(
        "ActionButton::AnimEntityDSGWrapper::GetAnimationDirection(void)",
    ),
    Ok(
        "ActionButton::AnimEntityDSGWrapper::SetAnimationDirection(float)",
    ),
    Ok(
        "ActionButton::AnimEntityDSGWrapper::GetAnimController(void) const",
    ),
    Ok(
        "ActionButton::AnimEntityDSGWrapper::GetDrawable(void) const",
    ),
    Ok(
        "ActionButton::AnimEntityDSGWrapper::Display(void)",
    ),
    Ok(
        "ActionButton::ButtonHandler::ButtonHandler(void)",
    ),
    Ok(
        "ActionButton::ButtonHandler::~ButtonHandler(void)",
    ),
    Ok(
        "ActionButton::ButtonHandler::ButtonPressed(Character *)",
    ),
    Ok(
        "ActionButton::ButtonHandler::Enter(Character *)",
    ),
    Ok(
        "ActionButton::ButtonHandler::Exit(Character *)",
    ),
    Ok(
        "ActionButton::ButtonHandler::IsActionButtonPressed(Character *)",
    ),
    Ok(
        "ActionButton::PropHandler::~PropHandler(void)",
    ),
    Ok(
        "ActionButton::PropHandler::GetProp(void) const",
    ),
    Ok(
        "ActionButton::AttachProp::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::EnterInterior::EnterInterior(InteriorEntranceLocator *)",
    ),
    Ok(
        "ActionButton::EnterInterior::~EnterInterior(void)",
    ),
    Ok(
        "ActionButton::EnterInterior::SetLocator(InteriorEntranceLocator *)",
    ),
    Ok(
        "ActionButton::EnterInterior::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::GetInCar::GetInCar(EventLocator *)",
    ),
    Ok(
        "ActionButton::GetInCar::~GetInCar(void)",
    ),
    Ok(
        "ActionButton::GetInCar::SetEventLocator(EventLocator *)",
    ),
    Ok(
        "ActionButton::GetInCar::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::ActionEventHandler::ActionEventHandler(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::ActionEventHandler::~ActionEventHandler(void)",
    ),
    Ok(
        "ActionButton::ActionEventHandler::SetActionEventLocator(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::AnimSwitch::AnimSwitch(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::AnimSwitch::~AnimSwitch(void)",
    ),
    Ok(
        "ActionButton::AnimSwitch::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::AnimSwitch::OnReset(void)",
    ),
    Ok(
        "ActionButton::AnimSwitch::Init(ActionButton::IGameObjectWrapper *, tPose::Joint *, bool)",
    ),
    Ok(
        "ActionButton::AnimSwitch::GetAnimationDirection(void)",
    ),
    Ok(
        "ActionButton::AnimSwitch::SetAnimationDirection(float)",
    ),
    Ok(
        "ActionButton::AnimSwitch::GetAnimController(void) const",
    ),
    Ok(
        "ActionButton::AnimSwitch::Update(float)",
    ),
    Ok(
        "ActionButton::AnimSwitch::Destroy(void)",
    ),
    Ok(
        "ActionButton::AnimSwitch::ButtonPressed(Character *)",
    ),
    Ok(
        "ActionButton::AnimSwitch::PositionCharacter(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::AnimSwitch::SequenceActions(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::AnimSwitch::SetAnimation(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::ToggleAnim::ToggleAnim(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::ToggleAnim::~ToggleAnim(void)",
    ),
    Ok(
        "ActionButton::ToggleAnim::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::ReverseAnim::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::PlayAnim::PlayAnim(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PlayAnim::~PlayAnim(void)",
    ),
    Ok(
        "ActionButton::PlayAnim::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::PlayAnimLoop::PlayAnimLoop(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PlayAnimLoop::~PlayAnimLoop(void)",
    ),
    Ok(
        "ActionButton::PlayAnimLoop::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnim::AutoPlayAnim(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnim::~AutoPlayAnim(void)",
    ),
    Ok(
        "ActionButton::AutoPlayAnim::IsActionButtonPressed(Character *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnim::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnim::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnim::OnUpdate(float)",
    ),
    Ok(
        "ActionButton::AutoPlayAnim::OnExit(Character *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnim::PositionCharacter(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnim::SetAnimation(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnimLoop::AutoPlayAnimLoop(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnimLoop::~AutoPlayAnimLoop(void)",
    ),
    Ok(
        "ActionButton::AutoPlayAnimInOut::AutoPlayAnimInOut(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnimInOut::~AutoPlayAnimInOut(void)",
    ),
    Ok(
        "ActionButton::AutoPlayAnimInOut::IsActionButtonPressed(Character *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnimInOut::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnimInOut::OnUpdate(float)",
    ),
    Ok(
        "ActionButton::AutoPlayAnimInOut::OnExit(Character *)",
    ),
    Ok(
        "ActionButton::DestroyObject::DestroyObject(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::DestroyObject::~DestroyObject(void)",
    ),
    Ok(
        "ActionButton::DestroyObject::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::DestroyObject::NeedsUpdate(void) const",
    ),
    Ok(
        "ActionButton::DestroyObject::Enter(Character *)",
    ),
    Ok(
        "ActionButton::DestroyObject::OnReset(void)",
    ),
    Ok(
        "ActionButton::DestroyObject::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::DestroyObject::PositionCharacter(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::DestroyObject::SetAnimation(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::DestroyObject::OnUpdate(float)",
    ),
    Ok(
        "ActionButton::DestroyObject::RecieveEvent(int, CStateProp *)",
    ),
    Ok(
        "ActionButton::UseVendingMachine::UseVendingMachine(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::UseVendingMachine::~UseVendingMachine(void)",
    ),
    Ok(
        "ActionButton::UseVendingMachine::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::UseVendingMachine::SetAnimation(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::PrankPhone::PrankPhone(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PrankPhone::~PrankPhone(void)",
    ),
    Ok(
        "ActionButton::PrankPhone::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::PrankPhone::SetAnimation(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::Doorbell::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::Doorbell::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::SummonVehiclePhone(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::~SummonVehiclePhone(void)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::UsesActionButton(void) const",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::LoadVehicle(char const *, char const *, VehicleCentral::DriverInit)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::LoadVehicle(int)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::LoadDebugVehicle(void)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::OnUpdate(float)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhoneStaticCallback::~SummonVehiclePhoneStaticCallback(void)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhoneStaticCallback::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::SetAnimation(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::Bounce::~Bounce(void)",
    ),
    Ok(
        "ActionButton::Bounce::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::Bounce::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::Bounce::OnEnter(Character *, Locator *)",
    ),
    Ok(
        "ActionButton::Collectible::Collectible(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::Collectible::~Collectible(void)",
    ),
    Ok(
        "ActionButton::Collectible::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::Collectible::OnReset(void)",
    ),
    Ok(
        "ActionButton::Collectible::ResetCollectible(void)",
    ),
    Ok(
        "ActionButton::Collectible::OnUpdate(float)",
    ),
    Ok(
        "ActionButton::Collectible::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::Collectible::OnExit(Character *)",
    ),
    Ok(
        "ActionButton::RespawnCollectible::RespawnCollectible(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::RespawnCollectible::~RespawnCollectible(void)",
    ),
    Ok(
        "ActionButton::CollectibleFood::CollectibleFood(ActionEventLocator *, float)",
    ),
    Ok(
        "ActionButton::CollectibleFood::~CollectibleFood(void)",
    ),
    Ok(
        "ActionButton::CollectibleFood::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::CollectibleCard::CollectibleCard(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::CollectibleCard::~CollectibleCard(void)",
    ),
    Ok(
        "ActionButton::CollectibleCard::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::CollectibleCard::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::CollectibleCard::UpdateThing(unsigned int)",
    ),
    Ok(
        "ActionButton::WrenchIcon::WrenchIcon(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::WrenchIcon::~WrenchIcon(void)",
    ),
    Ok(
        "ActionButton::WrenchIcon::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::WrenchIcon::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::WrenchIcon::UpdateThing(unsigned int)",
    ),
    Ok(
        "ActionButton::WrenchIcon::Update(float)",
    ),
    Ok(
        "ActionButton::NitroIcon::NitroIcon(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::NitroIcon::~NitroIcon(void)",
    ),
    Ok(
        "ActionButton::NitroIcon::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::NitroIcon::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::NitroIcon::UpdateThing(unsigned int)",
    ),
    Ok(
        "ActionButton::NitroIcon::Update(float)",
    ),
    Ok(
        "ActionButton::GenericEventButtonHandler::GenericEventButtonHandler(EventLocator *, EventEnum)",
    ),
    Ok(
        "ActionButton::GenericEventButtonHandler::~GenericEventButtonHandler(void)",
    ),
    Ok(
        "ActionButton::GenericEventButtonHandler::NewAction(EventLocator *, EventEnum, GameMemoryAllocator)",
    ),
    Ok(
        "ActionButton::GenericEventButtonHandler::SetEventLocator(EventLocator *)",
    ),
    Ok(
        "ActionButton::GenericEventButtonHandler::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::TeleportAction::TeleportAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::TeleportAction::~TeleportAction(void)",
    ),
    Ok(
        "ActionButton::TeleportAction::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::TeleportAction::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "ActionButton::TeleportAction::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::TeleportAction::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::TeleportAction::OnExit(Character *)",
    ),
    Ok(
        "ActionButton::PurchaseReward::PurchaseReward(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PurchaseReward::~PurchaseReward(void)",
    ),
    Ok(
        "ActionButton::PurchaseReward::OnUpdate(float)",
    ),
    Ok(
        "ActionButton::PurchaseCar::PurchaseCar(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PurchaseCar::~PurchaseCar(void)",
    ),
    Ok(
        "ActionButton::PurchaseCar::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::PurchaseCar::OnButtonPressed(Character *)",
    ),
    Ok(
        "ActionButton::PurchaseCar::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::PurchaseCar::OnExit(Character *)",
    ),
    Ok(
        "ActionButton::PurchaseCar::OnUpdate(float)",
    ),
    Ok(
        "ActionButton::PurchaseSkin::PurchaseSkin(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PurchaseSkin::~PurchaseSkin(void)",
    ),
    Ok(
        "ActionButton::PurchaseSkin::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::PurchaseSkin::OnButtonPressed(Character *)",
    ),
    Ok(
        "ActionButton::PurchaseSkin::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::PurchaseSkin::OnExit(Character *)",
    ),
    Ok(
        "ActionButton::PurchaseSkin::OnUpdate(float)",
    ),
    Ok(
        "ActionButton::CompareActionType(char const *, tUidUnaligned)",
    ),
    Ok(
        "ActionButtonManager::ActionButtonManager(void)",
    ),
    Ok(
        "ActionButtonManager::FindHandler(ActionEventLocator const *) const",
    ),
    Ok(
        "ActionButtonManager::AddVehicleSelectInfo(int, char **)",
    ),
    Ok(
        "ActionButtonManager::ClearVehicleSelectInfo(int, char **)",
    ),
    Ok(
        "ActionButtonManager::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "ActionButtonManager::~ActionButtonManager(void)",
    ),
    Ok(
        "ActionButtonManager::Destroy(void)",
    ),
    Ok(
        "ActionButtonManager::CreateInstance(void)",
    ),
    Ok(
        "ActionButtonManager::GetInstance(void)",
    ),
    Ok(
        "ActionButtonManager::DestroyInstance(void)",
    ),
    Ok(
        "ActionButtonManager::EnterGame(void)",
    ),
    Ok(
        "ActionButtonManager::Update(float)",
    ),
    Ok(
        "ActionButtonManager::AddActionEventLocator(ActionEventLocator *, tEntityStore *)",
    ),
    Ok(
        "ActionButtonManager::GetActionByIndex(int) const",
    ),
    Ok(
        "ActionButtonManager::AddAction(ActionButton::ButtonHandler *, int &, tUidUnaligned)",
    ),
    Ok(
        "ActionButtonManager::RemoveActionByIndex(int)",
    ),
    Ok(
        "ActionButtonManager::CreateActionEventTrigger(char const *, RadicalMathLibrary::Vector &, float)",
    ),
    Ok(
        "ActionButtonManager::LinkActionToObjectJoint(char const *, char const *, char const *, char const *, char const *)",
    ),
    Ok(
        "ActionButtonManager::LinkActionToObject(char const *, char const *, char const *, char const *, char const *, bool)",
    ),
    Ok(
        "ActionButtonManager::LinkActionToLocator(ActionEventLocator *, tEntityStore *)",
    ),
    Ok(
        "ActionButtonManager::EnterActionTrigger(Character *, int)",
    ),
    Ok(
        "ActionButtonManager::ExitActionTrigger(Character *, int)",
    ),
    Ok(
        "ActionButtonManager::NewActionButtonHandler(char const *, ActionEventLocator *)",
    ),
    Ok(
        "ActionButtonManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "ActionButtonManager::Find(int) const",
    ),
    Ok(
        "ActionButtonManager::RemoveActionByArrayPos(int)",
    ),
    Ok(
        "CharacterAi::State::State(Character *)",
    ),
    Ok(
        "CharacterAi::State::~State(void)",
    ),
    Ok(
        "CharacterAi::InCar::InCar(Character *)",
    ),
    Ok(
        "CharacterAi::InCar::~InCar(void)",
    ),
    Ok(
        "CharacterAi::InCar::Enter(void)",
    ),
    Ok(
        "CharacterAi::InCar::Exit(void)",
    ),
    Ok(
        "CharacterAi::InCar::SequenceAction(void)",
    ),
    Ok(
        "CharacterAi::InCar::Update(float)",
    ),
    Ok(
        "CharacterAi::Loco::Loco(Character *)",
    ),
    Ok(
        "CharacterAi::Loco::~Loco(void)",
    ),
    Ok(
        "CharacterAi::Loco::Enter(void)",
    ),
    Ok(
        "CharacterAi::Loco::Exit(void)",
    ),
    Ok(
        "CharacterAi::Loco::SequenceAction(void)",
    ),
    Ok(
        "CharacterAi::Loco::Update(float)",
    ),
    Ok(
        "CharacterAi::GetIn::GetIn(Character *)",
    ),
    Ok(
        "CharacterAi::GetIn::~GetIn(void)",
    ),
    Ok(
        "CharacterAi::GetIn::Enter(void)",
    ),
    Ok(
        "CharacterAi::GetIn::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CharacterAi::GetIn::CalcGetInPath(int *, RadicalMathLibrary::Vector *, bool *, bool *)",
    ),
    Ok(
        "CharacterAi::GetIn::SequenceAction(void)",
    ),
    Ok(
        "CharacterAi::GetIn::Update(float)",
    ),
    Ok(
        "CharacterAi::GetIn::Exit(void)",
    ),
    Ok(
        "CharacterAi::GetOut::GetOut(Character *)",
    ),
    Ok(
        "CharacterAi::GetOut::~GetOut(void)",
    ),
    Ok(
        "CharacterAi::GetOut::Enter(void)",
    ),
    Ok(
        "CharacterAi::GetOut::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CharacterAi::GetOut::Exit(void)",
    ),
    Ok(
        "CharacterAi::GetOut::SequenceAction(void)",
    ),
    Ok(
        "CharacterAi::GetOut::Update(float)",
    ),
    Ok(
        "CharacterAi::GetOut::DoGetOut(void)",
    ),
    Ok(
        "CharacterAi::InSim::InSim(Character *)",
    ),
    Ok(
        "CharacterAi::InSim::~InSim(void)",
    ),
    Ok(
        "CharacterAi::InSim::Enter(void)",
    ),
    Ok(
        "CharacterAi::InSim::Exit(void)",
    ),
    Ok(
        "CharacterAi::InSim::SequenceAction(void)",
    ),
    Ok(
        "CharacterAi::InSim::Update(float)",
    ),
    Ok(
        "CharacterAi::StateManager::StateManager(Character *)",
    ),
    Ok(
        "CharacterAi::StateManager::~StateManager(void)",
    ),
    Ok(
        "CharacterAi::StateManager::GetCharacter(void)",
    ),
    Ok(
        "CharacterAi::StateManager::GetState(void) const",
    ),
    Ok(
        "CharacterAi::StateManager::SetState(CharacterAi::State *)",
    ),
    Ok(
        "CharacterAi::StateManager::ResetState(void)",
    ),
    Ok(
        "CharacterAi::StateManager::Update(float)",
    ),
    Ok(
        "CharacterAi::StateManager::GetCurrentState(void) const",
    ),
    Ok(
        "ActionButton::PlayAnimOnce::PlayAnimOnce(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PlayAnimOnce::~PlayAnimOnce(void)",
    ),
    Ok(
        "ActionButton::PlayAnimOnce::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::PlayAnimOnce::PositionCharacter(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::AutomaticDoor::AutomaticDoor(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::AutomaticDoor::~AutomaticDoor(void)",
    ),
    Ok(
        "ActionButton::AutomaticDoor::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::AutomaticDoor::OnExit(Character *)",
    ),
    Ok(
        "ContiguousBinNode<SpatialNode>::~ContiguousBinNode(void)",
    ),
    Ok(
        "ContiguousBinNode<SpatialNode>::ContiguousBinNode(void)",
    ),
    Ok(
        "ContiguousBinNode<SpatialNode>::GetSubTreeSize(void)",
    ),
    Ok(
        "sim::TArray<sim::Collision>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<sim::Collision>::Grow(void)",
    ),
    Ok(
        "sim::TArray<sim::Collision>::Add(sim::Collision const &)",
    ),
    Ok(
        "void CharacterAi::SetState<CharacterAi::Loco>(CharacterAi::StateManager *)",
    ),
    Ok(
        "void CharacterAi::SetState<CharacterAi::InCar>(CharacterAi::StateManager *)",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper type_info function",
    ),
    Ok(
        "ActionButton::AnimEntityDSGWrapper type_info function",
    ),
    Ok(
        "ActionButton::ButtonHandler type_info function",
    ),
    Ok(
        "ActionButton::PropHandler type_info function",
    ),
    Ok(
        "ActionButton::AttachProp::~AttachProp(void)",
    ),
    Ok(
        "ActionButton::AttachProp type_info function",
    ),
    Ok(
        "ActionButton::EnterInterior type_info function",
    ),
    Ok(
        "ActionButton::GetInCar type_info function",
    ),
    Ok(
        "ActionButton::ActionEventHandler type_info function",
    ),
    Ok(
        "ActionButton::AnimSwitch type_info function",
    ),
    Ok(
        "ActionButton::ToggleAnim type_info function",
    ),
    Ok(
        "ActionButton::ReverseAnim type_info function",
    ),
    Ok(
        "ActionButton::PlayAnim type_info function",
    ),
    Ok(
        "ActionButton::PlayAnimLoop type_info function",
    ),
    Ok(
        "ActionButton::AutoPlayAnim type_info function",
    ),
    Ok(
        "ActionButton::AutoPlayAnimLoop type_info function",
    ),
    Ok(
        "ActionButton::AutoPlayAnimInOut type_info function",
    ),
    Ok(
        "ActionButton::DestroyObject type_info function",
    ),
    Ok(
        "ActionButton::UseVendingMachine type_info function",
    ),
    Ok(
        "ActionButton::PrankPhone type_info function",
    ),
    Ok(
        "ActionButton::SummonVehiclePhoneStaticCallback type_info function",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone type_info function",
    ),
    Ok(
        "ActionButton::Bounce type_info function",
    ),
    Ok(
        "ActionButton::Doorbell type_info function",
    ),
    Ok(
        "ActionButton::Collectible type_info function",
    ),
    Ok(
        "ActionButton::RespawnCollectible type_info function",
    ),
    Ok(
        "ActionButton::CollectibleFood type_info function",
    ),
    Ok(
        "ActionButton::CollectibleCard type_info function",
    ),
    Ok(
        "ActionButton::WrenchIcon type_info function",
    ),
    Ok(
        "ActionButton::NitroIcon type_info function",
    ),
    Ok(
        "ActionButton::GenericEventButtonHandler type_info function",
    ),
    Ok(
        "ActionButton::TeleportAction type_info function",
    ),
    Ok(
        "ActionButton::PurchaseReward type_info function",
    ),
    Ok(
        "ActionButton::PurchaseCar type_info function",
    ),
    Ok(
        "ActionButton::PurchaseSkin type_info function",
    ),
    Ok(
        "ActionButtonManager type_info function",
    ),
    Ok(
        "CharacterAi::State type_info function",
    ),
    Ok(
        "CharacterAi::NoState type_info function",
    ),
    Ok(
        "CharacterAi::InCar type_info function",
    ),
    Ok(
        "CharacterAi::Loco type_info function",
    ),
    Ok(
        "CharacterAi::InSim type_info function",
    ),
    Ok(
        "CharacterAi::GetIn type_info function",
    ),
    Ok(
        "CharacterAi::GetOut type_info function",
    ),
    Ok(
        "TriggerEventAction::~TriggerEventAction(void)",
    ),
    Ok(
        "TriggerEventAction type_info function",
    ),
    Ok(
        "DelayAction::~DelayAction(void)",
    ),
    Ok(
        "DelayAction type_info function",
    ),
    Ok(
        "AssignValueToFloat::~AssignValueToFloat(void)",
    ),
    Ok(
        "AssignValueToFloat type_info function",
    ),
    Ok(
        "ActionButton::PlayAnimOnce type_info function",
    ),
    Ok(
        "ActionButton::AutomaticDoor type_info function",
    ),
    Ok(
        "ISpatialProxyAA type_info function",
    ),
    Ok(
        "ChangeState<CharacterAi::InCar>::~ChangeState(void)",
    ),
    Ok(
        "ChangeState<CharacterAi::InCar> type_info function",
    ),
    Ok(
        "ChangeState<CharacterAi::Loco>::~ChangeState(void)",
    ),
    Ok(
        "ChangeState<CharacterAi::Loco> type_info function",
    ),
    Ok(
        "tRefCounted::~tRefCounted(void)",
    ),
    Ok(
        "tRefCounted::tRefCounted(void)",
    ),
    Ok(
        "tPose::Joint::Joint(void)",
    ),
    Ok(
        "LoadingManager::ProcessRequestsCallback::ProcessRequestsCallback(void)",
    ),
    Ok(
        "CStatePropListener::CStatePropListener(void)",
    ),
    Ok(
        "ActionButton::IGameObjectWrapper::~IGameObjectWrapper(void)",
    ),
    Ok(
        "ActionButton::IGameObjectWrapper::IGameObjectWrapper(void)",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper::IsManualUpdate(void) const",
    ),
    Ok(
        "ActionButton::AnimEntityDSGWrapper::IsManualUpdate(void) const",
    ),
    Ok(
        "ActionButton::ButtonHandler::Update(float)",
    ),
    Ok(
        "ActionButton::ButtonHandler::UsesActionButton(void) const",
    ),
    Ok(
        "ActionButton::ButtonHandler::NeedsUpdate(void) const",
    ),
    Ok(
        "ActionButton::ButtonHandler::Reset(void)",
    ),
    Ok(
        "ActionButton::ButtonHandler::GetType(void)",
    ),
    Ok(
        "ActionButton::ButtonHandler::IsInstanceEnabled(void) const",
    ),
    Ok(
        "ActionButton::ButtonHandler::OnReset(void)",
    ),
    Ok(
        "ActionButton::ButtonHandler::OnUpdate(float)",
    ),
    Ok(
        "ActionButton::ButtonHandler::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::ButtonHandler::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::ButtonHandler::OnExit(Character *)",
    ),
    Ok(
        "ActionButton::EnterInterior::GetType(void)",
    ),
    Ok(
        "ActionButton::GetInCar::GetType(void)",
    ),
    Ok(
        "ActionButton::ActionEventHandler::Create(tEntityStore *)",
    ),
    Ok(
        "ActionButton::ActionEventHandler::GetType(void)",
    ),
    Ok(
        "ActionButton::AnimSwitch::GameObjectDestroyed(void)",
    ),
    Ok(
        "ActionButton::AnimSwitch::UsesActionButton(void) const",
    ),
    Ok(
        "ActionButton::AnimSwitch::NeedsUpdate(void) const",
    ),
    Ok(
        "ActionButton::AnimSwitch::GetType(void)",
    ),
    Ok(
        "ActionButton::AnimSwitch::OnUpdate(float)",
    ),
    Ok(
        "ActionButton::AnimSwitch::OnInit(void)",
    ),
    Ok(
        "ActionButton::ToggleAnim::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::ReverseAnim::~ReverseAnim(void)",
    ),
    Ok(
        "ActionButton::ReverseAnim::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PlayAnim::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PlayAnimLoop::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnim::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnim::GetIsCyclic(void) const",
    ),
    Ok(
        "ActionButton::AutoPlayAnimLoop::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::AutoPlayAnimLoop::GetIsCyclic(void) const",
    ),
    Ok(
        "ActionButton::AutoPlayAnimInOut::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::DestroyObject::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::DestroyObject::GetType(void)",
    ),
    Ok(
        "ActionButton::DestroyObject::IsInstanceEnabled(void) const",
    ),
    Ok(
        "ActionButton::UseVendingMachine::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PrankPhone::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::GetType(void)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::OnButtonPressed(Character *)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::OnEnter(Character *)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::OnExit(Character *)",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::NeedsUpdate(void) const",
    ),
    Ok(
        "ActionButton::Bounce::UsesActionButton(void) const",
    ),
    Ok(
        "ActionButton::Doorbell::~Doorbell(void)",
    ),
    Ok(
        "ActionButton::Doorbell::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::OpenDoor::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::TalkFood::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::TalkDialog::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::TalkMission::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::Collectible::ShouldRespawn(void) const",
    ),
    Ok(
        "ActionButton::Collectible::IsRespawnTimeExpired(void) const",
    ),
    Ok(
        "ActionButton::Collectible::GetRespawnTime(void) const",
    ),
    Ok(
        "ActionButton::Collectible::SetRespawnTime(float)",
    ),
    Ok(
        "ActionButton::Collectible::UpdateRespawnTime(float)",
    ),
    Ok(
        "ActionButton::Collectible::NeedsUpdate(void) const",
    ),
    Ok(
        "ActionButton::RespawnCollectible::ShouldRespawn(void) const",
    ),
    Ok(
        "ActionButton::RespawnCollectible::GetRespawnTime(void) const",
    ),
    Ok(
        "ActionButton::RespawnCollectible::SetRespawnTime(float)",
    ),
    Ok(
        "ActionButton::RespawnCollectible::UpdateRespawnTime(float)",
    ),
    Ok(
        "ActionButton::CollectibleFood::NewFoodSmallAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::CollectibleFood::NewFoodLargeAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::CollectibleCard::GetType(void)",
    ),
    Ok(
        "ActionButton::CollectibleCard::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::WrenchIcon::GetType(void)",
    ),
    Ok(
        "ActionButton::WrenchIcon::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::NitroIcon::GetType(void)",
    ),
    Ok(
        "ActionButton::NitroIcon::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::GenericEventButtonHandler::GetType(void)",
    ),
    Ok(
        "ActionButton::TeleportAction::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::TeleportAction::GetType(void)",
    ),
    Ok(
        "ActionButton::PurchaseReward::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ActionButton::PurchaseReward::NeedsUpdate(void) const",
    ),
    Ok(
        "ActionButton::PurchaseCar::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PurchaseCar::GetType(void)",
    ),
    Ok(
        "ActionButton::PurchaseCar::UsesActionButton(void) const",
    ),
    Ok(
        "ActionButton::PurchaseSkin::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::PurchaseSkin::GetType(void)",
    ),
    Ok(
        "ActionButton::PurchaseSkin::UsesActionButton(void) const",
    ),
    Ok(
        "CharacterAi::NoState::~NoState(void)",
    ),
    Ok(
        "CharacterAi::NoState::GetStateID(void) const",
    ),
    Ok(
        "CharacterAi::NoState::Enter(void)",
    ),
    Ok(
        "CharacterAi::NoState::Exit(void)",
    ),
    Ok(
        "CharacterAi::NoState::SequenceAction(void)",
    ),
    Ok(
        "CharacterAi::NoState::Update(float)",
    ),
    Ok(
        "CharacterAi::InCar::GetStateID(void) const",
    ),
    Ok(
        "CharacterAi::Loco::GetStateID(void) const",
    ),
    Ok(
        "CharacterAi::InSim::GetStateID(void) const",
    ),
    Ok(
        "CharacterAi::GetIn::GetStateID(void) const",
    ),
    Ok(
        "CharacterAi::GetOut::GetStateID(void) const",
    ),
    Ok(
        "Action::Action(void)",
    ),
    Ok(
        "SlaveAction::SlaveAction(void)",
    ),
    Ok(
        "TriggerEventAction::WakeUp(float)",
    ),
    Ok(
        "DelayAction::Update(float)",
    ),
    Ok(
        "AssignValueToFloat::WakeUp(float)",
    ),
    Ok(
        "radLoadInventory::SafeCast<AnimCollisionEntityDSG>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<StatePropDSG>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<CarStartLocator>::SafeCast(void)",
    ),
    Ok(
        "ActionButton::PlayAnimOnce::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::AutomaticDoor::NewAction(ActionEventLocator *)",
    ),
    Ok(
        "ActionButton::AutomaticDoor::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "ISpatialProxyAA::~ISpatialProxyAA(void)",
    ),
    Ok(
        "ChangeState<CharacterAi::Loco>::Update(float)",
    ),
    Ok(
        "ChangeState<CharacterAi::InCar>::Update(float)",
    ),
    Ok(
        "IRefCount type_info function",
    ),
    Ok(
        "tRefCounted type_info function",
    ),
    Ok(
        "LoadingManager::ProcessRequestsCallback type_info function",
    ),
    Ok(
        "CStatePropListener type_info function",
    ),
    Ok(
        "ActionButton::IGameObjectWrapper type_info function",
    ),
    Ok(
        "ActionButton::OpenDoor type_info function",
    ),
    Ok(
        "ActionButton::TalkFood type_info function",
    ),
    Ok(
        "ActionButton::TalkDialog type_info function",
    ),
    Ok(
        "ActionButton::TalkMission type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<AnimCollisionEntityDSG> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<StatePropDSG> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<CarStartLocator> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<ActionEventLocator> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCastBase::SafeCastBase(void)",
    ),
    Ok(
        "tDrawable::tDrawable(void)",
    ),
    Ok(
        "ActionButton::OpenDoor::~OpenDoor(void)",
    ),
    Ok(
        "ActionButton::TalkFood::~TalkFood(void)",
    ),
    Ok(
        "ActionButton::TalkDialog::~TalkDialog(void)",
    ),
    Ok(
        "ActionButton::TalkMission::~TalkMission(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<ActionEventLocator>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<CarStartLocator>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<StatePropDSG>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<AnimCollisionEntityDSG>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCastBase type_info function",
    ),
    Ok(
        "global constructors keyed to ActionButton::AnimCollisionEntityDSGWrapper::AnimCollisionEntityDSGWrapper(void)",
    ),
    Ok(
        "global destructors keyed to ActionButton::AnimCollisionEntityDSGWrapper::AnimCollisionEntityDSGWrapper(void)",
    ),
    Ok(
        "ActorManager::CreateInstance(void)",
    ),
    Ok(
        "ActorManager::GetInstance(void)",
    ),
    Ok(
        "ActorManager::DestroyInstance(void)",
    ),
    Ok(
        "ActorManager::ActorManager(void)",
    ),
    Ok(
        "ActorManager::~ActorManager(void)",
    ),
    Ok(
        "ActorManager::AddActor(Actor *)",
    ),
    Ok(
        "ActorManager::AddActorToBank(Actor *)",
    ),
    Ok(
        "ActorManager::RemoveActor(int, bool)",
    ),
    Ok(
        "ActorManager::RemoveActorByDSGPointer(ActorDSG *, bool)",
    ),
    Ok(
        "ActorManager::RemoveAllActors(void)",
    ),
    Ok(
        "ActorManager::AddSpawnPoint(SpawnPoint *)",
    ),
    Ok(
        "ActorManager::FireProjectile(tUidUnaligned, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, unsigned int)",
    ),
    Ok(
        "ActorManager::Update(unsigned int)",
    ),
    Ok(
        "ActorManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "ActorManager::GetActorByName(char const *)",
    ),
    Ok(
        "ActorManager::GetActorByUID(tUidUnaligned)",
    ),
    Ok(
        "ActorManager::GetActorsByType(char const *)",
    ),
    Ok(
        "ActorManager::SetupConsoleFunctions(void)",
    ),
    Ok(
        "ActorManager::WithinAliveRange(int)",
    ),
    Ok(
        "ActorManager::AddFlyingActor(int, char **)",
    ),
    Ok(
        "ActorManager::AddFlyingActorByLocator(int, char **)",
    ),
    Ok(
        "ActorManager::AddSpawnPointScript(int, char **)",
    ),
    Ok(
        "ActorManager::AddSpawnPointByLocatorScript(int, char **)",
    ),
    Ok(
        "ActorManager::SetProjectileStats(int, char **)",
    ),
    Ok(
        "ActorManager::PreallocateActors(int, char **)",
    ),
    Ok(
        "ActorManager::SetActorRotationSpeed(int, char **)",
    ),
    Ok(
        "ActorManager::AddShield(int, char **)",
    ),
    Ok(
        "ActorManager::GetSpawnPointByName(char const *)",
    ),
    Ok(
        "ActorManager::RemoveAllSpawnPoints(void)",
    ),
    Ok(
        "ActorManager::CreateActor(tUidUnaligned, tUidUnaligned, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "ActorManager::AddBehaviour(int, char **)",
    ),
    Ok(
        "ActorManager::SetCollisionAttributes(int, char **)",
    ),
    Ok(
        "FlyingActor::FlyingActor(void)",
    ),
    Ok(
        "FlyingActor::~FlyingActor(void)",
    ),
    Ok(
        "FlyingActor::Init(char const *, char const *)",
    ),
    Ok(
        "FlyingActor::Update(unsigned int)",
    ),
    Ok(
        "FlyingActor::AddBehaviour(Behaviour *)",
    ),
    Ok(
        "FlyingActor::Activate(void)",
    ),
    Ok(
        "FlyingActor::DeactivateBehaviours(void)",
    ),
    Ok(
        "FlyingActor::SetRotationSpeed(float)",
    ),
    Ok(
        "FlyingActor::LookAt(RadicalMathLibrary::Vector const &, unsigned int)",
    ),
    Ok(
        "FlyingActor::ReleaseBehaviours(void)",
    ),
    Ok(
        "FlyingActor::FindWaypoint(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, int)",
    ),
    Ok(
        "FlyingActor::MoveTo(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "FlyingActor::ChangeBehaviour(Behaviour *)",
    ),
    Ok(
        "FlyingActor::UpdateMovement(unsigned int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "FlyingActor::FindGroundIntersection(float *, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "FlyingActor::RecieveEvent(int, CStateProp *)",
    ),
    Ok(
        "Actor::Actor(void)",
    ),
    Ok(
        "Actor::~Actor(void)",
    ),
    Ok(
        "Actor::SetPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "Actor::GetPosition(RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "Actor::GetTransform(RadicalMathLibrary::Matrix *) const",
    ),
    Ok(
        "Actor::GetDSG(void) const",
    ),
    Ok(
        "Actor::SetTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "Actor::SetState(int)",
    ),
    Ok(
        "Actor::GetState(void) const",
    ),
    Ok(
        "Actor::GetName(void) const",
    ),
    Ok(
        "Actor::GetUID(void) const",
    ),
    Ok(
        "Actor::GetStatePropUID(void) const",
    ),
    Ok(
        "Actor::SetUID(tUidUnaligned)",
    ),
    Ok(
        "Actor::SetStatePropID(unsigned int)",
    ),
    Ok(
        "Actor::AddToDSG(void)",
    ),
    Ok(
        "Actor::RemoveFromDSG(void)",
    ),
    Ok(
        "Actor::LoadShield(char const *)",
    ),
    Ok(
        "Actor::LoadTractorBeam(char const *)",
    ),
    Ok(
        "Actor::ActivateTractorBeam(void)",
    ),
    Ok(
        "Actor::DeactivateTractorBeam(void)",
    ),
    Ok(
        "Actor::IsTractorBeamOn(void) const",
    ),
    Ok(
        "Actor::FillIntersectionList(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Actor::FillIntersectionListDynamics(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Actor::FillIntersectionListStatics(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Actor::FillIntersectionListFence(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "AttackBehaviour::AttackBehaviour(float, float)",
    ),
    Ok(
        "AttackBehaviour::~AttackBehaviour(void)",
    ),
    Ok(
        "AttackBehaviour::Apply(Actor *, unsigned int)",
    ),
    Ok(
        "AttackBehaviour::SetMaxFiringRange(float)",
    ),
    Ok(
        "AttackBehaviour::SetFiringArc(float)",
    ),
    Ok(
        "AttackBehaviour::SetActorMoveSpeed(float)",
    ),
    Ok(
        "AttackBehaviour::SetMovementIntervals(float)",
    ),
    Ok(
        "AttackBehaviour::IsMovementDisabled(void) const",
    ),
    Ok(
        "AttackBehaviour::Activate(void)",
    ),
    Ok(
        "AttackBehaviour::Deactivate(void)",
    ),
    Ok(
        "AttackBehaviour::WithinFiringRange(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
    ),
    Ok(
        "AttackBehaviour::WithinFiringArc(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
    ),
    Ok(
        "AttackBehaviour::IsTooClose(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
    ),
    Ok(
        "AttackBehaviour::MoveIntoAttackRange(Actor *, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "AttackBehaviour::MoveAway(Actor *, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "AttackBehaviour::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "EvasionBehaviour::EvasionBehaviour(float, float, float, float, float)",
    ),
    Ok(
        "EvasionBehaviour::~EvasionBehaviour(void)",
    ),
    Ok(
        "EvasionBehaviour::Apply(Actor *, unsigned int)",
    ),
    Ok(
        "EvasionBehaviour::Activate(void)",
    ),
    Ok(
        "EvasionBehaviour::Deactivate(void)",
    ),
    Ok(
        "EvasionBehaviour::SetSpeed(float)",
    ),
    Ok(
        "EvasionBehaviour::FindEvasionDestination(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "EvasionBehaviour::FindGroundHeight(float, float, float *) const",
    ),
    Ok(
        "SpawnPoint::SpawnPoint(char const *, char const *, RadicalMathLibrary::Sphere const &, unsigned int)",
    ),
    Ok(
        "SpawnPoint::~SpawnPoint(void)",
    ),
    Ok(
        "SpawnPoint::AddBehaviour(Behaviour *)",
    ),
    Ok(
        "SpawnPoint::OnTrigger(unsigned int)",
    ),
    Ok(
        "SpawnPoint::CanRespawn(void) const",
    ),
    Ok(
        "SpawnPoint::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "Projectile::Projectile(void)",
    ),
    Ok(
        "Projectile::~Projectile(void)",
    ),
    Ok(
        "Projectile::SetSpeed(float)",
    ),
    Ok(
        "Projectile::Init(char const *, char const *)",
    ),
    Ok(
        "Projectile::Update(unsigned int)",
    ),
    Ok(
        "Projectile::AddBehaviour(Behaviour *)",
    ),
    Ok(
        "Projectile::Fire(void)",
    ),
    Ok(
        "Projectile::CalculateIntersections(void)",
    ),
    Ok(
        "Projectile::AdjustCollisionPosition(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "Projectile::ApplyDamage(DynaPhysDSG *)",
    ),
    Ok(
        "Projectile::IsJumpingPlayer(DynaPhysDSG *)",
    ),
    Ok(
        "ActorDSG::ActorDSG(void)",
    ),
    Ok(
        "ActorDSG::~ActorDSG(void)",
    ),
    Ok(
        "ActorDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
    ),
    Ok(
        "ActorDSG::SetRank(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "ActorDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "ActorDSG::ApplyForce(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "ActorDSG::RecieveEvent(int, CStateProp *)",
    ),
    Ok(
        "ActorDSG::HandleEvent(StatePropDSG::Event)",
    ),
    Ok(
        "ActorDSG::LoadShield(char const *)",
    ),
    Ok(
        "ActorDSG::LoadTractorBeam(char const *)",
    ),
    Ok(
        "ActorDSG::ActivateTractorBeam(void)",
    ),
    Ok(
        "ActorDSG::DeactivateTractorBeam(void)",
    ),
    Ok(
        "ActorDSG::IsTractorBeamOn(void) const",
    ),
    Ok(
        "ActorDSG::Display(void)",
    ),
    Ok(
        "ActorDSG::AdvanceAnimation(float)",
    ),
    Ok(
        "ActorDSG::DestroyShield(void)",
    ),
    Ok(
        "ActorDSG::PlayShieldGettingHit(void)",
    ),
    Ok(
        "ActorDSG::RestoreShield(void)",
    ),
    Ok(
        "ActorDSG::SetPhysicsProperties(float, float, float, float)",
    ),
    Ok(
        "ActorDSG::LoadSetup(CStatePropData *, int, RadicalMathLibrary::Matrix const &, CollisionAttributes *, bool, bool, tEntityStore *)",
    ),
    Ok(
        "ActorDSG::GenerateCoins(int)",
    ),
    Ok(
        "ActorDSG::CastsShadow(void)",
    ),
    Ok(
        "UFOAttackBehaviour::UFOAttackBehaviour(float)",
    ),
    Ok(
        "UFOAttackBehaviour::~UFOAttackBehaviour(void)",
    ),
    Ok(
        "UFOAttackBehaviour::Apply(Actor *, unsigned int)",
    ),
    Ok(
        "UFOAttackBehaviour::SetMaxFiringRange(float)",
    ),
    Ok(
        "UFOAttackBehaviour::SetActorMoveSpeed(float)",
    ),
    Ok(
        "UFOAttackBehaviour::Activate(void)",
    ),
    Ok(
        "UFOAttackBehaviour::Deactivate(void)",
    ),
    Ok(
        "UFOAttackBehaviour::FindTarget(RadicalMathLibrary::Vector const &, ActorDSG const *)",
    ),
    Ok(
        "ActorAnimationWasp::ActorAnimationWasp(void)",
    ),
    Ok(
        "ActorAnimationWasp::~ActorAnimationWasp(void)",
    ),
    Ok(
        "ActorAnimationWasp::SetState(int)",
    ),
    Ok(
        "ActorAnimationWasp::Update(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix *, float, tCompositeDrawable *)",
    ),
    Ok(
        "WingAnimator::WingAnimator(float)",
    ),
    Ok(
        "WingAnimator::~WingAnimator(void)",
    ),
    Ok(
        "WingAnimator::Advance(float)",
    ),
    Ok(
        "WingAnimator::UpdateForRender(tCompositeDrawable *)",
    ),
    Ok(
        "ActorAnimationUFO::ActorAnimationUFO(void)",
    ),
    Ok(
        "ActorAnimationUFO::~ActorAnimationUFO(void)",
    ),
    Ok(
        "ActorAnimationUFO::Update(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix *, float, tCompositeDrawable *)",
    ),
    Ok(
        "AttractionBehaviour::AttractionBehaviour(float, float, float)",
    ),
    Ok(
        "AttractionBehaviour::~AttractionBehaviour(void)",
    ),
    Ok(
        "AttractionBehaviour::Apply(Actor *, unsigned int)",
    ),
    Ok(
        "AttractionBehaviour::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "AttractionBehaviour::Activate(void)",
    ),
    Ok(
        "AttractionBehaviour::Deactivate(void)",
    ),
    Ok(
        "AttractionBehaviour::WithinSensoryRange(Actor const &, Avatar const &) const",
    ),
    Ok(
        "AttractionBehaviour::FindNewWatchPosition(Actor const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "ProjectileDSG::ProjectileDSG(void)",
    ),
    Ok(
        "ProjectileDSG::~ProjectileDSG(void)",
    ),
    Ok(
        "ProjectileDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
    ),
    Ok(
        "ProjectileDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "UFOBeamAlwaysOn::UFOBeamAlwaysOn(void)",
    ),
    Ok(
        "UFOBeamAlwaysOn::~UFOBeamAlwaysOn(void)",
    ),
    Ok(
        "UFOBeamAlwaysOn::Apply(Actor *, unsigned int)",
    ),
    Ok(
        "UFOBehaviour::UFOBehaviour(void)",
    ),
    Ok(
        "UFOBehaviour::~UFOBehaviour(void)",
    ),
    Ok(
        "UFOBehaviour::Apply(Actor *, unsigned int)",
    ),
    Ok(
        "UFOBehaviour::SetCharacterRespawnPosition(EventLocator *)",
    ),
    Ok(
        "UFOBehaviour::WithinTractorBeamRange(RadicalMathLibrary::Vector const &, IEntityDSG *) const",
    ),
    Ok(
        "UFOBehaviour::SuckIntoUFO(RadicalMathLibrary::Vector const &, DynaPhysDSG *, float)",
    ),
    Ok(
        "UFOBehaviour::ReachedTopOfTractorBeam(RadicalMathLibrary::Vector const &, DynaPhysDSG *)",
    ),
    Ok(
        "UFOBehaviour::DestroyObject(DynaPhysDSG *)",
    ),
    Ok(
        "UFOBehaviour::GetTargetsInTractorRange(RadicalMathLibrary::Vector &, float, SwapArray<DynaPhysDSG *> *)",
    ),
    Ok(
        "IntersectionList::IntersectionList(void)",
    ),
    Ok(
        "IntersectionList::~IntersectionList(void)",
    ),
    Ok(
        "IntersectionList::Clear(void)",
    ),
    Ok(
        "IntersectionList::ClearDynamics(void)",
    ),
    Ok(
        "IntersectionList::ClearAnimPhys(void)",
    ),
    Ok(
        "IntersectionList::ClearStatics(void)",
    ),
    Ok(
        "IntersectionList::ClearFencePieces(void)",
    ),
    Ok(
        "IntersectionList::TestIntersectionStatics(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "IntersectionList::TestIntersectionDynamics(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *, DynaPhysDSG **)",
    ),
    Ok(
        "IntersectionList::TestIntersection(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "IntersectionList::LineOfSight(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, bool)",
    ),
    Ok(
        "IntersectionList::AddStatic(sim::SimState *)",
    ),
    Ok(
        "IntersectionList::AddDynamic(sim::SimState *, DynaPhysDSG *)",
    ),
    Ok(
        "IntersectionList::AddAnimPhys(sim::SimStateArticulated *)",
    ),
    Ok(
        "IntersectionList::AddFencePiece(FenceEntityDSG *)",
    ),
    Ok(
        "IntersectionList::FillIntersectionListStatics(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "IntersectionList::FillIntersectionListFence(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "IntersectionList::FillIntersectionListDynamics(RadicalMathLibrary::Vector const &, float, bool, DynaPhysDSG *)",
    ),
    Ok(
        "IntersectionList::FillIntersectionListAnimPhys(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "IntersectionList::LineSegmentIntersection(IntersectionList::LineSegment2D const &, IntersectionList::LineSegment2D const &, float *)",
    ),
    Ok(
        "__malloc_alloc_template<0>::_S_oom_malloc(unsigned int)",
    ),
    Ok(
        "__default_alloc_template<false, 0>::_S_chunk_alloc(unsigned int, int &)",
    ),
    Ok(
        "__default_alloc_template<false, 0>::_S_refill(unsigned int)",
    ),
    Ok(
        "vector<Actor *, s2alloc<Actor *> >::_M_insert_aux(Actor **, Actor *const &)",
    ),
    Ok(
        "_Deque_base<Behaviour *, allocator<Behaviour *>, 0>::_M_destroy_nodes(Behaviour ***, Behaviour ***)",
    ),
    Ok(
        "_Deque_base<Behaviour *, allocator<Behaviour *>, 0>::~_Deque_base(void)",
    ),
    Ok(
        "_Deque_base<Behaviour *, allocator<Behaviour *>, 0>::_M_create_nodes(Behaviour ***, Behaviour ***)",
    ),
    Ok(
        "_Deque_base<Behaviour *, allocator<Behaviour *>, 0>::_M_initialize_map(unsigned int)",
    ),
    Ok(
        "deque<Behaviour *, allocator<Behaviour *>, 0>::_M_reallocate_map(unsigned int, bool)",
    ),
    Ok(
        "deque<Behaviour *, allocator<Behaviour *>, 0>::_M_push_back_aux(Behaviour *const &)",
    ),
    Ok(
        "deque<Behaviour *, allocator<Behaviour *>, 0>::_M_pop_back_aux(void)",
    ),
    Ok(
        "RadicalMathLibrary::Vector * __uninitialized_copy_aux<RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *>(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, __false_type)",
    ),
    Ok(
        "vector<RadicalMathLibrary::Vector, s2alloc<RadicalMathLibrary::Vector> >::_M_insert_aux(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "void fill<RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector>(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "RadicalMathLibrary::Vector * __uninitialized_fill_n_aux<RadicalMathLibrary::Vector *, unsigned int, RadicalMathLibrary::Vector>(RadicalMathLibrary::Vector *, unsigned int, RadicalMathLibrary::Vector const &, __false_type)",
    ),
    Ok(
        "vector<RadicalMathLibrary::Vector, s2alloc<RadicalMathLibrary::Vector> >::insert(RadicalMathLibrary::Vector *, unsigned int, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "Map<sim::CollisionObject *, DynaPhysDSG *>::Map(void)",
    ),
    Ok(
        "MapElement<sim::CollisionObject *, DynaPhysDSG *> * __uninitialized_copy_aux<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, __false_type)",
    ),
    Ok(
        "Map<sim::CollisionObject *, DynaPhysDSG *>::reserve(unsigned int)",
    ),
    Ok(
        "IntersectionList::LineSegment2D * __uninitialized_copy_aux<IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D *>(IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D *, __false_type)",
    ),
    Ok(
        "Map<sim::CollisionObject *, DynaPhysDSG *>::begin(void)",
    ),
    Ok(
        "Map<sim::CollisionObject *, DynaPhysDSG *>::end(void)",
    ),
    Ok(
        "Map<sim::CollisionObject *, DynaPhysDSG *>::clear(void)",
    ),
    Ok(
        "void fill<sim::CollisionObject **, sim::CollisionObject *>(sim::CollisionObject **, sim::CollisionObject **, sim::CollisionObject * const &)",
    ),
    Ok(
        "sim::CollisionObject ** fill_n<sim::CollisionObject **, unsigned int, sim::CollisionObject *>(sim::CollisionObject **, unsigned int, sim::CollisionObject * const &)",
    ),
    Ok(
        "vector<sim::CollisionObject *, s2alloc<sim::CollisionObject *> >::insert(sim::CollisionObject **, unsigned int, sim::CollisionObject *const &)",
    ),
    Ok(
        "void fill<IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D>(IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D const &)",
    ),
    Ok(
        "IntersectionList::LineSegment2D * __uninitialized_fill_n_aux<IntersectionList::LineSegment2D *, unsigned int, IntersectionList::LineSegment2D>(IntersectionList::LineSegment2D *, unsigned int, IntersectionList::LineSegment2D const &, __false_type)",
    ),
    Ok(
        "vector<IntersectionList::LineSegment2D, s2alloc<IntersectionList::LineSegment2D> >::insert(IntersectionList::LineSegment2D *, unsigned int, IntersectionList::LineSegment2D const &)",
    ),
    Ok(
        "vector<sim::CollisionObject *, s2alloc<sim::CollisionObject *> >::_M_insert_aux(sim::CollisionObject **, sim::CollisionObject *const &)",
    ),
    Ok(
        "Map<sim::CollisionObject *, DynaPhysDSG *>::size(void) const",
    ),
    Ok(
        "void __push_heap<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int, int, MapElement<sim::CollisionObject *, DynaPhysDSG *>)",
    ),
    Ok(
        "void __adjust_heap<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int, int, MapElement<sim::CollisionObject *, DynaPhysDSG *>)",
    ),
    Ok(
        "void __make_heap<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *>, int>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int *)",
    ),
    Ok(
        "void sort_heap<MapElement<sim::CollisionObject *, DynaPhysDSG *> *>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *)",
    ),
    Ok(
        "void __partial_sort<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *)",
    ),
    Ok(
        "MapElement<sim::CollisionObject *, DynaPhysDSG *> * __unguarded_partition<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *>)",
    ),
    Ok(
        "void __introsort_loop<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *>, int>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int)",
    ),
    Ok(
        "void __unguarded_linear_insert<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *>)",
    ),
    Ok(
        "void __insertion_sort<MapElement<sim::CollisionObject *, DynaPhysDSG *> *>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *)",
    ),
    Ok(
        "void __unguarded_insertion_sort_aux<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *)",
    ),
    Ok(
        "void __final_insertion_sort<MapElement<sim::CollisionObject *, DynaPhysDSG *> *>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *)",
    ),
    Ok(
        "Map<sim::CollisionObject *, DynaPhysDSG *>::RefreshIfDirty(void) const",
    ),
    Ok(
        "MapElement<sim::CollisionObject *, DynaPhysDSG *> * __lower_bound<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *>, int>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> const &, int *)",
    ),
    Ok(
        "Map<sim::CollisionObject *, DynaPhysDSG *>::find(sim::CollisionObject *const &)",
    ),
    Ok(
        "vector<MapElement<sim::CollisionObject *, DynaPhysDSG *>, s2alloc<MapElement<sim::CollisionObject *, DynaPhysDSG *> > >::_M_insert_aux(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> const &)",
    ),
    Ok(
        "Map<sim::CollisionObject *, DynaPhysDSG *>::insert(sim::CollisionObject *const &, DynaPhysDSG *const &)",
    ),
    Ok(
        "vector<IntersectionList::LineSegment2D, s2alloc<IntersectionList::LineSegment2D> >::_M_insert_aux(IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D const &)",
    ),
    Ok(
        "SpawnPoint type_info function",
    ),
    Ok(
        "ActorManager type_info function",
    ),
    Ok(
        "IntersectionList type_info function",
    ),
    Ok(
        "Actor type_info function",
    ),
    Ok(
        "Behaviour type_info function",
    ),
    Ok(
        "FlyingActor type_info function",
    ),
    Ok(
        "Projectile type_info function",
    ),
    Ok(
        "AttackBehaviour type_info function",
    ),
    Ok(
        "EvasionBehaviour type_info function",
    ),
    Ok(
        "UFOBehaviour type_info function",
    ),
    Ok(
        "UFOAttackBehaviour type_info function",
    ),
    Ok(
        "AttractionBehaviour type_info function",
    ),
    Ok(
        "UFOBeamAlwaysOn type_info function",
    ),
    Ok(
        "ActorDSG type_info function",
    ),
    Ok(
        "ActorAnimation type_info function",
    ),
    Ok(
        "StatePropDSGProcAnimator type_info function",
    ),
    Ok(
        "ActorAnimationWasp type_info function",
    ),
    Ok(
        "WingAnimator type_info function",
    ),
    Ok(
        "ActorAnimationUFO type_info function",
    ),
    Ok(
        "ProjectileDSG type_info function",
    ),
    Ok(
        "SpawnPoint::GetDataType(void) const",
    ),
    Ok(
        "_Vector_alloc_base<sim::CollisionObject *, s2alloc<sim::CollisionObject *>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "Map<sim::CollisionObject *, DynaPhysDSG *>::~Map(void)",
    ),
    Ok(
        "IntersectionList::LineSegment2D::LineSegment2D(void)",
    ),
    Ok(
        "_Vector_alloc_base<IntersectionList::LineSegment2D, s2alloc<IntersectionList::LineSegment2D>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "Actor::Activate(void)",
    ),
    Ok(
        "Actor::DeactivateBehaviours(void)",
    ),
    Ok(
        "Actor::IsMoving(void) const",
    ),
    Ok(
        "Behaviour::~Behaviour(void)",
    ),
    Ok(
        "Behaviour::IsExclusive(void) const",
    ),
    Ok(
        "Behaviour::Activate(void)",
    ),
    Ok(
        "Behaviour::Deactivate(void)",
    ),
    Ok(
        "Behaviour::SetExclusive(bool)",
    ),
    Ok(
        "_Vector_alloc_base<RadicalMathLibrary::Vector, s2alloc<RadicalMathLibrary::Vector>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "FlyingActor::IsMoving(void) const",
    ),
    Ok(
        "Projectile::LookAt(RadicalMathLibrary::Vector const &, unsigned int)",
    ),
    Ok(
        "Projectile::SetRotationSpeed(float)",
    ),
    Ok(
        "Projectile::ReleaseBehaviours(void)",
    ),
    Ok(
        "Projectile::MoveTo(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "_Vector_alloc_base<Actor *, s2alloc<Actor *>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<Locator>::SafeCast(void)",
    ),
    Ok(
        "stack<Behaviour *, deque<Behaviour *, allocator<Behaviour *>, 0> >::~stack(void)",
    ),
    Ok(
        "ActorDSG::GetAIRef(void)",
    ),
    Ok(
        "ActorDSG::DisplaySimpleShadow(void)",
    ),
    Ok(
        "ActorAnimation::~ActorAnimation(void)",
    ),
    Ok(
        "StatePropDSGProcAnimator::~StatePropDSGProcAnimator(void)",
    ),
    Ok(
        "StatePropDSGProcAnimator::Advance(float)",
    ),
    Ok(
        "StatePropDSGProcAnimator::UpdateForRender(tCompositeDrawable *)",
    ),
    Ok(
        "ActorAnimationUFO::SetState(int)",
    ),
    Ok(
        "radLoadInventory::SafeCast<CStatePropData>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tDrawable>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<EventLocator>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<Locator> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<CStatePropData> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tDrawable> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<EventLocator> type_info function",
    ),
    Ok(
        "_Vector_alloc_base<MapElement<sim::CollisionObject *, DynaPhysDSG *>, s2alloc<MapElement<sim::CollisionObject *, DynaPhysDSG *> >, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<EventLocator>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tDrawable>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<CStatePropData>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<Locator>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to ActorManager::ActorRemovalRangeSqr",
    ),
    Ok(
        "global destructors keyed to ActorManager::ActorRemovalRangeSqr",
    ),
    Ok(
        "Action::~Action(void)",
    ),
    Ok(
        "Action::IsSlave(void) const",
    ),
    Ok(
        "Action::WakeUp(float)",
    ),
    Ok(
        "Action::DoSimulation(float)",
    ),
    Ok(
        "Action::Update(float)",
    ),
    Ok(
        "Action::Clear(void)",
    ),
    Ok(
        "SlaveAction::IsSlave(void) const",
    ),
    Ok(
        "WalkerLocomotionAction::WalkerLocomotionAction(Character *)",
    ),
    Ok(
        "WalkerLocomotionAction::~WalkerLocomotionAction(void)",
    ),
    Ok(
        "WalkerLocomotionAction::PlayDriver(void)",
    ),
    Ok(
        "WalkerLocomotionAction::StopDriver(void)",
    ),
    Ok(
        "WalkerLocomotionAction::SwitchLocomotion(void)",
    ),
    Ok(
        "WalkerLocomotionAction::SolveActualDir(float, float)",
    ),
    Ok(
        "WalkerLocomotionAction::SolveActualSpeed(float, float)",
    ),
    Ok(
        "WalkerLocomotionAction::WakeUp(float)",
    ),
    Ok(
        "WalkerLocomotionAction::DoSimulation(float)",
    ),
    Ok(
        "WalkerLocomotionAction::Update(float)",
    ),
    Ok(
        "InCarAction::InCarAction(Character *)",
    ),
    Ok(
        "InCarAction::~InCarAction(void)",
    ),
    Ok(
        "InCarAction::WakeUp(float)",
    ),
    Ok(
        "InCarAction::IWannaRock(bool)",
    ),
    Ok(
        "InCarAction::DoSimulation(float)",
    ),
    Ok(
        "InCarAction::Update(float)",
    ),
    Ok(
        "InCarAction::Clear(void)",
    ),
    Ok(
        "HoldAnimationAction::HoldAnimationAction(Character *, char const *, float)",
    ),
    Ok(
        "HoldAnimationAction::~HoldAnimationAction(void)",
    ),
    Ok(
        "HoldAnimationAction::WakeUp(float)",
    ),
    Ok(
        "HoldAnimationAction::DoSimulation(float)",
    ),
    Ok(
        "HoldAnimationAction::Update(float)",
    ),
    Ok(
        "HoldAnimationAction::Clear(void)",
    ),
    Ok(
        "SteerAction::SteerAction(Character *, char const *, float)",
    ),
    Ok(
        "SteerAction::ShouldRelease(void)",
    ),
    Ok(
        "ReverseAction::ReverseAction(Character *, char const *, float)",
    ),
    Ok(
        "ReverseAction::ShouldRelease(void)",
    ),
    Ok(
        "AccelAction::AccelAction(Character *, char const *, float)",
    ),
    Ok(
        "AccelAction::ShouldRelease(void)",
    ),
    Ok(
        "DecelAction::DecelAction(Character *, char const *, float)",
    ),
    Ok(
        "DecelAction::ShouldRelease(void)",
    ),
    Ok(
        "Arrive::Arrive(Character *, RadicalMathLibrary::Vector &, bool)",
    ),
    Ok(
        "Arrive::~Arrive(void)",
    ),
    Ok(
        "Arrive::WakeUp(float)",
    ),
    Ok(
        "Arrive::DoSimulation(float)",
    ),
    Ok(
        "Arrive::Update(float)",
    ),
    Ok(
        "Arrive::Clear(void)",
    ),
    Ok(
        "Orient::Orient(Character *, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "Orient::~Orient(void)",
    ),
    Ok(
        "Orient::WakeUp(float)",
    ),
    Ok(
        "Orient::DoSimulation(float)",
    ),
    Ok(
        "Orient::Update(float)",
    ),
    Ok(
        "Position::Position(Character *, RadicalMathLibrary::Vector &, float, bool)",
    ),
    Ok(
        "Position::~Position(void)",
    ),
    Ok(
        "Position::WakeUp(float)",
    ),
    Ok(
        "Position::DoSimulation(float)",
    ),
    Ok(
        "Position::Update(float)",
    ),
    Ok(
        "GroundSnap::WakeUp(float)",
    ),
    Ok(
        "PlayAnimationAction::PlayAnimationAction(Character *, char const *, float)",
    ),
    Ok(
        "PlayAnimationAction::PlayAnimationAction(Character *, tName const &, float)",
    ),
    Ok(
        "PlayAnimationAction::AbortWhenMovementOccurs(bool)",
    ),
    Ok(
        "PlayAnimationAction::WakeUp(float)",
    ),
    Ok(
        "PlayAnimationAction::DoSimulation(float)",
    ),
    Ok(
        "PlayAnimationAction::Update(float)",
    ),
    Ok(
        "PlayAnimationAction::ShouldAbort(void)",
    ),
    Ok(
        "PlayAnimationAction::Clear(void)",
    ),
    Ok(
        "PlayIdleAnimationAction::PlayIdleAnimationAction(Character *, char const *, float)",
    ),
    Ok(
        "PlayIdleAnimationAction::WakeUp(float)",
    ),
    Ok(
        "PlayIdleAnimationAction::Clear(void)",
    ),
    Ok(
        "PlayIdleAnimationAction::Abort(void)",
    ),
    Ok(
        "CarDoorAction::CarDoorAction(Vehicle *, Vehicle::DoorAction, Vehicle::Door, float, float, Character *, Sequencer *)",
    ),
    Ok(
        "CarDoorAction::WakeUp(float)",
    ),
    Ok(
        "CarDoorAction::DoSimulation(float)",
    ),
    Ok(
        "CarDoorAction::Update(float)",
    ),
    Ok(
        "CarDoorAction::Clear(void)",
    ),
    Ok(
        "ReleaseDoorsAction::Update(float)",
    ),
    Ok(
        "JumpAction::JumpAction(Character *, char const *, float)",
    ),
    Ok(
        "JumpAction::~JumpAction(void)",
    ),
    Ok(
        "JumpAction::SetRootTransform(void)",
    ),
    Ok(
        "JumpAction::SetRootPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "JumpAction::Reset(RadicalMathLibrary::Vector const &, bool)",
    ),
    Ok(
        "JumpAction::Reset(float, bool)",
    ),
    Ok(
        "JumpAction::WakeUp(float)",
    ),
    Ok(
        "JumpAction::DoSimulation(float)",
    ),
    Ok(
        "JumpAction::SolveActualDir(float, float)",
    ),
    Ok(
        "JumpAction::Update(float)",
    ),
    Ok(
        "JumpAction::TestForJumpAgain(RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "JumpAction::Clear(void)",
    ),
    Ok(
        "DodgeAction::DodgeAction(Character *)",
    ),
    Ok(
        "DodgeAction::WakeUp(float)",
    ),
    Ok(
        "DodgeAction::DoSimulation(float)",
    ),
    Ok(
        "DodgeAction::Update(float)",
    ),
    Ok(
        "DodgeAction::Clear(void)",
    ),
    Ok(
        "DodgeAction::SolveActualDir(float, float)",
    ),
    Ok(
        "CringeAction::CringeAction(Character *)",
    ),
    Ok(
        "CringeAction::WakeUp(float)",
    ),
    Ok(
        "CringeAction::DoSimulation(float)",
    ),
    Ok(
        "CringeAction::Update(float)",
    ),
    Ok(
        "CringeAction::Clear(void)",
    ),
    Ok(
        "FlailAction::FlailAction(Character *)",
    ),
    Ok(
        "FlailAction::WakeUp(float)",
    ),
    Ok(
        "FlailAction::DoSimulation(float)",
    ),
    Ok(
        "FlailAction::Update(float)",
    ),
    Ok(
        "FlailAction::Clear(void)",
    ),
    Ok(
        "GetUpAction::GetUpAction(Character *)",
    ),
    Ok(
        "GetUpAction::WakeUp(float)",
    ),
    Ok(
        "GetUpAction::DoSimulation(float)",
    ),
    Ok(
        "GetUpAction::Update(float)",
    ),
    Ok(
        "GetUpAction::Clear(void)",
    ),
    Ok(
        "ChangeLocomotion::Update(float)",
    ),
    Ok(
        "ChangeNPCControllerState::Update(float)",
    ),
    Ok(
        "ChangeNPCControllerState::Abort(void)",
    ),
    Ok(
        "KickAction::Update(float)",
    ),
    Ok(
        "SurfAction::SurfAction(Character *)",
    ),
    Ok(
        "SurfAction::ShouldAbort(void)",
    ),
    Ok(
        "SurfAction::Update(float)",
    ),
    Ok(
        "ActionController::ActionController(void)",
    ),
    Ok(
        "ActionController::~ActionController(void)",
    ),
    Ok(
        "ActionController::Clear(void)",
    ),
    Ok(
        "ActionController::WakeUp(float)",
    ),
    Ok(
        "ActionController::DoSimulation(float)",
    ),
    Ok(
        "ActionController::Update(float)",
    ),
    Ok(
        "Sequencer::Sequencer(void)",
    ),
    Ok(
        "Sequencer::~Sequencer(void)",
    ),
    Ok(
        "Sequencer::ClearSequence(Sequencer::sSequence *)",
    ),
    Ok(
        "Sequencer::Clear(void)",
    ),
    Ok(
        "Sequencer::BeginSequence(void)",
    ),
    Ok(
        "Sequencer::EndSequence(void)",
    ),
    Ok(
        "Sequencer::AddAction(float, float, Action *)",
    ),
    Ok(
        "Sequencer::AddActionToSequence(float, float, Action *)",
    ),
    Ok(
        "Sequencer::IsBusy(void) const",
    ),
    Ok(
        "Sequencer::WakeUp(float)",
    ),
    Ok(
        "Sequencer::DoSimulation(float)",
    ),
    Ok(
        "Sequencer::Update(float)",
    ),
    Ok(
        "Task::Task(void)",
    ),
    Ok(
        "Task::~Task(void)",
    ),
    Ok(
        "Task::GetStatus(void)",
    ),
    Ok(
        "Task::SetStatus(Status)",
    ),
    Ok(
        "Task::IsSleeping(void)",
    ),
    Ok(
        "Task::Run(void)",
    ),
    Ok(
        "Task::IsRunning(void)",
    ),
    Ok(
        "Task::Done(void)",
    ),
    Ok(
        "Task::IsDone(void)",
    ),
    Ok(
        "Task type_info function",
    ),
    Ok(
        "Action type_info function",
    ),
    Ok(
        "SlaveAction type_info function",
    ),
    Ok(
        "WalkerLocomotionAction type_info function",
    ),
    Ok(
        "InCarAction type_info function",
    ),
    Ok(
        "HoldAnimationAction type_info function",
    ),
    Ok(
        "SteerAction::~SteerAction(void)",
    ),
    Ok(
        "SteerAction type_info function",
    ),
    Ok(
        "ReverseAction::~ReverseAction(void)",
    ),
    Ok(
        "ReverseAction type_info function",
    ),
    Ok(
        "AccelAction::~AccelAction(void)",
    ),
    Ok(
        "AccelAction type_info function",
    ),
    Ok(
        "DecelAction::~DecelAction(void)",
    ),
    Ok(
        "DecelAction type_info function",
    ),
    Ok(
        "JumpAction type_info function",
    ),
    Ok(
        "DodgeAction::~DodgeAction(void)",
    ),
    Ok(
        "DodgeAction type_info function",
    ),
    Ok(
        "CringeAction::~CringeAction(void)",
    ),
    Ok(
        "CringeAction type_info function",
    ),
    Ok(
        "FlailAction::~FlailAction(void)",
    ),
    Ok(
        "FlailAction type_info function",
    ),
    Ok(
        "GetUpAction::~GetUpAction(void)",
    ),
    Ok(
        "GetUpAction type_info function",
    ),
    Ok(
        "PlayAnimationAction type_info function",
    ),
    Ok(
        "PlayIdleAnimationAction::~PlayIdleAnimationAction(void)",
    ),
    Ok(
        "PlayIdleAnimationAction type_info function",
    ),
    Ok(
        "CarDoorAction::~CarDoorAction(void)",
    ),
    Ok(
        "CarDoorAction type_info function",
    ),
    Ok(
        "ReleaseDoorsAction::~ReleaseDoorsAction(void)",
    ),
    Ok(
        "ReleaseDoorsAction type_info function",
    ),
    Ok(
        "Arrive type_info function",
    ),
    Ok(
        "Orient type_info function",
    ),
    Ok(
        "Position type_info function",
    ),
    Ok(
        "GroundSnap type_info function",
    ),
    Ok(
        "ChangeLocomotion::~ChangeLocomotion(void)",
    ),
    Ok(
        "ChangeLocomotion type_info function",
    ),
    Ok(
        "ChangeNPCControllerState::~ChangeNPCControllerState(void)",
    ),
    Ok(
        "ChangeNPCControllerState type_info function",
    ),
    Ok(
        "KickAction::~KickAction(void)",
    ),
    Ok(
        "KickAction type_info function",
    ),
    Ok(
        "SurfAction::~SurfAction(void)",
    ),
    Ok(
        "SurfAction type_info function",
    ),
    Ok(
        "Sequencer type_info function",
    ),
    Ok(
        "ActionController type_info function",
    ),
    Ok(
        "Action::Abort(void)",
    ),
    Ok(
        "SlaveAction::~SlaveAction(void)",
    ),
    Ok(
        "PlayAnimationAction::~PlayAnimationAction(void)",
    ),
    Ok(
        "GroundSnap::~GroundSnap(void)",
    ),
    Ok(
        "GroundSnap::DoSimulation(float)",
    ),
    Ok(
        "GroundSnap::Update(float)",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Animation>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Locomotion>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Animation> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Locomotion> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Locomotion>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Animation>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to Action::sMemoryPool",
    ),
    Ok(
        "global destructors keyed to Action::sMemoryPool",
    ),
    Ok(
        "ChaseAI::ChaseAI(Vehicle *, float)",
    ),
    Ok(
        "ChaseAI::~ChaseAI(void)",
    ),
    Ok(
        "ChaseAI::Initialize(void)",
    ),
    Ok(
        "ChaseAI::Reset(void)",
    ),
    Ok(
        "ChaseAI::Update(float)",
    ),
    Ok(
        "ChaseAI::DoCatchUp(float)",
    ),
    Ok(
        "ChaseAI::MustRepopulateSegments(void)",
    ),
    Ok(
        "ChaseAI::TestReachedTarget(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "ChaseAI::GetClosestPathElementToTarget(RadicalMathLibrary::Vector &, RoadManager::PathElement &, RoadSegment *&, float &, float &)",
    ),
    Ok(
        "ChaseAI::UpdateTarget(void)",
    ),
    Ok(
        "ChaseAI::Beeline(float)",
    ),
    Ok(
        "ChaseAI::TestIntersectBBox(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, sim::CollisionVolume *)",
    ),
    Ok(
        "ChaseAI::RegisterHudMapIcon(void)",
    ),
    Ok(
        "PotentialField::PotentialField(void)",
    ),
    Ok(
        "PotentialField::~PotentialField(void)",
    ),
    Ok(
        "Potentials::Potentials(void)",
    ),
    Ok(
        "Potentials::~Potentials(void)",
    ),
    Ok(
        "TrafficAI::TrafficAI(Vehicle *)",
    ),
    Ok(
        "TrafficAI::~TrafficAI(void)",
    ),
    Ok(
        "TrafficAI::Init(void)",
    ),
    Ok(
        "TrafficAI::Update(float)",
    ),
    Ok(
        "TrafficAI::StartSwerving(bool)",
    ),
    Ok(
        "TrafficAI::StopSwerving(void)",
    ),
    Ok(
        "TrafficAI::Swerve(void)",
    ),
    Ok(
        "TrafficAI::PerhapsTriggerImpedence(TrafficAI::ObstacleType, float, void *)",
    ),
    Ok(
        "TrafficAI::DecideTurn(void)",
    ),
    Ok(
        "TrafficAI::SetSegmentIndex(unsigned int)",
    ),
    Ok(
        "TrafficAI::RegisterDebugInfo(void)",
    ),
    Ok(
        "TrafficAI::UnregisterDebugInfo(void)",
    ),
    Ok(
        "TrafficAI::GetGoSpeedMps(void)",
    ),
    Ok(
        "TrafficAI::AttemptLaneChange(TrafficAI::ObstacleType, float, void *)",
    ),
    Ok(
        "TrafficAI::SetAISpeed(float)",
    ),
    Ok(
        "TrafficAI::GetAISpeed(void) const",
    ),
    Ok(
        "TrafficAI::MaintainSpeed(float)",
    ),
    Ok(
        "TrafficAI::StopForSomething(float, TrafficAI::ObstacleType, float, void *)",
    ),
    Ok(
        "TrafficAI::GetLookAheadDistance(void)",
    ),
    Ok(
        "TrafficAI::CheckForObstacles(TrafficAI::ObstacleType &, float &, void *&, bool &)",
    ),
    Ok(
        "VehicleAI::VehicleAI(Vehicle *, VehicleAI::VehicleAITypeEnum, bool, int, int, bool)",
    ),
    Ok(
        "VehicleAI::~VehicleAI(void)",
    ),
    Ok(
        "VehicleAI::SetRaceCatchupParams(VehicleAI::RaceCatchupParams const &)",
    ),
    Ok(
        "VehicleAI::SetEvadeCatchupParams(VehicleAI::EvadeCatchupParams const &)",
    ),
    Ok(
        "VehicleAI::SetTargetCatchupParams(VehicleAI::TargetCatchupParams const &)",
    ),
    Ok(
        "VehicleAI::ResetControllerValues(void)",
    ),
    Ok(
        "VehicleAI::Reset(void)",
    ),
    Ok(
        "VehicleAI::Initialize(void)",
    ),
    Ok(
        "VehicleAI::Finalize(void)",
    ),
    Ok(
        "VehicleAI::Update(float)",
    ),
    Ok(
        "VehicleAI::SetActive(bool)",
    ),
    Ok(
        "VehicleAI::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "VehicleAI::GetHeading(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "VehicleAI::SetMaxShortcutSkill(int)",
    ),
    Ok(
        "VehicleAI::SetMinShortcutSkill(int)",
    ),
    Ok(
        "VehicleAI::EnterLimbo(void)",
    ),
    Ok(
        "VehicleAI::ExitLimbo(void)",
    ),
    Ok(
        "VehicleAI::DetermineShortcutSkill(void)",
    ),
    Ok(
        "VehicleAI::ResetCatchUpParams(void)",
    ),
    Ok(
        "VehicleAI::FillPathElements(void)",
    ),
    Ok(
        "VehicleAI::UpdateSelf(void)",
    ),
    Ok(
        "VehicleAI::FollowRoad(void)",
    ),
    Ok(
        "VehicleAI::FindClosestSegment(RadicalMathLibrary::Vector const &, int &, float &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "VehicleAI::ResetSegments(void)",
    ),
    Ok(
        "VehicleAI::ShiftSegments(int, int)",
    ),
    Ok(
        "VehicleAI::FillSegments(void)",
    ),
    Ok(
        "VehicleAI::MustRepopulateSegments(void)",
    ),
    Ok(
        "VehicleAI::GetPosAheadAlongRoad(float, float, int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "VehicleAI::UpdateSegments(void)",
    ),
    Ok(
        "VehicleAI::EvadeTraffic(Vehicle *)",
    ),
    Ok(
        "VehicleAI::DoCatchUp(float)",
    ),
    Ok(
        "VehicleAI::DoSteering(void)",
    ),
    Ok(
        "VehicleAI::CheckState(float)",
    ),
    Ok(
        "VehicleAI::DriveTowards(RadicalMathLibrary::Vector *, float &, float &)",
    ),
    Ok(
        "VehicleAI::SetDestination(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "VehicleAI::SetNextDestination(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "VehicleAI::FindClosestPathElement(RadicalMathLibrary::Vector &, RoadManager::PathElement &, RoadSegment *&, float &, float &, bool)",
    ),
    Ok(
        "VehicleAI::GetRacePathInfo(RoadManager::PathElement &, RoadSegment *&, float &, float &)",
    ),
    Ok(
        "WaypointAI::WaypointAI(Vehicle *, bool, float, bool)",
    ),
    Ok(
        "WaypointAI::~WaypointAI(void)",
    ),
    Ok(
        "WaypointAI::Update(float)",
    ),
    Ok(
        "WaypointAI::Initialize(void)",
    ),
    Ok(
        "WaypointAI::Reset(void)",
    ),
    Ok(
        "WaypointAI::UpdateNeedToWaitForPlayer(float)",
    ),
    Ok(
        "WaypointAI::PossiblyUseTurbo(void)",
    ),
    Ok(
        "WaypointAI::UseTurbo(void)",
    ),
    Ok(
        "WaypointAI::DoCatchUp(float)",
    ),
    Ok(
        "WaypointAI::UpdateNeedsResetOnSpot(float)",
    ),
    Ok(
        "WaypointAI::ClearWaypoints(void)",
    ),
    Ok(
        "WaypointAI::AddWaypoint(Locator *)",
    ),
    Ok(
        "WaypointAI::MustRepopulateSegments(void)",
    ),
    Ok(
        "WaypointAI::SetCurrentWayPoint(int)",
    ),
    Ok(
        "WaypointAI::FollowWaypoints(void)",
    ),
    Ok(
        "WaypointAI::TestReachedTarget(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "WaypointAI::GetClosestPathElementToTarget(RadicalMathLibrary::Vector &, RoadManager::PathElement &, RoadSegment *&, float &, float &)",
    ),
    Ok(
        "WaypointAI::RegisterHudMapIcon(void)",
    ),
    Ok(
        "WaypointAI::TestWaypoint(int)",
    ),
    Ok(
        "VehicleAIRender::~VehicleAIRender(void)",
    ),
    Ok(
        "VehicleAIRender::UnregisterAI(int)",
    ),
    Ok(
        "Potentials type_info function",
    ),
    Ok(
        "PotentialField type_info function",
    ),
    Ok(
        "VehicleAI type_info function",
    ),
    Ok(
        "ChaseAI type_info function",
    ),
    Ok(
        "WaypointAI type_info function",
    ),
    Ok(
        "TrafficAI type_info function",
    ),
    Ok(
        "VehicleAIRender type_info function",
    ),
    Ok(
        "IHudMapIconLocator::IHudMapIconLocator(void)",
    ),
    Ok(
        "IHudMapIconLocator type_info function",
    ),
    Ok(
        "global constructors keyed to ChaseAI::ChaseAI(Vehicle *, float)",
    ),
    Ok(
        "ATCManager::CreateInstance(void)",
    ),
    Ok(
        "ATCManager::GetInstance(void)",
    ),
    Ok(
        "ATCManager::DestroyInstance(void)",
    ),
    Ok(
        "ATCManager::CreateCollisionAttributes(unsigned int, unsigned int, float)",
    ),
    Ok(
        "ATCManager::Init(void)",
    ),
    Ok(
        "ATCManager::SetATCTable(AttributeRow *, unsigned int)",
    ),
    Ok(
        "ATCManager::ATCManager(void)",
    ),
    Ok(
        "ATCManager::~ATCManager(void)",
    ),
    Ok(
        "ATCLoader::ATCLoader(void)",
    ),
    Ok(
        "ATCLoader::~ATCLoader(void)",
    ),
    Ok(
        "ATCLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "ATCLoader type_info function",
    ),
    Ok(
        "radLoadDataLoader::~radLoadDataLoader(void)",
    ),
    Ok(
        "radLoadDataLoader::radLoadDataLoader(void)",
    ),
    Ok(
        "radLoadDataLoader type_info function",
    ),
    Ok(
        "AnimatedCam::Abort(void)",
    ),
    Ok(
        "AnimatedCam::AnimatedCam(void)",
    ),
    Ok(
        "AnimatedCam::~AnimatedCam(void)",
    ),
    Ok(
        "AnimatedCam::AllowSkipping(bool)",
    ),
    Ok(
        "AnimatedCam::CameraSwitchPending(void)",
    ),
    Ok(
        "AnimatedCam::CheckPendingCameraSwitch(void)",
    ),
    Ok(
        "AnimatedCam::ClearCamera(void)",
    ),
    Ok(
        "AnimatedCam::GetName(void) const",
    ),
    Ok(
        "AnimatedCam::GetType(void)",
    ),
    Ok(
        "AnimatedCam::LetterBoxStart(void)",
    ),
    Ok(
        "AnimatedCam::LetterBoxStop(void)",
    ),
    Ok(
        "AnimatedCam::LookupCamera(void)",
    ),
    Ok(
        "AnimatedCam::LookupMulticontroller(void)",
    ),
    Ok(
        "AnimatedCam::OnInit(void)",
    ),
    Ok(
        "AnimatedCam::OnShutdown(void)",
    ),
    Ok(
        "AnimatedCam::Reset(void)",
    ),
    Ok(
        "AnimatedCam::SetCamera(tName)",
    ),
    Ok(
        "AnimatedCam::SetMulticontroller(tName)",
    ),
    Ok(
        "AnimatedCam::SetMissionStartCamera(tName)",
    ),
    Ok(
        "AnimatedCam::SetMissionStartMulticontroller(tName)",
    ),
    Ok(
        "AnimatedCam::SetNextCameraType(SuperCam::Type)",
    ),
    Ok(
        "AnimatedCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "AnimatedCam::Skip(void)",
    ),
    Ok(
        "AnimatedCam::TriggerMissionStartCamera(void)",
    ),
    Ok(
        "AnimatedCam::SetCameraSwitchPending(bool)",
    ),
    Ok(
        "AnimatedCam::SetCameraTransitionFlags(int)",
    ),
    Ok(
        "AnimatedCam::SupressNextLetterbox(void)",
    ),
    Ok(
        "AnimatedCam::Update(unsigned int)",
    ),
    Ok(
        "BumperCam::BumperCam(void)",
    ),
    Ok(
        "BumperCam::~BumperCam(void)",
    ),
    Ok(
        "BumperCam::Update(unsigned int)",
    ),
    Ok(
        "BumperCam::UpdateForPhysics(unsigned int)",
    ),
    Ok(
        "BumperCam::LoadSettings(unsigned char *)",
    ),
    Ok(
        "BumperCam::SetCollisionOffset(RadicalMathLibrary::Vector const *, unsigned int, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "BumperCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "BumperCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "ChaseCam::ChaseCam(void)",
    ),
    Ok(
        "ChaseCam::~ChaseCam(void)",
    ),
    Ok(
        "ChaseCam::Update(unsigned int)",
    ),
    Ok(
        "ChaseCam::LoadSettings(unsigned char *)",
    ),
    Ok(
        "ChaseCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "ChaseCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "ChaseCam::DoCameraCut(void)",
    ),
    Ok(
        "ConversationCam::ConversationCam(void)",
    ),
    Ok(
        "ConversationCam::~ConversationCam(void)",
    ),
    Ok(
        "ConversationCam::Update(unsigned int)",
    ),
    Ok(
        "ConversationCam::LoadSettings(unsigned char *)",
    ),
    Ok(
        "ConversationCam::LockCharacterPositions(void)",
    ),
    Ok(
        "ConversationCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "ConversationCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "ConversationCam::GetNumTargets(void) const",
    ),
    Ok(
        "ConversationCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "ConversationCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "ConversationCam::SetCameraByIndex(unsigned int)",
    ),
    Ok(
        "ConversationCam::SetCameraByName(tName const &)",
    ),
    Ok(
        "ConversationCam::SetCameraDistanceByName(tName const &, float)",
    ),
    Ok(
        "ConversationCam::SetCamBestSide(tName const &)",
    ),
    Ok(
        "ConversationCam::SetCameraDistanceByIndex(unsigned int, float)",
    ),
    Ok(
        "ConversationCam::SetCharacter(int, Character *)",
    ),
    Ok(
        "ConversationCam::SetPcCameraByName(tName const &)",
    ),
    Ok(
        "ConversationCam::SetNpcCameraByName(tName const &)",
    ),
    Ok(
        "ConversationCam::SetNpcIsChild(bool)",
    ),
    Ok(
        "ConversationCam::SetPcIsChild(bool)",
    ),
    Ok(
        "ConversationCam::UsePcCam(void)",
    ),
    Ok(
        "ConversationCam::UseNpcCam(void)",
    ),
    Ok(
        "ConversationCam::OnInit(void)",
    ),
    Ok(
        "ConversationCam::OnShutdown(void)",
    ),
    Ok(
        "DebugCam::DebugCam(void)",
    ),
    Ok(
        "DebugCam::~DebugCam(void)",
    ),
    Ok(
        "DebugCam::Update(unsigned int)",
    ),
    Ok(
        "DebugCam::EnableShake(void)",
    ),
    Ok(
        "DebugCam::DisableShake(void)",
    ),
    Ok(
        "DebugCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "DebugCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "FollowCam::FollowCam(FollowCam::FollowType)",
    ),
    Ok(
        "FollowCam::~FollowCam(void)",
    ),
    Ok(
        "FollowCam::Update(unsigned int)",
    ),
    Ok(
        "FollowCam::UpdateForPhysics(unsigned int)",
    ),
    Ok(
        "FollowCam::LoadSettings(unsigned char *)",
    ),
    Ok(
        "FollowCam::CopyToData(void)",
    ),
    Ok(
        "FollowCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "FollowCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "FollowCam::EnableShake(void)",
    ),
    Ok(
        "FollowCam::DisableShake(void)",
    ),
    Ok(
        "FollowCam::ShouldReverse(void) const",
    ),
    Ok(
        "FollowCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "FollowCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "FollowCam::DoCameraCut(void)",
    ),
    Ok(
        "FollowCam::InitUnstable(void)",
    ),
    Ok(
        "FollowCam::UpdateUnstable(unsigned int)",
    ),
    Ok(
        "FollowCam::InitQuickTurn(void)",
    ),
    Ok(
        "FollowCam::UpdateQuickTurn(unsigned int)",
    ),
    Ok(
        "FollowCam::GetTargetPosition(RadicalMathLibrary::Vector *, bool)",
    ),
    Ok(
        "FollowCam::CalculateRod(RadicalMathLibrary::Vector *, unsigned int, float)",
    ),
    Ok(
        "FollowCam::CalculateTarget(RadicalMathLibrary::Vector *, unsigned int, float)",
    ),
    Ok(
        "FollowCam::GetDesiredRod(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "FollowCam::IsPushingStick(void)",
    ),
    Ok(
        "KullCam::KullCam(void)",
    ),
    Ok(
        "KullCam::~KullCam(void)",
    ),
    Ok(
        "KullCam::Update(unsigned int)",
    ),
    Ok(
        "KullCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "KullCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "RelativeAnimatedCam::RelativeAnimatedCam(void)",
    ),
    Ok(
        "RelativeAnimatedCam::CheckPendingCameraSwitch(void)",
    ),
    Ok(
        "RelativeAnimatedCam::GetName(void) const",
    ),
    Ok(
        "RelativeAnimatedCam::GetType(void)",
    ),
    Ok(
        "RelativeAnimatedCam::LetterBoxStart(void)",
    ),
    Ok(
        "RelativeAnimatedCam::LetterBoxStop(void)",
    ),
    Ok(
        "RelativeAnimatedCam::SetCameraAnimationController(tCameraAnimationController *)",
    ),
    Ok(
        "RelativeAnimatedCam::SetOffsetMatrix(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "RelativeAnimatedCam::Update(unsigned int)",
    ),
    Ok(
        "RailCam::RailCam(void)",
    ),
    Ok(
        "RailCam::~RailCam(void)",
    ),
    Ok(
        "RailCam::OnInit(void)",
    ),
    Ok(
        "RailCam::OnShutdown(void)",
    ),
    Ok(
        "RailCam::Update(unsigned int)",
    ),
    Ok(
        "RailCam::InitController(void)",
    ),
    Ok(
        "RailCam::LoadSettings(unsigned char *)",
    ),
    Ok(
        "RailCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "RailCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "RailCam::GetTargetSpeedModifier(void)",
    ),
    Ok(
        "RailCam::GetTargetPosition(RadicalMathLibrary::Vector *, bool)",
    ),
    Ok(
        "RailCam::IntervalClamp(float &) const",
    ),
    Ok(
        "RailCam::ProjectPointOnLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float &) const",
    ),
    Ok(
        "RailCam::IntersectLineCylinder(int, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const &, float &)",
    ),
    Ok(
        "RailCam::FindCameraPosition_Distance(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "RailCam::FindCameraPosition_Projection(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "RailCam::FinalizeRailPosition(RailCam::SolutionType)",
    ),
    Ok(
        "RailCam::FindCameraLookAt(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "RailCam::TestEval(float)",
    ),
    Ok(
        "RailCam::DrawRail(bool)",
    ),
    Ok(
        "RailCam::DrawHull(bool)",
    ),
    Ok(
        "RailCam::DrawCylinder(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "SineCosShaker::SineCosShaker(void)",
    ),
    Ok(
        "SineCosShaker::~SineCosShaker(void)",
    ),
    Ok(
        "SineCosShaker::SetCamera(tPointCamera *)",
    ),
    Ok(
        "SineCosShaker::ShakeCamera(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, unsigned int)",
    ),
    Ok(
        "SineCosShaker::RegisterDebugInfo(void)",
    ),
    Ok(
        "SineCosShaker::UnregisterDebugInfo(void)",
    ),
    Ok(
        "SineCosShaker::SetShakeData(ShakeEventData const *)",
    ),
    Ok(
        "SuperCam::SuperCam(void)",
    ),
    Ok(
        "SuperCam::~SuperCam(void)",
    ),
    Ok(
        "SuperCam::RegisterDebugControls(void)",
    ),
    Ok(
        "SuperCam::UnregisterDebugControls(void)",
    ),
    Ok(
        "SuperCam::GetPosition(RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "SuperCam::GetTarget(RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "SuperCam::GetHeading(RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "SuperCam::GetHeadingNormalized(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "SuperCam::GetCameraUp(RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "SuperCam::SetFOV(float)",
    ),
    Ok(
        "SuperCam::GetFOV(void) const",
    ),
    Ok(
        "SuperCam::SetCameraValues(unsigned int, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector const *)",
    ),
    Ok(
        "SuperCam::OverrideFOV(bool, float, float)",
    ),
    Ok(
        "SuperCam::DisableOverride(void)",
    ),
    Ok(
        "SuperCam::SetFOVOverride(float)",
    ),
    Ok(
        "SuperCam::SetCamera(tPointCamera *)",
    ),
    Ok(
        "SuperCam::ClampAngle(float *) const",
    ),
    Ok(
        "SuperCam::AdjustAngles(float *, float *, float *) const",
    ),
    Ok(
        "SuperCam::Shutdown(void)",
    ),
    Ok(
        "SuperCam::CorrectDist(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "SuperCam::InitMyController(int)",
    ),
    Ok(
        "SuperCam::ShutDownMyController(void)",
    ),
    Ok(
        "SuperCam::GetCameraNonConst(void)",
    ),
    Ok(
        "SuperCam::SphericalMotion(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, float) const",
    ),
    Ok(
        "SuperCam::UpdateVUP(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector)",
    ),
    Ok(
        "SuperCam::EaseMotion(float, float, float)",
    ),
    Ok(
        "SuperCam::DoCameraTransition(bool, unsigned int)",
    ),
    Ok(
        "SuperCam::SetupShake(void)",
    ),
    Ok(
        "SuperCam::EndShake(void)",
    ),
    Ok(
        "SuperCam::SetupTransition(bool)",
    ),
    Ok(
        "SuperCam::EndTransition(bool)",
    ),
    Ok(
        "SuperCam::TransitionCamera(float, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, float *, unsigned int, bool)",
    ),
    Ok(
        "SuperCam::TransitionFOV(float, float *, unsigned int)",
    ),
    Ok(
        "SuperCam::EaseIn(float, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, unsigned int)",
    ),
    Ok(
        "SuperCam::SetCameraShakerData(ShakeEventData const *)",
    ),
    Ok(
        "SuperCamCentral::SuperCamCentral(void)",
    ),
    Ok(
        "SuperCamCentral::~SuperCamCentral(void)",
    ),
    Ok(
        "SuperCamCentral::Init(bool)",
    ),
    Ok(
        "SuperCamCentral::IsInit(void) const",
    ),
    Ok(
        "SuperCamCentral::UpdateCameraCollisionSpherePosition(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "SuperCamCentral::UpdateCameraCollisionSphereRadius(float)",
    ),
    Ok(
        "SuperCamCentral::Update(unsigned int, bool)",
    ),
    Ok(
        "SuperCamCentral::PreCollisionPrep(void)",
    ),
    Ok(
        "SuperCamCentral::AddCameraCollisionOffset(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "SuperCamCentral::RegisterSuperCam(SuperCam *)",
    ),
    Ok(
        "SuperCamCentral::UnregisterSuperCam(SuperCam *)",
    ),
    Ok(
        "SuperCamCentral::UnregisterSuperCam(unsigned int)",
    ),
    Ok(
        "SuperCamCentral::GetActiveSuperCamIndex(void) const",
    ),
    Ok(
        "SuperCamCentral::GetSuperCam(SuperCam::Type) const",
    ),
    Ok(
        "SuperCamCentral::ToggleSuperCam(bool, bool)",
    ),
    Ok(
        "SuperCamCentral::SelectSuperCam(unsigned int, int, unsigned int)",
    ),
    Ok(
        "SuperCamCentral::SelectSuperCam(SuperCam::Type, int, unsigned int)",
    ),
    Ok(
        "SuperCamCentral::SelectSuperCam(SuperCam *, int, unsigned int)",
    ),
    Ok(
        "SuperCamCentral::SetCamera(tPointCamera *)",
    ),
    Ok(
        "SuperCamCentral::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "SuperCamCentral::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "SuperCamCentral::SetActiveSuperCam(unsigned int, int, unsigned int)",
    ),
    Ok(
        "SuperCamCentral::SubmitStatics(void)",
    ),
    Ok(
        "SuperCamCentral::UpdateForPhysics(unsigned int)",
    ),
    Ok(
        "SuperCamCentral::AllowCameraToggle(void)",
    ),
    Ok(
        "SuperCamCentral::AllowAutoCameraChange(void)",
    ),
    Ok(
        "SuperCamCentral::RegisterFOVLocator(FOVLocator *)",
    ),
    Ok(
        "SuperCamCentral::UnregisterFOVLocator(void)",
    ),
    Ok(
        "SuperCamCentral::NoTransition(void)",
    ),
    Ok(
        "SuperCamCentral::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "SuperCamCentral::ToggleFirstPerson(int)",
    ),
    Ok(
        "SuperCamCentral::IsCutCam(void)",
    ),
    Ok(
        "SuperCamCentral::LoadData(unsigned char const *, unsigned int)",
    ),
    Ok(
        "SuperCamCentral::SaveData(unsigned char *, unsigned int)",
    ),
    Ok(
        "SuperCamCentral::ResetData(void)",
    ),
    Ok(
        "SuperCamCentral::IsLegalType(SuperCam::Type)",
    ),
    Ok(
        "SuperCamCentral::GetNewFollowCamDataChunk(void)",
    ),
    Ok(
        "SuperCamCentral::FindFCD(unsigned int)",
    ),
    Ok(
        "SuperCamController::SuperCamController(void)",
    ),
    Ok(
        "SuperCamController::~SuperCamController(void)",
    ),
    Ok(
        "SuperCamController::LoadControllerMappings(unsigned int)",
    ),
    Ok(
        "SuperCamController::OnButtonDown(int, int, Button const *)",
    ),
    Ok(
        "SuperCamManager::CreateInstance(void)",
    ),
    Ok(
        "SuperCamManager::GetInstance(void)",
    ),
    Ok(
        "SuperCamManager::DestroyInstance(void)",
    ),
    Ok(
        "SuperCamManager::Init(bool)",
    ),
    Ok(
        "SuperCamManager::GetSCC(int)",
    ),
    Ok(
        "SuperCamManager::PreCollisionPrep(void)",
    ),
    Ok(
        "SuperCamManager::Update(unsigned int, bool)",
    ),
    Ok(
        "SuperCamManager::SubmitStatics(void)",
    ),
    Ok(
        "SuperCamManager::ToggleFirstPerson(int)",
    ),
    Ok(
        "SuperCamManager::SuperCamManager(void)",
    ),
    Ok(
        "SuperCamManager::~SuperCamManager(void)",
    ),
    Ok(
        "TrackerCam::TrackerCam(void)",
    ),
    Ok(
        "TrackerCam::~TrackerCam(void)",
    ),
    Ok(
        "TrackerCam::Update(unsigned int)",
    ),
    Ok(
        "TrackerCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "TrackerCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "WalkerCam::WalkerCam(void)",
    ),
    Ok(
        "WalkerCam::~WalkerCam(void)",
    ),
    Ok(
        "WalkerCam::Update(unsigned int)",
    ),
    Ok(
        "WalkerCam::UpdateForPhysics(unsigned int)",
    ),
    Ok(
        "WalkerCam::LoadSettings(unsigned char *)",
    ),
    Ok(
        "WalkerCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "WalkerCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "WalkerCam::OnDisplay(void) const",
    ),
    Ok(
        "WalkerCam::UpdatePositionNormal(unsigned int, float)",
    ),
    Ok(
        "WalkerCam::UpdatePositionInCollision(unsigned int, float)",
    ),
    Ok(
        "WalkerCam::UpdatePositionOneCollsion(unsigned int, float, unsigned int)",
    ),
    Ok(
        "WalkerCam::UpdatePositionMultipleCollision(unsigned int, float)",
    ),
    Ok(
        "WalkerCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "WalkerCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "WalkerCam::IsPushingStick(void)",
    ),
    Ok(
        "WalkerCam::IsStickStill(void)",
    ),
    Ok(
        "WalkerCam::GetTargetPosition(RadicalMathLibrary::Vector *, bool) const",
    ),
    Ok(
        "WalkerCam::IsTargetNearPed(unsigned int)",
    ),
    Ok(
        "WrecklessCam::WrecklessCam(void)",
    ),
    Ok(
        "WrecklessCam::~WrecklessCam(void)",
    ),
    Ok(
        "WrecklessCam::Update(unsigned int)",
    ),
    Ok(
        "WrecklessCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "WrecklessCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "WrecklessCam::OnInit(void)",
    ),
    Ok(
        "WrecklessCam::OnShutdown(void)",
    ),
    Ok(
        "WrecklessCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "WrecklessCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "WrecklessEventListener::WrecklessEventListener(void)",
    ),
    Ok(
        "WrecklessEventListener::~WrecklessEventListener(void)",
    ),
    Ok(
        "WrecklessEventListener::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "StaticCam::StaticCam(void)",
    ),
    Ok(
        "StaticCam::~StaticCam(void)",
    ),
    Ok(
        "StaticCam::Update(unsigned int)",
    ),
    Ok(
        "StaticCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "StaticCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "StaticCam::GetTargetSpeedModifier(void)",
    ),
    Ok(
        "ReverseCam::ReverseCam(void)",
    ),
    Ok(
        "ReverseCam::~ReverseCam(void)",
    ),
    Ok(
        "ReverseCam::Update(unsigned int)",
    ),
    Ok(
        "ReverseCam::UpdateForPhysics(unsigned int)",
    ),
    Ok(
        "ReverseCam::EnableShake(void)",
    ),
    Ok(
        "ReverseCam::DisableShake(void)",
    ),
    Ok(
        "ReverseCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "ReverseCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "ReverseCam::CanSwitch(void)",
    ),
    Ok(
        "SurveillanceCam::~SurveillanceCam(void)",
    ),
    Ok(
        "SurveillanceCam::Update(unsigned int)",
    ),
    Ok(
        "SurveillanceCam::GetName(void) const",
    ),
    Ok(
        "SurveillanceCam::GetType(void)",
    ),
    Ok(
        "SurveillanceCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "SurveillanceCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "SurveillanceCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "SuperSprintCam::SuperSprintCam(void)",
    ),
    Ok(
        "SuperSprintCam::~SuperSprintCam(void)",
    ),
    Ok(
        "SuperSprintCam::Update(unsigned int)",
    ),
    Ok(
        "SuperSprintCam::OnInit(void)",
    ),
    Ok(
        "SuperSprintCam::OnShutdown(void)",
    ),
    Ok(
        "SuperSprintCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "SuperSprintCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "tName * find<tName *, tName>(tName *, tName *, tName const &, random_access_iterator_tag)",
    ),
    Ok(
        "ICameraShaker type_info function",
    ),
    Ok(
        "SineCosShaker type_info function",
    ),
    Ok(
        "SuperCam type_info function",
    ),
    Ok(
        "AnimatedCam type_info function",
    ),
    Ok(
        "SuperCamCentral type_info function",
    ),
    Ok(
        "BumperCamData type_info function",
    ),
    Ok(
        "BumperCam type_info function",
    ),
    Ok(
        "ISuperCamTarget type_info function",
    ),
    Ok(
        "ChaseCamData type_info function",
    ),
    Ok(
        "ChaseCam type_info function",
    ),
    Ok(
        "ConversationCamData type_info function",
    ),
    Ok(
        "ConversationCam type_info function",
    ),
    Ok(
        "DebugCam type_info function",
    ),
    Ok(
        "FollowCamData type_info function",
    ),
    Ok(
        "FollowCam type_info function",
    ),
    Ok(
        "SuperCamController type_info function",
    ),
    Ok(
        "KullCam type_info function",
    ),
    Ok(
        "RelativeAnimatedCam::~RelativeAnimatedCam(void)",
    ),
    Ok(
        "RelativeAnimatedCam type_info function",
    ),
    Ok(
        "RailCam type_info function",
    ),
    Ok(
        "WrecklessEventListener type_info function",
    ),
    Ok(
        "WrecklessCam type_info function",
    ),
    Ok(
        "TrackerCamData type_info function",
    ),
    Ok(
        "TrackerCam type_info function",
    ),
    Ok(
        "WalkerCamData type_info function",
    ),
    Ok(
        "WalkerCam type_info function",
    ),
    Ok(
        "WalkerCamDataChunk type_info function",
    ),
    Ok(
        "StaticCam type_info function",
    ),
    Ok(
        "ReverseCam type_info function",
    ),
    Ok(
        "SurveillanceCam type_info function",
    ),
    Ok(
        "SuperSprintCam type_info function",
    ),
    Ok(
        "ICameraShaker::~ICameraShaker(void)",
    ),
    Ok(
        "SineCosShaker::Reset(void)",
    ),
    Ok(
        "SineCosShaker::SetSpeed(float)",
    ),
    Ok(
        "SineCosShaker::SetTime(unsigned int)",
    ),
    Ok(
        "SineCosShaker::SetCameraRelative(bool)",
    ),
    Ok(
        "SineCosShaker::SetDirection(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "SineCosShaker::SetLooping(bool)",
    ),
    Ok(
        "SineCosShaker::DoneShaking(void)",
    ),
    Ok(
        "SineCosShaker::GetName(void)",
    ),
    Ok(
        "SuperCam::UpdateForPhysics(unsigned int)",
    ),
    Ok(
        "SuperCam::LoadSettings(unsigned char *)",
    ),
    Ok(
        "SuperCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "SuperCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "SuperCam::GetNumTargets(void) const",
    ),
    Ok(
        "SuperCam::SetCollisionOffset(RadicalMathLibrary::Vector const *, unsigned int, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "SuperCam::GetCollisionRadius(void) const",
    ),
    Ok(
        "SuperCam::GetIntersectionRadius(void) const",
    ),
    Ok(
        "SuperCam::OnInit(void)",
    ),
    Ok(
        "SuperCam::OnShutdown(void)",
    ),
    Ok(
        "SuperCam::GetTargetSpeedModifier(void)",
    ),
    Ok(
        "SuperCam::OnDisplay(void) const",
    ),
    Ok(
        "SuperCam::OnRegisterDebugControls(void)",
    ),
    Ok(
        "SuperCam::OnUnregisterDebugControls(void)",
    ),
    Ok(
        "SuperCam::CanSwitch(void)",
    ),
    Ok(
        "SuperCam::EnableShake(void)",
    ),
    Ok(
        "SuperCam::DisableShake(void)",
    ),
    Ok(
        "SuperCam::LookBack(bool)",
    ),
    Ok(
        "SuperCam::DoFirstTime(void)",
    ),
    Ok(
        "SuperCam::DoCameraCut(void)",
    ),
    Ok(
        "GameDataHandler::GameDataHandler(void)",
    ),
    Ok(
        "radLoadHashedStore::RawIterator::~RawIterator(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCamera>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tMultiController>::SafeCast(void)",
    ),
    Ok(
        "BumperCamData::~BumperCamData(void)",
    ),
    Ok(
        "BumperCam::GetCollisionRadius(void) const",
    ),
    Ok(
        "BumperCam::GetName(void) const",
    ),
    Ok(
        "BumperCam::GetType(void)",
    ),
    Ok(
        "BumperCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "BumperCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "BumperCam::GetNumTargets(void) const",
    ),
    Ok(
        "ChaseCamData::~ChaseCamData(void)",
    ),
    Ok(
        "ChaseCam::GetName(void) const",
    ),
    Ok(
        "ChaseCam::GetType(void)",
    ),
    Ok(
        "ChaseCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "ChaseCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "ChaseCam::GetNumTargets(void) const",
    ),
    Ok(
        "ConversationCamData::~ConversationCamData(void)",
    ),
    Ok(
        "ConversationCam::GetName(void) const",
    ),
    Ok(
        "ConversationCam::GetType(void)",
    ),
    Ok(
        "DebugCam::GetName(void) const",
    ),
    Ok(
        "DebugCam::GetType(void)",
    ),
    Ok(
        "FollowCamData::~FollowCamData(void)",
    ),
    Ok(
        "FollowCam::GetCollisionRadius(void) const",
    ),
    Ok(
        "FollowCam::GetIntersectionRadius(void) const",
    ),
    Ok(
        "FollowCam::GetName(void) const",
    ),
    Ok(
        "FollowCam::GetNumTargets(void) const",
    ),
    Ok(
        "FollowCam::GetType(void)",
    ),
    Ok(
        "FollowCam::SetCollisionOffset(RadicalMathLibrary::Vector const *, unsigned int, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "FollowCam::OnInit(void)",
    ),
    Ok(
        "SuperCamController::OnButton(int, int, Button const *)",
    ),
    Ok(
        "SuperCamController::OnButtonUp(int, int, Button const *)",
    ),
    Ok(
        "KullCam::GetName(void) const",
    ),
    Ok(
        "KullCam::GetType(void)",
    ),
    Ok(
        "KullCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "KullCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "KullCam::GetNumTargets(void) const",
    ),
    Ok(
        "RailCam::GetName(void) const",
    ),
    Ok(
        "RailCam::GetType(void)",
    ),
    Ok(
        "RailCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "RailCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "RailCam::GetNumTargets(void) const",
    ),
    Ok(
        "WrecklessCam::GetName(void) const",
    ),
    Ok(
        "WrecklessCam::GetType(void)",
    ),
    Ok(
        "WrecklessCam::GetNumTargets(void) const",
    ),
    Ok(
        "TrackerCamData::~TrackerCamData(void)",
    ),
    Ok(
        "TrackerCam::GetName(void) const",
    ),
    Ok(
        "TrackerCam::GetType(void)",
    ),
    Ok(
        "TrackerCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "TrackerCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "TrackerCam::GetNumTargets(void) const",
    ),
    Ok(
        "WalkerCamData::~WalkerCamData(void)",
    ),
    Ok(
        "WalkerCam::GetCollisionRadius(void) const",
    ),
    Ok(
        "WalkerCam::GetIntersectionRadius(void) const",
    ),
    Ok(
        "WalkerCam::OnInit(void)",
    ),
    Ok(
        "WalkerCam::GetName(void) const",
    ),
    Ok(
        "WalkerCam::GetType(void)",
    ),
    Ok(
        "WalkerCam::GetNumTargets(void) const",
    ),
    Ok(
        "WalkerCam::SetCollisionOffset(RadicalMathLibrary::Vector const *, unsigned int, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "radLoadInventory::SafeCast<WalkerCamDataChunk>::SafeCast(void)",
    ),
    Ok(
        "OldCamData::OldCamData(void)",
    ),
    Ok(
        "StaticCam::OnInit(void)",
    ),
    Ok(
        "StaticCam::GetName(void) const",
    ),
    Ok(
        "StaticCam::GetType(void)",
    ),
    Ok(
        "StaticCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "StaticCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "StaticCam::GetNumTargets(void) const",
    ),
    Ok(
        "ReverseCam::LoadSettings(unsigned char *)",
    ),
    Ok(
        "ReverseCam::GetCollisionRadius(void) const",
    ),
    Ok(
        "ReverseCam::OnInit(void)",
    ),
    Ok(
        "ReverseCam::GetName(void) const",
    ),
    Ok(
        "ReverseCam::GetType(void)",
    ),
    Ok(
        "ReverseCam::SetTarget(ISuperCamTarget *)",
    ),
    Ok(
        "ReverseCam::AddTarget(ISuperCamTarget *)",
    ),
    Ok(
        "ReverseCam::GetNumTargets(void) const",
    ),
    Ok(
        "ReverseCam::SetCollisionOffset(RadicalMathLibrary::Vector const *, unsigned int, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "SuperSprintCam::GetName(void) const",
    ),
    Ok(
        "SuperSprintCam::GetType(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tVectorCamera>::SafeCast(void)",
    ),
    Ok(
        "GameDataHandler type_info function",
    ),
    Ok(
        "FollowCamDataChunk type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCamera> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tMultiController> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<WalkerCamDataChunk> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tVectorCamera> type_info function",
    ),
    Ok(
        "FollowCamDataChunk::~FollowCamDataChunk(void)",
    ),
    Ok(
        "HashTable<IRefCount>::RawIterator::~RawIterator(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<WalkerCamDataChunk>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tVectorCamera>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tMultiController>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCamera>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to AnimatedCam::Abort(void)",
    ),
    Ok(
        "global destructors keyed to AnimatedCam::Abort(void)",
    ),
    Ok(
        "BonusCard::BonusCard(unsigned int, unsigned int, unsigned int, tUidUnaligned, eQuoteID const *, int)",
    ),
    Ok(
        "BonusCard::~BonusCard(void)",
    ),
    Ok(
        "Card::Card(unsigned int, unsigned int, unsigned int, tUidUnaligned, eQuoteID const *, int)",
    ),
    Ok(
        "Card::~Card(void)",
    ),
    Ok(
        "Card::GetQuoteID(int) const",
    ),
    Ok(
        "CardList::CardList(void)",
    ),
    Ok(
        "CardList::Add(Card *)",
    ),
    Ok(
        "CardList::Empty(void)",
    ),
    Ok(
        "CardGallery::CreateInstance(void)",
    ),
    Ok(
        "CardGallery::DestroyInstance(void)",
    ),
    Ok(
        "CardGallery::GetInstance(void)",
    ),
    Ok(
        "CardGallery::CardGallery(void)",
    ),
    Ok(
        "CardGallery::~CardGallery(void)",
    ),
    Ok(
        "CardGallery::Init(void)",
    ),
    Ok(
        "CardGallery::AddCollectedCardByID(unsigned int)",
    ),
    Ok(
        "CardGallery::AddCollectedCardByName(tUidUnaligned)",
    ),
    Ok(
        "CardGallery::AddAllCollectedCards(void)",
    ),
    Ok(
        "CardGallery::RemoveAllCollectedCards(void)",
    ),
    Ok(
        "CardGallery::GetCollectedCards(unsigned int) const",
    ),
    Ok(
        "CardGallery::IsCardCollected(tUidUnaligned) const",
    ),
    Ok(
        "CardGallery::GetNumCardDecksCompleted(void) const",
    ),
    Ok(
        "CardGallery::IsCardDeckComplete(unsigned int) const",
    ),
    Ok(
        "CardGallery::LoadData(unsigned char const *, unsigned int)",
    ),
    Ok(
        "CardGallery::SaveData(unsigned char *, unsigned int)",
    ),
    Ok(
        "CardGallery::OnCheatEntered(eCheatID, bool)",
    ),
    Ok(
        "CardGallery::AddCollectedCard(Card *)",
    ),
    Ok(
        "CardsDB::CardsDB(void)",
    ),
    Ok(
        "CardsDB::~CardsDB(void)",
    ),
    Ok(
        "CardsDB::LoadCards(void)",
    ),
    Ok(
        "CardsDB::GetCardByID(unsigned int)",
    ),
    Ok(
        "CardsDB::GetCardByName(tUidUnaligned)",
    ),
    Ok(
        "CollectorCard::CollectorCard(unsigned int, unsigned int, unsigned int, tUidUnaligned, eQuoteID const *, int)",
    ),
    Ok(
        "CollectorCard::~CollectorCard(void)",
    ),
    Ok(
        "Card type_info function",
    ),
    Ok(
        "BonusCard type_info function",
    ),
    Ok(
        "CardGallery type_info function",
    ),
    Ok(
        "CardsDB type_info function",
    ),
    Ok(
        "CollectorCard type_info function",
    ),
    Ok(
        "BonusCard::GetType(void) const",
    ),
    Ok(
        "ICheatEnteredCallback::ICheatEnteredCallback(void)",
    ),
    Ok(
        "CardGallery::ResetData(void)",
    ),
    Ok(
        "CollectorCard::GetType(void) const",
    ),
    Ok(
        "ICheatEnteredCallback type_info function",
    ),
    Ok(
        "CheatInputSystem::CreateInstance(void)",
    ),
    Ok(
        "CheatInputSystem::DestroyInstance(void)",
    ),
    Ok(
        "CheatInputSystem::GetInstance(void)",
    ),
    Ok(
        "CheatInputSystem::CheatInputSystem(void)",
    ),
    Ok(
        "CheatInputSystem::~CheatInputSystem(void)",
    ),
    Ok(
        "CheatInputSystem::Init(void)",
    ),
    Ok(
        "CheatInputSystem::SetEnabled(bool)",
    ),
    Ok(
        "CheatInputSystem::SetActivated(int, bool)",
    ),
    Ok(
        "CheatInputSystem::IsActivated(int) const",
    ),
    Ok(
        "CheatInputSystem::SetCheatEnabled(eCheatID, bool)",
    ),
    Ok(
        "CheatInputSystem::IsCheatEnabled(eCheatID) const",
    ),
    Ok(
        "CheatInputSystem::ReceiveInputs(eCheatInput *, int)",
    ),
    Ok(
        "CheatInputSystem::RegisterCallback(ICheatEnteredCallback *)",
    ),
    Ok(
        "CheatInputSystem::UnregisterCallback(ICheatEnteredCallback *)",
    ),
    Ok(
        "CheatInputHandler::CheatInputHandler(void)",
    ),
    Ok(
        "CheatInputHandler::~CheatInputHandler(void)",
    ),
    Ok(
        "CheatInputHandler::ResetInputSequence(void)",
    ),
    Ok(
        "CheatInputHandler::GetInputName(eCheatInput)",
    ),
    Ok(
        "CheatInputHandler::OnButton(int, int, Button const *)",
    ),
    Ok(
        "CheatInputHandler::OnButtonDown(int, int, Button const *)",
    ),
    Ok(
        "CheatInputHandler::OnButtonUp(int, int, Button const *)",
    ),
    Ok(
        "CheatInputHandler::LoadControllerMappings(unsigned int)",
    ),
    Ok(
        "CheatsDB::CheatsDB(void)",
    ),
    Ok(
        "CheatsDB::~CheatsDB(void)",
    ),
    Ok(
        "CheatsDB::GetCheatID(unsigned int) const",
    ),
    Ok(
        "CheatsDB::GetCheat(eCheatID) const",
    ),
    Ok(
        "CheatsDB::ConvertSequenceToIndex(eCheatInput const *, int)",
    ),
    Ok(
        "CheatsDB::PrintCheatInfo(Cheat const *, char *)",
    ),
    Ok(
        "CheatsDB type_info function",
    ),
    Ok(
        "CheatInputSystem type_info function",
    ),
    Ok(
        "CheatInputHandler type_info function",
    ),
    Ok(
        "Console::CreateInstance(void)",
    ),
    Ok(
        "Console::GetInstance(void)",
    ),
    Ok(
        "Console::DestroyInstance(void)",
    ),
    Ok(
        "Console::Initialize(void)",
    ),
    Ok(
        "Console::Console(void)",
    ),
    Ok(
        "Console::~Console(void)",
    ),
    Ok(
        "Console::Printf(char *, ...)",
    ),
    Ok(
        "Console::FlushLogFile(void)",
    ),
    Ok(
        "Console::AddFunction(char const *, void (*)(int, char **), char const *, int, int)",
    ),
    Ok(
        "Console::AddFunc(char const *, void (*)(int, char **), bool (*)(int, char **), char const *, int, int)",
    ),
    Ok(
        "Console::SkipWhiteSpace(char const *)",
    ),
    Ok(
        "Console::FoundComment(char **)",
    ),
    Ok(
        "Console::FindTokenEnd(char const *)",
    ),
    Ok(
        "Console::ReadToken(char **, char const *)",
    ),
    Ok(
        "Console::GetNextToken(char **, char *)",
    ),
    Ok(
        "Console::Evaluate(char const *, char const *)",
    ),
    Ok(
        "Console::ExecuteScript(char const *, Console::ExecuteScriptCallback *, void *, bool)",
    ),
    Ok(
        "Console::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "Console::FunctionTableEntry::FunctionTableEntry(char const *, void (*)(int, char **), char const *, int, int)",
    ),
    Ok(
        "Console::FunctionTableEntry::FunctionTableEntry(char const *, bool (*)(int, char **), char const *, int, int)",
    ),
    Ok(
        "DebugConsoleCallback::OnVKey(int, bool, bool, bool)",
    ),
    Ok(
        "DebugConsoleCallback::OnChar(int)",
    ),
    Ok(
        "DebugConsoleCallback::OnButtonClick(int, int, int, int, bool, bool, bool)",
    ),
    Ok(
        "DebugConsoleCallback::OnButtonDown(int, int, int, int, bool, bool, bool)",
    ),
    Ok(
        "DebugConsoleCallback::OnButtonUp(int, int, int, int, bool, bool, bool)",
    ),
    Ok(
        "DebugConsoleCallback::OnButtonMove(int, int, int, int, bool, bool, bool, bool)",
    ),
    Ok(
        "smStricmp(char const *, char const *)",
    ),
    Ok(
        "tNameInsensitive::tNameInsensitive(void)",
    ),
    Ok(
        "tNameInsensitive::operator=(char const *)",
    ),
    Ok(
        "tNameInsensitive::SetText(char const *)",
    ),
    Ok(
        "Upcase(char *)",
    ),
    Ok(
        "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::_M_erase(_Rb_tree_node<pair<unsigned int const, int> > *)",
    ),
    Ok(
        "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::lower_bound(unsigned int const &)",
    ),
    Ok(
        "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::_M_insert(_Rb_tree_node_base *, _Rb_tree_node_base *, pair<unsigned int const, int> const &)",
    ),
    Ok(
        "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::insert_unique(pair<unsigned int const, int> const &)",
    ),
    Ok(
        "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::insert_unique(_Rb_tree_iterator<pair<unsigned int const, int>, pair<unsigned int const, int> &, pair<unsigned int const, int> *>, pair<unsigned int const, int> const &)",
    ),
    Ok(
        "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::find(unsigned int const &)",
    ),
    Ok(
        "Console type_info function",
    ),
    Ok(
        "DebugConsoleCallback type_info function",
    ),
    Ok(
        "tNameInsensitive::~tNameInsensitive(void)",
    ),
    Ok(
        "Console::FunctionTableEntry::~FunctionTableEntry(void)",
    ),
    Ok(
        "map<unsigned int, int, less<unsigned int>, allocator<int> >::~map(void)",
    ),
    Ok(
        "IRadDebugConsolePointerInputCallback type_info function",
    ),
    Ok(
        "IRadDebugConsoleKeyboardInputCallback type_info function",
    ),
    Ok(
        "global constructors keyed to gErrFileName",
    ),
    Ok(
        "global destructors keyed to gErrFileName",
    ),
    Ok(
        "BootupContext::GetInstance(void)",
    ),
    Ok(
        "BootupContext::StartMovies(void)",
    ),
    Ok(
        "BootupContext::StartLoadingSound(void)",
    ),
    Ok(
        "BootupContext::OnStart(ContextEnum)",
    ),
    Ok(
        "BootupContext::OnStop(ContextEnum)",
    ),
    Ok(
        "BootupContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "BootupContext::OnSuspend(void)",
    ),
    Ok(
        "BootupContext::OnResume(void)",
    ),
    Ok(
        "BootupContext::OnHandleEvent(EventEnum, void *)",
    ),
    Ok(
        "BootupContext::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "BootupContext::OnPresentationEventBegin(PresentationEvent *)",
    ),
    Ok(
        "BootupContext::OnPresentationEventLoadComplete(PresentationEvent *)",
    ),
    Ok(
        "BootupContext::OnPresentationEventEnd(PresentationEvent *)",
    ),
    Ok(
        "BootupContext::BootupContext(void)",
    ),
    Ok(
        "BootupContext::~BootupContext(void)",
    ),
    Ok(
        "Context::DestroyInstance(void)",
    ),
    Ok(
        "Context::Start(ContextEnum)",
    ),
    Ok(
        "Context::Stop(ContextEnum)",
    ),
    Ok(
        "Context::Update(unsigned int)",
    ),
    Ok(
        "Context::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "Context::Suspend(void)",
    ),
    Ok(
        "Context::Resume(void)",
    ),
    Ok(
        "Context::Context(void)",
    ),
    Ok(
        "Context::~Context(void)",
    ),
    Ok(
        "EntryContext::GetInstance(void)",
    ),
    Ok(
        "EntryContext::OnStart(ContextEnum)",
    ),
    Ok(
        "EntryContext::OnStop(ContextEnum)",
    ),
    Ok(
        "EntryContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "EntryContext::OnSuspend(void)",
    ),
    Ok(
        "EntryContext::OnResume(void)",
    ),
    Ok(
        "EntryContext::OnHandleEvent(EventEnum, void *)",
    ),
    Ok(
        "EntryContext::EntryContext(void)",
    ),
    Ok(
        "EntryContext::~EntryContext(void)",
    ),
    Ok(
        "ExitContext::GetInstance(void)",
    ),
    Ok(
        "ExitContext::OnStart(ContextEnum)",
    ),
    Ok(
        "ExitContext::OnStop(ContextEnum)",
    ),
    Ok(
        "ExitContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "ExitContext::OnSuspend(void)",
    ),
    Ok(
        "ExitContext::OnResume(void)",
    ),
    Ok(
        "ExitContext::OnHandleEvent(EventEnum, void *)",
    ),
    Ok(
        "ExitContext::ExitContext(void)",
    ),
    Ok(
        "ExitContext::~ExitContext(void)",
    ),
    Ok(
        "FrontEndContext::GetInstance(void)",
    ),
    Ok(
        "FrontEndContext::FrontEndContext(void)",
    ),
    Ok(
        "FrontEndContext::~FrontEndContext(void)",
    ),
    Ok(
        "FrontEndContext::OnStart(ContextEnum)",
    ),
    Ok(
        "FrontEndContext::OnStop(ContextEnum)",
    ),
    Ok(
        "FrontEndContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "FrontEndContext::OnSuspend(void)",
    ),
    Ok(
        "FrontEndContext::OnResume(void)",
    ),
    Ok(
        "FrontEndContext::OnHandleEvent(EventEnum, void *)",
    ),
    Ok(
        "FrontEndContext::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "FrontEndContext::StartFrontEnd(unsigned int)",
    ),
    Ok(
        "PlayingContext::PlayingContext(void)",
    ),
    Ok(
        "PlayingContext::~PlayingContext(void)",
    ),
    Ok(
        "PlayingContext::OnStart(ContextEnum)",
    ),
    Ok(
        "PlayingContext::OnStop(ContextEnum)",
    ),
    Ok(
        "PlayingContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "PlayingContext::OnSuspend(void)",
    ),
    Ok(
        "PlayingContext::OnResume(void)",
    ),
    Ok(
        "PlayingContext::OnHandleEvent(EventEnum, void *)",
    ),
    Ok(
        "LoadingContext::LoadingContext(void)",
    ),
    Ok(
        "LoadingContext::~LoadingContext(void)",
    ),
    Ok(
        "LoadingContext::OnStart(ContextEnum)",
    ),
    Ok(
        "LoadingContext::OnStop(ContextEnum)",
    ),
    Ok(
        "LoadingContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "LoadingContext::OnSuspend(void)",
    ),
    Ok(
        "LoadingContext::OnResume(void)",
    ),
    Ok(
        "LoadingContext::OnHandleEvent(EventEnum, void *)",
    ),
    Ok(
        "LoadingContext::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "PauseContext::GetInstance(void)",
    ),
    Ok(
        "PauseContext::PauseContext(void)",
    ),
    Ok(
        "PauseContext::~PauseContext(void)",
    ),
    Ok(
        "PauseContext::OnStart(ContextEnum)",
    ),
    Ok(
        "PauseContext::OnStop(ContextEnum)",
    ),
    Ok(
        "PauseContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "PauseContext::OnSuspend(void)",
    ),
    Ok(
        "PauseContext::OnResume(void)",
    ),
    Ok(
        "PauseContext::OnHandleEvent(EventEnum, void *)",
    ),
    Ok(
        "Context type_info function",
    ),
    Ok(
        "BootupContext type_info function",
    ),
    Ok(
        "EntryContext type_info function",
    ),
    Ok(
        "PauseContext type_info function",
    ),
    Ok(
        "ExitContext type_info function",
    ),
    Ok(
        "FrontEndContext type_info function",
    ),
    Ok(
        "PlayingContext type_info function",
    ),
    Ok(
        "LoadingContext type_info function",
    ),
    Ok(
        "PresentationEvent::PresentationEventCallBack::PresentationEventCallBack(void)",
    ),
    Ok(
        "PresentationEvent::PresentationEventCallBack type_info function",
    ),
    Ok(
        "global constructors keyed to BootupContext::spInstance",
    ),
    Ok(
        "LoadingGameplayContext::GetInstance(void)",
    ),
    Ok(
        "LoadingGameplayContext::LoadingGameplayContext(void)",
    ),
    Ok(
        "LoadingGameplayContext::~LoadingGameplayContext(void)",
    ),
    Ok(
        "LoadingGameplayContext::OnStart(ContextEnum)",
    ),
    Ok(
        "LoadingGameplayContext::OnStop(ContextEnum)",
    ),
    Ok(
        "LoadingGameplayContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "LoadingGameplayContext::OnSuspend(void)",
    ),
    Ok(
        "LoadingGameplayContext::OnResume(void)",
    ),
    Ok(
        "LoadingGameplayContext::PrepareNewHeaps(void)",
    ),
    Ok(
        "LoadingGameplayContext::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "GameplayContext::GetInstance(void)",
    ),
    Ok(
        "GameplayContext::GameplayContext(void)",
    ),
    Ok(
        "GameplayContext::~GameplayContext(void)",
    ),
    Ok(
        "GameplayContext::OnStart(ContextEnum)",
    ),
    Ok(
        "GameplayContext::OnStop(ContextEnum)",
    ),
    Ok(
        "GameplayContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "GameplayContext::OnSuspend(void)",
    ),
    Ok(
        "GameplayContext::OnResume(void)",
    ),
    Ok(
        "GameplayContext::PauseAllButPresentation(bool)",
    ),
    Ok(
        "LoadingGameplayContext type_info function",
    ),
    Ok(
        "ComedyCam type_info function",
    ),
    Ok(
        "GameplayContext type_info function",
    ),
    Ok(
        "ComedyCam::~ComedyCam(void)",
    ),
    Ok(
        "ComedyCam::GetName(void) const",
    ),
    Ok(
        "ComedyCam::GetType(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tLightGroup>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tLightGroup> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tLightGroup>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to LoadingGameplayContext::spInstance",
    ),
    Ok(
        "LoadingDemoContext::GetInstance(void)",
    ),
    Ok(
        "LoadingDemoContext::LoadingDemoContext(void)",
    ),
    Ok(
        "LoadingDemoContext::~LoadingDemoContext(void)",
    ),
    Ok(
        "LoadingDemoContext::OnStart(ContextEnum)",
    ),
    Ok(
        "LoadingDemoContext::OnStop(ContextEnum)",
    ),
    Ok(
        "LoadingDemoContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "LoadingDemoContext::OnSuspend(void)",
    ),
    Ok(
        "LoadingDemoContext::OnResume(void)",
    ),
    Ok(
        "LoadingDemoContext::PrepareNewHeaps(void)",
    ),
    Ok(
        "LoadingDemoContext::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "DemoContext::GetInstance(void)",
    ),
    Ok(
        "DemoContext::DemoContext(void)",
    ),
    Ok(
        "DemoContext::~DemoContext(void)",
    ),
    Ok(
        "DemoContext::OnStart(ContextEnum)",
    ),
    Ok(
        "DemoContext::OnStop(ContextEnum)",
    ),
    Ok(
        "DemoContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "DemoContext::OnSuspend(void)",
    ),
    Ok(
        "DemoContext::OnResume(void)",
    ),
    Ok(
        "LoadingDemoContext type_info function",
    ),
    Ok(
        "DemoContext type_info function",
    ),
    Ok(
        "global constructors keyed to LoadingDemoContext::spInstance",
    ),
    Ok(
        "GameDataManager::CreateInstance(void)",
    ),
    Ok(
        "GameDataManager::DestroyInstance(void)",
    ),
    Ok(
        "GameDataManager::GetInstance(void)",
    ),
    Ok(
        "GameDataManager::GameDataManager(void)",
    ),
    Ok(
        "GameDataManager::~GameDataManager(void)",
    ),
    Ok(
        "GameDataManager::Init(void)",
    ),
    Ok(
        "GameDataManager::Update(unsigned int)",
    ),
    Ok(
        "GameDataManager::RegisterGameData(GameDataHandler *, unsigned int, char const *)",
    ),
    Ok(
        "GameDataManager::LoadGame(unsigned int, GameDataLoadCallback *, char const *)",
    ),
    Ok(
        "GameDataManager::DeleteGame(char const *)",
    ),
    Ok(
        "GameDataManager::SaveGame(unsigned int, GameDataSaveCallback *)",
    ),
    Ok(
        "GameDataManager::ResetGame(void)",
    ),
    Ok(
        "GameDataManager::EnableMinimumLoadSaveTime(bool)",
    ),
    Ok(
        "GameDataManager::GetSaveGameInfo(IRadDrive *, unsigned int, SaveGameInfo *, bool *)",
    ),
    Ok(
        "GameDataManager::DoesSaveGameExist(IRadDrive *, bool, bool)",
    ),
    Ok(
        "GameDataManager::FindMostRecentSaveGame(IRadDrive *, unsigned int &, radDate &)",
    ),
    Ok(
        "GameDataManager::FormatSavedGameFilename(char *, unsigned int, unsigned int)",
    ),
    Ok(
        "GameDataManager::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "GameDataManager::OnDriveError(radFileError, char const *, void *)",
    ),
    Ok(
        "GameDataManager::LoadAllData(void)",
    ),
    Ok(
        "GameDataManager::SaveAllData(void)",
    ),
    Ok(
        "SaveGameInfo::SaveGameInfo(void)",
    ),
    Ok(
        "SaveGameInfo::~SaveGameInfo(void)",
    ),
    Ok(
        "SaveGameInfo::LoadData(unsigned char const *, unsigned int)",
    ),
    Ok(
        "SaveGameInfo::SaveData(unsigned char *, unsigned int)",
    ),
    Ok(
        "SaveGameInfo::ResetData(void)",
    ),
    Ok(
        "SaveGameInfo::CheckData(void)",
    ),
    Ok(
        "CopyUnicodeToCharString(char *, unsigned short *, int)",
    ),
    Ok(
        "SaveGameInfo::FormatLevelMissionInfo(char *) const",
    ),
    Ok(
        "SaveGameInfo::FormatDisplay(char *, unsigned int) const",
    ),
    Ok(
        "SaveGameInfo::CompareTimeStamps(radDate const &, radDate const &)",
    ),
    Ok(
        "PersistentWorldManager::PersistentWorldManager(void)",
    ),
    Ok(
        "PersistentWorldManager::~PersistentWorldManager(void)",
    ),
    Ok(
        "PersistentWorldManager::CreateInstance(void)",
    ),
    Ok(
        "PersistentWorldManager::GetInstance(void)",
    ),
    Ok(
        "PersistentWorldManager::DestroyInstance(void)",
    ),
    Ok(
        "PersistentWorldManager::OnSectorLoad(tUidUnaligned)",
    ),
    Ok(
        "PersistentWorldManager::OnLevelLoad(int)",
    ),
    Ok(
        "PersistentWorldManager::GetPersistentObjectID(tUidUnaligned, tUidUnaligned)",
    ),
    Ok(
        "PersistentWorldManager::GetPersistentObjectID(void)",
    ),
    Ok(
        "PersistentWorldManager::OnObjectBreak(short)",
    ),
    Ok(
        "PersistentWorldManager::CheckObject(unsigned char, unsigned char) const",
    ),
    Ok(
        "GameDataManager type_info function",
    ),
    Ok(
        "SaveGameInfo type_info function",
    ),
    Ok(
        "IRadFileCompletionCallback::IRadFileCompletionCallback(void)",
    ),
    Ok(
        "IRadDriveErrorCallback::IRadDriveErrorCallback(void)",
    ),
    Ok(
        "GameDataManager::AddRef(void)",
    ),
    Ok(
        "GameDataManager::Release(void)",
    ),
    Ok(
        "IRadFileCompletionCallback type_info function",
    ),
    Ok(
        "IRadDriveErrorCallback type_info function",
    ),
    Ok(
        "IRefCount::IRefCount(void)",
    ),
    Ok(
        "MemoryCardManager::CreateInstance(void)",
    ),
    Ok(
        "MemoryCardManager::DestroyInstance(void)",
    ),
    Ok(
        "MemoryCardManager::GetInstance(void)",
    ),
    Ok(
        "MemoryCardManager::MemoryCardManager(void)",
    ),
    Ok(
        "MemoryCardManager::~MemoryCardManager(void)",
    ),
    Ok(
        "MemoryCardManager::Init(IRadDriveErrorCallback *)",
    ),
    Ok(
        "MemoryCardManager::Update(unsigned int)",
    ),
    Ok(
        "MemoryCardManager::StartMemoryCardCheck(IMemoryCardCheckCallback *)",
    ),
    Ok(
        "MemoryCardManager::UpdateMemoryCardCheck(unsigned int)",
    ),
    Ok(
        "MemoryCardManager::LoadMemcardInfo(IMemoryCardInfoLoadCallback *)",
    ),
    Ok(
        "MemoryCardManager::UnloadMemcardInfo(void)",
    ),
    Ok(
        "MemoryCardManager::IsMemcardInfoLoaded(void) const",
    ),
    Ok(
        "MemoryCardManager::SetMemcardIconData(char *, unsigned int)",
    ),
    Ok(
        "MemoryCardManager::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "MemoryCardManager::SetCurrentDrive(unsigned int)",
    ),
    Ok(
        "MemoryCardManager::ClearCurrentDrive(void)",
    ),
    Ok(
        "MemoryCardManager::GetCurrentDriveIndex(void) const",
    ),
    Ok(
        "MemoryCardManager::IsCurrentDrivePresent(unsigned int)",
    ),
    Ok(
        "MemoryCardManager::IsCurrentDriveReady(bool, bool *, IRadDrive::MediaInfo::MediaState *)",
    ),
    Ok(
        "MemoryCardManager::GetAvailableDrives(IRadDrive **, IRadDrive::MediaInfo **, IRadDrive **)",
    ),
    Ok(
        "MemoryCardManager::EnoughFreeSpace(unsigned int) const",
    ),
    Ok(
        "MemoryCardManager::FormatDrive(unsigned int, IMemoryCardFormatCallback *)",
    ),
    Ok(
        "MemoryCardManager::UpdateMemcardInfo(char const *, int)",
    ),
    Ok(
        "MemoryCardManager::OnDriveOperationsComplete(void *)",
    ),
    Ok(
        "MemoryCardManager::OnDriveError(radFileError, char const *, void *)",
    ),
    Ok(
        "MemoryCardManager::GetDriveIndex(IRadDrive *) const",
    ),
    Ok(
        "MemoryCardManager::DetermineSavedGameCreationSize(unsigned int)",
    ),
    Ok(
        "MemoryCardManager::OnMemoryCardCheckCompleted(void)",
    ),
    Ok(
        "MemoryCardManager::LoadMemcardInfo_PS2(GameMemoryAllocator)",
    ),
    Ok(
        "MemoryCardManager::UnloadMemcardInfo_PS2(void)",
    ),
    Ok(
        "MemoryCardManager type_info function",
    ),
    Ok(
        "IRadDriveCompletionCallback::IRadDriveCompletionCallback(void)",
    ),
    Ok(
        "MemoryCardManager::AddRef(void)",
    ),
    Ok(
        "MemoryCardManager::Release(void)",
    ),
    Ok(
        "IRadDriveCompletionCallback type_info function",
    ),
    Ok(
        "EventListener::EventListener(void)",
    ),
    Ok(
        "EventListener::~EventListener(void)",
    ),
    Ok(
        "EventManager::CreateInstance(void)",
    ),
    Ok(
        "EventManager::GetInstance(void)",
    ),
    Ok(
        "EventManager::DestroyInstance(void)",
    ),
    Ok(
        "EventManager::AddListener(EventListener *, EventEnum)",
    ),
    Ok(
        "EventManager::RemoveListener(EventListener *, EventEnum)",
    ),
    Ok(
        "EventManager::RemoveAll(EventListener *)",
    ),
    Ok(
        "EventManager::TriggerEvent(EventEnum, void *) const",
    ),
    Ok(
        "EventManager::EventManager(void)",
    ),
    Ok(
        "EventManager::~EventManager(void)",
    ),
    Ok(
        "EventListener ** find<EventListener **, EventListener *>(EventListener **, EventListener **, EventListener * const &, random_access_iterator_tag)",
    ),
    Ok(
        "vector<EventListener *, s2alloc<EventListener *> >::_M_insert_aux(EventListener **, EventListener *const &)",
    ),
    Ok(
        "EventListener type_info function",
    ),
    Ok(
        "_Vector_alloc_base<EventListener *, s2alloc<EventListener *>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "GameFlow::CreateInstance(void)",
    ),
    Ok(
        "GameFlow::GetInstance(void)",
    ),
    Ok(
        "GameFlow::DestroyInstance(void)",
    ),
    Ok(
        "GameFlow::PushContext(ContextEnum)",
    ),
    Ok(
        "GameFlow::SetContext(ContextEnum)",
    ),
    Ok(
        "GameFlow::OnTimerDone(unsigned int, void *)",
    ),
    Ok(
        "GameFlow::GameFlow(void)",
    ),
    Ok(
        "GameFlow::~GameFlow(void)",
    ),
    Ok(
        "ContextEnum * __uninitialized_copy_aux<ContextEnum *, ContextEnum *>(ContextEnum *, ContextEnum *, ContextEnum *, __false_type)",
    ),
    Ok(
        "vector<ContextEnum, s2alloc<ContextEnum> >::_M_insert_aux(ContextEnum *, ContextEnum const &)",
    ),
    Ok(
        "GameFlow type_info function",
    ),
    Ok(
        "IRadTimerCallback::IRadTimerCallback(void)",
    ),
    Ok(
        "stack<ContextEnum, vector<ContextEnum, s2alloc<ContextEnum> > >::~stack(void)",
    ),
    Ok(
        "IRadTimerCallback type_info function",
    ),
    Ok(
        "_Vector_alloc_base<ContextEnum, s2alloc<ContextEnum>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "Button::Button(void)",
    ),
    Ok(
        "Button::~Button(void)",
    ),
    Ok(
        "InputManager::CreateInstance(void)",
    ),
    Ok(
        "InputManager::GetInstance(void)",
    ),
    Ok(
        "InputManager::DestroyInstance(void)",
    ),
    Ok(
        "InputManager::Init(void)",
    ),
    Ok(
        "InputManager::Update(unsigned int)",
    ),
    Ok(
        "InputManager::OnControllerConnectionStatusChange(IRadController *)",
    ),
    Ok(
        "InputManager::IsControllerInPort(int) const",
    ),
    Ok(
        "InputManager::ToggleRumble(bool)",
    ),
    Ok(
        "InputManager::SetRumbleEnabled(bool)",
    ),
    Ok(
        "InputManager::SetRumbleForDevice(int, bool)",
    ),
    Ok(
        "InputManager::TriggerRumblePulse(int)",
    ),
    Ok(
        "InputManager::GetValue(unsigned int, unsigned int) const",
    ),
    Ok(
        "InputManager::GetController(unsigned int)",
    ),
    Ok(
        "InputManager::RegisterMappable(unsigned int, Mappable *)",
    ),
    Ok(
        "InputManager::UnregisterMappable(unsigned int, int)",
    ),
    Ok(
        "InputManager::UnregisterMappable(unsigned int, Mappable *)",
    ),
    Ok(
        "InputManager::UnregisterMappable(Mappable *)",
    ),
    Ok(
        "InputManager::LoadData(unsigned char const *, unsigned int)",
    ),
    Ok(
        "InputManager::SaveData(unsigned char *, unsigned int)",
    ),
    Ok(
        "InputManager::ResetData(void)",
    ),
    Ok(
        "InputManager::InputManager(void)",
    ),
    Ok(
        "InputManager::~InputManager(void)",
    ),
    Ok(
        "InputManager::EnumerateControllers(void)",
    ),
    Ok(
        "InputManager::ReleaseAllControllers(void)",
    ),
    Ok(
        "InputManager::SetGameState(Input::ActiveState)",
    ),
    Ok(
        "InputManager::GetGameState(void) const",
    ),
    Ok(
        "InputManager::RegisterControllerID(int, int)",
    ),
    Ok(
        "InputManager::UnregisterControllerID(int)",
    ),
    Ok(
        "InputManager::UnregisterAllControllerID(void)",
    ),
    Ok(
        "Mappable::Mappable(unsigned int)",
    ),
    Ok(
        "Mappable::~Mappable(void)",
    ),
    Ok(
        "Mappable::DispatchOnButton(int, int, Button const *)",
    ),
    Ok(
        "Mappable::InitButtons(int, Button const *)",
    ),
    Ok(
        "Mappable::OnControllerDisconnect(int)",
    ),
    Ok(
        "Mappable::OnControllerConnect(int)",
    ),
    Ok(
        "Mappable::UpdateButtonState(int, int, Button const *)",
    ),
    Ok(
        "Mappable::GetValue(unsigned int) const",
    ),
    Ok(
        "Mappable::GetButton(unsigned int)",
    ),
    Ok(
        "Mappable::GetMapper(unsigned int)",
    ),
    Ok(
        "Mappable::GetActiveMapper(void)",
    ),
    Ok(
        "Mappable::SetGameState(unsigned int)",
    ),
    Ok(
        "Mappable::IsActive(void) const",
    ),
    Ok(
        "Mappable::IsButtonDown(unsigned int)",
    ),
    Ok(
        "Mappable::Map(char const *, int, unsigned int, unsigned int)",
    ),
    Ok(
        "Mappable::ClearMap(unsigned int)",
    ),
    Ok(
        "Mappable::Reset(void)",
    ),
    Ok(
        "Mapper::Mapper(void)",
    ),
    Ok(
        "Mapper::SetAssociation(int, int)",
    ),
    Ok(
        "Mapper::GetLogicalIndex(int) const",
    ),
    Ok(
        "Mapper::ClearAssociations(void)",
    ),
    Ok(
        "UserController::UserController(void)",
    ),
    Ok(
        "UserController::NotifyConnect(void)",
    ),
    Ok(
        "UserController::NotifyDisconnect(void)",
    ),
    Ok(
        "UserController::Create(int)",
    ),
    Ok(
        "UserController::SetGameState(unsigned int)",
    ),
    Ok(
        "UserController::OnControllerInputPointChange(unsigned int, float)",
    ),
    Ok(
        "UserController::Initialize(IRadController *)",
    ),
    Ok(
        "UserController::ReleaseRadController(void)",
    ),
    Ok(
        "UserController::SetRumble(bool, bool)",
    ),
    Ok(
        "UserController::IsRumbleOn(void) const",
    ),
    Ok(
        "UserController::PulseRumble(void)",
    ),
    Ok(
        "UserController::ApplyEffect(RumbleEffect::Effect, unsigned int)",
    ),
    Ok(
        "UserController::ApplyDynaEffect(RumbleEffect::DynaEffect, unsigned int, float)",
    ),
    Ok(
        "UserController::Update(unsigned int)",
    ),
    Ok(
        "UserController::GetInputValue(unsigned int) const",
    ),
    Ok(
        "UserController::~UserController(void)",
    ),
    Ok(
        "UserController::RegisterMappable(Mappable *)",
    ),
    Ok(
        "UserController::UnregisterMappable(int)",
    ),
    Ok(
        "UserController::UnregisterMappable(Mappable *)",
    ),
    Ok(
        "UserController::LoadControllerMappings(void)",
    ),
    Ok(
        "UserController::GetIdByName(char const *) const",
    ),
    Ok(
        "RumbleEffect::RumbleEffect(void)",
    ),
    Ok(
        "RumbleEffect::~RumbleEffect(void)",
    ),
    Ok(
        "RumbleEffect::SetMotor(unsigned int, IRadControllerOutputPoint *)",
    ),
    Ok(
        "RumbleEffect::SetEffect(RumbleEffect::Effect, unsigned int)",
    ),
    Ok(
        "RumbleEffect::SetDynaEffect(RumbleEffect::DynaEffect, unsigned int, float)",
    ),
    Ok(
        "RumbleEffect::Update(unsigned int)",
    ),
    Ok(
        "RumbleEffect::ShutDownEffects(void)",
    ),
    Ok(
        "RumbleEffect::UpdateEffect(RumbleEffect::Effect, unsigned int)",
    ),
    Ok(
        "RumbleEffect::UpdateDynaEffect(RumbleEffect::DynaEffect, unsigned int, float)",
    ),
    Ok(
        "RumbleEffect::InitEffects(void)",
    ),
    Ok(
        "RumbleEffect::OnShutDownEffects(void)",
    ),
    Ok(
        "SteeringSpring::SteeringSpring(void)",
    ),
    Ok(
        "SteeringSpring::~SteeringSpring(void)",
    ),
    Ok(
        "SteeringSpring::OnInit(void)",
    ),
    Ok(
        "SteeringSpring::SetCenterPoint(char, unsigned char)",
    ),
    Ok(
        "SteeringSpring::SetSpringStrength(unsigned char)",
    ),
    Ok(
        "SteeringSpring::SetSpringCoefficient(short)",
    ),
    Ok(
        "BaseDamper::BaseDamper(void)",
    ),
    Ok(
        "BaseDamper::~BaseDamper(void)",
    ),
    Ok(
        "BaseDamper::OnInit(void)",
    ),
    Ok(
        "BaseDamper::SetCenterPoint(char, unsigned char)",
    ),
    Ok(
        "BaseDamper::SetDamperStrength(unsigned char)",
    ),
    Ok(
        "BaseDamper::SetDamperCoefficient(short)",
    ),
    Ok(
        "ForceEffect::ForceEffect(void)",
    ),
    Ok(
        "ForceEffect::~ForceEffect(void)",
    ),
    Ok(
        "ForceEffect::Init(IRadControllerOutputPoint *)",
    ),
    Ok(
        "ForceEffect::Start(void)",
    ),
    Ok(
        "ForceEffect::Stop(void)",
    ),
    Ok(
        "ForceEffect::Update(void)",
    ),
    Ok(
        "ConstantEffect::ConstantEffect(void)",
    ),
    Ok(
        "ConstantEffect::~ConstantEffect(void)",
    ),
    Ok(
        "ConstantEffect::OnInit(void)",
    ),
    Ok(
        "ConstantEffect::SetMagnitude(short)",
    ),
    Ok(
        "ConstantEffect::SetDirection(unsigned short)",
    ),
    Ok(
        "WheelRumble::WheelRumble(void)",
    ),
    Ok(
        "WheelRumble::~WheelRumble(void)",
    ),
    Ok(
        "WheelRumble::OnInit(void)",
    ),
    Ok(
        "WheelRumble::SetMagDir(unsigned char, unsigned short)",
    ),
    Ok(
        "WheelRumble::SetPPO(unsigned short, unsigned short, short)",
    ),
    Ok(
        "WheelRumble::SetRumbleType(unsigned char)",
    ),
    Ok(
        "RumbleEffect type_info function",
    ),
    Ok(
        "ForceEffect type_info function",
    ),
    Ok(
        "SteeringSpring type_info function",
    ),
    Ok(
        "BaseDamper type_info function",
    ),
    Ok(
        "ConstantEffect type_info function",
    ),
    Ok(
        "WheelRumble type_info function",
    ),
    Ok(
        "UserController type_info function",
    ),
    Ok(
        "InputManager type_info function",
    ),
    Ok(
        "Mappable type_info function",
    ),
    Ok(
        "IRadControllerConnectionChangeCallback::IRadControllerConnectionChangeCallback(void)",
    ),
    Ok(
        "IRadControllerInputPointCallback::IRadControllerInputPointCallback(void)",
    ),
    Ok(
        "IRadControllerConnectionChangeCallback type_info function",
    ),
    Ok(
        "IRadControllerInputPointCallback type_info function",
    ),
    Ok(
        "global constructors keyed to Button::mTickCount",
    ),
    Ok(
        "InteriorManager::GagBinding::GagBinding(void)",
    ),
    Ok(
        "InteriorManager::GagBinding::Clear(void)",
    ),
    Ok(
        "GagDrawable::GagDrawable(Gag *)",
    ),
    Ok(
        "GagDrawable::Display(void)",
    ),
    Ok(
        "InteriorManager::CreateInstance(void)",
    ),
    Ok(
        "InteriorManager::ClassifyPoint(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "InteriorManager::GetInstance(void)",
    ),
    Ok(
        "InteriorManager::DestroyInstance(void)",
    ),
    Ok(
        "InteriorManager::OnBootupStart(void)",
    ),
    Ok(
        "InteriorManager::OnGameplayStart(void)",
    ),
    Ok(
        "InteriorManager::OnGameplayEnd(void)",
    ),
    Ok(
        "InteriorManager::UnloadGagSounds(void)",
    ),
    Ok(
        "InteriorManager::Enter(InteriorEntranceLocator *, Character *, Sequencer *)",
    ),
    Ok(
        "InteriorManager::Update(unsigned int)",
    ),
    Ok(
        "InteriorManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "InteriorManager::ConsoleClearGagBindings(int, char **)",
    ),
    Ok(
        "InteriorManager::ClearGagBindings(void)",
    ),
    Ok(
        "InteriorManager::ConsoleAddGagBinding(int, char **)",
    ),
    Ok(
        "InteriorManager::AddGagBinding(tUidUnaligned, char *, p3dCycleMode, int, char *)",
    ),
    Ok(
        "InteriorManager::GagBegin(char *)",
    ),
    Ok(
        "InteriorManager::GetBuildBinding(void)",
    ),
    Ok(
        "InteriorManager::GagEnd(void)",
    ),
    Ok(
        "InteriorManager::ConsoleGagBegin(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetInterior(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetCycle(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetWeight(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetSound(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetIntro(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetOutro(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagPlayFMV(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetTrigger(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetPosition(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetRandom(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetCameraShake(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetCoins(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetSparkle(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetAnimCollision(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetLoadDistances(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetSoundLoadDistances(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagSetPersist(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagCheckCollCards(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagCheckMovie(int, char **)",
    ),
    Ok(
        "InteriorManager::ConsoleGagEnd(int, char **)",
    ),
    Ok(
        "InteriorManager::LoadLevelGags(RadicalMathLibrary::Vector const &, bool)",
    ),
    Ok(
        "InteriorManager::InteriorManager(void)",
    ),
    Ok(
        "InteriorManager::~InteriorManager(void)",
    ),
    Ok(
        "InteriorManager::SwitchToInterior(void)",
    ),
    Ok(
        "InteriorManager::SetupLightsAndAnims(void)",
    ),
    Ok(
        "InteriorManager::AttemptEntry(void)",
    ),
    Ok(
        "InteriorManager::SwitchToExterior(void)",
    ),
    Ok(
        "InteriorManager::ExitInterior(void)",
    ),
    Ok(
        "InteriorManager::LoadGagNIS(tUidUnaligned)",
    ),
    Ok(
        "InteriorManager::ClearGags(void)",
    ),
    Ok(
        "InteriorManager::GetExitPos(void)",
    ),
    Ok(
        "InteriorManager::CollectionEffect(char const *, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "InteriorCentre::InteriorCentre(void)",
    ),
    Ok(
        "InteriorCentre::~InteriorCentre(void)",
    ),
    Ok(
        "InteriorManager type_info function",
    ),
    Ok(
        "GagDrawable type_info function",
    ),
    Ok(
        "Gag type_info function",
    ),
    Ok(
        "AnimationPlayer::LoadDataCallBack::LoadDataCallBack(void)",
    ),
    Ok(
        "GagDrawable::~GagDrawable(void)",
    ),
    Ok(
        "GagDrawable::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "GagDrawable::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "GagDrawable::ApplyForce(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Gag::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "Gag::~Gag(void)",
    ),
    Ok(
        "Gag::OnLoadDataComplete(void)",
    ),
    Ok(
        "Gag::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "InteriorExit::InteriorExit(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tFrameController>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<DirectionalLocator>::SafeCast(void)",
    ),
    Ok(
        "AnimationPlayer::LoadDataCallBack type_info function",
    ),
    Ok(
        "InteriorExit::~InteriorExit(void)",
    ),
    Ok(
        "InteriorExit type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tFrameController> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<DirectionalLocator> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::CollisionObject>::SafeCast(void)",
    ),
    Ok(
        "InteriorExit::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<DirectionalLocator>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tFrameController>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::CollisionObject> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::CollisionObject>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to InteriorManager::spInstance",
    ),
    Ok(
        "global destructors keyed to InteriorManager::spInstance",
    ),
    Ok(
        "CameraDataLoader::CameraDataLoader(void)",
    ),
    Ok(
        "CameraDataLoader::~CameraDataLoader(void)",
    ),
    Ok(
        "CameraDataLoader::Load(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "CementFileHandler::CementFileHandler(LoadingManager::CementLibraryStruct *)",
    ),
    Ok(
        "CementFileHandler::~CementFileHandler(void)",
    ),
    Ok(
        "CementFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
    ),
    Ok(
        "CementFileHandler::LoadFileSync(char const *)",
    ),
    Ok(
        "CementFileHandler::OnCementLibraryRegistered(void *)",
    ),
    Ok(
        "ChoreoFileHandler::ChoreoFileHandler(void)",
    ),
    Ok(
        "ChoreoFileHandler::~ChoreoFileHandler(void)",
    ),
    Ok(
        "ChoreoFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
    ),
    Ok(
        "ChoreoFileHandler::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "ChoreoFileHandler::LoadFileSync(char const *)",
    ),
    Ok(
        "ChoreoFileHandler::SetSectionName(char const *)",
    ),
    Ok(
        "ConsoleFileHandler::ConsoleFileHandler(void)",
    ),
    Ok(
        "ConsoleFileHandler::~ConsoleFileHandler(void)",
    ),
    Ok(
        "ConsoleFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
    ),
    Ok(
        "ConsoleFileHandler::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "ConsoleFileHandler::LoadFileSync(char const *)",
    ),
    Ok(
        "FileHandlerFactory::CreateFileHandler(FileHandlerEnum, char const *)",
    ),
    Ok(
        "IconFileHandler::IconFileHandler(void)",
    ),
    Ok(
        "IconFileHandler::~IconFileHandler(void)",
    ),
    Ok(
        "IconFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
    ),
    Ok(
        "IconFileHandler::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "IconFileHandler::LoadFileSync(char const *)",
    ),
    Ok(
        "IntersectionLoader::IntersectionLoader(void)",
    ),
    Ok(
        "IntersectionLoader::~IntersectionLoader(void)",
    ),
    Ok(
        "IntersectionLoader::Load(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "IntersectionLoader::CheckChunkID(unsigned int)",
    ),
    Ok(
        "IntersectionLoader::GetChunkID(void)",
    ),
    Ok(
        "LoadingManager::GetInstance(void)",
    ),
    Ok(
        "LoadingManager::CreateInstance(void)",
    ),
    Ok(
        "LoadingManager::DestroyInstance(void)",
    ),
    Ok(
        "LoadingManager::AddCallback(LoadingManager::ProcessRequestsCallback *, void *)",
    ),
    Ok(
        "LoadingManager::AddRequest(FileHandlerEnum, char const *, GameMemoryAllocator, char const *, char const *, LoadingManager::ProcessRequestsCallback *, void *)",
    ),
    Ok(
        "LoadingManager::OnLoadFileComplete(void *)",
    ),
    Ok(
        "LoadingManager::CancelPendingRequests(void)",
    ),
    Ok(
        "LoadingManager::RegisterCementLibrary(char const *)",
    ),
    Ok(
        "LoadingManager::UnregisterCementLibrary(int)",
    ),
    Ok(
        "LoadingManager::LoadingManager(void)",
    ),
    Ok(
        "LoadingManager::~LoadingManager(void)",
    ),
    Ok(
        "LoadingManager::ProcessNextRequest(void)",
    ),
    Ok(
        "LocatorLoader::LocatorLoader(void)",
    ),
    Ok(
        "LocatorLoader::~LocatorLoader(void)",
    ),
    Ok(
        "LocatorLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "LocatorLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "LocatorLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "LocatorLoader::LoadTriggerVolume(tChunkFile *, TriggerLocator *, bool)",
    ),
    Ok(
        "LocatorLoader::LoadSpline(tChunkFile *, SplineLocator *)",
    ),
    Ok(
        "P3DFileHandler::P3DFileHandler(void)",
    ),
    Ok(
        "P3DFileHandler::~P3DFileHandler(void)",
    ),
    Ok(
        "P3DFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
    ),
    Ok(
        "P3DFileHandler::Done(tLoadStatus, tLoadRequest *)",
    ),
    Ok(
        "P3DFileHandler::LoadFileSync(char const *)",
    ),
    Ok(
        "P3DFileHandler::SetSectionName(char const *)",
    ),
    Ok(
        "RoadDataSegmentLoader::RoadDataSegmentLoader(void)",
    ),
    Ok(
        "RoadDataSegmentLoader::~RoadDataSegmentLoader(void)",
    ),
    Ok(
        "RoadDataSegmentLoader::Load(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "RoadDataSegmentLoader::CheckChunkID(unsigned int)",
    ),
    Ok(
        "RoadDataSegmentLoader::GetChunkID(void)",
    ),
    Ok(
        "RoadLoader::RoadLoader(void)",
    ),
    Ok(
        "RoadLoader::~RoadLoader(void)",
    ),
    Ok(
        "RoadLoader::Load(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "RoadLoader::CheckChunkID(unsigned int)",
    ),
    Ok(
        "RoadLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "RoadLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "RoadLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "RoadLoader::LoadRoadSegment(tChunkFile *, unsigned int &)",
    ),
    Ok(
        "ScroobyFileHandler::ScroobyFileHandler(void)",
    ),
    Ok(
        "ScroobyFileHandler::~ScroobyFileHandler(void)",
    ),
    Ok(
        "ScroobyFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
    ),
    Ok(
        "ScroobyFileHandler::OnProjectLoadComplete(Scrooby::Project *)",
    ),
    Ok(
        "ScroobyFileHandler::LoadFileSync(char const *)",
    ),
    Ok(
        "ScroobyFileHandler::SetSectionName(char const *)",
    ),
    Ok(
        "SoundFileHandler::SoundFileHandler(void)",
    ),
    Ok(
        "SoundFileHandler::~SoundFileHandler(void)",
    ),
    Ok(
        "SoundFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
    ),
    Ok(
        "SoundFileHandler::LoadFileSync(char const *)",
    ),
    Ok(
        "SoundFileHandler::LoadCompleted(void)",
    ),
    Ok(
        "PathLoader::PathLoader(void)",
    ),
    Ok(
        "PathLoader::~PathLoader(void)",
    ),
    Ok(
        "PathLoader::CheckChunkID(unsigned int)",
    ),
    Ok(
        "PathLoader::Load(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "PathLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "PathLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "PathLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "_List_base<RoadSegment *, s2alloc<RoadSegment *> >::clear(void)",
    ),
    Ok(
        "tLoadRequest::Callback type_info function",
    ),
    Ok(
        "CameraDataLoader type_info function",
    ),
    Ok(
        "FileHandler type_info function",
    ),
    Ok(
        "LoadingManager type_info function",
    ),
    Ok(
        "CementFileHandler type_info function",
    ),
    Ok(
        "ChoreoFileHandler type_info function",
    ),
    Ok(
        "ConsoleFileHandler type_info function",
    ),
    Ok(
        "P3DFileHandler type_info function",
    ),
    Ok(
        "IconFileHandler type_info function",
    ),
    Ok(
        "ScroobyFileHandler type_info function",
    ),
    Ok(
        "SoundFileHandler type_info function",
    ),
    Ok(
        "IntersectionLoader type_info function",
    ),
    Ok(
        "IWrappedLoader type_info function",
    ),
    Ok(
        "LocatorLoader type_info function",
    ),
    Ok(
        "PedGroupLocator type_info function",
    ),
    Ok(
        "RoadDataSegmentLoader type_info function",
    ),
    Ok(
        "RoadLoader type_info function",
    ),
    Ok(
        "PathLoader type_info function",
    ),
    Ok(
        "radLoadCallback::radLoadCallback(void)",
    ),
    Ok(
        "tLoadRequest::Callback::~Callback(void)",
    ),
    Ok(
        "tLoadRequest::Callback::Done(void)",
    ),
    Ok(
        "CameraDataLoader::CheckChunkID(unsigned int)",
    ),
    Ok(
        "CameraDataLoader::GetChunkID(void)",
    ),
    Ok(
        "WalkerCamDataChunk::~WalkerCamDataChunk(void)",
    ),
    Ok(
        "IRadCementLibraryCompletionCallback::IRadCementLibraryCompletionCallback(void)",
    ),
    Ok(
        "FileHandler::LoadFileCallback::LoadFileCallback(void)",
    ),
    Ok(
        "FileHandler::~FileHandler(void)",
    ),
    Ok(
        "FileHandler::AddRef(void)",
    ),
    Ok(
        "FileHandler::Release(void)",
    ),
    Ok(
        "CementFileHandler::AddRef(void)",
    ),
    Ok(
        "CementFileHandler::Release(void)",
    ),
    Ok(
        "ChoreoFileHandler::AddRef(void)",
    ),
    Ok(
        "ChoreoFileHandler::Release(void)",
    ),
    Ok(
        "ConsoleFileHandler::AddRef(void)",
    ),
    Ok(
        "ConsoleFileHandler::Release(void)",
    ),
    Ok(
        "P3DFileHandler::AddRef(void)",
    ),
    Ok(
        "P3DFileHandler::Release(void)",
    ),
    Ok(
        "IconFileHandler::AddRef(void)",
    ),
    Ok(
        "IconFileHandler::Release(void)",
    ),
    Ok(
        "Scrooby::LoadProjectCallback::LoadProjectCallback(void)",
    ),
    Ok(
        "IWrappedLoader::~IWrappedLoader(void)",
    ),
    Ok(
        "PedGroupLocator::~PedGroupLocator(void)",
    ),
    Ok(
        "PedGroupLocator::GetDataType(void) const",
    ),
    Ok(
        "_List_alloc_base<RoadSegment *, s2alloc<RoadSegment *>, false>::~_List_alloc_base(void)",
    ),
    Ok(
        "radLoadCallback type_info function",
    ),
    Ok(
        "IRadCementLibraryCompletionCallback type_info function",
    ),
    Ok(
        "FileHandler::LoadFileCallback type_info function",
    ),
    Ok(
        "Scrooby::LoadProjectCallback type_info function",
    ),
    Ok(
        "radLoadCallback::~radLoadCallback(void)",
    ),
    Ok(
        "CommandLineOptions::InitDefaults(void)",
    ),
    Ok(
        "CommandLineOptions::HandleOption(char const *)",
    ),
    Ok(
        "CommandLineOptions::Get(CmdLineOptionEnum)",
    ),
    Ok(
        "Game::CreateInstance(Platform *)",
    ),
    Ok(
        "Game::DestroyInstance(void)",
    ),
    Ok(
        "Game::GetInstance(void)",
    ),
    Ok(
        "Game::GetPlatform(void)",
    ),
    Ok(
        "Game::Initialize(void)",
    ),
    Ok(
        "Game::Terminate(void)",
    ),
    Ok(
        "Game::Run(void)",
    ),
    Ok(
        "Game::Stop(void)",
    ),
    Ok(
        "Game::GetRandomSeed(void)",
    ),
    Ok(
        "Game::Game(Platform *)",
    ),
    Ok(
        "Game::~Game(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LoadMemP3DFile(unsigned char *, unsigned int, tEntityStore *)",
    ),
    Ok(
        "PS2Platform::CreateInstance(void)",
    ),
    Ok(
        "PS2Platform::GetInstance(void)",
    ),
    Ok(
        "PS2Platform::DestroyInstance(void)",
    ),
    Ok(
        "PS2Platform::InitializeFoundation(void)",
    ),
    Ok(
        "PS2Platform::InitializeMemory(void)",
    ),
    Ok(
        "PS2Platform::InitializePlatform(void)",
    ),
    Ok(
        "PS2Platform::ShutdownPlatform(void)",
    ),
    Ok(
        "PS2Platform::ResetMachine(void)",
    ),
    Ok(
        "PS2Platform::LaunchDashboard(void)",
    ),
    Ok(
        "PS2Platform::DisplaySplashScreen(Platform::SplashScreen, char const *, float, float, float, pddiColour, int)",
    ),
    Ok(
        "PS2Platform::DisplaySplashScreen(char const *, char const *, float, float, float, pddiColour, int)",
    ),
    Ok(
        "PS2Platform::InitializeFoundationDrive(void)",
    ),
    Ok(
        "PS2Platform::ShutdownFoundation(void)",
    ),
    Ok(
        "PS2Platform::InitializePure3D(void)",
    ),
    Ok(
        "PS2Platform::ShutdownPure3D(void)",
    ),
    Ok(
        "PS2Platform::SetProgressiveMode(bool)",
    ),
    Ok(
        "PS2Platform::CheckForStartupButtons(void)",
    ),
    Ok(
        "PS2Platform::OnControllerError(char const *)",
    ),
    Ok(
        "PS2Platform::OnDriveError(radFileError, char const *, void *)",
    ),
    Ok(
        "PS2Platform::PS2Platform(void)",
    ),
    Ok(
        "PS2Platform::~PS2Platform(void)",
    ),
    Ok(
        "PS2Platform::EnableSnProfiler(void)",
    ),
    Ok(
        "CreateSingletons(void)",
    ),
    Ok(
        "DestroySingletons(void)",
    ),
    Ok(
        "tUidUnaligned::tUidUnaligned(void)",
    ),
    Ok(
        "tUidUnaligned::tUidUnaligned(tUidUnaligned const &)",
    ),
    Ok(
        "tUidUnaligned::operator!=(tUidUnaligned) const",
    ),
    Ok(
        "tUidUnaligned::operator==(tUidUnaligned) const",
    ),
    Ok(
        "tUidUnaligned::operator<(tUidUnaligned) const",
    ),
    Ok(
        "tUidUnaligned::operator^(tUidUnaligned) const",
    ),
    Ok(
        "tUidUnaligned::operator*=(unsigned long)",
    ),
    Ok(
        "tUidUnaligned::operator&(tUidUnaligned) const",
    ),
    Ok(
        "tUidUnaligned::operator>>(int) const",
    ),
    Ok(
        "Game type_info function",
    ),
    Ok(
        "PS2Platform type_info function",
    ),
    Ok(
        "tBMPHandler::tBMPHandler(void)",
    ),
    Ok(
        "tPNGHandler::tPNGHandler(void)",
    ),
    Ok(
        "tTargaHandler::tTargaHandler(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tTextureFont>::SafeCast(void)",
    ),
    Ok(
        "Platform type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tTextureFont> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tTextureFont>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to CommandLineOptions::sOptions",
    ),
    Ok(
        "CreateHeap(GameMemoryAllocator, unsigned int)",
    ),
    Ok(
        "DestroyHeapA(GameMemoryAllocator)",
    ),
    Ok(
        "GetAllocator(GameMemoryAllocator)",
    ),
    Ok(
        "GetHeapReference(GameMemoryAllocator)",
    ),
    Ok(
        "GetTotalMemoryFreeInAllHeaps(void)",
    ),
    Ok(
        "FBMemoryPool::FBMemoryPool(unsigned int, int, GameMemoryAllocator)",
    ),
    Ok(
        "FBMemoryPool::~FBMemoryPool(void)",
    ),
    Ok(
        "FBMemoryPool::Allocate(unsigned int)",
    ),
    Ok(
        "FBMemoryPool::Free(void *, unsigned int)",
    ),
    Ok(
        "Memory::AllocateLargestFreeBlock(IRadMemoryAllocator *, void *&)",
    ),
    Ok(
        "Memory::InitializeMemoryUtilities(void)",
    ),
    Ok(
        "Memory::GetFreeMemoryProfile(void)",
    ),
    Ok(
        "Memory::GetLargestFreeBlock(void)",
    ),
    Ok(
        "Memory::GetLargestFreeBlock(IRadMemoryAllocator *)",
    ),
    Ok(
        "Memory::GetMaxFreeMemory(void)",
    ),
    Ok(
        "Memory::GetTotalMemoryFree(void)",
    ),
    Ok(
        "Memory::GetTotalMemoryFreeLowWaterMark(void)",
    ),
    Ok(
        "Memory::GetTotalMemoryUnavailable(void)",
    ),
    Ok(
        "Memory::GetTotalMemoryUsed(void)",
    ),
    Ok(
        "Memory::PrintMemoryStatsToTty(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "builtin_new",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "builtin_delete",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "builtin_vec_new",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "builtin_vec_delete",
        ),
    ),
    Ok(
        "operator new(unsigned int, GameMemoryAllocator)",
    ),
    Ok(
        "operator delete(void *, GameMemoryAllocator)",
    ),
    Ok(
        "operator new [](unsigned int, GameMemoryAllocator)",
    ),
    Ok(
        "FindFreeMemory(GameMemoryAllocator, unsigned int)",
    ),
    Ok(
        "SetupAllocatorSearch(GameMemoryAllocator)",
    ),
    Ok(
        "PrintOutOfMemoryMessage(void *, int, unsigned int)",
    ),
    Ok(
        "HeapStack::HeapStack(GameMemoryAllocator)",
    ),
    Ok(
        "HeapStack::~HeapStack(void)",
    ),
    Ok(
        "HeapStack::Push(GameMemoryAllocator)",
    ),
    Ok(
        "HeapStack::Pop(GameMemoryAllocator)",
    ),
    Ok(
        "HeapStack::SetTop(GameMemoryAllocator)",
    ),
    Ok(
        "HeapStack::Top(void) const",
    ),
    Ok(
        "HeapActivityTracker::HeapActivityTracker(void)",
    ),
    Ok(
        "HeapActivityTracker::MemoryAllocated(int, void *, unsigned int)",
    ),
    Ok(
        "HeapActivityTracker::MemoryFreed(int, void *)",
    ),
    Ok(
        "HeapManager::GetInstance(void)",
    ),
    Ok(
        "HeapManager::HeapManager(GameMemoryAllocator)",
    ),
    Ok(
        "HeapManager::~HeapManager(void)",
    ),
    Ok(
        "HeapManager::GetFudgeFactor(void)",
    ),
    Ok(
        "HeapManager::PushHeap(GameMemoryAllocator)",
    ),
    Ok(
        "HeapManager::PopHeap(GameMemoryAllocator)",
    ),
    Ok(
        "HeapManager::GetCurrentHeap(void) const",
    ),
    Ok(
        "HeapManager::GetCurrentAllocator(void)",
    ),
    Ok(
        "HeapManager::SetCurrentAllocator(int)",
    ),
    Ok(
        "HeapManager::DumpHeapStats(bool)",
    ),
    Ok(
        "HeapManager::ResetArtStats(void)",
    ),
    Ok(
        "HeapManager::PrepareHeapsStartup(void)",
    ),
    Ok(
        "HeapManager::PrepareHeapsFE(void)",
    ),
    Ok(
        "HeapManager::PrepareHeapsInGame(void)",
    ),
    Ok(
        "HeapManager::PrepareHeapsSuperSprint(void)",
    ),
    Ok(
        "HeapMgr(void)",
    ),
    Ok(
        "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, s2alloc<pair<void *const, unsigned int> > >::_M_erase(_Rb_tree_node<pair<void *const, unsigned int> > *)",
    ),
    Ok(
        "_Rb_tree_alloc_base<pair<void *const, unsigned int>, s2alloc<pair<void *const, unsigned int> >, false>::~_Rb_tree_alloc_base(void)",
    ),
    Ok(
        "map<void *, unsigned int, less<void *>, s2alloc<pair<void *const, unsigned int> > >::~map(void)",
    ),
    Ok(
        "HeapStack type_info function",
    ),
    Ok(
        "HeapActivityTracker type_info function",
    ),
    Ok(
        "HeapManager type_info function",
    ),
    Ok(
        "IRadMemorySetAllocatorCallback::IRadMemorySetAllocatorCallback(void)",
    ),
    Ok(
        "IRadMemoryActivityCallback::IRadMemoryActivityCallback(void)",
    ),
    Ok(
        "IRadMemorySetAllocatorCallback type_info function",
    ),
    Ok(
        "IRadMemoryActivityCallback type_info function",
    ),
    Ok(
        "global constructors keyed to g_HeapCreationData",
    ),
    Ok(
        "global destructors keyed to g_HeapCreationData",
    ),
    Ok(
        "PrepareString(char **, unsigned char *, unsigned int)",
    ),
    Ok(
        "SetString(char **, unsigned int, char const *)",
    ),
    Ok(
        "ActionEventLocator::ActionEventLocator(void)",
    ),
    Ok(
        "ActionEventLocator::~ActionEventLocator(void)",
    ),
    Ok(
        "ActionEventLocator::SetObjNameSize(unsigned char)",
    ),
    Ok(
        "ActionEventLocator::SetObjName(char const *)",
    ),
    Ok(
        "ActionEventLocator::SetJointNameSize(unsigned char)",
    ),
    Ok(
        "ActionEventLocator::SetJointName(char const *)",
    ),
    Ok(
        "ActionEventLocator::SetActionNameSize(unsigned char)",
    ),
    Ok(
        "ActionEventLocator::SetActionName(char const *)",
    ),
    Ok(
        "ActionEventLocator::AddToGame(tEntityStore *)",
    ),
    Ok(
        "ActionEventLocator::Reset(void)",
    ),
    Ok(
        "ActionEventLocator::OnTrigger(unsigned int)",
    ),
    Ok(
        "CarStartLocator::CarStartLocator(void)",
    ),
    Ok(
        "CarStartLocator::~CarStartLocator(void)",
    ),
    Ok(
        "DirectionalLocator::DirectionalLocator(void)",
    ),
    Ok(
        "DirectionalLocator::~DirectionalLocator(void)",
    ),
    Ok(
        "EventLocator::EventLocator(void)",
    ),
    Ok(
        "EventLocator::~EventLocator(void)",
    ),
    Ok(
        "EventLocator::OnTrigger(unsigned int)",
    ),
    Ok(
        "FOVLocator::FOVLocator(void)",
    ),
    Ok(
        "FOVLocator::~FOVLocator(void)",
    ),
    Ok(
        "FOVLocator::RegisterDebugData(void)",
    ),
    Ok(
        "FOVLocator::UnRegisterDebugData(void)",
    ),
    Ok(
        "FOVLocator::OnTrigger(unsigned int)",
    ),
    Ok(
        "InteriorEntranceLocator::InteriorEntranceLocator(void)",
    ),
    Ok(
        "InteriorEntranceLocator::~InteriorEntranceLocator(void)",
    ),
    Ok(
        "InteriorEntranceLocator::SetInteriorFileName(char const *)",
    ),
    Ok(
        "InteriorEntranceLocator::SetInteriorFileNameSize(unsigned int)",
    ),
    Ok(
        "InteriorEntranceLocator::OnTrigger(unsigned int)",
    ),
    Ok(
        "Locator::Locator(void)",
    ),
    Ok(
        "Locator::~Locator(void)",
    ),
    Ok(
        "Locator::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "Locator::GetHeading(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "OcclusionLocator::OcclusionLocator(void)",
    ),
    Ok(
        "OcclusionLocator::~OcclusionLocator(void)",
    ),
    Ok(
        "OcclusionLocator::OnTrigger(unsigned int)",
    ),
    Ok(
        "RectTriggerVolume::RectTriggerVolume(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, float)",
    ),
    Ok(
        "RectTriggerVolume::~RectTriggerVolume(void)",
    ),
    Ok(
        "RectTriggerVolume::Contains(RadicalMathLibrary::Vector const &, float) const",
    ),
    Ok(
        "RectTriggerVolume::IntersectsBox(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
    ),
    Ok(
        "RectTriggerVolume::IntersectsBox(RadicalMathLibrary::Box3D const &)",
    ),
    Ok(
        "RectTriggerVolume::IntersectsSphere(RadicalMathLibrary::Vector const &, float) const",
    ),
    Ok(
        "RectTriggerVolume::IntersectLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
    ),
    Ok(
        "RectTriggerVolume::GetBoundingBox(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "RectTriggerVolume::GetType(void) const",
    ),
    Ok(
        "RectTriggerVolume::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "RectTriggerVolume::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "RectTriggerVolume::SetTransform(RadicalMathLibrary::Matrix &)",
    ),
    Ok(
        "RectTriggerVolume::UpdateW2T(void)",
    ),
    Ok(
        "RectTriggerVolume::InitPoints(void)",
    ),
    Ok(
        "RectTriggerVolume::CalcPoints(void)",
    ),
    Ok(
        "ScriptLocator::ScriptLocator(void)",
    ),
    Ok(
        "ScriptLocator::~ScriptLocator(void)",
    ),
    Ok(
        "ScriptLocator::OnTrigger(unsigned int)",
    ),
    Ok(
        "SphereTriggerVolume::SphereTriggerVolume(void)",
    ),
    Ok(
        "SphereTriggerVolume::SphereTriggerVolume(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "SphereTriggerVolume::~SphereTriggerVolume(void)",
    ),
    Ok(
        "SphereTriggerVolume::Contains(RadicalMathLibrary::Vector const &, float) const",
    ),
    Ok(
        "SphereTriggerVolume::IntersectsBox(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
    ),
    Ok(
        "SphereTriggerVolume::IntersectsBox(RadicalMathLibrary::Box3D const &)",
    ),
    Ok(
        "SphereTriggerVolume::IntersectLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
    ),
    Ok(
        "SphereTriggerVolume::IntersectsSphere(RadicalMathLibrary::Vector const &, float) const",
    ),
    Ok(
        "SphereTriggerVolume::GetBoundingBox(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "SphereTriggerVolume::GetType(void) const",
    ),
    Ok(
        "SphereTriggerVolume::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "SphereTriggerVolume::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "SphereTriggerVolume::IntersectLineSphere(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
    ),
    Ok(
        "SphereTriggerVolume::InitPoints(void)",
    ),
    Ok(
        "SphereTriggerVolume::CalcPoints(void)",
    ),
    Ok(
        "SplineLocator::SplineLocator(void)",
    ),
    Ok(
        "SplineLocator::~SplineLocator(void)",
    ),
    Ok(
        "SplineLocator::SetRailCam(RailCam *)",
    ),
    Ok(
        "SplineLocator::TriggerAllowed(int)",
    ),
    Ok(
        "SplineLocator::OnTrigger(unsigned int)",
    ),
    Ok(
        "TriggerLocator::TriggerLocator(void)",
    ),
    Ok(
        "TriggerLocator::~TriggerLocator(void)",
    ),
    Ok(
        "TriggerLocator::SetNumTriggers(unsigned int, int)",
    ),
    Ok(
        "TriggerLocator::AddTriggerVolume(TriggerVolume *)",
    ),
    Ok(
        "TriggerLocator::GetTriggerVolume(unsigned int)",
    ),
    Ok(
        "TriggerLocator::IsPlayerTracked(int) const",
    ),
    Ok(
        "TriggerVolume::TriggerVolume(void)",
    ),
    Ok(
        "TriggerVolume::~TriggerVolume(void)",
    ),
    Ok(
        "TriggerVolume::Trigger(unsigned int, bool)",
    ),
    Ok(
        "TriggerVolume::SetLocator(TriggerLocator *)",
    ),
    Ok(
        "TriggerVolume::Render(void)",
    ),
    Ok(
        "TriggerVolume::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "TriggerVolume::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "TriggerVolume::Display(void)",
    ),
    Ok(
        "TriggerVolume::TriggerAllowed(int)",
    ),
    Ok(
        "TriggerVolume::ClearPoints(void)",
    ),
    Ok(
        "TriggerVolumeTracker::CreateInstance(void)",
    ),
    Ok(
        "TriggerVolumeTracker::GetInstance(void)",
    ),
    Ok(
        "TriggerVolumeTracker::DestroyInstance(void)",
    ),
    Ok(
        "TriggerVolumeTracker::TriggerVolumeTracker(void)",
    ),
    Ok(
        "TriggerVolumeTracker::~TriggerVolumeTracker(void)",
    ),
    Ok(
        "TriggerVolumeTracker::Cleanup(void)",
    ),
    Ok(
        "TriggerVolumeTracker::Update(int)",
    ),
    Ok(
        "TriggerVolumeTracker::AddTrigger(TriggerVolume *)",
    ),
    Ok(
        "TriggerVolumeTracker::RemoveTrigger(TriggerVolume *)",
    ),
    Ok(
        "TriggerVolumeTracker::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "TriggerVolumeTracker::Render(void)",
    ),
    Ok(
        "TriggerVolumeTracker::RegisterAI(Vehicle *, int)",
    ),
    Ok(
        "TriggerVolumeTracker::UnregisterAI(Vehicle *)",
    ),
    Ok(
        "TriggerVolumeTracker::GetAI(int)",
    ),
    Ok(
        "TriggerVolumeTracker::AddActive(int, TriggerVolume *)",
    ),
    Ok(
        "TriggerVolumeTracker::CheckForActiveVolumes(int, RadicalMathLibrary::Vector &, float)",
    ),
    Ok(
        "TriggerVolumeTracker::RemoveActive(int, int)",
    ),
    Ok(
        "TriggerVolumeTracker::AddAIActive(int, TriggerVolume *)",
    ),
    Ok(
        "TriggerVolumeTracker::RemoveAIActive(int, int)",
    ),
    Ok(
        "TriggerVolumeTracker::TestVolume(TriggerVolume *, RadicalMathLibrary::Vector &, float, int, unsigned int)",
    ),
    Ok(
        "ZoneEventLocator::ZoneEventLocator(void)",
    ),
    Ok(
        "ZoneEventLocator::~ZoneEventLocator(void)",
    ),
    Ok(
        "ZoneEventLocator::GetNumLoadZones(void)",
    ),
    Ok(
        "ZoneEventLocator::GetNumDumpZones(void)",
    ),
    Ok(
        "ZoneEventLocator::GetNumLWSActivates(void)",
    ),
    Ok(
        "ZoneEventLocator::GetNumLWSDeactivates(void)",
    ),
    Ok(
        "ZoneEventLocator::GetLoadZone(int)",
    ),
    Ok(
        "ZoneEventLocator::GetDumpZone(int)",
    ),
    Ok(
        "ZoneEventLocator::GetLWSActivates(int)",
    ),
    Ok(
        "ZoneEventLocator::GetLWSDeactivates(int)",
    ),
    Ok(
        "ZoneEventLocator::GetInteriorSection(void)",
    ),
    Ok(
        "ZoneEventLocator::SetZone(char const *)",
    ),
    Ok(
        "ZoneEventLocator::SetZoneSize(unsigned char)",
    ),
    Ok(
        "StaticCamLocator::StaticCamLocator(void)",
    ),
    Ok(
        "StaticCamLocator::~StaticCamLocator(void)",
    ),
    Ok(
        "StaticCamLocator::SetStaticCam(StaticCam *)",
    ),
    Ok(
        "StaticCamLocator::TriggerAllowed(int)",
    ),
    Ok(
        "StaticCamLocator::OnTrigger(unsigned int)",
    ),
    Ok(
        "Locator type_info function",
    ),
    Ok(
        "TriggerLocator type_info function",
    ),
    Ok(
        "ActionEventLocator type_info function",
    ),
    Ok(
        "CarStartLocator type_info function",
    ),
    Ok(
        "DirectionalLocator type_info function",
    ),
    Ok(
        "EventLocator type_info function",
    ),
    Ok(
        "FOVLocator type_info function",
    ),
    Ok(
        "InteriorEntranceLocator type_info function",
    ),
    Ok(
        "OcclusionLocator type_info function",
    ),
    Ok(
        "TriggerVolume type_info function",
    ),
    Ok(
        "RectTriggerVolume type_info function",
    ),
    Ok(
        "ScriptLocator type_info function",
    ),
    Ok(
        "SphereTriggerVolume type_info function",
    ),
    Ok(
        "SplineLocator type_info function",
    ),
    Ok(
        "TriggerVolumeTracker type_info function",
    ),
    Ok(
        "ZoneEventLocator type_info function",
    ),
    Ok(
        "StaticCamLocator type_info function",
    ),
    Ok(
        "Locator::SetNumTriggers(unsigned int, int)",
    ),
    Ok(
        "Locator::GetNumTriggers(void)",
    ),
    Ok(
        "Locator::SetMatrix(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "Locator::TriggerAllowed(int)",
    ),
    Ok(
        "Locator::GetDataType(void) const",
    ),
    Ok(
        "TriggerLocator::OnTrigger(unsigned int)",
    ),
    Ok(
        "TriggerLocator::GetNumTriggers(void)",
    ),
    Ok(
        "ActionEventLocator::GetDataType(void) const",
    ),
    Ok(
        "ActionEventLocator::SetMatrix(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "CarStartLocator::GetDataType(void) const",
    ),
    Ok(
        "DirectionalLocator::GetDataType(void) const",
    ),
    Ok(
        "EventLocator::GetDataType(void) const",
    ),
    Ok(
        "EventLocator::SetMatrix(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "FOVLocator::GetDataType(void) const",
    ),
    Ok(
        "InteriorEntranceLocator::GetDataType(void) const",
    ),
    Ok(
        "OcclusionLocator::GetDataType(void) const",
    ),
    Ok(
        "TriggerVolume::pPosition(void)",
    ),
    Ok(
        "TriggerVolume::rPosition(void)",
    ),
    Ok(
        "TriggerVolume::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "ScriptLocator::GetDataType(void) const",
    ),
    Ok(
        "SplineLocator::GetDataType(void) const",
    ),
    Ok(
        "ZoneEventLocator::GetDataType(void) const",
    ),
    Ok(
        "StaticCamLocator::GetDataType(void) const",
    ),
    Ok(
        "radLoadInventory::SafeCast<TriggerVolume> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<TriggerVolume>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to PrepareString(char **, unsigned char *, unsigned int)",
    ),
    Ok(
        "GameplayManager::GetInstance(void)",
    ),
    Ok(
        "GameplayManager::SetInstance(GameplayManager *)",
    ),
    Ok(
        "GameplayManager::GameplayManager(void)",
    ),
    Ok(
        "GameplayManager::~GameplayManager(void)",
    ),
    Ok(
        "GameplayManager::LevelLoaded(void)",
    ),
    Ok(
        "GameplayManager::SetLevelIndex(RenderEnums::LevelEnum)",
    ),
    Ok(
        "GameplayManager::SetMissionIndex(RenderEnums::MissionEnum)",
    ),
    Ok(
        "GameplayManager::TestPosInFrustrumOfPlayer(RadicalMathLibrary::Vector const &, int, float)",
    ),
    Ok(
        "GameplayManager::ContinueGameplay(void)",
    ),
    Ok(
        "GameplayManager::Update(int)",
    ),
    Ok(
        "GameplayManager::PlaceCharacterAtLocator(Character *, Locator *)",
    ),
    Ok(
        "GameplayManager::PlaceVehicleAtLocator(Vehicle *, CarStartLocator *)",
    ),
    Ok(
        "GameplayManager::TestProximityToUsersCarAndNudgeUpIfNecessaryDamnUglyHack(RadicalMathLibrary::Vector &, Vehicle *)",
    ),
    Ok(
        "GameplayManager::PlaceVehicleAtLocation(Vehicle *, RadicalMathLibrary::Vector, float)",
    ),
    Ok(
        "GameplayManager::PlaceVehicleAtLocatorName(Vehicle *, char const *)",
    ),
    Ok(
        "GameplayManager::AddLevelVehicle(char *, GameplayManager::eCarSlots, char *)",
    ),
    Ok(
        "GameplayManager::RemoveLevelVehicleController(void)",
    ),
    Ok(
        "GameplayManager::PauseForIrisClose(float)",
    ),
    Ok(
        "GameplayManager::PauseForIrisOpen(float)",
    ),
    Ok(
        "GameplayManager::PauseForFadeToBlack(float)",
    ),
    Ok(
        "GameplayManager::PauseForFadeFromBlack(float)",
    ),
    Ok(
        "GameplayManager::AddMissionVehicle(char *, char *, char *)",
    ),
    Ok(
        "GameplayManager::EmptyMissionVehicleSlots(void)",
    ),
    Ok(
        "GameplayManager::GetMissionVehicleByName(char const *)",
    ),
    Ok(
        "GameplayManager::GetUserVehicleByName(char const *)",
    ),
    Ok(
        "GameplayManager::GetMissionVehicleIndex(Vehicle *)",
    ),
    Ok(
        "GameplayManager::RepairVehicle(GameplayManager::CarDataStruct *)",
    ),
    Ok(
        "GameplayManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "GameplayManager::GetCurrentVehicle(void)",
    ),
    Ok(
        "GameplayManager::UnregisterVehicleHUDIcon(void)",
    ),
    Ok(
        "GameplayManager::SetCurrentVehicle(Vehicle *)",
    ),
    Ok(
        "GameplayManager::DumpCurrentCar(void)",
    ),
    Ok(
        "GameplayManager::ClearVehicleSlotIfInSphere(GameplayManager::eCarSlots, RadicalMathLibrary::Sphere const &)",
    ),
    Ok(
        "GameplayManager::DumpCurrentCarIfInSphere(RadicalMathLibrary::Sphere const &)",
    ),
    Ok(
        "GameplayManager::MakeSureHusksAreReverted(Vehicle *)",
    ),
    Ok(
        "GameplayManager::ClearVehicleSlot(GameplayManager::eCarSlots)",
    ),
    Ok(
        "GameplayManager::CopyVehicleSlot(GameplayManager::eCarSlots, GameplayManager::eCarSlots)",
    ),
    Ok(
        "GameplayManager::GetVehicleSlotFilename(GameplayManager::eCarSlots)",
    ),
    Ok(
        "GameplayManager::GetVehicleSlotVehicleName(GameplayManager::eCarSlots)",
    ),
    Ok(
        "GameplayManager::GetVehicleInSlot(GameplayManager::eCarSlots)",
    ),
    Ok(
        "GameplayManager::SetBonusMissionInfo(char const *, char const *, char const *, char const *, bool, char const *, bool)",
    ),
    Ok(
        "GameplayManager::GetOverrideCharacterName(char *)",
    ),
    Ok(
        "GameplayManager::Initialize(void)",
    ),
    Ok(
        "GameplayManager::Finalize(void)",
    ),
    Ok(
        "GameplayManager::SetCurrentMission(int)",
    ),
    Ok(
        "GameplayManager::NextMission(void)",
    ),
    Ok(
        "GameplayManager::PrevMission(void)",
    ),
    Ok(
        "GameplayManager::DoNextMission(void)",
    ),
    Ok(
        "GameplayManager::DoPrevMission(void)",
    ),
    Ok(
        "GameplayManager::GetCurrentMission(void)",
    ),
    Ok(
        "GameplayManager::GetCurrentBonusMissionInfo(void) const",
    ),
    Ok(
        "GameplayManager::GetBonusMissionInfo(int)",
    ),
    Ok(
        "GameplayManager::GetMissionHeap(int)",
    ),
    Ok(
        "GameplayManager::GetCurrentMissionNum(void) const",
    ),
    Ok(
        "GameplayManager::RestartCurrentMission(void)",
    ),
    Ok(
        "GameplayManager::RestartToMission(RenderEnums::MissionEnum)",
    ),
    Ok(
        "GameplayManager::AbortCurrentMission(void)",
    ),
    Ok(
        "GameplayManager::IsBonusMissionDesired(void) const",
    ),
    Ok(
        "GameplayManager::CancelBonusMission(void)",
    ),
    Ok(
        "GameplayManager::EnablePhoneBooths(void)",
    ),
    Ok(
        "GameplayManager::DisablePhoneBooths(void)",
    ),
    Ok(
        "GameplayManager::QueryPhoneBoothsEnabled(void)",
    ),
    Ok(
        "GameplayManager::CreateChaseManager(char *, char *, int)",
    ),
    Ok(
        "GameplayManager::GetChaseManager(char *)",
    ),
    Ok(
        "GameplayManager::GetChaseManager(int)",
    ),
    Ok(
        "GameplayManager::GetMissionNumByName(char const *)",
    ),
    Ok(
        "GameplayManager::KillAllChaseManagers(void)",
    ),
    Ok(
        "GameplayManager::EnableBonusMissions(void)",
    ),
    Ok(
        "GameplayManager::DisableBonusMissions(void)",
    ),
    Ok(
        "GameplayManager::DisableAllChaseAI(void)",
    ),
    Ok(
        "GameplayManager::EnableAllChaseAI(void)",
    ),
    Ok(
        "GameplayManager::GetGameType(void)",
    ),
    Ok(
        "GameplayManager::GetControllerColour(int)",
    ),
    Ok(
        "GameplayManager::GetRespawnManager(void)",
    ),
    Ok(
        "GameplayManager::SetPostLevelFMV(char const *)",
    ),
    Ok(
        "GameplayManager::AddToVDU(Vehicle *)",
    ),
    Ok(
        "GameplayManager::UpdateVDU(void)",
    ),
    Ok(
        "GameplayManager::MDKVDU(void)",
    ),
    Ok(
        "GameplayManager::ReleaseFromVDU(char *, Vehicle **)",
    ),
    Ok(
        "GameplayManager::TestForContinuityErrorWithCar(Vehicle *, bool)",
    ),
    Ok(
        "GameplayManager::RemoveVehicleFromMissionVehicleSlots(Vehicle *)",
    ),
    Ok(
        "GameplayManager::AbortFade(void)",
    ),
    Ok(
        "HasPresentationInfo::HasPresentationInfo(void)",
    ),
    Ok(
        "HasPresentationInfo::~HasPresentationInfo(void)",
    ),
    Ok(
        "HasPresentationInfo::AddAmbientCharacterAnimation(unsigned int, tName const &)",
    ),
    Ok(
        "HasPresentationInfo::AmbientCharacterAnimationSetRandom(unsigned int, bool)",
    ),
    Ok(
        "HasPresentationInfo::ClearAmbientAnimations(void)",
    ),
    Ok(
        "HasPresentationInfo::GoToPattyAndSelmaScreenWhenDone(void)",
    ),
    Ok(
        "HasPresentationInfo::OnStageCompleteSuccessful(void) const",
    ),
    Ok(
        "HasPresentationInfo::Reset(void)",
    ),
    Ok(
        "HasPresentationInfo::SetCameraForDialogLine(unsigned int, tName const &)",
    ),
    Ok(
        "HasPresentationInfo::SetConversationCamName(tName const &)",
    ),
    Ok(
        "HasPresentationInfo::SetConversationCamPcName(tName const &)",
    ),
    Ok(
        "HasPresentationInfo::SetConversationCamNpcName(tName const &)",
    ),
    Ok(
        "HasPresentationInfo::SetBestSideLocator(tName const &)",
    ),
    Ok(
        "Mission::Mission(void)",
    ),
    Ok(
        "Mission::~Mission(void)",
    ),
    Ok(
        "Mission::Initialize(GameMemoryAllocator)",
    ),
    Ok(
        "Mission::Finalize(void)",
    ),
    Ok(
        "Mission::SetToStage(int, bool)",
    ),
    Ok(
        "Mission::NextStage(void)",
    ),
    Ok(
        "Mission::PrevStage(void)",
    ),
    Ok(
        "Mission::ResetStage(void)",
    ),
    Ok(
        "Mission::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "Mission::Update(unsigned int)",
    ),
    Ok(
        "Mission::IsComplete(void)",
    ),
    Ok(
        "Mission::SetRestartDynaload(char const *, char const *)",
    ),
    Ok(
        "Mission::AddBonusObjective(BonusObjective *)",
    ),
    Ok(
        "Mission::StartBonusObjectives(void)",
    ),
    Ok(
        "Mission::SetForcedCar(bool)",
    ),
    Ok(
        "Mission::SetMissionTime(int)",
    ),
    Ok(
        "Mission::CreateStatePropCollectible(char const *, char const *, int)",
    ),
    Ok(
        "Mission::AttachStatePropCollectible(char const *, char const *, int)",
    ),
    Ok(
        "Mission::Reset(bool)",
    ),
    Ok(
        "Mission::ResetPlayer(void)",
    ),
    Ok(
        "Mission::InitDynaLoad(void)",
    ),
    Ok(
        "Mission::SetInitPedGroup(int)",
    ),
    Ok(
        "Mission::DialogueCharactersTeleported(void)",
    ),
    Ok(
        "Mission::GetCurrentStage(void)",
    ),
    Ok(
        "Mission::GetMissionTimeLeftInSeconds(void)",
    ),
    Ok(
        "Mission::GetMissionTimeLeftInMilliSeconds(void)",
    ),
    Ok(
        "Mission::DoUpdate(int)",
    ),
    Ok(
        "Mission::SetBonusMission(void)",
    ),
    Ok(
        "Mission::IsBonusMission(void)",
    ),
    Ok(
        "Mission::IsRaceMission(void)",
    ),
    Ok(
        "Mission::IsWagerMission(void)",
    ),
    Ok(
        "Mission::UnlockStage(MissionStage *)",
    ),
    Ok(
        "Mission::LoadStreetRaceProps(char const *)",
    ),
    Ok(
        "Mission::UnloadStreetRaceProps(char const *)",
    ),
    Ok(
        "Mission::SetupStageChange(void)",
    ),
    Ok(
        "Mission::DoStageChange(void)",
    ),
    Ok(
        "Mission::SetSwappedCarsFlag(bool)",
    ),
    Ok(
        "Mission::GetSwappedCarsFlag(void)",
    ),
    Ok(
        "Mission::InitStreetRacePropLoad(void)",
    ),
    Ok(
        "Mission::InitStreetRacePropUnload(void)",
    ),
    Ok(
        "Mission::ShowHUD(bool)",
    ),
    Ok(
        "Mission::CanMDKCar(Vehicle *, MissionStage *)",
    ),
    Ok(
        "MissionManager::GetInstance(void)",
    ),
    Ok(
        "MissionManager::CreateInstance(void)",
    ),
    Ok(
        "MissionManager::DestroyInstance(void)",
    ),
    Ok(
        "MissionManager::MissionManager(void)",
    ),
    Ok(
        "MissionManager::~MissionManager(void)",
    ),
    Ok(
        "MissionManager::Initialize(void)",
    ),
    Ok(
        "MissionManager::Finalize(void)",
    ),
    Ok(
        "MissionManager::Update(int)",
    ),
    Ok(
        "MissionManager::Reset(void)",
    ),
    Ok(
        "MissionManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "MissionManager::PerformLoading(void)",
    ),
    Ok(
        "MissionManager::RestartCurrentMission(void)",
    ),
    Ok(
        "MissionManager::RestartToMission(RenderEnums::MissionEnum)",
    ),
    Ok(
        "MissionManager::AbortCurrentMission(void)",
    ),
    Ok(
        "MissionManager::LoadLevelData(void)",
    ),
    Ok(
        "MissionManager::InitLevelData(void)",
    ),
    Ok(
        "MissionManager::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "MissionManager::LoadMission(void)",
    ),
    Ok(
        "MissionManager::CleanMissionData(void)",
    ),
    Ok(
        "MissionManager::PutEffectHere(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "MissionScriptLoader::CreateInstance(void)",
    ),
    Ok(
        "MissionScriptLoader::GetInstance(void)",
    ),
    Ok(
        "MissionScriptLoader::DestroyInstance(void)",
    ),
    Ok(
        "MissionScriptLoader::MissionScriptLoader(void)",
    ),
    Ok(
        "MissionScriptLoader::~MissionScriptLoader(void)",
    ),
    Ok(
        "MissionScriptLoader::Register(void)",
    ),
    Ok(
        "MissionScriptLoader::LoadScriptAsync(char *, LoadingManager::ProcessRequestsCallback *)",
    ),
    Ok(
        "MissionScriptLoader::OnExecuteScriptComplete(void *)",
    ),
    Ok(
        "MissionScriptLoader::InitLevelPlayerVehicle(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::PlacePlayerCar(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddPurchaseCarReward(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetPostLevelFMV(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::CreateChaseManager(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetChaseSpawnRate(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::KillAllChaseAI(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddMission(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddBonusMission(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::CloseMission(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetForcedCar(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetDemoLoopTime(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SelectMission(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetMissionNameIndex(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetMissionResetPlayerInCar(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetMissionResetPlayerOutCar(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetDynaLoadData(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddBonusObjective(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddObjective(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddNPC(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddDriver(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::RemoveNPC(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::RemoveDriver(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetTalkToTarget(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetDialogueInfo(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetDialoguePositions(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetRaceLaps(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::BindCollectibleToWaypoint(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AllowUserDump(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetVehicleToLoad(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::CloseObjective(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddCollectible(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddCollectibleStateProp(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetCollectibleEffect(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetDestination(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::TurnGotoDialogOff(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::MustActionTrigger(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddStageVehicle(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::MoveStageVehicle(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::ActivateVehicle(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddStageWaypoint(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddStageCharacter(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddStageMusicChange(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetStageMusicAlwaysOn(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetCompletionDialog(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetStageStartMusicEvent(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetMusicState(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetStageCamera(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::ResetToThisStage(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetTrafficDensity(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddCondition(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::CloseCondition(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AmbientAnimationRandomize(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::ClearAmbientAnimations(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddAmbientNpcAnimation(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddAmbientPcAnimation(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetCamBestSide(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetConversationCamName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetConversationCamPcName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetConversationCamNpcName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetConversationCam(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetConversationCamDistance(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetPresentationBitmap(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetAnimatedCameraMulticontrollerName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetAnimatedCameraName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetMissionStartMulticontrollerName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetMissionStartCameraName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetPlayerCarName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetFMVInfo(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::CharacterIsChild(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetFollowDistances(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetCondMinHealth(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetConditionPosition(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetCondTime(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetHitNRun(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetObjTargetVehicle(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetObjTargetBoss(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetPickupTarget(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AllowRockOut(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetObjDistance(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetCondTargetVehicle(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddStage(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetStageMessageIndex(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetStageTime(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddStageTime(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::ShowStageComplete(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetHUDIcon(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetIrisWipe(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetFadeOut(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::CloseStage(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetVehicleAIParams(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetBonusMissionStart(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::GetVehicleByName(char const *)",
    ),
    Ok(
        "MissionScriptLoader::GetDirectionalArrowType(char const *, DirectionalArrowEnum::TYPE *)",
    ),
    Ok(
        "MissionScriptLoader::LoadP3DFile(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::LoadDisposableCar(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddCharacter(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddNPCCharacterBonusMission(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetBonusMissionDialoguePositions(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddAmbientCharacter(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddBonusMissionNPCWaypoint(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddObjectiveNPCWaypoint(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddNPCWaypoint(char const *, char const *)",
    ),
    Ok(
        "MissionScriptLoader::AddPurchaseCarNPCWaypoint(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddAmbientNPCWaypoint(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::ActivateTrigger(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::DeactivateTrigger(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::CreateAnimPhysObject(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::CreateActionEventTrigger(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::LinkActionToObjectJoint(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::LinkActionToObject(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetCoinDrawable(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetParticleTexture(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddSafeZone(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::CreatePedGroup(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddPed(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::ClosePedGroup(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::UsePedGroup(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::BindReward(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetCarAttributes(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetTotalGags(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetTotalWasps(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::CreateTrafficGroup(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddTrafficModel(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::CloseTrafficGroup(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetRespawnRate(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::EnableTutorialMode(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::StartCountdown(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddToCountdownSequence(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetCarStartCamera(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::GoToPattyAndSelmaScreenWhenDone(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::StreetRacePropsLoad(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::StreetRacePropsUnload(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::UseElapsedTime(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AttachStatePropCollectible(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::ShowHUD(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetNumValidFailureHints(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetParTime(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetRaceEnteryFee(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetCoinFee(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::PutMFPlayerInCar(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetStatepropShadow(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::TreeOfWoeErrorMsg(char const *)",
    ),
    Ok(
        "MissionScriptLoader::DisableHitAndRun(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::EnableHitAndRun(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::ResetHitAndRun(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetNumChaseCars(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetHitAndRunDecay(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetHitAndRunMeter(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SwapInDefaultCar(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetSwapDefaultCarRespawnLocatorName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetSwapForcedCarRespawnLocatorName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetSwapPlayerRespawnLocatorName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::NoTrafficForStage(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::ClearTrafficForStage(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AddGlobalProp(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::PlacePlayerAtLocatorName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::msPlacePlayerCarAtLocatorName(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetStageAIRaceCatchupParams(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetStageAIEvadeCatchupParams(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetStageAITargetCatchupParams(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetPauseDuration(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetCharacterToHide(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetLevelOver(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::SetGameOver(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::StayInBlack(int, char **)",
    ),
    Ok(
        "MissionScriptLoader::AllowMissionAbort(int, char **)",
    ),
    Ok(
        "MissionStage::MissionStage(void)",
    ),
    Ok(
        "MissionStage::~MissionStage(void)",
    ),
    Ok(
        "MissionStage::DestroyStageVehicleAI(void)",
    ),
    Ok(
        "MissionStage::AddVehicle(Vehicle *, int, CarStartLocator *, char *)",
    ),
    Ok(
        "MissionStage::SetAIParams(Vehicle *, MissionStage::AIParams const &)",
    ),
    Ok(
        "MissionStage::SetAIRaceCatchupParams(Vehicle *, VehicleAI::RaceCatchupParams const &)",
    ),
    Ok(
        "MissionStage::SetAIEvadeCatchupParams(Vehicle *, VehicleAI::EvadeCatchupParams const &)",
    ),
    Ok(
        "MissionStage::SetAITargetCatchupParams(Vehicle *, VehicleAI::TargetCatchupParams const &)",
    ),
    Ok(
        "MissionStage::AddWaypoint(Locator *)",
    ),
    Ok(
        "MissionStage::AddCharacter(char *, CarStartLocator *, CarStartLocator *, char const *, Vehicle *)",
    ),
    Ok(
        "MissionStage::AddCharacter(char *, CarStartLocator *, CarStartLocator *, char const *, char *)",
    ),
    Ok(
        "MissionStage::GetFailureCondition(void) const",
    ),
    Ok(
        "MissionStage::Initialize(void)",
    ),
    Ok(
        "MissionStage::Finalize(void)",
    ),
    Ok(
        "MissionStage::VehicleFinalize(void)",
    ),
    Ok(
        "MissionStage::Reset(void)",
    ),
    Ok(
        "MissionStage::VehicleInfoInitialize(void)",
    ),
    Ok(
        "MissionStage::Start(void)",
    ),
    Ok(
        "MissionStage::Update(unsigned int)",
    ),
    Ok(
        "MissionStage::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "MissionStage::SetStageTime(MissionStage::StageTimeType, unsigned int)",
    ),
    Ok(
        "MissionStage::GetStageTime(MissionStage::StageTimeType &, unsigned int &)",
    ),
    Ok(
        "MissionStage::SetCameraInfo(SuperCam::Type, bool, bool)",
    ),
    Ok(
        "MissionStage::GetVehicle(int)",
    ),
    Ok(
        "MissionStage::SetChaseSpawnRate(char *, unsigned int)",
    ),
    Ok(
        "MissionStage::AddSafeZone(CarStartLocator *, unsigned int)",
    ),
    Ok(
        "MissionStage::DestroyAllSafeZones(void)",
    ),
    Ok(
        "MissionStage::triggerStageDialog(void)",
    ),
    Ok(
        "MissionStage::SetLockRequirement(unsigned int, MissionStage::LockRequirement::Type, char const *)",
    ),
    Ok(
        "MissionStage::GetLockRequirement(unsigned int)",
    ),
    Ok(
        "MissionStage::DisplayMissionStageIndexMessage(void)",
    ),
    Ok(
        "MissionStage::SetCountdownEnabled(unsigned int, tUidUnaligned)",
    ),
    Ok(
        "MissionStage::AddCountdownSequenceUnit(char const *, int)",
    ),
    Ok(
        "MissionStage::GetCountdownSequenceUnit(int) const",
    ),
    Ok(
        "MissionStage::PutAllAisInLimbo(bool)",
    ),
    Ok(
        "MissionStage::DoTransition(void)",
    ),
    Ok(
        "MissionStage::UseElapsedTime(void)",
    ),
    Ok(
        "MissionStage::QueryUseElapsedTime(void)",
    ),
    Ok(
        "MissionStage::SetRaceEnteryFee(int)",
    ),
    Ok(
        "MissionStage::PutMFPlayerInCar(void)",
    ),
    Ok(
        "MissionStage::DisableHitAndRun(void)",
    ),
    Ok(
        "MissionStage::SwapInDefaultCar(void)",
    ),
    Ok(
        "MissionStage::SwapInDefaultCarStart(void)",
    ),
    Ok(
        "MissionStage::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "MissionStage::SetSwapDefaultCarRespawnLocatorName(char *)",
    ),
    Ok(
        "MissionStage::SetSwapPlayerRespawnLocatorName(char *)",
    ),
    Ok(
        "MissionStage::SetSwapForcedCarRespawnLocatorName(char *)",
    ),
    Ok(
        "MissionStage::DisableTraffic(void)",
    ),
    Ok(
        "MissionStage::ClearTrafficForStage(void)",
    ),
    Ok(
        "MissionStage::SetPlayerRespawnLocatorName(char *)",
    ),
    Ok(
        "MissionStage::SetmsPlayerCarRespawnLocatorName(char *)",
    ),
    Ok(
        "MissionStage::OnStageCompleteSuccessful(void)",
    ),
    Ok(
        "MissionStage::SetCharacterToHide(char *)",
    ),
    Ok(
        "MissionStage::SetLevelOver(void)",
    ),
    Ok(
        "MissionStage::SetStageMusicState(unsigned int, unsigned int)",
    ),
    Ok(
        "MissionStage::GetStageMusicState(unsigned int &, unsigned int &)",
    ),
    Ok(
        "MissionStage::GetMainAIVehicleForThisStage(void)",
    ),
    Ok(
        "AnimatedIcon::AnimatedIcon(void)",
    ),
    Ok(
        "AnimatedIcon::~AnimatedIcon(void)",
    ),
    Ok(
        "AnimatedIcon::Init(char const *, RadicalMathLibrary::Matrix const &, bool, bool)",
    ),
    Ok(
        "AnimatedIcon::Init(char const *, RadicalMathLibrary::Vector const &, bool, bool)",
    ),
    Ok(
        "AnimatedIcon::ScaleByCameraDistance(float, float, float, float)",
    ),
    Ok(
        "AnimatedIcon::Move(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "AnimatedIcon::Update(unsigned int)",
    ),
    Ok(
        "AnimatedIcon::Reset(void)",
    ),
    Ok(
        "AnimatedIcon::ShouldRender(bool)",
    ),
    Ok(
        "AnimatedIcon::operator new(unsigned int)",
    ),
    Ok(
        "AnimatedIcon::operator new(unsigned int, GameMemoryAllocator)",
    ),
    Ok(
        "AnimatedIcon::operator delete(void *)",
    ),
    Ok(
        "AnimatedIcon::InitAnimatedIcons(GameMemoryAllocator)",
    ),
    Ok(
        "AnimatedIcon::ShutdownAnimatedIcons(void)",
    ),
    Ok(
        "AnimatedIcon::SetFlag(AnimatedIcon::Flag, bool)",
    ),
    Ok(
        "AnimatedIcon::GetFlag(AnimatedIcon::Flag) const",
    ),
    Ok(
        "AnimatedIcon::Deallocate(void)",
    ),
    Ok(
        "AnimatedIcon::SetUpContents(char const *)",
    ),
    Ok(
        "AnimatedIcon::SetUpEffects(void)",
    ),
    Ok(
        "AnimatedIcon::AnimIconDSG::AnimIconDSG(void)",
    ),
    Ok(
        "AnimatedIcon::AnimIconDSG::~AnimIconDSG(void)",
    ),
    Ok(
        "AnimatedIcon::AnimIconDSG::CalcScale(void)",
    ),
    Ok(
        "AnimatedIcon::AnimIconDSG::SetScaleParameters(float, float, float, float)",
    ),
    Ok(
        "AnimatedIcon::AnimIconDSG::Display(void)",
    ),
    Ok(
        "BonusMissionInfo::BonusMissionInfo(void)",
    ),
    Ok(
        "BonusMissionInfo::~BonusMissionInfo(void)",
    ),
    Ok(
        "BonusMissionInfo::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "BonusMissionInfo::SetUpIcon(char const *, RadicalMathLibrary::Vector)",
    ),
    Ok(
        "BonusMissionInfo::SetUpAlternateIcon(char const *, RadicalMathLibrary::Vector)",
    ),
    Ok(
        "BonusMissionInfo::SetEventLocator(EventLocator *)",
    ),
    Ok(
        "BonusMissionInfo::SetPositions(CarStartLocator *, CarStartLocator *, CarStartLocator *)",
    ),
    Ok(
        "BonusMissionInfo::CleanUp(void)",
    ),
    Ok(
        "BonusMissionInfo::Update(unsigned int)",
    ),
    Ok(
        "BonusMissionInfo::Enable(void)",
    ),
    Ok(
        "BonusMissionInfo::Disable(void)",
    ),
    Ok(
        "BonusMissionInfo::SetCompleted(bool)",
    ),
    Ok(
        "BonusMissionInfo::TriggerDialogue(void)",
    ),
    Ok(
        "BonusMissionInfo::SetNPC(Character *)",
    ),
    Ok(
        "BonusMissionInfo::ResetCharacterPositions(void)",
    ),
    Ok(
        "BonusMissionInfo::ResetMissionBitmap(void)",
    ),
    Ok(
        "NoCopBonusObjective::NoCopBonusObjective(void)",
    ),
    Ok(
        "NoCopBonusObjective::~NoCopBonusObjective(void)",
    ),
    Ok(
        "NoCopBonusObjective::Initialize(void)",
    ),
    Ok(
        "NoCopBonusObjective::Finalize(void)",
    ),
    Ok(
        "NoCopBonusObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "NoCopBonusObjective::OnReset(void)",
    ),
    Ok(
        "NoCopBonusObjective::OnStart(void)",
    ),
    Ok(
        "NoCopBonusObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "NoDamageBonusObjective::NoDamageBonusObjective(void)",
    ),
    Ok(
        "NoDamageBonusObjective::~NoDamageBonusObjective(void)",
    ),
    Ok(
        "NoDamageBonusObjective::Initialize(void)",
    ),
    Ok(
        "NoDamageBonusObjective::Finalize(void)",
    ),
    Ok(
        "NoDamageBonusObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "NoDamageBonusObjective::OnReset(void)",
    ),
    Ok(
        "NoDamageBonusObjective::OnStart(void)",
    ),
    Ok(
        "NoDamageBonusObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "TimeRemainBonusObjective::TimeRemainBonusObjective(void)",
    ),
    Ok(
        "TimeRemainBonusObjective::~TimeRemainBonusObjective(void)",
    ),
    Ok(
        "TimeRemainBonusObjective::Initialize(void)",
    ),
    Ok(
        "TimeRemainBonusObjective::Finalize(void)",
    ),
    Ok(
        "TimeRemainBonusObjective::GetNumericData(void)",
    ),
    Ok(
        "TimeRemainBonusObjective::OnReset(void)",
    ),
    Ok(
        "TimeRemainBonusObjective::OnStart(void)",
    ),
    Ok(
        "TimeRemainBonusObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "RacePositionBonusObjective::RacePositionBonusObjective(void)",
    ),
    Ok(
        "RacePositionBonusObjective::~RacePositionBonusObjective(void)",
    ),
    Ok(
        "RacePositionBonusObjective::Initialize(void)",
    ),
    Ok(
        "RacePositionBonusObjective::Finalize(void)",
    ),
    Ok(
        "RacePositionBonusObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "RacePositionBonusObjective::OnReset(void)",
    ),
    Ok(
        "RacePositionBonusObjective::OnStart(void)",
    ),
    Ok(
        "RacePositionBonusObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "StatePropCollectible::StatePropCollectible(void)",
    ),
    Ok(
        "StatePropCollectible::~StatePropCollectible(void)",
    ),
    Ok(
        "StatePropCollectible::PreReactToCollision(sim::SimState *, sim::Collision &)",
    ),
    Ok(
        "StatePropCollectible::AdvanceAnimation(float)",
    ),
    Ok(
        "StatePropCollectible::SetTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "StatePropCollectible::SetPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "StatePropCollectible::LoadSetup(CStatePropData *, int, RadicalMathLibrary::Matrix const &, CollisionAttributes *, bool, tEntityStore *, bool, sim::CollisionObject *, sim::PhysicsObject *)",
    ),
    Ok(
        "StatePropCollectible::AddToDSG(void)",
    ),
    Ok(
        "StatePropCollectible::RemoveFromDSG(void)",
    ),
    Ok(
        "StatePropCollectible::Update(float)",
    ),
    Ok(
        "StatePropCollectible::RecieveEvent(int, CStateProp *)",
    ),
    Ok(
        "StatePropCollectible::Explode(void)",
    ),
    Ok(
        "StatePropCollectible::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "StatePropCollectible::GetHeading(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "StatePropCollectible::EnableHudIcon(bool)",
    ),
    Ok(
        "StatePropCollectible::DoCollisionTesting(void)",
    ),
    Ok(
        "StatePropCollectible::CameraShake(void)",
    ),
    Ok(
        "tName * __uninitialized_copy_aux<tName *, tName *>(tName *, tName *, tName *, __false_type)",
    ),
    Ok(
        "vector<tName, s2alloc<tName> >::_M_insert_aux(tName *, tName const &)",
    ),
    Ok(
        "void fill<tName *, tName>(tName *, tName *, tName const &)",
    ),
    Ok(
        "tName * __uninitialized_fill_n_aux<tName *, unsigned int, tName>(tName *, unsigned int, tName const &, __false_type)",
    ),
    Ok(
        "vector<tName, s2alloc<tName> >::insert(tName *, unsigned int, tName const &)",
    ),
    Ok(
        "MissionStage type_info function",
    ),
    Ok(
        "Mission type_info function",
    ),
    Ok(
        "BonusMissionInfo type_info function",
    ),
    Ok(
        "GameplayManager type_info function",
    ),
    Ok(
        "MissionManager type_info function",
    ),
    Ok(
        "MissionScriptLoader type_info function",
    ),
    Ok(
        "AnimatedIcon::AnimIconDSG type_info function",
    ),
    Ok(
        "AnimatedIcon type_info function",
    ),
    Ok(
        "tCompositeDrawable::DrawableElement type_info function",
    ),
    Ok(
        "BonusObjective type_info function",
    ),
    Ok(
        "StatePropCollectible type_info function",
    ),
    Ok(
        "NoDamageBonusObjective type_info function",
    ),
    Ok(
        "NoCopBonusObjective type_info function",
    ),
    Ok(
        "TimeRemainBonusObjective type_info function",
    ),
    Ok(
        "RacePositionBonusObjective type_info function",
    ),
    Ok(
        "HasPresentationInfo type_info function",
    ),
    Ok(
        "_Vector_alloc_base<tName, s2alloc<tName>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "GameplayManager::PlayerAndCarInfo::PlayerAndCarInfo(void)",
    ),
    Ok(
        "GameplayManager::CarDataStruct::CarDataStruct(void)",
    ),
    Ok(
        "GameplayManager::OnPresentationEventBegin(PresentationEvent *)",
    ),
    Ok(
        "GameplayManager::OnPresentationEventLoadComplete(PresentationEvent *)",
    ),
    Ok(
        "GameplayManager::OnPresentationEventEnd(PresentationEvent *)",
    ),
    Ok(
        "GameplayManager::IsSundayDrive(void)",
    ),
    Ok(
        "GameplayManager::IsSuperSprint(void)",
    ),
    Ok(
        "MissionManager::IsSundayDrive(void)",
    ),
    Ok(
        "Console::ExecuteScriptCallback::ExecuteScriptCallback(void)",
    ),
    Ok(
        "BonusObjective::~BonusObjective(void)",
    ),
    Ok(
        "BonusObjective::OnReset(void)",
    ),
    Ok(
        "BonusObjective::OnStart(void)",
    ),
    Ok(
        "BonusObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "NoDamageBonusObjective::GetNumericData(void)",
    ),
    Ok(
        "NoCopBonusObjective::GetNumericData(void)",
    ),
    Ok(
        "RacePositionBonusObjective::GetNumericData(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tTexture>::SafeCast(void)",
    ),
    Ok(
        "Console::ExecuteScriptCallback type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tTexture> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tTexture>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to GameplayManager::spInstance",
    ),
    Ok(
        "SafeZone::~SafeZone(void)",
    ),
    Ok(
        "SafeZone::SafeZone(CarStartLocator *, unsigned int)",
    ),
    Ok(
        "SafeZone::InsideZone(RadicalMathLibrary::Vector)",
    ),
    Ok(
        "SafeZone type_info function",
    ),
    Ok(
        "CharacterSheetManager::CreateInstance(void)",
    ),
    Ok(
        "CharacterSheetManager::GetInstance(void)",
    ),
    Ok(
        "CharacterSheetManager::DestroyInstance(void)",
    ),
    Ok(
        "CharacterSheetManager::SetMissionComplete(RenderEnums::LevelEnum, char *, bool, int)",
    ),
    Ok(
        "CharacterSheetManager::IncrementMissionAttempt(RenderEnums::LevelEnum, char *)",
    ),
    Ok(
        "CharacterSheetManager::SetMissionSkipped(RenderEnums::LevelEnum, RenderEnums::MissionEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryNumberOfAttempts(RenderEnums::LevelEnum, int)",
    ),
    Ok(
        "CharacterSheetManager::QueryMissionStatus(RenderEnums::LevelEnum, int)",
    ),
    Ok(
        "CharacterSheetManager::QueryStreetRaceStatus(RenderEnums::LevelEnum, char *)",
    ),
    Ok(
        "CharacterSheetManager::QueryBonusMissionStatus(RenderEnums::LevelEnum, char *)",
    ),
    Ok(
        "CharacterSheetManager::QueryAllCardsCollected(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryBonusMissionCompleted(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryAllStreetRacesCompleted(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::InitCharacterSheet(void)",
    ),
    Ok(
        "CharacterSheetManager::AddMission(RenderEnums::LevelEnum, char *)",
    ),
    Ok(
        "CharacterSheetManager::AddStreetRace(RenderEnums::LevelEnum, char *)",
    ),
    Ok(
        "CharacterSheetManager::AddBonusMission(RenderEnums::LevelEnum, char *)",
    ),
    Ok(
        "CharacterSheetManager::AddCard(RenderEnums::LevelEnum, int)",
    ),
    Ok(
        "CharacterSheetManager::LoadData(unsigned char const *, unsigned int)",
    ),
    Ok(
        "CharacterSheetManager::SaveData(unsigned char *, unsigned int)",
    ),
    Ok(
        "CharacterSheetManager::SetCurrentMission(RenderEnums::LevelEnum, RenderEnums::MissionEnum)",
    ),
    Ok(
        "CharacterSheetManager::GetNumberOfTokens(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::AddTokens(RenderEnums::LevelEnum, int)",
    ),
    Ok(
        "CharacterSheetManager::SubtractTokens(RenderEnums::LevelEnum, int)",
    ),
    Ok(
        "CharacterSheetManager::QueryCurrentMission(void)",
    ),
    Ok(
        "CharacterSheetManager::QueryHighestMission(void)",
    ),
    Ok(
        "CharacterSheetManager::QueryNavSystemSetting(void)",
    ),
    Ok(
        "CharacterSheetManager::SetNavSystemOn(bool)",
    ),
    Ok(
        "CharacterSheetManager::SetPurchasedRewards(RenderEnums::LevelEnum, int)",
    ),
    Ok(
        "CharacterSheetManager::AddCarToInventory(char const *)",
    ),
    Ok(
        "CharacterSheetManager::GetCarIndex(char const *)",
    ),
    Ok(
        "CharacterSheetManager::GetCarDamageState(int)",
    ),
    Ok(
        "CharacterSheetManager::GetCarHealth(int)",
    ),
    Ok(
        "CharacterSheetManager::UpdateCarHealth(int, float)",
    ),
    Ok(
        "CharacterSheetManager::CharacterSheetManager(void)",
    ),
    Ok(
        "CharacterSheetManager::~CharacterSheetManager(void)",
    ),
    Ok(
        "CharacterSheetManager::GetMissionRecord(RenderEnums::LevelEnum, char *)",
    ),
    Ok(
        "CharacterSheetManager::GetMissionRecord(RenderEnums::LevelEnum, int)",
    ),
    Ok(
        "CharacterSheetManager::GetStreetRaceRecord(RenderEnums::LevelEnum, char *)",
    ),
    Ok(
        "CharacterSheetManager::GetBonusMissionRecord(RenderEnums::LevelEnum, char *)",
    ),
    Ok(
        "CharacterSheetManager::GetCollectableRecord(RenderEnums::LevelEnum, CharacterSheetManager::eCollectableType, int)",
    ),
    Ok(
        "CharacterSheetManager::QueryFMVUnlocked(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::SetFMVUnlocked(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryNumMissionsCompleted(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryNumWaspsDestroyed(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryNumGagsViewed(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryGagViewed(RenderEnums::LevelEnum, unsigned int)",
    ),
    Ok(
        "CharacterSheetManager::IncNumWaspsDestroyed(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::AddGagViewed(RenderEnums::LevelEnum, unsigned int)",
    ),
    Ok(
        "CharacterSheetManager::QueryNumCarUnlocked(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryNumSkinsUnlocked(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryNumBonusMissionsCompleted(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryNumStreetRacesCompleted(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryNumCardsCollected(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryPercentLevelCompleted(RenderEnums::LevelEnum) const",
    ),
    Ok(
        "CharacterSheetManager::QueryPercentGameCompleted(void) const",
    ),
    Ok(
        "CharacterSheetManager::IsAllStoryMissionsCompleted(void)",
    ),
    Ok(
        "CharacterSheetManager::UpdateRewardsManager(void)",
    ),
    Ok(
        "CharacterSheetManager::IsMiniGameUnlocked(void) const",
    ),
    Ok(
        "CharacterSheetManager::IsState(int)",
    ),
    Ok(
        "CharacterSheetManager::SetState(int, bool)",
    ),
    Ok(
        "CharacterSheetManager::AddGambleRace(RenderEnums::LevelEnum, char *)",
    ),
    Ok(
        "CharacterSheetManager::SetGambleRaceBestTime(RenderEnums::LevelEnum, int)",
    ),
    Ok(
        "CharacterSheetManager::GetGambleRaceBestTime(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::QueryCurrentSkin(RenderEnums::LevelEnum)",
    ),
    Ok(
        "CharacterSheetManager::SetCurrentSkin(RenderEnums::LevelEnum, char *)",
    ),
    Ok(
        "CharacterSheetManager type_info function",
    ),
    Ok(
        "CharacterSheetManager::ResetData(void)",
    ),
    Ok(
        "global constructors keyed to CharacterSheetManager::spInstance",
    ),
    Ok(
        "Reward::Reward(void)",
    ),
    Ok(
        "Reward::~Reward(void)",
    ),
    Ok(
        "Reward::SetName(char *)",
    ),
    Ok(
        "Reward::SetRewardType(Reward::eRewardType)",
    ),
    Ok(
        "Reward::SetQuestType(Reward::eQuestType)",
    ),
    Ok(
        "Reward::SetFilename(char *)",
    ),
    Ok(
        "Reward::UnlockReward(void)",
    ),
    Ok(
        "RewardsManager::CreateInstance(void)",
    ),
    Ok(
        "RewardsManager::GetInstance(void)",
    ),
    Ok(
        "RewardsManager::DestroyInstance(void)",
    ),
    Ok(
        "RewardsManager::InitRewards(void)",
    ),
    Ok(
        "RewardsManager::ClearRewards(void)",
    ),
    Ok(
        "RewardsManager::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "RewardsManager::LoadScript(void)",
    ),
    Ok(
        "RewardsManager::BindReward(char *, char *, Reward::eRewardType, Reward::eQuestType, int)",
    ),
    Ok(
        "RewardsManager::GetReward(int, Reward::eQuestType)",
    ),
    Ok(
        "RewardsManager::SetCarAttributes(char *, float, float, float, float)",
    ),
    Ok(
        "RewardsManager::InitCarAttributeRecords(void)",
    ),
    Ok(
        "RewardsManager::GetCarAttributeRecord(char *)",
    ),
    Ok(
        "RewardsManager::ComputeOverallCarRating(CarAttributeRecord *)",
    ),
    Ok(
        "RewardsManager::InitTokenStore(void)",
    ),
    Ok(
        "RewardsManager::AddMerchandise(char *, char *, Reward::eRewardType, int, int, Merchandise::eSellerType)",
    ),
    Ok(
        "RewardsManager::GetMerchandise(int, char const *)",
    ),
    Ok(
        "RewardsManager::GetMerchandise(int, int)",
    ),
    Ok(
        "RewardsManager::GetMerchandiseIndex(int, char const *)",
    ),
    Ok(
        "RewardsManager::FindFirstMerchandise(int, Merchandise::eSellerType)",
    ),
    Ok(
        "RewardsManager::FindNextMerchandise(int, Merchandise::eSellerType)",
    ),
    Ok(
        "RewardsManager::BuyMerchandise(int, char const *)",
    ),
    Ok(
        "RewardsManager::RewardsManager(void)",
    ),
    Ok(
        "RewardsManager::~RewardsManager(void)",
    ),
    Ok(
        "RewardsManager::NameCheck(char *)",
    ),
    Ok(
        "RewardsManager::FileNameCheck(char *)",
    ),
    Ok(
        "RewardsManager::LevelCheck(int)",
    ),
    Ok(
        "RewardsManager::IncUpdateQue(void)",
    ),
    Ok(
        "RewardsManager::SynchWithCharacterSheet(void)",
    ),
    Ok(
        "RewardsManager::SetTotalGags(int, int)",
    ),
    Ok(
        "RewardsManager::GetTotalGags(int) const",
    ),
    Ok(
        "RewardsManager::SetTotalWasps(int, int)",
    ),
    Ok(
        "RewardsManager::GetTotalWasps(int) const",
    ),
    Ok(
        "Merchandise::Merchandise(void)",
    ),
    Ok(
        "Merchandise::~Merchandise(void)",
    ),
    Ok(
        "Reward type_info function",
    ),
    Ok(
        "Merchandise type_info function",
    ),
    Ok(
        "RewardsManager type_info function",
    ),
    Ok(
        "DamageCondition::DamageCondition(void)",
    ),
    Ok(
        "DamageCondition::~DamageCondition(void)",
    ),
    Ok(
        "DamageCondition::OnInitialize(void)",
    ),
    Ok(
        "DamageCondition::OnFinalize(void)",
    ),
    Ok(
        "DamageCondition::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "DamageCondition::IsClose(void)",
    ),
    Ok(
        "FollowCondition::FollowCondition(void)",
    ),
    Ok(
        "FollowCondition::~FollowCondition(void)",
    ),
    Ok(
        "FollowCondition::Update(unsigned int)",
    ),
    Ok(
        "FollowCondition::IsChaseCondition(void)",
    ),
    Ok(
        "FollowCondition::IsClose(void)",
    ),
    Ok(
        "FollowCondition::OnInitialize(void)",
    ),
    Ok(
        "FollowCondition::OnFinalize(void)",
    ),
    Ok(
        "FollowCondition::CalculateDistanceToTarget(void)",
    ),
    Ok(
        "LeaveInteriorCondition::LeaveInteriorCondition(void)",
    ),
    Ok(
        "LeaveInteriorCondition::~LeaveInteriorCondition(void)",
    ),
    Ok(
        "LeaveInteriorCondition::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "LeaveInteriorCondition::IsClose(void)",
    ),
    Ok(
        "LeaveInteriorCondition::OnInitialize(void)",
    ),
    Ok(
        "LeaveInteriorCondition::OnFinalize(void)",
    ),
    Ok(
        "MissionCondition::MissionCondition(void)",
    ),
    Ok(
        "MissionCondition::~MissionCondition(void)",
    ),
    Ok(
        "MissionCondition::Initialize(void)",
    ),
    Ok(
        "MissionCondition::Finalize(void)",
    ),
    Ok(
        "MissionCondition::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "MissionCondition::IsChaseCondition(void)",
    ),
    Ok(
        "MissionCondition::IsClose(void)",
    ),
    Ok(
        "OutOfBoundsCondition::OutOfBoundsCondition(void)",
    ),
    Ok(
        "OutOfBoundsCondition::~OutOfBoundsCondition(void)",
    ),
    Ok(
        "OutOfBoundsCondition::OnInitialize(void)",
    ),
    Ok(
        "OutOfBoundsCondition::OnFinalize(void)",
    ),
    Ok(
        "OutOfBoundsCondition::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "OutOfBoundsCondition::IsClose(void)",
    ),
    Ok(
        "RaceCondition::RaceCondition(void)",
    ),
    Ok(
        "RaceCondition::~RaceCondition(void)",
    ),
    Ok(
        "RaceCondition::OnInitialize(void)",
    ),
    Ok(
        "RaceCondition::OnFinalize(void)",
    ),
    Ok(
        "RaceCondition::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "RaceCondition::IsChaseCondition(void)",
    ),
    Ok(
        "RaceCondition::IsClose(void)",
    ),
    Ok(
        "TimeOutCondition::TimeOutCondition(void)",
    ),
    Ok(
        "TimeOutCondition::~TimeOutCondition(void)",
    ),
    Ok(
        "TimeOutCondition::Update(unsigned int)",
    ),
    Ok(
        "TimeOutCondition::IsClose(void)",
    ),
    Ok(
        "TimeOutCondition::SetViolated(bool)",
    ),
    Ok(
        "VehicleCondition::VehicleCondition(void)",
    ),
    Ok(
        "VehicleCondition::~VehicleCondition(void)",
    ),
    Ok(
        "PositionCondition::PositionCondition(void)",
    ),
    Ok(
        "PositionCondition::~PositionCondition(void)",
    ),
    Ok(
        "PositionCondition::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "PositionCondition::OnInitialize(void)",
    ),
    Ok(
        "PositionCondition::OnFinalize(void)",
    ),
    Ok(
        "VehicleCarryingStateProp::VehicleCarryingStateProp(void)",
    ),
    Ok(
        "VehicleCarryingStateProp::~VehicleCarryingStateProp(void)",
    ),
    Ok(
        "VehicleCarryingStateProp::Update(unsigned int)",
    ),
    Ok(
        "VehicleCarryingStateProp::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "VehicleCarryingStateProp::OnInitialize(void)",
    ),
    Ok(
        "VehicleCarryingStateProp::OnFinalize(void)",
    ),
    Ok(
        "GetOutOfCarCondition::GetOutOfCarCondition(void)",
    ),
    Ok(
        "GetOutOfCarCondition::~GetOutOfCarCondition(void)",
    ),
    Ok(
        "GetOutOfCarCondition::Update(unsigned int)",
    ),
    Ok(
        "GetOutOfCarCondition::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "GetOutOfCarCondition::GetTimeRemainingTilFailuremilliseconds(void)",
    ),
    Ok(
        "GetOutOfCarCondition::IsClose(void)",
    ),
    Ok(
        "GetOutOfCarCondition::OnInitialize(void)",
    ),
    Ok(
        "GetOutOfCarCondition::OnFinalize(void)",
    ),
    Ok(
        "NotAbductedCondition::NotAbductedCondition(void)",
    ),
    Ok(
        "NotAbductedCondition::~NotAbductedCondition(void)",
    ),
    Ok(
        "NotAbductedCondition::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "NotAbductedCondition::OnInitialize(void)",
    ),
    Ok(
        "NotAbductedCondition::OnFinalize(void)",
    ),
    Ok(
        "KeepBarrelCondition::KeepBarrelCondition(void)",
    ),
    Ok(
        "KeepBarrelCondition::~KeepBarrelCondition(void)",
    ),
    Ok(
        "KeepBarrelCondition::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "KeepBarrelCondition::OnInitialize(void)",
    ),
    Ok(
        "KeepBarrelCondition::OnFinalize(void)",
    ),
    Ok(
        "MissionCondition type_info function",
    ),
    Ok(
        "VehicleCondition type_info function",
    ),
    Ok(
        "DamageCondition type_info function",
    ),
    Ok(
        "FollowCondition type_info function",
    ),
    Ok(
        "LeaveInteriorCondition type_info function",
    ),
    Ok(
        "OutOfBoundsCondition type_info function",
    ),
    Ok(
        "RaceCondition type_info function",
    ),
    Ok(
        "TimeOutCondition type_info function",
    ),
    Ok(
        "PositionCondition type_info function",
    ),
    Ok(
        "VehicleCarryingStateProp type_info function",
    ),
    Ok(
        "GetOutOfCarCondition type_info function",
    ),
    Ok(
        "NotAbductedCondition type_info function",
    ),
    Ok(
        "KeepBarrelCondition type_info function",
    ),
    Ok(
        "MissionCondition::Update(unsigned int)",
    ),
    Ok(
        "MissionCondition::OnInitialize(void)",
    ),
    Ok(
        "MissionCondition::OnFinalize(void)",
    ),
    Ok(
        "VehicleCondition::OnInitialize(void)",
    ),
    Ok(
        "VehicleCondition::OnFinalize(void)",
    ),
    Ok(
        "DeliveryObjective::DeliveryObjective(void)",
    ),
    Ok(
        "DeliveryObjective::~DeliveryObjective(void)",
    ),
    Ok(
        "DeliveryObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "DeliveryObjective::OnInitCollectibles(void)",
    ),
    Ok(
        "DeliveryObjective::OnInitCollectibleObjective(void)",
    ),
    Ok(
        "DeliveryObjective::OnFinalizeCollectibleObjective(void)",
    ),
    Ok(
        "DeliveryObjective::OnCollection(unsigned int, bool &)",
    ),
    Ok(
        "DeliveryObjective::OnUpdateCollectibleObjective(unsigned int)",
    ),
    Ok(
        "DeliveryObjective::FindStateProps(void)",
    ),
    Ok(
        "DeliveryObjective::ReleaseAllStateProps(void)",
    ),
    Ok(
        "DeliveryObjective::SetButtonHandlersEnabled(bool)",
    ),
    Ok(
        "DeliveryObjective::SetStatePropState(int)",
    ),
    Ok(
        "DeliveryObjective::SetStatePropHUDIconEnable(bool)",
    ),
    Ok(
        "DestroyObjective::DestroyObjective(void)",
    ),
    Ok(
        "DestroyObjective::~DestroyObjective(void)",
    ),
    Ok(
        "DestroyObjective::OnInitialize(void)",
    ),
    Ok(
        "DestroyObjective::OnFinalize(void)",
    ),
    Ok(
        "DestroyObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "DestroyObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "DestroyObjective::SetTargetVehicle(Vehicle *)",
    ),
    Ok(
        "DestroyBossObjective::DestroyBossObjective(void)",
    ),
    Ok(
        "DestroyBossObjective::~DestroyBossObjective(void)",
    ),
    Ok(
        "DestroyBossObjective::SetTarget(Actor *)",
    ),
    Ok(
        "DestroyBossObjective::OnInitialize(void)",
    ),
    Ok(
        "DestroyBossObjective::OnFinalize(void)",
    ),
    Ok(
        "DestroyBossObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "DestroyBossObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "DialogueObjective::DialogueObjective(void)",
    ),
    Ok(
        "DialogueObjective::~DialogueObjective(void)",
    ),
    Ok(
        "DialogueObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "DialogueObjective::SetPositions(CarStartLocator *, CarStartLocator *, CarStartLocator *, bool)",
    ),
    Ok(
        "DialogueObjective::CharactersReset(void)",
    ),
    Ok(
        "DialogueObjective::SetChar1Name(char const *)",
    ),
    Ok(
        "DialogueObjective::SetChar2Name(char const *)",
    ),
    Ok(
        "DialogueObjective::SetDialogueName(char const *)",
    ),
    Ok(
        "DialogueObjective::OnInitialize(void)",
    ),
    Ok(
        "DialogueObjective::OnFinalize(void)",
    ),
    Ok(
        "DialogueObjective::ResetCharacterPositions(void)",
    ),
    Ok(
        "FollowObjective::FollowObjective(void)",
    ),
    Ok(
        "FollowObjective::~FollowObjective(void)",
    ),
    Ok(
        "FollowObjective::OnInitialize(void)",
    ),
    Ok(
        "FollowObjective::OnFinalize(void)",
    ),
    Ok(
        "FollowObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "FollowObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "GetInObjective::GetInObjective(void)",
    ),
    Ok(
        "GetInObjective::~GetInObjective(void)",
    ),
    Ok(
        "GetInObjective::OnInitialize(void)",
    ),
    Ok(
        "GetInObjective::OnFinalize(void)",
    ),
    Ok(
        "GetInObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "GetInObjective::SetStrict(char const *)",
    ),
    Ok(
        "GetInObjective::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "GetInObjective::GetHeading(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "GoToObjective::GoToObjective(void)",
    ),
    Ok(
        "GoToObjective::~GoToObjective(void)",
    ),
    Ok(
        "GoToObjective::OnInitialize(void)",
    ),
    Ok(
        "GoToObjective::OnFinalize(void)",
    ),
    Ok(
        "GoToObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "GoToObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "GoToObjective::SetDestinationNames(char *, char *, float)",
    ),
    Ok(
        "GoToObjective::SetCollectEffectName(char *)",
    ),
    Ok(
        "LoseObjective::LoseObjective(void)",
    ),
    Ok(
        "LoseObjective::~LoseObjective(void)",
    ),
    Ok(
        "LoseObjective::OnInitialize(void)",
    ),
    Ok(
        "LoseObjective::OnFinalize(void)",
    ),
    Ok(
        "LoseObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "MissionObjective::MissionObjective(void)",
    ),
    Ok(
        "MissionObjective::~MissionObjective(void)",
    ),
    Ok(
        "MissionObjective::AddNPCWaypoint(char const *, char const *)",
    ),
    Ok(
        "MissionObjective::Initialize(void)",
    ),
    Ok(
        "MissionObjective::Finalize(void)",
    ),
    Ok(
        "MissionObjective::Update(unsigned int)",
    ),
    Ok(
        "MissionObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "MissionObjective::AddNPC(char const *, char const *, bool)",
    ),
    Ok(
        "MissionObjective::RemoveNPC(char const *, bool)",
    ),
    Ok(
        "MissionObjective::RegisterLocator(Locator *, int &, bool, HudMapIcon::eIconType)",
    ),
    Ok(
        "MissionObjective::RegisterPosition(RadicalMathLibrary::Vector const &, int &, bool, HudMapIcon::eIconType, IHudMapIconLocator *)",
    ),
    Ok(
        "MissionObjective::UnregisterLocator(int &)",
    ),
    Ok(
        "MissionObjective::UnregisterPosition(int &)",
    ),
    Ok(
        "MissionObjective::GetObjectiveType(void) const",
    ),
    Ok(
        "MissionObjective::SetObjectiveType(MissionObjective::ObjectiveTypeEnum)",
    ),
    Ok(
        "MissionObjective::UnlightPath(SwapArray<RoadManager::PathElement> &)",
    ),
    Ok(
        "MissionObjective::UnlightCurrentPath(SwapArray<RoadManager::PathElement> &)",
    ),
    Ok(
        "MissionObjective::LightPathRightWay(SwapArray<RoadManager::PathElement> &, int, int)",
    ),
    Ok(
        "MissionObjective::LightPathWrongWay(SwapArray<RoadManager::PathElement> &, int, int)",
    ),
    Ok(
        "MissionObjective::UpdateLightPath(MissionObjective::PathStruct &)",
    ),
    Ok(
        "MissionObjective::FindIntersectionInPath(SwapArray<RoadManager::PathElement> &, Intersection *)",
    ),
    Ok(
        "MissionObjective::FindRoadInPath(SwapArray<RoadManager::PathElement> &, Road *)",
    ),
    Ok(
        "MissionObjective::UpdateGroundHeights(SwapArray<RoadManager::PathElement> &)",
    ),
    Ok(
        "MissionObjective::UpdateLongRoadArrows(MissionObjective::PathStruct &)",
    ),
    Ok(
        "MissionObjective::LightPath(RadicalMathLibrary::Vector &, MissionObjective::PathStruct &)",
    ),
    Ok(
        "MissionObjective::GetHeadingAlongPath(SwapArray<RoadManager::PathElement> &, int, RoadSegment *, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "MissionObjective::UpdateAnimPosition(AnimEntityDSG *, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "MissionObjective::IsPattyAndSelmaDialog(void) const",
    ),
    Ok(
        "MissionObjective::IsRaceDialog(void) const",
    ),
    Ok(
        "RaceObjective::RaceObjective(void)",
    ),
    Ok(
        "RaceObjective::~RaceObjective(void)",
    ),
    Ok(
        "RaceObjective::OnInitialize(void)",
    ),
    Ok(
        "RaceObjective::OnInitCollectibles(void)",
    ),
    Ok(
        "RaceObjective::OnInitCollectibleObjective(void)",
    ),
    Ok(
        "RaceObjective::OnFinalizeCollectibleObjective(void)",
    ),
    Ok(
        "RaceObjective::OnCollection(unsigned int, bool &)",
    ),
    Ok(
        "RaceObjective::OnUpdateCollectibleObjective(unsigned int)",
    ),
    Ok(
        "RaceObjective::QueryIsGambleRace(void)",
    ),
    Ok(
        "RaceObjective::SetGambleRace(bool)",
    ),
    Ok(
        "RaceObjective::SetParTime(int)",
    ),
    Ok(
        "RaceObjective::GetParTime(void)",
    ),
    Ok(
        "RaceObjective::CalculatePosition(void)",
    ),
    Ok(
        "TalkToObjective::TalkToObjective(void)",
    ),
    Ok(
        "TalkToObjective::~TalkToObjective(void)",
    ),
    Ok(
        "TalkToObjective::SetTalkToTarget(char const *, TalkToObjective::IconType, float, float)",
    ),
    Ok(
        "TalkToObjective::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "TalkToObjective::GetHeading(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "TalkToObjective::OnInitialize(void)",
    ),
    Ok(
        "TalkToObjective::OnFinalize(void)",
    ),
    Ok(
        "TalkToObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "TalkToObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "CollectibleObjective::CollectibleObjective(void)",
    ),
    Ok(
        "CollectibleObjective::~CollectibleObjective(void)",
    ),
    Ok(
        "CollectibleObjective::MoveCollectible(unsigned int, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "CollectibleObjective::AddCollectibleLocatorName(char *, char *, unsigned int, tUidUnaligned, float)",
    ),
    Ok(
        "CollectibleObjective::SetCollectEffectName(char *)",
    ),
    Ok(
        "CollectibleObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CollectibleObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "CollectibleObjective::OnInitialize(void)",
    ),
    Ok(
        "CollectibleObjective::GetCollectiblePathInfo(unsigned int, RoadManager::PathElement &, float &)",
    ),
    Ok(
        "CollectibleObjective::OnFinalize(void)",
    ),
    Ok(
        "CollectibleObjective::CheckCollectibleLocators(Locator *)",
    ),
    Ok(
        "CollectibleObjective::Collect(unsigned int, bool)",
    ),
    Ok(
        "CollectibleObjective::Activate(unsigned int, bool, bool, HudMapIcon::eIconType, bool)",
    ),
    Ok(
        "CollectibleObjective::SetFocus(unsigned int)",
    ),
    Ok(
        "CollectibleObjective::ResetCollectibles(void)",
    ),
    Ok(
        "CollectibleObjective::DumpCollectible(int, Vehicle *, Vehicle *, bool, bool)",
    ),
    Ok(
        "CollectibleObjective::GetAnyCollectedID(void) const",
    ),
    Ok(
        "CollectibleObjective::Uncollect(int)",
    ),
    Ok(
        "CollectDumpedObjective::CollectDumpedObjective(void)",
    ),
    Ok(
        "CollectDumpedObjective::~CollectDumpedObjective(void)",
    ),
    Ok(
        "CollectDumpedObjective::BindCollectibleToWaypoint(int, unsigned int)",
    ),
    Ok(
        "CollectDumpedObjective::SetDumpVehicle(Vehicle *)",
    ),
    Ok(
        "CollectDumpedObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CollectDumpedObjective::OnInitCollectibles(void)",
    ),
    Ok(
        "CollectDumpedObjective::OnInitCollectibleObjective(void)",
    ),
    Ok(
        "CollectDumpedObjective::OnFinalizeCollectibleObjective(void)",
    ),
    Ok(
        "CollectDumpedObjective::OnCollection(unsigned int, bool &)",
    ),
    Ok(
        "CollectDumpedObjective::OnUpdateCollectibleObjective(unsigned int)",
    ),
    Ok(
        "CollectDumpedObjective::FindFreeSlot(void)",
    ),
    Ok(
        "FMVObjective::FMVObjective(void)",
    ),
    Ok(
        "FMVObjective::~FMVObjective(void)",
    ),
    Ok(
        "FMVObjective::OnPresentationEventEnd(PresentationEvent *)",
    ),
    Ok(
        "FMVObjective::OnInitialize(void)",
    ),
    Ok(
        "FMVObjective::SetFileName(char const *)",
    ),
    Ok(
        "InteriorObjective::InteriorObjective(void)",
    ),
    Ok(
        "InteriorObjective::~InteriorObjective(void)",
    ),
    Ok(
        "InteriorObjective::OnInitialize(void)",
    ),
    Ok(
        "InteriorObjective::OnFinalize(void)",
    ),
    Ok(
        "InteriorObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "InteriorObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "InteriorObjective::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "InteriorObjective::GetHeading(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "InteriorObjective::SetDestination(char const *)",
    ),
    Ok(
        "InteriorObjective::SetIcon(char const *)",
    ),
    Ok(
        "CoinObjective::CoinObjective(void)",
    ),
    Ok(
        "CoinObjective::~CoinObjective(void)",
    ),
    Ok(
        "CoinObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CoinObjective::OnInitialize(void)",
    ),
    Ok(
        "CoinObjective::OnFinalize(void)",
    ),
    Ok(
        "CoinObjective::Update(unsigned int)",
    ),
    Ok(
        "CoinObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "CoinObjective::SetCoinFee(int)",
    ),
    Ok(
        "CoinObjective::GetCoinAmount(void)",
    ),
    Ok(
        "LoadVehicleObjective::LoadVehicleObjective(void)",
    ),
    Ok(
        "LoadVehicleObjective::~LoadVehicleObjective(void)",
    ),
    Ok(
        "LoadVehicleObjective::OnInitialize(void)",
    ),
    Ok(
        "LoadVehicleObjective::OnFinalize(void)",
    ),
    Ok(
        "LoadVehicleObjective::LoadDisposableCarAsyncCallback::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "PickupItemObjective::PickupItemObjective(void)",
    ),
    Ok(
        "PickupItemObjective::~PickupItemObjective(void)",
    ),
    Ok(
        "PickupItemObjective::SetTarget(char const *)",
    ),
    Ok(
        "PickupItemObjective::OnInitialize(void)",
    ),
    Ok(
        "PickupItemObjective::OnFinalize(void)",
    ),
    Ok(
        "PickupItemObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "PickupItemObjective::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "PickupItemObjective::MoveObjectToStartPosition(void)",
    ),
    Ok(
        "TimerObjective::TimerObjective(void)",
    ),
    Ok(
        "TimerObjective::~TimerObjective(void)",
    ),
    Ok(
        "TimerObjective::SetTimer(unsigned int)",
    ),
    Ok(
        "TimerObjective::OnInitialize(void)",
    ),
    Ok(
        "TimerObjective::OnFinalize(void)",
    ),
    Ok(
        "TimerObjective::Update(unsigned int)",
    ),
    Ok(
        "TimerObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "BuyCarObjective::BuyCarObjective(void)",
    ),
    Ok(
        "BuyCarObjective::~BuyCarObjective(void)",
    ),
    Ok(
        "BuyCarObjective::SetVehicleName(char const *)",
    ),
    Ok(
        "BuyCarObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "BuySkinObjective::BuySkinObjective(void)",
    ),
    Ok(
        "BuySkinObjective::~BuySkinObjective(void)",
    ),
    Ok(
        "BuySkinObjective::SetSkinName(char const *)",
    ),
    Ok(
        "BuySkinObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "GoOutsideObjective::GoOutsideObjective(void)",
    ),
    Ok(
        "GoOutsideObjective::~GoOutsideObjective(void)",
    ),
    Ok(
        "GoOutsideObjective::OnInitialize(void)",
    ),
    Ok(
        "MissionObjective type_info function",
    ),
    Ok(
        "CollectibleObjective type_info function",
    ),
    Ok(
        "DeliveryObjective type_info function",
    ),
    Ok(
        "DestroyObjective type_info function",
    ),
    Ok(
        "DestroyBossObjective type_info function",
    ),
    Ok(
        "DialogueObjective type_info function",
    ),
    Ok(
        "FollowObjective type_info function",
    ),
    Ok(
        "GetInObjective type_info function",
    ),
    Ok(
        "GoToObjective type_info function",
    ),
    Ok(
        "LoseObjective type_info function",
    ),
    Ok(
        "RaceObjective type_info function",
    ),
    Ok(
        "TalkToObjective type_info function",
    ),
    Ok(
        "CollectDumpedObjective type_info function",
    ),
    Ok(
        "CollectionCondition type_info function",
    ),
    Ok(
        "FMVObjective type_info function",
    ),
    Ok(
        "InteriorObjective type_info function",
    ),
    Ok(
        "CoinObjective type_info function",
    ),
    Ok(
        "LoadVehicleObjective::LoadDisposableCarAsyncCallback type_info function",
    ),
    Ok(
        "LoadVehicleObjective type_info function",
    ),
    Ok(
        "PickupItemObjective type_info function",
    ),
    Ok(
        "TimerObjective type_info function",
    ),
    Ok(
        "BuyCarObjective type_info function",
    ),
    Ok(
        "BuySkinObjective type_info function",
    ),
    Ok(
        "GoOutsideObjective type_info function",
    ),
    Ok(
        "MissionObjective::PathStruct::~PathStruct(void)",
    ),
    Ok(
        "MissionObjective::NPCStruct::~NPCStruct(void)",
    ),
    Ok(
        "MissionObjective::OnInitialize(void)",
    ),
    Ok(
        "MissionObjective::OnFinalize(void)",
    ),
    Ok(
        "MissionObjective::OnUpdate(unsigned int)",
    ),
    Ok(
        "CollectibleObjective::CollectibleLocatorData::~CollectibleLocatorData(void)",
    ),
    Ok(
        "CollectibleObjective::OnUpdateCollectibleObjective(unsigned int)",
    ),
    Ok(
        "radLoadInventory::SafeCast<ZoneEventLocator>::SafeCast(void)",
    ),
    Ok(
        "CollectionCondition::~CollectionCondition(void)",
    ),
    Ok(
        "CollectionCondition::Update(unsigned int)",
    ),
    Ok(
        "CollectionCondition::IsClose(void)",
    ),
    Ok(
        "FMVObjective::OnFinalize(void)",
    ),
    Ok(
        "FMVObjective::OnPresentationEventBegin(PresentationEvent *)",
    ),
    Ok(
        "FMVObjective::OnPresentationEventLoadComplete(PresentationEvent *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<StatePropCollectible>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<ZoneEventLocator> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<StatePropCollectible> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<StatePropCollectible>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<ZoneEventLocator>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to DeliveryObjective::DeliveryObjective(void)",
    ),
    Ok(
        "AnimationPlayer::AnimationPlayer(void)",
    ),
    Ok(
        "AnimationPlayer::~AnimationPlayer(void)",
    ),
    Ok(
        "AnimationPlayer::LoadData(char const *, bool, void *)",
    ),
    Ok(
        "AnimationPlayer::LoadData(char const *, AnimationPlayer::LoadDataCallBack *, bool, void *)",
    ),
    Ok(
        "AnimationPlayer::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "AnimationPlayer::Play(void)",
    ),
    Ok(
        "AnimationPlayer::Render(void)",
    ),
    Ok(
        "AnimationPlayer::Stop(void)",
    ),
    Ok(
        "AnimationPlayer::ClearData(void)",
    ),
    Ok(
        "AnimationPlayer::EnterExclusive(void)",
    ),
    Ok(
        "AnimationPlayer::LeaveExclusive(void)",
    ),
    Ok(
        "Blinker::Blinker(void)",
    ),
    Ok(
        "Blinker::~Blinker(void)",
    ),
    Ok(
        "Blinker::SetCharacter(Character *)",
    ),
    Ok(
        "Blinker::Update(int)",
    ),
    Ok(
        "CameraPlayer::CameraPlayer(void)",
    ),
    Ok(
        "CameraPlayer::~CameraPlayer(void)",
    ),
    Ok(
        "CameraPlayer::ClearData(void)",
    ),
    Ok(
        "CameraPlayer::DoLoaded(void)",
    ),
    Ok(
        "Language::GetHardwareLanguage(void)",
    ),
    Ok(
        "MouthFlapper::MouthFlapper(void)",
    ),
    Ok(
        "MouthFlapper::~MouthFlapper(void)",
    ),
    Ok(
        "MouthFlapper::GetDefaultSettings(tName const &)",
    ),
    Ok(
        "MouthFlapper::GetNumberOfDefaultSettings(void)",
    ),
    Ok(
        "MouthFlapper::SetCharacter(Character *)",
    ),
    Ok(
        "MouthFlapper::Advance(float)",
    ),
    Ok(
        "MouthFlapper::Update(poser::Pose *)",
    ),
    Ok(
        "MouthFlapper::NeuSpeed(void)",
    ),
    Ok(
        "MouthFlapperDefaultSetting::MouthFlapperDefaultSetting(tName const &, float, float, float, float, float)",
    ),
    Ok(
        "MouthFlapperDefaultSetting::MouthFlapperDefaultSetting(MouthFlapperDefaultSetting const &)",
    ),
    Ok(
        "MouthFlapperDefaultSetting::GetMaxDeviation(void) const",
    ),
    Ok(
        "MouthFlapperDefaultSetting::GetMaxOpen(void) const",
    ),
    Ok(
        "MouthFlapperDefaultSetting::GetMaxSpeed(void) const",
    ),
    Ok(
        "MouthFlapperDefaultSetting::GetMinOpen(void) const",
    ),
    Ok(
        "MouthFlapperDefaultSetting::GetMinSpeed(void) const",
    ),
    Ok(
        "MouthFlapperDefaultSetting::GetName(void) const",
    ),
    Ok(
        "MouthFlapperDefaultSetting::operator=(MouthFlapperDefaultSetting const &)",
    ),
    Ok(
        "NISPlayer::NISPlayer(void)",
    ),
    Ok(
        "NISPlayer::~NISPlayer(void)",
    ),
    Ok(
        "NISPlayer::ClearData(void)",
    ),
    Ok(
        "NISPlayer::DoLoaded(void)",
    ),
    Ok(
        "NISPlayer::DoRender(void)",
    ),
    Ok(
        "PlayerDrawable::PlayerDrawable(void)",
    ),
    Ok(
        "PlayerDrawable::~PlayerDrawable(void)",
    ),
    Ok(
        "PlayerDrawable::Display(void)",
    ),
    Ok(
        "PresentationManager::CreateInstance(void)",
    ),
    Ok(
        "PresentationManager::GetInstance(void)",
    ),
    Ok(
        "PresentationManager::DestroyInstance(void)",
    ),
    Ok(
        "PresentationManager::PresentationManager(void)",
    ),
    Ok(
        "PresentationManager::~PresentationManager(void)",
    ),
    Ok(
        "PresentationManager::Initialize(void)",
    ),
    Ok(
        "PresentationManager::Finalize(void)",
    ),
    Ok(
        "PresentationManager::InitializePlayerDrawable(void)",
    ),
    Ok(
        "PresentationManager::FinalizePlayerDrawable(void)",
    ),
    Ok(
        "PresentationManager::GetAnimatorNpc(void)",
    ),
    Ok(
        "PresentationManager::GetAnimatorPc(void)",
    ),
    Ok(
        "PresentationManager::PlayFMV(char const *, PresentationEvent::PresentationEventCallBack *, bool, bool)",
    ),
    Ok(
        "PresentationManager::OnPresentationEventBegin(PresentationEvent *)",
    ),
    Ok(
        "PresentationManager::OnPresentationEventLoadComplete(PresentationEvent *)",
    ),
    Ok(
        "PresentationManager::OnPresentationEventEnd(PresentationEvent *)",
    ),
    Ok(
        "PresentationManager::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "PresentationManager::QueueFMV(FMVEvent **, PresentationEvent::PresentationEventCallBack *)",
    ),
    Ok(
        "PresentationManager::IsBusy(void) const",
    ),
    Ok(
        "PresentationManager::Update(unsigned int)",
    ),
    Ok(
        "PresentationManager::GetCameraTargetForLineOfDialog(unsigned int) const",
    ),
    Ok(
        "PresentationManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "PresentationManager::AddToQueue(PresentationEvent *)",
    ),
    Ok(
        "PresentationManager::ReturnToPool(PresentationEvent *)",
    ),
    Ok(
        "PresentationManager::GetFirst(void)",
    ),
    Ok(
        "PresentationManager::OnGameplayStart(void)",
    ),
    Ok(
        "PresentationManager::OnGameplayStop(void)",
    ),
    Ok(
        "PresentationManager::SetCamerasForLineOfDialog(vector<tName, s2alloc<tName> > const &)",
    ),
    Ok(
        "PresentationManager::InConversation(void) const",
    ),
    Ok(
        "PresentationManager::StopAll(void)",
    ),
    Ok(
        "PresentationOverlay::PresentationOverlay(void)",
    ),
    Ok(
        "PresentationOverlay::Update(unsigned int)",
    ),
    Ok(
        "PresentationOverlay::Display(void)",
    ),
    Ok(
        "PresentationManager::ReplaceMissionBriefingBitmap(tName const &)",
    ),
    Ok(
        "PresentationManager::MakeCharactersFaceEachOther(Character *, Character *)",
    ),
    Ok(
        "PresentationAnimator::PresentationAnimator(void)",
    ),
    Ok(
        "PresentationAnimator::~PresentationAnimator(void)",
    ),
    Ok(
        "PresentationAnimator::AddAmbientAnimations(vector<tName, s2alloc<tName> > const &)",
    ),
    Ok(
        "PresentationAnimator::ClearAmbientAnimations(void)",
    ),
    Ok(
        "PresentationAnimator::ChooseNextAnimation(void)",
    ),
    Ok(
        "PresentationAnimator::ChooseRandomAnimation(void) const",
    ),
    Ok(
        "PresentationAnimator::SetCharacter(Character *)",
    ),
    Ok(
        "PresentationAnimator::GetCharacter(void)",
    ),
    Ok(
        "PresentationAnimator::PlaySpecialAmbientAnimation(void)",
    ),
    Ok(
        "PresentationAnimator::SetRandomSelection(bool)",
    ),
    Ok(
        "PresentationAnimator::StartTalking(void)",
    ),
    Ok(
        "PresentationAnimator::StopTalking(void)",
    ),
    Ok(
        "PresentationAnimator::Update(int)",
    ),
    Ok(
        "SimpleAnimationPlayer::SimpleAnimationPlayer(void)",
    ),
    Ok(
        "SimpleAnimationPlayer::~SimpleAnimationPlayer(void)",
    ),
    Ok(
        "SimpleAnimationPlayer::Update(unsigned int)",
    ),
    Ok(
        "SimpleAnimationPlayer::Rewind(void)",
    ),
    Ok(
        "SimpleAnimationPlayer::ClearData(void)",
    ),
    Ok(
        "SimpleAnimationPlayer::SetNameData(char *, char *, char *)",
    ),
    Ok(
        "SimpleAnimationPlayer::DoLoaded(void)",
    ),
    Ok(
        "SimpleAnimationPlayer::DoRender(void)",
    ),
    Ok(
        "SimpleAnimationPlayer::SetIntroLoop(unsigned int)",
    ),
    Ok(
        "SimpleAnimationPlayer::SetOutroLoop(unsigned int)",
    ),
    Ok(
        "SimpleAnimationPlayer::Play(void)",
    ),
    Ok(
        "SimpleAnimationPlayer::DoneIntro(void)",
    ),
    Ok(
        "TransitionPlayer::TransitionPlayer(void)",
    ),
    Ok(
        "TransitionPlayer::~TransitionPlayer(void)",
    ),
    Ok(
        "TransitionPlayer::SetTransition(TransitionPlayer::TransitionInfo *)",
    ),
    Ok(
        "TransitionPlayer::Update(unsigned int)",
    ),
    Ok(
        "TransitionPlayer::DoUpdate(unsigned int)",
    ),
    Ok(
        "TransitionPlayer::DoRender(void)",
    ),
    Ok(
        "TutorialManager::CreateInstance(void)",
    ),
    Ok(
        "TutorialManager::GetInstance(void)",
    ),
    Ok(
        "TutorialManager::AddToQueue(TutorialMode)",
    ),
    Ok(
        "TutorialManager::DestroyInstance(void)",
    ),
    Ok(
        "TutorialManager::TutorialManager(void)",
    ),
    Ok(
        "TutorialManager::~TutorialManager(void)",
    ),
    Ok(
        "TutorialManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "TutorialManager::Initialize(void)",
    ),
    Ok(
        "TutorialManager::MarkDialogFinished(void)",
    ),
    Ok(
        "TutorialManager::ProcessQueue(void)",
    ),
    Ok(
        "TutorialManager::Update(float)",
    ),
    Ok(
        "TutorialManager::LoadData(unsigned char const *, unsigned int)",
    ),
    Ok(
        "TutorialManager::SaveData(unsigned char *, unsigned int)",
    ),
    Ok(
        "TutorialManager::ResetData(void)",
    ),
    Ok(
        "TutorialManager::QueryTutorialSeen(TutorialMode)",
    ),
    Ok(
        "TutorialManager::SetTutorialSeen(TutorialMode, bool)",
    ),
    Ok(
        "AllocPool<FMVEvent>::Initialize(void)",
    ),
    Ok(
        "AllocPool<FMVEvent>::AllocPool(GameMemoryAllocator, unsigned int)",
    ),
    Ok(
        "AllocPool<NISEvent>::Initialize(void)",
    ),
    Ok(
        "AllocPool<NISEvent>::AllocPool(GameMemoryAllocator, unsigned int)",
    ),
    Ok(
        "TransitionEvent::TransitionEvent(void)",
    ),
    Ok(
        "AllocPool<TransitionEvent>::Initialize(void)",
    ),
    Ok(
        "AllocPool<TransitionEvent>::AllocPool(GameMemoryAllocator, unsigned int)",
    ),
    Ok(
        "AllocPool<FMVEvent>::Finalize(void)",
    ),
    Ok(
        "AllocPool<FMVEvent>::~AllocPool(void)",
    ),
    Ok(
        "AllocPool<NISEvent>::Finalize(void)",
    ),
    Ok(
        "AllocPool<NISEvent>::~AllocPool(void)",
    ),
    Ok(
        "AllocPool<TransitionEvent>::Finalize(void)",
    ),
    Ok(
        "AllocPool<TransitionEvent>::~AllocPool(void)",
    ),
    Ok(
        "AllocPool<FMVEvent>::AllocateFromPool(void)",
    ),
    Ok(
        "AllocPool<FMVEvent>::ReturnToPool(unsigned int)",
    ),
    Ok(
        "AllocPool<NISEvent>::ReturnToPool(unsigned int)",
    ),
    Ok(
        "AllocPool<TransitionEvent>::ReturnToPool(unsigned int)",
    ),
    Ok(
        "tName * __uninitialized_copy_aux<tName const *, tName *>(tName const *, tName const *, tName *, __false_type)",
    ),
    Ok(
        "void vector<tName, s2alloc<tName> >::_M_range_insert<tName const *>(tName *, tName const *, tName const *, forward_iterator_tag)",
    ),
    Ok(
        "vector<TutorialMode, s2alloc<TutorialMode> >::_M_insert_aux(TutorialMode *, TutorialMode const &)",
    ),
    Ok(
        "TutorialMode * __uninitialized_copy_aux<TutorialMode *, TutorialMode *>(TutorialMode *, TutorialMode *, TutorialMode *, __false_type)",
    ),
    Ok(
        "AnimationPlayer type_info function",
    ),
    Ok(
        "Blinker type_info function",
    ),
    Ok(
        "SimpleAnimationPlayer type_info function",
    ),
    Ok(
        "CameraPlayer type_info function",
    ),
    Ok(
        "MouthFlapper type_info function",
    ),
    Ok(
        "NISPlayer type_info function",
    ),
    Ok(
        "PlayerDrawable type_info function",
    ),
    Ok(
        "TransitionPlayer type_info function",
    ),
    Ok(
        "PresentationOverlay::~PresentationOverlay(void)",
    ),
    Ok(
        "PresentationOverlay type_info function",
    ),
    Ok(
        "PresentationManager type_info function",
    ),
    Ok(
        "PresentationAnimator type_info function",
    ),
    Ok(
        "TutorialManager type_info function",
    ),
    Ok(
        "AllocPool<FMVEvent> type_info function",
    ),
    Ok(
        "AllocPool<NISEvent> type_info function",
    ),
    Ok(
        "AllocPool<TransitionEvent> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimation>::SafeCast(void)",
    ),
    Ok(
        "MouthFlapperDefaultSetting::~MouthFlapperDefaultSetting(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<Scenegraph::Scenegraph>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCompositeDrawable>::SafeCast(void)",
    ),
    Ok(
        "TransitionPlayer::DoLoaded(void)",
    ),
    Ok(
        "_Vector_alloc_base<TutorialMode, s2alloc<TutorialMode>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimation> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<Scenegraph::Scenegraph> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCompositeDrawable> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCompositeDrawable>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<Scenegraph::Scenegraph>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimation>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to AnimationPlayer::AnimationPlayer(void)",
    ),
    Ok(
        "global destructors keyed to AnimationPlayer::AnimationPlayer(void)",
    ),
    Ok(
        "RespawnManager::RespawnManager(void)",
    ),
    Ok(
        "RespawnManager::~RespawnManager(void)",
    ),
    Ok(
        "RespawnManager::SetNitroRespawnTime(int)",
    ),
    Ok(
        "RespawnManager::SetWrenchRespawnTime(int)",
    ),
    Ok(
        "RespawnManager::SetWaspRespawnTime(int)",
    ),
    Ok(
        "RespawnManager::GetWrenchRespawnTime(void)",
    ),
    Ok(
        "RespawnManager::GetNitroRespawnTime(void)",
    ),
    Ok(
        "RespawnManager::GetWaspRespawnTime(void)",
    ),
    Ok(
        "RespawnManager::GetRespawnTime(RespawnEntity::eRespawnEntity)",
    ),
    Ok(
        "RespawnEntity::RespawnEntity(RespawnEntity::eRespawnEntity)",
    ),
    Ok(
        "RespawnEntity::~RespawnEntity(void)",
    ),
    Ok(
        "RespawnEntity::Update(unsigned int)",
    ),
    Ok(
        "RespawnEntity::EntityCollected(void)",
    ),
    Ok(
        "RespawnEntity::ShouldEntityRespawn(void)",
    ),
    Ok(
        "RespawnEntity type_info function",
    ),
    Ok(
        "FMVPlayer::FMVPlayer(void)",
    ),
    Ok(
        "FMVPlayer::~FMVPlayer(void)",
    ),
    Ok(
        "FMVPlayer::LoadData(char const *, bool, void *)",
    ),
    Ok(
        "FMVPlayer::Play(void)",
    ),
    Ok(
        "FMVPlayer::Abort(void)",
    ),
    Ok(
        "FMVPlayer::Stop(void)",
    ),
    Ok(
        "FMVPlayer::Pause(void)",
    ),
    Ok(
        "FMVPlayer::UnPause(void)",
    ),
    Ok(
        "FMVPlayer::Initialize(int)",
    ),
    Ok(
        "FMVPlayer::DoRender(void)",
    ),
    Ok(
        "FMVPlayer::IterateLoop(IRadMoviePlayer2 *)",
    ),
    Ok(
        "FMVPlayer::ClearData(void)",
    ),
    Ok(
        "FMVPlayer::OnDriveOperationsComplete(void *)",
    ),
    Ok(
        "FMVPlayer::FadeScreen(float)",
    ),
    Ok(
        "FMVUserInputHandler::FMVUserInputHandler(void)",
    ),
    Ok(
        "FMVUserInputHandler::~FMVUserInputHandler(void)",
    ),
    Ok(
        "FMVUserInputHandler::OnButton(int, int, Button const *)",
    ),
    Ok(
        "FMVUserInputHandler::OnButtonUp(int, int, Button const *)",
    ),
    Ok(
        "FMVUserInputHandler::OnControllerDisconnect(int)",
    ),
    Ok(
        "FMVUserInputHandler::OnControllerConnect(int)",
    ),
    Ok(
        "FMVUserInputHandler::OnButtonDown(int, int, Button const *)",
    ),
    Ok(
        "FMVUserInputHandler::LoadControllerMappings(unsigned int)",
    ),
    Ok(
        "radBaseObject type_info function",
    ),
    Ok(
        "radObject type_info function",
    ),
    Ok(
        "radRefCount type_info function",
    ),
    Ok(
        "FMVPlayer type_info function",
    ),
    Ok(
        "FMVUserInputHandler type_info function",
    ),
    Ok(
        "radBaseObject::~radBaseObject(void)",
    ),
    Ok(
        "radObject::~radObject(void)",
    ),
    Ok(
        "radRefCount::~radRefCount(void)",
    ),
    Ok(
        "IRadMovieRenderLoop::IRadMovieRenderLoop(void)",
    ),
    Ok(
        "FMVPlayer::AddRef(void)",
    ),
    Ok(
        "FMVPlayer::Release(void)",
    ),
    Ok(
        "FMVPlayer::PreLoad(void)",
    ),
    Ok(
        "FMVPlayer::Update(unsigned int)",
    ),
    Ok(
        "FMVPlayer::DoLoaded(void)",
    ),
    Ok(
        "IRadMovieRenderLoop type_info function",
    ),
    Ok(
        "global constructors keyed to FMVPlayer::FMVPlayer(void)",
    ),
    Ok(
        "CGuiEntity::CGuiEntity(CGuiEntity *)",
    ),
    Ok(
        "CGuiEntity::~CGuiEntity(void)",
    ),
    Ok(
        "CGuiManager::CGuiManager(Scrooby::Project *, CGuiEntity *)",
    ),
    Ok(
        "CGuiManager::~CGuiManager(void)",
    ),
    Ok(
        "CGuiManager::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiManager::OnGotoScreenComplete(void)",
    ),
    Ok(
        "CGuiManager::FindWindowByID(CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiManager::GetCurrentWindow(void)",
    ),
    Ok(
        "CGuiManager::DisplayMessage(int, CGuiEntity *)",
    ),
    Ok(
        "CGuiManager::DisplayPrompt(int, CGuiEntity *, eGenericPromptType, bool)",
    ),
    Ok(
        "CGuiManager::DisplayErrorPrompt(int, CGuiEntity *, int)",
    ),
    Ok(
        "CGuiManager::GetPreviousScreen(int) const",
    ),
    Ok(
        "CGuiManager::GetCurrentScreen(void) const",
    ),
    Ok(
        "CGuiManager::AddWindow(CGuiWindow::eGuiWindowID, CGuiWindow *)",
    ),
    Ok(
        "CGuiManager::RemoveAllWindows(void)",
    ),
    Ok(
        "CGuiManager::PushScreenHistory(CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiManager::PopScreenHistory(void)",
    ),
    Ok(
        "CGuiMenu::CGuiMenu(CGuiEntity *, int, eMenuType, int)",
    ),
    Ok(
        "CGuiMenu::~CGuiMenu(void)",
    ),
    Ok(
        "CGuiMenu::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiMenu::AddMenuItem(Scrooby::BoundedDrawable *, Scrooby::BoundedDrawable *, Scrooby::Polygon *, Scrooby::Sprite *, Scrooby::Sprite *, Scrooby::Sprite *, int)",
    ),
    Ok(
        "CGuiMenu::SetMenuItemEnabled(int, bool, bool)",
    ),
    Ok(
        "CGuiMenu::Reset(int)",
    ),
    Ok(
        "CGuiMenu::SetHighlightColour(bool, pddiColour)",
    ),
    Ok(
        "CGuiMenu::SetSelectionValue(int, int)",
    ),
    Ok(
        "CGuiMenu::SetSelectionValueCount(int, int)",
    ),
    Ok(
        "CGuiMenu::MakeSelection(bool)",
    ),
    Ok(
        "CGuiMenu::SelectItem(int)",
    ),
    Ok(
        "CGuiMenu::UnselectItem(int)",
    ),
    Ok(
        "CGuiMenu::ChangeSelection(int, bool)",
    ),
    Ok(
        "CGuiMenu::IncrementSelectionValue(bool)",
    ),
    Ok(
        "CGuiMenu::DecrementSelectionValue(bool)",
    ),
    Ok(
        "CGuiMenu::UpdateCurrentSelection(int)",
    ),
    Ok(
        "CGuiMenu::MoveCursor(int, int)",
    ),
    Ok(
        "CGuiMenu2D::CGuiMenu2D(CGuiEntity *, int, int, eMenuType, int)",
    ),
    Ok(
        "CGuiMenu2D::~CGuiMenu2D(void)",
    ),
    Ok(
        "CGuiMenu2D::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiMenuPrompt::CGuiMenuPrompt(CGuiEntity *, Scrooby::Page *, int, int)",
    ),
    Ok(
        "CGuiMenuPrompt::~CGuiMenuPrompt(void)",
    ),
    Ok(
        "CGuiMenuPrompt::SetNumResponses(int)",
    ),
    Ok(
        "CGuiMenuPrompt::SetResponse(int, CGuiMenuPrompt::ePromptResponse)",
    ),
    Ok(
        "CGuiMenuPrompt::GetResponse(int) const",
    ),
    Ok(
        "GuiMenuItem::GuiMenuItem(void)",
    ),
    Ok(
        "GuiMenuItem::~GuiMenuItem(void)",
    ),
    Ok(
        "GuiMenuItemText::GuiMenuItemText(void)",
    ),
    Ok(
        "GuiMenuItemText::SetItem(Scrooby::BoundedDrawable *)",
    ),
    Ok(
        "GuiMenuItemText::SetItemValue(Scrooby::BoundedDrawable *)",
    ),
    Ok(
        "GuiMenuItemText::SetItemValueIndex(int)",
    ),
    Ok(
        "GuiMenuItemText::GetItemValueIndex(void) const",
    ),
    Ok(
        "GuiMenuItemText::SetDisplayOutline(bool)",
    ),
    Ok(
        "GuiMenuItemText::SetOutlineColour(pddiColour)",
    ),
    Ok(
        "GuiMenuItemText::GetOutlineColour(void) const",
    ),
    Ok(
        "GuiMenuItemSprite::GuiMenuItemSprite(void)",
    ),
    Ok(
        "GuiMenuItemSprite::SetItem(Scrooby::BoundedDrawable *)",
    ),
    Ok(
        "GuiMenuItemSprite::SetItemValue(Scrooby::BoundedDrawable *)",
    ),
    Ok(
        "GuiMenuItemSprite::SetItemValueIndex(int)",
    ),
    Ok(
        "GuiMenuItemSprite::GetItemValueIndex(void) const",
    ),
    Ok(
        "GuiMenuItemSprite::SetDisplayOutline(bool)",
    ),
    Ok(
        "GuiMenuItemSprite::SetOutlineColour(pddiColour)",
    ),
    Ok(
        "GuiMenuItemSprite::GetOutlineColour(void) const",
    ),
    Ok(
        "CGuiScreen::CGuiScreen(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID, unsigned int)",
    ),
    Ok(
        "CGuiScreen::~CGuiScreen(void)",
    ),
    Ok(
        "CGuiScreen::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreen::SetFadingEnabled(bool)",
    ),
    Ok(
        "CGuiScreen::SetZoomingEnabled(bool)",
    ),
    Ok(
        "CGuiScreen::SetSlidingEnabled(eScreenEffect, bool)",
    ),
    Ok(
        "CGuiScreen::SetIrisWipeEnabled(bool, bool)",
    ),
    Ok(
        "CGuiScreen::Reset3dFEMultiController(void)",
    ),
    Ok(
        "CGuiScreen::SetButtonVisible(eButtonIcon, bool)",
    ),
    Ok(
        "CGuiScreen::IsButtonVisible(eButtonIcon) const",
    ),
    Ok(
        "CGuiScreen::StartTransitionAnimation(int, int, bool)",
    ),
    Ok(
        "CGuiScreen::ReloadScreen(void)",
    ),
    Ok(
        "CGuiScreen::RestoreScreenCover(void)",
    ),
    Ok(
        "CGuiScreen::RestoreButtons(void)",
    ),
    Ok(
        "CGuiScreen::IsWideScreenDisplay(void)",
    ),
    Ok(
        "CGuiScreen::ApplyWideScreenCorrectionScale(Scrooby::Drawable *)",
    ),
    Ok(
        "CGuiScreen::RestoreDefaultFadeTime(void)",
    ),
    Ok(
        "CGuiScreen::IrisWipeOpen(void)",
    ),
    Ok(
        "CGuiScreen::SetAlphaForLayers(float, Scrooby::Layer **, int)",
    ),
    Ok(
        "CGuiScreen::AutoScaleFrame(Scrooby::Page *)",
    ),
    Ok(
        "CGuiScreen::FadeIn(float)",
    ),
    Ok(
        "CGuiScreen::FadeOut(float)",
    ),
    Ok(
        "CGuiScreen::ZoomIn(float)",
    ),
    Ok(
        "CGuiScreen::ZoomOut(float)",
    ),
    Ok(
        "CGuiScreen::SlideIn(float)",
    ),
    Ok(
        "CGuiScreen::SlideOut(float)",
    ),
    Ok(
        "CGuiScreen::OnIrisWipeClosed(void)",
    ),
    Ok(
        "CGuiScreenMemCardCheck::CGuiScreenMemCardCheck(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMemCardCheck::~CGuiScreenMemCardCheck(void)",
    ),
    Ok(
        "CGuiScreenMemCardCheck::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMemCardCheck::OnFormatOperationComplete(radFileError)",
    ),
    Ok(
        "CGuiScreenMemCardCheck::OnMemoryCardCheckDone(radFileError, IRadDrive::MediaInfo::MediaState, int, int, int)",
    ),
    Ok(
        "CGuiScreenMemCardCheck::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMemCardCheck::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMemCardCheck::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMemCardCheck::OnContinue(void)",
    ),
    Ok(
        "CGuiScreenLoadSave::CGuiScreenLoadSave(Scrooby::Screen *)",
    ),
    Ok(
        "CGuiScreenLoadSave::~CGuiScreenLoadSave(void)",
    ),
    Ok(
        "CGuiScreenLoadSave::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenLoadSave::FormatCurrentDrive(void)",
    ),
    Ok(
        "CGuiScreenLoadSave::OnFormatOperationComplete(radFileError)",
    ),
    Ok(
        "CGuiScreenLoadSave::UpdateCurrentMemoryDevice(void)",
    ),
    Ok(
        "CGuiScreenLoadSave::HandleErrorResponse(CGuiMenuPrompt::ePromptResponse)",
    ),
    Ok(
        "CGuiScreenMemoryCard::CGuiScreenMemoryCard(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMemoryCard::~CGuiScreenMemoryCard(void)",
    ),
    Ok(
        "CGuiScreenMemoryCard::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMemoryCard::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMemoryCard::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMemoryCard::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMemoryCard::UpdateDeviceList(bool)",
    ),
    Ok(
        "CGuiScreenMemoryCard::UpdateFreeSpace(unsigned int)",
    ),
    Ok(
        "CGuiScreenMessage::CGuiScreenMessage(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMessage::~CGuiScreenMessage(void)",
    ),
    Ok(
        "CGuiScreenMessage::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMessage::Display(int, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMessage::GetControllerDisconnectedMessage(int, char *, int)",
    ),
    Ok(
        "CGuiScreenMessage::ConvertUnicodeToChar(char *, unsigned short *, int)",
    ),
    Ok(
        "CGuiScreenMessage::FormatMessage(Scrooby::Text *, unsigned short *, int)",
    ),
    Ok(
        "CGuiScreenMessage::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMessage::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMessage::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenPrompt::CGuiScreenPrompt(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiScreenPrompt::~CGuiScreenPrompt(void)",
    ),
    Ok(
        "CGuiScreenPrompt::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPrompt::Display(int, CGuiEntity *, int, CGuiMenuPrompt::ePromptResponse *)",
    ),
    Ok(
        "CGuiScreenPrompt::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenPrompt::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenPrompt::InitOutro(void)",
    ),
    Ok(
        "CGuiSystem::CreateInstance(void)",
    ),
    Ok(
        "CGuiSystem::DestroyInstance(void)",
    ),
    Ok(
        "CGuiSystem::GetInstance(void)",
    ),
    Ok(
        "CGuiSystem::CGuiSystem(void)",
    ),
    Ok(
        "CGuiSystem::~CGuiSystem(void)",
    ),
    Ok(
        "CGuiSystem::Init(void)",
    ),
    Ok(
        "CGuiSystem::Update(unsigned int)",
    ),
    Ok(
        "CGuiSystem::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiSystem::OnProjectLoadComplete(Scrooby::Project *)",
    ),
    Ok(
        "CGuiSystem::GotoScreen(unsigned int, unsigned int, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiSystem::GetCurrentManager(void) const",
    ),
    Ok(
        "CGuiSystem::RegisterUserInputHandlers(int)",
    ),
    Ok(
        "CGuiSystem::UnregisterUserInputHandlers(int)",
    ),
    Ok(
        "CGuiSystem::GetUserInputHandler(int) const",
    ),
    Ok(
        "CGuiSystem::LoadData(unsigned char const *, unsigned int)",
    ),
    Ok(
        "CGuiSystem::SaveData(unsigned char *, unsigned int)",
    ),
    Ok(
        "CGuiSystem::ResetData(void)",
    ),
    Ok(
        "CGuiSystem::OnInitBootUp(void)",
    ),
    Ok(
        "CGuiSystem::OnReleaseBootUp(void)",
    ),
    Ok(
        "CGuiSystem::OnInitFrontEnd(void)",
    ),
    Ok(
        "CGuiSystem::OnReleaseFrontEnd(void)",
    ),
    Ok(
        "CGuiSystem::OnInitMiniGame(void)",
    ),
    Ok(
        "CGuiSystem::OnReleaseMiniGame(void)",
    ),
    Ok(
        "CGuiSystem::OnInitInGame(void)",
    ),
    Ok(
        "CGuiSystem::OnReleaseInGame(void)",
    ),
    Ok(
        "CGuiSystem::GetPrimaryController(void) const",
    ),
    Ok(
        "CGuiSystem::SetPrimaryController(int)",
    ),
    Ok(
        "CGuiTextBible::CGuiTextBible(void)",
    ),
    Ok(
        "CGuiTextBible::~CGuiTextBible(void)",
    ),
    Ok(
        "CGuiTextBible::SetTextBible(char const *)",
    ),
    Ok(
        "CGuiTextBible::GetLocalizedText(char const *)",
    ),
    Ok(
        "CGuiTextBible::SetCurrentLanguage(Scrooby::XLLanguage)",
    ),
    Ok(
        "CGuiUserInputHandler::CGuiUserInputHandler(void)",
    ),
    Ok(
        "CGuiUserInputHandler::~CGuiUserInputHandler(void)",
    ),
    Ok(
        "CGuiUserInputHandler::Left(int)",
    ),
    Ok(
        "CGuiUserInputHandler::Right(int)",
    ),
    Ok(
        "CGuiUserInputHandler::Up(int)",
    ),
    Ok(
        "CGuiUserInputHandler::Down(int)",
    ),
    Ok(
        "CGuiUserInputHandler::Start(int)",
    ),
    Ok(
        "CGuiUserInputHandler::Select(int)",
    ),
    Ok(
        "CGuiUserInputHandler::Back(int)",
    ),
    Ok(
        "CGuiUserInputHandler::AuxX(int)",
    ),
    Ok(
        "CGuiUserInputHandler::AuxY(int)",
    ),
    Ok(
        "CGuiUserInputHandler::L1(int)",
    ),
    Ok(
        "CGuiUserInputHandler::R1(int)",
    ),
    Ok(
        "CGuiUserInputHandler::OnControllerDisconnect(int)",
    ),
    Ok(
        "CGuiUserInputHandler::OnControllerConnect(int)",
    ),
    Ok(
        "CGuiUserInputHandler::OnButton(int, int, Button const *)",
    ),
    Ok(
        "CGuiUserInputHandler::OnButtonUp(int, int, Button const *)",
    ),
    Ok(
        "CGuiUserInputHandler::OnButtonDown(int, int, Button const *)",
    ),
    Ok(
        "CGuiUserInputHandler::LoadControllerMappings(unsigned int)",
    ),
    Ok(
        "CGuiUserInputHandler::Update(unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiUserInputHandler::IsXAxisOnLeft(void) const",
    ),
    Ok(
        "CGuiUserInputHandler::IsXAxisOnRight(void) const",
    ),
    Ok(
        "CGuiUserInputHandler::IsYAxisOnUp(void) const",
    ),
    Ok(
        "CGuiUserInputHandler::IsYAxisOnDown(void) const",
    ),
    Ok(
        "CGuiUserInputHandler::ResetRepeatableButtons(void)",
    ),
    Ok(
        "CGuiWindow::CGuiWindow(CGuiWindow::eGuiWindowID, CGuiEntity *)",
    ),
    Ok(
        "CGuiWindow::~CGuiWindow(void)",
    ),
    Ok(
        "CGuiWindow::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiWindow::CleanUp(void)",
    ),
    Ok(
        "CGuiWindow::ForceClearTransitions(void)",
    ),
    Ok(
        "CGuiEntity type_info function",
    ),
    Ok(
        "IRadMemoryHeap type_info function",
    ),
    Ok(
        "Scrooby::BoundedDrawable type_info function",
    ),
    Ok(
        "Scrooby::Text type_info function",
    ),
    Ok(
        "Scrooby::Sprite type_info function",
    ),
    Ok(
        "GuiMenuItem type_info function",
    ),
    Ok(
        "GuiMenuItemText::~GuiMenuItemText(void)",
    ),
    Ok(
        "GuiMenuItemText type_info function",
    ),
    Ok(
        "GuiMenuItemSprite::~GuiMenuItemSprite(void)",
    ),
    Ok(
        "GuiMenuItemSprite type_info function",
    ),
    Ok(
        "CGuiMenu type_info function",
    ),
    Ok(
        "CGuiMenu2D type_info function",
    ),
    Ok(
        "CGuiMenuPrompt type_info function",
    ),
    Ok(
        "CGuiWindow type_info function",
    ),
    Ok(
        "Scrooby::GotoScreenCallback type_info function",
    ),
    Ok(
        "CGuiManager type_info function",
    ),
    Ok(
        "CGuiSystem type_info function",
    ),
    Ok(
        "CGuiScreen type_info function",
    ),
    Ok(
        "CGuiScreenMessage type_info function",
    ),
    Ok(
        "CGuiScreenPrompt type_info function",
    ),
    Ok(
        "CGuiUserInputHandler type_info function",
    ),
    Ok(
        "CGuiScreenMemCardCheck type_info function",
    ),
    Ok(
        "CGuiScreenLoadSave type_info function",
    ),
    Ok(
        "CGuiScreenMemoryCard type_info function",
    ),
    Ok(
        "CGuiTextBible type_info function",
    ),
    Ok(
        "GuiMenuItemText::GetItem(void) const",
    ),
    Ok(
        "GuiMenuItemText::GetItemValue(void) const",
    ),
    Ok(
        "GuiMenuItemSprite::GetItem(void) const",
    ),
    Ok(
        "GuiMenuItemSprite::GetItemValue(void) const",
    ),
    Ok(
        "CGuiWindow::HasMenu(void)",
    ),
    Ok(
        "CGuiManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CGuiScreen::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenMessage::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenPrompt::HasMenu(void)",
    ),
    Ok(
        "IMemoryCardFormatCallback::IMemoryCardFormatCallback(void)",
    ),
    Ok(
        "IMemoryCardCheckCallback::IMemoryCardCheckCallback(void)",
    ),
    Ok(
        "CGuiScreenMemoryCard::HasMenu(void)",
    ),
    Ok(
        "Scrooby::HasBoundingBox type_info function",
    ),
    Ok(
        "IMemoryCardFormatCallback type_info function",
    ),
    Ok(
        "IMemoryCardCheckCallback type_info function",
    ),
    Ok(
        "Scrooby::Drawable type_info function",
    ),
    Ok(
        "global constructors keyed to CGuiEntity::CGuiEntity(CGuiEntity *)",
    ),
    Ok(
        "CGuiManagerBootUp::CGuiManagerBootUp(Scrooby::Project *, CGuiEntity *)",
    ),
    Ok(
        "CGuiManagerBootUp::~CGuiManagerBootUp(void)",
    ),
    Ok(
        "CGuiManagerBootUp::Populate(void)",
    ),
    Ok(
        "CGuiManagerBootUp::Start(CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiManagerBootUp::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiManagerBootUp::PopNextScreenInQueue(void)",
    ),
    Ok(
        "CGuiManagerBootUp::CheckLanguage(void)",
    ),
    Ok(
        "CGuiManagerLanguage::CGuiManagerLanguage(Scrooby::Project *, CGuiEntity *)",
    ),
    Ok(
        "CGuiManagerLanguage::~CGuiManagerLanguage(void)",
    ),
    Ok(
        "CGuiManagerLanguage::Populate(void)",
    ),
    Ok(
        "CGuiManagerLanguage::Start(CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiManagerLanguage::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenBootupLoad::CGuiScreenBootupLoad(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenBootupLoad::~CGuiScreenBootupLoad(void)",
    ),
    Ok(
        "CGuiScreenBootupLoad::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenBootupLoad::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenBootupLoad::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenBootupLoad::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenLicense::CGuiScreenLicense(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenLicense::~CGuiScreenLicense(void)",
    ),
    Ok(
        "CGuiScreenLicense::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenLicense::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenLicense::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenLicense::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenLanguage::CGuiScreenLanguage(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenLanguage::~CGuiScreenLanguage(void)",
    ),
    Ok(
        "CGuiScreenLanguage::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenLanguage::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenLanguage::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenLanguage::InitOutro(void)",
    ),
    Ok(
        "_Deque_base<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_create_nodes(CGuiWindow::eGuiWindowID **, CGuiWindow::eGuiWindowID **)",
    ),
    Ok(
        "_Deque_base<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_initialize_map(unsigned int)",
    ),
    Ok(
        "_Deque_base<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_destroy_nodes(CGuiWindow::eGuiWindowID **, CGuiWindow::eGuiWindowID **)",
    ),
    Ok(
        "_Deque_base<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::~_Deque_base(void)",
    ),
    Ok(
        "deque<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_reallocate_map(unsigned int, bool)",
    ),
    Ok(
        "deque<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_push_back_aux(CGuiWindow::eGuiWindowID const &)",
    ),
    Ok(
        "deque<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_pop_front_aux(void)",
    ),
    Ok(
        "CGuiManagerBootUp type_info function",
    ),
    Ok(
        "CGuiScreenBootupLoad type_info function",
    ),
    Ok(
        "CGuiScreenLicense type_info function",
    ),
    Ok(
        "CGuiScreenLanguage type_info function",
    ),
    Ok(
        "CGuiManagerLanguage type_info function",
    ),
    Ok(
        "_Deque_alloc_base<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0, false>::~_Deque_alloc_base(void)",
    ),
    Ok(
        "queue<CGuiWindow::eGuiWindowID, deque<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0> >::~queue(void)",
    ),
    Ok(
        "CGuiScreenLanguage::HasMenu(void)",
    ),
    Ok(
        "CGuiManagerBackEnd::CGuiManagerBackEnd(Scrooby::Project *, CGuiEntity *)",
    ),
    Ok(
        "CGuiManagerBackEnd::~CGuiManagerBackEnd(void)",
    ),
    Ok(
        "CGuiManagerBackEnd::Populate(void)",
    ),
    Ok(
        "CGuiManagerBackEnd::Start(CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiManagerBackEnd::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiManagerBackEnd::GotoLoadingScreen(unsigned int)",
    ),
    Ok(
        "CGuiScreenLoading::CGuiScreenLoading(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenLoading::~CGuiScreenLoading(void)",
    ),
    Ok(
        "CGuiScreenLoading::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenLoading::LoadResources(void)",
    ),
    Ok(
        "CGuiScreenLoading::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "CGuiScreenLoading::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenLoading::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenLoading::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenLoadingFE::CGuiScreenLoadingFE(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenLoadingFE::~CGuiScreenLoadingFE(void)",
    ),
    Ok(
        "CGuiScreenLoadingFE::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenLoadingFE::LoadResources(void)",
    ),
    Ok(
        "CGuiScreenLoadingFE::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "CGuiScreenLoadingFE::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenLoadingFE::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenLoadingFE::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenLoadingFE::GetCurrentMemoryUsage(ContextEnum) const",
    ),
    Ok(
        "CGuiScreenDemo::CGuiScreenDemo(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenDemo::~CGuiScreenDemo(void)",
    ),
    Ok(
        "CGuiScreenDemo::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenDemo::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenDemo::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenDemo::InitOutro(void)",
    ),
    Ok(
        "CGuiManagerBackEnd type_info function",
    ),
    Ok(
        "CGuiScreenLoading type_info function",
    ),
    Ok(
        "CGuiScreenLoadingFE type_info function",
    ),
    Ok(
        "CGuiScreenDemo type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tSprite>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tSprite> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tSprite>::safe_cast(IRefCount *)",
    ),
    Ok(
        "CGuiManagerFrontEnd::CGuiManagerFrontEnd(Scrooby::Project *, CGuiEntity *)",
    ),
    Ok(
        "CGuiManagerFrontEnd::~CGuiManagerFrontEnd(void)",
    ),
    Ok(
        "CGuiManagerFrontEnd::Populate(void)",
    ),
    Ok(
        "CGuiManagerFrontEnd::Start(CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiManagerFrontEnd::OnControllerConnected(int)",
    ),
    Ok(
        "CGuiManagerFrontEnd::OnControllerDisconnected(int)",
    ),
    Ok(
        "CGuiManagerFrontEnd::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiManagerFrontEnd::StartIntroMovie(void)",
    ),
    Ok(
        "CGuiScreenCardGallery::CGuiScreenCardGallery(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiScreenCardGallery::~CGuiScreenCardGallery(void)",
    ),
    Ok(
        "CGuiScreenCardGallery::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenCardGallery::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenCardGallery::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenCardGallery::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenCardGallery::UpdateCards(unsigned int)",
    ),
    Ok(
        "CGuiScreenCardGallery::UpdateCardTransition(unsigned int, bool)",
    ),
    Ok(
        "CGuiScreenCardGallery::UpdateViewCard(unsigned int)",
    ),
    Ok(
        "CGuiScreenCardGallery::SetCurrentViewCard(unsigned int)",
    ),
    Ok(
        "CGuiScreenController::CGuiScreenController(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenController::~CGuiScreenController(void)",
    ),
    Ok(
        "CGuiScreenController::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenController::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenController::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenController::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenController::UpdateLabels(void)",
    ),
    Ok(
        "CGuiScreenLoadGame::CGuiScreenLoadGame(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiScreenLoadGame::~CGuiScreenLoadGame(void)",
    ),
    Ok(
        "CGuiScreenLoadGame::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenLoadGame::OnLoadGameComplete(radFileError)",
    ),
    Ok(
        "CGuiScreenLoadGame::HandleErrorResponse(CGuiMenuPrompt::ePromptResponse)",
    ),
    Ok(
        "CGuiScreenLoadGame::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenLoadGame::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenLoadGame::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenLoadGame::GotoMemoryCardScreen(bool)",
    ),
    Ok(
        "CGuiScreenLoadGame::LoadGame(void)",
    ),
    Ok(
        "CGuiScreenAutoLoad::CGuiScreenAutoLoad(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenAutoLoad::~CGuiScreenAutoLoad(void)",
    ),
    Ok(
        "CGuiScreenAutoLoad::OnLoadGameComplete(radFileError)",
    ),
    Ok(
        "CGuiScreenAutoLoad::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenAutoLoad::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenAutoLoad::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenAutoLoad::HandleErrorResponse(CGuiMenuPrompt::ePromptResponse)",
    ),
    Ok(
        "CGuiScreenAutoLoad::LoadGame(void)",
    ),
    Ok(
        "CGuiScreenMainMenu::CGuiScreenMainMenu(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMainMenu::~CGuiScreenMainMenu(void)",
    ),
    Ok(
        "CGuiScreenMainMenu::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMainMenu::InitMenu(void)",
    ),
    Ok(
        "CGuiScreenMainMenu::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMainMenu::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMainMenu::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMainMenu::UpdateIntro(unsigned int)",
    ),
    Ok(
        "CGuiScreenMainMenu::UpdateRunning(unsigned int)",
    ),
    Ok(
        "CGuiScreenMainMenu::UpdateOutro(unsigned int)",
    ),
    Ok(
        "CGuiScreenMainMenu::UpdateGags(unsigned int)",
    ),
    Ok(
        "CGuiScreenMainMenu::StopHomerIdleAnimation(void)",
    ),
    Ok(
        "CGuiScreenMainMenu::TurnOnGlowItems(unsigned int)",
    ),
    Ok(
        "CGuiScreenMainMenu::OnNewGameSelected(RenderEnums::LevelEnum, RenderEnums::MissionEnum)",
    ),
    Ok(
        "CGuiScreenMainMenu::OnResumeGameSelected(void)",
    ),
    Ok(
        "CGuiScreenMainMenu::OnMiniGameSelected(void)",
    ),
    Ok(
        "CGuiScreenIntroTransition::CGuiScreenIntroTransition(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenIntroTransition::~CGuiScreenIntroTransition(void)",
    ),
    Ok(
        "CGuiScreenIntroTransition::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenIntroTransition::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenIntroTransition::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenIntroTransition::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMissionGallery::CGuiScreenMissionGallery(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMissionGallery::~CGuiScreenMissionGallery(void)",
    ),
    Ok(
        "CGuiScreenMissionGallery::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMissionGallery::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "CGuiScreenMissionGallery::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMissionGallery::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMissionGallery::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMissionGallery::OnUpdate(unsigned int)",
    ),
    Ok(
        "CGuiScreenMissionGallery::SetMenuAlpha(float)",
    ),
    Ok(
        "CGuiScreenMissionGallery::OnMenuSelectionMade(int)",
    ),
    Ok(
        "CGuiScreenMissionGallery::OnStartMission(void)",
    ),
    Ok(
        "CGuiScreenMissionGallery::LoadMissionImages(void)",
    ),
    Ok(
        "CGuiScreenMissionGallery::UnloadMissionImages(void)",
    ),
    Ok(
        "CGuiScreenSkinGallery::CGuiScreenSkinGallery(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenSkinGallery::~CGuiScreenSkinGallery(void)",
    ),
    Ok(
        "CGuiScreenSkinGallery::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenSkinGallery::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "CGuiScreenSkinGallery::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenSkinGallery::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenSkinGallery::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenSkinGallery::OnUpdate(unsigned int)",
    ),
    Ok(
        "CGuiScreenSkinGallery::OnMenuSelectionChange(int)",
    ),
    Ok(
        "CGuiScreenSkinGallery::OnMenuSelectionMade(int)",
    ),
    Ok(
        "CGuiScreenSkinGallery::SetMenuAlpha(float)",
    ),
    Ok(
        "CGuiScreenSkinGallery::Load2DImages(void)",
    ),
    Ok(
        "CGuiScreenSkinGallery::Unload2DImages(void)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::CGuiScreenVehicleGallery(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::~CGuiScreenVehicleGallery(void)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::OnUpdate(unsigned int)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::OnMenuSelectionChange(int)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::OnMenuSelectionMade(int)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::SetMenuAlpha(float)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::Load2DImages(void)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::Unload2DImages(void)",
    ),
    Ok(
        "CGuiScreenOptions::CGuiScreenOptions(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenOptions::~CGuiScreenOptions(void)",
    ),
    Ok(
        "CGuiScreenOptions::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenOptions::OnCheatEntered(eCheatID, bool)",
    ),
    Ok(
        "CGuiScreenOptions::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenOptions::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenOptions::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenOptions::UpdateCheatsDisplay(int)",
    ),
    Ok(
        "CGuiScreenOptions::ProgressiveModeTestBegin(void)",
    ),
    Ok(
        "CGuiScreenOptions::OnProgressiveModeTestEnd(void)",
    ),
    Ok(
        "CGuiScreenPlayMovie::CGuiScreenPlayMovie(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiScreenPlayMovie::~CGuiScreenPlayMovie(void)",
    ),
    Ok(
        "CGuiScreenPlayMovie::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPlayMovie::SetMovieToPlay(char const *, bool, bool)",
    ),
    Ok(
        "CGuiScreenPlayMovie::OnPresentationEventBegin(PresentationEvent *)",
    ),
    Ok(
        "CGuiScreenPlayMovie::OnPresentationEventLoadComplete(PresentationEvent *)",
    ),
    Ok(
        "CGuiScreenPlayMovie::OnPresentationEventEnd(PresentationEvent *)",
    ),
    Ok(
        "CGuiScreenPlayMovie::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenPlayMovie::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenPlayMovie::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenScrapBook::CGuiScreenScrapBook(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenScrapBook::~CGuiScreenScrapBook(void)",
    ),
    Ok(
        "CGuiScreenScrapBook::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenScrapBook::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenScrapBook::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenScrapBook::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenScrapBook::OnMenuSelectionMade(CGuiScreenScrapBook::eMenuItem)",
    ),
    Ok(
        "CGuiScreenScrapBookContents::CGuiScreenScrapBookContents(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenScrapBookContents::~CGuiScreenScrapBookContents(void)",
    ),
    Ok(
        "CGuiScreenScrapBookContents::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenScrapBookContents::SetLevelBarVisible(bool)",
    ),
    Ok(
        "CGuiScreenScrapBookContents::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenScrapBookContents::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenScrapBookContents::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenScrapBookContents::OnLevelSelectionChange(int)",
    ),
    Ok(
        "CGuiScreenScrapBookContents::OnMenuSelectionMade(CGuiScreenScrapBookContents::eMenuItem)",
    ),
    Ok(
        "CGuiScreenScrapBookStats::CGuiScreenScrapBookStats(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenScrapBookStats::~CGuiScreenScrapBookStats(void)",
    ),
    Ok(
        "CGuiScreenScrapBookStats::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenScrapBookStats::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenScrapBookStats::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenScrapBookStats::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenSound::CGuiScreenSound(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenSound::~CGuiScreenSound(void)",
    ),
    Ok(
        "CGuiScreenSound::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenSound::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenSound::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenSound::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenSplash::CGuiScreenSplash(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenSplash::~CGuiScreenSplash(void)",
    ),
    Ok(
        "CGuiScreenSplash::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenSplash::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenSplash::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenSplash::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenSplash::StartDemoInRuntime(void)",
    ),
    Ok(
        "CGuiScreenSplash::StartDemoAsMovie(void)",
    ),
    Ok(
        "CGuiScreenViewCredits::CGuiScreenViewCredits(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenViewCredits::~CGuiScreenViewCredits(void)",
    ),
    Ok(
        "CGuiScreenViewCredits::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenViewCredits::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenViewCredits::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenViewCredits::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenViewCredits::ResetScrolling(void)",
    ),
    Ok(
        "CGuiScreenViewCredits::FormatTextWithLineBreaks(Scrooby::Text *)",
    ),
    Ok(
        "CGuiScreenViewCredits::ScrollCredits(float)",
    ),
    Ok(
        "CGuiScreenViewCredits::OnScrollingDone(void)",
    ),
    Ok(
        "CGuiScreenViewCredits::OnNewLineDisplayed(int)",
    ),
    Ok(
        "CGuiScreenViewMovies::CGuiScreenViewMovies(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenViewMovies::~CGuiScreenViewMovies(void)",
    ),
    Ok(
        "CGuiScreenViewMovies::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenViewMovies::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenViewMovies::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenViewMovies::InitOutro(void)",
    ),
    Ok(
        "CGuiManagerFrontEnd type_info function",
    ),
    Ok(
        "CGuiScreenSplash type_info function",
    ),
    Ok(
        "CGuiScreenMainMenu type_info function",
    ),
    Ok(
        "CGuiScreenIntroTransition type_info function",
    ),
    Ok(
        "CGuiScreenLoadGame type_info function",
    ),
    Ok(
        "CGuiScreenAutoLoad type_info function",
    ),
    Ok(
        "CGuiScreenScrapBook type_info function",
    ),
    Ok(
        "CGuiScreenScrapBookContents type_info function",
    ),
    Ok(
        "CGuiScreenScrapBookStats type_info function",
    ),
    Ok(
        "CGuiScreenCardGallery type_info function",
    ),
    Ok(
        "CGuiScreenMissionGallery type_info function",
    ),
    Ok(
        "CGuiScreenSkinGallery type_info function",
    ),
    Ok(
        "CGuiScreenVehicleGallery type_info function",
    ),
    Ok(
        "CGuiScreenOptions type_info function",
    ),
    Ok(
        "CGuiScreenController type_info function",
    ),
    Ok(
        "CGuiScreenSound type_info function",
    ),
    Ok(
        "CGuiScreenViewCredits type_info function",
    ),
    Ok(
        "CGuiScreenViewMovies type_info function",
    ),
    Ok(
        "CGuiScreenPlayMovie type_info function",
    ),
    Ok(
        "CGuiScreenSplash::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenMainMenu::HasMenu(void)",
    ),
    Ok(
        "GameDataLoadCallback::GameDataLoadCallback(void)",
    ),
    Ok(
        "CGuiScreenLoadGame::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenScrapBook::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenScrapBookContents::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenCardGallery::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenMissionGallery::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenSkinGallery::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenVehicleGallery::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenOptions::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenController::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenSound::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenViewMovies::HasMenu(void)",
    ),
    Ok(
        "GameDataLoadCallback type_info function",
    ),
    Ok(
        "global constructors keyed to CGuiManagerFrontEnd::CGuiManagerFrontEnd(Scrooby::Project *, CGuiEntity *)",
    ),
    Ok(
        "CGuiManagerMiniGame::CGuiManagerMiniGame(Scrooby::Project *, CGuiEntity *)",
    ),
    Ok(
        "CGuiManagerMiniGame::~CGuiManagerMiniGame(void)",
    ),
    Ok(
        "CGuiManagerMiniGame::Populate(void)",
    ),
    Ok(
        "CGuiManagerMiniGame::Start(CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiManagerMiniGame::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiManagerMiniGame::OnControllerDisconnected(int, bool)",
    ),
    Ok(
        "CGuiManagerMiniGame::PollControllers(void)",
    ),
    Ok(
        "CGuiManagerMiniGame::OnControllerConnected(int)",
    ),
    Ok(
        "PlayerMenu::PlayerMenu(void)",
    ),
    Ok(
        "PlayerMenu::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "PlayerMenu::GetCurrentSubMenu(void) const",
    ),
    Ok(
        "PlayerMenu::SetActive(bool, int)",
    ),
    Ok(
        "CGuiScreenMiniMenu::CGuiScreenMiniMenu(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMiniMenu::~CGuiScreenMiniMenu(void)",
    ),
    Ok(
        "CGuiScreenMiniMenu::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMiniMenu::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMiniMenu::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMiniMenu::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMiniMenu::UpdateCharacterSlots(void)",
    ),
    Ok(
        "CGuiScreenMiniMenu::SetTrackSelectionEnabled(bool)",
    ),
    Ok(
        "CGuiScreenMiniMenu::MoveTrackCursor(int, int)",
    ),
    Ok(
        "CGuiScreenMiniMenu::OnTrackSelected(void)",
    ),
    Ok(
        "CGuiScreenMiniMenu::ActivateNewPlayer(int)",
    ),
    Ok(
        "CGuiScreenMiniMenu::OnCharacterSelected(int, bool)",
    ),
    Ok(
        "CGuiScreenMiniMenu::OnVehicleSelected(int, bool)",
    ),
    Ok(
        "CGuiScreenMiniMenu::AddRewardVehicle(Reward *)",
    ),
    Ok(
        "CGuiScreenMiniMenu::PrepareVehicleSelections(void)",
    ),
    Ok(
        "CGuiScreenMiniMenu::UpdateVehicleDisplayImages(int, Scrooby::Sprite *)",
    ),
    Ok(
        "CGuiScreenMiniMenu::UpdateVehicleRating(int)",
    ),
    Ok(
        "CGuiScreenMiniMenu::SetTimerEnabled(bool)",
    ),
    Ok(
        "CGuiScreenMiniMenu::GetPlayerMenuID(int) const",
    ),
    Ok(
        "CGuiScreenMiniHud::CGuiScreenMiniHud(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMiniHud::~CGuiScreenMiniHud(void)",
    ),
    Ok(
        "CGuiScreenMiniHud::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMiniHud::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMiniHud::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMiniHud::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMiniPause::CGuiScreenMiniPause(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMiniPause::~CGuiScreenMiniPause(void)",
    ),
    Ok(
        "CGuiScreenMiniPause::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMiniPause::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMiniPause::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMiniPause::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMiniPause::ResumeGame(void)",
    ),
    Ok(
        "CGuiScreenMiniPause::QuitGame(void)",
    ),
    Ok(
        "CGuiScreenMiniSummary::PlayerDisplayInfo::SetVisible(bool)",
    ),
    Ok(
        "CGuiScreenMiniSummary::PlayerRanking::CompareScores(int, int, int, int)",
    ),
    Ok(
        "CGuiScreenMiniSummary::CGuiScreenMiniSummary(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMiniSummary::~CGuiScreenMiniSummary(void)",
    ),
    Ok(
        "CGuiScreenMiniSummary::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMiniSummary::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMiniSummary::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMiniSummary::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMiniSummary::UpdateDisplayInfo(int, int)",
    ),
    Ok(
        "CGuiScreenMiniSummary::ResetCurrentRankings(void)",
    ),
    Ok(
        "CGuiScreenMiniSummary::InsertPlayerRanking(int)",
    ),
    Ok(
        "CGuiManagerMiniGame type_info function",
    ),
    Ok(
        "CGuiScreenMiniMenu type_info function",
    ),
    Ok(
        "CGuiScreenMiniHud type_info function",
    ),
    Ok(
        "CGuiScreenMiniPause type_info function",
    ),
    Ok(
        "CGuiScreenMiniSummary type_info function",
    ),
    Ok(
        "CGuiScreenMiniPause::HasMenu(void)",
    ),
    Ok(
        "global constructors keyed to MINIGAME_CHARACTERS_INVENTORY",
    ),
    Ok(
        "CGuiManagerInGame::CGuiManagerInGame(Scrooby::Project *, CGuiEntity *)",
    ),
    Ok(
        "CGuiManagerInGame::~CGuiManagerInGame(void)",
    ),
    Ok(
        "CGuiManagerInGame::Populate(void)",
    ),
    Ok(
        "CGuiManagerInGame::Start(CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiManagerInGame::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiManagerInGame::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CGuiManagerInGame::OnProjectLoadComplete(Scrooby::Project *)",
    ),
    Ok(
        "CGuiManagerInGame::OnMemcardInfoLoadComplete(void)",
    ),
    Ok(
        "CGuiManagerInGame::UpdateDuringMissionLoading(unsigned int)",
    ),
    Ok(
        "CGuiManagerInGame::UpdateWhileLoadingNotDone(unsigned int)",
    ),
    Ok(
        "CGuiManagerInGame::GotoPauseScreen(void)",
    ),
    Ok(
        "CGuiManagerInGame::GotoHUDScreen(void)",
    ),
    Ok(
        "CGuiManagerInGame::QuitGame(void)",
    ),
    Ok(
        "CGuiManagerInGame::OnControllerDisconnected(int)",
    ),
    Ok(
        "CGuiManagerInGame::OnControllerConnected(int)",
    ),
    Ok(
        "CGuiManagerInGame::OnNewMissionLoadBegin(void)",
    ),
    Ok(
        "CGuiManagerInGame::OnNewMissionLoadEnd(void)",
    ),
    Ok(
        "CGuiManagerInGame::IsPausingAllowed(void) const",
    ),
    Ok(
        "GuiSFX::AbortCurrentMission::Activate(void)",
    ),
    Ok(
        "GuiSFX::OpenIris::Activate(void)",
    ),
    Ok(
        "GuiSFX::RestartCurrentMission::Activate(void)",
    ),
    Ok(
        "CGuiScreenHasTransitions::CGuiScreenHasTransitions(void)",
    ),
    Ok(
        "CGuiScreenHasTransitions::AddTransition(GuiSFX::Transition &)",
    ),
    Ok(
        "CGuiScreenHasTransitions::DoneAddingTransitions(void)",
    ),
    Ok(
        "CGuiScreenHasTransitions::ResetMovableObjects(void)",
    ),
    Ok(
        "CGuiScreenHasTransitions::ResetTransitions(void)",
    ),
    Ok(
        "CGuiScreenHasTransitions::UpdateTransitions(float)",
    ),
    Ok(
        "MessageQueue::MessageQueue(void)",
    ),
    Ok(
        "MessageQueue::~MessageQueue(void)",
    ),
    Ok(
        "MessageQueue::Enqueue(unsigned int)",
    ),
    Ok(
        "MessageQueue::Dequeue(void)",
    ),
    Ok(
        "CGuiScreenHud::CGuiScreenHud(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenHud::~CGuiScreenHud(void)",
    ),
    Ok(
        "CGuiScreenHud::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenHud::Update(unsigned int)",
    ),
    Ok(
        "CGuiScreenHud::SetVisible(bool)",
    ),
    Ok(
        "CGuiScreenHud::SetTimerBlinkingInterval(int, int)",
    ),
    Ok(
        "CGuiScreenHud::SetParTime(int)",
    ),
    Ok(
        "CGuiScreenHud::SetCollectibles(int, int)",
    ),
    Ok(
        "CGuiScreenHud::SetRacePosition(int, int)",
    ),
    Ok(
        "CGuiScreenHud::SetLap(int, int)",
    ),
    Ok(
        "CGuiScreenHud::SetDamageMeter(float)",
    ),
    Ok(
        "CGuiScreenHud::SetProximityMeter(float)",
    ),
    Ok(
        "CGuiScreenHud::SetHitAndRunMeter(float)",
    ),
    Ok(
        "CGuiScreenHud::DisplayMessage(bool, int)",
    ),
    Ok(
        "CGuiScreenHud::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CGuiScreenHud::SetNumCoinsDisplay(Scrooby::Sprite *)",
    ),
    Ok(
        "CGuiScreenHud::UpdateNumCoinsDisplay(int, bool)",
    ),
    Ok(
        "CGuiScreenHud::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenHud::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenHud::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenHud::UpdateOverlays(unsigned int)",
    ),
    Ok(
        "CGuiScreenHud::UpdateEventHandlers(unsigned int)",
    ),
    Ok(
        "CGuiScreenHud::UpdateTimer(unsigned int)",
    ),
    Ok(
        "CGuiScreenHud::AbortFade(void)",
    ),
    Ok(
        "CGuiScreenIrisWipe::CGuiScreenIrisWipe(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenIrisWipe::~CGuiScreenIrisWipe(void)",
    ),
    Ok(
        "CGuiScreenIrisWipe::DoNotOpenOnNextOutro(void)",
    ),
    Ok(
        "CGuiScreenIrisWipe::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenIrisWipe::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenIrisWipe::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenIrisWipe::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenIrisWipe::IsIrisClosed(void)",
    ),
    Ok(
        "CGuiScreenLevelStats::CGuiScreenLevelStats(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiScreenLevelStats::~CGuiScreenLevelStats(void)",
    ),
    Ok(
        "CGuiScreenLevelStats::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenLevelStats::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenLevelStats::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenLevelStats::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenLevelStats::UpdateLevelStats(void)",
    ),
    Ok(
        "CGuiScreenLevelEnd::CGuiScreenLevelEnd(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenLevelEnd::~CGuiScreenLevelEnd(void)",
    ),
    Ok(
        "CGuiScreenLevelEnd::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenLevelEnd::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenLevelEnd::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenLevelEnd::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::CGuiScreenLetterBox(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenLetterBox::~CGuiScreenLetterBox(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::CheckIfScreenShouldBeBlank(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::ForceOpen(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenLetterBox::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CGuiScreenLetterBox::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::SurpressSkipButton(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::UnSurpressSkipButton(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::OnAccept(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::OnCancel(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::OnSkip(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::SetIntroFromClosed(void)",
    ),
    Ok(
        "CGuiScreenLetterBox::SetIntroFromOpen(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::CGuiScreenMissionBase(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiScreenMissionBase::~CGuiScreenMissionBase(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::ClearBitmap(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::GetAbortBitmap(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::GetBitmapName(char *)",
    ),
    Ok(
        "CGuiScreenMissionBase::GetFlag(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::GetLoadCompletedGroup(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::GetMissionInfoText(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::GetMissionStartBitmap(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::GetTitleText(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::GetWatcherName(void) const",
    ),
    Ok(
        "CGuiScreenMissionBase::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMissionBase::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::InitIntroWagerMission(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::IsCurrentBitmap(char const *)",
    ),
    Ok(
        "CGuiScreenMissionBase::OutroDone(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::RemoveAnimatedBitmap(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::ReplaceBitmap(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::SetBitmapName(char const *)",
    ),
    Ok(
        "CGuiScreenMissionBase::SetPlayAnimatedCamera(bool)",
    ),
    Ok(
        "CGuiScreenMissionBase::UnloadBitmap(void)",
    ),
    Ok(
        "CGuiScreenMissionBase::UpdateAnimatedBitmap(float)",
    ),
    Ok(
        "CGuiScreenMissionBase::UpdateGamblingInfo(void)",
    ),
    Ok(
        "CGuiScreenMissionLoad::CGuiScreenMissionLoad(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMissionLoad::~CGuiScreenMissionLoad(void)",
    ),
    Ok(
        "CGuiScreenMissionLoad::AddListeners(void)",
    ),
    Ok(
        "CGuiScreenMissionLoad::ExtractNormalPositions(void)",
    ),
    Ok(
        "CGuiScreenMissionLoad::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CGuiScreenMissionLoad::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMissionLoad::InitializePermanentVariables(void)",
    ),
    Ok(
        "CGuiScreenMissionLoad::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMissionLoad::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMissionLoad::InitPositionsNormal(void)",
    ),
    Ok(
        "CGuiScreenMissionLoad::InitPositionsWager(void)",
    ),
    Ok(
        "CGuiScreenMissionLoad::RemoveListeners(void)",
    ),
    Ok(
        "CGuiScreenMissionOver::CGuiScreenMissionOver(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMissionOver::~CGuiScreenMissionOver(void)",
    ),
    Ok(
        "CGuiScreenMissionOver::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMissionOver::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CGuiScreenMissionOver::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMissionOver::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMissionOver::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMissionOver::SetFailureMessage(MissionCondition::ConditionTypeEnum)",
    ),
    Ok(
        "CGuiScreenMissionSuccess::CGuiScreenMissionSuccess(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMissionSuccess::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMissionSuccess::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMissionSuccess::OutroDone(void)",
    ),
    Ok(
        "CGuiScreenMultiHud::CGuiScreenMultiHud(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID, int)",
    ),
    Ok(
        "CGuiScreenMultiHud::~CGuiScreenMultiHud(void)",
    ),
    Ok(
        "CGuiScreenMultiHud::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMultiHud::GetHudMap(unsigned int) const",
    ),
    Ok(
        "CGuiScreenMultiHud::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMultiHud::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMultiHud::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMultiHud::RetrieveElements(Scrooby::Page *)",
    ),
    Ok(
        "CGuiScreenMultiHud::UpdateElements(unsigned int)",
    ),
    Ok(
        "CGuiScreenMultiHud::TutorialBitmapHide(void)",
    ),
    Ok(
        "CGuiScreenMultiHud::UpdateTutorialMode(float)",
    ),
    Ok(
        "CGuiScreenMultiHud::ShowLetterBox(void)",
    ),
    Ok(
        "ResetCar::ResetCar(void)",
    ),
    Ok(
        "ResetCar::Activate(void)",
    ),
    Ok(
        "ResetCar::SetVehicle(Vehicle *)",
    ),
    Ok(
        "CGuiScreenPause::CGuiScreenPause(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "CGuiScreenPause::~CGuiScreenPause(void)",
    ),
    Ok(
        "CGuiScreenPause::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPause::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenPause::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenPause::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenPause::HandleResumeGame(unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPause::HandleQuitGame(void)",
    ),
    Ok(
        "CGuiScreenPauseMission::CGuiScreenPauseMission(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenPauseMission::~CGuiScreenPauseMission(void)",
    ),
    Ok(
        "CGuiScreenPauseMission::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPauseMission::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenPauseMission::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenPauseMission::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenPauseOptions::CGuiScreenPauseOptions(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenPauseOptions::~CGuiScreenPauseOptions(void)",
    ),
    Ok(
        "CGuiScreenPauseOptions::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPauseOptions::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenPauseOptions::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenPauseOptions::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenPauseController::CGuiScreenPauseController(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenPauseController::~CGuiScreenPauseController(void)",
    ),
    Ok(
        "CGuiScreenPauseController::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPauseController::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenPauseController::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenPauseController::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenPauseSound::CGuiScreenPauseSound(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenPauseSound::~CGuiScreenPauseSound(void)",
    ),
    Ok(
        "CGuiScreenPauseSound::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPauseSound::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenPauseSound::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenPauseSound::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenPauseSettings::CGuiScreenPauseSettings(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenPauseSettings::~CGuiScreenPauseSettings(void)",
    ),
    Ok(
        "CGuiScreenPauseSettings::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPauseSettings::OnCheatEntered(eCheatID, bool)",
    ),
    Ok(
        "CGuiScreenPauseSettings::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenPauseSettings::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenPauseSettings::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenPauseSettings::UpdateCameraSelections(void)",
    ),
    Ok(
        "CGuiScreenPauseSunday::CGuiScreenPauseSunday(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenPauseSunday::~CGuiScreenPauseSunday(void)",
    ),
    Ok(
        "CGuiScreenPauseSunday::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPauseSunday::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenPauseSunday::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenPauseSunday::InitOutro(void)",
    ),
    Ok(
        "PhoneBoothStars::PhoneBoothStars(Scrooby::Page *, char const *)",
    ),
    Ok(
        "PhoneBoothStars::SetNumStars(float)",
    ),
    Ok(
        "IGuiScreenRewards::IGuiScreenRewards(Scrooby::Screen *, Scrooby::Page *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "IGuiScreenRewards::~IGuiScreenRewards(void)",
    ),
    Ok(
        "IGuiScreenRewards::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "IGuiScreenRewards::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "IGuiScreenRewards::InitIntro(void)",
    ),
    Ok(
        "IGuiScreenRewards::InitRunning(void)",
    ),
    Ok(
        "IGuiScreenRewards::InitOutro(void)",
    ),
    Ok(
        "IGuiScreenRewards::InsertPreviewObject(PreviewObject *, int, Reward *, bool)",
    ),
    Ok(
        "IGuiScreenRewards::OnUpdate(unsigned int)",
    ),
    Ok(
        "IGuiScreenRewards::SetLightOpening(float)",
    ),
    Ok(
        "IGuiScreenRewards::On3DModelSelectionChange(PreviewObject const *)",
    ),
    Ok(
        "IGuiScreenRewards::Load3DModel(PreviewObject const *)",
    ),
    Ok(
        "IGuiScreenRewards::Unload3DModel(void)",
    ),
    Ok(
        "IGuiScreenRewards::SetVehicleStatsVisible(bool)",
    ),
    Ok(
        "IGuiScreenRewards::UpdateVehicleStats(void)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::CGuiScreenPhoneBooth(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::~CGuiScreenPhoneBooth(void)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::On3DModelLoaded(PreviewObject const *)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::GetCurrentPreviewObject(void) const",
    ),
    Ok(
        "CGuiScreenPhoneBooth::InitMenu(void)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::OnUpdate(unsigned int)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::LoadSelectedReward(void)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::UpdateDamagedInfo(void)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::HandleMessageForCar(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::CGuiScreenPurchaseRewards(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::~CGuiScreenPurchaseRewards(void)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::On3DModelLoaded(PreviewObject const *)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::GetCurrentPreviewObject(void) const",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::InitMenu(void)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::OnUpdate(unsigned int)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::UpdateRewardPrice(void)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::PurchaseReward(void)",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::LoadSelectedReward(void)",
    ),
    Ok(
        "CGuiScreenMissionSelect::CGuiScreenMissionSelect(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenMissionSelect::~CGuiScreenMissionSelect(void)",
    ),
    Ok(
        "CGuiScreenMissionSelect::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenMissionSelect::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenMissionSelect::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenMissionSelect::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenMissionSelect::OnLevelSelectionChange(int)",
    ),
    Ok(
        "CGuiScreenMissionSelect::UpdateMissionStatus(int, MissionRecord *)",
    ),
    Ok(
        "CGuiScreenSaveGame::CGuiScreenSaveGame(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenSaveGame::~CGuiScreenSaveGame(void)",
    ),
    Ok(
        "CGuiScreenSaveGame::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenSaveGame::OnSaveGameComplete(radFileError)",
    ),
    Ok(
        "CGuiScreenSaveGame::HandleErrorResponse(CGuiMenuPrompt::ePromptResponse)",
    ),
    Ok(
        "CGuiScreenSaveGame::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenSaveGame::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenSaveGame::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenSaveGame::GotoMemoryCardScreen(bool)",
    ),
    Ok(
        "CGuiScreenSaveGame::SaveGame(void)",
    ),
    Ok(
        "CGuiScreenViewCards::CGuiScreenViewCards(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenViewCards::~CGuiScreenViewCards(void)",
    ),
    Ok(
        "CGuiScreenViewCards::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenViewCards::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenViewCards::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenViewCards::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenTutorial::CGuiScreenTutorial(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenTutorial::~CGuiScreenTutorial(void)",
    ),
    Ok(
        "CGuiScreenTutorial::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenTutorial::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenTutorial::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenTutorial::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenCreditsPostFMV::CGuiScreenCreditsPostFMV(Scrooby::Screen *, CGuiEntity *)",
    ),
    Ok(
        "CGuiScreenCreditsPostFMV::~CGuiScreenCreditsPostFMV(void)",
    ),
    Ok(
        "CGuiScreenCreditsPostFMV::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
    ),
    Ok(
        "CGuiScreenCreditsPostFMV::InitIntro(void)",
    ),
    Ok(
        "CGuiScreenCreditsPostFMV::InitRunning(void)",
    ),
    Ok(
        "CGuiScreenCreditsPostFMV::InitOutro(void)",
    ),
    Ok(
        "CGuiScreenCreditsPostFMV::OnScrollingDone(void)",
    ),
    Ok(
        "GuiSFX::Junction3::Junction3(void)",
    ),
    Ok(
        "IMemoryCardInfoLoadCallback type_info function",
    ),
    Ok(
        "GuiSFX::AbortCurrentMission type_info function",
    ),
    Ok(
        "GuiSFX::OpenIris type_info function",
    ),
    Ok(
        "GuiSFX::RestartCurrentMission type_info function",
    ),
    Ok(
        "CGuiManagerInGame type_info function",
    ),
    Ok(
        "CGuiScreenMultiHud type_info function",
    ),
    Ok(
        "MessageQueue type_info function",
    ),
    Ok(
        "CGuiScreenHud type_info function",
    ),
    Ok(
        "CGuiScreenPause type_info function",
    ),
    Ok(
        "CGuiScreenPauseSunday type_info function",
    ),
    Ok(
        "CGuiScreenPauseMission type_info function",
    ),
    Ok(
        "CGuiScreenMissionSelect type_info function",
    ),
    Ok(
        "CGuiScreenPauseOptions type_info function",
    ),
    Ok(
        "CGuiScreenPauseController type_info function",
    ),
    Ok(
        "CGuiScreenPauseSound type_info function",
    ),
    Ok(
        "CGuiScreenPauseSettings type_info function",
    ),
    Ok(
        "CGuiScreenMissionBase type_info function",
    ),
    Ok(
        "CGuiScreenMissionLoad type_info function",
    ),
    Ok(
        "CGuiScreenMissionOver type_info function",
    ),
    Ok(
        "CGuiScreenMissionSuccess::~CGuiScreenMissionSuccess(void)",
    ),
    Ok(
        "CGuiScreenMissionSuccess type_info function",
    ),
    Ok(
        "CGuiScreenLevelStats type_info function",
    ),
    Ok(
        "CGuiScreenLevelEnd type_info function",
    ),
    Ok(
        "CGuiScreenViewCards type_info function",
    ),
    Ok(
        "CGuiScreenLetterBox type_info function",
    ),
    Ok(
        "CGuiScreenIrisWipe type_info function",
    ),
    Ok(
        "IGuiScreenRewards type_info function",
    ),
    Ok(
        "CGuiScreenPhoneBooth type_info function",
    ),
    Ok(
        "CGuiScreenPurchaseRewards type_info function",
    ),
    Ok(
        "CGuiScreenSaveGame type_info function",
    ),
    Ok(
        "CGuiScreenTutorial type_info function",
    ),
    Ok(
        "CGuiScreenCreditsPostFMV type_info function",
    ),
    Ok(
        "ResetCar type_info function",
    ),
    Ok(
        "CGuiScreenHasTransitions type_info function",
    ),
    Ok(
        "GuiSFX::UnderdampedTranslator::~UnderdampedTranslator(void)",
    ),
    Ok(
        "IMemoryCardInfoLoadCallback::IMemoryCardInfoLoadCallback(void)",
    ),
    Ok(
        "GuiSFX::AbortCurrentMission::AbortCurrentMission(void)",
    ),
    Ok(
        "GuiSFX::RestartCurrentMission::RestartCurrentMission(void)",
    ),
    Ok(
        "CGuiScreenPause::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenMissionSelect::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenPauseOptions::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenPauseSettings::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenMissionOver::HasMenu(void)",
    ),
    Ok(
        "CGuiScreenPhoneBooth::HasMenu(void)",
    ),
    Ok(
        "GameDataSaveCallback::GameDataSaveCallback(void)",
    ),
    Ok(
        "CGuiScreenSaveGame::HasMenu(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEntity>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCameraAnimationController>::SafeCast(void)",
    ),
    Ok(
        "GameDataSaveCallback type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEntity> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCameraAnimationController> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEntity>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCameraAnimationController>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to INGAME_PROJECT_FILES",
    ),
    Ok(
        "global destructors keyed to INGAME_PROJECT_FILES",
    ),
    Ok(
        "HudEventHandler::HudEventHandler(Scrooby::Group *)",
    ),
    Ok(
        "HudEventHandler::~HudEventHandler(void)",
    ),
    Ok(
        "HudEventHandler::OnStart(void)",
    ),
    Ok(
        "HudEventHandler::OnStop(void)",
    ),
    Ok(
        "HudCardCollected::HudCardCollected(Scrooby::Page *)",
    ),
    Ok(
        "HudCardCollected::~HudCardCollected(void)",
    ),
    Ok(
        "HudCardCollected::Start(void)",
    ),
    Ok(
        "HudCardCollected::Stop(void)",
    ),
    Ok(
        "HudCardCollected::Update(float)",
    ),
    Ok(
        "HudCardCollected::SetCurrentCard(unsigned int)",
    ),
    Ok(
        "HudCardCollected::SetCardCount(unsigned int, unsigned int)",
    ),
    Ok(
        "HudCoinCollected::HudCoinCollected(Scrooby::Page *)",
    ),
    Ok(
        "HudCoinCollected::~HudCoinCollected(void)",
    ),
    Ok(
        "HudCoinCollected::Start(void)",
    ),
    Ok(
        "HudCoinCollected::Stop(void)",
    ),
    Ok(
        "HudCoinCollected::Update(float)",
    ),
    Ok(
        "HudCoinCollected::SetItemCount(unsigned int, unsigned int)",
    ),
    Ok(
        "HudMissionProgress::HudMissionProgress(Scrooby::Page *)",
    ),
    Ok(
        "HudMissionProgress::~HudMissionProgress(void)",
    ),
    Ok(
        "HudMissionProgress::Start(void)",
    ),
    Ok(
        "HudMissionProgress::Stop(void)",
    ),
    Ok(
        "HudMissionProgress::Update(float)",
    ),
    Ok(
        "HudMissionObjective::HudMissionObjective(Scrooby::Page *)",
    ),
    Ok(
        "HudMissionObjective::~HudMissionObjective(void)",
    ),
    Ok(
        "HudMissionObjective::Start(void)",
    ),
    Ok(
        "HudMissionObjective::Stop(void)",
    ),
    Ok(
        "HudMissionObjective::Update(float)",
    ),
    Ok(
        "HudMissionObjective::UpdateIcon(void)",
    ),
    Ok(
        "HudCountDown::HudCountDown(Scrooby::Page *)",
    ),
    Ok(
        "HudCountDown::~HudCountDown(void)",
    ),
    Ok(
        "HudCountDown::OnStart(void)",
    ),
    Ok(
        "HudCountDown::QueueDisableInput(void)",
    ),
    Ok(
        "HudCountDown::Start(void)",
    ),
    Ok(
        "HudCountDown::Stop(void)",
    ),
    Ok(
        "HudCountDown::Update(float)",
    ),
    Ok(
        "HudCountDown::GetNextSequenceUnit(void)",
    ),
    Ok(
        "HudHitNRun::HudHitNRun(Scrooby::Page *)",
    ),
    Ok(
        "HudHitNRun::~HudHitNRun(void)",
    ),
    Ok(
        "HudHitNRun::Start(void)",
    ),
    Ok(
        "HudHitNRun::Stop(void)",
    ),
    Ok(
        "HudHitNRun::Update(float)",
    ),
    Ok(
        "HudHitNRun::SetMessage(HudHitNRun::eMessage)",
    ),
    Ok(
        "HudWaspDestroyed::HudWaspDestroyed(Scrooby::Page *)",
    ),
    Ok(
        "HudWaspDestroyed::~HudWaspDestroyed(void)",
    ),
    Ok(
        "HudWaspDestroyed::Start(void)",
    ),
    Ok(
        "HudWaspDestroyed::Stop(void)",
    ),
    Ok(
        "HudWaspDestroyed::Update(float)",
    ),
    Ok(
        "HudItemDropped::HudItemDropped(Scrooby::Page *)",
    ),
    Ok(
        "HudItemDropped::~HudItemDropped(void)",
    ),
    Ok(
        "HudItemDropped::Start(void)",
    ),
    Ok(
        "HudItemDropped::Stop(void)",
    ),
    Ok(
        "HudItemDropped::Update(float)",
    ),
    Ok(
        "HudEventHandler type_info function",
    ),
    Ok(
        "HudCardCollected type_info function",
    ),
    Ok(
        "HudCoinCollected type_info function",
    ),
    Ok(
        "HudMissionProgress type_info function",
    ),
    Ok(
        "HudMissionObjective type_info function",
    ),
    Ok(
        "HudCountDown type_info function",
    ),
    Ok(
        "HudHitNRun type_info function",
    ),
    Ok(
        "HudWaspDestroyed type_info function",
    ),
    Ok(
        "HudItemDropped type_info function",
    ),
    Ok(
        "global constructors keyed to HudEventHandler::HudEventHandler(Scrooby::Group *)",
    ),
    Ok(
        "HudMapCam::HudMapCam(int)",
    ),
    Ok(
        "HudMapCam::~HudMapCam(void)",
    ),
    Ok(
        "HudMapCam::Update(unsigned int)",
    ),
    Ok(
        "HudMapCam::SetHeight(float)",
    ),
    Ok(
        "HudMapIcon::ApplyAICarIconColour(void)",
    ),
    Ok(
        "CHudMap::CHudMap(Scrooby::Page *, int, char const *)",
    ),
    Ok(
        "CHudMap::~CHudMap(void)",
    ),
    Ok(
        "CHudMap::SetCameraTarget(ISuperCamTarget *)",
    ),
    Ok(
        "CHudMap::Update(unsigned int)",
    ),
    Ok(
        "CHudMap::AddIconToInventory(HudMapIcon::eIconType, Scrooby::Sprite *)",
    ),
    Ok(
        "CHudMap::RemoveIconFromInventory(HudMapIcon::eIconType)",
    ),
    Ok(
        "CHudMap::RegisterIcon(HudMapIcon::eIconType, RadicalMathLibrary::Vector, IHudMapIconLocator *, bool)",
    ),
    Ok(
        "CHudMap::UnregisterIcon(int)",
    ),
    Ok(
        "CHudMap::SetFocalPointIcon(int)",
    ),
    Ok(
        "CHudMap::Reset(void)",
    ),
    Ok(
        "CHudMap::SetVisible(bool)",
    ),
    Ok(
        "CHudMap::RestoreAllRegisteredIcons(void)",
    ),
    Ok(
        "CHudMap::ClearAllRegisteredIcons(void)",
    ),
    Ok(
        "CHudMap::CalculateDistanceBetweenPoints(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "CHudMap::UpdateIconHeading(Scrooby::Sprite *, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "CHudMap::CalculateCameraHeight(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "CHudMap::CalculateCameraHeight(float) const",
    ),
    Ok(
        "CHudMap::CalculatRadarConeAngle(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "CHudMap::DetermineOnRoadLocation(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, float)",
    ),
    Ok(
        "Slider::Slider(Slider::eSliderType)",
    ),
    Ok(
        "Slider::SetScroobyPolygon(Scrooby::Polygon *, Scrooby::Sprite *)",
    ),
    Ok(
        "Slider::SetValue(float)",
    ),
    Ok(
        "ImageSlider::ImageSlider(Slider::eSliderType)",
    ),
    Ok(
        "ImageSlider::SetScroobyImage(Scrooby::Sprite *)",
    ),
    Ok(
        "ImageSlider::SetValue(float, bool)",
    ),
    Ok(
        "GuiSFX::Flash(Scrooby::BoundedDrawable *, float, float, int, float, float)",
    ),
    Ok(
        "GuiSFX::Blink(Scrooby::Drawable *, float, float, bool)",
    ),
    Ok(
        "GuiSFX::Pulse(float, float, float, float, float)",
    ),
    Ok(
        "GuiSFX::ModulateColour(pddiColour *, float, float, pddiColour, pddiColour, float)",
    ),
    Ok(
        "GuiSFX::Spiral(Scrooby::BoundedDrawable *, float, float, float, float, float, bool)",
    ),
    Ok(
        "GuiSFX::SlideX(Scrooby::Drawable *, float, float, bool, int, int)",
    ),
    Ok(
        "GuiSFX::SlideY(Scrooby::Drawable *, float, float, bool, int, int)",
    ),
    Ok(
        "GuiSFX::Projectile(Scrooby::Drawable *, float, float, RadicalMathLibrary::Vector, bool, float)",
    ),
    Ok(
        "GuiSFX::Projectile(Scrooby::Drawable *, float, float, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, bool, float)",
    ),
    Ok(
        "CTeleTypeText::~CTeleTypeText(void)",
    ),
    Ok(
        "GuiSFX::Chainable::Chainable(void)",
    ),
    Ok(
        "GuiSFX::Chainable::Chainable(tName const &)",
    ),
    Ok(
        "GuiSFX::Chainable1::Chainable1(void)",
    ),
    Ok(
        "GuiSFX::Chainable1::Chainable1(tName const &)",
    ),
    Ok(
        "GuiSFX::Chainable1::ContinueChain(void)",
    ),
    Ok(
        "GuiSFX::Chainable1::DeactivateChain(void)",
    ),
    Ok(
        "GuiSFX::Chainable1::IsChainDone(void) const",
    ),
    Ok(
        "GuiSFX::Chainable1::ResetChain(void)",
    ),
    Ok(
        "GuiSFX::Chainable1::SetNextTransition(GuiSFX::Chainable *)",
    ),
    Ok(
        "GuiSFX::Chainable1::SetNextTransition(GuiSFX::Chainable &)",
    ),
    Ok(
        "GuiSFX::Chainable2::ContinueChain(void)",
    ),
    Ok(
        "GuiSFX::Chainable2::DeactivateChain(void)",
    ),
    Ok(
        "GuiSFX::Chainable2::IsChainDone(void) const",
    ),
    Ok(
        "GuiSFX::Chainable2::ResetChain(void)",
    ),
    Ok(
        "GuiSFX::Chainable3::Chainable3(void)",
    ),
    Ok(
        "GuiSFX::Chainable3::ContinueChain(void)",
    ),
    Ok(
        "GuiSFX::Chainable3::DeactivateChain(void)",
    ),
    Ok(
        "GuiSFX::Chainable3::IsChainDone(void) const",
    ),
    Ok(
        "GuiSFX::Chainable3::ResetChain(void)",
    ),
    Ok(
        "GuiSFX::Chainable3::SetNextTransition(unsigned int, GuiSFX::Chainable *)",
    ),
    Ok(
        "GuiSFX::Chainable3::SetNextTransition(unsigned int, GuiSFX::Chainable &)",
    ),
    Ok(
        "GuiSFX::ColorChange::ColorChange(tName const &)",
    ),
    Ok(
        "GuiSFX::ColorChange::SetStartColour(pddiColour)",
    ),
    Ok(
        "GuiSFX::ColorChange::SetEndColour(pddiColour)",
    ),
    Ok(
        "GuiSFX::ColorChange::Update(float)",
    ),
    Ok(
        "GuiSFX::Dummy::Dummy(void)",
    ),
    Ok(
        "GuiSFX::Dummy::Dummy(tName const &)",
    ),
    Ok(
        "GuiSFX::Dummy::Activate(void)",
    ),
    Ok(
        "GuiSFX::GotoScreen::GotoScreen(void)",
    ),
    Ok(
        "GuiSFX::GotoScreen::Activate(void)",
    ),
    Ok(
        "GuiSFX::GotoScreen::SetParam1(unsigned int)",
    ),
    Ok(
        "GuiSFX::GotoScreen::SetScreen(CGuiWindow::eGuiWindowID)",
    ),
    Ok(
        "GuiSFX::GotoScreen::SetWindowOptions(unsigned int)",
    ),
    Ok(
        "GuiSFX::HasMulticontroller::ResetMultiControllerFrames(void)",
    ),
    Ok(
        "GuiSFX::HasMulticontroller::SetMultiController(tMultiController *)",
    ),
    Ok(
        "GuiSFX::HasTimeInterval::HasTimeInterval(void)",
    ),
    Ok(
        "GuiSFX::HasTimeInterval::SetTimeInterval(float)",
    ),
    Ok(
        "GuiSFX::Hide::Hide(void)",
    ),
    Ok(
        "GuiSFX::Hide::Hide(tName const &)",
    ),
    Ok(
        "GuiSFX::Hide::Activate(void)",
    ),
    Ok(
        "GuiSFX::ImageCycler::SetDrawable(Scrooby::Drawable *)",
    ),
    Ok(
        "GuiSFX::ImageCycler::SetDrawable(Scrooby::Drawable &)",
    ),
    Ok(
        "GuiSFX::InputStateChange::InputStateChange(void)",
    ),
    Ok(
        "GuiSFX::InputStateChange::Activate(void)",
    ),
    Ok(
        "GuiSFX::InputStateChange::SetState(Input::ActiveState)",
    ),
    Ok(
        "GuiSFX::IrisWipeClose::Activate(void)",
    ),
    Ok(
        "GuiSFX::IrisWipeClose::Deactivate(void)",
    ),
    Ok(
        "GuiSFX::IrisWipeClose::Update(float)",
    ),
    Ok(
        "GuiSFX::IrisWipeOpen::IrisWipeOpen(void)",
    ),
    Ok(
        "GuiSFX::IrisWipeOpen::IrisWipeOpen(tName const &)",
    ),
    Ok(
        "GuiSFX::IrisWipeOpen::Activate(void)",
    ),
    Ok(
        "GuiSFX::IrisWipeOpen::Update(float)",
    ),
    Ok(
        "GuiSFX::ImageCycler::Update(float)",
    ),
    Ok(
        "GuiSFX::Junction2::Activate(void)",
    ),
    Ok(
        "GuiSFX::Junction3::Activate(void)",
    ),
    Ok(
        "GuiSFX::Pause::Pause(void)",
    ),
    Ok(
        "GuiSFX::Pause::Pause(tName const &)",
    ),
    Ok(
        "GuiSFX::Pause::Update(float)",
    ),
    Ok(
        "GuiSFX::PauseInFrames::PauseInFrames(tName const &)",
    ),
    Ok(
        "GuiSFX::PauseInFrames::Reset(void)",
    ),
    Ok(
        "GuiSFX::PauseInFrames::SetNumberOfFrames(unsigned int)",
    ),
    Ok(
        "GuiSFX::PauseInFrames::Update(float)",
    ),
    Ok(
        "GuiSFX::PauseGame::Activate(void)",
    ),
    Ok(
        "GuiSFX::PulseScale::PulseScale(tName const &)",
    ),
    Ok(
        "GuiSFX::PulseScale::MovesDrawable(void) const",
    ),
    Ok(
        "GuiSFX::PulseScale::SetAmplitude(float)",
    ),
    Ok(
        "GuiSFX::PulseScale::SetDrawable(Scrooby::Drawable &)",
    ),
    Ok(
        "GuiSFX::PulseScale::SetDrawable(Scrooby::Drawable *)",
    ),
    Ok(
        "GuiSFX::PulseScale::SetFrequency(float)",
    ),
    Ok(
        "GuiSFX::PulseScale::Update(float)",
    ),
    Ok(
        "GuiSFX::RecieveEvent::RecieveEvent(void)",
    ),
    Ok(
        "GuiSFX::RecieveEvent::RecieveEvent(tName const &)",
    ),
    Ok(
        "GuiSFX::RecieveEvent::Activate(void)",
    ),
    Ok(
        "GuiSFX::RecieveEvent::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "GuiSFX::RecieveEvent::SetEvent(EventEnum)",
    ),
    Ok(
        "GuiSFX::ResumeGame::ResumeGame(tName const &)",
    ),
    Ok(
        "GuiSFX::ResumeGame::Activate(void)",
    ),
    Ok(
        "GuiSFX::SendEvent::SendEvent(void)",
    ),
    Ok(
        "GuiSFX::SendEvent::SendEvent(tName const &)",
    ),
    Ok(
        "GuiSFX::SendEvent::Activate(void)",
    ),
    Ok(
        "GuiSFX::SendEvent::SetEvent(EventEnum)",
    ),
    Ok(
        "GuiSFX::SendEvent::SetEventData(void *)",
    ),
    Ok(
        "GuiSFX::SwitchContext::SwitchContext(void)",
    ),
    Ok(
        "GuiSFX::SwitchContext::Activate(void)",
    ),
    Ok(
        "GuiSFX::SwitchContext::SetContext(ContextEnum)",
    ),
    Ok(
        "GuiSFX::Show::Show(void)",
    ),
    Ok(
        "GuiSFX::Show::Show(tName const &)",
    ),
    Ok(
        "GuiSFX::Show::Activate(void)",
    ),
    Ok(
        "GuiSFX::Spin::MovesDrawable(void) const",
    ),
    Ok(
        "GuiSFX::Spin::SetDrawable(Scrooby::Drawable *)",
    ),
    Ok(
        "GuiSFX::Spin::Update(float)",
    ),
    Ok(
        "GuiSFX::Transition::Transition(void)",
    ),
    Ok(
        "GuiSFX::Transition::Transition(tName const &)",
    ),
    Ok(
        "GuiSFX::Transition::Activate(void)",
    ),
    Ok(
        "GuiSFX::Transition::Deactivate(void)",
    ),
    Ok(
        "GuiSFX::Transition::GetDrawable(void)",
    ),
    Ok(
        "GuiSFX::Transition::IsActive(void) const",
    ),
    Ok(
        "GuiSFX::Transition::IsDone(void) const",
    ),
    Ok(
        "GuiSFX::Transition::MovesDrawable(void) const",
    ),
    Ok(
        "GuiSFX::Transition::Reset(void)",
    ),
    Ok(
        "GuiSFX::Transition::SetDrawable(Scrooby::Drawable *)",
    ),
    Ok(
        "GuiSFX::Transition::SetDrawable(Scrooby::Drawable &)",
    ),
    Ok(
        "GuiSFX::Transition::Update(float)",
    ),
    Ok(
        "GuiSFX::Translator::Translator(void)",
    ),
    Ok(
        "GuiSFX::Translator::Translator(tName const &)",
    ),
    Ok(
        "GuiSFX::Translator::~Translator(void)",
    ),
    Ok(
        "GuiSFX::Translator::MovesDrawable(void) const",
    ),
    Ok(
        "GuiSFX::Translator::SetCoordsEnd(int, int)",
    ),
    Ok(
        "GuiSFX::Translator::SetCoordsStart(int, int)",
    ),
    Ok(
        "GuiSFX::Translator::SetEndOffscreenBottom(Scrooby::Drawable const *)",
    ),
    Ok(
        "GuiSFX::Translator::SetEndOffscreenLeft(Scrooby::Drawable const *)",
    ),
    Ok(
        "GuiSFX::Translator::SetEndOffscreenRight(Scrooby::Drawable const *)",
    ),
    Ok(
        "GuiSFX::Translator::SetEndOffscreenTop(Scrooby::Drawable const *)",
    ),
    Ok(
        "GuiSFX::Translator::SetStartOffscreenBottom(Scrooby::Drawable const *)",
    ),
    Ok(
        "GuiSFX::Translator::SetStartOffscreenLeft(Scrooby::Drawable const *)",
    ),
    Ok(
        "GuiSFX::Translator::SetStartOffscreenRight(Scrooby::Drawable const *)",
    ),
    Ok(
        "GuiSFX::Translator::SetStartOffscreenTop(Scrooby::Drawable const *)",
    ),
    Ok(
        "GuiSFX::Translator::Update(float)",
    ),
    Ok(
        "GuiSFX::UnderdampedTranslator::UnderdampedTranslator(void)",
    ),
    Ok(
        "GuiSFX::UnderdampedTranslator::MovesDrawable(void) const",
    ),
    Ok(
        "GuiSFX::UnderdampedTranslator::SetFrequency(float)",
    ),
    Ok(
        "GuiSFX::UnderdampedTranslator::Update(float)",
    ),
    Ok(
        "ScrollingText::ScrollingText(Scrooby::Text *)",
    ),
    Ok(
        "ScrollingText::~ScrollingText(void)",
    ),
    Ok(
        "ScrollingText::SetTextIndex(int)",
    ),
    Ok(
        "ScrollingText::Start(void)",
    ),
    Ok(
        "ScrollingText::Stop(void)",
    ),
    Ok(
        "ScrollingText::Update(unsigned int)",
    ),
    Ok(
        "ScrollingText::ClipText(int, int)",
    ),
    Ok(
        "HudMapCam type_info function",
    ),
    Ok(
        "CHudMap type_info function",
    ),
    Ok(
        "Slider type_info function",
    ),
    Ok(
        "ImageSlider type_info function",
    ),
    Ok(
        "CTeleTypeText type_info function",
    ),
    Ok(
        "GuiSFX::Transition type_info function",
    ),
    Ok(
        "GuiSFX::Chainable type_info function",
    ),
    Ok(
        "GuiSFX::Chainable1 type_info function",
    ),
    Ok(
        "GuiSFX::Chainable2 type_info function",
    ),
    Ok(
        "GuiSFX::Chainable3 type_info function",
    ),
    Ok(
        "GuiSFX::Junction2 type_info function",
    ),
    Ok(
        "GuiSFX::Junction3 type_info function",
    ),
    Ok(
        "GuiSFX::Dummy type_info function",
    ),
    Ok(
        "GuiSFX::GotoScreen type_info function",
    ),
    Ok(
        "GuiSFX::Hide type_info function",
    ),
    Ok(
        "GuiSFX::InputStateChange type_info function",
    ),
    Ok(
        "GuiSFX::RecieveEvent::~RecieveEvent(void)",
    ),
    Ok(
        "GuiSFX::RecieveEvent type_info function",
    ),
    Ok(
        "GuiSFX::SendEvent type_info function",
    ),
    Ok(
        "GuiSFX::SwitchContext type_info function",
    ),
    Ok(
        "GuiSFX::ColorChange type_info function",
    ),
    Ok(
        "GuiSFX::IrisWipeOpen type_info function",
    ),
    Ok(
        "GuiSFX::IrisWipeClose type_info function",
    ),
    Ok(
        "GuiSFX::Show type_info function",
    ),
    Ok(
        "GuiSFX::Pause type_info function",
    ),
    Ok(
        "GuiSFX::PauseInFrames type_info function",
    ),
    Ok(
        "GuiSFX::PauseGame type_info function",
    ),
    Ok(
        "GuiSFX::ResumeGame type_info function",
    ),
    Ok(
        "GuiSFX::ImageCycler type_info function",
    ),
    Ok(
        "GuiSFX::PulseScale type_info function",
    ),
    Ok(
        "GuiSFX::Spin type_info function",
    ),
    Ok(
        "GuiSFX::Translator type_info function",
    ),
    Ok(
        "GuiSFX::UnderdampedTranslator type_info function",
    ),
    Ok(
        "ScrollingText type_info function",
    ),
    Ok(
        "GuiSFX::HasTimeInterval type_info function",
    ),
    Ok(
        "GuiSFX::HasMulticontroller type_info function",
    ),
    Ok(
        "global constructors keyed to HudMapCam::HudMapCam(int)",
    ),
    Ok(
        "FMVEvent::FMVEvent(void)",
    ),
    Ok(
        "FMVEvent::~FMVEvent(void)",
    ),
    Ok(
        "FMVEvent::GetPlayer(void)",
    ),
    Ok(
        "FMVEvent::FMVEventData::FMVEventData(void)",
    ),
    Ok(
        "NISEvent::NISEvent(void)",
    ),
    Ok(
        "NISEvent::~NISEvent(void)",
    ),
    Ok(
        "NISEvent::Init(void)",
    ),
    Ok(
        "NISEvent::Start(void)",
    ),
    Ok(
        "NISEvent::GetPlayer(void)",
    ),
    Ok(
        "NISEvent::SetNames(void)",
    ),
    Ok(
        "PresentationEvent::PresentationEvent(void)",
    ),
    Ok(
        "PresentationEvent::~PresentationEvent(void)",
    ),
    Ok(
        "PresentationEvent::OnLoadDataComplete(void)",
    ),
    Ok(
        "PresentationEvent::Update(unsigned int)",
    ),
    Ok(
        "PresentationEvent::Start(void)",
    ),
    Ok(
        "PresentationEvent::Stop(void)",
    ),
    Ok(
        "PresentationEvent::Init(void)",
    ),
    Ok(
        "TransitionEvent::GetPlayer(void)",
    ),
    Ok(
        "TransitionEvent::Start(void)",
    ),
    Ok(
        "PresentationEvent type_info function",
    ),
    Ok(
        "FMVEvent type_info function",
    ),
    Ok(
        "NISEvent type_info function",
    ),
    Ok(
        "TransitionEvent::~TransitionEvent(void)",
    ),
    Ok(
        "TransitionEvent type_info function",
    ),
    Ok(
        "PresentationEvent::GetUserData(void)",
    ),
    Ok(
        "FMVEvent::GetUserData(void)",
    ),
    Ok(
        "global constructors keyed to FMVEvent::FMVEvent(void)",
    ),
    Ok(
        "BoxPts::CompareTo(AAPlane3f &)",
    ),
    Ok(
        "BoxPts::DoesIntersect(AAPlane3f &)",
    ),
    Ok(
        "BoxPts::DoesntIntersect(AAPlane3f &)",
    ),
    Ok(
        "BoxPts::TestNotOutsideMinX(ISpatialProxyAA &)",
    ),
    Ok(
        "BoxPts::TestNotOutsideMinY(ISpatialProxyAA &)",
    ),
    Ok(
        "BoxPts::TestNotOutsideMinZ(ISpatialProxyAA &)",
    ),
    Ok(
        "BoxPts::TestNotOutsideMaxX(ISpatialProxyAA &)",
    ),
    Ok(
        "BoxPts::TestNotOutsideMaxY(ISpatialProxyAA &)",
    ),
    Ok(
        "BoxPts::TestNotOutsideMaxZ(ISpatialProxyAA &)",
    ),
    Ok(
        "BoxPts::nPts(void)",
    ),
    Ok(
        "BoxPts::mPt(int)",
    ),
    Ok(
        "BoxPts::GetPoint(void)",
    ),
    Ok(
        "BoxPts::CutOffGT(AAPlane3f &)",
    ),
    Ok(
        "BoxPts::CutOffLT(AAPlane3f &)",
    ),
    Ok(
        "BoxPts::CompareTo(Vector3f const &)",
    ),
    Ok(
        "BoxPts::CompareToXZ(Vector3f const &)",
    ),
    Ok(
        "BoxPts::SetTo(Bounds3f &)",
    ),
    Ok(
        "BoxPts::TestNotOutside(ISpatialProxyAA &)",
    ),
    Ok(
        "HexahedronP::~HexahedronP(void)",
    ),
    Ok(
        "HexahedronP::CompareTo(AAPlane3f &)",
    ),
    Ok(
        "HexahedronP::DoesIntersect(AAPlane3f &)",
    ),
    Ok(
        "HexahedronP::DoesntIntersect(AAPlane3f &)",
    ),
    Ok(
        "HexahedronP::CompareTo(Vector3f const &)",
    ),
    Ok(
        "HexahedronP::TestNotOutside(ISpatialProxyAA &)",
    ),
    Ok(
        "HexahedronP::nPts(void)",
    ),
    Ok(
        "HexahedronP::mPt(int)",
    ),
    Ok(
        "HexahedronP::GetPoint(void)",
    ),
    Ok(
        "SpatialTreeIter::rSeekNode(ISpatialProxyAA &, int)",
    ),
    Ok(
        "SpatialTreeIter::rSeekLeaf(int, Vector3f &)",
    ),
    Ok(
        "SpatialTreeIter::MarkAll(int, BoxPts &, SphereSP &, int)",
    ),
    Ok(
        "SpatialTreeIter::MarkAllSphere(int, BoxPts &, SphereSP &, int)",
    ),
    Ok(
        "SpatialTreeIter::MarkAllSphereIntersect(int, BoxPts &, SphereSP &, int)",
    ),
    Ok(
        "SpatialTreeIter::MarkSubTrees(int, BoxPts &, ISpatialProxyAA &, int)",
    ),
    Ok(
        "SpatialTreeIter::BuildBBoxes(BoxPts, int)",
    ),
    Ok(
        "SphereSP::SphereSP(void)",
    ),
    Ok(
        "SphereSP::~SphereSP(void)",
    ),
    Ok(
        "SphereSP::CompareTo(Vector3f const &)",
    ),
    Ok(
        "SphereSP::CompareToXZ(Vector3f const &)",
    ),
    Ok(
        "SphereSP::CompareTo(AAPlane3f &)",
    ),
    Ok(
        "SphereSP::TestNotOutside(ISpatialProxyAA &)",
    ),
    Ok(
        "SphereSP::SetTo(Bounds3f &)",
    ),
    Ok(
        "SphereSP::SetTo(RadicalMathLibrary::Vector, float)",
    ),
    Ok(
        "WorldScene::WorldScene(void)",
    ),
    Ok(
        "WorldScene::~WorldScene(void)",
    ),
    Ok(
        "WorldScene::SetVisCone(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, float)",
    ),
    Ok(
        "WorldScene::IsSphereInCone(RadicalMathLibrary::Vector &, float)",
    ),
    Ok(
        "WorldScene::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "WorldScene::SetTree(SpatialTree *)",
    ),
    Ok(
        "WorldScene::Init(int)",
    ),
    Ok(
        "WorldScene::Add(IntersectDSG *)",
    ),
    Ok(
        "WorldScene::Add(StaticPhysDSG *)",
    ),
    Ok(
        "WorldScene::Add(StaticEntityDSG *)",
    ),
    Ok(
        "WorldScene::Add(FenceEntityDSG *)",
    ),
    Ok(
        "WorldScene::Add(AnimCollisionEntityDSG *)",
    ),
    Ok(
        "WorldScene::Add(AnimEntityDSG *)",
    ),
    Ok(
        "WorldScene::Add(DynaPhysDSG *)",
    ),
    Ok(
        "WorldScene::Add(TriggerVolume *)",
    ),
    Ok(
        "WorldScene::Add(RoadSegment *)",
    ),
    Ok(
        "WorldScene::Add(PathSegment *)",
    ),
    Ok(
        "WorldScene::GenerateSpatialReps(void)",
    ),
    Ok(
        "WorldScene::Move(RadicalMathLibrary::Box3D &, IEntityDSG *)",
    ),
    Ok(
        "WorldScene::RemovePlace(IEntityDSG *, SpatialNode &)",
    ),
    Ok(
        "WorldScene::Remove(IEntityDSG *)",
    ),
    Ok(
        "WorldScene::RemoveFromLeaf(IEntityDSG *)",
    ),
    Ok(
        "WorldScene::RemoveQuietFail(IEntityDSG *)",
    ),
    Ok(
        "WorldScene::RenderScene(unsigned int, tPointCamera *)",
    ),
    Ok(
        "WorldScene::RenderSimpleShadows(void)",
    ),
    Ok(
        "WorldScene::RenderOpaque(void)",
    ),
    Ok(
        "WorldScene::RenderTranslucent(void)",
    ),
    Ok(
        "WorldScene::Render(unsigned int)",
    ),
    Ok(
        "WorldScene::GenerateStaticTree(void)",
    ),
    Ok(
        "WorldScene::PopulateStaticTree(void)",
    ),
    Ok(
        "WorldScene::Place(IntersectDSG *)",
    ),
    Ok(
        "WorldScene::Place(StaticEntityDSG *)",
    ),
    Ok(
        "WorldScene::Place(StaticPhysDSG *)",
    ),
    Ok(
        "WorldScene::Place(DynaPhysDSG *)",
    ),
    Ok(
        "WorldScene::Place(FenceEntityDSG *)",
    ),
    Ok(
        "WorldScene::Place(AnimCollisionEntityDSG *)",
    ),
    Ok(
        "WorldScene::Place(AnimEntityDSG *)",
    ),
    Ok(
        "WorldScene::Place(TriggerVolume *)",
    ),
    Ok(
        "WorldScene::Place(RoadSegment *)",
    ),
    Ok(
        "WorldScene::Place(PathSegment *)",
    ),
    Ok(
        "WorldScene::IsPreTreeGen(void)",
    ),
    Ok(
        "WorldScene::IsPostTreeGen(void)",
    ),
    Ok(
        "WorldScene::MarkCameraVisible(tPointCamera *, unsigned int)",
    ),
    Ok(
        "ContiguousBinNode<SpatialNode>::LinkParent(int)",
    ),
    Ok(
        "ContiguousBinNode<SpatialNode>::SetSubTreeSize(int)",
    ),
    Ok(
        "ContiguousBinNode<SpatialNode>::LChildOffset(void)",
    ),
    Ok(
        "ContiguousBinNode<SpatialNode>::LChild(void)",
    ),
    Ok(
        "ContiguousBinNode<SpatialNode>::RSiblingOffset(void)",
    ),
    Ok(
        "ContiguousBinNode<SpatialNode>::RChildOffset(void)",
    ),
    Ok(
        "WorldScene::zSortBlah * __uninitialized_copy_aux<WorldScene::zSortBlah *, WorldScene::zSortBlah *>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah *, __false_type)",
    ),
    Ok(
        "void fill<WorldScene::zSortBlah *, WorldScene::zSortBlah>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah const &)",
    ),
    Ok(
        "WorldScene::zSortBlah * __uninitialized_fill_n_aux<WorldScene::zSortBlah *, unsigned int, WorldScene::zSortBlah>(WorldScene::zSortBlah *, unsigned int, WorldScene::zSortBlah const &, __false_type)",
    ),
    Ok(
        "vector<WorldScene::zSortBlah, s2alloc<WorldScene::zSortBlah> >::insert(WorldScene::zSortBlah *, unsigned int, WorldScene::zSortBlah const &)",
    ),
    Ok(
        "void fill<IEntityDSG **, IEntityDSG *>(IEntityDSG **, IEntityDSG **, IEntityDSG * const &)",
    ),
    Ok(
        "IEntityDSG ** fill_n<IEntityDSG **, unsigned int, IEntityDSG *>(IEntityDSG **, unsigned int, IEntityDSG * const &)",
    ),
    Ok(
        "vector<IEntityDSG *, s2alloc<IEntityDSG *> >::insert(IEntityDSG **, unsigned int, IEntityDSG *const &)",
    ),
    Ok(
        "vector<IEntityDSG *, s2alloc<IEntityDSG *> >::_M_insert_aux(IEntityDSG **, IEntityDSG *const &)",
    ),
    Ok(
        "vector<WorldScene::zSortBlah, s2alloc<WorldScene::zSortBlah> >::_M_insert_aux(WorldScene::zSortBlah *, WorldScene::zSortBlah const &)",
    ),
    Ok(
        "void __push_heap<WorldScene::zSortBlah *, int, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, int, int, WorldScene::zSortBlah, gShaderCompare)",
    ),
    Ok(
        "void __adjust_heap<WorldScene::zSortBlah *, int, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, int, int, WorldScene::zSortBlah, gShaderCompare)",
    ),
    Ok(
        "void __make_heap<WorldScene::zSortBlah *, gShaderCompare, WorldScene::zSortBlah, int>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare, WorldScene::zSortBlah *, int *)",
    ),
    Ok(
        "void sort_heap<WorldScene::zSortBlah *, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare)",
    ),
    Ok(
        "void __partial_sort<WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare)",
    ),
    Ok(
        "WorldScene::zSortBlah * __unguarded_partition<WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare)",
    ),
    Ok(
        "void __introsort_loop<WorldScene::zSortBlah *, WorldScene::zSortBlah, int, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah *, int, gShaderCompare)",
    ),
    Ok(
        "void __unguarded_linear_insert<WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare)",
    ),
    Ok(
        "void __insertion_sort<WorldScene::zSortBlah *, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare)",
    ),
    Ok(
        "void __unguarded_insertion_sort_aux<WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare)",
    ),
    Ok(
        "void __final_insertion_sort<WorldScene::zSortBlah *, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare)",
    ),
    Ok(
        "void __push_heap<IEntityDSG **, int, IEntityDSG *, gZSortCompare>(IEntityDSG **, int, int, IEntityDSG *, gZSortCompare)",
    ),
    Ok(
        "void __adjust_heap<IEntityDSG **, int, IEntityDSG *, gZSortCompare>(IEntityDSG **, int, int, IEntityDSG *, gZSortCompare)",
    ),
    Ok(
        "void __make_heap<IEntityDSG **, gZSortCompare, IEntityDSG *, int>(IEntityDSG **, IEntityDSG **, gZSortCompare, IEntityDSG * *, int *)",
    ),
    Ok(
        "void sort_heap<IEntityDSG **, gZSortCompare>(IEntityDSG **, IEntityDSG **, gZSortCompare)",
    ),
    Ok(
        "void __partial_sort<IEntityDSG **, IEntityDSG *, gZSortCompare>(IEntityDSG **, IEntityDSG **, IEntityDSG **, IEntityDSG * *, gZSortCompare)",
    ),
    Ok(
        "IEntityDSG ** __unguarded_partition<IEntityDSG **, IEntityDSG *, gZSortCompare>(IEntityDSG **, IEntityDSG **, IEntityDSG *, gZSortCompare)",
    ),
    Ok(
        "void __introsort_loop<IEntityDSG **, IEntityDSG *, int, gZSortCompare>(IEntityDSG **, IEntityDSG **, IEntityDSG * *, int, gZSortCompare)",
    ),
    Ok(
        "void __unguarded_linear_insert<IEntityDSG **, IEntityDSG *, gZSortCompare>(IEntityDSG **, IEntityDSG *, gZSortCompare)",
    ),
    Ok(
        "void __insertion_sort<IEntityDSG **, gZSortCompare>(IEntityDSG **, IEntityDSG **, gZSortCompare)",
    ),
    Ok(
        "void __unguarded_insertion_sort_aux<IEntityDSG **, IEntityDSG *, gZSortCompare>(IEntityDSG **, IEntityDSG **, IEntityDSG * *, gZSortCompare)",
    ),
    Ok(
        "void __final_insertion_sort<IEntityDSG **, gZSortCompare>(IEntityDSG **, IEntityDSG **, gZSortCompare)",
    ),
    Ok(
        "BoxPts type_info function",
    ),
    Ok(
        "HexahedronP type_info function",
    ),
    Ok(
        "SpatialTree type_info function",
    ),
    Ok(
        "SphereSP type_info function",
    ),
    Ok(
        "WorldScene type_info function",
    ),
    Ok(
        "BoxPts::BoxPts(BoxPts const &)",
    ),
    Ok(
        "BoxPts::~BoxPts(void)",
    ),
    Ok(
        "SpatialTree::~SpatialTree(void)",
    ),
    Ok(
        "WorldScene::zSortBlah::zSortBlah(void)",
    ),
    Ok(
        "WorldScene::zSortBlah::zSortBlah(WorldScene::zSortBlah const &)",
    ),
    Ok(
        "WorldScene::zSortBlah::operator=(WorldScene::zSortBlah const &)",
    ),
    Ok(
        "_Vector_alloc_base<IEntityDSG *, s2alloc<IEntityDSG *>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "_Vector_alloc_base<WorldScene::zSortBlah, s2alloc<WorldScene::zSortBlah>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "ISpatialProxyAA::ISpatialProxyAA(ISpatialProxyAA const &)",
    ),
    Ok(
        "global constructors keyed to BoxPts::CompareTo(AAPlane3f &)",
    ),
    Ok(
        "AnimCollisionEntityDSG::AnimCollisionEntityDSG(void)",
    ),
    Ok(
        "AnimCollisionEntityDSG::~AnimCollisionEntityDSG(void)",
    ),
    Ok(
        "AnimCollisionEntityDSG::LoadSetUp(tCompositeDrawable *, tMultiController *, sim::CollisionObject *, tEntityStore *)",
    ),
    Ok(
        "AnimCollisionEntityDSG::SetAction(ActionButton::AnimSwitch *)",
    ),
    Ok(
        "AnimCollisionEntityDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "AnimCollisionEntityDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "AnimCollisionEntityDSG::Display(void)",
    ),
    Ok(
        "AnimCollisionEntityDSG::pPosition(void)",
    ),
    Ok(
        "AnimCollisionEntityDSG::rPosition(void)",
    ),
    Ok(
        "AnimCollisionEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "AnimCollisionEntityDSG::AdvanceAnimation(float)",
    ),
    Ok(
        "AnimCollisionEntityDSG::Update(float)",
    ),
    Ok(
        "AnimCollisionEntityDSG::UpdatePose(float)",
    ),
    Ok(
        "AnimCollisionEntityDSG::UpdateBBox(sim::CollisionVolume *)",
    ),
    Ok(
        "AnimCollisionEntityDSG::UpdateVisibility(void)",
    ),
    Ok(
        "AnimCollisionEntityDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
    ),
    Ok(
        "AnimCollisionEntityDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "AnimCollisionEntityDSG::GetPoseJoint(int, bool)",
    ),
    Ok(
        "AnimCollisionEntityDSG::OnSetSimState(sim::SimState *)",
    ),
    Ok(
        "AnimCollisionEntityDSG::findSoundName(void)",
    ),
    Ok(
        "AnimEntityDSG::AnimEntityDSG(void)",
    ),
    Ok(
        "AnimEntityDSG::~AnimEntityDSG(void)",
    ),
    Ok(
        "AnimEntityDSG::Display(void)",
    ),
    Ok(
        "AnimEntityDSG::Reset(void)",
    ),
    Ok(
        "AnimEntityDSG::pPosition(void)",
    ),
    Ok(
        "AnimEntityDSG::rPosition(void)",
    ),
    Ok(
        "AnimEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "AnimEntityDSG::SetAnimRootHeadingYUp(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "AnimEntityDSG::SetPosition(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "AnimEntityDSG::Update(float)",
    ),
    Ok(
        "AnimEntityDSG::LoadSetUp(tCompositeDrawable *, tMultiController *, tEntityStore *, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "AnimEntityDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "AnimEntityDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "AnimEntityDSG::PlaceOnGround(float, bool)",
    ),
    Ok(
        "AnimEntityDSG::FindEffectElements(tCompositeDrawable *)",
    ),
    Ok(
        "AnimEntityDSG::GetParticleSystemBoundingBox(tCompositeDrawable *, RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "CollisionEntityDSG::CollisionEntityDSG(void)",
    ),
    Ok(
        "CollisionEntityDSG::~CollisionEntityDSG(void)",
    ),
    Ok(
        "CollisionEntityDSG::SetSimState(sim::SimState *)",
    ),
    Ok(
        "CollisionEntityDSG::SetCollisionAttributes(CollisionAttributes *)",
    ),
    Ok(
        "CollisionEntityDSG::SetRenderLayer(RenderEnums::LayerEnum)",
    ),
    Ok(
        "CollisionEntityDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "CollisionEntityDSG::GetCollisionAttributes(void) const",
    ),
    Ok(
        "CollisionAttributes::CollisionAttributes(char *, char *, char *, float, float, float, unsigned int, float)",
    ),
    Ok(
        "CollisionAttributes::~CollisionAttributes(void)",
    ),
    Ok(
        "CollisionAttributes::GetBreakable(void)",
    ),
    Ok(
        "CollisionAttributes::GetParticle(void)",
    ),
    Ok(
        "CollisionAttributes::GetSound(void)",
    ),
    Ok(
        "CollisionAttributes::GetMass(void)",
    ),
    Ok(
        "CollisionAttributes::GetClasstypeid(void)",
    ),
    Ok(
        "CollisionAttributes::SetSound(char *)",
    ),
    Ok(
        "CollisionAttributes::SetClasstypeid(unsigned int)",
    ),
    Ok(
        "DSGFactory::CreateInstance(void)",
    ),
    Ok(
        "DSGFactory::GetInstance(void)",
    ),
    Ok(
        "DSGFactory::DestroyInstance(void)",
    ),
    Ok(
        "DSGFactory::CreateIntersectDSG(tGeometry *)",
    ),
    Ok(
        "DSGFactory::DSGFactory(void)",
    ),
    Ok(
        "DSGFactory::~DSGFactory(void)",
    ),
    Ok(
        "DynaPhysDSG::DynaPhysDSG(void)",
    ),
    Ok(
        "DynaPhysDSG::~DynaPhysDSG(void)",
    ),
    Ok(
        "DynaPhysDSG::Update(float)",
    ),
    Ok(
        "DynaPhysDSG::FetchGroundPlane(void)",
    ),
    Ok(
        "DynaPhysDSG::FreeGroundPlane(void)",
    ),
    Ok(
        "DynaPhysDSG::IsAtRest(void)",
    ),
    Ok(
        "DynaPhysDSG::RestTest(void)",
    ),
    Ok(
        "DynaPhysDSG::AddToSimulation(void)",
    ),
    Ok(
        "DynaPhysDSG::ApplyForce(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "DynaPhysDSG::IsCollisionEnabled(void) const",
    ),
    Ok(
        "FenceEntityDSG::FenceEntityDSG(void)",
    ),
    Ok(
        "FenceEntityDSG::~FenceEntityDSG(void)",
    ),
    Ok(
        "FenceEntityDSG::Display(void)",
    ),
    Ok(
        "FenceEntityDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "FenceEntityDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "FenceEntityDSG::pPosition(void)",
    ),
    Ok(
        "FenceEntityDSG::rPosition(void)",
    ),
    Ok(
        "FenceEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "FenceEntityDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
    ),
    Ok(
        "FenceEntityDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "IEntityDSG::IEntityDSG(void)",
    ),
    Ok(
        "IEntityDSG::Process(tShader *)",
    ),
    Ok(
        "IEntityDSG::~IEntityDSG(void)",
    ),
    Ok(
        "IEntityDSG::RenderUpdate(void)",
    ),
    Ok(
        "IEntityDSG::SetRank(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "InstDynaPhysDSG::InstDynaPhysDSG(void)",
    ),
    Ok(
        "InstDynaPhysDSG::~InstDynaPhysDSG(void)",
    ),
    Ok(
        "InstDynaPhysDSG::Display(void)",
    ),
    Ok(
        "InstDynaPhysDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "InstDynaPhysDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "InstDynaPhysDSG::Update(float)",
    ),
    Ok(
        "InstDynaPhysDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
    ),
    Ok(
        "InstDynaPhysDSG::AddToSimulation(void)",
    ),
    Ok(
        "InstDynaPhysDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "InstDynaPhysDSG::Break(void)",
    ),
    Ok(
        "InstDynaPhysDSG::OnSetSimState(sim::SimState *)",
    ),
    Ok(
        "InstDynaPhysDSG::LoadSetUp(sim::SimState *, CollisionAttributes *, RadicalMathLibrary::Matrix const &, tDrawable *, tDrawable *)",
    ),
    Ok(
        "InstDynaPhysDSG::Clone(char const *, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "InstDynaPhysDSG::SetRank(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "InstStatEntityDSG::InstStatEntityDSG(void)",
    ),
    Ok(
        "InstStatEntityDSG::~InstStatEntityDSG(void)",
    ),
    Ok(
        "InstStatEntityDSG::Display(void)",
    ),
    Ok(
        "InstStatEntityDSG::DisplaySimpleShadow(void)",
    ),
    Ok(
        "InstStatEntityDSG::RecomputeShadowPosition(void)",
    ),
    Ok(
        "InstStatEntityDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "InstStatEntityDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "InstStatEntityDSG::pMatrix(void)",
    ),
    Ok(
        "InstStatEntityDSG::LoadSetUp(RadicalMathLibrary::Matrix *, tGeometry *, tDrawable *)",
    ),
    Ok(
        "InstStatEntityDSG::LoadSetUp(RadicalMathLibrary::Matrix *, tDrawable *, tDrawable *)",
    ),
    Ok(
        "InstStatEntityDSG::pPosition(void)",
    ),
    Ok(
        "InstStatEntityDSG::rPosition(void)",
    ),
    Ok(
        "InstStatEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "InstStatEntityDSG::CreateShadowMatrix(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "InstStatEntityDSG::ComputeShadowMatrix(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "InstStatPhysDSG::InstStatPhysDSG(void)",
    ),
    Ok(
        "InstStatPhysDSG::~InstStatPhysDSG(void)",
    ),
    Ok(
        "InstStatPhysDSG::Display(void)",
    ),
    Ok(
        "InstStatPhysDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "InstStatPhysDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "InstStatPhysDSG::OnSetSimState(sim::SimState *)",
    ),
    Ok(
        "InstStatPhysDSG::SetInternalState(void)",
    ),
    Ok(
        "InstStatPhysDSG::LoadSetUp(sim::SimState *, CollisionAttributes *, RadicalMathLibrary::Matrix const &, tGeometry *)",
    ),
    Ok(
        "InstStatPhysDSG::Clone(char const *, RadicalMathLibrary::Matrix const &) const",
    ),
    Ok(
        "IntersectDSG::IntersectDSG(tGeometry *)",
    ),
    Ok(
        "IntersectDSG::IntersectDSG(void)",
    ),
    Ok(
        "IntersectDSG::~IntersectDSG(void)",
    ),
    Ok(
        "IntersectDSG::Display(void)",
    ),
    Ok(
        "IntersectDSG::rPosition(void)",
    ),
    Ok(
        "IntersectDSG::pPosition(void)",
    ),
    Ok(
        "IntersectDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "IntersectDSG::IntoTheVoid_WithGoFastaStripes(void)",
    ),
    Ok(
        "IntersectDSG::OutOfTheVoid_WithGoFastaStripes(void)",
    ),
    Ok(
        "IntersectDSG::mTri(int, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "IntersectDSG::nTris(void)",
    ),
    Ok(
        "IntersectDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "IntersectDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "IntersectDSG::SetBoundingBox(float, float, float, float, float, float)",
    ),
    Ok(
        "IntersectDSG::SetBoundingSphere(float, float, float, float)",
    ),
    Ok(
        "IntersectDSG::GetNumPrimGroup(void)",
    ),
    Ok(
        "IntersectDSG::GenIDSG(tGeometry *)",
    ),
    Ok(
        "IntersectDSG::PreParseTris(tPrimGroupStreamed *)",
    ),
    Ok(
        "IntersectDSG::PreParseTriStrips(tPrimGroupStreamed *)",
    ),
    Ok(
        "IntersectDSG::DoAllAllocs(void)",
    ),
    Ok(
        "IntersectDSG::ParseTris(tPrimGroupStreamed *)",
    ),
    Ok(
        "IntersectDSG::ParseTriStrips(tPrimGroupStreamed *)",
    ),
    Ok(
        "IntersectDSG::CalcAllFields(void)",
    ),
    Ok(
        "StaticEntityDSG::StaticEntityDSG(void)",
    ),
    Ok(
        "StaticEntityDSG::~StaticEntityDSG(void)",
    ),
    Ok(
        "StaticEntityDSG::SetRank(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "StaticEntityDSG::SetGeometry(tGeometry *)",
    ),
    Ok(
        "StaticEntityDSG::SetDrawable(tDrawable *)",
    ),
    Ok(
        "StaticEntityDSG::Display(void)",
    ),
    Ok(
        "StaticEntityDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "StaticEntityDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "StaticEntityDSG::pPosition(void)",
    ),
    Ok(
        "StaticEntityDSG::rPosition(void)",
    ),
    Ok(
        "StaticEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "StaticEntityDSG::RenderUpdate(void)",
    ),
    Ok(
        "StaticEntityDSG::SetInternalState(void)",
    ),
    Ok(
        "StaticPhysDSG::StaticPhysDSG(void)",
    ),
    Ok(
        "StaticPhysDSG::~StaticPhysDSG(void)",
    ),
    Ok(
        "StaticPhysDSG::OnSetSimState(sim::SimState *)",
    ),
    Ok(
        "StaticPhysDSG::GetSimState(void) const",
    ),
    Ok(
        "StaticPhysDSG::Display(void)",
    ),
    Ok(
        "StaticPhysDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "StaticPhysDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "StaticPhysDSG::pPosition(void)",
    ),
    Ok(
        "StaticPhysDSG::rPosition(void)",
    ),
    Ok(
        "StaticPhysDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "StaticPhysDSG::RenderUpdate(void)",
    ),
    Ok(
        "StaticPhysDSG::SetInternalState(void)",
    ),
    Ok(
        "StaticPhysDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
    ),
    Ok(
        "StaticPhysDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "StaticPhysDSG::SetShadow(tDrawable *)",
    ),
    Ok(
        "StaticPhysDSG::CreateShadowMatrix(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "StaticPhysDSG::RecomputeShadowPosition(float)",
    ),
    Ok(
        "StaticPhysDSG::RecomputeShadowPositionNoIntersect(float, RadicalMathLibrary::Vector const &, float, float)",
    ),
    Ok(
        "StaticPhysDSG::DisplaySimpleShadow(void)",
    ),
    Ok(
        "StaticPhysDSG::ComputeShadowMatrix(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "WorldSphereDSG::WorldSphereDSG(void)",
    ),
    Ok(
        "WorldSphereDSG::~WorldSphereDSG(void)",
    ),
    Ok(
        "WorldSphereDSG::Activate(void)",
    ),
    Ok(
        "WorldSphereDSG::Deactivate(void)",
    ),
    Ok(
        "WorldSphereDSG::SetNumMeshes(int)",
    ),
    Ok(
        "WorldSphereDSG::SetNumBillBoardQuadGroups(int)",
    ),
    Ok(
        "WorldSphereDSG::SetFlare(LensFlareDSG *)",
    ),
    Ok(
        "WorldSphereDSG::AddMesh(tGeometry *)",
    ),
    Ok(
        "WorldSphereDSG::AddBillBoardQuadGroup(tBillboardQuadGroup *)",
    ),
    Ok(
        "WorldSphereDSG::SetCompositeDrawable(tCompositeDrawable *)",
    ),
    Ok(
        "WorldSphereDSG::SetMultiController(tMultiController *)",
    ),
    Ok(
        "WorldSphereDSG::Display(void)",
    ),
    Ok(
        "WorldSphereDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "WorldSphereDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "WorldSphereDSG::pPosition(void)",
    ),
    Ok(
        "WorldSphereDSG::rPosition(void)",
    ),
    Ok(
        "WorldSphereDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "WorldSphereDSG::RenderUpdate(void)",
    ),
    Ok(
        "WorldSphereDSG::SetInternalState(void)",
    ),
    Ok(
        "BreakableObjectDSG::BreakableObjectDSG(void)",
    ),
    Ok(
        "BreakableObjectDSG::~BreakableObjectDSG(void)",
    ),
    Ok(
        "BreakableObjectDSG::Init(tAnimatedObjectFactory *, tAnimatedObjectFrameController *)",
    ),
    Ok(
        "BreakableObjectDSG::Display(void)",
    ),
    Ok(
        "BreakableObjectDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "BreakableObjectDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "BreakableObjectDSG::Update(float)",
    ),
    Ok(
        "BreakableObjectDSG::pPosition(void)",
    ),
    Ok(
        "BreakableObjectDSG::rPosition(void)",
    ),
    Ok(
        "BreakableObjectDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "BreakableObjectDSG::SetTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "BreakableObjectDSG::Reset(void)",
    ),
    Ok(
        "BreakableObjectDSG::LastFrameReached(void)",
    ),
    Ok(
        "LensFlareDSG::ClearAllFlares(void)",
    ),
    Ok(
        "LensFlareDSG::DisplayAllFlares(void)",
    ),
    Ok(
        "LensFlareDSG::PostDisplayFlare(LensFlareDSG *)",
    ),
    Ok(
        "LensFlareDSG::ReadFrameBufferIntensities(void)",
    ),
    Ok(
        "LensFlareDSG::LensFlareDSG(void)",
    ),
    Ok(
        "LensFlareDSG::~LensFlareDSG(void)",
    ),
    Ok(
        "LensFlareDSG::SetNumBillBoardQuadGroups(int)",
    ),
    Ok(
        "LensFlareDSG::AddBillBoardQuadGroup(tBillboardQuadGroup *)",
    ),
    Ok(
        "LensFlareDSG::SetCompositeDrawable(tCompositeDrawable *)",
    ),
    Ok(
        "LensFlareDSG::Display(void)",
    ),
    Ok(
        "LensFlareDSG::DisplayImmediate(void)",
    ),
    Ok(
        "LensFlareDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "LensFlareDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "LensFlareDSG::pPosition(void)",
    ),
    Ok(
        "LensFlareDSG::rPosition(void)",
    ),
    Ok(
        "LensFlareDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "LensFlareDSG::RenderUpdate(void)",
    ),
    Ok(
        "LensFlareDSG::DrawVisibilityChecker(void)",
    ),
    Ok(
        "LensFlareDSG::SetBillBoardIntensity(float)",
    ),
    Ok(
        "InstAnimDynaPhysDSG::InstAnimDynaPhysDSG(void)",
    ),
    Ok(
        "InstAnimDynaPhysDSG::~InstAnimDynaPhysDSG(void)",
    ),
    Ok(
        "InstAnimDynaPhysDSG::Display(void)",
    ),
    Ok(
        "InstAnimDynaPhysDSG::DisplayBoundingBox(pddiColour)",
    ),
    Ok(
        "InstAnimDynaPhysDSG::LoadSetUp(CollisionAttributes *, RadicalMathLibrary::Matrix const &, tCompositeDrawable *, tMultiController *, tEntityStore *)",
    ),
    Ok(
        "InstAnimDynaPhysDSG::Break(void)",
    ),
    Ok(
        "InstAnimDynaPhysDSG::Update(float)",
    ),
    Ok(
        "InstAnimDynaPhysDSG::SetTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "AnimDynaPhysWrapper::AnimDynaPhysWrapper(void)",
    ),
    Ok(
        "AnimDynaPhysWrapper::~AnimDynaPhysWrapper(void)",
    ),
    Ok(
        "AnimDynaPhysWrapper::GetVolume(void) const",
    ),
    Ok(
        "AnimDynaPhysWrapper::GetDrawable(void) const",
    ),
    Ok(
        "AnimDynaPhysWrapper::GetController(void) const",
    ),
    Ok(
        "AnimDynaPhysWrapper::GetStatePropData(void) const",
    ),
    Ok(
        "AnimDynaPhysWrapper::HasAlpha(void) const",
    ),
    Ok(
        "StatePropDSG::StatePropDSG(void)",
    ),
    Ok(
        "StatePropDSG::~StatePropDSG(void)",
    ),
    Ok(
        "StatePropDSG::LoadSetup(CStatePropData *, int, RadicalMathLibrary::Matrix const &, CollisionAttributes *, bool, tEntityStore *, bool, sim::CollisionObject *, sim::PhysicsObject *)",
    ),
    Ok(
        "StatePropDSG::Clone(char const *, RadicalMathLibrary::Matrix const &) const",
    ),
    Ok(
        "StatePropDSG::OnSetSimState(sim::SimState *)",
    ),
    Ok(
        "StatePropDSG::Display(void)",
    ),
    Ok(
        "StatePropDSG::AdvanceAnimation(float)",
    ),
    Ok(
        "StatePropDSG::Update(float)",
    ),
    Ok(
        "StatePropDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "StatePropDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "StatePropDSG::pPosition(void)",
    ),
    Ok(
        "StatePropDSG::rPosition(void)",
    ),
    Ok(
        "StatePropDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "StatePropDSG::SetPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "StatePropDSG::GetTransform(RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "StatePropDSG::SetTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "StatePropDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
    ),
    Ok(
        "StatePropDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "StatePropDSG::GenerateCoins(int)",
    ),
    Ok(
        "StatePropDSG::RecieveEvent(int, CStateProp *)",
    ),
    Ok(
        "StatePropDSG::AddToSimulation(void)",
    ),
    Ok(
        "StatePropDSG::ApplyForce(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "StatePropDSG::CastsShadow(void)",
    ),
    Ok(
        "StatePropDSG::DisplaySimpleShadow(void)",
    ),
    Ok(
        "StatePropDSG::SetRank(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "StatePropDSG::SetShadowElement(tUidUnaligned)",
    ),
    Ok(
        "StatePropDSG::EnableCollisionVolume(bool)",
    ),
    Ok(
        "StatePropDSG::RemoveSubCollisionVolume(int)",
    ),
    Ok(
        "StatePropDSG::GetAIRef(void)",
    ),
    Ok(
        "StatePropDSG::SetState(int)",
    ),
    Ok(
        "StatePropDSG::HandleEvent(StatePropDSG::Event)",
    ),
    Ok(
        "StatePropDSG::GetState(void) const",
    ),
    Ok(
        "StatePropDSG::AddStatePropListener(CStatePropListener *)",
    ),
    Ok(
        "StatePropDSG::RemoveStatePropListener(CStatePropListener *)",
    ),
    Ok(
        "StatePropDSG::SetSimJoint(int)",
    ),
    Ok(
        "StatePropDSG::GetType(void) const",
    ),
    Ok(
        "StatePropDSG::RemoveAllSharedtPoses(void)",
    ),
    Ok(
        "StatePropDSG::AnimateCollisionVolume(void)",
    ),
    Ok(
        "StatePropDSG::GetSharedtPose(tUidUnaligned)",
    ),
    Ok(
        "StatePropDSG::AddNewSharedtPose(tUidUnaligned, tPose *)",
    ),
    Ok(
        "Map<tUidUnaligned, tPose *>::Map(void)",
    ),
    Ok(
        "MapElement<tUidUnaligned, tPose *>::MapElement(MapElement<tUidUnaligned, tPose *> const &)",
    ),
    Ok(
        "MapElement<tUidUnaligned, tPose *> * __uninitialized_copy_aux<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, __false_type)",
    ),
    Ok(
        "Map<tUidUnaligned, tPose *>::reserve(unsigned int)",
    ),
    Ok(
        "Map<tUidUnaligned, tPose *>::begin(void)",
    ),
    Ok(
        "Map<tUidUnaligned, tPose *>::end(void)",
    ),
    Ok(
        "MapElement<tUidUnaligned, tPose *>::operator=(MapElement<tUidUnaligned, tPose *> const &)",
    ),
    Ok(
        "void __push_heap<MapElement<tUidUnaligned, tPose *> *, int, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, int, int, MapElement<tUidUnaligned, tPose *>)",
    ),
    Ok(
        "void __adjust_heap<MapElement<tUidUnaligned, tPose *> *, int, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, int, int, MapElement<tUidUnaligned, tPose *>)",
    ),
    Ok(
        "void __make_heap<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *>, int>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, int *)",
    ),
    Ok(
        "void sort_heap<MapElement<tUidUnaligned, tPose *> *>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *)",
    ),
    Ok(
        "void __partial_sort<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *)",
    ),
    Ok(
        "MapElement<tUidUnaligned, tPose *> * __unguarded_partition<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *>)",
    ),
    Ok(
        "void __introsort_loop<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *>, int>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, int)",
    ),
    Ok(
        "void __unguarded_linear_insert<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *>)",
    ),
    Ok(
        "void __insertion_sort<MapElement<tUidUnaligned, tPose *> *>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *)",
    ),
    Ok(
        "void __unguarded_insertion_sort_aux<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *)",
    ),
    Ok(
        "void __final_insertion_sort<MapElement<tUidUnaligned, tPose *> *>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *)",
    ),
    Ok(
        "Map<tUidUnaligned, tPose *>::RefreshIfDirty(void) const",
    ),
    Ok(
        "MapElement<tUidUnaligned, tPose *>::MapElement(void)",
    ),
    Ok(
        "MapElement<tUidUnaligned, tPose *> * __lower_bound<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *>, int>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> const &, int *)",
    ),
    Ok(
        "Map<tUidUnaligned, tPose *>::find(tUidUnaligned const &)",
    ),
    Ok(
        "vector<MapElement<tUidUnaligned, tPose *>, s2alloc<MapElement<tUidUnaligned, tPose *> > >::_M_insert_aux(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> const &)",
    ),
    Ok(
        "Map<tUidUnaligned, tPose *>::insert(tUidUnaligned const &, tPose *const &)",
    ),
    Ok(
        "IEntityDSG type_info function",
    ),
    Ok(
        "CollisionAttributes type_info function",
    ),
    Ok(
        "CollisionEntityDSG type_info function",
    ),
    Ok(
        "AnimCollisionEntityDSG type_info function",
    ),
    Ok(
        "StaticPhysDSG type_info function",
    ),
    Ok(
        "DynaPhysDSG type_info function",
    ),
    Ok(
        "InstDynaPhysDSG type_info function",
    ),
    Ok(
        "StaticEntityDSG type_info function",
    ),
    Ok(
        "InstStatEntityDSG type_info function",
    ),
    Ok(
        "AnimEntityDSG type_info function",
    ),
    Ok(
        "IntersectDSG type_info function",
    ),
    Ok(
        "FenceEntityDSG type_info function",
    ),
    Ok(
        "BreakableObjectDSG type_info function",
    ),
    Ok(
        "InstStatPhysDSG type_info function",
    ),
    Ok(
        "LensFlareDSG type_info function",
    ),
    Ok(
        "WorldSphereDSG type_info function",
    ),
    Ok(
        "InstAnimDynaPhysDSG type_info function",
    ),
    Ok(
        "AnimDynaPhysWrapper type_info function",
    ),
    Ok(
        "StatePropDSG type_info function",
    ),
    Ok(
        "tDrawable::ShaderCallback::ShaderCallback(void)",
    ),
    Ok(
        "IEntityDSG::SetShadow(tShadowSkin *)",
    ),
    Ok(
        "IEntityDSG::SetShadow(tShadowMesh *)",
    ),
    Ok(
        "IEntityDSG::CastsShadow(void)",
    ),
    Ok(
        "IEntityDSG::DisplayShadow(void)",
    ),
    Ok(
        "IEntityDSG::DisplaySimpleShadow(void)",
    ),
    Ok(
        "IEntityDSG::SetShader(tShader *, int)",
    ),
    Ok(
        "IEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "CollisionEntityDSG::OnSetSimState(sim::SimState *)",
    ),
    Ok(
        "AnimCollisionEntityDSG::GetAIRef(void)",
    ),
    Ok(
        "StaticPhysDSG::mpSimState(void) const",
    ),
    Ok(
        "StaticPhysDSG::CastsShadow(void)",
    ),
    Ok(
        "StaticPhysDSG::GetAIRef(void)",
    ),
    Ok(
        "DynaPhysDSG::OnTransitToAICtrl(void)",
    ),
    Ok(
        "DynaPhysDSG::GetGroundPlaneIndex(void)",
    ),
    Ok(
        "InstDynaPhysDSG::GetAIRef(void)",
    ),
    Ok(
        "StaticEntityDSG::SetShader(tShader *, int)",
    ),
    Ok(
        "InstStatEntityDSG::SetShader(tShader *, int)",
    ),
    Ok(
        "InstStatEntityDSG::CastsShadow(void)",
    ),
    Ok(
        "AnimEntityDSG::SetVisibility(bool)",
    ),
    Ok(
        "AnimEntityDSG::GetVisibility(void) const",
    ),
    Ok(
        "AnimEntityDSG::PlayAnimation(bool)",
    ),
    Ok(
        "AnimEntityDSG::RenderUpdate(void)",
    ),
    Ok(
        "FenceEntityDSG::GetAIRef(void)",
    ),
    Ok(
        "LensFlareDSG::SetShader(tShader *, int)",
    ),
    Ok(
        "Map<tUidUnaligned, tPose *>::~Map(void)",
    ),
    Ok(
        "StatePropDSG::HasAlpha(void) const",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::PhysicsObject>::SafeCast(void)",
    ),
    Ok(
        "tDrawable::ShaderCallback type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::PhysicsObject> type_info function",
    ),
    Ok(
        "_Vector_alloc_base<MapElement<tUidUnaligned, tPose *>, s2alloc<MapElement<tUidUnaligned, tPose *> >, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::PhysicsObject>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to AnimCollisionEntityDSG::AnimCollisionEntityDSG(void)",
    ),
    Ok(
        "global destructors keyed to AnimCollisionEntityDSG::AnimCollisionEntityDSG(void)",
    ),
    Ok(
        "BreakablesManager::CreateInstance(void)",
    ),
    Ok(
        "BreakablesManager::DestroyInstance(void)",
    ),
    Ok(
        "BreakablesManager::GetInstance(void)",
    ),
    Ok(
        "BreakablesManager::BreakablesManager(void)",
    ),
    Ok(
        "BreakablesManager::~BreakablesManager(void)",
    ),
    Ok(
        "BreakablesManager::ManagedBreakable::ManagedBreakable(void)",
    ),
    Ok(
        "BreakablesManager::ManagedBreakable::~ManagedBreakable(void)",
    ),
    Ok(
        "BreakablesManager::ManagedBreakable::AddToDSG(void)",
    ),
    Ok(
        "BreakablesManager::ManagedBreakable::RemoveFromDSG(void)",
    ),
    Ok(
        "BreakablesManager::Update(unsigned int)",
    ),
    Ok(
        "BreakablesManager::AllocateBreakables(BreakablesEnum::BreakableID, tAnimatedObjectFactory *, tAnimatedObjectFrameController *, int)",
    ),
    Ok(
        "BreakablesManager::FreeBreakables(BreakablesEnum::BreakableID)",
    ),
    Ok(
        "BreakablesManager::RemoveFromDSG(BreakablesEnum::BreakableID)",
    ),
    Ok(
        "BreakablesManager::FreeAllBreakables(void)",
    ),
    Ok(
        "BreakablesManager::RemoveBrokenObjectFromWorld(IEntityDSG *, RenderEnums::LayerEnum, bool)",
    ),
    Ok(
        "BreakablesManager::Play(BreakablesEnum::BreakableID, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "BreakablesManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "BreakablesManager::BreakableInstances::Next(void)",
    ),
    Ok(
        "BreakablesManager::IsLoaded(BreakablesEnum::BreakableID)",
    ),
    Ok(
        "BreakablesManager::AddToZoneList(BreakablesEnum::BreakableID)",
    ),
    Ok(
        "BreakablesManager::BreakableInstances * __uninitialized_fill_n_aux<BreakablesManager::BreakableInstances *, unsigned int, BreakablesManager::BreakableInstances>(BreakablesManager::BreakableInstances *, unsigned int, BreakablesManager::BreakableInstances const &, __false_type)",
    ),
    Ok(
        "BreakablesManager type_info function",
    ),
    Ok(
        "_Vector_alloc_base<BreakablesManager::BreakableInstances, s2alloc<BreakablesManager::BreakableInstances>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "SkidMarkGenerator::SkidMarkGenerator(void)",
    ),
    Ok(
        "SkidMarkGenerator::~SkidMarkGenerator(void)",
    ),
    Ok(
        "SkidMarkGenerator::InitShaders(void)",
    ),
    Ok(
        "SkidMarkGenerator::GetShader(eTerrainType)",
    ),
    Ok(
        "SkidMarkGenerator::ReleaseShaders(void)",
    ),
    Ok(
        "SkidMarkGenerator::GenerateSkid(int, SkidMarkGenerator::SkidData const &)",
    ),
    Ok(
        "SkidMarkGenerator::Update(void)",
    ),
    Ok(
        "SkidmarkManager::ManagedSkidmark::ManagedSkidmark(void)",
    ),
    Ok(
        "SkidmarkManager::ManagedSkidmark::~ManagedSkidmark(void)",
    ),
    Ok(
        "SkidmarkManager::SkidmarkManager(void)",
    ),
    Ok(
        "SkidmarkManager::~SkidmarkManager(void)",
    ),
    Ok(
        "SkidmarkManager::CreateInstance(void)",
    ),
    Ok(
        "SkidmarkManager::GetInstance(void)",
    ),
    Ok(
        "SkidmarkManager::DestroyInstance(void)",
    ),
    Ok(
        "SkidmarkManager::Update(unsigned int)",
    ),
    Ok(
        "SkidmarkManager::GetUnusedSkidmark(void)",
    ),
    Ok(
        "SkidmarkManager::ReturnUsedSkidmark(Skidmark *)",
    ),
    Ok(
        "SkidmarkManager::Init(int)",
    ),
    Ok(
        "SkidmarkManager::Destroy(void)",
    ),
    Ok(
        "Skidmark::Skidmark(void)",
    ),
    Ok(
        "Skidmark::~Skidmark(void)",
    ),
    Ok(
        "Skidmark::IsVisible(void) const",
    ),
    Ok(
        "Skidmark::Display(void)",
    ),
    Ok(
        "Skidmark::Extend(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector, float, float)",
    ),
    Ok(
        "Skidmark::ClearVertices(void)",
    ),
    Ok(
        "Skidmark::ContinueSkidmark(Skidmark *)",
    ),
    Ok(
        "Skidmark::FadeInVertices(void)",
    ),
    Ok(
        "Skidmark::FadeOutTrailingVertices(void)",
    ),
    Ok(
        "Skidmark::FadeOut(float)",
    ),
    Ok(
        "Skidmark::AddToDSG(RenderEnums::LayerEnum)",
    ),
    Ok(
        "Skidmark::RemoveFromDSG(void)",
    ),
    Ok(
        "Skidmark::SetShader(tShader *)",
    ),
    Ok(
        "Skidmark::WriteVertices(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, unsigned char, float, float)",
    ),
    Ok(
        "Skidmark::ExtendVertices(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, unsigned char, float, float)",
    ),
    Ok(
        "Skidmark::FindTextureBreakPosition(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *, float *, float *, float *)",
    ),
    Ok(
        "Skidmark::MoveInDSG(RadicalMathLibrary::Box3D &)",
    ),
    Ok(
        "Skidmark type_info function",
    ),
    Ok(
        "Skidmark::Segment::Segment(void)",
    ),
    Ok(
        "Skidmark::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "Skidmark::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tShader>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tShader> type_info function",
    ),
    Ok(
        "Skidmark::Vertex::Vertex(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tShader>::safe_cast(IRefCount *)",
    ),
    Ok(
        "IntersectManager::CreateInstance(void)",
    ),
    Ok(
        "IntersectManager::GetInstance(void)",
    ),
    Ok(
        "IntersectManager::DestroyInstance(void)",
    ),
    Ok(
        "IntersectManager::IntersectWithPlane(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, float &)",
    ),
    Ok(
        "IntersectManager::ResetCache(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "IntersectManager::FindClosestRoad(RadicalMathLibrary::Vector const &, float, RoadSegment *&, float &)",
    ),
    Ok(
        "IntersectManager::FindClosestAnyRoad(RadicalMathLibrary::Vector const &, float, RoadSegment *&, float &)",
    ),
    Ok(
        "IntersectManager::FindFenceElems(RadicalMathLibrary::Vector &, float, ReserveArray<FenceEntityDSG *> &)",
    ),
    Ok(
        "IntersectManager::FindStaticPhysElems(RadicalMathLibrary::Vector &, float, ReserveArray<StaticPhysDSG *> &)",
    ),
    Ok(
        "IntersectManager::FindDynaPhysElems(RadicalMathLibrary::Vector &, float, ReserveArray<DynaPhysDSG *> &)",
    ),
    Ok(
        "IntersectManager::FindAnimPhysElems(RadicalMathLibrary::Vector &, float, ReserveArray<AnimCollisionEntityDSG *> &)",
    ),
    Ok(
        "IntersectManager::FindRoadSegmentElems(RadicalMathLibrary::Vector &, float, ReserveArray<RoadSegment *> &)",
    ),
    Ok(
        "IntersectManager::FindPathSegmentElems(RadicalMathLibrary::Vector &, float, ReserveArray<PathSegment *> &)",
    ),
    Ok(
        "IntersectManager::FindIntersection(RadicalMathLibrary::Vector &, bool &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "IntersectManager::IntersectManager(void)",
    ),
    Ok(
        "IntersectManager::~IntersectManager(void)",
    ),
    Ok(
        "AllWrappers::CreateInstance(void)",
    ),
    Ok(
        "AllWrappers::GetInstance(void)",
    ),
    Ok(
        "AllWrappers::DestroyInstance(void)",
    ),
    Ok(
        "AllWrappers::mLoader(int)",
    ),
    Ok(
        "AllWrappers::mpLoader(int)",
    ),
    Ok(
        "AllWrappers::CoupleAllLoaders(void)",
    ),
    Ok(
        "AllWrappers::AddGlobalEntity(tDrawable *)",
    ),
    Ok(
        "AllWrappers::GetGlobalEntity(tUidUnaligned) const",
    ),
    Ok(
        "AllWrappers::ClearGlobalEntities(void)",
    ),
    Ok(
        "AllWrappers::AllWrappers(void)",
    ),
    Ok(
        "AllWrappers::~AllWrappers(void)",
    ),
    Ok(
        "AnimCollLoader::AnimCollLoader(void)",
    ),
    Ok(
        "AnimCollLoader::~AnimCollLoader(void)",
    ),
    Ok(
        "AnimCollLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "AnimCollLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "AnimCollLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "AnimDSGLoader::AnimDSGLoader(void)",
    ),
    Ok(
        "AnimDSGLoader::~AnimDSGLoader(void)",
    ),
    Ok(
        "AnimDSGLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "AnimDSGLoader::LoadAnimAtIntersections(tCompositeDrawable *, tMultiController *, tEntityStore *, bool, char *, int)",
    ),
    Ok(
        "AnimDSGLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "AnimDSGLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "BillboardWrappedLoader::BillboardWrappedLoader(void)",
    ),
    Ok(
        "BillboardWrappedLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "BillboardWrappedLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "BillboardWrappedLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "BreakableObjectLoader::BreakableObjectLoader(void)",
    ),
    Ok(
        "BreakableObjectLoader::~BreakableObjectLoader(void)",
    ),
    Ok(
        "BreakableObjectLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "BreakableObjectLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "BreakableObjectLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "DynaPhysLoader::DynaPhysLoader(void)",
    ),
    Ok(
        "DynaPhysLoader::~DynaPhysLoader(void)",
    ),
    Ok(
        "DynaPhysLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "DynaPhysLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "DynaPhysLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "FenceLoader::FenceLoader(void)",
    ),
    Ok(
        "FenceLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "FenceLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "FenceLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "GeometryWrappedLoader::GeometryWrappedLoader(void)",
    ),
    Ok(
        "GeometryWrappedLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "GeometryWrappedLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "GeometryWrappedLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "InstParticleSystemLoader::InstParticleSystemLoader(void)",
    ),
    Ok(
        "InstParticleSystemLoader::~InstParticleSystemLoader(void)",
    ),
    Ok(
        "InstParticleSystemLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "InstParticleSystemLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "InstParticleSystemLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "InstStatEntityLoader::InstStatEntityLoader(void)",
    ),
    Ok(
        "InstStatEntityLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "InstStatEntityLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "InstStatEntityLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "InstStatPhysLoader::InstStatPhysLoader(void)",
    ),
    Ok(
        "InstStatPhysLoader::~InstStatPhysLoader(void)",
    ),
    Ok(
        "InstStatPhysLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "InstStatPhysLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "InstStatPhysLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "IntersectLoader::IntersectLoader(void)",
    ),
    Ok(
        "IntersectLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "IntersectLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "IntersectLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "StaticEntityLoader::StaticEntityLoader(void)",
    ),
    Ok(
        "StaticEntityLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "StaticEntityLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "StaticEntityLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "StaticPhysLoader::StaticPhysLoader(void)",
    ),
    Ok(
        "StaticPhysLoader::~StaticPhysLoader(void)",
    ),
    Ok(
        "StaticPhysLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "StaticPhysLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "StaticPhysLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "TreeDSGLoader::TreeDSGLoader(void)",
    ),
    Ok(
        "TreeDSGLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "TreeDSGLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "TreeDSGLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "WorldSphereLoader::WorldSphereLoader(void)",
    ),
    Ok(
        "WorldSphereLoader::~WorldSphereLoader(void)",
    ),
    Ok(
        "WorldSphereLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "WorldSphereLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "WorldSphereLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "LensFlareLoader::LensFlareLoader(void)",
    ),
    Ok(
        "LensFlareLoader::~LensFlareLoader(void)",
    ),
    Ok(
        "LensFlareLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "LensFlareLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "LensFlareLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "LensFlareLoader::SetOcclusionFlags(tCompositeDrawable *)",
    ),
    Ok(
        "AnimDynaPhysLoader::AnimDynaPhysLoader(void)",
    ),
    Ok(
        "AnimDynaPhysLoader::~AnimDynaPhysLoader(void)",
    ),
    Ok(
        "AnimDynaPhysLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "AnimDynaPhysLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "AnimDynaPhysLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "AnimDynaPhysLoader::SetShadowElement(char const *, char const *)",
    ),
    Ok(
        "AnimDynaPhysLoader::ClearShadowList(void)",
    ),
    Ok(
        "AnimDynaPhysLoader::GetShadowElement(tUidUnaligned)",
    ),
    Ok(
        "AnimDynaPhysWrapperLoader::AnimDynaPhysWrapperLoader(void)",
    ),
    Ok(
        "AnimDynaPhysWrapperLoader::~AnimDynaPhysWrapperLoader(void)",
    ),
    Ok(
        "AnimDynaPhysWrapperLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "AnimDynaPhysWrapperLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "AnimDynaPhysWrapperLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "AnimObjDSGWrapperLoader::AnimObjDSGWrapperLoader(void)",
    ),
    Ok(
        "AnimObjDSGWrapperLoader::~AnimObjDSGWrapperLoader(void)",
    ),
    Ok(
        "AnimObjDSGWrapperLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "AnimObjDSGWrapperLoader::SetRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "AnimObjDSGWrapperLoader::ModRegdListener(ChunkListenerCallback *, int)",
    ),
    Ok(
        "AnimDynaPhysLoader::IsMissionProp(char const *) const",
    ),
    Ok(
        "ContiguousBinNode<SpatialNode>::IsRoot(void)",
    ),
    Ok(
        "Map<tUidUnaligned, tUidUnaligned>::capacity(void) const",
    ),
    Ok(
        "MapElement<tUidUnaligned, tUidUnaligned>::MapElement(MapElement<tUidUnaligned, tUidUnaligned> const &)",
    ),
    Ok(
        "MapElement<tUidUnaligned, tUidUnaligned> * __uninitialized_copy_aux<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, __false_type)",
    ),
    Ok(
        "Map<tUidUnaligned, tUidUnaligned>::reserve(unsigned int)",
    ),
    Ok(
        "MapElement<tUidUnaligned, tUidUnaligned>::operator=(MapElement<tUidUnaligned, tUidUnaligned> const &)",
    ),
    Ok(
        "void __push_heap<MapElement<tUidUnaligned, tUidUnaligned> *, int, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, int, int, MapElement<tUidUnaligned, tUidUnaligned>)",
    ),
    Ok(
        "void __adjust_heap<MapElement<tUidUnaligned, tUidUnaligned> *, int, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, int, int, MapElement<tUidUnaligned, tUidUnaligned>)",
    ),
    Ok(
        "void __make_heap<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned>, int>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, int *)",
    ),
    Ok(
        "void sort_heap<MapElement<tUidUnaligned, tUidUnaligned> *>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *)",
    ),
    Ok(
        "void __partial_sort<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *)",
    ),
    Ok(
        "MapElement<tUidUnaligned, tUidUnaligned> * __unguarded_partition<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned>)",
    ),
    Ok(
        "void __introsort_loop<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned>, int>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, int)",
    ),
    Ok(
        "void __unguarded_linear_insert<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned>)",
    ),
    Ok(
        "void __insertion_sort<MapElement<tUidUnaligned, tUidUnaligned> *>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *)",
    ),
    Ok(
        "void __unguarded_insertion_sort_aux<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *)",
    ),
    Ok(
        "void __final_insertion_sort<MapElement<tUidUnaligned, tUidUnaligned> *>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *)",
    ),
    Ok(
        "Map<tUidUnaligned, tUidUnaligned>::RefreshIfDirty(void) const",
    ),
    Ok(
        "MapElement<tUidUnaligned, tUidUnaligned>::MapElement(void)",
    ),
    Ok(
        "MapElement<tUidUnaligned, tUidUnaligned> * __lower_bound<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned>, int>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> const &, int *)",
    ),
    Ok(
        "Map<tUidUnaligned, tUidUnaligned>::find(tUidUnaligned const &)",
    ),
    Ok(
        "Map<tUidUnaligned, tUidUnaligned>::end(void)",
    ),
    Ok(
        "vector<MapElement<tUidUnaligned, tUidUnaligned>, s2alloc<MapElement<tUidUnaligned, tUidUnaligned> > >::_M_insert_aux(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> const &)",
    ),
    Ok(
        "Map<tUidUnaligned, tUidUnaligned>::insert(tUidUnaligned const &, tUidUnaligned const &)",
    ),
    Ok(
        "Map<tUidUnaligned, tUidUnaligned>::clear(void)",
    ),
    Ok(
        "_Vector_alloc_base<MapElement<tUidUnaligned, tUidUnaligned>, s2alloc<MapElement<tUidUnaligned, tUidUnaligned> >, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "Map<tUidUnaligned, tUidUnaligned>::Map(void)",
    ),
    Ok(
        "Map<tUidUnaligned, tUidUnaligned>::~Map(void)",
    ),
    Ok(
        "GeometryWrappedLoader::~GeometryWrappedLoader(void)",
    ),
    Ok(
        "GeometryWrappedLoader type_info function",
    ),
    Ok(
        "StaticEntityLoader::~StaticEntityLoader(void)",
    ),
    Ok(
        "StaticEntityLoader type_info function",
    ),
    Ok(
        "StaticPhysLoader type_info function",
    ),
    Ok(
        "TreeDSGLoader::~TreeDSGLoader(void)",
    ),
    Ok(
        "TreeDSGLoader type_info function",
    ),
    Ok(
        "FenceLoader::~FenceLoader(void)",
    ),
    Ok(
        "FenceLoader type_info function",
    ),
    Ok(
        "IntersectLoader::~IntersectLoader(void)",
    ),
    Ok(
        "IntersectLoader type_info function",
    ),
    Ok(
        "AnimCollLoader type_info function",
    ),
    Ok(
        "AnimDSGLoader type_info function",
    ),
    Ok(
        "DynaPhysLoader type_info function",
    ),
    Ok(
        "InstStatPhysLoader type_info function",
    ),
    Ok(
        "InstStatEntityLoader::~InstStatEntityLoader(void)",
    ),
    Ok(
        "InstStatEntityLoader type_info function",
    ),
    Ok(
        "WorldSphereLoader type_info function",
    ),
    Ok(
        "AnimDynaPhysLoader type_info function",
    ),
    Ok(
        "AnimDynaPhysWrapperLoader type_info function",
    ),
    Ok(
        "AnimObjDSGWrapperLoader type_info function",
    ),
    Ok(
        "BillboardWrappedLoader::~BillboardWrappedLoader(void)",
    ),
    Ok(
        "BillboardWrappedLoader type_info function",
    ),
    Ok(
        "InstParticleSystemLoader type_info function",
    ),
    Ok(
        "BreakableObjectLoader type_info function",
    ),
    Ok(
        "LensFlareLoader type_info function",
    ),
    Ok(
        "global constructors keyed to AllWrappers::mspInstance",
    ),
    Ok(
        "global destructors keyed to AllWrappers::mspInstance",
    ),
    Ok(
        "ParticleManager::ManagedParticleSystem::ManagedParticleSystem(tParticleSystemFactory *, tEffectController *)",
    ),
    Ok(
        "ParticleManager::ManagedParticleSystem::~ManagedParticleSystem(void)",
    ),
    Ok(
        "ParticleManager::ManagedParticleSystem::Update(float)",
    ),
    Ok(
        "ParticleManager::ManagedParticleSystem::Reset(void)",
    ),
    Ok(
        "ParticleManager::ManagedParticleSystem::SetTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "ParticleManager::ManagedParticleSystem::LastFrameReached(void) const",
    ),
    Ok(
        "ParticleManager::CreateInstance(void)",
    ),
    Ok(
        "ParticleManager::GetInstance(void)",
    ),
    Ok(
        "ParticleManager::DestroyInstance(void)",
    ),
    Ok(
        "ParticleManager::DeactiveateAll(void)",
    ),
    Ok(
        "ParticleManager::ParticleManager(void)",
    ),
    Ok(
        "ParticleManager::~ParticleManager(void)",
    ),
    Ok(
        "ParticleManager::ClearSystems(void)",
    ),
    Ok(
        "ParticleManager::InitializeSystem(ParticleEnum::ParticleID, tParticleSystemFactory *, tEffectController *, int, bool)",
    ),
    Ok(
        "ParticleManager::DeleteSystem(ParticleEnum::ParticleID)",
    ),
    Ok(
        "ParticleManager::GetUniqueID(void) const",
    ),
    Ok(
        "ParticleManager::PlayCyclic(int, ParticleAttributes const &, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "ParticleManager::Add(ParticleAttributes const &, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "ParticleManager::Add(ParticleAttributes const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "ParticleManager::Update(unsigned int)",
    ),
    Ok(
        "ParticleManager::ManagedParticleSystem::SetActive(bool)",
    ),
    Ok(
        "ParticleManager::ReorientUpAxis(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "ParticleSystemDSG::ParticleSystemDSG(void)",
    ),
    Ok(
        "ParticleSystemDSG::~ParticleSystemDSG(void)",
    ),
    Ok(
        "ParticleSystemDSG::Init(tParticleSystemFactory *, tEffectController *)",
    ),
    Ok(
        "ParticleSystemDSG::SetBias(unsigned int, float)",
    ),
    Ok(
        "ParticleSystemDSG::GetNumLiveParticles(void) const",
    ),
    Ok(
        "ParticleSystemDSG::LastFrameReached(void) const",
    ),
    Ok(
        "ParticleSystemDSG::Display(void)",
    ),
    Ok(
        "ParticleSystemDSG::DisplayBoundingBox(pddiColour)",
    ),
    Ok(
        "ParticleSystemDSG::Update(float)",
    ),
    Ok(
        "ParticleSystemDSG::SetTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "ParticleSystemDSG::Reset(void)",
    ),
    Ok(
        "ParticleSystemDSG::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "ParticleSystemDSG::rPosition(void)",
    ),
    Ok(
        "ParticleSystemDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "ParticleSystemDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "ParticleSystemDSG::SetVelocity(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "VehicleParticleEmitter::PartEmitter::PartEmitter(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "VehicleParticleEmitter::PartEmitter::~PartEmitter(void)",
    ),
    Ok(
        "VehicleParticleEmitter::PartEmitter::AddParticleType(ParticleEnum::ParticleID)",
    ),
    Ok(
        "VehicleParticleEmitter::SetPartLocation(VehicleParticleEmitter::VehiclePartEnum, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "VehicleParticleEmitter::PartEmitter::SetLocation(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "VehicleParticleEmitter::PartEmitter::Generate(ParticleAttributes const &, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "VehicleParticleEmitter::VehicleParticleEmitter(void)",
    ),
    Ok(
        "VehicleParticleEmitter::~VehicleParticleEmitter(void)",
    ),
    Ok(
        "VehicleParticleEmitter::Generate(VehicleParticleEmitter::VehiclePartEnum, ParticleAttributes const &, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "void fill<_Bit_iterator, bool>(_Bit_iterator, _Bit_iterator, bool const &)",
    ),
    Ok(
        "_Bit_iterator fill_n<_Bit_iterator, unsigned int, bool>(_Bit_iterator, unsigned int, bool const &)",
    ),
    Ok(
        "Map<ParticleEnum::ParticleID, int>::Map(void)",
    ),
    Ok(
        "MapElement<ParticleEnum::ParticleID, int> * __uninitialized_copy_aux<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, __false_type)",
    ),
    Ok(
        "Map<ParticleEnum::ParticleID, int>::reserve(unsigned int)",
    ),
    Ok(
        "void __push_heap<MapElement<ParticleEnum::ParticleID, int> *, int, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, int, int, MapElement<ParticleEnum::ParticleID, int>)",
    ),
    Ok(
        "void __adjust_heap<MapElement<ParticleEnum::ParticleID, int> *, int, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, int, int, MapElement<ParticleEnum::ParticleID, int>)",
    ),
    Ok(
        "void __make_heap<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int>, int>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, int *)",
    ),
    Ok(
        "void sort_heap<MapElement<ParticleEnum::ParticleID, int> *>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *)",
    ),
    Ok(
        "void __partial_sort<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *)",
    ),
    Ok(
        "MapElement<ParticleEnum::ParticleID, int> * __unguarded_partition<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int>)",
    ),
    Ok(
        "void __introsort_loop<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int>, int>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, int)",
    ),
    Ok(
        "void __unguarded_linear_insert<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int>)",
    ),
    Ok(
        "void __insertion_sort<MapElement<ParticleEnum::ParticleID, int> *>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *)",
    ),
    Ok(
        "void __unguarded_insertion_sort_aux<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *)",
    ),
    Ok(
        "void __final_insertion_sort<MapElement<ParticleEnum::ParticleID, int> *>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *)",
    ),
    Ok(
        "Map<ParticleEnum::ParticleID, int>::RefreshIfDirty(void) const",
    ),
    Ok(
        "MapElement<ParticleEnum::ParticleID, int> * __lower_bound<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int>, int>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> const &, int *)",
    ),
    Ok(
        "Map<ParticleEnum::ParticleID, int>::find(ParticleEnum::ParticleID const &)",
    ),
    Ok(
        "Map<ParticleEnum::ParticleID, int>::end(void)",
    ),
    Ok(
        "vector<MapElement<ParticleEnum::ParticleID, int>, s2alloc<MapElement<ParticleEnum::ParticleID, int> > >::_M_insert_aux(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> const &)",
    ),
    Ok(
        "Map<ParticleEnum::ParticleID, int>::insert(ParticleEnum::ParticleID const &, int const &)",
    ),
    Ok(
        "ParticleSystemDSG type_info function",
    ),
    Ok(
        "tPtrDynamicArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info function",
    ),
    Ok(
        "tPtrArray<ParticleManager::ManagedParticleSystem *> type_info function",
    ),
    Ok(
        "tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> type_info function",
    ),
    Ok(
        "ParticleSystemDSG::pPosition(void)",
    ),
    Ok(
        "tPtrDynamicArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> >::~tPtrDynamicArray(void)",
    ),
    Ok(
        "_Bvector_alloc_base<s2alloc<bool>, false>::~_Bvector_alloc_base(void)",
    ),
    Ok(
        "tPtrArray<ParticleManager::ManagedParticleSystem *>::~tPtrArray(void)",
    ),
    Ok(
        "tPtrDynamicArray<ParticleManager::ManagedParticleSystem *>::~tPtrDynamicArray(void)",
    ),
    Ok(
        "Map<ParticleEnum::ParticleID, int>::~Map(void)",
    ),
    Ok(
        "tPtrArray<ParticleManager::ManagedParticleSystem *>::SetSize(int)",
    ),
    Ok(
        "tPtrArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> >::SetSize(int)",
    ),
    Ok(
        "tPtrArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info function",
    ),
    Ok(
        "tArray<ParticleManager::ManagedParticleSystem *> type_info function",
    ),
    Ok(
        "tPtrArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> >::~tPtrArray(void)",
    ),
    Ok(
        "tArray<ParticleManager::ManagedParticleSystem *>::~tArray(void)",
    ),
    Ok(
        "_Vector_alloc_base<MapElement<ParticleEnum::ParticleID, int>, s2alloc<MapElement<ParticleEnum::ParticleID, int> >, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "tArray<ParticleManager::ManagedParticleSystem *>::SetSize(int)",
    ),
    Ok(
        "tArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info function",
    ),
    Ok(
        "tArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> >::~tArray(void)",
    ),
    Ok(
        "tArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> >::SetSize(int)",
    ),
    Ok(
        "global constructors keyed to ParticleManager::spInstance",
    ),
    Ok(
        "AnimEntityDSGManager::CreateInstance(void)",
    ),
    Ok(
        "AnimEntityDSGManager::GetInstance(void)",
    ),
    Ok(
        "AnimEntityDSGManager::DestroyInstance(void)",
    ),
    Ok(
        "AnimEntityDSGManager::AnimEntityDSGManager(void)",
    ),
    Ok(
        "AnimEntityDSGManager::~AnimEntityDSGManager(void)",
    ),
    Ok(
        "AnimEntityDSGManager::Add(AnimCollisionEntityDSG *)",
    ),
    Ok(
        "AnimEntityDSGManager::Add(AnimEntityDSG *)",
    ),
    Ok(
        "AnimEntityDSGManager::Add(StatePropDSG *)",
    ),
    Ok(
        "AnimEntityDSGManager::Remove(AnimEntityDSG *)",
    ),
    Ok(
        "AnimEntityDSGManager::Remove(AnimCollisionEntityDSG *)",
    ),
    Ok(
        "AnimEntityDSGManager::Remove(StatePropDSG *)",
    ),
    Ok(
        "AnimEntityDSGManager::RemoveAll(void)",
    ),
    Ok(
        "AnimEntityDSGManager::Update(unsigned int)",
    ),
    Ok(
        "AnimEntityDSGManager::Add(tMultiController *)",
    ),
    Ok(
        "AnimEntityDSGManager::Remove(tMultiController *)",
    ),
    Ok(
        "AnimEntityDSGManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "AnimEntityDSGManager type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<AnimEntityDSG>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<AnimEntityDSG> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<AnimEntityDSG>::safe_cast(IRefCount *)",
    ),
    Ok(
        "RenderFlow::CreateInstance(void)",
    ),
    Ok(
        "RenderFlow::GetInstance(void)",
    ),
    Ok(
        "RenderFlow::DestroyInstance(void)",
    ),
    Ok(
        "RenderFlow::DoAllRegistration(void)",
    ),
    Ok(
        "RenderFlow::OnTimerDone(unsigned int, void *)",
    ),
    Ok(
        "RenderFlow::RenderFlow(void)",
    ),
    Ok(
        "RenderFlow::~RenderFlow(void)",
    ),
    Ok(
        "RenderFlow type_info function",
    ),
    Ok(
        "FrontEndRenderLayer::FrontEndRenderLayer(void)",
    ),
    Ok(
        "FrontEndRenderLayer::DrawCoinObject(void)",
    ),
    Ok(
        "FrontEndRenderLayer::Render(void)",
    ),
    Ok(
        "FrontEndRenderLayer::AddGuts(tDrawable *)",
    ),
    Ok(
        "FrontEndRenderLayer::AddGuts(tGeometry *)",
    ),
    Ok(
        "FrontEndRenderLayer::AddGuts(IntersectDSG *)",
    ),
    Ok(
        "FrontEndRenderLayer::AddGuts(StaticEntityDSG *)",
    ),
    Ok(
        "FrontEndRenderLayer::AddGuts(StaticPhysDSG *)",
    ),
    Ok(
        "FrontEndRenderLayer::AddGuts(Scrooby::App *)",
    ),
    Ok(
        "FrontEndRenderLayer::SetUpGuts(void)",
    ),
    Ok(
        "FrontEndRenderLayer::NullifyGuts(void)",
    ),
    Ok(
        "RenderLayer::RenderLayer(void)",
    ),
    Ok(
        "RenderLayer::Render(void)",
    ),
    Ok(
        "RenderLayer::Kill(void)",
    ),
    Ok(
        "RenderLayer::Resurrect(void)",
    ),
    Ok(
        "RenderLayer::FreezeCorpse(void)",
    ),
    Ok(
        "RenderLayer::Freeze(void)",
    ),
    Ok(
        "RenderLayer::Chill(void)",
    ),
    Ok(
        "RenderLayer::Warm(void)",
    ),
    Ok(
        "RenderLayer::Thaw(void)",
    ),
    Ok(
        "RenderLayer::AddGuts(tDrawable *)",
    ),
    Ok(
        "RenderLayer::RemoveGuts(tDrawable *)",
    ),
    Ok(
        "RenderLayer::AddGuts(tGeometry *)",
    ),
    Ok(
        "RenderLayer::AddGuts(IntersectDSG *)",
    ),
    Ok(
        "RenderLayer::AddGuts(StaticEntityDSG *)",
    ),
    Ok(
        "RenderLayer::AddGuts(StaticPhysDSG *)",
    ),
    Ok(
        "RenderLayer::AddGuts(Scrooby::App *)",
    ),
    Ok(
        "RenderLayer::AddGuts(SpatialTree *)",
    ),
    Ok(
        "RenderLayer::AddGuts(FenceEntityDSG *)",
    ),
    Ok(
        "RenderLayer::AddGuts(AnimCollisionEntityDSG *)",
    ),
    Ok(
        "RenderLayer::AddGuts(AnimEntityDSG *)",
    ),
    Ok(
        "RenderLayer::AddGuts(DynaPhysDSG *)",
    ),
    Ok(
        "RenderLayer::AddGuts(TriggerVolume *)",
    ),
    Ok(
        "RenderLayer::AddGuts(WorldSphereDSG *)",
    ),
    Ok(
        "RenderLayer::AddGuts(RoadSegment *)",
    ),
    Ok(
        "RenderLayer::AddGuts(PathSegment *)",
    ),
    Ok(
        "RenderLayer::RemoveGuts(IEntityDSG *)",
    ),
    Ok(
        "RenderLayer::RemoveGuts(tMultiController *)",
    ),
    Ok(
        "RenderLayer::pCam(unsigned int)",
    ),
    Ok(
        "RenderLayer::pView(unsigned int)",
    ),
    Ok(
        "RenderLayer::DoAllSetups(void)",
    ),
    Ok(
        "RenderLayer::SetUpViewCam(void)",
    ),
    Ok(
        "RenderLayer::NullifyViewCam(void)",
    ),
    Ok(
        "RenderLayer::SetUpGuts(void)",
    ),
    Ok(
        "RenderLayer::NullifyGuts(void)",
    ),
    Ok(
        "RenderLayer::DoPreStaticLoad(void)",
    ),
    Ok(
        "RenderLayer::DoPostStaticLoad(void)",
    ),
    Ok(
        "RenderLayer::DumpAllDynaLoads(unsigned int, SwapArray<tRefCounted *> &)",
    ),
    Ok(
        "RenderLayer::DumpDynaLoad(tName &, SwapArray<tRefCounted *> &)",
    ),
    Ok(
        "RenderLayer::DoPreDynaLoad(tName &)",
    ),
    Ok(
        "RenderLayer::DoPostDynaLoad(void)",
    ),
    Ok(
        "RenderLayer::IsDead(void)",
    ),
    Ok(
        "RenderLayer::IsFrozen(void)",
    ),
    Ok(
        "RenderLayer::IsRenderReady(void)",
    ),
    Ok(
        "RenderLayer::IsGutsSetup(void)",
    ),
    Ok(
        "RenderLayer::IsViewCamSetup(unsigned int)",
    ),
    Ok(
        "RenderLayer::OnRenderLayerInit(void)",
    ),
    Ok(
        "RenderManager::DumpAllLoadedData(void)",
    ),
    Ok(
        "RenderManager::SetLoadData(RenderEnums::LayerEnum, RenderEnums::LevelEnum, RenderEnums::MissionEnum)",
    ),
    Ok(
        "RenderManager::RedirectChunks(int)",
    ),
    Ok(
        "RenderManager::FlushDelList(void)",
    ),
    Ok(
        "RenderManager::MunchDelList(int)",
    ),
    Ok(
        "RenderManager::LoadAllNeededData(void)",
    ),
    Ok(
        "RenderManager::ContextUpdate(unsigned int)",
    ),
    Ok(
        "RenderManager::CreateInstance(void)",
    ),
    Ok(
        "RenderManager::GetInstance(void)",
    ),
    Ok(
        "RenderManager::DestroyInstance(void)",
    ),
    Ok(
        "RenderManager::pWorldScene(void)",
    ),
    Ok(
        "RenderManager::pWorldRenderLayer(void)",
    ),
    Ok(
        "RenderManager::OnChunkLoaded(tEntity *, int, unsigned int)",
    ),
    Ok(
        "RenderManager::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "RenderManager::DoPostLevelLoad(void)",
    ),
    Ok(
        "RenderManager::mpLayer(RenderEnums::LayerEnum)",
    ),
    Ok(
        "RenderManager::FreezeForPresentation(void)",
    ),
    Ok(
        "RenderManager::ThawFromPresentation(void)",
    ),
    Ok(
        "RenderManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "RenderManager::InitLayers(void)",
    ),
    Ok(
        "RenderManager::SetLevelLayerLights(tLightGroup *)",
    ),
    Ok(
        "RenderManager::ClearLevelLayerLights(void)",
    ),
    Ok(
        "RenderManager::RenderManager(void)",
    ),
    Ok(
        "RenderManager::~RenderManager(void)",
    ),
    Ok(
        "RenderManager::MoodLighting::MoodLighting(void)",
    ),
    Ok(
        "RenderManager::MoodLighting::~MoodLighting(void)",
    ),
    Ok(
        "RenderManager::MoodLighting::CalculateModulus(void)",
    ),
    Ok(
        "RenderManager::SetLightMod(pddiColour const &)",
    ),
    Ok(
        "RenderManager::TransitionMoodLighting(unsigned int)",
    ),
    Ok(
        "RenderManager::ResetMoodLighting(bool)",
    ),
    Ok(
        "RenderManager::ApplyPS2Blur(void)",
    ),
    Ok(
        "WorldRenderLayer::WorldRenderLayer(void)",
    ),
    Ok(
        "WorldRenderLayer::Render(void)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(IntersectDSG *)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(StaticEntityDSG *)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(StaticPhysDSG *)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(FenceEntityDSG *)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(AnimCollisionEntityDSG *)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(AnimEntityDSG *)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(DynaPhysDSG *)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(TriggerVolume *)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(RoadSegment *)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(PathSegment *)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(WorldSphereDSG *)",
    ),
    Ok(
        "WorldRenderLayer::GetCurSectionName(void)",
    ),
    Ok(
        "WorldRenderLayer::RemoveGuts(IEntityDSG *)",
    ),
    Ok(
        "WorldRenderLayer::AddGuts(SpatialTree *)",
    ),
    Ok(
        "WorldRenderLayer::ActivateWS(tUidUnaligned)",
    ),
    Ok(
        "WorldRenderLayer::DeactivateWS(tUidUnaligned)",
    ),
    Ok(
        "WorldRenderLayer::NullifyGuts(void)",
    ),
    Ok(
        "WorldRenderLayer::SetUpGuts(void)",
    ),
    Ok(
        "WorldRenderLayer::DoPreStaticLoad(void)",
    ),
    Ok(
        "WorldRenderLayer::DoPostStaticLoad(void)",
    ),
    Ok(
        "WorldRenderLayer::DumpAllDynaLoads(unsigned int, SwapArray<tRefCounted *> &)",
    ),
    Ok(
        "WorldRenderLayer::DumpDynaLoad(tName &, SwapArray<tRefCounted *> &)",
    ),
    Ok(
        "WorldRenderLayer::DoPreDynaLoad(tName &)",
    ),
    Ok(
        "WorldRenderLayer::DoPostDynaLoad(void)",
    ),
    Ok(
        "WorldRenderLayer::pWorldScene(void)",
    ),
    Ok(
        "WorldRenderLayer::IsGutsSetup(void)",
    ),
    Ok(
        "WorldRenderLayer::OnWorldRenderLayerInit(void)",
    ),
    Ok(
        "WorldRenderLayer::DumpAllDynaLoads(void)",
    ),
    Ok(
        "WorldRenderLayer::DumpDynaLoad(tName &)",
    ),
    Ok(
        "RenderLayer type_info function",
    ),
    Ok(
        "FrontEndRenderLayer type_info function",
    ),
    Ok(
        "RenderManager type_info function",
    ),
    Ok(
        "WorldRenderLayer type_info function",
    ),
    Ok(
        "ChunkListenerCallback::ChunkListenerCallback(void)",
    ),
    Ok(
        "InteriorLoadedEventData::~InteriorLoadedEventData(void)",
    ),
    Ok(
        "InteriorLoadedEventData::InteriorLoadedEventData(void)",
    ),
    Ok(
        "ChunkListenerCallback type_info function",
    ),
    Ok(
        "global constructors keyed to FrontEndRenderLayer::FrontEndRenderLayer(void)",
    ),
    Ok(
        "CubicBezier::InitOnceLUTs(void)",
    ),
    Ok(
        "CubicBezier::CubicBezier(void)",
    ),
    Ok(
        "CubicBezier::~CubicBezier(void)",
    ),
    Ok(
        "CubicBezier::GetCubicBezierCurve(RadicalMathLibrary::Vector *&, int &)",
    ),
    Ok(
        "CubicBezier::SetControlPoint(RadicalMathLibrary::Vector const &, int)",
    ),
    Ok(
        "CubicBezier::AddControlPoint(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "CubicBezier::CreateCubicBezierCurve(void)",
    ),
    Ok(
        "DListArray::DListArray(void)",
    ),
    Ok(
        "DListArray::Clear(void)",
    ),
    Ok(
        "DListArray::AddLast(void *)",
    ),
    Ok(
        "DListArray::Remove(int)",
    ),
    Ok(
        "IntersectLineSphere(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Sphere const &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "WillCollide(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, RadicalMathLibrary::Vector const &, bool &)",
    ),
    Ok(
        "UpdateVUP(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "PointsOnSameSideOfLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "Get90DegreeRightTurn(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "GetRotationAboutY(float, float)",
    ),
    Ok(
        "FindClosestPointOnLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "GetLineSegmentT(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "Intersection::Intersection(void)",
    ),
    Ok(
        "Intersection::~Intersection(void)",
    ),
    Ok(
        "Intersection::Update(unsigned int)",
    ),
    Ok(
        "Intersection::AdvanceTraffic(unsigned int, unsigned int) const",
    ),
    Ok(
        "Intersection::AdvanceNextWaitingRoad(void)",
    ),
    Ok(
        "Intersection::AddRoadIn(Road *)",
    ),
    Ok(
        "Intersection::AddRoadOut(Road *)",
    ),
    Ok(
        "Intersection::FindRoadIn(Road const *) const",
    ),
    Ok(
        "Intersection::GetLocation(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "Intersection::PopulateShortestRoads(SwapArray<RoadManager::ShortestRoad> &, bool)",
    ),
    Ok(
        "Intersection::SortRoads(void)",
    ),
    Ok(
        "Intersection::GetType(void) const",
    ),
    Ok(
        "Intersection::SetType(Intersection::Type)",
    ),
    Ok(
        "Intersection::IsPointInIntersection(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "Intersection::FindGoodTrafficLane(Road const &, unsigned int, Lane *&, unsigned int &)",
    ),
    Ok(
        "Intersection::GetLeftTurnForTraffic(Road const &, unsigned int, Road *&, Lane *&, unsigned int &)",
    ),
    Ok(
        "Intersection::GetStraightForTraffic(Road const &, unsigned int, Road *&, Lane *&, unsigned int &)",
    ),
    Ok(
        "Intersection::GetRightTurnForTraffic(Road const &, unsigned int, Road *&, Lane *&, unsigned int &)",
    ),
    Ok(
        "Intersection::GetOtherIntersection(bool, Intersection *, Intersection *&, RoadManager::ShortestRoad *&)",
    ),
    Ok(
        "Lane::Lane(void)",
    ),
    Ok(
        "Lane::~Lane(void)",
    ),
    Ok(
        "Lane::Create(int, Road *)",
    ),
    Ok(
        "Lane::NotifyWaitingTraffic(unsigned int)",
    ),
    Ok(
        "Road::Road(void)",
    ),
    Ok(
        "Road::~Road(void)",
    ),
    Ok(
        "Road::AllocateSegments(unsigned int)",
    ),
    Ok(
        "Road::AddRoadSegment(RoadSegment *)",
    ),
    Ok(
        "Road::CreateLanes(void)",
    ),
    Ok(
        "Road::GetLane(unsigned int) const",
    ),
    Ok(
        "Road::GetRoadSegment(unsigned int) const",
    ),
    Ok(
        "Road::GetRoadSegmentAtPoint(RadicalMathLibrary::Vector const &, RoadSegment **, float &, float &, int) const",
    ),
    Ok(
        "Road::IsPointInRoadSegment(int, RadicalMathLibrary::Vector const &, float &, float &) const",
    ),
    Ok(
        "Road::SetDensity(unsigned int)",
    ),
    Ok(
        "Road::FindRoadSegmentAtDist(float, RoadSegment **)",
    ),
    Ok(
        "RoadManager::GetInstance(void)",
    ),
    Ok(
        "RoadManager::Destroy(void)",
    ),
    Ok(
        "RoadManager::RoadManager(void)",
    ),
    Ok(
        "RoadManager::~RoadManager(void)",
    ),
    Ok(
        "RoadManager::Init(bool)",
    ),
    Ok(
        "RoadManager::InitializeRoadMemory(unsigned int)",
    ),
    Ok(
        "RoadManager::InitializeIntersectionMemory(unsigned int)",
    ),
    Ok(
        "RoadManager::InitializeRoadSegmentDataMemory(unsigned int)",
    ),
    Ok(
        "RoadManager::DumpRoadSegmentDataMemory(void)",
    ),
    Ok(
        "RoadManager::InitializeRoadSegmentMemory(unsigned int)",
    ),
    Ok(
        "RoadManager::GetFreeRoadMemory(void)",
    ),
    Ok(
        "RoadManager::GetFreeIntersectionMemory(void)",
    ),
    Ok(
        "RoadManager::GetFreeRoadSegmentDataMemory(void)",
    ),
    Ok(
        "RoadManager::GetFreeRoadSegmentMemory(void)",
    ),
    Ok(
        "RoadManager::GetMaxPathElements(void)",
    ),
    Ok(
        "RoadManager::FindClosestPointOnRoad(Road const *, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, float &, int &)",
    ),
    Ok(
        "RoadManager::DetermineRoadT(RoadSegment *, float)",
    ),
    Ok(
        "RoadManager::DetermineSegmentT(RadicalMathLibrary::Vector const &, RoadSegment *)",
    ),
    Ok(
        "RoadManager::CreateRoadNetwork(void)",
    ),
    Ok(
        "RoadManager::PopulateConnectivityData(bool, Intersection *, int)",
    ),
    Ok(
        "RoadManager::VisitAll(SwapArray<RoadManager::DijkstraNode> &)",
    ),
    Ok(
        "RoadManager::FindPathElementsBetween(bool, RoadManager::PathElement &, float, RadicalMathLibrary::Vector const &, RoadManager::PathElement &, float, RadicalMathLibrary::Vector const &, SwapArray<RoadManager::PathElement> &)",
    ),
    Ok(
        "RoadManager::GetTraversalDistance(RoadManager::ShortestRoad *, RoadManager::ShortestRoad *)",
    ),
    Ok(
        "RoadManager::FindDistToTargetInOneDirection(bool, Intersection *, Intersection *, Intersection *, RoadManager::ShortestRoad *, SwapArray<RoadManager::PathElement> &, RoadManager::ShortestRoad *&, RoadManager::ShortestRoad *&, RoadManager::ErrorValue &)",
    ),
    Ok(
        "RoadManager::TraverseRoads(bool, Intersection *, Intersection *, Intersection *, SwapArray<RoadManager::PathElement> &, RoadManager::ErrorValue &)",
    ),
    Ok(
        "RoadManager::FindIntersection(char const *)",
    ),
    Ok(
        "RoadManager::FindIntersection(tUidUnaligned)",
    ),
    Ok(
        "RoadManager::FindIntersection(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "RoadManager::FindIntersection(int)",
    ),
    Ok(
        "RoadManager::FindRoad(RadicalMathLibrary::Vector const &, Road const **, RoadSegment **, int &, float &, float &, bool) const",
    ),
    Ok(
        "RoadManager::FindRoadSegmentData(char const *)",
    ),
    Ok(
        "RoadManager::FindRoadSegmentData(tUidUnaligned)",
    ),
    Ok(
        "RoadManager::AddRoad(Road *)",
    ),
    Ok(
        "RoadManager::AddIntersection(Intersection *)",
    ),
    Ok(
        "RoadManager::AddRoadSegmentData(RoadSegmentData *)",
    ),
    Ok(
        "RoadManager::AddRoadSegment(RoadSegment *)",
    ),
    Ok(
        "RoadSegment::RoadSegment(void)",
    ),
    Ok(
        "RoadSegment::~RoadSegment(void)",
    ),
    Ok(
        "RoadSegment::Init(RoadSegmentData *, RadicalMathLibrary::Matrix &, float)",
    ),
    Ok(
        "RoadSegment::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "RoadSegment::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "RoadSegment::CalculateUnitDistIntoRoadSegment(float, float)",
    ),
    Ok(
        "RoadSegment::CalculateUnitHeightInRoadSegment(float, float)",
    ),
    Ok(
        "RoadSegment::GetPosition(float, float, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "RoadSegment::GetLaneLocation(float, int, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "RoadSegment::GetCorner(int, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "RoadSegment::GetEdgeNormal(int, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "RoadSegment::GetSegmentNormal(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "RoadSegment::GetNumLanes(void)",
    ),
    Ok(
        "RoadSegment::GetLaneLength(unsigned int)",
    ),
    Ok(
        "RoadSegment::GetRoadWidth(void)",
    ),
    Ok(
        "RoadSegmentData::RoadSegmentData(void)",
    ),
    Ok(
        "RoadSegmentData::~RoadSegmentData(void)",
    ),
    Ok(
        "RoadSegmentData::SetData(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, unsigned int)",
    ),
    Ok(
        "RoadSegmentData::GetCorner(int) const",
    ),
    Ok(
        "RoadSegmentData::GetEdgeNormal(int) const",
    ),
    Ok(
        "RoadSegmentData::GetSegmentNormal(void) const",
    ),
    Ok(
        "RoadSegmentData::GetNumLanes(void) const",
    ),
    Ok(
        "TrafficLight::Update(unsigned int)",
    ),
    Ok(
        "TrafficLight::SwitchControl(void)",
    ),
    Ok(
        "NWayStop::Update(unsigned int)",
    ),
    Ok(
        "CourtesyStop::Update(unsigned int)",
    ),
    Ok(
        "TrafficControl type_info function",
    ),
    Ok(
        "TrafficLight type_info function",
    ),
    Ok(
        "NWayStop type_info function",
    ),
    Ok(
        "CourtesyStop::~CourtesyStop(void)",
    ),
    Ok(
        "CourtesyStop type_info function",
    ),
    Ok(
        "Lane type_info function",
    ),
    Ok(
        "RoadManager type_info function",
    ),
    Ok(
        "RoadSegment type_info function",
    ),
    Ok(
        "TrafficControl::~TrafficControl(void)",
    ),
    Ok(
        "TrafficLight::~TrafficLight(void)",
    ),
    Ok(
        "NWayStop::~NWayStop(void)",
    ),
    Ok(
        "ILaneInformation::ILaneInformation(void)",
    ),
    Ok(
        "ILaneControl::ILaneControl(void)",
    ),
    Ok(
        "Lane::SetSpeedLimit(float)",
    ),
    Ok(
        "Lane::GetRoad(void) const",
    ),
    Ok(
        "Lane::GetSpeedLimit(void) const",
    ),
    Ok(
        "Lane::SetDensity(int)",
    ),
    Ok(
        "Lane::GetDensity(void) const",
    ),
    Ok(
        "RoadManager::BigIntersection::~BigIntersection(void)",
    ),
    Ok(
        "RoadManager::BigIntersection::BigIntersection(void)",
    ),
    Ok(
        "RoadSegment::Display(void)",
    ),
    Ok(
        "RoadSegment::pPosition(void)",
    ),
    Ok(
        "RoadSegment::rPosition(void)",
    ),
    Ok(
        "RoadSegment::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "ILaneInformation type_info function",
    ),
    Ok(
        "ILaneControl type_info function",
    ),
    Ok(
        "Listener::Listener(void)",
    ),
    Ok(
        "Listener::~Listener(void)",
    ),
    Ok(
        "Listener::Initialize(Sound::daSoundRenderingManager &)",
    ),
    Ok(
        "Listener::Update(ContextEnum)",
    ),
    Ok(
        "SimpsonsSoundPlayer::SimpsonsSoundPlayer(void)",
    ),
    Ok(
        "SimpsonsSoundPlayer::~SimpsonsSoundPlayer(void)",
    ),
    Ok(
        "SimpsonsSoundPlayer::PlaySound(char const *, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "SimpsonsSoundPlayer::PlayResource(IDaSoundResource *, unsigned int, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "SimpsonsSoundPlayer::PlaySound(unsigned int, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "SimpsonsSoundPlayer::QueueSound(unsigned int, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "SimpsonsSoundPlayer::QueueSound(IDaSoundResource *, unsigned int, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "SimpsonsSoundPlayer::PlayQueuedSound(SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "SimpsonsSoundPlayer::OnPlaybackComplete(void)",
    ),
    Ok(
        "SimpsonsSoundPlayer::Stop(void)",
    ),
    Ok(
        "SimpsonsSoundPlayer::Pause(void)",
    ),
    Ok(
        "SimpsonsSoundPlayer::Continue(void)",
    ),
    Ok(
        "SimpsonsSoundPlayer::IsPaused(void)",
    ),
    Ok(
        "SimpsonsSoundPlayer::SetPitch(float)",
    ),
    Ok(
        "SimpsonsSoundPlayer::SetTrim(float)",
    ),
    Ok(
        "SimpsonsSoundPlayer::dumpSoundPlayer(void)",
    ),
    Ok(
        "SoundCluster::SoundCluster(int, IRadNameSpace *)",
    ),
    Ok(
        "SoundCluster::~SoundCluster(void)",
    ),
    Ok(
        "SoundCluster::LoadSounds(SoundFileHandler *)",
    ),
    Ok(
        "SoundCluster::UnloadSounds(void)",
    ),
    Ok(
        "SoundCluster::AddResource(unsigned int)",
    ),
    Ok(
        "SoundCluster::OnDynaLoadOperationsComplete(void *)",
    ),
    Ok(
        "SoundLoader::SoundLoader(void)",
    ),
    Ok(
        "SoundLoader::~SoundLoader(void)",
    ),
    Ok(
        "SoundLoader::LevelLoad(RenderEnums::LevelEnum)",
    ),
    Ok(
        "SoundLoader::LevelUnload(bool)",
    ),
    Ok(
        "SoundLoader::LoadCarSound(Vehicle *, bool)",
    ),
    Ok(
        "SoundLoader::LoadClusterByName(char const *, SoundFileHandler *)",
    ),
    Ok(
        "SoundLoader::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "SoundLoader::queueLoad(SoundClusterName)",
    ),
    Ok(
        "SoundLoader::clusterLoad(SoundClusterName, SoundFileHandler *)",
    ),
    Ok(
        "SoundLoader::clusterUnload(SoundClusterName)",
    ),
    Ok(
        "SoundManager::CreateInstance(bool, bool, bool, bool)",
    ),
    Ok(
        "SoundManager::GetInstance(void)",
    ),
    Ok(
        "SoundManager::DestroyInstance(void)",
    ),
    Ok(
        "SoundManager::Update(void)",
    ),
    Ok(
        "SoundManager::UpdateOncePerFrame(unsigned int, ContextEnum, bool)",
    ),
    Ok(
        "SoundManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "SoundManager::OnBootupStart(void)",
    ),
    Ok(
        "SoundManager::OnBootupComplete(void)",
    ),
    Ok(
        "SoundManager::QueueLevelSoundLoads(void)",
    ),
    Ok(
        "SoundManager::ResetDucking(void)",
    ),
    Ok(
        "SoundManager::OnFrontEndStart(void)",
    ),
    Ok(
        "SoundManager::OnFrontEndEnd(void)",
    ),
    Ok(
        "SoundManager::OnGameplayStart(void)",
    ),
    Ok(
        "SoundManager::OnGameplayEnd(bool)",
    ),
    Ok(
        "SoundManager::OnPauseStart(void)",
    ),
    Ok(
        "SoundManager::OnPauseEnd(void)",
    ),
    Ok(
        "SoundManager::OnStoreScreenStart(bool)",
    ),
    Ok(
        "SoundManager::OnStoreScreenEnd(void)",
    ),
    Ok(
        "SoundManager::DuckEverythingButMusicBegin(bool)",
    ),
    Ok(
        "SoundManager::DuckEverythingButMusicEnd(bool)",
    ),
    Ok(
        "SoundManager::OnMissionBriefingStart(void)",
    ),
    Ok(
        "SoundManager::OnMissionBriefingEnd(void)",
    ),
    Ok(
        "SoundManager::DuckForInGameCredits(void)",
    ),
    Ok(
        "SoundManager::LoadSoundFile(char const *, SoundFileHandler *)",
    ),
    Ok(
        "SoundManager::LoadCarSound(Vehicle *, bool)",
    ),
    Ok(
        "SoundManager::SetMasterVolume(float)",
    ),
    Ok(
        "SoundManager::GetSfxVolume(void)",
    ),
    Ok(
        "SoundManager::SetSfxVolume(float)",
    ),
    Ok(
        "SoundManager::GetCarVolume(void)",
    ),
    Ok(
        "SoundManager::SetCarVolume(float)",
    ),
    Ok(
        "SoundManager::GetMusicVolume(void)",
    ),
    Ok(
        "SoundManager::SetMusicVolume(float)",
    ),
    Ok(
        "SoundManager::SetMusicVolumeWithoutTuner(float)",
    ),
    Ok(
        "SoundManager::SetAmbienceVolume(float)",
    ),
    Ok(
        "SoundManager::SetAmbienceVolumeWithoutTuner(float)",
    ),
    Ok(
        "SoundManager::GetCalculatedAmbienceVolume(void)",
    ),
    Ok(
        "SoundManager::GetDialogueVolume(void)",
    ),
    Ok(
        "SoundManager::SetDialogueVolume(float)",
    ),
    Ok(
        "SoundManager::PlayCarOptionMenuStinger(void)",
    ),
    Ok(
        "SoundManager::PlayDialogueOptionMenuStinger(void)",
    ),
    Ok(
        "SoundManager::PlayMusicOptionMenuStinger(void)",
    ),
    Ok(
        "SoundManager::PlaySfxOptionMenuStinger(void)",
    ),
    Ok(
        "SoundManager::LoadNISSound(unsigned int, NISSoundLoadedCallback *)",
    ),
    Ok(
        "SoundManager::PlayNISSound(unsigned int, RadicalMathLibrary::Box3D *, NISSoundPlaybackCompleteCallback *)",
    ),
    Ok(
        "SoundManager::StopAndDumpNISSound(unsigned int)",
    ),
    Ok(
        "SoundManager::StopForMovie(void)",
    ),
    Ok(
        "SoundManager::ResumeAfterMovie(void)",
    ),
    Ok(
        "SoundManager::IsStoppedForMovie(void)",
    ),
    Ok(
        "SoundManager::MuteNISPlayers(void)",
    ),
    Ok(
        "SoundManager::UnmuteNISPlayers(void)",
    ),
    Ok(
        "SoundManager::RestartSupersprintMusic(void)",
    ),
    Ok(
        "SoundManager::GetBeatValue(void)",
    ),
    Ok(
        "SoundManager::IsFoodCharacter(Character *)",
    ),
    Ok(
        "SoundManager::SetDialogueLanguage(Scrooby::XLLanguage)",
    ),
    Ok(
        "SoundManager::LoadData(unsigned char const *, unsigned int)",
    ),
    Ok(
        "SoundManager::SaveData(unsigned char *, unsigned int)",
    ),
    Ok(
        "SoundManager::ResetData(void)",
    ),
    Ok(
        "SoundManager::SetSoundMode(SoundMode)",
    ),
    Ok(
        "SoundManager::GetSoundMode(void)",
    ),
    Ok(
        "SoundManager::SoundManager(bool, bool, bool, bool)",
    ),
    Ok(
        "SoundManager::~SoundManager(void)",
    ),
    Ok(
        "SoundManager::initialize(void)",
    ),
    Ok(
        "SoundManager::prepareStartupSounds(void)",
    ),
    Ok(
        "SoundManager::dumpStartupSounds(void)",
    ),
    Ok(
        "SoundManager::playStartupAcceptSound(void)",
    ),
    Ok(
        "SoundManager::playStartupScrollSound(void)",
    ),
    Ok(
        "SoundRenderingPlayerCallback::SoundRenderingPlayerCallback(SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "SoundRenderingPlayerCallback::~SoundRenderingPlayerCallback(void)",
    ),
    Ok(
        "SoundRenderingPlayerCallback::CancelGameCallbackAndRelease(void)",
    ),
    Ok(
        "SoundRenderingPlayerCallback::OnSoundReady(void *)",
    ),
    Ok(
        "SoundRenderingPlayerCallback::OnSoundDone(void *)",
    ),
    Ok(
        "PositionCarrier::PositionCarrier(void)",
    ),
    Ok(
        "PositionCarrier::~PositionCarrier(void)",
    ),
    Ok(
        "PositionalSoundPlayer::PositionalSoundPlayer(void)",
    ),
    Ok(
        "PositionalSoundPlayer::~PositionalSoundPlayer(void)",
    ),
    Ok(
        "PositionalSoundPlayer::PlayResource(IDaSoundResource *, unsigned int, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "PositionalSoundPlayer::PlayQueuedSound(radSoundVector &, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "PositionalSoundPlayer::ServiceOncePerFrame(void)",
    ),
    Ok(
        "PositionalSoundPlayer::SetPositionCarrier(PositionCarrier &)",
    ),
    Ok(
        "PositionalSoundPlayer::SetParameters(positionalSoundSettings *)",
    ),
    Ok(
        "PositionalSoundPlayer::SetPosition(float, float, float)",
    ),
    Ok(
        "PositionalSoundPlayer::dumpSoundPlayer(void)",
    ),
    Ok(
        "Listener type_info function",
    ),
    Ok(
        "SimpsonsSoundPlayer type_info function",
    ),
    Ok(
        "SoundCluster type_info function",
    ),
    Ok(
        "SoundLoader type_info function",
    ),
    Ok(
        "PositionCarrier type_info function",
    ),
    Ok(
        "PositionalSoundPlayer type_info function",
    ),
    Ok(
        "SoundManager type_info function",
    ),
    Ok(
        "SoundRenderingPlayerCallback type_info function",
    ),
    Ok(
        "radLinkedClass<SoundRenderingPlayerCallback> type_info function",
    ),
    Ok(
        "Sound::IDaSoundPlayerState::IDaSoundPlayerState(void)",
    ),
    Ok(
        "Sound::IDaSoundDynaLoadCompletionCallback::IDaSoundDynaLoadCompletionCallback(void)",
    ),
    Ok(
        "SoundCluster::AddRef(void)",
    ),
    Ok(
        "SoundCluster::Release(void)",
    ),
    Ok(
        "SoundRenderingPlayerCallback::AddRef(void)",
    ),
    Ok(
        "SoundRenderingPlayerCallback::Release(void)",
    ),
    Ok(
        "Sound::IDaSoundPlayerState type_info function",
    ),
    Ok(
        "Sound::IDaSoundDynaLoadCompletionCallback type_info function",
    ),
    Ok(
        "AvatarSoundPlayer::AvatarSoundPlayer(void)",
    ),
    Ok(
        "AvatarSoundPlayer::~AvatarSoundPlayer(void)",
    ),
    Ok(
        "AvatarSoundPlayer::Initialize(void)",
    ),
    Ok(
        "AvatarSoundPlayer::UpdateOncePerFrame(unsigned int)",
    ),
    Ok(
        "AvatarSoundPlayer::OnBeginGameplay(void)",
    ),
    Ok(
        "AvatarSoundPlayer::OnEndGameplay(void)",
    ),
    Ok(
        "carSoundParameters::carSoundParameters(void)",
    ),
    Ok(
        "carSoundParameters::~carSoundParameters(void)",
    ),
    Ok(
        "carSoundParameters::SetWatcherName(char const *)",
    ),
    Ok(
        "carSoundParameters::SetShiftPoint(unsigned int, float)",
    ),
    Ok(
        "carSoundParameters::GetShiftPoint(int)",
    ),
    Ok(
        "carSoundParameters::SetAttackTimeMsecs(float)",
    ),
    Ok(
        "carSoundParameters::SetDelayTimeMsecs(unsigned int)",
    ),
    Ok(
        "carSoundParameters::SetDecayTimeMsecs(float)",
    ),
    Ok(
        "carSoundParameters::SetDecayFinishTrim(float)",
    ),
    Ok(
        "carSoundParameters::SetDownshiftDamperSize(float)",
    ),
    Ok(
        "carSoundParameters::SetEngineClipName(char const *)",
    ),
    Ok(
        "carSoundParameters::SetEngineIdleClipName(char const *)",
    ),
    Ok(
        "carSoundParameters::SetDamagedEngineClipName(char const *)",
    ),
    Ok(
        "carSoundParameters::SetHornClipName(char const *)",
    ),
    Ok(
        "carSoundParameters::SetCarDoorOpenClipName(char const *)",
    ),
    Ok(
        "carSoundParameters::SetCarDoorCloseClipName(char const *)",
    ),
    Ok(
        "carSoundParameters::SetOverlayClipName(char const *)",
    ),
    Ok(
        "carSoundParameters::SetRoadSkidClipName(char const *)",
    ),
    Ok(
        "carSoundParameters::SetDirtSkidClipName(char const *)",
    ),
    Ok(
        "carSoundParameters::SetBackupClipName(char const *)",
    ),
    Ok(
        "carSoundParameters::SetGearPitchRange(unsigned int, float, float)",
    ),
    Ok(
        "carSoundParameters::SetNumberOfGears(unsigned int)",
    ),
    Ok(
        "carSoundParameters::SetReversePitchCapKmh(float)",
    ),
    Ok(
        "carSoundParameters::SetReversePitchRange(float, float)",
    ),
    Ok(
        "carSoundParameters::SetGearShiftPitchDrop(unsigned int, float)",
    ),
    Ok(
        "carSoundParameters::GetGearShiftPitchDrop(unsigned int)",
    ),
    Ok(
        "carSoundParameters::SetDamageStartPcnt(float)",
    ),
    Ok(
        "carSoundParameters::SetDamageMaxVolPcnt(float)",
    ),
    Ok(
        "carSoundParameters::SetDamageStartTrim(float)",
    ),
    Ok(
        "carSoundParameters::SetDamageMaxTrim(float)",
    ),
    Ok(
        "carSoundParameters::SetIdleEnginePitch(float)",
    ),
    Ok(
        "carSoundParameters::SetInAirThrottlePitch(float)",
    ),
    Ok(
        "carSoundParameters::GetInAirThrottlePitch(void)",
    ),
    Ok(
        "carSoundParameters::SetInAirIdlePitch(float)",
    ),
    Ok(
        "carSoundParameters::GetInAirIdlePitch(void)",
    ),
    Ok(
        "carSoundParameters::SetInAirThrottleResponseTimeMsecs(unsigned int)",
    ),
    Ok(
        "carSoundParameters::SetBurnoutMinPitch(float)",
    ),
    Ok(
        "carSoundParameters::SetBurnoutMaxPitch(float)",
    ),
    Ok(
        "carSoundParameters::SetPowerslideMinPitch(float)",
    ),
    Ok(
        "carSoundParameters::GetPowerslideMinPitch(void)",
    ),
    Ok(
        "carSoundParameters::SetPowerslideMaxPitch(float)",
    ),
    Ok(
        "carSoundParameters::GetPowerslideMaxPitch(void)",
    ),
    Ok(
        "carSoundParameters::CalculateEnginePitch(int, float, float)",
    ),
    Ok(
        "carSoundParameters::CalculateCurrentGear(float, float, float, int)",
    ),
    Ok(
        "carSoundParameters::GetRevLimit(void)",
    ),
    Ok(
        "CarSoundParameterObjCreate(ICarSoundParameters **, int)",
    ),
    Ok(
        "SoundAvatar::SoundAvatar(Avatar *)",
    ),
    Ok(
        "SoundAvatar::~SoundAvatar(void)",
    ),
    Ok(
        "SoundAvatar::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "SoundAvatar::UpdateOncePerFrame(unsigned int)",
    ),
    Ok(
        "SoundAvatar::syncCarSoundState(void)",
    ),
    Ok(
        "EngineState::EngineState(void)",
    ),
    Ok(
        "EngineState::~EngineState(void)",
    ),
    Ok(
        "EngineState::Initialize(Vehicle *, carSoundParameters *, SimpsonsSoundPlayer *, unsigned int, VehicleSoundDebugPage *)",
    ),
    Ok(
        "EngineState::SetActive(bool, float)",
    ),
    Ok(
        "EngineState::SetDebugInfo(void)",
    ),
    Ok(
        "EngineState::isAtIdleSpeed(void)",
    ),
    Ok(
        "EngineState::isSkidding(void)",
    ),
    Ok(
        "EngineState::GetCurrentPitch(void)",
    ),
    Ok(
        "EngineState::IsFading(void)",
    ),
    Ok(
        "EngineState::StartFade(float, bool)",
    ),
    Ok(
        "EngineState::ServiceFade(unsigned int)",
    ),
    Ok(
        "EngineState::SetTrim(float)",
    ),
    Ok(
        "NormalEngineState::NormalEngineState(void)",
    ),
    Ok(
        "NormalEngineState::~NormalEngineState(void)",
    ),
    Ok(
        "NormalEngineState::Service(unsigned int)",
    ),
    Ok(
        "NormalEngineState::SetDebugInfo(void)",
    ),
    Ok(
        "NormalEngineState::GetCurrentPitch(void)",
    ),
    Ok(
        "NormalEngineState::startup(float)",
    ),
    Ok(
        "NormalEngineState::updateCurrentGearFromVehicle(bool)",
    ),
    Ok(
        "UpshiftEngineState::UpshiftEngineState(void)",
    ),
    Ok(
        "UpshiftEngineState::~UpshiftEngineState(void)",
    ),
    Ok(
        "UpshiftEngineState::Service(unsigned int)",
    ),
    Ok(
        "UpshiftEngineState::SetDebugInfo(void)",
    ),
    Ok(
        "UpshiftEngineState::startup(float)",
    ),
    Ok(
        "DownshiftEngineState::DownshiftEngineState(void)",
    ),
    Ok(
        "DownshiftEngineState::~DownshiftEngineState(void)",
    ),
    Ok(
        "DownshiftEngineState::Service(unsigned int)",
    ),
    Ok(
        "DownshiftEngineState::SetDebugInfo(void)",
    ),
    Ok(
        "DownshiftEngineState::GetCurrentPitch(void)",
    ),
    Ok(
        "DownshiftEngineState::startup(float)",
    ),
    Ok(
        "InAirEngineState::InAirEngineState(void)",
    ),
    Ok(
        "InAirEngineState::~InAirEngineState(void)",
    ),
    Ok(
        "InAirEngineState::Service(unsigned int)",
    ),
    Ok(
        "InAirEngineState::SetDebugInfo(void)",
    ),
    Ok(
        "InAirEngineState::startup(float)",
    ),
    Ok(
        "ReverseEngineState::ReverseEngineState(SimpsonsSoundPlayer *)",
    ),
    Ok(
        "ReverseEngineState::~ReverseEngineState(void)",
    ),
    Ok(
        "ReverseEngineState::Service(unsigned int)",
    ),
    Ok(
        "ReverseEngineState::SetDebugInfo(void)",
    ),
    Ok(
        "ReverseEngineState::startup(float)",
    ),
    Ok(
        "IdleEngineState::IdleEngineState(void)",
    ),
    Ok(
        "IdleEngineState::~IdleEngineState(void)",
    ),
    Ok(
        "IdleEngineState::Service(unsigned int)",
    ),
    Ok(
        "IdleEngineState::SetDebugInfo(void)",
    ),
    Ok(
        "IdleEngineState::GetCurrentPitch(void)",
    ),
    Ok(
        "IdleEngineState::startup(float)",
    ),
    Ok(
        "SkidEngineState::SkidEngineState(void)",
    ),
    Ok(
        "SkidEngineState::~SkidEngineState(void)",
    ),
    Ok(
        "SkidEngineState::Service(unsigned int)",
    ),
    Ok(
        "SkidEngineState::SetDebugInfo(void)",
    ),
    Ok(
        "SkidEngineState::GetCurrentPitch(void)",
    ),
    Ok(
        "SkidEngineState::startup(float)",
    ),
    Ok(
        "VehicleSoundPlayer::VehicleSoundPlayer(void)",
    ),
    Ok(
        "VehicleSoundPlayer::~VehicleSoundPlayer(void)",
    ),
    Ok(
        "VehicleSoundPlayer::StartCarSounds(Vehicle *)",
    ),
    Ok(
        "VehicleSoundPlayer::StopCarSounds(void)",
    ),
    Ok(
        "VehicleSoundPlayer::UpdateSoundParameters(unsigned int)",
    ),
    Ok(
        "VehicleSoundPlayer::UpdateOncePerFrame(unsigned int)",
    ),
    Ok(
        "VehicleSoundPlayer::CheckForSkid(unsigned int)",
    ),
    Ok(
        "VehicleSoundPlayer::CheckHorn(void)",
    ),
    Ok(
        "VehicleSoundPlayer::OnPlaybackComplete(void)",
    ),
    Ok(
        "VehicleSoundPlayer::OnSoundReady(void)",
    ),
    Ok(
        "VehicleSoundPlayer::AddAIVehicleProximityTest(Vehicle *)",
    ),
    Ok(
        "VehicleSoundPlayer::DeleteAIVehicleProximityTest(Vehicle *)",
    ),
    Ok(
        "VehicleSoundPlayer::checkDamage(void)",
    ),
    Ok(
        "VehicleSoundPlayer::carSoundIsActive(void)",
    ),
    Ok(
        "VehicleSoundPlayer::checkProximity(void)",
    ),
    Ok(
        "VehicleSoundPlayer::getSkidResourceForTerrain(eTerrainType)",
    ),
    Ok(
        "VehicleSoundDebugPage::~VehicleSoundDebugPage(void)",
    ),
    Ok(
        "VehicleSoundDebugPage::fillLineBuffer(int, char *)",
    ),
    Ok(
        "VehicleSoundDebugPage::getNumLines(void)",
    ),
    Ok(
        "AvatarSoundPlayer type_info function",
    ),
    Ok(
        "VehicleSoundDebugPage type_info function",
    ),
    Ok(
        "VehicleSoundPlayer type_info function",
    ),
    Ok(
        "SoundAvatar type_info function",
    ),
    Ok(
        "carSoundParameters type_info function",
    ),
    Ok(
        "EngineState type_info function",
    ),
    Ok(
        "NormalEngineState type_info function",
    ),
    Ok(
        "UpshiftEngineState type_info function",
    ),
    Ok(
        "DownshiftEngineState type_info function",
    ),
    Ok(
        "InAirEngineState type_info function",
    ),
    Ok(
        "ReverseEngineState type_info function",
    ),
    Ok(
        "IdleEngineState type_info function",
    ),
    Ok(
        "SkidEngineState type_info function",
    ),
    Ok(
        "radLinkedClass<carSoundParameters> type_info function",
    ),
    Ok(
        "SimpsonsSoundPlayerCallback::SimpsonsSoundPlayerCallback(void)",
    ),
    Ok(
        "ICarSoundParameters::ICarSoundParameters(void)",
    ),
    Ok(
        "carSoundParameters::AddRef(void)",
    ),
    Ok(
        "carSoundParameters::Release(void)",
    ),
    Ok(
        "carSoundParameters::SetClipRPM(float)",
    ),
    Ok(
        "SimpsonsSoundPlayerCallback type_info function",
    ),
    Ok(
        "ICarSoundParameters type_info function",
    ),
    Ok(
        "Conversation::Conversation(DialogLine &)",
    ),
    Ok(
        "Conversation::~Conversation(void)",
    ),
    Ok(
        "Conversation::LineFits(DialogLine &)",
    ),
    Ok(
        "Conversation::AddToConversation(DialogLine &)",
    ),
    Ok(
        "Conversation::PlayLine(unsigned int, SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "Conversation::QueueLine(unsigned int, SimpsonsSoundPlayer &)",
    ),
    Ok(
        "Conversation::PlayQueuedLine(SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "Conversation::GetNumDialogLines(void) const",
    ),
    Ok(
        "Conversation::UsesCharacter(tUidUnaligned)",
    ),
    Ok(
        "Conversation::IsVillainLine(void)",
    ),
    Ok(
        "Conversation::GetDialogLineCharacterUID(unsigned int)",
    ),
    Ok(
        "Conversation::GetConversationName(void)",
    ),
    Ok(
        "Conversation::AddMatchingDialog(SelectableDialog &, list<SelectableDialog *, s2alloc<SelectableDialog *> > &)",
    ),
    Ok(
        "Conversation::findDialogLineByIndex(unsigned int)",
    ),
    Ok(
        "ConversationMatcher::ConversationMatcher(void)",
    ),
    Ok(
        "ConversationMatcher::~ConversationMatcher(void)",
    ),
    Ok(
        "ConversationMatcher::AddNewLine(IDaSoundResource *)",
    ),
    Ok(
        "ConversationMatcher::AddConversationsToList(unsigned int, unsigned int, list<SelectableDialog *, s2alloc<SelectableDialog *> > &)",
    ),
    Ok(
        "DialogCoordinator::DialogCoordinator(IRadNameSpace *)",
    ),
    Ok(
        "DialogCoordinator::~DialogCoordinator(void)",
    ),
    Ok(
        "DialogCoordinator::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "DialogCoordinator::Initialize(void)",
    ),
    Ok(
        "DialogCoordinator::registerDialogEvents(void)",
    ),
    Ok(
        "DialogCoordinator::queueVillainDialog(EventEnum, void *)",
    ),
    Ok(
        "DialogCoordinator::playLinePositionally(EventEnum)",
    ),
    Ok(
        "DialogCoordinator::getCharacterPosition(Character *, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "DialogCoordinator::eventHasVehicleData(EventEnum)",
    ),
    Ok(
        "DialogLine::DialogLine(IDaSoundResource *)",
    ),
    Ok(
        "DialogLine::~DialogLine(void)",
    ),
    Ok(
        "DialogLine::PlayLine(unsigned int, SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "DialogLine::QueueLine(unsigned int, SimpsonsSoundPlayer &)",
    ),
    Ok(
        "DialogLine::PlayQueuedLine(SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "DialogLine::StripDirectoryCrud(char const *, char *, int)",
    ),
    Ok(
        "DialogLine::GetEventTableEntry(unsigned int)",
    ),
    Ok(
        "DialogLine::GetEventTableSize(void)",
    ),
    Ok(
        "DialogLine::GetCharacterTableEntry(unsigned int)",
    ),
    Ok(
        "DialogLine::GetCharacterTableSize(void)",
    ),
    Ok(
        "DialogLine::UsesCharacter(tUidUnaligned)",
    ),
    Ok(
        "DialogLine::AddMatchingDialog(SelectableDialog &, list<SelectableDialog *, s2alloc<SelectableDialog *> > &)",
    ),
    Ok(
        "DialogLine::GetConversationName(void)",
    ),
    Ok(
        "DialogLine::IsFoodCharacter(Character *)",
    ),
    Ok(
        "DialogLine::GetLifeInMsecsForEvent(EventEnum)",
    ),
    Ok(
        "DialogLine::FillCharacterName(char *, unsigned int, tUidUnaligned)",
    ),
    Ok(
        "DialogLine::FillEventName(char *, unsigned int, EventEnum)",
    ),
    Ok(
        "DialogLine::parseResourceFilename(void)",
    ),
    Ok(
        "DialogLine::matchRoleField(char const *, int)",
    ),
    Ok(
        "DialogLine::matchEventField(char const *, int)",
    ),
    Ok(
        "DialogLine::matchOrderField(char const *, int)",
    ),
    Ok(
        "DialogLine::matchCharacterField(char const *, int)",
    ),
    Ok(
        "DialogLine::matchLevelField(char const *, int)",
    ),
    Ok(
        "DialogLine::getNameField(char const *, int, char *, int)",
    ),
    Ok(
        "DialogLine::initializeTables(void)",
    ),
    Ok(
        "DialogList::DialogList(void)",
    ),
    Ok(
        "DialogList::~DialogList(void)",
    ),
    Ok(
        "DialogList::OrganizeDialog(IRadNameSpace *)",
    ),
    Ok(
        "DialogList::FindDialogForEvent(EventEnum, Character *, Character *, tUidUnaligned, tUidUnaligned, unsigned int, bool)",
    ),
    Ok(
        "DialogList::GetStinkySkinPointer(tUidUnaligned)",
    ),
    Ok(
        "DialogList::hasOneLinerPrefix(char const *)",
    ),
    Ok(
        "DialogList::isIndividualLine(IDaSoundResource *)",
    ),
    Ok(
        "DialogList::isConversationLine(IDaSoundResource *)",
    ),
    Ok(
        "DialogList::underscoreCount(char const *)",
    ),
    Ok(
        "DialogList::searchDialogList(EventEnum, Character *, Character *, list<SelectableDialog *, s2alloc<SelectableDialog *> > &, unsigned int, bool)",
    ),
    Ok(
        "DialogList::searchDialogList(EventEnum, tUidUnaligned, tUidUnaligned, list<SelectableDialog *, s2alloc<SelectableDialog *> > &, unsigned int, bool)",
    ),
    Ok(
        "DialogList::searchDialogList(EventEnum, tUidUnaligned, tUidUnaligned, list<SelectableDialog *, s2alloc<SelectableDialog *> > &, unsigned int, bool, bool)",
    ),
    Ok(
        "DialogList::characterMatches(tUidUnaligned, SelectableDialog *, bool)",
    ),
    Ok(
        "DialogList::getPuppetUID(Character *)",
    ),
    Ok(
        "DialogPriorityQueue::DialogPriorityQueue(void)",
    ),
    Ok(
        "DialogPriorityQueue::~DialogPriorityQueue(void)",
    ),
    Ok(
        "DialogPriorityQueue::AddDialogToQueue(SelectableDialog &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "DialogPriorityQueue::StopAllDialog(void)",
    ),
    Ok(
        "DialogPriorityQueue::PauseDialog(void)",
    ),
    Ok(
        "DialogPriorityQueue::UnpauseDialog(void)",
    ),
    Ok(
        "DialogPriorityQueue::OnDialogLineComplete(void)",
    ),
    Ok(
        "DialogPriorityQueue::OnDialogComplete(void)",
    ),
    Ok(
        "DialogPriorityQueue::ServiceOncePerFrame(void)",
    ),
    Ok(
        "DialogPriorityQueue::advanceQueue(void)",
    ),
    Ok(
        "DialogPriorityQueue::playDialog(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "DialogPriorityQueue::serviceDebugPage(void)",
    ),
    Ok(
        "DialogQueueElement::DialogQueueElement(SelectableDialog *)",
    ),
    Ok(
        "DialogQueueElement::~DialogQueueElement(void)",
    ),
    Ok(
        "DialogQueueElement::OnTimerDone(unsigned int, void *)",
    ),
    Ok(
        "DialogQueueElement::AddToQueue(list<DialogQueueElement *, s2alloc<DialogQueueElement *> > *, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "DialogQueueElement::RemoveSelfFromList(void)",
    ),
    Ok(
        "DialogQueueElement::CalculateDialogPriority(SelectableDialog const &)",
    ),
    Ok(
        "DialogQueueElement::CalculateDialogProbability(SelectableDialog const &)",
    ),
    Ok(
        "DialogQueueElement::OnPlaybackComplete(void)",
    ),
    Ok(
        "DialogQueueElement::OnSoundReady(void)",
    ),
    Ok(
        "DialogQueueElement::PlayDialog(SimpsonsSoundPlayer &, SimpsonsSoundPlayer &, DialogLineCompleteCallback *, DialogCompleteCallback *)",
    ),
    Ok(
        "DialogQueueElement::StopDialog(void)",
    ),
    Ok(
        "DialogQueueElement::Service(void)",
    ),
    Ok(
        "DialogQueueElement::GetPosition(void)",
    ),
    Ok(
        "DialogQueueElement::dialogLineIsWalker(unsigned int)",
    ),
    Ok(
        "DialogQueueElement::dialogLineIsNPC(unsigned int)",
    ),
    Ok(
        "DialogQueueElement::isMouthFlappingEvent(EventEnum)",
    ),
    Ok(
        "DialogSelectionGroup::DialogSelectionGroup(SelectableDialog &, SelectableDialog &)",
    ),
    Ok(
        "DialogSelectionGroup::~DialogSelectionGroup(void)",
    ),
    Ok(
        "DialogSelectionGroup::PlayLine(unsigned int, SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "DialogSelectionGroup::QueueLine(unsigned int, SimpsonsSoundPlayer &)",
    ),
    Ok(
        "DialogSelectionGroup::PlayQueuedLine(SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
    ),
    Ok(
        "DialogSelectionGroup::GetNumDialogLines(void) const",
    ),
    Ok(
        "DialogSelectionGroup::UsesCharacter(tUidUnaligned)",
    ),
    Ok(
        "DialogSelectionGroup::IsVillainLine(void)",
    ),
    Ok(
        "DialogSelectionGroup::GetDialogLineCharacterUID(unsigned int)",
    ),
    Ok(
        "DialogSelectionGroup::AddMatchingDialog(SelectableDialog &, list<SelectableDialog *, s2alloc<SelectableDialog *> > &)",
    ),
    Ok(
        "DialogSelectionGroup::GetEvent(void) const",
    ),
    Ok(
        "DialogSelectionGroup::GetLevel(void) const",
    ),
    Ok(
        "DialogSelectionGroup::GetMission(void) const",
    ),
    Ok(
        "DialogSelectionGroup::GetConversationName(void)",
    ),
    Ok(
        "DialogSelectionGroup::makeRandomSelection(void)",
    ),
    Ok(
        "PlayableDialog::PlayableDialog(void)",
    ),
    Ok(
        "PlayableDialog::PlayableDialog(unsigned int, unsigned int, EventEnum)",
    ),
    Ok(
        "PlayableDialog::~PlayableDialog(void)",
    ),
    Ok(
        "SelectableDialog::SelectableDialog(void)",
    ),
    Ok(
        "SelectableDialog::SelectableDialog(unsigned int, unsigned int, EventEnum)",
    ),
    Ok(
        "SelectableDialog::~SelectableDialog(void)",
    ),
    Ok(
        "SelectableDialog::AddToDialogList(SelectableDialog **)",
    ),
    Ok(
        "SelectableDialog::AddToDialogList(SelectableDialog *)",
    ),
    Ok(
        "SelectableDialog::RemoveNextFromList(void)",
    ),
    Ok(
        "SelectableDialog::GetMission(void) const",
    ),
    Ok(
        "SelectableDialog::GetLevel(void) const",
    ),
    Ok(
        "SelectableDialog::GetEvent(void) const",
    ),
    Ok(
        "DialogSoundDebugPage::~DialogSoundDebugPage(void)",
    ),
    Ok(
        "DialogSoundDebugPage::fillLineBuffer(int, char *)",
    ),
    Ok(
        "DialogSoundDebugPage::getNumLines(void)",
    ),
    Ok(
        "DialogSoundDebugPage::fillQueueText(char *, unsigned int)",
    ),
    Ok(
        "list<SelectableDialog *, s2alloc<SelectableDialog *> >::remove(SelectableDialog *const &)",
    ),
    Ok(
        "_List_base<SelectableDialog *, s2alloc<SelectableDialog *> >::clear(void)",
    ),
    Ok(
        "_List_base<DialogQueueElement *, s2alloc<DialogQueueElement *> >::clear(void)",
    ),
    Ok(
        "list<DialogQueueElement *, s2alloc<DialogQueueElement *> >::remove(DialogQueueElement *const &)",
    ),
    Ok(
        "vector<SelectableDialog *, s2alloc<SelectableDialog *> >::_M_insert_aux(SelectableDialog **, SelectableDialog *const &)",
    ),
    Ok(
        "SelectableDialog type_info function",
    ),
    Ok(
        "PlayableDialog type_info function",
    ),
    Ok(
        "Conversation type_info function",
    ),
    Ok(
        "DialogLine type_info function",
    ),
    Ok(
        "DialogSelectionGroup type_info function",
    ),
    Ok(
        "ConversationMatcher type_info function",
    ),
    Ok(
        "DialogList type_info function",
    ),
    Ok(
        "DialogQueueElement type_info function",
    ),
    Ok(
        "DialogSoundDebugPage type_info function",
    ),
    Ok(
        "DialogPriorityQueue type_info function",
    ),
    Ok(
        "DialogCoordinator type_info function",
    ),
    Ok(
        "SelectableDialog::UsesCharacter(Character *)",
    ),
    Ok(
        "DialogLine::GetDialogLineCharacterUID(unsigned int)",
    ),
    Ok(
        "DialogLine::IsVillainLine(void)",
    ),
    Ok(
        "DialogLine::GetNumDialogLines(void) const",
    ),
    Ok(
        "_Vector_alloc_base<SelectableDialog *, s2alloc<SelectableDialog *>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "_List_alloc_base<SelectableDialog *, s2alloc<SelectableDialog *>, false>::~_List_alloc_base(void)",
    ),
    Ok(
        "DialogLineCompleteCallback::DialogLineCompleteCallback(void)",
    ),
    Ok(
        "DialogCompleteCallback::DialogCompleteCallback(void)",
    ),
    Ok(
        "DialogQueueElement::AddRef(void)",
    ),
    Ok(
        "DialogQueueElement::Release(void)",
    ),
    Ok(
        "_List_alloc_base<DialogQueueElement *, s2alloc<DialogQueueElement *>, false>::~_List_alloc_base(void)",
    ),
    Ok(
        "DialogLineCompleteCallback type_info function",
    ),
    Ok(
        "DialogCompleteCallback type_info function",
    ),
    Ok(
        "global constructors keyed to Conversation::Conversation(DialogLine &)",
    ),
    Ok(
        "MusicPlayer::MusicPlayer(Sound::IDaSoundTuner &)",
    ),
    Ok(
        "MusicPlayer::~MusicPlayer(void)",
    ),
    Ok(
        "MusicPlayer::TriggerMusicEvent(MusicEventList)",
    ),
    Ok(
        "MusicPlayer::TriggerAmbientEvent(unsigned int)",
    ),
    Ok(
        "MusicPlayer::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "MusicPlayer::SetUpPerformance(radmusic::performance **, radmusic::composition **, char const *)",
    ),
    Ok(
        "MusicPlayer::Service(void)",
    ),
    Ok(
        "MusicPlayer::QueueRadmusicScriptLoad(void)",
    ),
    Ok(
        "MusicPlayer::QueueMusicLevelLoad(RenderEnums::LevelEnum)",
    ),
    Ok(
        "MusicPlayer::LoadRadmusicScript(char const *, SoundFileHandler *)",
    ),
    Ok(
        "MusicPlayer::UnloadRadmusicScript(void)",
    ),
    Ok(
        "MusicPlayer::OnFrontEndStart(void)",
    ),
    Ok(
        "MusicPlayer::OnFrontEndFinish(void)",
    ),
    Ok(
        "MusicPlayer::OnGameplayStart(bool)",
    ),
    Ok(
        "MusicPlayer::OnGameplayFinish(void)",
    ),
    Ok(
        "MusicPlayer::OnPauseStart(void)",
    ),
    Ok(
        "MusicPlayer::OnPauseEnd(void)",
    ),
    Ok(
        "MusicPlayer::OnStoreStart(void)",
    ),
    Ok(
        "MusicPlayer::OnStoreEnd(void)",
    ),
    Ok(
        "MusicPlayer::StopForMovie(void)",
    ),
    Ok(
        "MusicPlayer::ResumeAfterMovie(void)",
    ),
    Ok(
        "MusicPlayer::IsStoppedForMovie(void)",
    ),
    Ok(
        "MusicPlayer::RestartSupersprintMusic(void)",
    ),
    Ok(
        "MusicPlayer::SetVolume(float)",
    ),
    Ok(
        "MusicPlayer::SetAmbienceVolume(float)",
    ),
    Ok(
        "MusicPlayer::GetBeatValue(void)",
    ),
    Ok(
        "MusicPlayer::calculateLevelIndex(void)",
    ),
    Ok(
        "MusicPlayer::calculateMissionIndex(void)",
    ),
    Ok(
        "MusicPlayer::calculateInteriorIndex(tUidUnaligned)",
    ),
    Ok(
        "MusicPlayer::musicLockedOnForStage(void)",
    ),
    Ok(
        "MusicPlayer::startMusic(void)",
    ),
    Ok(
        "MusicPlayer::playPostMissionSounds(void)",
    ),
    Ok(
        "MusicPlayer::turnAmbienceOn(unsigned int)",
    ),
    Ok(
        "MusicPlayer::turnAmbienceOff(unsigned int)",
    ),
    Ok(
        "MusicPlayer::currentMissionIsRace(void)",
    ),
    Ok(
        "MusicPlayer::currentMissionIsSundayDrive(void)",
    ),
    Ok(
        "MusicPlayer::initializeTableNameKeys(void)",
    ),
    Ok(
        "MusicPlayer::buildEventTables(void)",
    ),
    Ok(
        "MusicPlayer::triggerMusicMissionEventByName(unsigned int *)",
    ),
    Ok(
        "MusicPlayer::triggerMusicStateChange(unsigned int, unsigned int)",
    ),
    Ok(
        "radLoadInventory::SafeCast<radmusic::radload_composition_adapter>::SafeCast(void)",
    ),
    Ok(
        "radmusic::radload_composition_adapter * radLoadFind<radmusic::radload_composition_adapter>(radLoadInventory *, tUidUnaligned)",
    ),
    Ok(
        "radmusic::radload_composition_adapter * radLoadFind<radmusic::radload_composition_adapter>(radLoadInventory *, char const *)",
    ),
    Ok(
        "MusicPlayer type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<radmusic::radload_composition_adapter> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<radmusic::radload_composition_adapter>::safe_cast(IRefCount *)",
    ),
    Ok(
        "NISPlayerGroup::NISPlayerGroup(void)",
    ),
    Ok(
        "NISPlayerGroup::~NISPlayerGroup(void)",
    ),
    Ok(
        "NISPlayerGroup::LoadSound(unsigned int, NISSoundLoadedCallback *)",
    ),
    Ok(
        "NISPlayerGroup::PlaySound(RadicalMathLibrary::Box3D *, NISSoundPlaybackCompleteCallback *)",
    ),
    Ok(
        "NISPlayerGroup::StopAndDumpSound(void)",
    ),
    Ok(
        "NISPlayerGroup::IsSoundIDLoaded(unsigned int)",
    ),
    Ok(
        "NISPlayerGroup::Continue(void)",
    ),
    Ok(
        "NISPlayerGroup::OnSoundReady(void)",
    ),
    Ok(
        "NISPlayerGroup::OnPlaybackComplete(void)",
    ),
    Ok(
        "NISSoundPlayer::NISSoundPlayer(void)",
    ),
    Ok(
        "NISSoundPlayer::~NISSoundPlayer(void)",
    ),
    Ok(
        "NISSoundPlayer::LoadNISSound(unsigned int, NISSoundLoadedCallback *)",
    ),
    Ok(
        "NISSoundPlayer::PlayNISSound(unsigned int, RadicalMathLibrary::Box3D *, NISSoundPlaybackCompleteCallback *)",
    ),
    Ok(
        "NISSoundPlayer::StopAndDumpNISSound(unsigned int)",
    ),
    Ok(
        "NISSoundPlayer::PauseAllNISPlayers(void)",
    ),
    Ok(
        "NISSoundPlayer::ContinueAllNISPlayers(void)",
    ),
    Ok(
        "NISSoundPlayer::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "NISSoundPlayer::loadFEGag(unsigned int)",
    ),
    Ok(
        "NISPlayerGroup type_info function",
    ),
    Ok(
        "NISSoundPlayer type_info function",
    ),
    Ok(
        "SoundEffectPlayer::SoundEffectPlayer(void)",
    ),
    Ok(
        "SoundEffectPlayer::~SoundEffectPlayer(void)",
    ),
    Ok(
        "SoundEffectPlayer::ServiceOncePerFrame(unsigned int)",
    ),
    Ok(
        "SoundEffectPlayer::OnPauseStart(void)",
    ),
    Ok(
        "SoundEffectPlayer::OnPauseEnd(void)",
    ),
    Ok(
        "SoundEffectPlayer::PlayCarOptionStinger(float)",
    ),
    Ok(
        "SoundEffectPlayer::PlayDialogOptionStinger(float)",
    ),
    Ok(
        "SoundEffectPlayer::PlayMusicOptionStinger(float)",
    ),
    Ok(
        "SoundEffectPlayer::PlaySfxOptionStinger(float)",
    ),
    Ok(
        "SoundEffectPlayer::initialize(void)",
    ),
    Ok(
        "SoundEffectPlayer::setSFXState(SoundEffectPlayer::SFXState)",
    ),
    Ok(
        "SoundEffectPlayer::doCleanup(void)",
    ),
    Ok(
        "SoundEffectPlayer::playStinger(char const *, float)",
    ),
    Ok(
        "SoundFXFrontEndLogic::SoundFXFrontEndLogic(void)",
    ),
    Ok(
        "SoundFXFrontEndLogic::~SoundFXFrontEndLogic(void)",
    ),
    Ok(
        "SoundFXFrontEndLogic::RegisterEventListeners(void)",
    ),
    Ok(
        "SoundFXFrontEndLogic::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "SoundFXGameplayLogic::SoundFXGameplayLogic(void)",
    ),
    Ok(
        "SoundFXGameplayLogic::~SoundFXGameplayLogic(void)",
    ),
    Ok(
        "SoundFXGameplayLogic::RegisterEventListeners(void)",
    ),
    Ok(
        "SoundFXGameplayLogic::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "SoundFXGameplayLogic::OnPlaybackComplete(void)",
    ),
    Ok(
        "SoundFXGameplayLogic::Cleanup(void)",
    ),
    Ok(
        "SoundFXGameplayLogic::getGlobalSettings(void)",
    ),
    Ok(
        "SoundFXGameplayLogic::handleCollisionEvent(SoundCollisionData *)",
    ),
    Ok(
        "SoundFXGameplayLogic::handleObjectKick(CollisionEntityDSG *)",
    ),
    Ok(
        "SoundFXGameplayLogic::collisionPairMatches(int, void *, void *)",
    ),
    Ok(
        "SoundFXGameplayLogic::startCollisionPlayer(char const *, CollisionEntityDSG *, CollisionEntityDSG *, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "SoundFXGameplayLogic::handleFootstepEvent(Character *)",
    ),
    Ok(
        "SoundFXGameplayLogic::handleSwitchEvent(void)",
    ),
    Ok(
        "SoundFXGameplayLogic::handleCollection(void)",
    ),
    Ok(
        "SoundFXGameplayLogic::playPositionalSound(ScriptLocator *)",
    ),
    Ok(
        "SoundFXGameplayLogic::playCarDoorSound(EventEnum, Character *)",
    ),
    Ok(
        "SoundFXGameplayLogic::playCoinCollectSound(void)",
    ),
    Ok(
        "SoundFXLogic::SoundFXLogic(void)",
    ),
    Ok(
        "SoundFXLogic::~SoundFXLogic(void)",
    ),
    Ok(
        "SoundFXLogic::UnregisterEventListeners(void)",
    ),
    Ok(
        "SoundFXLogic::GetAvailableSFXPlayer(unsigned int *)",
    ),
    Ok(
        "SoundFXLogic::playSFXSound(char const *, bool, bool, unsigned int *, float, float)",
    ),
    Ok(
        "SoundFXLogic::ServiceOncePerFrame(unsigned int)",
    ),
    Ok(
        "SoundFXLogic::OnSoundReady(void)",
    ),
    Ok(
        "SoundFXLogic::OnPlaybackComplete(void)",
    ),
    Ok(
        "SoundFXLogic::Cleanup(void)",
    ),
    Ok(
        "SoundFXLogic::playCreditLine(int)",
    ),
    Ok(
        "SoundFXPauseLogic::SoundFXPauseLogic(void)",
    ),
    Ok(
        "SoundFXPauseLogic::~SoundFXPauseLogic(void)",
    ),
    Ok(
        "SoundFXPauseLogic::RegisterEventListeners(void)",
    ),
    Ok(
        "SoundFXPauseLogic::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "ReverbController::ReverbController(void)",
    ),
    Ok(
        "ReverbController::~ReverbController(void)",
    ),
    Ok(
        "ReverbController::SetReverbGain(float)",
    ),
    Ok(
        "ReverbController::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "ReverbController::ServiceOncePerFrame(unsigned int)",
    ),
    Ok(
        "ReverbController::PauseReverb(void)",
    ),
    Ok(
        "ReverbController::UnpauseReverb(void)",
    ),
    Ok(
        "ReverbController::registerReverbEffect(IRadSoundHalEffect *)",
    ),
    Ok(
        "ReverbController::prepareFadeSettings(float, float, float)",
    ),
    Ok(
        "ReverbController::startFadeOut(void)",
    ),
    Ok(
        "ReverbController::getReverbSettings(char const *)",
    ),
    Ok(
        "reverbSettings::reverbSettings(void)",
    ),
    Ok(
        "reverbSettings::~reverbSettings(void)",
    ),
    Ok(
        "ReverbSettingsObjCreate(IReverbSettings **, int)",
    ),
    Ok(
        "positionalSoundSettings::positionalSoundSettings(void)",
    ),
    Ok(
        "positionalSoundSettings::~positionalSoundSettings(void)",
    ),
    Ok(
        "positionalSoundSettings::SetClipName(char const *)",
    ),
    Ok(
        "positionalSoundSettings::SetMinDistance(float)",
    ),
    Ok(
        "positionalSoundSettings::SetMaxDistance(float)",
    ),
    Ok(
        "positionalSoundSettings::SetPlaybackProbability(float)",
    ),
    Ok(
        "PositionalSettingsObjCreate(IPositionalSoundSettings **, int)",
    ),
    Ok(
        "PS2ReverbController::PS2ReverbController(void)",
    ),
    Ok(
        "PS2ReverbController::~PS2ReverbController(void)",
    ),
    Ok(
        "PS2ReverbController::SetReverbOn(reverbSettings *)",
    ),
    Ok(
        "PS2ReverbController::SetReverbOff(void)",
    ),
    Ok(
        "SoundEffectPlayer type_info function",
    ),
    Ok(
        "SoundFXLogic type_info function",
    ),
    Ok(
        "SoundFXFrontEndLogic type_info function",
    ),
    Ok(
        "SoundFXGameplayLogic type_info function",
    ),
    Ok(
        "SoundFXPauseLogic type_info function",
    ),
    Ok(
        "ReverbController type_info function",
    ),
    Ok(
        "PS2ReverbController type_info function",
    ),
    Ok(
        "positionalSoundSettings type_info function",
    ),
    Ok(
        "reverbSettings type_info function",
    ),
    Ok(
        "radLinkedClass<positionalSoundSettings> type_info function",
    ),
    Ok(
        "radLinkedClass<reverbSettings> type_info function",
    ),
    Ok(
        "SFXPlayer::~SFXPlayer(void)",
    ),
    Ok(
        "SFXPlayer::SFXPlayer(void)",
    ),
    Ok(
        "PositionalSFXPlayer::~PositionalSFXPlayer(void)",
    ),
    Ok(
        "PositionalSFXPlayer::PositionalSFXPlayer(void)",
    ),
    Ok(
        "IPositionalSoundSettings::IPositionalSoundSettings(void)",
    ),
    Ok(
        "positionalSoundSettings::AddRef(void)",
    ),
    Ok(
        "positionalSoundSettings::Release(void)",
    ),
    Ok(
        "IReverbSettings::IReverbSettings(void)",
    ),
    Ok(
        "reverbSettings::AddRef(void)",
    ),
    Ok(
        "reverbSettings::Release(void)",
    ),
    Ok(
        "reverbSettings::SetGain(float)",
    ),
    Ok(
        "reverbSettings::SetFadeInTime(float)",
    ),
    Ok(
        "reverbSettings::SetFadeOutTime(float)",
    ),
    Ok(
        "reverbSettings::SetXboxRoom(int)",
    ),
    Ok(
        "reverbSettings::SetXboxRoomHF(int)",
    ),
    Ok(
        "reverbSettings::SetXboxRoomRolloffFactor(float)",
    ),
    Ok(
        "reverbSettings::SetXboxDecayTime(float)",
    ),
    Ok(
        "reverbSettings::SetXboxDecayHFRatio(float)",
    ),
    Ok(
        "reverbSettings::SetXboxReflections(int)",
    ),
    Ok(
        "reverbSettings::SetXboxReflectionsDelay(float)",
    ),
    Ok(
        "reverbSettings::SetXboxReverb(int)",
    ),
    Ok(
        "reverbSettings::SetXboxReverbDelay(float)",
    ),
    Ok(
        "reverbSettings::SetXboxDiffusion(float)",
    ),
    Ok(
        "reverbSettings::SetXboxDensity(float)",
    ),
    Ok(
        "reverbSettings::SetXboxHFReference(float)",
    ),
    Ok(
        "reverbSettings::SetPS2ReverbMode(int)",
    ),
    Ok(
        "reverbSettings::SetPS2Delay(float)",
    ),
    Ok(
        "reverbSettings::SetPS2Feedback(float)",
    ),
    Ok(
        "reverbSettings::SetGCPreDelay(float)",
    ),
    Ok(
        "reverbSettings::SetGCReverbTime(float)",
    ),
    Ok(
        "reverbSettings::SetGCColoration(float)",
    ),
    Ok(
        "reverbSettings::SetGCDamping(float)",
    ),
    Ok(
        "reverbSettings::SetWinEnvironmentDiffusion(float)",
    ),
    Ok(
        "reverbSettings::SetWinAirAbsorptionHF(float)",
    ),
    Ok(
        "IPositionalSoundSettings type_info function",
    ),
    Ok(
        "IReverbSettings type_info function",
    ),
    Ok(
        "global constructors keyed to SoundEffectPlayer::SoundEffectPlayer(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::daSoundClipStreamPlayer(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::~daSoundClipStreamPlayer(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::UpdateClip(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::UpdateStream(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::ServiceOncePerFrame(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::InitializeAsClipPlayer(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::InitializeAsStreamPlayer(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::Capture(IDaSoundResource *, bool)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::IsCaptured(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::UnCapture(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::ChangeTrim(Sound::daSoundGroup, float)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::ChangeFaderTrim(Sound::daSoundGroup, float)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::GetSoundGroup(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::RegisterSoundPlayerStateCallback(Sound::IDaSoundPlayerState *, void *)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::UnregisterSoundPlayerStateCallback(Sound::IDaSoundPlayerState *, void *)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::Play(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::OnStitch(IRadSoundHalDataSource **, unsigned int, void *)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::Pause(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::Continue(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::Stop(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::HookUpAndCuePlayer(void)",
    ),
    Ok(
        "Fader::Fader(globalSettings *, Sound::DuckSituations, Sound::daSoundPlayerManager &, Sound::IDaSoundTuner &)",
    ),
    Ok(
        "Fader::~Fader(void)",
    ),
    Ok(
        "Fader::BroadCast(void)",
    ),
    Ok(
        "Fader::Fade(bool, Sound::DuckVolumeSet *, Sound::DuckVolumeSet *)",
    ),
    Ok(
        "Fader::GetState(void)",
    ),
    Ok(
        "Fader::Update(unsigned int)",
    ),
    Ok(
        "Fader::UpdateAllFaders(unsigned int)",
    ),
    Ok(
        "Fader::ReinitializeFader(globalSettings *)",
    ),
    Ok(
        "Fader::Stop(void)",
    ),
    Ok(
        "Fader::setState(void)",
    ),
    Ok(
        "Fader::addToUpdateList(void)",
    ),
    Ok(
        "Fader::removeFromUpdateList(void)",
    ),
    Ok(
        "Fader::faderInUpdateList(void)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::MusicSoundPlayer(void)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::~MusicSoundPlayer(void)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::Initialize(bool)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::GetSoundGroup(void)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::SetGroupTrim(float)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::SetFaderGroupTrim(float)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::SetMasterTrim(float)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::ChangeTrim(Sound::daSoundGroup, float)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::ChangeFaderTrim(Sound::daSoundGroup, float)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::ResetMusicTrim(void)",
    ),
    Ok(
        "Sound::CreateAudioFormat(Sound::AudioFormat *, int)",
    ),
    Ok(
        "Sound::DestroyAudioFormat(Sound::AudioFormat *)",
    ),
    Ok(
        "Sound::CreateStreamerResources(Sound::StreamerResources *, int)",
    ),
    Ok(
        "Sound::DestroyStreamerResources(Sound::StreamerResources *)",
    ),
    Ok(
        "Sound::CalculateStreamerSize(unsigned int, Sound::AudioFormat *)",
    ),
    Ok(
        "Sound::SoundNucleusInitialize(int)",
    ),
    Ok(
        "Sound::SoundNucleusTerminate(void)",
    ),
    Ok(
        "Sound::SoundNucleusGetStreamFileAudioFormat(void)",
    ),
    Ok(
        "Sound::SoundNucleusGetClipFileAudioFormat(void)",
    ),
    Ok(
        "Sound::SoundNucleusCaptureStreamerResources(IRadSoundHalAudioFormat *)",
    ),
    Ok(
        "Sound::SoundNucleusUnCaptureStreamerResources(Sound::StreamerResources *)",
    ),
    Ok(
        "Sound::SoundNucleusLoadClip(char const *, bool)",
    ),
    Ok(
        "Sound::SoundNucleusIsClipLoaded(void)",
    ),
    Ok(
        "Sound::SoundNucleusFinishClipLoad(IRadSoundClip **)",
    ),
    Ok(
        "Sound::SoundNucleusCancelClipLoad(void)",
    ),
    Ok(
        "Sound::SoundNucleusServiceClipLoad(void)",
    ),
    Ok(
        "Sound::daSoundAsyncFadeCallback::~daSoundAsyncFadeCallback(void)",
    ),
    Ok(
        "Sound::daSoundAsyncFadeCallback::GetCallback(Sound::IDaSoundFadeState **, void **)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::daSoundPlayerManager(void)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::~daSoundPlayerManager(void)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::UglyHackPostInitialize(Sound::IDaSoundTuner *)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::Initialize(void)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::ServiceOncePerFrame(void)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::CaptureFreePlayer(Sound::daSoundClipStreamPlayer **, IDaSoundResource *, bool)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::FindFreePlayer(Sound::daSoundClipStreamPlayer **, unsigned int, Sound::daSoundClipStreamPlayer **)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::FindFreeClipPlayer(Sound::daSoundClipStreamPlayer **, IDaSoundResource *)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::FindFreeStreamPlayer(Sound::daSoundClipStreamPlayer **, IDaSoundResource *)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::PausePlayers(void)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::ContinuePlayers(void)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::CancelPlayers(void)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::PlayerVolumeChange(Sound::daSoundGroup, float)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::PlayerFaderVolumeChange(Sound::daSoundGroup, float)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::OnFadeDone(void *)",
    ),
    Ok(
        "Sound::daSoundFileInstance::daSoundFileInstance(IDaSoundResource *, unsigned int)",
    ),
    Ok(
        "Sound::daSoundFileInstance::~daSoundFileInstance(void)",
    ),
    Ok(
        "Sound::daSoundFileInstance::CreateFileDataSource(IRadSoundRsdFileDataSource **)",
    ),
    Ok(
        "Sound::daSoundFileInstance::Load(IRadSoundHalMemoryRegion *)",
    ),
    Ok(
        "Sound::daSoundFileInstance::UpdateLoading(void)",
    ),
    Ok(
        "Sound::daSoundFileInstance::UnLoad(void)",
    ),
    Ok(
        "Sound::daSoundAllocatedResource::daSoundAllocatedResource(void)",
    ),
    Ok(
        "Sound::daSoundAllocatedResource::~daSoundAllocatedResource(void)",
    ),
    Ok(
        "Sound::daSoundAllocatedResource::Initialize(IDaSoundResource *)",
    ),
    Ok(
        "Sound::daSoundAllocatedResource::ChooseNextInstance(void)",
    ),
    Ok(
        "Sound::daSoundAllocatedResource::GetFileInstance(unsigned int)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::daSoundDynaLoadRegion(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::~daSoundDynaLoadRegion(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::Create(IRadSoundHalMemoryRegion *, unsigned int, unsigned int)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::Destroy(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::ServiceOncePerFrame(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::SwapInObject(unsigned int, Sound::daSoundFileInstance *)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::GetSlotState(unsigned int)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::GetNumSlots(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::SharedMemoryRegions(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::PerformSwap(unsigned int)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::GetSlotMemoryRegion(unsigned int)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::SetSlotObject(unsigned int, Sound::daSoundFileInstance *)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::GetSlotObject(unsigned int)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::SetPendingSwapObject(unsigned int, Sound::daSoundFileInstance *)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::ArePendingSwapsRegistered(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::GetNumPendingSwaps(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::GetPendingSwapObject(unsigned int)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::SetObject_Internal(Sound::daSoundFileInstance **, unsigned int, Sound::daSoundFileInstance *)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::GetObject_Internal(Sound::daSoundFileInstance **, unsigned int)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::ClearActiveSwap(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::SetActiveSwap(unsigned int)",
    ),
    Ok(
        "Sound::daSoundDynaLoadManager::daSoundDynaLoadManager(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadManager::~daSoundDynaLoadManager(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadManager::ServiceOncePerFrame(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadManager::CreateRegion(IRadSoundHalMemoryRegion *, unsigned int, unsigned int)",
    ),
    Ok(
        "Sound::daSoundDynaLoadManager::AddCompletionCallback(Sound::IDaSoundDynaLoadCompletionCallback *, void *)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::daSoundRenderingManager(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::~daSoundRenderingManager(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::GetInstance(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::Initialize(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::IsInitialized(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::Terminate(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::Service(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::ServiceOncePerFrame(unsigned int)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::QueueCementFileRegistration(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::SwitchDialogueCementFile(Scrooby::XLLanguage)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::QueueRadscriptFileLoads(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::LoadTypeInfoFile(char const *, SoundFileHandler *)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::LoadScriptFile(char const *, SoundFileHandler *)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::GetSoundNamespace(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::GetTuningNamespace(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::GetCharacterNamespace(unsigned int)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::GetTheListener(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::GetDynaLoadManager(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::GetTuner(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::GetResourceManager(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::GetPlayerManager(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::TypeInfoComplete(void *)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::ScriptComplete(void *)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::SoundObjectCreated(char const *, IRefCount *)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::ProcessTypeInfo(void *)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::ProcessScript(void *)",
    ),
    Ok(
        "Sound::daSoundRenderingManagerCreate(int)",
    ),
    Ok(
        "Sound::daSoundRenderingManagerGet(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::FilePerformanceEvent(bool, char const *, unsigned int)",
    ),
    Ok(
        "Sound::daSoundRenderingManagerTerminate(void)",
    ),
    Ok(
        "SoundResourceFilenameBuilder::SoundResourceFilenameBuilder(void)",
    ),
    Ok(
        "SoundResourceFilenameBuilder::~SoundResourceFilenameBuilder(void)",
    ),
    Ok(
        "SoundResourceFilenameBuilder::CutFilename(char const *, char *)",
    ),
    Ok(
        "SoundResourceFilenameBuilder::RestoreFilename(char const *, unsigned int, char *, unsigned int)",
    ),
    Ok(
        "daSoundResourceData::daSoundResourceData(void)",
    ),
    Ok(
        "daSoundResourceData::~daSoundResourceData(void)",
    ),
    Ok(
        "daSoundResourceData::AddFilename(char const *, float)",
    ),
    Ok(
        "daSoundResourceData::GetNumFiles(void)",
    ),
    Ok(
        "daSoundResourceData::GetFileAt(unsigned int)",
    ),
    Ok(
        "daSoundResourceData::GetFilenameAt(unsigned int, char *, unsigned int)",
    ),
    Ok(
        "daSoundResourceData::SetPitchRange(float, float)",
    ),
    Ok(
        "daSoundResourceData::GetPitchRange(float *, float *)",
    ),
    Ok(
        "daSoundResourceData::SetTrimRange(float, float)",
    ),
    Ok(
        "daSoundResourceData::SetTrim(float)",
    ),
    Ok(
        "daSoundResourceData::GetTrimRange(float *, float *)",
    ),
    Ok(
        "daSoundResourceData::SetStreaming(bool)",
    ),
    Ok(
        "daSoundResourceData::GetStreaming(void)",
    ),
    Ok(
        "daSoundResourceData::SetLooping(bool)",
    ),
    Ok(
        "daSoundResourceData::GetLooping(void)",
    ),
    Ok(
        "daSoundResourceData::GetType(void)",
    ),
    Ok(
        "daSoundResourceData::SetSoundGroup(Sound::daSoundGroup)",
    ),
    Ok(
        "daSoundResourceData::GetSoundGroup(void)",
    ),
    Ok(
        "daSoundResourceData::CaptureResource(void)",
    ),
    Ok(
        "daSoundResourceData::IsCaptured(void)",
    ),
    Ok(
        "daSoundResourceData::ReleaseResource(void)",
    ),
    Ok(
        "daSoundResourceData::Play(void)",
    ),
    Ok(
        "daSoundResourceData::InitializedResourceFile(IDaSoundResource::daSoundResourceFileDesc *, char const *, float)",
    ),
    Ok(
        "daSoundResourceData::DestroyResourceFile(IDaSoundResource::daSoundResourceFileDesc &)",
    ),
    Ok(
        "daSoundResourceData::AddRef(void)",
    ),
    Ok(
        "daSoundResourceData::Release(void)",
    ),
    Ok(
        "Sound::daSoundResourceManager::daSoundResourceManager(void)",
    ),
    Ok(
        "Sound::daSoundResourceManager::~daSoundResourceManager(void)",
    ),
    Ok(
        "Sound::daSoundResourceManager::AllocateResource(IDaSoundResource *)",
    ),
    Ok(
        "Sound::daSoundResourceManager::DeallocateResource(IDaSoundResource *)",
    ),
    Ok(
        "Sound::daSoundResourceManager::FindResource(char const *)",
    ),
    Ok(
        "Sound::daSoundResourceManager::FindResource(unsigned int)",
    ),
    Ok(
        "Sound::daSoundResourceManager::FindAllocatedResource(IDaSoundResource *)",
    ),
    Ok(
        "Sound::daSoundResourceManager::SetResourceLockdown(bool)",
    ),
    Ok(
        "Sound::daSoundResourceManager::GetResourceLockdown(void)",
    ),
    Ok(
        "Sound::daSoundResourceManager::GetNumResourceDatas(void)",
    ),
    Ok(
        "Sound::daSoundResourceManager::SetActiveResource(IRadNameSpace *)",
    ),
    Ok(
        "Sound::daSoundResourceManager::ReleaseActiveResource(IRadNameSpace *)",
    ),
    Ok(
        "Sound::daSoundResourceManager::GetResourceDataAt(unsigned int)",
    ),
    Ok(
        "Sound::daSoundResourceManager::CreateResourceData(void)",
    ),
    Ok(
        "Sound::daSoundTuner_ActiveFadeInfo::daSoundTuner_ActiveFadeInfo(Fader *, bool, Sound::IDaSoundFadeState *, void *, Sound::DuckVolumeSet *, Sound::DuckVolumeSet *)",
    ),
    Ok(
        "Sound::daSoundTuner_ActiveFadeInfo::~daSoundTuner_ActiveFadeInfo(void)",
    ),
    Ok(
        "Sound::daSoundTuner_ActiveFadeInfo::ProcessFader(void)",
    ),
    Ok(
        "Sound::daSoundTuner_ActiveFadeInfo::StoreCurrentVolumes(Sound::DuckVolumeSet &)",
    ),
    Ok(
        "Sound::daSoundTuner::daSoundTuner(void)",
    ),
    Ok(
        "Sound::daSoundTuner::~daSoundTuner(void)",
    ),
    Ok(
        "Sound::daSoundTuner::Initialize(void)",
    ),
    Ok(
        "Sound::daSoundTuner::PostScriptLoadInitialize(void)",
    ),
    Ok(
        "Sound::daSoundTuner::ServiceOncePerFrame(unsigned int)",
    ),
    Ok(
        "Sound::daSoundTuner::SetSoundOutputMode(Sound::IDaSoundTuner::SoundOutputMode)",
    ),
    Ok(
        "Sound::daSoundTuner::GetSoundOutputMode(void)",
    ),
    Ok(
        "Sound::daSoundTuner::ActivateDuck(Sound::IDaSoundFadeState *, void *, bool)",
    ),
    Ok(
        "Sound::daSoundTuner::ActivateSituationalDuck(Sound::IDaSoundFadeState *, Sound::DuckSituations, void *, bool)",
    ),
    Ok(
        "Sound::daSoundTuner::ResetDuck(void)",
    ),
    Ok(
        "Sound::daSoundTuner::SetMasterVolume(float)",
    ),
    Ok(
        "Sound::daSoundTuner::GetMasterVolume(void)",
    ),
    Ok(
        "Sound::daSoundTuner::SetDialogueVolume(float)",
    ),
    Ok(
        "Sound::daSoundTuner::GetDialogueVolume(void)",
    ),
    Ok(
        "Sound::daSoundTuner::SetMusicVolume(float)",
    ),
    Ok(
        "Sound::daSoundTuner::GetMusicVolume(void)",
    ),
    Ok(
        "Sound::daSoundTuner::SetAmbienceVolume(float)",
    ),
    Ok(
        "Sound::daSoundTuner::GetAmbienceVolume(void)",
    ),
    Ok(
        "Sound::daSoundTuner::SetSfxVolume(float)",
    ),
    Ok(
        "Sound::daSoundTuner::GetSfxVolume(void)",
    ),
    Ok(
        "Sound::daSoundTuner::SetCarVolume(float)",
    ),
    Ok(
        "Sound::daSoundTuner::GetCarVolume(void)",
    ),
    Ok(
        "Sound::daSoundTuner::FadeSounds(Sound::IDaSoundFadeState *, void *, Fader *, bool, Sound::DuckVolumeSet *)",
    ),
    Ok(
        "Sound::daSoundTuner::WireKnobToPathHelper(IDaSoundResource *, void *)",
    ),
    Ok(
        "Sound::daSoundTuner::WirePath(Sound::daSoundGroup, char const *)",
    ),
    Ok(
        "Sound::daSoundTuner::WireGroup(Sound::daSoundGroup, Sound::daSoundGroup)",
    ),
    Ok(
        "Sound::daSoundTuner::IsSlaveGroup(Sound::daSoundGroup, Sound::daSoundGroup)",
    ),
    Ok(
        "Sound::daSoundTuner::GetGroupTrim(Sound::daSoundGroup)",
    ),
    Ok(
        "Sound::daSoundTuner::SetFaderGroupTrim(Sound::DuckVolumes, float)",
    ),
    Ok(
        "Sound::daSoundTuner::GetFaderGroupTrim(Sound::daSoundGroup)",
    ),
    Ok(
        "Sound::daSoundTuner::MuteNIS(void)",
    ),
    Ok(
        "Sound::daSoundTuner::UnmuteNIS(void)",
    ),
    Ok(
        "Sound::daSoundTuner::activateDuckInternal(Sound::IDaSoundFadeState *, void *, bool, Fader *)",
    ),
    Ok(
        "Sound::daSoundTuner::calculateDuckedVolumes(Sound::DuckVolumeSet &)",
    ),
    Ok(
        "Sound::daSoundTuner::serviceDebugInfo(void)",
    ),
    Ok(
        "Sound::daSoundTunerCreate(Sound::IDaSoundTuner **, int)",
    ),
    Ok(
        "Sound::daSoundTunerWireSystem(Sound::IDaSoundWiring *)",
    ),
    Ok(
        "TunerDebugPage::~TunerDebugPage(void)",
    ),
    Ok(
        "TunerDebugPage::fillLineBuffer(int, char *)",
    ),
    Ok(
        "TunerDebugPage::getNumLines(void)",
    ),
    Ok(
        "daSoundResourceData type_info function",
    ),
    Ok(
        "Sound::daSoundResourceManager type_info function",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion type_info function",
    ),
    Ok(
        "Sound::daSoundDynaLoadManager type_info function",
    ),
    Ok(
        "Sound::daSoundAllocatedResource type_info function",
    ),
    Ok(
        "Sound::daSoundPlayerBase type_info function",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer type_info function",
    ),
    Ok(
        "Sound::MusicSoundPlayer type_info function",
    ),
    Ok(
        "Sound::daSoundAsyncFadeCallback type_info function",
    ),
    Ok(
        "Sound::daSoundPlayerManager type_info function",
    ),
    Ok(
        "Sound::daSoundRenderingManager type_info function",
    ),
    Ok(
        "Fader type_info function",
    ),
    Ok(
        "SoundResourceFilenameBuilder type_info function",
    ),
    Ok(
        "TunerDebugPage type_info function",
    ),
    Ok(
        "Sound::daSoundTuner_ActiveFadeInfo type_info function",
    ),
    Ok(
        "Sound::daSoundTuner type_info function",
    ),
    Ok(
        "radLinkedClass<Sound::daSoundDynaLoadRegion> type_info function",
    ),
    Ok(
        "radLinkedClass<Sound::daSoundPlayerBase> type_info function",
    ),
    Ok(
        "IRadSoundStitchCallback::IRadSoundStitchCallback(void)",
    ),
    Ok(
        "Sound::IDaSoundFadeState::IDaSoundFadeState(void)",
    ),
    Ok(
        "Sound::IDaSoundTuner::IDaSoundTuner(void)",
    ),
    Ok(
        "IDaSoundResource::IDaSoundResource(void)",
    ),
    Ok(
        "Sound::daSoundResourceManager::AddRef(void)",
    ),
    Ok(
        "Sound::daSoundResourceManager::Release(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::AddRef(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::Release(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadManager::AddRef(void)",
    ),
    Ok(
        "Sound::daSoundDynaLoadManager::Release(void)",
    ),
    Ok(
        "Sound::daSoundAllocatedResource::AddRef(void)",
    ),
    Ok(
        "Sound::daSoundAllocatedResource::Release(void)",
    ),
    Ok(
        "Sound::daSoundPlayerBase::~daSoundPlayerBase(void)",
    ),
    Ok(
        "Sound::daSoundPlayerBase::AddRef(void)",
    ),
    Ok(
        "Sound::daSoundPlayerBase::Release(void)",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::SetPitch(float)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::ServiceOncePerFrame(void)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::IsCaptured(void)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::Pause(void)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::Continue(void)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::Stop(void)",
    ),
    Ok(
        "Sound::MusicSoundPlayer::SetPitch(float)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::AddRef(void)",
    ),
    Ok(
        "Sound::daSoundPlayerManager::Release(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::AddRef(void)",
    ),
    Ok(
        "Sound::daSoundRenderingManager::Release(void)",
    ),
    Ok(
        "Fader::AddRef(void)",
    ),
    Ok(
        "Fader::Release(void)",
    ),
    Ok(
        "Sound::daSoundTuner::AddRef(void)",
    ),
    Ok(
        "Sound::daSoundTuner::Release(void)",
    ),
    Ok(
        "IRadSoundStitchCallback type_info function",
    ),
    Ok(
        "Sound::IDaSoundFadeState type_info function",
    ),
    Ok(
        "Sound::IDaSoundTuner type_info function",
    ),
    Ok(
        "IDaSoundResource type_info function",
    ),
    Ok(
        "Sound::IDaSoundWiring::IDaSoundWiring(void)",
    ),
    Ok(
        "IDaSoundResourceData::IDaSoundResourceData(void)",
    ),
    Ok(
        "Sound::IDaSoundWiring type_info function",
    ),
    Ok(
        "IDaSoundResourceData type_info function",
    ),
    Ok(
        "global constructors keyed to radLinkedClass<Sound::daSoundPlayerBase>::s_pLinkedClassHead",
    ),
    Ok(
        "global destructors keyed to radLinkedClass<Sound::daSoundPlayerBase>::s_pLinkedClassHead",
    ),
    Ok(
        "globalSettings::globalSettings(void)",
    ),
    Ok(
        "globalSettings::~globalSettings(void)",
    ),
    Ok(
        "globalSettings::SetMasterVolume(float)",
    ),
    Ok(
        "globalSettings::SetSfxVolume(float)",
    ),
    Ok(
        "globalSettings::SetCarVolume(float)",
    ),
    Ok(
        "globalSettings::SetMusicVolume(float)",
    ),
    Ok(
        "globalSettings::SetDialogueVolume(float)",
    ),
    Ok(
        "globalSettings::SetAmbienceVolume(float)",
    ),
    Ok(
        "globalSettings::SetPeeloutMin(float)",
    ),
    Ok(
        "globalSettings::SetPeeloutMax(float)",
    ),
    Ok(
        "globalSettings::SetPeeloutMaxTrim(float)",
    ),
    Ok(
        "globalSettings::SetSkidRoadClipName(char const *)",
    ),
    Ok(
        "globalSettings::SetSkidDirtClipName(char const *)",
    ),
    Ok(
        "globalSettings::SetFootstepRoadClipName(char const *)",
    ),
    Ok(
        "globalSettings::SetFootstepMetalClipName(char const *)",
    ),
    Ok(
        "globalSettings::SetFootstepWoodClipName(char const *)",
    ),
    Ok(
        "globalSettings::SetCoinPitch(float)",
    ),
    Ok(
        "globalSettings::GetCoinPitch(unsigned int)",
    ),
    Ok(
        "globalSettings::setDuckVolume(Sound::DuckSituations, Sound::DuckVolumes, float)",
    ),
    Ok(
        "GlobalSettingsObjCreate(IGlobalSettings **, int)",
    ),
    Ok(
        "globalSettings type_info function",
    ),
    Ok(
        "radLinkedClass<globalSettings> type_info function",
    ),
    Ok(
        "IGlobalSettings::IGlobalSettings(void)",
    ),
    Ok(
        "globalSettings::AddRef(void)",
    ),
    Ok(
        "globalSettings::Release(void)",
    ),
    Ok(
        "globalSettings::SetPauseSfxVolume(float)",
    ),
    Ok(
        "globalSettings::SetPauseCarVolume(float)",
    ),
    Ok(
        "globalSettings::SetPauseMusicVolume(float)",
    ),
    Ok(
        "globalSettings::SetPauseDialogueVolume(float)",
    ),
    Ok(
        "globalSettings::SetPauseAmbienceVolume(float)",
    ),
    Ok(
        "globalSettings::SetMissionScreenSfxVolume(float)",
    ),
    Ok(
        "globalSettings::SetMissionScreenCarVolume(float)",
    ),
    Ok(
        "globalSettings::SetMissionScreenMusicVolume(float)",
    ),
    Ok(
        "globalSettings::SetMissionScreenDialogueVolume(float)",
    ),
    Ok(
        "globalSettings::SetMissionScreenAmbienceVolume(float)",
    ),
    Ok(
        "globalSettings::SetLetterboxSfxVolume(float)",
    ),
    Ok(
        "globalSettings::SetLetterboxCarVolume(float)",
    ),
    Ok(
        "globalSettings::SetLetterboxMusicVolume(float)",
    ),
    Ok(
        "globalSettings::SetLetterboxDialogueVolume(float)",
    ),
    Ok(
        "globalSettings::SetLetterboxAmbienceVolume(float)",
    ),
    Ok(
        "globalSettings::SetDialogueSfxVolume(float)",
    ),
    Ok(
        "globalSettings::SetDialogueCarVolume(float)",
    ),
    Ok(
        "globalSettings::SetDialogueMusicVolume(float)",
    ),
    Ok(
        "globalSettings::SetDialogueDialogueVolume(float)",
    ),
    Ok(
        "globalSettings::SetDialogueAmbienceVolume(float)",
    ),
    Ok(
        "globalSettings::SetStoreSfxVolume(float)",
    ),
    Ok(
        "globalSettings::SetStoreCarVolume(float)",
    ),
    Ok(
        "globalSettings::SetStoreMusicVolume(float)",
    ),
    Ok(
        "globalSettings::SetStoreDialogueVolume(float)",
    ),
    Ok(
        "globalSettings::SetStoreAmbienceVolume(float)",
    ),
    Ok(
        "globalSettings::SetOnFootSfxVolume(float)",
    ),
    Ok(
        "globalSettings::SetOnFootCarVolume(float)",
    ),
    Ok(
        "globalSettings::SetOnFootMusicVolume(float)",
    ),
    Ok(
        "globalSettings::SetOnFootDialogueVolume(float)",
    ),
    Ok(
        "globalSettings::SetOnFootAmbienceVolume(float)",
    ),
    Ok(
        "globalSettings::SetMinigameSfxVolume(float)",
    ),
    Ok(
        "globalSettings::SetMinigameCarVolume(float)",
    ),
    Ok(
        "globalSettings::SetMinigameMusicVolume(float)",
    ),
    Ok(
        "globalSettings::SetMinigameDialogueVolume(float)",
    ),
    Ok(
        "globalSettings::SetMinigameAmbienceVolume(float)",
    ),
    Ok(
        "globalSettings::SetJustMusicSfxVolume(float)",
    ),
    Ok(
        "globalSettings::SetJustMusicCarVolume(float)",
    ),
    Ok(
        "globalSettings::SetJustMusicMusicVolume(float)",
    ),
    Ok(
        "globalSettings::SetJustMusicDialogueVolume(float)",
    ),
    Ok(
        "globalSettings::SetJustMusicAmbienceVolume(float)",
    ),
    Ok(
        "globalSettings::SetCreditsSfxVolume(float)",
    ),
    Ok(
        "globalSettings::SetCreditsCarVolume(float)",
    ),
    Ok(
        "globalSettings::SetCreditsMusicVolume(float)",
    ),
    Ok(
        "globalSettings::SetCreditsDialogueVolume(float)",
    ),
    Ok(
        "globalSettings::SetCreditsAmbienceVolume(float)",
    ),
    Ok(
        "IGlobalSettings type_info function",
    ),
    Ok(
        "SoundDebugDisplay::SoundDebugDisplay(Sound::daSoundRenderingManager *)",
    ),
    Ok(
        "SoundDebugDisplay::~SoundDebugDisplay(void)",
    ),
    Ok(
        "SoundDebugDisplay::DeregisterPage(SoundDebugPage *)",
    ),
    Ok(
        "SoundDebugPage::~SoundDebugPage(void)",
    ),
    Ok(
        "SoundDebugDisplay type_info function",
    ),
    Ok(
        "SoundDebugPage type_info function",
    ),
    Ok(
        "MovingSoundManager::MovingSoundManager(void)",
    ),
    Ok(
        "MovingSoundManager::~MovingSoundManager(void)",
    ),
    Ok(
        "MovingSoundManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "MovingSoundManager::ServiceOncePerFrame(void)",
    ),
    Ok(
        "MovingSoundManager::addTrafficSound(char const *, Vehicle *, bool)",
    ),
    Ok(
        "MovingSoundManager::stopTrafficSound(Vehicle *)",
    ),
    Ok(
        "MovingSoundManager::addAISound(char const *, Vehicle *, bool)",
    ),
    Ok(
        "MovingSoundManager::stopAISound(Vehicle *)",
    ),
    Ok(
        "MovingSoundManager::handleTrafficHornEvent(Vehicle *)",
    ),
    Ok(
        "MovingSoundManager::makeCarGoBoom(Vehicle *)",
    ),
    Ok(
        "MovingSoundManager::startPlatformSound(AnimSoundData *)",
    ),
    Ok(
        "MovingSoundManager::stopPlatformSound(ActionButton::AnimSwitch *)",
    ),
    Ok(
        "MovingSoundManager::startAnimObjSound(AnimSoundDSGData *)",
    ),
    Ok(
        "MovingSoundManager::stopAnimObjSound(AnimCollisionEntityDSG *)",
    ),
    Ok(
        "MovingSoundManager::hasOverlayClip(Vehicle *, carSoundParameters **)",
    ),
    Ok(
        "MovingSoundManager::toggleOverlayClip(Vehicle *)",
    ),
    Ok(
        "MovingSoundManager::getPositionalSettingName(Vehicle *, bool)",
    ),
    Ok(
        "MovingSoundManager::startWaspSound(Actor *)",
    ),
    Ok(
        "VehiclePositionalSoundPlayer::VehiclePositionalSoundPlayer(void)",
    ),
    Ok(
        "VehiclePositionalSoundPlayer::~VehiclePositionalSoundPlayer(void)",
    ),
    Ok(
        "VehiclePositionalSoundPlayer::ActivateByName(char const *, Vehicle *)",
    ),
    Ok(
        "VehiclePositionalSoundPlayer::Activate(positionalSoundSettings *, char const *, Vehicle *)",
    ),
    Ok(
        "VehiclePositionalSoundPlayer::Deactivate(void)",
    ),
    Ok(
        "VehiclePositionalSoundPlayer::GetPosition(radSoundVector &)",
    ),
    Ok(
        "VehiclePositionalSoundPlayer::GetVelocity(radSoundVector &)",
    ),
    Ok(
        "VehiclePositionalSoundPlayer::ServiceOncePerFrame(void)",
    ),
    Ok(
        "VehiclePositionalSoundPlayer::UsesVehicle(Vehicle *)",
    ),
    Ok(
        "VehiclePositionalSoundPlayer::BlowUp(void)",
    ),
    Ok(
        "AIVehicleSoundPlayer::AIVehicleSoundPlayer(void)",
    ),
    Ok(
        "AIVehicleSoundPlayer::~AIVehicleSoundPlayer(void)",
    ),
    Ok(
        "AIVehicleSoundPlayer::ServiceOncePerFrame(void)",
    ),
    Ok(
        "TrafficSoundPlayer::TrafficSoundPlayer(void)",
    ),
    Ok(
        "TrafficSoundPlayer::~TrafficSoundPlayer(void)",
    ),
    Ok(
        "TrafficSoundPlayer::InitializeClass(unsigned int)",
    ),
    Ok(
        "TrafficSoundPlayer::Activate(positionalSoundSettings *, char const *, Vehicle *)",
    ),
    Ok(
        "TrafficSoundPlayer::Deactivate(void)",
    ),
    Ok(
        "TrafficSoundPlayer::ServiceOncePerFrame(void)",
    ),
    Ok(
        "TrafficSoundPlayer::ServiceTimerList(void)",
    ),
    Ok(
        "TrafficSoundPlayer::OnTimerDone(unsigned int, void *)",
    ),
    Ok(
        "TrafficSoundPlayer::HonkHorn(void)",
    ),
    Ok(
        "TrafficSoundPlayer::AddOverlayClip(carSoundParameters *, char const *)",
    ),
    Ok(
        "TrafficSoundPlayer::ToggleOverlayClip(carSoundParameters *, char const *)",
    ),
    Ok(
        "AvatarVehiclePosnPlayer::AvatarVehiclePosnPlayer(void)",
    ),
    Ok(
        "AvatarVehiclePosnPlayer::~AvatarVehiclePosnPlayer(void)",
    ),
    Ok(
        "AvatarVehiclePosnPlayer::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "AvatarVehiclePosnPlayer::StartPositionalIdle(Vehicle *)",
    ),
    Ok(
        "ActorPlayer::ActorPlayer(void)",
    ),
    Ok(
        "ActorPlayer::~ActorPlayer(void)",
    ),
    Ok(
        "ActorPlayer::GetPosition(radSoundVector &)",
    ),
    Ok(
        "ActorPlayer::GetVelocity(radSoundVector &)",
    ),
    Ok(
        "ActorPlayer::ServiceOncePerFrame(void)",
    ),
    Ok(
        "ActorPlayer::OnPlaybackComplete(void)",
    ),
    Ok(
        "ActorPlayer::OnSoundReady(void)",
    ),
    Ok(
        "ActorPlayer::playSound(positionalSoundSettings *, char const *, Actor *)",
    ),
    Ok(
        "ActorPlayer::deactivate(void)",
    ),
    Ok(
        "WaspSoundPlayer::WaspSoundPlayer(void)",
    ),
    Ok(
        "WaspSoundPlayer::~WaspSoundPlayer(void)",
    ),
    Ok(
        "WaspSoundPlayer::Activate(Actor *)",
    ),
    Ok(
        "WaspSoundPlayer::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "WaspSoundPlayer::OnPlaybackComplete(void)",
    ),
    Ok(
        "WaspSoundPlayer::deactivate(void)",
    ),
    Ok(
        "WaspSoundPlayer::safeStop(void)",
    ),
    Ok(
        "WaspSoundPlayer::playWaspSound(char const *, Actor *)",
    ),
    Ok(
        "PlatformSoundPlayer::PlatformSoundPlayer(void)",
    ),
    Ok(
        "PlatformSoundPlayer::~PlatformSoundPlayer(void)",
    ),
    Ok(
        "PlatformSoundPlayer::Activate(AnimSoundData *)",
    ),
    Ok(
        "PlatformSoundPlayer::Deactivate(void)",
    ),
    Ok(
        "PlatformSoundPlayer::ServiceOncePerFrame(void)",
    ),
    Ok(
        "PlatformSoundPlayer::GetPosition(radSoundVector &)",
    ),
    Ok(
        "PlatformSoundPlayer::GetVelocity(radSoundVector &)",
    ),
    Ok(
        "AnimObjSoundPlayer::AnimObjSoundPlayer(void)",
    ),
    Ok(
        "AnimObjSoundPlayer::~AnimObjSoundPlayer(void)",
    ),
    Ok(
        "AnimObjSoundPlayer::Activate(AnimSoundDSGData *)",
    ),
    Ok(
        "AnimObjSoundPlayer::Deactivate(void)",
    ),
    Ok(
        "AnimObjSoundPlayer::ServiceOncePerFrame(void)",
    ),
    Ok(
        "AnimObjSoundPlayer::GetPosition(radSoundVector &)",
    ),
    Ok(
        "AnimObjSoundPlayer::GetVelocity(radSoundVector &)",
    ),
    Ok(
        "VehiclePositionalSoundPlayer type_info function",
    ),
    Ok(
        "TrafficSoundPlayer type_info function",
    ),
    Ok(
        "AIVehicleSoundPlayer type_info function",
    ),
    Ok(
        "AvatarVehiclePosnPlayer type_info function",
    ),
    Ok(
        "ActorPlayer type_info function",
    ),
    Ok(
        "WaspSoundPlayer type_info function",
    ),
    Ok(
        "PlatformSoundPlayer type_info function",
    ),
    Ok(
        "AnimObjSoundPlayer type_info function",
    ),
    Ok(
        "MovingSoundManager type_info function",
    ),
    Ok(
        "global constructors keyed to MovingSoundManager::s_waspUID",
    ),
    Ok(
        "UnRegisterMappableHandle(int, int &)",
    ),
    Ok(
        "Avatar::Avatar(void)",
    ),
    Ok(
        "Avatar::~Avatar(void)",
    ),
    Ok(
        "Avatar::Destroy(void)",
    ),
    Ok(
        "Avatar::SetControllerId(int)",
    ),
    Ok(
        "Avatar::GetCharacter(void) const",
    ),
    Ok(
        "Avatar::SetCharacter(Character *)",
    ),
    Ok(
        "Avatar::GetVehicle(void) const",
    ),
    Ok(
        "Avatar::SetVehicle(Vehicle *)",
    ),
    Ok(
        "Avatar::SetInCarController(void)",
    ),
    Ok(
        "Avatar::SetCameraTargetToVehicle(bool)",
    ),
    Ok(
        "Avatar::GetIntoVehicleStart(Vehicle *)",
    ),
    Ok(
        "Avatar::GetIntoVehicleEnd(Vehicle *)",
    ),
    Ok(
        "Avatar::GetOutOfVehicleStart(Vehicle *)",
    ),
    Ok(
        "Avatar::SetOutOfCarController(void)",
    ),
    Ok(
        "Avatar::SetCameraTargetToCharacter(bool)",
    ),
    Ok(
        "Avatar::GetOutOfVehicleEnd(Vehicle *)",
    ),
    Ok(
        "Avatar::IsInCar(void) const",
    ),
    Ok(
        "Avatar::GetPosition(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "Avatar::GetHeading(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "Avatar::GetVelocity(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "Avatar::GetSpeedMps(void) const",
    ),
    Ok(
        "Avatar::OnCheatEntered(eCheatID, bool)",
    ),
    Ok(
        "Avatar::Update(float)",
    ),
    Ok(
        "Avatar::GetLastPathInfo(RoadManager::PathElement &, RoadSegment *&, float &, float &)",
    ),
    Ok(
        "Avatar::GetRaceInfo(float &, int &, int &)",
    ),
    Ok(
        "Avatar::SetRaceInfo(float, int, int)",
    ),
    Ok(
        "AvatarManager::CreateInstance(void)",
    ),
    Ok(
        "AvatarManager::GetInstance(void)",
    ),
    Ok(
        "AvatarManager::DestroyInstance(void)",
    ),
    Ok(
        "AvatarManager::AvatarManager(void)",
    ),
    Ok(
        "AvatarManager::~AvatarManager(void)",
    ),
    Ok(
        "AvatarManager::Destroy(void)",
    ),
    Ok(
        "AvatarManager::EnterGame(void)",
    ),
    Ok(
        "AvatarManager::ExitGame(void)",
    ),
    Ok(
        "AvatarManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "AvatarManager::GetAvatarForPlayer(int)",
    ),
    Ok(
        "AvatarManager::PutCharacterInCar(Character *, Vehicle *)",
    ),
    Ok(
        "AvatarManager::PutCharacterOnGround(Character *, Vehicle *)",
    ),
    Ok(
        "AvatarManager::Update(float)",
    ),
    Ok(
        "AvatarManager::FindAvatarForCharacter(Character *)",
    ),
    Ok(
        "AvatarManager::GetAvatarForVehicle(Vehicle *)",
    ),
    Ok(
        "AvatarManager::IsAvatarGettingInOrOutOfCar(int)",
    ),
    Ok(
        "GroundPlanePool::GroundPlanePool(int)",
    ),
    Ok(
        "GroundPlanePool::~GroundPlanePool(void)",
    ),
    Ok(
        "GroundPlanePool::GetNewGroundPlane(sim::SimState *)",
    ),
    Ok(
        "GroundPlanePool::UpdateGroundPlane(int, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "GroundPlanePool::EnableCollision(int)",
    ),
    Ok(
        "GroundPlanePool::DisableCollision(int)",
    ),
    Ok(
        "GroundPlanePool::FreeGroundPlane(int)",
    ),
    Ok(
        "GroundPlanePool::FreeAllGroundPlanes(void)",
    ),
    Ok(
        "GroundPlanePool::GetSimState(int)",
    ),
    Ok(
        "HitnRunManager::CreateInstance(void)",
    ),
    Ok(
        "HitnRunManager::GetInstance(void)",
    ),
    Ok(
        "HitnRunManager::DestroyInstance(void)",
    ),
    Ok(
        "HitnRunManager::HitnRunManager(void)",
    ),
    Ok(
        "HitnRunManager::~HitnRunManager(void)",
    ),
    Ok(
        "HitnRunManager::Destroy(void)",
    ),
    Ok(
        "HitnRunManager::Init(void)",
    ),
    Ok(
        "HitnRunManager::ResetState(void)",
    ),
    Ok(
        "HitnRunManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "HitnRunManager::Update(int)",
    ),
    Ok(
        "HitnRunManager::GetHitnRunValue(void) const",
    ),
    Ok(
        "HitnRunManager::SetHitnRunValue(float)",
    ),
    Ok(
        "HitnRunManager::HasntBeenHit(void *)",
    ),
    Ok(
        "HitnRunManager::RegisterHit(void *)",
    ),
    Ok(
        "HitnRunManager::DoesObjectGiveCoins(CollisionEntityDSG *)",
    ),
    Ok(
        "HitnRunManager::RegisterVehicleImmunity(Vehicle *)",
    ),
    Ok(
        "VehicleCentral::VehicleCentral(void)",
    ),
    Ok(
        "VehicleCentral::SetupConsoleFunctionsForVehicleTuning(void)",
    ),
    Ok(
        "VehicleCentral::~VehicleCentral(void)",
    ),
    Ok(
        "VehicleCentral::GetInstance(void)",
    ),
    Ok(
        "VehicleCentral::CreateInstance(void)",
    ),
    Ok(
        "VehicleCentral::DestroyInstance(void)",
    ),
    Ok(
        "VehicleCentral::PreLoad(void)",
    ),
    Ok(
        "VehicleCentral::Unload(void)",
    ),
    Ok(
        "VehicleCentral::InitVehicle(char const *, bool, char *, VehicleType, VehicleCentral::DriverInit, bool, bool)",
    ),
    Ok(
        "VehicleCentral::AddVehicleToActiveList(Vehicle *)",
    ),
    Ok(
        "VehicleCentral::RemoveVehicleFromActiveList(Vehicle *)",
    ),
    Ok(
        "VehicleCentral::GetVehicle(int) const",
    ),
    Ok(
        "VehicleCentral::SetVehicleController(int, VehicleController *)",
    ),
    Ok(
        "VehicleCentral::RemoveVehicleController(int)",
    ),
    Ok(
        "VehicleCentral::GetVehicleController(int) const",
    ),
    Ok(
        "VehicleCentral::GetVehicleId(Vehicle *, bool) const",
    ),
    Ok(
        "VehicleCentral::PreSubstepUpdate(float)",
    ),
    Ok(
        "VehicleCentral::Update(float)",
    ),
    Ok(
        "VehicleCentral::PostSubstepUpdate(float)",
    ),
    Ok(
        "VehicleCentral::PreCollisionPrep(float, bool)",
    ),
    Ok(
        "VehicleCentral::SubmitStatics(void)",
    ),
    Ok(
        "VehicleCentral::SubmitDynamics(void)",
    ),
    Ok(
        "VehicleCentral::SubmitAnimCollisions(void)",
    ),
    Ok(
        "VehicleCentral::GetVehicleByName(char const *) const",
    ),
    Ok(
        "VehicleCentral::GetVehicleByUID(tUidUnaligned) const",
    ),
    Ok(
        "VehicleCentral::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "VehicleCentral::ActivateVehicleTriggers(bool)",
    ),
    Ok(
        "VehicleCentral::ClearSuppressedDrivers(void)",
    ),
    Ok(
        "VehicleCentral::AddSuppressedDriver(char const *)",
    ),
    Ok(
        "VehicleCentral::RemoveSuppressedDriver(char const *)",
    ),
    Ok(
        "VehicleCentral::IsDriverSuppressed(char const *)",
    ),
    Ok(
        "VehicleCentral::SetupDriver(Vehicle *)",
    ),
    Ok(
        "VehicleCentral::IsCarUnderConstruction(Vehicle const *)",
    ),
    Ok(
        "VehicleCentral::GetVehicleAI(Vehicle *)",
    ),
    Ok(
        "VehicleCentral::DetachAllCollectibles(void)",
    ),
    Ok(
        "WorldCollisionSolverAgentManager::WorldCollisionSolverAgentManager(void)",
    ),
    Ok(
        "WorldCollisionSolverAgentManager::~WorldCollisionSolverAgentManager(void)",
    ),
    Ok(
        "WorldCollisionSolverAgentManager::CollisionEvent(sim::SimState *, int, sim::SimState *, int, RadicalMathLibrary::Vector const &, float, float, sim::SimulatedObject **, sim::SimulatedObject **)",
    ),
    Ok(
        "WorldCollisionSolverAgentManager::PreCollisionEvent(sim::Collision &, int)",
    ),
    Ok(
        "WorldCollisionSolverAgentManager::TestImpulse(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "WorldCollisionSolverAgentManager::TestCache(sim::SimState *, int)",
    ),
    Ok(
        "WorldCollisionSolverAgentManager::EndObjectCollision(sim::SimState *, int)",
    ),
    Ok(
        "WorldCollisionSolverAgentManager::ResetCollisionFlags(void)",
    ),
    Ok(
        "WorldObject::~WorldObject(void)",
    ),
    Ok(
        "WorldObject::Display(void)",
    ),
    Ok(
        "WorldPhysicsManager::WorldPhysicsManager(void)",
    ),
    Ok(
        "WorldPhysicsManager::~WorldPhysicsManager(void)",
    ),
    Ok(
        "WorldPhysicsManager::GetInstance(void)",
    ),
    Ok(
        "WorldPhysicsManager::CreateInstance(void)",
    ),
    Ok(
        "WorldPhysicsManager::Init(void)",
    ),
    Ok(
        "WorldPhysicsManager::ToggleTimerState(void)",
    ),
    Ok(
        "WorldPhysicsManager::ApplyForceToDynamicsSpherical(int, RadicalMathLibrary::Vector const &, float, float, WorldPhysicsManager::CollisionEntityDSGList *)",
    ),
    Ok(
        "WorldPhysicsManager::InitCollisionManager(void)",
    ),
    Ok(
        "WorldPhysicsManager::EmptyCollisionAreaIndex(int)",
    ),
    Ok(
        "WorldPhysicsManager::FreeCollisionAreaIndex(int)",
    ),
    Ok(
        "WorldPhysicsManager::RemoveFromAnyOtherCurrentDynamicsListAndCollisionArea(DynaPhysDSG *)",
    ),
    Ok(
        "WorldPhysicsManager::OnQuitLevel(void)",
    ),
    Ok(
        "WorldPhysicsManager::GetCameraCollisionAreaIndex(void)",
    ),
    Ok(
        "WorldPhysicsManager::GetVehicleCollisionAreaIndex(void)",
    ),
    Ok(
        "WorldPhysicsManager::GetCharacterCollisionAreaIndex(void)",
    ),
    Ok(
        "WorldPhysicsManager::DestroyInstance(void)",
    ),
    Ok(
        "WorldPhysicsManager::Update(unsigned int)",
    ),
    Ok(
        "WorldPhysicsManager::DebugInfoDisplay(void)",
    ),
    Ok(
        "WorldPhysicsManager::WorldSimSubstepGuts(float, bool)",
    ),
    Ok(
        "WorldPhysicsManager::SubmitStaticsPseudoCallback(RadicalMathLibrary::Vector &, float, int, sim::SimState *, bool)",
    ),
    Ok(
        "WorldPhysicsManager::SubmitAnimCollisionsPseudoCallback(RadicalMathLibrary::Vector &, float, int, sim::SimState *)",
    ),
    Ok(
        "WorldPhysicsManager::SubmitAnimCollisionsForUpdateOnly(RadicalMathLibrary::Vector &, float, int)",
    ),
    Ok(
        "WorldPhysicsManager::SubmitDynamicsPseudoCallback(RadicalMathLibrary::Vector &, float, int, sim::SimState *, bool)",
    ),
    Ok(
        "WorldPhysicsManager::PurgeDynamics(int)",
    ),
    Ok(
        "WorldPhysicsManager::UpdateSimluatingDynamicObjectGroundPlanes(void)",
    ),
    Ok(
        "WorldPhysicsManager::GetNewGroundPlane(sim::SimState *)",
    ),
    Ok(
        "WorldPhysicsManager::FreeGroundPlane(int)",
    ),
    Ok(
        "WorldPhysicsManager::EnableGroundPlaneCollision(int)",
    ),
    Ok(
        "WorldPhysicsManager::DisableGroundPlaneCollision(int)",
    ),
    Ok(
        "WorldPhysicsManager::UpdateDynamicObjects(float, int)",
    ),
    Ok(
        "WorldPhysicsManager::UpdateAnimCollisions(float, int)",
    ),
    Ok(
        "WorldPhysicsManager::SubmitFencePiecesPseudoCallback(RadicalMathLibrary::Vector &, float, int, sim::SimState *, bool)",
    ),
    Ok(
        "WorldPhysicsManager::UpdateFencePiece(RadicalMathLibrary::Vector &, sim::ManualSimState *, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, sim::SimState *)",
    ),
    Ok(
        "WorldPhysicsManager::FenceSanityCheck(unsigned int, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "HuskPool::HuskPool(void)",
    ),
    Ok(
        "HuskPool::~HuskPool(void)",
    ),
    Ok(
        "HuskPool::Init(int)",
    ),
    Ok(
        "HuskPool::Empty(void)",
    ),
    Ok(
        "HuskPool::RequestHusk(VehicleType, Vehicle *)",
    ),
    Ok(
        "HuskPool::FreeHusk(Vehicle *)",
    ),
    Ok(
        "HuskPool::IsHuskType(VehicleEnum::VehicleID)",
    ),
    Ok(
        "HuskPool::FindOriginalVehicleGivenHusk(Vehicle *)",
    ),
    Ok(
        "HuskPool::FindHuskGivenOriginalVehicle(Vehicle *)",
    ),
    Ok(
        "HuskPool::WillMakeConvincingHusk(Vehicle *)",
    ),
    Ok(
        "Avatar type_info function",
    ),
    Ok(
        "VehicleCentral type_info function",
    ),
    Ok(
        "AvatarManager type_info function",
    ),
    Ok(
        "HitnRunManager type_info function",
    ),
    Ok(
        "WorldCollisionSolverAgentManager type_info function",
    ),
    Ok(
        "WorldObject type_info function",
    ),
    Ok(
        "WorldPhysicsManager::FencePieces::FencePieces(void)",
    ),
    Ok(
        "global constructors keyed to Avatar::s_displayCoordinates",
    ),
    Ok(
        "CoinManager::CreateInstance(void)",
    ),
    Ok(
        "CoinManager::GetInstance(void)",
    ),
    Ok(
        "CoinManager::DestroyInstance(void)",
    ),
    Ok(
        "CoinManager::CoinManager(void)",
    ),
    Ok(
        "CoinManager::~CoinManager(void)",
    ),
    Ok(
        "CoinManager::Destroy(void)",
    ),
    Ok(
        "CoinManager::Init(void)",
    ),
    Ok(
        "CoinManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CoinManager::GetInactiveCoin(void)",
    ),
    Ok(
        "CoinManager::SpawnCoins(int, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const *, bool)",
    ),
    Ok(
        "CoinManager::SpawnCoins(int, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const *, bool)",
    ),
    Ok(
        "CoinManager::SpawnInstantCoins(int, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "CoinManager::SpawnCoin(CoinManager::ActiveCoin &, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const *, bool)",
    ),
    Ok(
        "CoinManager::AddFlyDownCoin(void)",
    ),
    Ok(
        "CoinManager::Update(int)",
    ),
    Ok(
        "CoinManager::OnVehicleDestroyed(Vehicle *)",
    ),
    Ok(
        "CoinManager::SetCoinDrawable(tDrawable *)",
    ),
    Ok(
        "CoinManager::CheckCollection(CoinManager::ActiveCoin &, RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "CoinManager::CollectCoins(int)",
    ),
    Ok(
        "CoinManager::LoseCoins(int, RadicalMathLibrary::Vector const *)",
    ),
    Ok(
        "CoinManager::GetBankValue(void) const",
    ),
    Ok(
        "CoinManager::AdjustBankValue(int)",
    ),
    Ok(
        "CoinManager::AddWorldCoin(RadicalMathLibrary::Vector const &, tUidUnaligned)",
    ),
    Ok(
        "CoinManager::RemoveWorldCoins(tUidUnaligned)",
    ),
    Ok(
        "CoinManager::UpdateCollecting(CoinManager::ActiveCoin &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "CoinManager::UpdateSpawning(CoinManager::ActiveCoin &, RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "CoinManager::AddGlint(CoinManager::ActiveCoin &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "CoinManager::UpdateHUDFlying(CoinManager::ActiveCoin &)",
    ),
    Ok(
        "CoinManager::ClearHUDCoins(void)",
    ),
    Ok(
        "CoinManager::Render(void)",
    ),
    Ok(
        "CoinManager::SetHUDCoin(int, int, bool)",
    ),
    Ok(
        "CoinManager::OnCheatEntered(eCheatID, bool)",
    ),
    Ok(
        "CoinManager::HUDRender(void)",
    ),
    Ok(
        "Sparkle::CreateInstance(unsigned char, unsigned short)",
    ),
    Ok(
        "Sparkle::GetInstance(void)",
    ),
    Ok(
        "Sparkle::DestroyInstance(void)",
    ),
    Ok(
        "Sparkle::Sparkle(unsigned char, unsigned short)",
    ),
    Ok(
        "Sparkle::~Sparkle(void)",
    ),
    Ok(
        "Sparkle::Init(void)",
    ),
    Ok(
        "Sparkle::Destroy(void)",
    ),
    Ok(
        "Sparkle::SetTexture(unsigned char, tTexture *)",
    ),
    Ok(
        "Sparkle::GetInactiveSparkle(void)",
    ),
    Ok(
        "Sparkle::AddSparkle(RadicalMathLibrary::Vector const &, float, float, RadicalMathLibrary::Vector const &, Sparkle::eSparkleEffect)",
    ),
    Ok(
        "Sparkle::AddGagSparkle(RadicalMathLibrary::Vector const &, float, float, unsigned int)",
    ),
    Ok(
        "Sparkle::AddSparks(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Sparkle::AddBottomOut(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "Sparkle::AddDash(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Sparkle::AddLanding(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Sparkle::AddShockRing(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Sparkle::AddPaintChips(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, pddiColour, float)",
    ),
    Ok(
        "Sparkle::AddStars(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Sparkle::AddSmoke(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Sparkle::Update(unsigned int)",
    ),
    Ok(
        "Sparkle::ActiveSparkle::ActiveSparkle(void)",
    ),
    Ok(
        "Sparkle::Render(Sparkle::eSparkleRenderMode)",
    ),
    Ok(
        "Sparkle::HUDRender(void)",
    ),
    Ok(
        "CoinManager type_info function",
    ),
    Ok(
        "global constructors keyed to CoinManager::spCoinManager",
    ),
    Ok(
        "global destructors keyed to CoinManager::spCoinManager",
    ),
    Ok(
        "Wander::Wander(void)",
    ),
    Ok(
        "Wander::~Wander(void)",
    ),
    Ok(
        "Wander::Tick(Character &)",
    ),
    Ok(
        "AICharacterController::Update(float)",
    ),
    Ok(
        "AICharacterController::GetValue(int) const",
    ),
    Ok(
        "AICharacterController::IsButtonDown(int) const",
    ),
    Ok(
        "NPCharacter::NPCharacter(void)",
    ),
    Ok(
        "NPCharacter::~NPCharacter(void)",
    ),
    Ok(
        "NPCharacter::OnUpdateRoot(float)",
    ),
    Ok(
        "NPCharacter::OnPostSimUpdate(float)",
    ),
    Ok(
        "Character::Character(void)",
    ),
    Ok(
        "Character::Init(void)",
    ),
    Ok(
        "Character::InitGroundPlane(void)",
    ),
    Ok(
        "Character::SetPuppet(choreo::Puppet *)",
    ),
    Ok(
        "Character::SetYAdjust(float)",
    ),
    Ok(
        "Character::ResetSpeed(void)",
    ),
    Ok(
        "Character::Kick(void)",
    ),
    Ok(
        "Character::Slam(void)",
    ),
    Ok(
        "Character::RelocateAndReset(RadicalMathLibrary::Vector const &, float, bool, bool)",
    ),
    Ok(
        "Character::AddToPhysics(void)",
    ),
    Ok(
        "Character::RemoveFromPhysics(void)",
    ),
    Ok(
        "NPCharacter::AddToPhysics(void)",
    ),
    Ok(
        "NPCharacter::RemoveFromPhysics(void)",
    ),
    Ok(
        "Character::~Character(void)",
    ),
    Ok(
        "Character::UpdateParentTransform(float)",
    ),
    Ok(
        "Character::SetParentTransform(RadicalMathLibrary::Matrix const &, float)",
    ),
    Ok(
        "Character::UpdateGroundPlane(float)",
    ),
    Ok(
        "Character::PreSimUpdate(float)",
    ),
    Ok(
        "Character::ResetCollisions(void)",
    ),
    Ok(
        "Character::UpdateController(RadicalMathLibrary::Vector &, float)",
    ),
    Ok(
        "Character::UpdateDesiredDirAndSpeed(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "Character::UpdateRoot(float)",
    ),
    Ok(
        "Character::OnUpdateRoot(float)",
    ),
    Ok(
        "Character::UpdatePuppet(float)",
    ),
    Ok(
        "Character::TestInAnyonesFrustrum(void)",
    ),
    Ok(
        "Character::PostSimUpdate(float)",
    ),
    Ok(
        "Character::ResolveCollisions(void)",
    ),
    Ok(
        "Character::UpdateFootPlant(void)",
    ),
    Ok(
        "Character::OnPostSimUpdate(float)",
    ),
    Ok(
        "Character::UpdateShock(float)",
    ),
    Ok(
        "Character::AddToWorldScene(void)",
    ),
    Ok(
        "Character::RemoveFromWorldScene(void)",
    ),
    Ok(
        "Character::MoveInWorldScene(void)",
    ),
    Ok(
        "Character::UpdateSimState(float)",
    ),
    Ok(
        "Character::UpdateBBox(RadicalMathLibrary::Box3D &)",
    ),
    Ok(
        "Character::PreReactToCollision(sim::SimState *, sim::Collision &)",
    ),
    Ok(
        "Character::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "Character::SolveCollisionWithStatic(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "Character::GetMaxSpeed(void) const",
    ),
    Ok(
        "Character::GetTerrainIntersect(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "Character::GetTerrainType(eTerrainType &, bool &) const",
    ),
    Ok(
        "Character::SnapToGround(void)",
    ),
    Ok(
        "Character::UpdateGroundHeight(void)",
    ),
    Ok(
        "Character::pPosition(void)",
    ),
    Ok(
        "Character::rPosition(void)",
    ),
    Ok(
        "Character::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "Character::SetFadeAlpha(int)",
    ),
    Ok(
        "Character::CastsShadow(void)",
    ),
    Ok(
        "Character::DisplayShadow(void)",
    ),
    Ok(
        "Character::DisplaySimpleShadow(void)",
    ),
    Ok(
        "Character::CanPlayAnimation(tName const &) const",
    ),
    Ok(
        "Character::CanStandOnCollisionNormal(RadicalMathLibrary::Vector const &) const",
    ),
    Ok(
        "Character::FindStandingVolume(RadicalMathLibrary::Vector const &, sim::CollisionVolume *, RadicalMathLibrary::Vector &, float &)",
    ),
    Ok(
        "Character::GetCollisionHeight(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "Character::SetStandingJoint(poser::Joint const *)",
    ),
    Ok(
        "Character::SetGroundPoint(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "Character::UpdateTransformToLoco(void)",
    ),
    Ok(
        "Character::AssignCollisionAreaIndex(void)",
    ),
    Ok(
        "Character::UpdateTransformToInCar(void)",
    ),
    Ok(
        "Character::SetInCar(bool)",
    ),
    Ok(
        "Character::GetActionButtonHandler(void) const",
    ),
    Ok(
        "Character::AddActionButtonHandler(ActionButton::ButtonHandler *)",
    ),
    Ok(
        "Character::RemoveActionButtonHandler(ActionButton::ButtonHandler *)",
    ),
    Ok(
        "Character::TestPriority(ActionButton::ButtonHandler *, ActionButton::ButtonHandler *)",
    ),
    Ok(
        "Character::ClearAllActionButtonHandlers(void)",
    ),
    Ok(
        "Character::Prop::Prop(void)",
    ),
    Ok(
        "Character::Prop::~Prop(void)",
    ),
    Ok(
        "Character::TouchProp(InstDynaPhysDSG *)",
    ),
    Ok(
        "Character::AttachProp(InstDynaPhysDSG *)",
    ),
    Ok(
        "Character::UpdatePhysicsObjects(float, int)",
    ),
    Ok(
        "Character::SubmitStatics(void)",
    ),
    Ok(
        "Character::SubmitAnimCollisions(void)",
    ),
    Ok(
        "Character::SubmitDynamics(void)",
    ),
    Ok(
        "Character::PosInFrustrumOfPlayer(RadicalMathLibrary::Vector const &, int)",
    ),
    Ok(
        "Character::TestInFrustrumOfPlayer(int)",
    ),
    Ok(
        "Character::SetShadowColour(pddiColour)",
    ),
    Ok(
        "Character::GetShadowColour(void)",
    ),
    Ok(
        "Character::SetSwatch(int)",
    ),
    Ok(
        "Character::SetDrawable(CharacterRenderable *)",
    ),
    Ok(
        "Character::Shock(float)",
    ),
    Ok(
        "Character::DoKickwave(void)",
    ),
    Ok(
        "Character::OnTransitToAICtrl(void)",
    ),
    Ok(
        "Character::Display(void)",
    ),
    Ok(
        "Character::SetAmbient(char const *, float)",
    ),
    Ok(
        "Character::EnableAmbientDialogue(bool)",
    ),
    Ok(
        "Character::ResetAmbientPosition(void)",
    ),
    Ok(
        "NPCharacter::UpdatePhysicsObjects(float, int)",
    ),
    Ok(
        "NPCharacter::AssignCollisionAreaIndex(void)",
    ),
    Ok(
        "NPCharacter::SubmitStatics(void)",
    ),
    Ok(
        "NPCharacter::SubmitDynamics(void)",
    ),
    Ok(
        "NPCharacter::OnTransitToAICtrl(void)",
    ),
    Ok(
        "NPCharacter::ApplyForce(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "NPCharacter::ApplyKickForce(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "CharacterController::CharacterController(void)",
    ),
    Ok(
        "CharacterController::~CharacterController(void)",
    ),
    Ok(
        "CharacterController::GetCharacter(void) const",
    ),
    Ok(
        "CharacterController::SetCharacter(Character *)",
    ),
    Ok(
        "PhysicalController::PhysicalController(void)",
    ),
    Ok(
        "PhysicalController::~PhysicalController(void)",
    ),
    Ok(
        "PhysicalController::SetCharacterMappable(CharacterMappable *)",
    ),
    Ok(
        "PhysicalController::GetDirection(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "PhysicalController::GetValue(int) const",
    ),
    Ok(
        "PhysicalController::IsButtonDown(int) const",
    ),
    Ok(
        "PhysicalController::TimeSinceChange(int) const",
    ),
    Ok(
        "PhysicalController::GetCharacterMappable(void) const",
    ),
    Ok(
        "CameraRelativeCharacterController::CameraRelativeCharacterController(void)",
    ),
    Ok(
        "CameraRelativeCharacterController::Create(Character *, CharacterMappable *)",
    ),
    Ok(
        "CameraRelativeCharacterController::~CameraRelativeCharacterController(void)",
    ),
    Ok(
        "CameraRelativeCharacterController::SetIntention(CharacterController::eIntention)",
    ),
    Ok(
        "CameraRelativeCharacterController::GetDirection(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "CameraRelativeCharacterController::SetCamera(tCamera *)",
    ),
    Ok(
        "CameraRelativeCharacterController::HandleEvent(int, void *)",
    ),
    Ok(
        "NPCController::NPCController(void)",
    ),
    Ok(
        "NPCController::~NPCController(void)",
    ),
    Ok(
        "NPCController::SetCharacter(Character *)",
    ),
    Ok(
        "NPCController::AddNPCWaypoint(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "NPCController::IncitePanic(void)",
    ),
    Ok(
        "NPCController::QuellPanic(void)",
    ),
    Ok(
        "NPCController::Update(float)",
    ),
    Ok(
        "NPCController::GetFollowPathSpeedMps(void) const",
    ),
    Ok(
        "NPCController::FollowPath(float)",
    ),
    Ok(
        "NPCController::TeleportToPath(void)",
    ),
    Ok(
        "NPCController::DetectAndDodge(float)",
    ),
    Ok(
        "NPCController::TraversePath(float)",
    ),
    Ok(
        "NPCController::OnReachedWaypoint(void)",
    ),
    Ok(
        "NPCController::Detect(float, float &)",
    ),
    Ok(
        "NPCController::PerformCringe(void)",
    ),
    Ok(
        "NPCController::PerformDodge(void)",
    ),
    Ok(
        "NPCController::GetDirection(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "NPCController::TransitToState(NPCController::State)",
    ),
    Ok(
        "NPCController::GetAllowedPathOffset(RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "NPCController::OnOffPath(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector)",
    ),
    Ok(
        "NPCController::StartTalking(void)",
    ),
    Ok(
        "NPCController::StopTalking(void)",
    ),
    Ok(
        "NPCController::SetTempWaypont(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "NPCController::ClearTempWaypoint(void)",
    ),
    Ok(
        "CharacterManager::CreateInstance(void)",
    ),
    Ok(
        "CharacterManager::GetInstance(void)",
    ),
    Ok(
        "CharacterManager::DestroyInstance(void)",
    ),
    Ok(
        "CharacterManager::CharacterManager(void)",
    ),
    Ok(
        "CharacterManager::~CharacterManager(void)",
    ),
    Ok(
        "CharacterManager::PreLoad(void)",
    ),
    Ok(
        "CharacterManager::Destroy(bool)",
    ),
    Ok(
        "CharacterManager::RemoveCharacter(Character *)",
    ),
    Ok(
        "CharacterManager::SetGarbage(Character *, bool)",
    ),
    Ok(
        "CharacterManager::GarbageCollectModel(unsigned int)",
    ),
    Ok(
        "CharacterManager::GarbageCollectAnim(unsigned int)",
    ),
    Ok(
        "CharacterManager::IsModelLoaded(char const *)",
    ),
    Ok(
        "CharacterManager::LoadModel(char const *, LoadingManager::ProcessRequestsCallback *, void *)",
    ),
    Ok(
        "CharacterManager::LoadAnimation(char const *)",
    ),
    Ok(
        "CharacterManager::FindLoad(CharacterManager::Load *, tUidUnaligned)",
    ),
    Ok(
        "CharacterManager::AllocLoad(CharacterManager::Load *, tUidUnaligned)",
    ),
    Ok(
        "CharacterManager::GetState(CharacterManager::Load *, tUidUnaligned)",
    ),
    Ok(
        "CharacterManager::FillLoadData(CharacterManager::CharacterLoadData &, char const *, char const *)",
    ),
    Ok(
        "CharacterManager::AddCharacter(CharacterManager::CharacterType, char const *, char const *, char const *, char const *)",
    ),
    Ok(
        "CharacterManager::AddCharacterDeferedLoad(CharacterManager::CharacterType, char const *, char const *, char const *, char const *)",
    ),
    Ok(
        "CharacterManager::SwapData(Character *, char const *, char const *)",
    ),
    Ok(
        "CharacterManager::InternalSwapData(Character *, char const *, char const *)",
    ),
    Ok(
        "CharacterManager::SetupCharacter(CharacterManager::CharacterLoadData &, Character *)",
    ),
    Ok(
        "CharacterManager::GarbageCollect(bool)",
    ),
    Ok(
        "CharacterManager::PreSimUpdate(float)",
    ),
    Ok(
        "CharacterManager::PostSimUpdate(float)",
    ),
    Ok(
        "CharacterManager::Update(float)",
    ),
    Ok(
        "CharacterManager::PreSubstepUpdate(float)",
    ),
    Ok(
        "CharacterManager::PostSubstepUpdate(float)",
    ),
    Ok(
        "CharacterManager::ClearTargetVehicle(Vehicle *)",
    ),
    Ok(
        "CharacterManager::ResetBonusCharacters(void)",
    ),
    Ok(
        "CharacterManager::AddCharacter(Character *, CharacterManager::CharacterType)",
    ),
    Ok(
        "CharacterManager::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "CharacterManager::GetCharacterByName(char const *) const",
    ),
    Ok(
        "CharacterManager::GetCharacterByName(tUidUnaligned) const",
    ),
    Ok(
        "CharacterManager::GetMissionCharacter(char const *) const",
    ),
    Ok(
        "CharacterManager::GetCharacter(int) const",
    ),
    Ok(
        "CharacterManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "CharacterManager::GetModelName(Character *)",
    ),
    Ok(
        "CharacterManager::GetAnimName(Character *)",
    ),
    Ok(
        "CharacterManager::SubmitStatics(void)",
    ),
    Ok(
        "CharacterManager::SubmitAnimCollisions(void)",
    ),
    Ok(
        "CharacterManager::SubmitDynamics(void)",
    ),
    Ok(
        "CharacterManager::SetCharacterPosition(int, char **)",
    ),
    Ok(
        "CharacterManager::ResetCharacter(int, char **)",
    ),
    Ok(
        "CharacterManager::SetInitialWalk(int, char **)",
    ),
    Ok(
        "CharacterManager::NextCheatModel(void)",
    ),
    Ok(
        "CharacterManager::GetNumTeleportDests(void)",
    ),
    Ok(
        "CharacterManager::GetTeleportDest(unsigned int)",
    ),
    Ok(
        "CharacterManager::ClearTeleportDests(void)",
    ),
    Ok(
        "CharacterManager::AddTeleportDest(int, char **)",
    ),
    Ok(
        "CharacterManager::DoTeleport(void *)",
    ),
    Ok(
        "CharacterManager::GetCharacterIndex(Character const *) const",
    ),
    Ok(
        "CharacterMappable::CharacterMappable(void)",
    ),
    Ok(
        "CharacterMappable::~CharacterMappable(void)",
    ),
    Ok(
        "CharacterMappable::GetCharacterController(void) const",
    ),
    Ok(
        "CharacterMappable::SetCharacterController(CharacterController *)",
    ),
    Ok(
        "CharacterMappable::OnButton(int, int, Button const *)",
    ),
    Ok(
        "CharacterMappable::OnButtonUp(int, int, Button const *)",
    ),
    Ok(
        "CharacterMappable::OnButtonDown(int, int, Button const *)",
    ),
    Ok(
        "CharacterMappable::LoadControllerMappings(unsigned int)",
    ),
    Ok(
        "CharacterMappable::GetDirection(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "BipedCharacterMappable::BipedCharacterMappable(void)",
    ),
    Ok(
        "BipedCharacterMappable::~BipedCharacterMappable(void)",
    ),
    Ok(
        "BipedCharacterMappable::OnButtonDown(int, int, Button const *)",
    ),
    Ok(
        "BipedCharacterMappable::GetDirection(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "InCarCharacterMappable::InCarCharacterMappable(void)",
    ),
    Ok(
        "InCarCharacterMappable::~InCarCharacterMappable(void)",
    ),
    Ok(
        "InCarCharacterMappable::OnButtonDown(int, int, Button const *)",
    ),
    Ok(
        "InCarCharacterMappable::GetDirection(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "CharacterRenderable::CharacterRenderable(tDrawablePose *, tDrawablePose *, tDrawablePose *)",
    ),
    Ok(
        "CharacterRenderable::~CharacterRenderable(void)",
    ),
    Ok(
        "CharacterRenderable::Display(RadicalMathLibrary::Vector, tPose *)",
    ),
    Ok(
        "CharacterRenderable::CastsShadow(void)",
    ),
    Ok(
        "CharacterRenderable::DisplayShadow(tPose *, BlobShadowParams const *)",
    ),
    Ok(
        "CharacterRenderable::GetDrawable(void) const",
    ),
    Ok(
        "CharacterRenderable::SetLOD(int)",
    ),
    Ok(
        "CharacterRenderable::SetSwatch(int)",
    ),
    Ok(
        "CharacterRenderable::SetSwatchTexture(int, tTexture *)",
    ),
    Ok(
        "CharacterRenderable::SetShockEffect(tDrawable *)",
    ),
    Ok(
        "CharacterRenderable::SetSwatchShader(tShader *)",
    ),
    Ok(
        "CharacterRenderable::SetFadeAlpha(int)",
    ),
    Ok(
        "CharacterRenderable::SetShadowColour(pddiColour)",
    ),
    Ok(
        "CharacterRenderable::DisplayModel(tPose *)",
    ),
    Ok(
        "CharacterRenderable::DisplayShocked(tPose *)",
    ),
    Ok(
        "CharacterTarget::CharacterTarget(Character *)",
    ),
    Ok(
        "CharacterTarget::~CharacterTarget(void)",
    ),
    Ok(
        "CharacterTarget::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "CharacterTarget::GetHeading(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "CharacterTarget::GetVUP(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "CharacterTarget::GetVelocity(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "CharacterTarget::GetID(void)",
    ),
    Ok(
        "CharacterTarget::IsCar(void) const",
    ),
    Ok(
        "CharacterTarget::IsAirborn(void)",
    ),
    Ok(
        "CharacterTarget::IsUnstable(void)",
    ),
    Ok(
        "CharacterTarget::IsQuickTurn(void)",
    ),
    Ok(
        "CharacterTarget::GetFirstPersonPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "CharacterTarget::GetName(void)",
    ),
    Ok(
        "CharacterTarget::IsInReverse(void)",
    ),
    Ok(
        "CharacterTarget::GetTerrainIntersect(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "TeleportDest::TeleportDest(void)",
    ),
    Ok(
        "CharacterController type_info function",
    ),
    Ok(
        "NPCController type_info function",
    ),
    Ok(
        "PhysicalController type_info function",
    ),
    Ok(
        "CameraRelativeCharacterController type_info function",
    ),
    Ok(
        "AICharacterController::~AICharacterController(void)",
    ),
    Ok(
        "AICharacterController type_info function",
    ),
    Ok(
        "Character type_info function",
    ),
    Ok(
        "NPCharacter type_info function",
    ),
    Ok(
        "CharacterManager type_info function",
    ),
    Ok(
        "Wander type_info function",
    ),
    Ok(
        "CharacterMappable type_info function",
    ),
    Ok(
        "BipedCharacterMappable type_info function",
    ),
    Ok(
        "InCarCharacterMappable type_info function",
    ),
    Ok(
        "CharacterTarget type_info function",
    ),
    Ok(
        "AmbientDialogueButton::~AmbientDialogueButton(void)",
    ),
    Ok(
        "AmbientDialogueButton type_info function",
    ),
    Ok(
        "AmbientDialogueTrigger type_info function",
    ),
    Ok(
        "CameraRelativeCharacterControllerEventHandler type_info function",
    ),
    Ok(
        "CharacterController::Update(float)",
    ),
    Ok(
        "CharacterController::TimeSinceChange(int) const",
    ),
    Ok(
        "CharacterController::SetIntention(CharacterController::eIntention)",
    ),
    Ok(
        "NPCController::DodgeInfo::DodgeInfo(void)",
    ),
    Ok(
        "NPCController::GetState(void) const",
    ),
    Ok(
        "NPCController::GetSpeedMps(void) const",
    ),
    Ok(
        "NPCController::SetSpeedMps(float)",
    ),
    Ok(
        "NPCController::SetDirection(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "NPCController::GetValue(int) const",
    ),
    Ok(
        "NPCController::IsButtonDown(int) const",
    ),
    Ok(
        "PhysicalController::SetIntention(CharacterController::eIntention)",
    ),
    Ok(
        "ISuperCamTarget::~ISuperCamTarget(void)",
    ),
    Ok(
        "Character::GetAIRef(void)",
    ),
    Ok(
        "Character::Update(float)",
    ),
    Ok(
        "Character::ApplyForce(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Character::GetInputScale(void)",
    ),
    Ok(
        "NPCharacter::GetAIRef(void)",
    ),
    Ok(
        "NPCharacter::SubmitAnimCollisions(void)",
    ),
    Ok(
        "NPCharacter::GetInputScale(void)",
    ),
    Ok(
        "NPCharacter::UpdateFootPlant(void)",
    ),
    Ok(
        "CharacterManager::CharacterLoadData::~CharacterLoadData(void)",
    ),
    Ok(
        "CharacterManager::CharacterLoadData::CharacterLoadData(void)",
    ),
    Ok(
        "Behaviour::Behaviour(void)",
    ),
    Ok(
        "AmbientDialogueButton::OnButtonPressed(Character *, Sequencer *)",
    ),
    Ok(
        "AmbientDialogueTrigger::~AmbientDialogueTrigger(void)",
    ),
    Ok(
        "AmbientDialogueTrigger::Trigger(unsigned int, bool)",
    ),
    Ok(
        "CameraRelativeCharacterControllerEventHandler::~CameraRelativeCharacterControllerEventHandler(void)",
    ),
    Ok(
        "CameraRelativeCharacterControllerEventHandler::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tDrawablePose>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tSkeleton>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Bank>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tDrawablePose> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tSkeleton> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Bank> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Bank>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tSkeleton>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tDrawablePose>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to Wander::Wander(void)",
    ),
    Ok(
        "global destructors keyed to Wander::Wander(void)",
    ),
    Ok(
        "GeometryVehicle::GeometryVehicle(void)",
    ),
    Ok(
        "GeometryVehicle::~GeometryVehicle(void)",
    ),
    Ok(
        "GeometryVehicle::Init(char const *, Vehicle *, int)",
    ),
    Ok(
        "GeometryVehicle::InitSkidMarks(void)",
    ),
    Ok(
        "GeometryVehicle::InitParticles(void)",
    ),
    Ok(
        "GeometryVehicle::GetHeadlightScale(void)",
    ),
    Ok(
        "GeometryVehicle::SetHeadlightScale(float)",
    ),
    Ok(
        "GeometryVehicle::AttachCollectible(StatePropCollectible *)",
    ),
    Ok(
        "GeometryVehicle::GetAttachedCollectible(void)",
    ),
    Ok(
        "GeometryVehicle::DetachCollectible(RadicalMathLibrary::Vector const &, bool)",
    ),
    Ok(
        "GeometryVehicle::Display(void)",
    ),
    Ok(
        "GeometryVehicle::SetSkidValues(int, float, RadicalMathLibrary::Vector &, eTerrainType)",
    ),
    Ok(
        "GeometryVehicle::UpdateSkids(void)",
    ),
    Ok(
        "GeometryVehicle::DisplayShadow(BlobShadowParams *)",
    ),
    Ok(
        "GeometryVehicle::FindAndTurnOffWheels(void)",
    ),
    Ok(
        "GeometryVehicle::FindAndTurnOffFrontWheelsOnly(void)",
    ),
    Ok(
        "GeometryVehicle::FindHeadLightBillboardJoints(void)",
    ),
    Ok(
        "GeometryVehicle::FindBrakeLightBillboardJoints(void)",
    ),
    Ok(
        "GeometryVehicle::FindGhostGlowBillboards(char const *)",
    ),
    Ok(
        "GeometryVehicle::FindNukeGlowBillboards(char const *)",
    ),
    Ok(
        "GeometryVehicle::SetCollectibleHardpointPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "GeometryVehicle::SetCollectibleHardpointTransform(float, float, float, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "GeometryVehicle::ShowBrakeLights(void)",
    ),
    Ok(
        "GeometryVehicle::HideBrakeLights(void)",
    ),
    Ok(
        "GeometryVehicle::ShowReverseLights(void)",
    ),
    Ok(
        "GeometryVehicle::HideReverseLights(void)",
    ),
    Ok(
        "GeometryVehicle::GetArt(char const *)",
    ),
    Ok(
        "GeometryVehicle::FindDamageShadersAndTextures(char const *)",
    ),
    Ok(
        "GeometryVehicle::SetEngineSmoke(ParticleEnum::ParticleID)",
    ),
    Ok(
        "GeometryVehicle::SetWheelSmoke(int, ParticleEnum::ParticleID, float)",
    ),
    Ok(
        "GeometryVehicle::DamageTextureTrunk(bool)",
    ),
    Ok(
        "GeometryVehicle::DamageTextureHood(bool)",
    ),
    Ok(
        "GeometryVehicle::DamageTextureDoorP(bool)",
    ),
    Ok(
        "GeometryVehicle::DamageTextureDoorD(bool)",
    ),
    Ok(
        "GeometryVehicle::HideFlappingPiece(int, bool)",
    ),
    Ok(
        "GeometryVehicle::Update(float)",
    ),
    Ok(
        "GeometryVehicle::SetTrafficBodyColour(pddiColour)",
    ),
    Ok(
        "GeometryVehicle::GetP3DPose(void)",
    ),
    Ok(
        "GeometryVehicle::SetShadowAdjustments(float (*)[2])",
    ),
    Ok(
        "GeometryVehicle::SetFadeAlpha(int)",
    ),
    Ok(
        "GeometryVehicle::IsTrafficModel(void)",
    ),
    Ok(
        "GeometryVehicle::FadeRoof(bool)",
    ),
    Ok(
        "GeometryVehicle::FindRoofGeometry(char const *)",
    ),
    Ok(
        "GeometryVehicle::EnableLights(bool)",
    ),
    Ok(
        "GeometryVehicle::GetVehicleColour(void) const",
    ),
    Ok(
        "GeometryVehicle::FindAnimationControllers(char const *)",
    ),
    Ok(
        "GeometryVehicle::GetSpecialController(tUidUnaligned, GeometryVehicle::VehicleFrameController *)",
    ),
    Ok(
        "GeometryVehicle::AdvanceAnimationControllers(float)",
    ),
    Ok(
        "PhysicsLocomotion::PhysicsLocomotion(Vehicle *)",
    ),
    Ok(
        "PhysicsLocomotion::~PhysicsLocomotion(void)",
    ),
    Ok(
        "PhysicsLocomotion::SetTerrainIntersectCachePointsForNewTransform(void)",
    ),
    Ok(
        "PhysicsLocomotion::MoveWheelsToBottomOfSuspension(void)",
    ),
    Ok(
        "PhysicsLocomotion::UpdateVehicleGroundPlane(void)",
    ),
    Ok(
        "PhysicsLocomotion::PreCollisionPrep(bool)",
    ),
    Ok(
        "PhysicsLocomotion::CompareNormalAndHeight(int, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "PhysicsLocomotion::PreSubstepUpdate(void)",
    ),
    Ok(
        "PhysicsLocomotion::SetForceApplicationPoints(void)",
    ),
    Ok(
        "PhysicsLocomotion::ApplySuspensionForces(float, bool)",
    ),
    Ok(
        "PhysicsLocomotion::CalculateSuspensionForce(Wheel *, float, float, float &)",
    ),
    Ok(
        "PhysicsLocomotion::ApplyDragForce(void)",
    ),
    Ok(
        "PhysicsLocomotion::ApplyAngularDrag(void)",
    ),
    Ok(
        "PhysicsLocomotion::ApplyRollingFriction(void)",
    ),
    Ok(
        "PhysicsLocomotion::Weeble(void)",
    ),
    Ok(
        "PhysicsLocomotion::PreUpdate(void)",
    ),
    Ok(
        "PhysicsLocomotion::Update(float)",
    ),
    Ok(
        "PhysicsLocomotion::DurangoStyleStabilizer(float)",
    ),
    Ok(
        "PhysicsLocomotion::StuckOnSideTest(float)",
    ),
    Ok(
        "PhysicsLocomotion::PostUpdate(void)",
    ),
    Ok(
        "PhysicsLocomotion::CorrectWheelYPositions(void)",
    ),
    Ok(
        "PhysicsLocomotion::FetchWheelTerrainCollisionInfo(void)",
    ),
    Ok(
        "PhysicsLocomotion::UseWheelTerrainCollisionInfo(float)",
    ),
    Ok(
        "PhysicsLocomotion::ApplyControllerForces2(float)",
    ),
    Ok(
        "PhysicsLocomotion::ApplyTerrainFriction(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "PhysicsLocomotion::GasForce2(RadicalMathLibrary::Vector &, int, float)",
    ),
    Ok(
        "PhysicsLocomotion::BrakeForce2(RadicalMathLibrary::Vector &, int, float)",
    ),
    Ok(
        "PhysicsLocomotion::ReverseForce2(RadicalMathLibrary::Vector &, int)",
    ),
    Ok(
        "PhysicsLocomotion::EBrakeEffect(RadicalMathLibrary::Vector &, int)",
    ),
    Ok(
        "PhysicsLocomotion::SteeringForce2(RadicalMathLibrary::Vector &, int, float)",
    ),
    Ok(
        "PhysicsLocomotion::TestControllerForces(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "PhysicsLocomotion::SetSkidLevel(void)",
    ),
    Ok(
        "RedBrickCollisionSolverAgent::RedBrickCollisionSolverAgent(void)",
    ),
    Ok(
        "RedBrickCollisionSolverAgent::~RedBrickCollisionSolverAgent(void)",
    ),
    Ok(
        "RedBrickCollisionSolverAgent::ResetCollisionFlags(void)",
    ),
    Ok(
        "RedBrickCollisionSolverAgent::TestImpulse(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "RedBrickCollisionSolverAgent::CarOnCarPreTest(sim::Collision &, int)",
    ),
    Ok(
        "RedBrickCollisionSolverAgent::PreCollisionEvent(sim::Collision &, int)",
    ),
    Ok(
        "RedBrickCollisionSolverAgent::EndObjectCollision(sim::SimState *, int)",
    ),
    Ok(
        "RedBrickCollisionSolverAgent::TestCache(sim::SimState *, int)",
    ),
    Ok(
        "RootMatrixDriver::Update(poser::Pose *)",
    ),
    Ok(
        "SuspensionJointDriver::SuspensionJointDriver(Wheel *, int)",
    ),
    Ok(
        "SuspensionJointDriver::~SuspensionJointDriver(void)",
    ),
    Ok(
        "SuspensionJointDriver::Update(poser::Pose *)",
    ),
    Ok(
        "TrafficLocomotion::TrafficLocomotion(Vehicle *)",
    ),
    Ok(
        "TrafficLocomotion::~TrafficLocomotion(void)",
    ),
    Ok(
        "TrafficLocomotion::InitPos(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "TrafficLocomotion::InitFacing(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "TrafficLocomotion::Init(void)",
    ),
    Ok(
        "TrafficLocomotion::InitVehicleAI(Vehicle *)",
    ),
    Ok(
        "TrafficLocomotion::InitLane(Lane *, unsigned int, float)",
    ),
    Ok(
        "TrafficLocomotion::InitSegment(RoadSegment *, unsigned int, float)",
    ),
    Ok(
        "TrafficLocomotion::UpdateVehicleGroundPlane(void)",
    ),
    Ok(
        "TrafficLocomotion::PreCollisionPrep(bool)",
    ),
    Ok(
        "TrafficLocomotion::PreSubstepUpdate(void)",
    ),
    Ok(
        "TrafficLocomotion::PreUpdate(void)",
    ),
    Ok(
        "TrafficLocomotion::StopSuddenly(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "TrafficLocomotion::Update(float)",
    ),
    Ok(
        "TrafficLocomotion::PostUpdate(void)",
    ),
    Ok(
        "TrafficLocomotion::FindOutLane(Lane const *, unsigned int, Lane *&, unsigned int &)",
    ),
    Ok(
        "TrafficLocomotion::BuildCurve(RoadSegment *, unsigned int, RoadSegment *, unsigned int)",
    ),
    Ok(
        "TrafficLocomotion::EnterIntersection(void)",
    ),
    Ok(
        "TrafficLocomotion::PivotFrontWheels(RadicalMathLibrary::Vector)",
    ),
    Ok(
        "TrafficLocomotion::UpdateLanes(TrafficVehicle *, Lane *, Lane *)",
    ),
    Ok(
        "TrafficLocomotion::GetAIPrevLane(void)",
    ),
    Ok(
        "TrafficLocomotion::BuildLaneChangeCurve(RoadSegment *, float, unsigned int, unsigned int, float)",
    ),
    Ok(
        "TrafficLocomotion::BuildArbitraryCurve(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "TrafficLocomotion::GetSplineCurve(RadicalMathLibrary::Vector *&, int &, int &)",
    ),
    Ok(
        "Vehicle::ActivateTriggers(bool)",
    ),
    Ok(
        "Vehicle::SetUserDrivingCar(bool)",
    ),
    Ok(
        "Vehicle::TransitToAI(void)",
    ),
    Ok(
        "Vehicle::EnteringJumpBoostVolume(void)",
    ),
    Ok(
        "Vehicle::ExitingJumpBoostVolume(void)",
    ),
    Ok(
        "Vehicle::CastsShadow(void)",
    ),
    Ok(
        "Vehicle::DisplayShadow(void)",
    ),
    Ok(
        "Vehicle::DisplaySimpleShadow(void)",
    ),
    Ok(
        "Vehicle::SetInCarSimState(void)",
    ),
    Ok(
        "Vehicle::SetOutOfCarSimState(void)",
    ),
    Ok(
        "Vehicle::SetLocomotion(VehicleLocomotionType)",
    ),
    Ok(
        "Vehicle::IsAFlappingJoint(int)",
    ),
    Ok(
        "Vehicle::CalculateDragCoeffBasedOnTopSpeed(void)",
    ),
    Ok(
        "Vehicle::IsJointAWheel(int)",
    ),
    Ok(
        "Vehicle::SetWheelCorrectionOffset(int, float, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "Vehicle::GetCollisionAreaIndexAndAddSelf(void)",
    ),
    Ok(
        "Vehicle::RemoveSelfAndFreeCollisionAreaIndex(void)",
    ),
    Ok(
        "Vehicle::AddSelfToCollisionManager(void)",
    ),
    Ok(
        "Vehicle::RemoveSelfFromCollisionManager(void)",
    ),
    Ok(
        "Vehicle::CalculateValuesBasedOnDesignerParams(void)",
    ),
    Ok(
        "Vehicle::TrafficSetTransform(RadicalMathLibrary::Matrix &)",
    ),
    Ok(
        "Vehicle::GetRestHeightAboveGround(void)",
    ),
    Ok(
        "Vehicle::SetTransform(RadicalMathLibrary::Matrix &)",
    ),
    Ok(
        "Vehicle::SetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "Vehicle::SetInitialPositionGroundOffsetAutoAdjust(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "Vehicle::SetInitialPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "Vehicle::SetResetFacingInRadians(float)",
    ),
    Ok(
        "Vehicle::Reset(bool, bool)",
    ),
    Ok(
        "Vehicle::ResetFlagsOnly(bool)",
    ),
    Ok(
        "Vehicle::ResetOnSpot(bool, bool)",
    ),
    Ok(
        "Vehicle::GetFacingInRadians(void)",
    ),
    Ok(
        "Vehicle::FacingIntoRad(RadicalMathLibrary::Vector)",
    ),
    Ok(
        "Vehicle::SetGas(float)",
    ),
    Ok(
        "Vehicle::SetBrake(float)",
    ),
    Ok(
        "Vehicle::SetEBrake(float, float)",
    ),
    Ok(
        "Vehicle::SetWheelTurnAngle(float, bool, float)",
    ),
    Ok(
        "Vehicle::SetWheelTurnAngleDirectlyInRadiansForDusitOnly(float)",
    ),
    Ok(
        "Vehicle::SetReverse(float)",
    ),
    Ok(
        "Vehicle::PreSubstepUpdate(float)",
    ),
    Ok(
        "Vehicle::PreCollisionPrep(float, bool)",
    ),
    Ok(
        "Vehicle::SetNoDamperDownFlagOnWheel(int)",
    ),
    Ok(
        "Vehicle::CalculateSuspensionLocationAndVelocity(void)",
    ),
    Ok(
        "Vehicle::JumpOnHorn(float)",
    ),
    Ok(
        "Vehicle::TurboOnHorn(void)",
    ),
    Ok(
        "Vehicle::Update(float)",
    ),
    Ok(
        "Vehicle::GetGroundY(void)",
    ),
    Ok(
        "Vehicle::PostSubstepUpdate(float)",
    ),
    Ok(
        "Vehicle::BounceCharacters(float)",
    ),
    Ok(
        "Vehicle::MoveCharactersTowardsRestPosition(float)",
    ),
    Ok(
        "Vehicle::ApplyDisplacementToCharacters(float)",
    ),
    Ok(
        "Vehicle::RecordRestSeatingPositionsOnEntry(void)",
    ),
    Ok(
        "Vehicle::RestTest(void)",
    ),
    Ok(
        "Vehicle::SelfRestTest(void)",
    ),
    Ok(
        "Vehicle::ZeroOutXZVelocity(void)",
    ),
    Ok(
        "Vehicle::SetGeometryVehicleWheelSmokeLevel(void)",
    ),
    Ok(
        "Vehicle::DSGUpdateAndMove(void)",
    ),
    Ok(
        "Vehicle::UpdateGearAndRPM(void)",
    ),
    Ok(
        "Vehicle::UpdateWheelRenderingInfo(float)",
    ),
    Ok(
        "Vehicle::GetTransform(void)",
    ),
    Ok(
        "Vehicle::pPosition(void)",
    ),
    Ok(
        "Vehicle::rPosition(void)",
    ),
    Ok(
        "Vehicle::Display(void)",
    ),
    Ok(
        "Vehicle::CarDisplay(bool)",
    ),
    Ok(
        "Vehicle::GetSpeedKmh(void)",
    ),
    Ok(
        "Vehicle::GetAccelMss(void)",
    ),
    Ok(
        "Vehicle::GetSkidLevel(void)",
    ),
    Ok(
        "Vehicle::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "Vehicle::GetHeading(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "Vehicle::GetVUP(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "Vehicle::GetVelocity(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "Vehicle::GetID(void)",
    ),
    Ok(
        "Vehicle::IsCar(void) const",
    ),
    Ok(
        "Vehicle::IsAirborn(void)",
    ),
    Ok(
        "Vehicle::IsUnstable(void)",
    ),
    Ok(
        "Vehicle::IsSafeToUpShift(void)",
    ),
    Ok(
        "Vehicle::IsQuickTurn(void)",
    ),
    Ok(
        "Vehicle::IsInReverse(void)",
    ),
    Ok(
        "Vehicle::GetTerrainIntersect(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "Vehicle::IsMovingBackward(void)",
    ),
    Ok(
        "Vehicle::GetName(void)",
    ),
    Ok(
        "Vehicle::GetPassengerLocation(void) const",
    ),
    Ok(
        "Vehicle::GetDriverLocation(void) const",
    ),
    Ok(
        "Vehicle::PreReactToCollision(sim::SimState *, sim::Collision &)",
    ),
    Ok(
        "Vehicle::ResetDamageState(void)",
    ),
    Ok(
        "Vehicle::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "Vehicle::DusitsStunTest(float)",
    ),
    Ok(
        "Vehicle::TestWhoHitWhom(sim::SimState *, sim::SimState *, float, sim::Collision const &)",
    ),
    Ok(
        "Vehicle::SwitchOnDamageTypeAndApply(float, sim::Collision &)",
    ),
    Ok(
        "Vehicle::CarOnCarDamageLogic(bool, sim::SimState *, sim::SimState *)",
    ),
    Ok(
        "Vehicle::CameraShakeTest(float, sim::Collision &)",
    ),
    Ok(
        "Vehicle::SparksTest(float, sim::Collision &)",
    ),
    Ok(
        "Vehicle::VisualDamageType1(float, Vehicle::DamageLocation)",
    ),
    Ok(
        "Vehicle::VisualDamageType2(float, Vehicle::DamageLocation)",
    ),
    Ok(
        "Vehicle::VisualDamageType3(float)",
    ),
    Ok(
        "Vehicle::SyncVisualDamage(float)",
    ),
    Ok(
        "Vehicle::TranslateCollisionIntoLocation(sim::Collision &)",
    ),
    Ok(
        "Vehicle::BeefUpHitPointsOnTrafficCarsWhenUserDriving(void)",
    ),
    Ok(
        "Vehicle::GetVehicleLifePercentage(float)",
    ),
    Ok(
        "Vehicle::TriggerDamage(float, bool)",
    ),
    Ok(
        "Vehicle::NeedToOpenDoor(Vehicle::Door)",
    ),
    Ok(
        "Vehicle::NeedToCloseDoor(Vehicle::Door)",
    ),
    Ok(
        "Vehicle::HasActiveDoor(Vehicle::Door)",
    ),
    Ok(
        "Vehicle::UpdateDoorState(void)",
    ),
    Ok(
        "Vehicle::ReleaseDoors(void)",
    ),
    Ok(
        "Vehicle::PlayExplosionEffect(void)",
    ),
    Ok(
        "Vehicle::AddToSimulation(void)",
    ),
    Ok(
        "Vehicle::ApplyForce(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "Vehicle::AttachCollectible(StatePropCollectible *)",
    ),
    Ok(
        "Vehicle::GetAttachedCollectible(void)",
    ),
    Ok(
        "Vehicle::DetachCollectible(RadicalMathLibrary::Vector const &, bool)",
    ),
    Ok(
        "Vehicle::MoveDoor(Vehicle::Door, Vehicle::DoorAction, float)",
    ),
    Ok(
        "Vehicle::CalcDoor(unsigned int, unsigned int, float)",
    ),
    Ok(
        "Vehicle::CalcDoors(void)",
    ),
    Ok(
        "Vehicle::SetDriverName(char const *)",
    ),
    Ok(
        "Vehicle::GetDriverName(void)",
    ),
    Ok(
        "Vehicle::SetDriver(Character *)",
    ),
    Ok(
        "Vehicle::SetShadowAdjustments(float (*)[2])",
    ),
    Ok(
        "Vehicle::SetShininess(unsigned char)",
    ),
    Ok(
        "Vehicle::GetTopSpeed(void) const",
    ),
    Ok(
        "Vehicle::Vehicle(void)",
    ),
    Ok(
        "Vehicle::Init(char const *, sim::SimEnvironment *, VehicleLocomotionType, VehicleType, bool)",
    ),
    Ok(
        "Vehicle::InitEventLocator(void)",
    ),
    Ok(
        "Vehicle::AssignEnumBasedOnName(void)",
    ),
    Ok(
        "Vehicle::SetupRadDebugWatchStuff(void)",
    ),
    Ok(
        "Vehicle::~Vehicle(void)",
    ),
    Ok(
        "Vehicle::CreateLocomotions(void)",
    ),
    Ok(
        "Vehicle::InitWheelsAndLinkSuspensionJointDrivers(void)",
    ),
    Ok(
        "Vehicle::InitFlappingJoints(void)",
    ),
    Ok(
        "Vehicle::AddFlappingJoint(char const *, char const *, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, int, int *)",
    ),
    Ok(
        "Vehicle::InitGears(void)",
    ),
    Ok(
        "Vehicle::SetupPhysicsProperties(void)",
    ),
    Ok(
        "Vehicle::InitGroundPlane(void)",
    ),
    Ok(
        "Vehicle::FetchWheelMapping(void)",
    ),
    Ok(
        "Vehicle::GetWheel0Offset(void)",
    ),
    Ok(
        "Vehicle::GetWheel1Offset(void)",
    ),
    Ok(
        "Vehicle::InitSimState(sim::SimEnvironment *)",
    ),
    Ok(
        "Vehicle::CreatePoseEngine(void)",
    ),
    Ok(
        "Wheel::Wheel(void)",
    ),
    Ok(
        "Wheel::~Wheel(void)",
    ),
    Ok(
        "Wheel::Init(Vehicle *, int, float, bool, bool)",
    ),
    Ok(
        "Wheel::SetDesignerParams(Vehicle::DesignerParams *)",
    ),
    Ok(
        "Wheel::CalculateRenderingSpinUpRateBase(float)",
    ),
    Ok(
        "Wheel::CalculateRotAngle(float)",
    ),
    Ok(
        "Wheel::SetYOffsetFromCurrentPosition(float)",
    ),
    Ok(
        "Wheel::ResolveOffset(void)",
    ),
    Ok(
        "Wheel::GetYCorrectionValue(void)",
    ),
    Ok(
        "Wheel::Reset(void)",
    ),
    Ok(
        "VehicleEventListener::VehicleEventListener(Vehicle *)",
    ),
    Ok(
        "VehicleEventListener::~VehicleEventListener(void)",
    ),
    Ok(
        "VehicleEventListener::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "TrafficBodyDrawable::TrafficBodyDrawable(void)",
    ),
    Ok(
        "TrafficBodyDrawable::~TrafficBodyDrawable(void)",
    ),
    Ok(
        "TrafficBodyDrawable::SetBodyPropDrawable(tDrawable *)",
    ),
    Ok(
        "TrafficBodyDrawable::SetBodyShader(tShader *)",
    ),
    Ok(
        "TrafficBodyDrawable::Display(void)",
    ),
    Ok(
        "TrafficBodyDrawable::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "GeometryVehicle::VehicleFrameController * __uninitialized_copy_aux<GeometryVehicle::VehicleFrameController *, GeometryVehicle::VehicleFrameController *>(GeometryVehicle::VehicleFrameController *, GeometryVehicle::VehicleFrameController *, GeometryVehicle::VehicleFrameController *, __false_type)",
    ),
    Ok(
        "vector<GeometryVehicle::VehicleFrameController, s2alloc<GeometryVehicle::VehicleFrameController> >::_M_insert_aux(GeometryVehicle::VehicleFrameController *, GeometryVehicle::VehicleFrameController const &)",
    ),
    Ok(
        "Vehicle type_info function",
    ),
    Ok(
        "TrafficBodyDrawable type_info function",
    ),
    Ok(
        "sim::PhysicsJointMatrixModifier::~PhysicsJointMatrixModifier(void)",
    ),
    Ok(
        "sim::PhysicsJointMatrixModifier type_info function",
    ),
    Ok(
        "sim::PhysicsJointInertialEffector::~PhysicsJointInertialEffector(void)",
    ),
    Ok(
        "sim::PhysicsJointInertialEffector type_info function",
    ),
    Ok(
        "VehicleLocomotion type_info function",
    ),
    Ok(
        "PhysicsLocomotion type_info function",
    ),
    Ok(
        "RedBrickCollisionSolverAgent type_info function",
    ),
    Ok(
        "RootMatrixDriver::~RootMatrixDriver(void)",
    ),
    Ok(
        "RootMatrixDriver type_info function",
    ),
    Ok(
        "SuspensionJointDriver type_info function",
    ),
    Ok(
        "TrafficLocomotion type_info function",
    ),
    Ok(
        "VehicleEventListener type_info function",
    ),
    Ok(
        "_Vector_alloc_base<GeometryVehicle::VehicleFrameController, s2alloc<GeometryVehicle::VehicleFrameController>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "Vehicle::DesignerParams::DesignerParams(void)",
    ),
    Ok(
        "Vehicle::SetShadow(tShadowMesh *)",
    ),
    Ok(
        "Vehicle::GetSimState(void) const",
    ),
    Ok(
        "Vehicle::mpSimState(void) const",
    ),
    Ok(
        "Vehicle::OnSetSimState(sim::SimState *)",
    ),
    Ok(
        "Vehicle::GetFirstPersonPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "Vehicle::GetAIRef(void)",
    ),
    Ok(
        "Vehicle::GetGroundPlaneAIRef(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tBillboardQuadGroup>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEffectController>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tPoseAnimationController>::SafeCast(void)",
    ),
    Ok(
        "sim::PhysicsJointMatrixModifier::GetMinimumJointIndex(void) const",
    ),
    Ok(
        "sim::PhysicsJointMatrixModifier::GetPriority(void) const",
    ),
    Ok(
        "sim::PhysicsJointMatrixModifier::Advance(float)",
    ),
    Ok(
        "sim::PhysicsJointMatrixModifier::Update(poser::Pose *)",
    ),
    Ok(
        "sim::PhysicsJointInertialEffector::GetMinimumJointIndex(void) const",
    ),
    Ok(
        "sim::PhysicsJointInertialEffector::GetPriority(void) const",
    ),
    Ok(
        "sim::PhysicsJointInertialEffector::SetIsEnabled(bool)",
    ),
    Ok(
        "sim::PhysicsJointInertialEffector::Advance(float)",
    ),
    Ok(
        "sim::PhysicsJointInertialEffector::Update(poser::Pose *)",
    ),
    Ok(
        "VehicleLocomotion::~VehicleLocomotion(void)",
    ),
    Ok(
        "PhysicsLocomotion::TerrainIntersectCache::TerrainIntersectCache(void)",
    ),
    Ok(
        "WorldCollisionSolverAgent::~WorldCollisionSolverAgent(void)",
    ),
    Ok(
        "WorldCollisionSolverAgent::WorldCollisionSolverAgent(void)",
    ),
    Ok(
        "RootMatrixDriver::GetMinimumJointIndex(void) const",
    ),
    Ok(
        "RootMatrixDriver::GetPriority(void) const",
    ),
    Ok(
        "RootMatrixDriver::Advance(float)",
    ),
    Ok(
        "SuspensionJointDriver::Advance(float)",
    ),
    Ok(
        "TrafficLocomotion::CompareNormalAndHeight(int, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tBillboardQuadGroup> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEffectController> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tPoseAnimationController> type_info function",
    ),
    Ok(
        "WorldCollisionSolverAgent type_info function",
    ),
    Ok(
        "WorldCollisionSolverAgent::ResetCollisionFlags(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tPoseAnimationController>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEffectController>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tBillboardQuadGroup>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to GeometryVehicle::GeometryVehicle(void)",
    ),
    Ok(
        "VehicleWander::~VehicleWander(void)",
    ),
    Ok(
        "VehicleWander::Tick(Vehicle *)",
    ),
    Ok(
        "AiVehicleController::AiVehicleController(Vehicle *)",
    ),
    Ok(
        "AiVehicleController::~AiVehicleController(void)",
    ),
    Ok(
        "AiVehicleController::Update(float)",
    ),
    Ok(
        "AiVehicleController::GetGas(void) const",
    ),
    Ok(
        "AiVehicleController::GetThrottle(void) const",
    ),
    Ok(
        "AiVehicleController::GetBrake(void) const",
    ),
    Ok(
        "AiVehicleController::GetSteering(bool &) const",
    ),
    Ok(
        "AiVehicleController::GetSteerLeft(void) const",
    ),
    Ok(
        "AiVehicleController::GetSteerRight(void) const",
    ),
    Ok(
        "AiVehicleController::GetHandBrake(void) const",
    ),
    Ok(
        "AiVehicleController::GetReverse(void) const",
    ),
    Ok(
        "AiVehicleController::GetHorn(void) const",
    ),
    Ok(
        "HumanVehicleController::HumanVehicleController(void)",
    ),
    Ok(
        "HumanVehicleController::Create(Vehicle *, VehicleMappable *, int)",
    ),
    Ok(
        "HumanVehicleController::SetWheel(VehicleMappable *, unsigned int)",
    ),
    Ok(
        "HumanVehicleController::~HumanVehicleController(void)",
    ),
    Ok(
        "HumanVehicleController::ReleaseVehicleMappable(void)",
    ),
    Ok(
        "HumanVehicleController::GetGas(void) const",
    ),
    Ok(
        "HumanVehicleController::GetThrottle(void) const",
    ),
    Ok(
        "HumanVehicleController::GetBrake(void) const",
    ),
    Ok(
        "HumanVehicleController::GetSteering(bool &) const",
    ),
    Ok(
        "HumanVehicleController::GetSteerLeft(void) const",
    ),
    Ok(
        "HumanVehicleController::GetSteerRight(void) const",
    ),
    Ok(
        "HumanVehicleController::GetReverse(void) const",
    ),
    Ok(
        "HumanVehicleController::GetHandBrake(void) const",
    ),
    Ok(
        "HumanVehicleController::GetHorn(void) const",
    ),
    Ok(
        "HumanVehicleController::Reset(void)",
    ),
    Ok(
        "HumanVehicleController::GetMappable(void) const",
    ),
    Ok(
        "HumanVehicleController::Update(float)",
    ),
    Ok(
        "HumanVehicleController::Init(void)",
    ),
    Ok(
        "HumanVehicleController::Shutdown(void)",
    ),
    Ok(
        "HumanVehicleController::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "VehicleController::VehicleController(void)",
    ),
    Ok(
        "VehicleController::~VehicleController(void)",
    ),
    Ok(
        "VehicleController::GetVehicle(void) const",
    ),
    Ok(
        "VehicleMappable::VehicleMappable(void)",
    ),
    Ok(
        "VehicleMappable::~VehicleMappable(void)",
    ),
    Ok(
        "VehicleMappable::ReleaseController(void)",
    ),
    Ok(
        "VehicleMappable::OnButton(int, int, Button const *)",
    ),
    Ok(
        "VehicleMappable::OnButtonUp(int, int, Button const *)",
    ),
    Ok(
        "VehicleMappable::OnButtonDown(int, int, Button const *)",
    ),
    Ok(
        "VehicleMappable::LoadControllerMappings(unsigned int)",
    ),
    Ok(
        "VehicleMappable::SetController(HumanVehicleController *)",
    ),
    Ok(
        "VehicleController type_info function",
    ),
    Ok(
        "AiVehicleController type_info function",
    ),
    Ok(
        "VehicleWander type_info function",
    ),
    Ok(
        "HumanVehicleController type_info function",
    ),
    Ok(
        "VehicleMappable type_info function",
    ),
    Ok(
        "VehicleController::Update(float)",
    ),
    Ok(
        "VehicleController::Init(void)",
    ),
    Ok(
        "VehicleController::Shutdown(void)",
    ),
    Ok(
        "TrafficManager::InitDefaultModelGroups(void)",
    ),
    Ok(
        "TrafficManager::GetSpawnController(void)",
    ),
    Ok(
        "TrafficManager::GetInstance(void)",
    ),
    Ok(
        "TrafficManager::DestroyInstance(void)",
    ),
    Ok(
        "TrafficManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "TrafficManager::Init(void)",
    ),
    Ok(
        "TrafficManager::ClearOutOfSightTraffic(void)",
    ),
    Ok(
        "TrafficManager::UpdateQueuedTrafficHorns(unsigned int)",
    ),
    Ok(
        "TrafficManager::Update(unsigned int)",
    ),
    Ok(
        "TrafficManager::ClearTrafficOutsideSphere(RadicalMathLibrary::Sphere const &)",
    ),
    Ok(
        "TrafficManager::ClearTrafficInSphere(RadicalMathLibrary::Sphere const &)",
    ),
    Ok(
        "TrafficManager::RemoveTraffic(Vehicle *)",
    ),
    Ok(
        "TrafficManager::EnableTraffic(void)",
    ),
    Ok(
        "TrafficManager::DisableTraffic(void)",
    ),
    Ok(
        "TrafficManager::AddCharacterToStopFor(Character *)",
    ),
    Ok(
        "TrafficManager::RemoveCharacterToStopFor(Character *)",
    ),
    Ok(
        "TrafficManager::GenerateRandomColour(pddiColour &)",
    ),
    Ok(
        "TrafficManager::Deactivate(Vehicle *)",
    ),
    Ok(
        "TrafficManager::SwapInTrafficHusk(Vehicle *)",
    ),
    Ok(
        "TrafficManager::SetMaxTraffic(int)",
    ),
    Ok(
        "TrafficManager::GetMaxTraffic(void)",
    ),
    Ok(
        "TrafficManager::TrafficManager(void)",
    ),
    Ok(
        "TrafficManager::~TrafficManager(void)",
    ),
    Ok(
        "TrafficManager::InitRandomVehicle(void)",
    ),
    Ok(
        "TrafficManager::Cleanup(void)",
    ),
    Ok(
        "TrafficManager::AddTraffic(Lane *, TrafficVehicle *)",
    ),
    Ok(
        "TrafficManager::RemoveTraffic(int)",
    ),
    Ok(
        "TrafficManager::RemoveTrafficVehicle(TrafficVehicle *)",
    ),
    Ok(
        "TrafficManager::GetFreeTrafficVehicle(void)",
    ),
    Ok(
        "TrafficManager::DetermineDesiredSpeedKph(void)",
    ),
    Ok(
        "TrafficManager::FindTrafficVehicle(Vehicle *)",
    ),
    Ok(
        "TrafficManager::InitRandomHusk(Vehicle *)",
    ),
    Ok(
        "TrafficManager::UpdateIntersection(unsigned int, Vehicle *, int &)",
    ),
    Ok(
        "TrafficManager::SetVehicleFadeAlpha(Vehicle *, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "TrafficManager::AttemptResurrection(TrafficVehicle *)",
    ),
    Ok(
        "TrafficVehicle type_info function",
    ),
    Ok(
        "TrafficManager type_info function",
    ),
    Ok(
        "TrafficVehicle::~TrafficVehicle(void)",
    ),
    Ok(
        "ITrafficSpawnController::ITrafficSpawnController(void)",
    ),
    Ok(
        "ITrafficSpawnController type_info function",
    ),
    Ok(
        "Path::Path(void)",
    ),
    Ok(
        "Path::AllocateSegments(int)",
    ),
    Ok(
        "Path::~Path(void)",
    ),
    Ok(
        "Path::GetPathSegmentByIndex(int)",
    ),
    Ok(
        "Path::AddPedestrian(void)",
    ),
    Ok(
        "Path::RemovePedestrian(void)",
    ),
    Ok(
        "Path::IsFull(void) const",
    ),
    Ok(
        "PathManager::GetInstance(void)",
    ),
    Ok(
        "PathManager::Destroy(void)",
    ),
    Ok(
        "PathManager::PathManager(void)",
    ),
    Ok(
        "PathManager::~PathManager(void)",
    ),
    Ok(
        "PathManager::AllocatePaths(int)",
    ),
    Ok(
        "PathManager::GetFreePath(void)",
    ),
    Ok(
        "PathSegment::Initialize(Path *, int, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector)",
    ),
    Ok(
        "PathSegment::PathSegment(void)",
    ),
    Ok(
        "PathSegment::~PathSegment(void)",
    ),
    Ok(
        "PathSegment::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "PathSegment::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "PathSegment::Display(void)",
    ),
    Ok(
        "PathSegment::pPosition(void)",
    ),
    Ok(
        "PathSegment::rPosition(void)",
    ),
    Ok(
        "PathSegment::GetPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "PathSegment type_info function",
    ),
    Ok(
        "PathManager type_info function",
    ),
    Ok(
        "PedestrianManager::GetInstance(void)",
    ),
    Ok(
        "PedestrianManager::DestroyInstance(void)",
    ),
    Ok(
        "PedestrianManager::InitDefaultModelGroups(void)",
    ),
    Ok(
        "PedestrianManager::SetDefaultModelGroup(int)",
    ),
    Ok(
        "PedestrianManager::Init(void)",
    ),
    Ok(
        "PedestrianManager::Update(unsigned int)",
    ),
    Ok(
        "PedestrianManager::RemovePed(Character *)",
    ),
    Ok(
        "PedestrianManager::RemoveAllPeds(void)",
    ),
    Ok(
        "PedestrianManager::AllowAddingPeds(bool)",
    ),
    Ok(
        "PedestrianManager::PedestrianManager(void)",
    ),
    Ok(
        "PedestrianManager::~PedestrianManager(void)",
    ),
    Ok(
        "PedestrianManager::DeactivatePed(PedestrianManager::PedestrianStruct *)",
    ),
    Ok(
        "PedestrianManager::GetRandomMinDistSqr(void)",
    ),
    Ok(
        "PedestrianManager::ActivatePed(PathSegment *, RadicalMathLibrary::Vector)",
    ),
    Ok(
        "PedestrianManager::SwapModels(int, PedestrianManager::PedestrianStruct *)",
    ),
    Ok(
        "PedestrianManager::GetRandomModel(void)",
    ),
    Ok(
        "PedestrianManager::RegisterModel(char const *, int)",
    ),
    Ok(
        "PedestrianManager::UnregisterModel(int)",
    ),
    Ok(
        "PedestrianManager::UnregisterAllModels(void)",
    ),
    Ok(
        "PedestrianManager::SwitchModelGroup(int)",
    ),
    Ok(
        "PedestrianManager::GetModelIDByName(char const *)",
    ),
    Ok(
        "PedestrianManager::SetModelGroup(int, PedestrianManager::ModelGroup const &)",
    ),
    Ok(
        "PedestrianManager::IsPed(Character *)",
    ),
    Ok(
        "PedestrianManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "PedestrianManager::AddPeds(RadicalMathLibrary::Vector, float)",
    ),
    Ok(
        "PedestrianManager::FindModelInUseAndRemove(char const *)",
    ),
    Ok(
        "PedestrianManager::FindModelInUseAndAdd(char const *)",
    ),
    Ok(
        "PedestrianManager::DumpAllPedModels(void)",
    ),
    Ok(
        "Pedestrian::Pedestrian(void)",
    ),
    Ok(
        "Pedestrian::~Pedestrian(void)",
    ),
    Ok(
        "Pedestrian::Update(float)",
    ),
    Ok(
        "Pedestrian::GetValue(int) const",
    ),
    Ok(
        "Pedestrian::IsButtonDown(int) const",
    ),
    Ok(
        "Pedestrian::Activate(Path *, PathSegment *, RadicalMathLibrary::Vector, char const *)",
    ),
    Ok(
        "Pedestrian::ActivateSelf(void)",
    ),
    Ok(
        "Pedestrian::InitZero(void)",
    ),
    Ok(
        "Pedestrian::Deactivate(void)",
    ),
    Ok(
        "Pedestrian::OnReachedWaypoint(void)",
    ),
    Ok(
        "Pedestrian::GetFollowPathSpeedMps(void) const",
    ),
    Ok(
        "Pedestrian::DetermineFollowPathSpeed(void)",
    ),
    Ok(
        "Pedestrian type_info function",
    ),
    Ok(
        "PedestrianManager type_info function",
    ),
    Ok(
        "PedestrianManager::UsedModel::~UsedModel(void)",
    ),
    Ok(
        "SpawnManager::Init(void)",
    ),
    Ok(
        "SpawnManager::Update(float)",
    ),
    Ok(
        "SpawnManager type_info function",
    ),
    Ok(
        "SpawnManager::~SpawnManager(void)",
    ),
    Ok(
        "ChaseManager::ChaseManager(void)",
    ),
    Ok(
        "ChaseManager::~ChaseManager(void)",
    ),
    Ok(
        "ChaseManager::IsChaseVehicle(Vehicle *)",
    ),
    Ok(
        "ChaseManager::FindChaseVehicle(Vehicle *)",
    ),
    Ok(
        "ChaseManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "ChaseManager::Init(void)",
    ),
    Ok(
        "ChaseManager::ClearAllObjects(void)",
    ),
    Ok(
        "ChaseManager::GetNumActiveVehicles(void)",
    ),
    Ok(
        "ChaseManager::ClearOutOfSightVehicles(void)",
    ),
    Ok(
        "ChaseManager::ClearObjectsInsideRadius(RadicalMathLibrary::Vector, float)",
    ),
    Ok(
        "ChaseManager::ClearObjectsOutsideRadius(RadicalMathLibrary::Vector, float)",
    ),
    Ok(
        "ChaseManager::RegisterModel(char const *, int)",
    ),
    Ok(
        "ChaseManager::IsModelRegistered(char const *)",
    ),
    Ok(
        "ChaseManager::UnregisterModel(char const *)",
    ),
    Ok(
        "ChaseManager::SetConfileName(char const *)",
    ),
    Ok(
        "ChaseManager::DisableAllActiveVehicleAIs(void)",
    ),
    Ok(
        "ChaseManager::EnableAllActiveVehicleAIs(void)",
    ),
    Ok(
        "ChaseManager::AddObjects(float)",
    ),
    Ok(
        "ChaseManager::RemoveObjects(float)",
    ),
    Ok(
        "ChaseManager::UpdateObjects(float)",
    ),
    Ok(
        "ChaseManager::SuspendAllVehicles(void)",
    ),
    Ok(
        "ChaseManager::ResumeAllVehicles(void)",
    ),
    Ok(
        "ChaseManager::DeactivateVehicle(ChaseManager::ChaseVehicle *)",
    ),
    Ok(
        "ChaseManager::ActivateVehicle(ChaseManager::ChaseVehicle *)",
    ),
    Ok(
        "ChaseManager::DeactivateAllVehicles(void)",
    ),
    Ok(
        "ChaseManager::MarkAllVehiclesForDeletion(void)",
    ),
    Ok(
        "ChaseManager::GetInactiveVehicle(void)",
    ),
    Ok(
        "ChaseManager::SpawningOnTopOfAnotherVehicle(RadicalMathLibrary::Sphere const &)",
    ),
    Ok(
        "ChaseManager::GetClosestCarPosition(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "ChaseManager type_info function",
    ),
    Ok(
        "ChaseManager::GetAbsoluteMaxObjects(void) const",
    ),
    Ok(
        "ChaseManager::GetMaxObjects(void) const",
    ),
    Ok(
        "ChaseManager::SetMaxObjects(int)",
    ),
    Ok(
        "ChaseManager::GetMaxModels(void) const",
    ),
    Ok(
        "ChaseManager::GetNumRegisteredModels(void) const",
    ),
    Ok(
        "ChaseManager::GetSecondsBetwAdds(void) const",
    ),
    Ok(
        "ChaseManager::GetSecondsBetwRemoves(void) const",
    ),
    Ok(
        "ChaseManager::GetSecondsBetwUpdates(void) const",
    ),
    Ok(
        "CStateProp::CreateStateProp(CStatePropData *, unsigned int, tPose *)",
    ),
    Ok(
        "CStateProp::CStateProp(tAnimatedObject *, CStatePropData *, unsigned int)",
    ),
    Ok(
        "CStateProp::~CStateProp(void)",
    ),
    Ok(
        "CStateProp::Update(float)",
    ),
    Ok(
        "CStateProp::UpdateFrameControllersForRender(void)",
    ),
    Ok(
        "CStateProp::GetState(void)",
    ),
    Ok(
        "CStateProp::SetState(unsigned int)",
    ),
    Ok(
        "CStateProp::OnEvent(unsigned int)",
    ),
    Ok(
        "CStateProp::AddStatePropListener(CStatePropListener *)",
    ),
    Ok(
        "CStateProp::RemoveStatePropListener(CStatePropListener *)",
    ),
    Ok(
        "CStateProp::GetDrawable(void)",
    ),
    Ok(
        "CStateProp::GetNumberOfFrameControllers(void)",
    ),
    Ok(
        "CStateProp::GetFrameControllerByIndex(unsigned int)",
    ),
    Ok(
        "CStateProp::GetDrawableElement(unsigned int)",
    ),
    Ok(
        "CStateProp::Display(StatePropDSGProcAnimator *)",
    ),
    Ok(
        "CStatePropData::CStatePropData(void)",
    ),
    Ok(
        "CStatePropData::~CStatePropData(void)",
    ),
    Ok(
        "CStatePropData::GetNumberOfStates(void)",
    ),
    Ok(
        "CStatePropData::GetTransitionData(int)",
    ),
    Ok(
        "CStatePropData::GetVisibilityData(int, int)",
    ),
    Ok(
        "CStatePropData::GetFrameControllerData(int, int)",
    ),
    Ok(
        "CStatePropData::GetNumberOfEvents(int)",
    ),
    Ok(
        "CStatePropData::GetEventData(int, int)",
    ),
    Ok(
        "CStatePropData::GetNumberOfCallbacks(int)",
    ),
    Ok(
        "CStatePropData::GetCallbackData(int, int)",
    ),
    Ok(
        "CStatePropDataLoader::CStatePropDataLoader(void)",
    ),
    Ok(
        "CStatePropDataLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "CStateProp type_info function",
    ),
    Ok(
        "CStatePropData type_info function",
    ),
    Ok(
        "CStatePropDataLoader type_info function",
    ),
    Ok(
        "CStatePropDataLoader::~CStatePropDataLoader(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimatedObjectFactory>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimatedObjectFactory> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimatedObjectFactory>::safe_cast(IRefCount *)",
    ),
    Ok(
        "UFO::~UFO(void)",
    ),
    Ok(
        "UFO::LoadSetup(char const *, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "UFO::AddWeapon(Weapon *, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "UFO::Update(float)",
    ),
    Ok(
        "UFO::Navigate(float)",
    ),
    Ok(
        "UFO::Move(float)",
    ),
    Ok(
        "UFO::ScanForTargets(void)",
    ),
    Ok(
        "UFO::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "TractorBeam::~TractorBeam(void)",
    ),
    Ok(
        "TractorBeam::LoadSetup(char const *)",
    ),
    Ok(
        "TractorBeam::Update(float)",
    ),
    Ok(
        "TractorBeam::IsValidTarget(DynaPhysDSG *) const",
    ),
    Ok(
        "TractorBeam::CanFire(DynaPhysDSG *) const",
    ),
    Ok(
        "TractorBeam::Fire(DynaPhysDSG *)",
    ),
    Ok(
        "TractorBeam::Display(void)",
    ),
    Ok(
        "TractorBeam::SetPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "TractorBeam::SwallowObject(DynaPhysDSG *)",
    ),
    Ok(
        "TractorBeam::Slerp(RadicalMathLibrary::Matrix, RadicalMathLibrary::Matrix, float, float)",
    ),
    Ok(
        "UFOWeapon * __uninitialized_copy_aux<UFOWeapon *, UFOWeapon *>(UFOWeapon *, UFOWeapon *, UFOWeapon *, __false_type)",
    ),
    Ok(
        "vector<UFOWeapon, s2alloc<UFOWeapon> >::_M_insert_aux(UFOWeapon *, UFOWeapon const &)",
    ),
    Ok(
        "Map<float, int>::Map(void)",
    ),
    Ok(
        "void __push_heap<MapElement<float, int> *, int, MapElement<float, int> >(MapElement<float, int> *, int, int, MapElement<float, int>)",
    ),
    Ok(
        "void __adjust_heap<MapElement<float, int> *, int, MapElement<float, int> >(MapElement<float, int> *, int, int, MapElement<float, int>)",
    ),
    Ok(
        "void __make_heap<MapElement<float, int> *, MapElement<float, int>, int>(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *, int *)",
    ),
    Ok(
        "void sort_heap<MapElement<float, int> *>(MapElement<float, int> *, MapElement<float, int> *)",
    ),
    Ok(
        "void __partial_sort<MapElement<float, int> *, MapElement<float, int> >(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *)",
    ),
    Ok(
        "MapElement<float, int> * __unguarded_partition<MapElement<float, int> *, MapElement<float, int> >(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int>)",
    ),
    Ok(
        "void __introsort_loop<MapElement<float, int> *, MapElement<float, int>, int>(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *, int)",
    ),
    Ok(
        "void __unguarded_linear_insert<MapElement<float, int> *, MapElement<float, int> >(MapElement<float, int> *, MapElement<float, int>)",
    ),
    Ok(
        "void __insertion_sort<MapElement<float, int> *>(MapElement<float, int> *, MapElement<float, int> *)",
    ),
    Ok(
        "void __unguarded_insertion_sort_aux<MapElement<float, int> *, MapElement<float, int> >(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *)",
    ),
    Ok(
        "void __final_insertion_sort<MapElement<float, int> *>(MapElement<float, int> *, MapElement<float, int> *)",
    ),
    Ok(
        "Map<float, int>::RefreshIfDirty(void) const",
    ),
    Ok(
        "MapElement<float, int> * __lower_bound<MapElement<float, int> *, MapElement<float, int>, int>(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> const &, int *)",
    ),
    Ok(
        "Map<float, int>::find(float const &)",
    ),
    Ok(
        "Map<float, int>::end(void)",
    ),
    Ok(
        "MapElement<float, int> * __uninitialized_copy_aux<MapElement<float, int> *, MapElement<float, int> *>(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *, __false_type)",
    ),
    Ok(
        "vector<MapElement<float, int>, s2alloc<MapElement<float, int> > >::_M_insert_aux(MapElement<float, int> *, MapElement<float, int> const &)",
    ),
    Ok(
        "Map<float, int>::insert(float const &, int const &)",
    ),
    Ok(
        "Map<float, int>::size(void) const",
    ),
    Ok(
        "Map<float, int>::begin(void)",
    ),
    Ok(
        "Boss type_info function",
    ),
    Ok(
        "UFO type_info function",
    ),
    Ok(
        "Weapon type_info function",
    ),
    Ok(
        "TractorBeam type_info function",
    ),
    Ok(
        "Boss::~Boss(void)",
    ),
    Ok(
        "UFOWeapon::UFOWeapon(void)",
    ),
    Ok(
        "_Vector_alloc_base<UFOWeapon, s2alloc<UFOWeapon>, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "Weapon::~Weapon(void)",
    ),
    Ok(
        "Map<float, int>::~Map(void)",
    ),
    Ok(
        "_Vector_alloc_base<MapElement<float, int>, s2alloc<MapElement<float, int> >, false>::~_Vector_alloc_base(void)",
    ),
    Ok(
        "ParkedCarManager::GetInstance(void)",
    ),
    Ok(
        "ParkedCarManager::DestroyInstance(void)",
    ),
    Ok(
        "ParkedCarManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "ParkedCarManager::FindParkedCarInfo(Vehicle *, ParkedCarManager::ParkedCarInfo *&, bool &)",
    ),
    Ok(
        "ParkedCarManager::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "ParkedCarManager::AddCarType(char const *)",
    ),
    Ok(
        "ParkedCarManager::AddLocator(CarStartLocator *)",
    ),
    Ok(
        "ParkedCarManager::AddFreeCar(char const *, CarStartLocator *)",
    ),
    Ok(
        "ParkedCarManager::RemoveFreeCar(void)",
    ),
    Ok(
        "ParkedCarManager::RemoveFreeCarIfClose(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "ParkedCarManager::ParkedCarManager(void)",
    ),
    Ok(
        "ParkedCarManager::~ParkedCarManager(void)",
    ),
    Ok(
        "ParkedCarManager::CreateFreeCar(void)",
    ),
    Ok(
        "ParkedCarManager::MDKParkedCars(void)",
    ),
    Ok(
        "ParkedCarManager type_info function",
    ),
    Ok(
        "LoadingSuperSprintContext::GetInstance(void)",
    ),
    Ok(
        "LoadingSuperSprintContext::LoadingSuperSprintContext(void)",
    ),
    Ok(
        "LoadingSuperSprintContext::~LoadingSuperSprintContext(void)",
    ),
    Ok(
        "LoadingSuperSprintContext::OnStart(ContextEnum)",
    ),
    Ok(
        "LoadingSuperSprintContext::OnStop(ContextEnum)",
    ),
    Ok(
        "LoadingSuperSprintContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "LoadingSuperSprintContext::OnSuspend(void)",
    ),
    Ok(
        "LoadingSuperSprintContext::OnResume(void)",
    ),
    Ok(
        "LoadingSuperSprintContext::PrepareNewHeaps(void)",
    ),
    Ok(
        "LoadingSuperSprintContext::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "SuperSprintContext::GetInstance(void)",
    ),
    Ok(
        "SuperSprintContext::OnStart(ContextEnum)",
    ),
    Ok(
        "SuperSprintContext::OnStop(ContextEnum)",
    ),
    Ok(
        "SuperSprintContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "SuperSprintContext::OnSuspend(void)",
    ),
    Ok(
        "SuperSprintContext::OnResume(void)",
    ),
    Ok(
        "SuperSprintContext::SuperSprintContext(void)",
    ),
    Ok(
        "SuperSprintContext::~SuperSprintContext(void)",
    ),
    Ok(
        "SuperSprintFEContext::GetInstance(void)",
    ),
    Ok(
        "SuperSprintFEContext::OnStart(ContextEnum)",
    ),
    Ok(
        "SuperSprintFEContext::OnStop(ContextEnum)",
    ),
    Ok(
        "SuperSprintFEContext::OnUpdate(unsigned int)",
    ),
    Ok(
        "SuperSprintFEContext::OnSuspend(void)",
    ),
    Ok(
        "SuperSprintFEContext::OnResume(void)",
    ),
    Ok(
        "SuperSprintFEContext::OnHandleEvent(EventEnum, void *)",
    ),
    Ok(
        "SuperSprintFEContext::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "SuperSprintFEContext::SuperSprintFEContext(void)",
    ),
    Ok(
        "SuperSprintFEContext::~SuperSprintFEContext(void)",
    ),
    Ok(
        "LoadingSuperSprintContext type_info function",
    ),
    Ok(
        "SuperSprintContext type_info function",
    ),
    Ok(
        "SuperSprintFEContext type_info function",
    ),
    Ok(
        "global constructors keyed to LoadingSuperSprintContext::spInstance",
    ),
    Ok(
        "SuperSprintManager::HandleEvent(EventEnum, void *)",
    ),
    Ok(
        "SuperSprintManager::OnProcessRequestsComplete(void *)",
    ),
    Ok(
        "SuperSprintManager::GetInstance(void)",
    ),
    Ok(
        "SuperSprintManager::DestroyInstance(void)",
    ),
    Ok(
        "SuperSprintManager::Initialize(void)",
    ),
    Ok(
        "SuperSprintManager::Finalize(void)",
    ),
    Ok(
        "SuperSprintManager::Update(unsigned int)",
    ),
    Ok(
        "SuperSprintManager::LoadScriptData(void)",
    ),
    Ok(
        "SuperSprintManager::StartRace(void)",
    ),
    Ok(
        "SuperSprintManager::SetCharacter(int, int)",
    ),
    Ok(
        "SuperSprintManager::SetVehicle(int, char const *)",
    ),
    Ok(
        "SuperSprintManager::CalculatePositions(void)",
    ),
    Ok(
        "SuperSprintManager::LoadLevelData(void)",
    ),
    Ok(
        "SuperSprintManager::Reset(void)",
    ),
    Ok(
        "SuperSprintManager::OnButton(int, int, Button const *)",
    ),
    Ok(
        "SuperSprintManager::OnButtonUp(int, int, Button const *)",
    ),
    Ok(
        "SuperSprintManager::OnButtonDown(int, int, Button const *)",
    ),
    Ok(
        "SuperSprintManager::LoadControllerMappings(unsigned int)",
    ),
    Ok(
        "SuperSprintManager::OnControllerConnect(int)",
    ),
    Ok(
        "SuperSprintManager::OnControllerDisconnect(int)",
    ),
    Ok(
        "SuperSprintManager::GetNumCheckpoints(void)",
    ),
    Ok(
        "SuperSprintManager::SetUpCars(void)",
    ),
    Ok(
        "SuperSprintManager::CleanUpCars(void)",
    ),
    Ok(
        "SuperSprintManager::PositionCars(void)",
    ),
    Ok(
        "SuperSprintManager::PositionAI(void)",
    ),
    Ok(
        "SuperSprintManager::DisableAllAI(void)",
    ),
    Ok(
        "SuperSprintManager::DisableAllControllers(void)",
    ),
    Ok(
        "SuperSprintManager::InitRaceData(void)",
    ),
    Ok(
        "SuperSprintManager::ResetRaceData(void)",
    ),
    Ok(
        "SuperSprintManager::PlaceCharactersInCars(void)",
    ),
    Ok(
        "SuperSprintManager::LoadCars(void)",
    ),
    Ok(
        "SuperSprintManager::LoadCharacters(void)",
    ),
    Ok(
        "SuperSprintManager::EnumerateControllers(void)",
    ),
    Ok(
        "SuperSprintManager::SetupIcons(void)",
    ),
    Ok(
        "SuperSprintManager::InitCamera(void)",
    ),
    Ok(
        "SuperSprintManager::GetOnlyHumanPlayerID(void)",
    ),
    Ok(
        "SuperSprintManager::RestoreControllerState(void)",
    ),
    Ok(
        "SuperSprintManager::SetupTraps(void)",
    ),
    Ok(
        "SuperSprintManager::PlayIntroCam(void)",
    ),
    Ok(
        "SuperSprintManager::UpdatePositionIcons(unsigned int)",
    ),
    Ok(
        "SuperSprintManager::GetCheckpointWith(char)",
    ),
    Ok(
        "SuperSprintManager::GetPathDataWith(Locator *)",
    ),
    Ok(
        "SuperSprintManager::PositionCharacters(void)",
    ),
    Ok(
        "SuperSprintManager::SuperSprintManager(void)",
    ),
    Ok(
        "SuperSprintManager::~SuperSprintManager(void)",
    ),
    Ok(
        "SuperSprintDrawable type_info function",
    ),
    Ok(
        "SuperSprintManager type_info function",
    ),
    Ok(
        "SuperSprintDrawable::~SuperSprintDrawable(void)",
    ),
    Ok(
        "SuperSprintDrawable::Display(void)",
    ),
    Ok(
        "SuperSprintManager::InitLevelData(void)",
    ),
    Ok(
        "SuperSprintManager::CleanMissionData(void)",
    ),
    Ok(
        "SuperSprintManager::IsSundayDrive(void)",
    ),
    Ok(
        "SuperSprintManager::PerformLoading(void)",
    ),
    Ok(
        "SuperSprintManager::LoadMission(void)",
    ),
    Ok(
        "SuperSprintManager::IsSuperSprint(void)",
    ),
    Ok(
        "global constructors keyed to SuperSprintManager::spInstance",
    ),
    Ok(
        "FootprintManager::Footprint::Footprint(void)",
    ),
    Ok(
        "FootprintManager::FootprintManager(void)",
    ),
    Ok(
        "FootprintManager::~FootprintManager(void)",
    ),
    Ok(
        "FootprintManager::CreateInstance(void)",
    ),
    Ok(
        "FootprintManager::GetInstance(void)",
    ),
    Ok(
        "FootprintManager::DestroyInstance(void)",
    ),
    Ok(
        "FootprintManager::Render(void)",
    ),
    Ok(
        "FootprintManager::Update(unsigned int)",
    ),
    Ok(
        "FootprintManager::FreeTextures(void)",
    ),
    Ok(
        "choreo::Animation::Animation(choreo::Rig *, tAnimation *, choreo::Partition *, choreo::GroundFixupEnum)",
    ),
    Ok(
        "choreo::Animation::~Animation(void)",
    ),
    Ok(
        "choreo::Animation::GetGroundFixup(float) const",
    ),
    Ok(
        "choreo::Animation::MakeValidFrame(float, float, float, bool)",
    ),
    Ok(
        "choreo::Animation::NewDriver(void)",
    ),
    Ok(
        "choreo::Animation::NewAnimationDriver(void)",
    ),
    Ok(
        "choreo::Animation::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::AnimationFrame::AnimationFrame(choreo::Animation *)",
    ),
    Ok(
        "choreo::AnimationFrame::~AnimationFrame(void)",
    ),
    Ok(
        "choreo::AnimationFrame::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::AnimationFrame::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::AnimationFrame::HasJointTranslation(int) const",
    ),
    Ok(
        "choreo::AnimationFrame::HasJointRotation(int) const",
    ),
    Ok(
        "choreo::AnimationFrame::GetGroupPriority(void) const",
    ),
    Ok(
        "choreo::AnimationFrame::GetGroupWeight(void) const",
    ),
    Ok(
        "choreo::AnimationRootDriver::AnimationRootDriver(choreo::Animation *, choreo::AnimationFrame *)",
    ),
    Ok(
        "choreo::AnimationRootDriver::~AnimationRootDriver(void)",
    ),
    Ok(
        "choreo::AnimationRootDriver::Reset(choreo::RootBlender *)",
    ),
    Ok(
        "choreo::AnimationRootDriver::GetRootBlendInTime(void) const",
    ),
    Ok(
        "choreo::AnimationRootDriver::GetRootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::AnimationRootDriver::GetRootWeight(void) const",
    ),
    Ok(
        "choreo::AnimationRootDriver::GetRootPriority(void) const",
    ),
    Ok(
        "choreo::AnimationRootDriver::HasRootTranslation(void) const",
    ),
    Ok(
        "choreo::AnimationRootDriver::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::AnimationRootDriver::HasRootRotation(void) const",
    ),
    Ok(
        "choreo::AnimationRootDriver::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::AnimationRootDriver::HasRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::AnimationRootDriver::GetRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::AnimationJointDriver(choreo::Animation *, choreo::AnimationFrame *)",
    ),
    Ok(
        "choreo::AnimationJointDriver::~AnimationJointDriver(void)",
    ),
    Ok(
        "choreo::AnimationJointDriver::Reset(void)",
    ),
    Ok(
        "choreo::AnimationJointDriver::Advance(float)",
    ),
    Ok(
        "choreo::AnimationJointDriver::GetBlendInTime(void) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::GetBlendOutTime(void) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::HasJointTranslation(int) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::GetJointTranslation(int, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::HasJointRotation(int) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::GetJointRotation(int, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::GetGroupWeight(tUidUnaligned) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::GetGroupPriority(tUidUnaligned) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::HasGroupTranslation(tUidUnaligned) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::GetGroupTranslation(tUidUnaligned, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::HasGroupRotation(tUidUnaligned) const",
    ),
    Ok(
        "choreo::AnimationJointDriver::GetGroupRotation(tUidUnaligned, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::AnimationFootDriver(choreo::RigLeg *, choreo::Animation *, choreo::AnimationFrame *)",
    ),
    Ok(
        "choreo::AnimationFootDriver::~AnimationFootDriver(void)",
    ),
    Ok(
        "choreo::AnimationFootDriver::GetFootBlendInTime(void) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::GetFootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::GetFootWeight(void) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::GetFootPriority(void) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::HasFootEffectorTranslation(void) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::GetFootEffectorTranslation(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::HasFootEffectorRotation(void) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::GetFootEffectorRotation(RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::HasFootPoleVectorTranslation(void) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::GetFootPoleVectorTranslation(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::HasFootPlanted(void) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::IsFootPlanted(void) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::HasFootGroundFixup(void) const",
    ),
    Ok(
        "choreo::AnimationFootDriver::GetFootGroundFixup(void) const",
    ),
    Ok(
        "choreo::AnimationDriver::AnimationDriver(choreo::Animation *)",
    ),
    Ok(
        "choreo::AnimationDriver::~AnimationDriver(void)",
    ),
    Ok(
        "choreo::AnimationDriver::Clone(void) const",
    ),
    Ok(
        "choreo::AnimationDriver::SetPartition(choreo::Partition *)",
    ),
    Ok(
        "choreo::AnimationDriver::SetWeight(float)",
    ),
    Ok(
        "choreo::AnimationDriver::SetPriority(int)",
    ),
    Ok(
        "choreo::AnimationDriver::SetSpeed(float)",
    ),
    Ok(
        "choreo::AnimationDriver::SetStartFrame(float)",
    ),
    Ok(
        "choreo::AnimationDriver::SetEndFrame(float)",
    ),
    Ok(
        "choreo::AnimationDriver::SetPlaybackTimings(float, float, float, float)",
    ),
    Ok(
        "choreo::AnimationDriver::GetCycleDuration(void) const",
    ),
    Ok(
        "choreo::AnimationDriver::GetDuration(void) const",
    ),
    Ok(
        "choreo::AnimationDriver::GetTimeRemaining(void) const",
    ),
    Ok(
        "choreo::AnimationDriver::GetValidFrame(float) const",
    ),
    Ok(
        "choreo::AnimationDriver::GetNextFrame(float) const",
    ),
    Ok(
        "choreo::AnimationDriver::GetFrame(void) const",
    ),
    Ok(
        "choreo::AnimationDriver::SetFrame(float)",
    ),
    Ok(
        "choreo::AnimationDriver::Reset(void)",
    ),
    Ok(
        "choreo::AnimationDriver::Begin(choreo::Puppet *)",
    ),
    Ok(
        "choreo::AnimationDriver::Advance(float)",
    ),
    Ok(
        "choreo::AnimationDriver::IsFinished(void) const",
    ),
    Ok(
        "choreo::AnimationDriver::End(choreo::Puppet *)",
    ),
    Ok(
        "choreo::AnimationDriver::Apply(choreo::Engine *)",
    ),
    Ok(
        "choreo::Animation type_info function",
    ),
    Ok(
        "choreo::AnimationDriver type_info function",
    ),
    Ok(
        "choreo::AnimationFrame type_info function",
    ),
    Ok(
        "choreo::AnimationRootDriver type_info function",
    ),
    Ok(
        "choreo::AnimationJointDriver type_info function",
    ),
    Ok(
        "choreo::AnimationFootDriver type_info function",
    ),
    Ok(
        "choreo::PuppetDriver::~PuppetDriver(void)",
    ),
    Ok(
        "choreo::PuppetDriver::PuppetDriver(void)",
    ),
    Ok(
        "choreo::PuppetDriverFactory::~PuppetDriverFactory(void)",
    ),
    Ok(
        "choreo::PuppetDriverFactory::PuppetDriverFactory(void)",
    ),
    Ok(
        "choreo::RootBlendDriver::~RootBlendDriver(void)",
    ),
    Ok(
        "choreo::RootBlendDriver::RootBlendDriver(void)",
    ),
    Ok(
        "choreo::JointBlendDriver::~JointBlendDriver(void)",
    ),
    Ok(
        "choreo::JointBlendDriver::JointBlendDriver(void)",
    ),
    Ok(
        "choreo::FootBlendDriver::~FootBlendDriver(void)",
    ),
    Ok(
        "choreo::FootBlendDriver::FootBlendDriver(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Partition>::SafeCast(void)",
    ),
    Ok(
        "choreo::PuppetDriver type_info function",
    ),
    Ok(
        "choreo::PuppetDriverFactory type_info function",
    ),
    Ok(
        "choreo::RootBlendDriver type_info function",
    ),
    Ok(
        "choreo::JointBlendDriver type_info function",
    ),
    Ok(
        "choreo::FootBlendDriver type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Partition> type_info function",
    ),
    Ok(
        "choreo::Driver::~Driver(void)",
    ),
    Ok(
        "choreo::Driver::Driver(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Partition>::safe_cast(IRefCount *)",
    ),
    Ok(
        "choreo::Driver type_info function",
    ),
    Ok(
        "choreo::Bank::RawIterator::RawIterator(choreo::Bank *)",
    ),
    Ok(
        "choreo::Bank::RawIterator::First(void)",
    ),
    Ok(
        "choreo::Bank::RawIterator::Last(void)",
    ),
    Ok(
        "choreo::Bank::RawIterator::Next(void)",
    ),
    Ok(
        "choreo::Bank::RawIterator::Prev(void)",
    ),
    Ok(
        "choreo::Bank::Bank(choreo::Rig *)",
    ),
    Ok(
        "choreo::Bank::~Bank(void)",
    ),
    Ok(
        "choreo::Bank::Find(radLoadInventory::SafeCastBase &, tUidUnaligned) const",
    ),
    Ok(
        "choreo::Bank::Store(tEntity *)",
    ),
    Ok(
        "choreo::Bank::NewRawIterator(void)",
    ),
    Ok(
        "choreo::Bank::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::Bank::RegisterScriptReadHandler(bool (*)(choreo::ScriptReader *, choreo::BaseBank *))",
    ),
    Ok(
        "choreo::Bank::RegisterDefaultScriptReadHandlers(void)",
    ),
    Ok(
        "tEntityTable::~tEntityTable(void)",
    ),
    Ok(
        "tEntityTable type_info function",
    ),
    Ok(
        "choreo::Bank::RawIterator type_info function",
    ),
    Ok(
        "choreo::Bank type_info function",
    ),
    Ok(
        "radLoadHashedStore::Iterator::~Iterator(void)",
    ),
    Ok(
        "choreo::BaseBank::RawIterator::RawIterator(void)",
    ),
    Ok(
        "choreo::BaseBank::~BaseBank(void)",
    ),
    Ok(
        "choreo::BaseBank::BaseBank(void)",
    ),
    Ok(
        "choreo::Bank::GetRig(void) const",
    ),
    Ok(
        "choreo::Bank::RawIterator::~RawIterator(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Rig>::SafeCast(void)",
    ),
    Ok(
        "choreo::BaseBank::RawIterator type_info function",
    ),
    Ok(
        "choreo::BaseBank type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Rig> type_info function",
    ),
    Ok(
        "HashTable<IRefCount>::Iterator::~Iterator(void)",
    ),
    Ok(
        "choreo::BaseBank::RawIterator::~RawIterator(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Rig>::safe_cast(IRefCount *)",
    ),
    Ok(
        "choreo::GetFindHook(void)",
    ),
    Ok(
        "choreo::GetFindHookContext(void)",
    ),
    Ok(
        "choreo::MultiBank::MultiBank(choreo::BaseBank *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::MultiBank::~MultiBank(void)",
    ),
    Ok(
        "choreo::MultiBank::Find(radLoadInventory::SafeCastBase &, tUidUnaligned) const",
    ),
    Ok(
        "choreo::MultiBank::Store(tEntity *)",
    ),
    Ok(
        "choreo::P3DEntityStoreWrapperBank::P3DEntityStoreWrapperBank(tEntityStore *)",
    ),
    Ok(
        "choreo::P3DEntityStoreWrapperBank::~P3DEntityStoreWrapperBank(void)",
    ),
    Ok(
        "choreo::P3DEntityStoreWrapperBank::Find(radLoadInventory::SafeCastBase &, tUidUnaligned) const",
    ),
    Ok(
        "choreo::P3DEntityStoreWrapperBank::Store(tEntity *)",
    ),
    Ok(
        "choreo::P3DEntityStoreWrapperBank::NewRawIterator(void)",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::RawIterator::RawIterator(choreo::P3DInventoryWrapperBank *)",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::RawIterator::First(void)",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::RawIterator::Last(void)",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::RawIterator::Next(void)",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::RawIterator::Prev(void)",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::~P3DInventoryWrapperBank(void)",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::Find(radLoadInventory::SafeCastBase &, tUidUnaligned) const",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::Store(tEntity *)",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::NewRawIterator(void)",
    ),
    Ok(
        "choreo::MultiBank type_info function",
    ),
    Ok(
        "choreo::P3DEntityStoreWrapperBank type_info function",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::RawIterator type_info function",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank type_info function",
    ),
    Ok(
        "choreo::MultiBank::GetRig(void) const",
    ),
    Ok(
        "choreo::MultiBank::NewRawIterator(void)",
    ),
    Ok(
        "choreo::P3DEntityStoreWrapperBank::GetRig(void) const",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::GetRig(void) const",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::RawIterator::~RawIterator(void)",
    ),
    Ok(
        "global constructors keyed to choreo::DEFAULT_FACING_VECTOR",
    ),
    Ok(
        "choreo::FootBlenderEffectorSimTarget::~FootBlenderEffectorSimTarget(void)",
    ),
    Ok(
        "choreo::FootBlenderEffectorSimTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
    ),
    Ok(
        "choreo::FootBlenderEffectorSimTarget::GetTransform(RadicalMathLibrary::Matrix &, float) const",
    ),
    Ok(
        "choreo::FootBlenderPoleVectorSimTarget::~FootBlenderPoleVectorSimTarget(void)",
    ),
    Ok(
        "choreo::FootBlenderPoleVectorSimTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
    ),
    Ok(
        "choreo::FootBlenderPoleVectorSimTarget::GetTransform(RadicalMathLibrary::Matrix &, float) const",
    ),
    Ok(
        "choreo::Engine::Engine(tPose *, choreo::Rig *, bool, int)",
    ),
    Ok(
        "choreo::Engine::~Engine(void)",
    ),
    Ok(
        "choreo::Engine::GetFootBlender(int) const",
    ),
    Ok(
        "choreo::Engine::GetLegCount(void) const",
    ),
    Ok(
        "choreo::Engine::SetIsLegIKEnabled(int, bool)",
    ),
    Ok(
        "choreo::Engine::IsFootPlanted(int) const",
    ),
    Ok(
        "choreo::Engine::GetFootPosition(int) const",
    ),
    Ok(
        "choreo::Engine::Push(choreo::Driver *)",
    ),
    Ok(
        "choreo::Engine::Advance(float)",
    ),
    Ok(
        "choreo::Engine::UpdateBegin(void)",
    ),
    Ok(
        "choreo::Engine::UpdateRoot(void)",
    ),
    Ok(
        "choreo::Engine::UpdatePose(void)",
    ),
    Ok(
        "choreo::Engine::UpdateEnd(void)",
    ),
    Ok(
        "choreo::Engine type_info function",
    ),
    Ok(
        "choreo::FootBlenderEffectorSimTarget type_info function",
    ),
    Ok(
        "choreo::FootBlenderPoleVectorSimTarget type_info function",
    ),
    Ok(
        "choreo::FootBlender::FootBlender(choreo::Rig *, choreo::RigLeg *, int, int)",
    ),
    Ok(
        "choreo::FootBlender::~FootBlender(void)",
    ),
    Ok(
        "choreo::FootBlender::Push(choreo::FootBlendDriver *)",
    ),
    Ok(
        "choreo::FootBlender::Advance(float)",
    ),
    Ok(
        "choreo::FootBlender::UpdateEffectorTranslateDriver(choreo::FootBlendDriver *, float, int)",
    ),
    Ok(
        "choreo::FootBlender::UpdateEffectorTranslate(void)",
    ),
    Ok(
        "choreo::FootBlender::UpdatePoleVectorTranslateDriver(choreo::FootBlendDriver *, float, int)",
    ),
    Ok(
        "choreo::FootBlender::UpdatePoleVectorTranslate(void)",
    ),
    Ok(
        "choreo::FootBlender::UpdateEffectorRotateDriver(choreo::FootBlendDriver *, float, int)",
    ),
    Ok(
        "choreo::FootBlender::UpdateEffectorRotate(void)",
    ),
    Ok(
        "choreo::FootBlender::UpdateFootPlantDriver(choreo::FootBlendDriver *, float, int)",
    ),
    Ok(
        "choreo::FootBlender::UpdateFootPlant(void)",
    ),
    Ok(
        "choreo::FootBlender::UpdateGroundFixupDriver(choreo::FootBlendDriver *, float, int)",
    ),
    Ok(
        "choreo::FootBlender::UpdateGroundFixup(void)",
    ),
    Ok(
        "choreo::FootBlender::Update(poser::Pose *)",
    ),
    Err(
        InvalidClassNameOnMethodArgument(
            "X11CFPCX11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        ),
    ),
    Ok(
        "bool choreo::BlendPriorities<RadicalMathLibrary::Vector>(choreo::BlendPriority<RadicalMathLibrary::Vector> const *, int, RadicalMathLibrary::Vector &)",
    ),
    Err(
        InvalidClassNameOnMethodArgument(
            "X11CFPCX11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        ),
    ),
    Ok(
        "bool choreo::BlendPriorities<RadicalMathLibrary::Quaternion>(choreo::BlendPriority<RadicalMathLibrary::Quaternion> const *, int, RadicalMathLibrary::Quaternion &)",
    ),
    Err(
        InvalidClassNameOnMethodArgument(
            "X11CFPCX11_X01fiPQ26choreot13BlendPriority1ZX01iRi_v",
        ),
    ),
    Ok(
        "bool choreo::BlendPriorities<float>(choreo::BlendPriority<float> const *, int, float &)",
    ),
    Ok(
        "choreo::FootBlender type_info function",
    ),
    Ok(
        "choreo::FootBlender::GetMinimumJointIndex(void) const",
    ),
    Ok(
        "choreo::FootBlender::GetPriority(void) const",
    ),
    Ok(
        "choreo::FootBlendDriver::GetFootPlanted(void) const",
    ),
    Ok(
        "choreo::BlendPriority<RadicalMathLibrary::Vector>::BlendPriority(void)",
    ),
    Ok(
        "choreo::BlendPriority<RadicalMathLibrary::Quaternion>::BlendPriority(void)",
    ),
    Ok(
        "choreo::FootPlanter::~FootPlanter(void)",
    ),
    Ok(
        "choreo::FootPlanter::Reset(void)",
    ),
    Ok(
        "choreo::FootPlanter::Advance(float)",
    ),
    Ok(
        "choreo::FootPlanter::Update(poser::Pose *)",
    ),
    Ok(
        "choreo::FootPlanter type_info function",
    ),
    Ok(
        "choreo::FootPlanter::GetMinimumJointIndex(void) const",
    ),
    Ok(
        "choreo::FootPlanter::GetPriority(void) const",
    ),
    Ok(
        "choreo::InternalAnimation::InternalAnimation(tSkeleton *, tAnimation *)",
    ),
    Ok(
        "choreo::InternalAnimation::~InternalAnimation(void)",
    ),
    Ok(
        "choreo::InternalAnimation::HasJointTranslation(int) const",
    ),
    Ok(
        "choreo::InternalAnimation::GetJointTranslation(int, float, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::InternalAnimation::HasJointRotation(int) const",
    ),
    Ok(
        "choreo::InternalAnimation::GetJointRotation(int, float, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::InternalAnimation::HasGroupTranslation(tUidUnaligned) const",
    ),
    Ok(
        "choreo::InternalAnimation::GetGroupTranslation(tUidUnaligned, float, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::InternalAnimation::HasGroupRotation(tUidUnaligned) const",
    ),
    Ok(
        "choreo::InternalAnimation::GetGroupRotation(tUidUnaligned, float, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::JointBlender::JointBlender(int, int, int)",
    ),
    Ok(
        "choreo::JointBlender::~JointBlender(void)",
    ),
    Ok(
        "choreo::JointBlender::SetMinimumJointIndex(int)",
    ),
    Ok(
        "choreo::JointBlender::Push(choreo::JointBlendDriver *)",
    ),
    Ok(
        "choreo::JointBlender::Advance(float)",
    ),
    Ok(
        "choreo::JointBlender::UpdateDriverTranslation(int, choreo::JointBlendDriver *, float, int)",
    ),
    Ok(
        "choreo::JointBlender::UpdateDriverRotation(int, choreo::JointBlendDriver *, float, int)",
    ),
    Ok(
        "choreo::JointBlender::UpdateTranslation(poser::Joint *)",
    ),
    Ok(
        "choreo::JointBlender::UpdateRotation(poser::Joint *)",
    ),
    Ok(
        "choreo::JointBlender::Update(poser::Pose *)",
    ),
    Err(
        InvalidClassNameOnMethodArgument(
            "X21CFPCX21X11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        ),
    ),
    Err(
        InvalidClassNameOnMethodArgument(
            "X21CFPCX21X11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        ),
    ),
    Ok(
        "choreo::JointBlender type_info function",
    ),
    Ok(
        "choreo::JointBlender::GetMinimumJointIndex(void) const",
    ),
    Ok(
        "choreo::JointBlender::GetPriority(void) const",
    ),
    Ok(
        "choreo::RegisterScriptReadHandler(bool (*)(choreo::ScriptReader *, choreo::BaseBank *))",
    ),
    Ok(
        "choreo::RegisterDefaultScriptReadHandlers(void)",
    ),
    Ok(
        "choreo::ReadFromScript(choreo::ScriptReader *, tEntityStore *)",
    ),
    Ok(
        "choreo::ReadFromScriptFile(choreo::FileReader *, tEntityStore *)",
    ),
    Ok(
        "choreo::ReadFromScriptString(char const *, char const *, tEntityStore *)",
    ),
    Ok(
        "choreo::ReadFromScriptFileP3D(tFile *, tEntityStore *)",
    ),
    Ok(
        "choreo::RegisterDefaultScriptHandlers(void)",
    ),
    Ok(
        "choreo::ChoreoScriptHandler type_info function",
    ),
    Ok(
        "choreo::ChoreoChunkHandler type_info function",
    ),
    Ok(
        "radLoadFileLoader::radLoadFileLoader(void)",
    ),
    Ok(
        "choreo::ChoreoScriptHandler::CheckExtension(char *)",
    ),
    Ok(
        "choreo::ChoreoScriptHandler::Load(tFile *, tEntityStore *)",
    ),
    Ok(
        "choreo::ChoreoScriptHandler::~ChoreoScriptHandler(void)",
    ),
    Ok(
        "choreo::ChoreoChunkHandler::Load(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "choreo::ChoreoChunkHandler::CheckChunkID(unsigned int)",
    ),
    Ok(
        "choreo::ChoreoChunkHandler::GetChunkID(void)",
    ),
    Ok(
        "choreo::ChoreoChunkHandler::~ChoreoChunkHandler(void)",
    ),
    Ok(
        "radLoadFileLoader type_info function",
    ),
    Ok(
        "radLoadFileLoader::~radLoadFileLoader(void)",
    ),
    Ok(
        "choreo::LocomotionSlot::LocomotionSlot(choreo::Rig *, tAnimation *)",
    ),
    Ok(
        "choreo::LocomotionSlot::~LocomotionSlot(void)",
    ),
    Ok(
        "choreo::Locomotion::Locomotion(choreo::Rig *, int, int, tAnimation **, choreo::Partition *, int, choreo::Transition **)",
    ),
    Ok(
        "choreo::Locomotion::~Locomotion(void)",
    ),
    Ok(
        "choreo::Locomotion::GetLocomotionSlotCount(void) const",
    ),
    Ok(
        "choreo::Locomotion::GetLocomotionSlotVelocity(int) const",
    ),
    Ok(
        "choreo::Locomotion::FillNullVelocities(void)",
    ),
    Ok(
        "choreo::Locomotion::SetLocomotionSlot(int, int, tAnimation *)",
    ),
    Ok(
        "choreo::Locomotion::NewDriver(void)",
    ),
    Ok(
        "choreo::Locomotion::NewLocomotionDriver(void)",
    ),
    Ok(
        "choreo::Locomotion::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::Locomotion::ReadFromScript4(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::Locomotion::ReadFromScript8(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::LocomotionRootDriver::LocomotionRootDriver(choreo::BlendDriver *)",
    ),
    Ok(
        "choreo::LocomotionRootDriver::~LocomotionRootDriver(void)",
    ),
    Ok(
        "choreo::LocomotionRootDriver::Reset(choreo::RootBlender *)",
    ),
    Ok(
        "choreo::LocomotionRootDriver::GetRootBlendInTime(void) const",
    ),
    Ok(
        "choreo::LocomotionRootDriver::GetRootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::LocomotionRootDriver::GetRootWeight(void) const",
    ),
    Ok(
        "choreo::LocomotionRootDriver::GetRootPriority(void) const",
    ),
    Ok(
        "choreo::LocomotionRootDriver::HasRootTranslation(void) const",
    ),
    Ok(
        "choreo::LocomotionRootDriver::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::LocomotionRootDriver::HasRootRotation(void) const",
    ),
    Ok(
        "choreo::LocomotionRootDriver::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::LocomotionRootDriver::HasRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::LocomotionRootDriver::GetRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::LocomotionDriver::LocomotionDriver(choreo::Locomotion *)",
    ),
    Ok(
        "choreo::LocomotionDriver::~LocomotionDriver(void)",
    ),
    Ok(
        "choreo::LocomotionDriver::Clone(void) const",
    ),
    Ok(
        "choreo::LocomotionDriver::GetRootBlendInTime(void) const",
    ),
    Ok(
        "choreo::LocomotionDriver::GetRootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::LocomotionDriver::GetActualMotionAngle(void) const",
    ),
    Ok(
        "choreo::LocomotionDriver::SetActualMotionAngle(float)",
    ),
    Ok(
        "choreo::LocomotionDriver::SetDesiredMotionAngle(float)",
    ),
    Ok(
        "choreo::LocomotionDriver::GetActualFacingAngle(void) const",
    ),
    Ok(
        "choreo::LocomotionDriver::SetActualFacingAngle(float)",
    ),
    Ok(
        "choreo::LocomotionDriver::SetDesiredFacingAngle(float)",
    ),
    Ok(
        "choreo::LocomotionDriver::GetActualVelocity(void) const",
    ),
    Ok(
        "choreo::LocomotionDriver::SetActualVelocity(float)",
    ),
    Ok(
        "choreo::LocomotionDriver::SetDesiredVelocity(float)",
    ),
    Ok(
        "choreo::LocomotionDriver::SetActualVelocityVector(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "choreo::LocomotionDriver::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::LocomotionDriver::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::LocomotionDriver::Begin(choreo::Puppet *)",
    ),
    Ok(
        "choreo::LocomotionDriver::UpdateFacing(float)",
    ),
    Ok(
        "choreo::LocomotionDriver::UpdateMotion(float)",
    ),
    Ok(
        "choreo::LocomotionDriver::UpdateBlends(void)",
    ),
    Ok(
        "choreo::LocomotionDriver::Advance(float)",
    ),
    Ok(
        "choreo::LocomotionDriver::IsFinished(void) const",
    ),
    Ok(
        "choreo::LocomotionDriver::End(choreo::Puppet *)",
    ),
    Ok(
        "choreo::LocomotionDriver::Apply(choreo::Engine *)",
    ),
    Ok(
        "choreo::LocomotionSlot type_info function",
    ),
    Ok(
        "choreo::Locomotion type_info function",
    ),
    Ok(
        "choreo::LocomotionDriver type_info function",
    ),
    Ok(
        "choreo::LocomotionRootDriver type_info function",
    ),
    Ok(
        "choreo::BlendSlot::BlendSlot(void)",
    ),
    Ok(
        "choreo::LocomotionSlot::GetName(void) const",
    ),
    Ok(
        "choreo::LocomotionSlot::GetFrameCount(void) const",
    ),
    Ok(
        "choreo::LocomotionSlot::GetFramesPerSecond(void) const",
    ),
    Ok(
        "choreo::LocomotionSlot::GetCycleStart(void) const",
    ),
    Ok(
        "choreo::LocomotionSlot::GetFootPlant(int) const",
    ),
    Ok(
        "choreo::LocomotionSlot::GetFootLift(int) const",
    ),
    Ok(
        "choreo::LocomotionSlot::GetFootScale(int) const",
    ),
    Ok(
        "choreo::LocomotionSlot::HasJointTranslation(int) const",
    ),
    Ok(
        "choreo::LocomotionSlot::GetJointTranslation(int, float, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::LocomotionSlot::HasJointRotation(int) const",
    ),
    Ok(
        "choreo::LocomotionSlot::GetJointRotation(int, float, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::LocomotionSlot::HasGroupTranslation(tUidUnaligned) const",
    ),
    Ok(
        "choreo::LocomotionSlot::GetGroupTranslation(tUidUnaligned, float, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::LocomotionSlot::HasGroupRotation(tUidUnaligned) const",
    ),
    Ok(
        "choreo::LocomotionSlot::GetGroupRotation(tUidUnaligned, float, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Transition>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Transition> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Transition>::safe_cast(IRefCount *)",
    ),
    Ok(
        "choreo::Partition::Partition(choreo::Rig *)",
    ),
    Ok(
        "choreo::Partition::~Partition(void)",
    ),
    Ok(
        "choreo::InclusivePartition::InclusivePartition(choreo::Rig *, int, int)",
    ),
    Ok(
        "choreo::InclusivePartition::~InclusivePartition(void)",
    ),
    Ok(
        "choreo::InclusivePartition::AddEntry(int, float, int)",
    ),
    Ok(
        "choreo::InclusivePartition::AddRangeEntry(int, int, float, int)",
    ),
    Ok(
        "choreo::InclusivePartition::FindEntryIndex(int) const",
    ),
    Ok(
        "choreo::InclusivePartition::FindEntry(int) const",
    ),
    Ok(
        "choreo::InclusivePartition::HasJoint(int) const",
    ),
    Ok(
        "choreo::InclusivePartition::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::InclusivePartition::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::InclusivePartition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::ExclusivePartition::ExclusivePartition(choreo::Rig *, int, int)",
    ),
    Ok(
        "choreo::ExclusivePartition::~ExclusivePartition(void)",
    ),
    Ok(
        "choreo::ExclusivePartition::AddEntry(int)",
    ),
    Ok(
        "choreo::ExclusivePartition::AddRangeEntry(int, int)",
    ),
    Ok(
        "choreo::ExclusivePartition::FindEntryIndex(int) const",
    ),
    Ok(
        "choreo::ExclusivePartition::FindRangeEntryIndex(int) const",
    ),
    Ok(
        "choreo::ExclusivePartition::HasJoint(int) const",
    ),
    Ok(
        "choreo::ExclusivePartition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::UnionPartition::UnionPartition(choreo::Rig *, int)",
    ),
    Ok(
        "choreo::UnionPartition::~UnionPartition(void)",
    ),
    Ok(
        "choreo::UnionPartition::AddPartition(choreo::Partition *, int, float)",
    ),
    Ok(
        "choreo::UnionPartition::HasJoint(int) const",
    ),
    Ok(
        "choreo::UnionPartition::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::UnionPartition::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::UnionPartition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::IntersectPartition::IntersectPartition(choreo::Rig *, int)",
    ),
    Ok(
        "choreo::IntersectPartition::~IntersectPartition(void)",
    ),
    Ok(
        "choreo::IntersectPartition::AddPartition(choreo::Partition *, int, float)",
    ),
    Ok(
        "choreo::IntersectPartition::HasJoint(int) const",
    ),
    Ok(
        "choreo::IntersectPartition::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::IntersectPartition::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::IntersectPartition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::CompletePartition::CompletePartition(choreo::Rig *)",
    ),
    Ok(
        "choreo::CompletePartition::~CompletePartition(void)",
    ),
    Ok(
        "choreo::CompletePartition::HasJoint(int) const",
    ),
    Ok(
        "choreo::CompletePartition::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::CompletePartition::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::CompletePartition::AddJoint(int, float, int)",
    ),
    Ok(
        "choreo::CompletePartition::AddJointRange(int, int, float, int)",
    ),
    Ok(
        "choreo::CompletePartition::Clear(void)",
    ),
    Ok(
        "choreo::CompletePartition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::LODPartition::~LODPartition(void)",
    ),
    Ok(
        "choreo::LODPartition::HasJoint(int) const",
    ),
    Ok(
        "choreo::LODPartition::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::LODPartition::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::Partition type_info function",
    ),
    Ok(
        "choreo::InclusivePartition type_info function",
    ),
    Ok(
        "choreo::ExclusivePartition type_info function",
    ),
    Ok(
        "choreo::UnionPartition type_info function",
    ),
    Ok(
        "choreo::IntersectPartition type_info function",
    ),
    Ok(
        "choreo::CompletePartition type_info function",
    ),
    Ok(
        "choreo::LODPartition type_info function",
    ),
    Ok(
        "choreo::ExclusivePartition::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::ExclusivePartition::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::Puppet::Puppet(tPose *, choreo::Bank *, bool, int, int)",
    ),
    Ok(
        "choreo::Puppet::~Puppet(void)",
    ),
    Ok(
        "choreo::Puppet::GetPose(void)",
    ),
    Ok(
        "choreo::Puppet::GetP3DPose(void) const",
    ),
    Ok(
        "choreo::Puppet::PlayAnimation(tUidUnaligned, float, float, float, float, float, int, choreo::Partition *)",
    ),
    Ok(
        "choreo::Puppet::PlayAnimation(char const *, float, float, float, float, float, int, choreo::Partition *)",
    ),
    Ok(
        "choreo::Puppet::AddDriver(choreo::PuppetDriver *, float, bool)",
    ),
    Ok(
        "choreo::Puppet::PlayDriver(choreo::PuppetDriver *, float, bool)",
    ),
    Ok(
        "choreo::Puppet::StopDriver(choreo::PuppetDriver *)",
    ),
    Ok(
        "choreo::Puppet::IsDriverFinished(choreo::PuppetDriver *) const",
    ),
    Ok(
        "choreo::Puppet::SetIsDriverIndefinite(choreo::PuppetDriver *, bool)",
    ),
    Ok(
        "choreo::Puppet::StopAllDrivers(void)",
    ),
    Ok(
        "choreo::Puppet::Advance(float)",
    ),
    Ok(
        "choreo::Puppet::UpdateBegin(void)",
    ),
    Ok(
        "choreo::Puppet::UpdateRoot(void)",
    ),
    Ok(
        "choreo::Puppet::UpdatePose(void)",
    ),
    Ok(
        "choreo::Puppet::UpdateEnd(void)",
    ),
    Ok(
        "choreo::Puppet::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::Puppet type_info function",
    ),
    Ok(
        "choreo::Puppet::AddRef(void)",
    ),
    Ok(
        "choreo::Replay::Replay(choreo::Rig *, int, choreo::Partition *)",
    ),
    Ok(
        "choreo::Replay::~Replay(void)",
    ),
    Ok(
        "choreo::Replay::SetRecordFrameCount(int)",
    ),
    Ok(
        "choreo::Replay::NewDriver(void)",
    ),
    Ok(
        "choreo::Replay::NewReplayDriver(void)",
    ),
    Ok(
        "choreo::Replay::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::ReplayJoint::Compress(poser::Transform const &)",
    ),
    Ok(
        "choreo::ReplayJoint::Uncompress(poser::Transform &) const",
    ),
    Ok(
        "choreo::ReplayBuffer::ReplayBuffer(choreo::Replay *)",
    ),
    Ok(
        "choreo::ReplayBuffer::~ReplayBuffer(void)",
    ),
    Ok(
        "choreo::ReplayBuffer::Reset(void)",
    ),
    Ok(
        "choreo::ReplayBuffer::Advance(float)",
    ),
    Ok(
        "choreo::ReplayBuffer::Update(void)",
    ),
    Ok(
        "choreo::ReplayBuffer::AdvanceReplay(float)",
    ),
    Ok(
        "choreo::ReplayBuffer::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::ReplayBuffer::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::ReplayBuffer::HasJoint(int) const",
    ),
    Ok(
        "choreo::ReplayBuffer::GetJointTransform(int, poser::Transform &) const",
    ),
    Ok(
        "choreo::ReplayBuffer::SetJointTransform(int, poser::Transform const &)",
    ),
    Ok(
        "choreo::ReplayDriverInternal::ReplayDriverInternal(choreo::ReplayBuffer *)",
    ),
    Ok(
        "choreo::ReplayDriverInternal::~ReplayDriverInternal(void)",
    ),
    Ok(
        "choreo::ReplayDriverInternal::Reset(void)",
    ),
    Ok(
        "choreo::ReplayDriverInternal::Advance(float)",
    ),
    Ok(
        "choreo::ReplayDriverInternal::Update(void)",
    ),
    Ok(
        "choreo::ReplayDriverInternal::AdvanceReplay(float)",
    ),
    Ok(
        "choreo::ReplayDriverInternal::GetBlendInTime(void) const",
    ),
    Ok(
        "choreo::ReplayDriverInternal::GetBlendOutTime(void) const",
    ),
    Ok(
        "choreo::ReplayDriverInternal::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::ReplayDriverInternal::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::ReplayDriverInternal::HasJoint(int) const",
    ),
    Ok(
        "choreo::ReplayDriverInternal::GetJointTransform(int, poser::Transform &) const",
    ),
    Ok(
        "choreo::ReplayDriverInternal::RecordJointTransform(int, poser::Transform const &) const",
    ),
    Ok(
        "choreo::ReplayDriver::ReplayDriver(choreo::Replay *)",
    ),
    Ok(
        "choreo::ReplayDriver::~ReplayDriver(void)",
    ),
    Ok(
        "choreo::ReplayDriver::Clone(void) const",
    ),
    Ok(
        "choreo::ReplayDriver::Begin(choreo::Puppet *)",
    ),
    Ok(
        "choreo::ReplayDriver::Advance(float)",
    ),
    Ok(
        "choreo::ReplayDriver::IsFinished(void) const",
    ),
    Ok(
        "choreo::ReplayDriver::End(choreo::Puppet *)",
    ),
    Ok(
        "choreo::ReplayDriver::Apply(choreo::Engine *)",
    ),
    Ok(
        "choreo::Replay type_info function",
    ),
    Ok(
        "choreo::ReplayDriver type_info function",
    ),
    Ok(
        "choreo::ReplayBuffer type_info function",
    ),
    Ok(
        "choreo::ReplayDriverInternal type_info function",
    ),
    Ok(
        "choreo::ReplayBlendDriver::~ReplayBlendDriver(void)",
    ),
    Ok(
        "choreo::ReplayBlendDriver::ReplayBlendDriver(void)",
    ),
    Ok(
        "choreo::ReplayBlendDriver type_info function",
    ),
    Ok(
        "choreo::ReplayBlender::ReplayBlender(int, int)",
    ),
    Ok(
        "choreo::ReplayBlender::~ReplayBlender(void)",
    ),
    Ok(
        "choreo::ReplayBlender::Push(choreo::ReplayBlendDriver *)",
    ),
    Ok(
        "choreo::ReplayBlender::Advance(float)",
    ),
    Ok(
        "choreo::ReplayBlender::Update(poser::Pose *)",
    ),
    Ok(
        "choreo::ReplayBlender type_info function",
    ),
    Ok(
        "choreo::ReplayBlender::GetMinimumJointIndex(void) const",
    ),
    Ok(
        "choreo::ReplayBlender::GetPriority(void) const",
    ),
    Ok(
        "choreo::BlendPriority<poser::Transform>::BlendPriority(void)",
    ),
    Ok(
        "choreo::RigLeg::RigLeg(void)",
    ),
    Ok(
        "choreo::RigLeg::~RigLeg(void)",
    ),
    Ok(
        "choreo::RigLeg::ContainsJointIndex(int) const",
    ),
    Ok(
        "choreo::RigLeg::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *, choreo::Rig *)",
    ),
    Ok(
        "choreo::Rig::Rig(tSkeleton *, int)",
    ),
    Ok(
        "choreo::Rig::~Rig(void)",
    ),
    Ok(
        "choreo::Rig::GetJointCount(void) const",
    ),
    Ok(
        "choreo::Rig::GetJointIndex(choreo::RigJointIndex) const",
    ),
    Ok(
        "choreo::Rig::SetJointIndex(choreo::RigJointIndex, int)",
    ),
    Ok(
        "choreo::Rig::GetLeg(int) const",
    ),
    Ok(
        "choreo::Rig::AddLeg(choreo::RigLeg *)",
    ),
    Ok(
        "choreo::Rig::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::RigLeg type_info function",
    ),
    Ok(
        "choreo::Rig type_info function",
    ),
    Ok(
        "choreo::RigLeg::GetFootPlantJointIndex(void) const",
    ),
    Ok(
        "choreo::RigLeg::SetFootPlantJointIndex(int)",
    ),
    Ok(
        "choreo::RigLeg::GetMinimumFKJointIndex(void) const",
    ),
    Ok(
        "choreo::RigLeg::SetMinimumFKJointIndex(int)",
    ),
    Ok(
        "choreo::RigLeg::GetMaximumFKJointIndex(void) const",
    ),
    Ok(
        "choreo::RigLeg::SetMaximumFKJointIndex(int)",
    ),
    Ok(
        "choreo::RigLeg::GetThighJointIndex(void) const",
    ),
    Ok(
        "choreo::RigLeg::SetThighJointIndex(int)",
    ),
    Ok(
        "choreo::RigLeg::GetKneeJointIndex(void) const",
    ),
    Ok(
        "choreo::RigLeg::SetKneeJointIndex(int)",
    ),
    Ok(
        "choreo::RigLeg::GetAnkleJointIndex(void) const",
    ),
    Ok(
        "choreo::RigLeg::SetAnkleJointIndex(int)",
    ),
    Ok(
        "choreo::RigLeg::GetMinimumIKJointIndex(void) const",
    ),
    Ok(
        "choreo::RigLeg::SetMinimumIKJointIndex(int)",
    ),
    Ok(
        "choreo::RigLeg::GetMaximumIKJointIndex(void) const",
    ),
    Ok(
        "choreo::RigLeg::SetMaximumIKJointIndex(int)",
    ),
    Ok(
        "choreo::RigLeg::GetEffectorJointIndex(void) const",
    ),
    Ok(
        "choreo::RigLeg::SetEffectorJointIndex(int)",
    ),
    Ok(
        "choreo::RigLeg::GetPoleVectorJointIndex(void) const",
    ),
    Ok(
        "choreo::RigLeg::SetPoleVectorJointIndex(int)",
    ),
    Ok(
        "choreo::RigLeg::GetOrientOffsetJointIndex(void) const",
    ),
    Ok(
        "choreo::RigLeg::SetOrientOffsetJointIndex(int)",
    ),
    Ok(
        "choreo::RootController::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::RootController::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::RootController::NewDriver(void)",
    ),
    Ok(
        "choreo::RootController::NewRootDriver(void)",
    ),
    Ok(
        "choreo::RootPositionController::~RootPositionController(void)",
    ),
    Ok(
        "choreo::RootRotationController::~RootRotationController(void)",
    ),
    Ok(
        "choreo::RootTransformController::RootTransformController(void)",
    ),
    Ok(
        "choreo::RootTransformController::~RootTransformController(void)",
    ),
    Ok(
        "choreo::RootTransformController::SetOrientation(float)",
    ),
    Ok(
        "choreo::RootDriverInternal::RootDriverInternal(choreo::RootController *)",
    ),
    Ok(
        "choreo::RootDriverInternal::~RootDriverInternal(void)",
    ),
    Ok(
        "choreo::RootDriver::RootDriver(choreo::RootController *)",
    ),
    Ok(
        "choreo::RootDriver::~RootDriver(void)",
    ),
    Ok(
        "choreo::RootDriver::Clone(void) const",
    ),
    Ok(
        "choreo::RootDriver::Begin(choreo::Puppet *)",
    ),
    Ok(
        "choreo::RootDriver::Advance(float)",
    ),
    Ok(
        "choreo::RootDriver::IsFinished(void) const",
    ),
    Ok(
        "choreo::RootDriver::End(choreo::Puppet *)",
    ),
    Ok(
        "choreo::RootDriver::Apply(choreo::Engine *)",
    ),
    Ok(
        "choreo::RootController type_info function",
    ),
    Ok(
        "choreo::RootPositionController type_info function",
    ),
    Ok(
        "choreo::RootRotationController type_info function",
    ),
    Ok(
        "choreo::RootTransformController type_info function",
    ),
    Ok(
        "choreo::RootDriver type_info function",
    ),
    Ok(
        "choreo::RootDriverInternal type_info function",
    ),
    Ok(
        "choreo::RootController::~RootController(void)",
    ),
    Ok(
        "choreo::RootController::RootController(void)",
    ),
    Ok(
        "choreo::RootController::Reset(choreo::RootBlender *)",
    ),
    Ok(
        "choreo::RootController::Advance(float)",
    ),
    Ok(
        "choreo::RootController::GetRootBlendInTime(void) const",
    ),
    Ok(
        "choreo::RootController::GetRootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::RootController::GetRootWeight(void) const",
    ),
    Ok(
        "choreo::RootController::GetRootPriority(void) const",
    ),
    Ok(
        "choreo::RootController::HasRootTranslation(void) const",
    ),
    Ok(
        "choreo::RootController::HasRootRotation(void) const",
    ),
    Ok(
        "choreo::RootController::HasRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::RootController::GetRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::RootPositionController::GetRootBlendInTime(void) const",
    ),
    Ok(
        "choreo::RootPositionController::GetRootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::RootPositionController::GetRootWeight(void) const",
    ),
    Ok(
        "choreo::RootPositionController::GetRootPriority(void) const",
    ),
    Ok(
        "choreo::RootPositionController::HasRootTranslation(void) const",
    ),
    Ok(
        "choreo::RootPositionController::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::RootPositionController::HasRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::RootPositionController::GetRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::RootRotationController::GetRootBlendInTime(void) const",
    ),
    Ok(
        "choreo::RootRotationController::GetRootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::RootRotationController::GetRootWeight(void) const",
    ),
    Ok(
        "choreo::RootRotationController::GetRootPriority(void) const",
    ),
    Ok(
        "choreo::RootRotationController::HasRootRotation(void) const",
    ),
    Ok(
        "choreo::RootRotationController::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::RootTransformController::GetRootBlendInTime(void) const",
    ),
    Ok(
        "choreo::RootTransformController::GetRootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::RootTransformController::GetRootWeight(void) const",
    ),
    Ok(
        "choreo::RootTransformController::GetRootPriority(void) const",
    ),
    Ok(
        "choreo::RootTransformController::HasRootTranslation(void) const",
    ),
    Ok(
        "choreo::RootTransformController::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::RootTransformController::HasRootRotation(void) const",
    ),
    Ok(
        "choreo::RootTransformController::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::RootTransformController::HasRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::RootTransformController::GetRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::RootDriverInternal::Reset(choreo::RootBlender *)",
    ),
    Ok(
        "choreo::RootDriverInternal::GetRootBlendInTime(void) const",
    ),
    Ok(
        "choreo::RootDriverInternal::GetRootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::RootDriverInternal::GetRootWeight(void) const",
    ),
    Ok(
        "choreo::RootDriverInternal::GetRootPriority(void) const",
    ),
    Ok(
        "choreo::RootDriverInternal::HasRootTranslation(void) const",
    ),
    Ok(
        "choreo::RootDriverInternal::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::RootDriverInternal::HasRootRotation(void) const",
    ),
    Ok(
        "choreo::RootDriverInternal::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::RootDriverInternal::HasRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::RootDriverInternal::GetRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::RootBlender::RootBlender(int, int, int)",
    ),
    Ok(
        "choreo::RootBlender::~RootBlender(void)",
    ),
    Ok(
        "choreo::RootBlender::SetParentTransform(poser::Transform const &)",
    ),
    Ok(
        "choreo::RootBlender::SetRootTransform(poser::Transform const &)",
    ),
    Ok(
        "choreo::RootBlender::SetPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "choreo::RootBlender::GetOrientation(void) const",
    ),
    Ok(
        "choreo::RootBlender::GetPrevOrientation(void) const",
    ),
    Ok(
        "choreo::RootBlender::GetFacingVector(void) const",
    ),
    Ok(
        "choreo::RootBlender::SetFacingVector(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "choreo::RootBlender::SetGroundPoint(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "choreo::RootBlender::GetGroundFixupWeight(void) const",
    ),
    Ok(
        "choreo::RootBlender::GetPrevGroundFixupWeight(void) const",
    ),
    Ok(
        "choreo::RootBlender::Push(choreo::RootBlendDriver *)",
    ),
    Ok(
        "choreo::RootBlender::Advance(float)",
    ),
    Ok(
        "choreo::RootBlender::UpdateDriverTranslation(choreo::RootBlendDriver *, float, int)",
    ),
    Ok(
        "choreo::RootBlender::UpdateDriverRotation(choreo::RootBlendDriver *, float, int)",
    ),
    Ok(
        "choreo::RootBlender::UpdateDriverGroundFixup(choreo::RootBlendDriver *, float, int)",
    ),
    Ok(
        "choreo::RootBlender::UpdateTranslation(void)",
    ),
    Ok(
        "choreo::RootBlender::UpdateRotation(void)",
    ),
    Ok(
        "choreo::RootBlender::UpdateGroundFixup(void)",
    ),
    Ok(
        "choreo::RootBlender::Update(poser::Pose *)",
    ),
    Ok(
        "choreo::RootBlender::ClearRootDrivers(void)",
    ),
    Ok(
        "choreo::RootFixupDriver::RootFixupDriver(choreo::RootBlender *)",
    ),
    Ok(
        "choreo::RootFixupDriver::~RootFixupDriver(void)",
    ),
    Ok(
        "choreo::RootFixupDriver::Advance(float)",
    ),
    Ok(
        "choreo::RootFixupDriver::Update(poser::Pose *)",
    ),
    Err(
        InvalidClassNameOnMethodArgument(
            "X21CFPCX21X11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        ),
    ),
    Err(
        InvalidClassNameOnMethodArgument(
            "X21CFPCX21X11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        ),
    ),
    Err(
        InvalidClassNameOnMethodArgument(
            "X11CFPCX11_X01fiPQ26choreot13BlendPriority1ZX01iRi_v",
        ),
    ),
    Ok(
        "choreo::RootBlender type_info function",
    ),
    Ok(
        "choreo::RootFixupDriver type_info function",
    ),
    Ok(
        "choreo::RootBlender::GetMinimumJointIndex(void) const",
    ),
    Ok(
        "choreo::RootBlender::GetPriority(void) const",
    ),
    Ok(
        "choreo::RootFixupDriver::GetMinimumJointIndex(void) const",
    ),
    Ok(
        "choreo::RootFixupDriver::GetPriority(void) const",
    ),
    Ok(
        "choreo::StringFileReader::StringFileReader(char const *, char const *)",
    ),
    Ok(
        "choreo::StringFileReader::~StringFileReader(void)",
    ),
    Ok(
        "choreo::StringFileReader::SetPosition(unsigned int)",
    ),
    Ok(
        "choreo::StringFileReader::ReadChar(void)",
    ),
    Ok(
        "choreo::StringFileReader::IsEndOfFile(void) const",
    ),
    Ok(
        "choreo::P3DFileReader::P3DFileReader(tFile *)",
    ),
    Ok(
        "choreo::P3DFileReader::~P3DFileReader(void)",
    ),
    Ok(
        "choreo::P3DFileReader::GetFilename(void) const",
    ),
    Ok(
        "choreo::P3DFileReader::GetPosition(void) const",
    ),
    Ok(
        "choreo::P3DFileReader::SetPosition(unsigned int)",
    ),
    Ok(
        "choreo::P3DFileReader::ReadChar(void)",
    ),
    Ok(
        "choreo::P3DFileReader::IsEndOfFile(void) const",
    ),
    Ok(
        "choreo::FTTFileReader::~FTTFileReader(void)",
    ),
    Ok(
        "choreo::FTTFileReader::GetFilename(void) const",
    ),
    Ok(
        "choreo::FTTFileReader::GetPosition(void) const",
    ),
    Ok(
        "choreo::FTTFileReader::SetPosition(unsigned int)",
    ),
    Ok(
        "choreo::FTTFileReader::ReadChar(void)",
    ),
    Ok(
        "choreo::FTTFileReader::IsEndOfFile(void) const",
    ),
    Ok(
        "choreo::ScriptReader::ScriptReader(choreo::FileReader *, int)",
    ),
    Ok(
        "choreo::ScriptReader::~ScriptReader(void)",
    ),
    Ok(
        "choreo::ScriptReader::LoadToken(choreo::FileReader *, int &, char *, int)",
    ),
    Ok(
        "choreo::ScriptReader::NextToken(void)",
    ),
    Ok(
        "choreo::ScriptReader::ClearError(void)",
    ),
    Ok(
        "choreo::ScriptReader::SetErrorString(char const *)",
    ),
    Ok(
        "choreo::ScriptReader::SetErrorFormat(char const *, ...)",
    ),
    Ok(
        "choreo::ScriptReader::SetErrorString(int, char const *)",
    ),
    Ok(
        "choreo::ScriptReader::SetErrorFormat(int, char const *, ...)",
    ),
    Ok(
        "choreo::ScriptReader::GetErrorMessage(char *, int)",
    ),
    Ok(
        "choreo::ScriptReader::HandleError(void)",
    ),
    Ok(
        "choreo::ScriptReader::DefaultErrorHandler(choreo::ScriptReader *, void *)",
    ),
    Ok(
        "choreo::ScriptReader::FindDefaultFloat(char const *) const",
    ),
    Ok(
        "choreo::ScriptReader::FindDefaultString(char const *) const",
    ),
    Ok(
        "choreo::ScriptReader::LoadDefault(void)",
    ),
    Ok(
        "choreo::ScriptReader::FindLocalFloat(char const *) const",
    ),
    Ok(
        "choreo::ScriptReader::LoadLocalFloat(void)",
    ),
    Ok(
        "choreo::ScriptReader::FindLocalString(char const *) const",
    ),
    Ok(
        "choreo::ScriptReader::LoadLocalString(void)",
    ),
    Ok(
        "choreo::ScriptReader::LoadLocal(void)",
    ),
    Ok(
        "choreo::ScriptReader::LoadUntilStruct(void)",
    ),
    Ok(
        "choreo::ScriptReader::IsEndOfFile(void) const",
    ),
    Ok(
        "choreo::ScriptReader::GetStructCount(char const *)",
    ),
    Ok(
        "choreo::ScriptReader::IsMoreStructs(void)",
    ),
    Ok(
        "choreo::ScriptReader::GetNextStructIdentifier(void) const",
    ),
    Ok(
        "choreo::ScriptReader::BeginStruct(char const *)",
    ),
    Ok(
        "choreo::ScriptReader::EndStruct(void)",
    ),
    Ok(
        "choreo::ScriptReader::RequiredParamFloat(char const *, float *, int *)",
    ),
    Ok(
        "choreo::ScriptReader::RequiredParamString(char const *, char *, int, int *)",
    ),
    Ok(
        "choreo::ScriptReader::ParamFloat(char const *, float *, int *)",
    ),
    Ok(
        "choreo::ScriptReader::ParamString(char const *, char *, int, int *)",
    ),
    Ok(
        "choreo::StringFileReader type_info function",
    ),
    Ok(
        "choreo::P3DFileReader type_info function",
    ),
    Ok(
        "choreo::FTTFileReader type_info function",
    ),
    Ok(
        "choreo::ScriptReader type_info function",
    ),
    Ok(
        "choreo::FileReader::~FileReader(void)",
    ),
    Ok(
        "choreo::FileReader::FileReader(void)",
    ),
    Ok(
        "choreo::StringFileReader::GetFilename(void) const",
    ),
    Ok(
        "choreo::StringFileReader::GetPosition(void) const",
    ),
    Ok(
        "choreo::FileReader type_info function",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::SynchronizationRootDriver(choreo::LocomotionDriver *)",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::~SynchronizationRootDriver(void)",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::SetPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::SetOrientation(float)",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::GetRootBlendInTime(void) const",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::GetRootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::GetRootWeight(void) const",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::GetRootPriority(void) const",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::HasRootTranslation(void) const",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::HasRootRotation(void) const",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::HasRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::GetRootGroundFixup(void) const",
    ),
    Ok(
        "choreo::SynchronizationDriver::SynchronizationDriver(choreo::Locomotion *)",
    ),
    Ok(
        "choreo::SynchronizationDriver::~SynchronizationDriver(void)",
    ),
    Ok(
        "choreo::SynchronizationDriver::Clone(void) const",
    ),
    Ok(
        "choreo::SynchronizationDriver::SetSynchParameters(float)",
    ),
    Ok(
        "choreo::SynchronizationDriver::Begin(choreo::Puppet *)",
    ),
    Ok(
        "choreo::SynchronizationDriver::Advance(float)",
    ),
    Ok(
        "choreo::SynchronizationDriver::IsFinished(void) const",
    ),
    Ok(
        "choreo::SynchronizationDriver::End(choreo::Puppet *)",
    ),
    Ok(
        "choreo::SynchronizationDriver::Apply(choreo::Engine *)",
    ),
    Ok(
        "choreo::SynchronizationDriver type_info function",
    ),
    Ok(
        "choreo::SynchronizationRootDriver type_info function",
    ),
    Ok(
        "choreo::SynchronizationRootDriver::Reset(choreo::RootBlender *)",
    ),
    Ok(
        "choreo::Transition::Transition(choreo::Rig *, tAnimation *, choreo::Partition *)",
    ),
    Ok(
        "choreo::Transition::~Transition(void)",
    ),
    Ok(
        "choreo::Transition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
    ),
    Ok(
        "choreo::Transition type_info function",
    ),
    Ok(
        "choreo::GetWorldAngle(float, float)",
    ),
    Ok(
        "choreo::GetSmallestArc(float, float)",
    ),
    Ok(
        "choreo::RotateYVector(float, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "choreo::MatrixFillRotateVectorToVector(RadicalMathLibrary::Matrix &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "choreo::VStrPrintf(char *, int, char const *, char *)",
    ),
    Ok(
        "choreo::StrPrintf(char *, int, char const *, ...)",
    ),
    Ok(
        "choreo::StrSet(char *, int, char const *)",
    ),
    Ok(
        "choreo::StrCat(char *, int, char const *)",
    ),
    Ok(
        "choreo::BlendSlot::~BlendSlot(void)",
    ),
    Ok(
        "choreo::BlendSlot::GetCycleDuration(void) const",
    ),
    Ok(
        "choreo::BlendSlot::PhaseToFrame(float) const",
    ),
    Ok(
        "choreo::BlendSlotFootInfo::BlendSlotFootInfo(choreo::Rig *, choreo::BlendSlot *)",
    ),
    Ok(
        "choreo::BlendSlotFootInfo::~BlendSlotFootInfo(void)",
    ),
    Ok(
        "choreo::BlendSlotFootInfo::FrameToPhase(float, float) const",
    ),
    Ok(
        "choreo::BlendSlotFootInfo::GetFootPlant(int) const",
    ),
    Ok(
        "choreo::BlendSlotFootInfo::GetFootLift(int) const",
    ),
    Ok(
        "choreo::BlendSlotFootInfo::GetFootScale(int) const",
    ),
    Ok(
        "choreo::Blend::Blend(choreo::Rig *, int, int const *, choreo::Partition *)",
    ),
    Ok(
        "choreo::Blend::~Blend(void)",
    ),
    Ok(
        "choreo::Blend::GetParamSlotCount(int) const",
    ),
    Ok(
        "choreo::Blend::GetBlendSlotIndex(int const *) const",
    ),
    Ok(
        "choreo::Blend::GetBlendSlot(int)",
    ),
    Ok(
        "choreo::Blend::SetBlendSlot(int, choreo::BlendSlot *)",
    ),
    Ok(
        "choreo::Blend::NewDriver(void)",
    ),
    Ok(
        "choreo::Blend::NewBlendDriver(void)",
    ),
    Ok(
        "choreo::BlendPhase::BlendPhase(choreo::Blend *)",
    ),
    Ok(
        "choreo::BlendPhase::~BlendPhase(void)",
    ),
    Ok(
        "choreo::BlendPhase::SetParamValue(int, float)",
    ),
    Ok(
        "choreo::BlendPhase::SetPhase(float)",
    ),
    Ok(
        "choreo::BlendPhase::GetMaxBlendSlotCount(void) const",
    ),
    Ok(
        "choreo::BlendPhase::GetBlendSlot(int)",
    ),
    Ok(
        "choreo::BlendPhase::AddBlendSlot(choreo::BlendSlot *, float)",
    ),
    Ok(
        "choreo::BlendPhase::UpdateBlends(void)",
    ),
    Ok(
        "choreo::BlendPhase::AdvancePhase(float)",
    ),
    Ok(
        "choreo::BlendPhase::UpdateLegPhase(void)",
    ),
    Ok(
        "choreo::BlendPhase::IsFinished(void) const",
    ),
    Ok(
        "choreo::BlendPhase::IsFootPlanted(int) const",
    ),
    Ok(
        "choreo::BlendPhase::HasJointTranslation(int) const",
    ),
    Ok(
        "choreo::BlendPhase::GetJointTranslation(int, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::BlendPhase::HasJointRotation(int) const",
    ),
    Ok(
        "choreo::BlendPhase::GetJointRotation(int, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::BlendPhase::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::BlendPhase::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::BlendPhase::HasGroupTranslation(tUidUnaligned) const",
    ),
    Ok(
        "choreo::BlendPhase::GetGroupTranslation(tUidUnaligned, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::BlendPhase::HasGroupRotation(tUidUnaligned) const",
    ),
    Ok(
        "choreo::BlendPhase::GetGroupRotation(tUidUnaligned, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::BlendPhase::GetGroupWeight(void) const",
    ),
    Ok(
        "choreo::BlendPhase::GetGroupPriority(void) const",
    ),
    Ok(
        "choreo::BlendPhase::GetBlendSlotLegWeight(int, int) const",
    ),
    Ok(
        "choreo::BlendPhase::GetBlendSlotLegFrame(int, int) const",
    ),
    Ok(
        "choreo::BlendJointDriver::BlendJointDriver(choreo::BlendPhase *)",
    ),
    Ok(
        "choreo::BlendJointDriver::~BlendJointDriver(void)",
    ),
    Ok(
        "choreo::BlendJointDriver::Reset(void)",
    ),
    Ok(
        "choreo::BlendJointDriver::Advance(float)",
    ),
    Ok(
        "choreo::BlendJointDriver::GetBlendInTime(void) const",
    ),
    Ok(
        "choreo::BlendJointDriver::GetBlendOutTime(void) const",
    ),
    Ok(
        "choreo::BlendJointDriver::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::BlendJointDriver::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::BlendJointDriver::HasJointTranslation(int) const",
    ),
    Ok(
        "choreo::BlendJointDriver::GetJointTranslation(int, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::BlendJointDriver::HasJointRotation(int) const",
    ),
    Ok(
        "choreo::BlendJointDriver::GetJointRotation(int, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::BlendJointDriver::GetGroupWeight(tUidUnaligned) const",
    ),
    Ok(
        "choreo::BlendJointDriver::GetGroupPriority(tUidUnaligned) const",
    ),
    Ok(
        "choreo::BlendJointDriver::HasGroupTranslation(tUidUnaligned) const",
    ),
    Ok(
        "choreo::BlendJointDriver::GetGroupTranslation(tUidUnaligned, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::BlendJointDriver::HasGroupRotation(tUidUnaligned) const",
    ),
    Ok(
        "choreo::BlendJointDriver::GetGroupRotation(tUidUnaligned, RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::BlendFootDriver::BlendFootDriver(choreo::RigLeg *, choreo::BlendPhase *)",
    ),
    Ok(
        "choreo::BlendFootDriver::~BlendFootDriver(void)",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootBlendInTime(void) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootWeight(void) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootPriority(void) const",
    ),
    Ok(
        "choreo::BlendFootDriver::HasFootEffectorTranslation(void) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootEffectorTranslationIK(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootEffectorTranslationIKWorld(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootEffectorTranslationNoIK(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootEffectorTranslation(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::BlendFootDriver::HasFootEffectorRotation(void) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootEffectorRotationIK(RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootEffectorRotationIKWorld(RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootEffectorRotation(RadicalMathLibrary::Quaternion &) const",
    ),
    Ok(
        "choreo::BlendFootDriver::HasFootPoleVectorTranslation(void) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootPoleVectorTranslation(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "choreo::BlendFootDriver::HasFootPlanted(void) const",
    ),
    Ok(
        "choreo::BlendFootDriver::IsFootPlanted(void) const",
    ),
    Ok(
        "choreo::BlendFootDriver::HasFootGroundFixup(void) const",
    ),
    Ok(
        "choreo::BlendFootDriver::GetFootGroundFixup(void) const",
    ),
    Ok(
        "choreo::BlendDriver::BlendDriver(choreo::Blend *)",
    ),
    Ok(
        "choreo::BlendDriver::~BlendDriver(void)",
    ),
    Ok(
        "choreo::BlendDriver::Clone(void) const",
    ),
    Ok(
        "choreo::BlendDriver::GetWeight(void) const",
    ),
    Ok(
        "choreo::BlendDriver::GetRootBlendInTime(void) const",
    ),
    Ok(
        "choreo::BlendDriver::GetRootBlendOutTime(void) const",
    ),
    Ok(
        "choreo::BlendDriver::SetParamValue(int, float)",
    ),
    Ok(
        "choreo::BlendDriver::SetIsCyclic(bool)",
    ),
    Ok(
        "choreo::BlendDriver::GetJointWeight(int) const",
    ),
    Ok(
        "choreo::BlendDriver::GetJointPriority(int) const",
    ),
    Ok(
        "choreo::BlendDriver::Begin(choreo::Puppet *)",
    ),
    Ok(
        "choreo::BlendDriver::Advance(float)",
    ),
    Ok(
        "choreo::BlendDriver::IsFinished(void) const",
    ),
    Ok(
        "choreo::BlendDriver::End(choreo::Puppet *)",
    ),
    Ok(
        "choreo::BlendDriver::Apply(choreo::Engine *)",
    ),
    Ok(
        "choreo::BlendSlot type_info function",
    ),
    Ok(
        "choreo::BlendSlotFootInfo type_info function",
    ),
    Ok(
        "choreo::Blend type_info function",
    ),
    Ok(
        "choreo::BlendDriver type_info function",
    ),
    Ok(
        "choreo::BlendPhase type_info function",
    ),
    Ok(
        "choreo::BlendJointDriver type_info function",
    ),
    Ok(
        "choreo::BlendFootDriver type_info function",
    ),
    Ok(
        "choreo::BlendSlot::GetCycleStart(void) const",
    ),
    Ok(
        "choreo::BlendSlot::GetFootPlant(int) const",
    ),
    Ok(
        "choreo::BlendSlot::GetFootLift(int) const",
    ),
    Ok(
        "choreo::BlendSlot::GetFootScale(int) const",
    ),
    Ok(
        "sim::Collision::Collision(void)",
    ),
    Ok(
        "sim::Collision::Collision(sim::CollisionVolume *, RadicalMathLibrary::Vector const &, sim::CollisionVolume *, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::Collision::Set(sim::CollisionVolume *, RadicalMathLibrary::Vector const &, sim::CollisionVolume *, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::CollisionObjectPair::CollisionObjectPair(void)",
    ),
    Ok(
        "sim::CollisionObjectPair::Set(sim::CollisionObject *, sim::CollisionObject *)",
    ),
    Ok(
        "sim::CollisionObjectPair::PrepareForCollisionDetection(void)",
    ),
    Ok(
        "sim::CollisionObjectPair::SafeCollisionDistance(float)",
    ),
    Ok(
        "sim::SetDrawVolumeMethod(sim::DrawVolumeMethod)",
    ),
    Ok(
        "sim::DrawCollisionVolume(sim::CollisionVolume *)",
    ),
    Ok(
        "sim::DrawBBox(sim::CollisionVolume *)",
    ),
    Ok(
        "sim::DrawCyl(sim::CylinderVolume *)",
    ),
    Ok(
        "sim::DrawSphere(sim::SphereVolume *)",
    ),
    Ok(
        "sim::DrawOBBox(sim::OBBoxVolume *)",
    ),
    Ok(
        "sim::DrawWall(sim::WallVolume *)",
    ),
    Ok(
        "sim::DrawOBBoxShape(sim::OBBoxVolume *)",
    ),
    Ok(
        "sim::DrawSphereShape(sim::SphereVolume *)",
    ),
    Ok(
        "sim::DrawCylinderShape(sim::CylinderVolume *)",
    ),
    Ok(
        "sim::CollisionManager::GetInstance(void)",
    ),
    Ok(
        "sim::CollisionManager::CollisionManager(void)",
    ),
    Ok(
        "sim::CollisionManager::~CollisionManager(void)",
    ),
    Ok(
        "sim::CollisionManager::SetCollisionManagerAttributes(unsigned int)",
    ),
    Ok(
        "sim::CollisionManager::SetNbArea(int)",
    ),
    Ok(
        "sim::CollisionManager::ResetArea(int)",
    ),
    Ok(
        "sim::CollisionManager::SetUseExclusiveAutoPair(bool, int)",
    ),
    Ok(
        "sim::CollisionManager::ClearCollisions(void)",
    ),
    Ok(
        "sim::CollisionManager::AddCollisionObject(sim::CollisionObject *, int)",
    ),
    Ok(
        "sim::CollisionManager::RemoveCollisionObject(sim::CollisionObject *, int)",
    ),
    Ok(
        "sim::CollisionManager::AddPair(sim::CollisionObject *, sim::CollisionObject *, int)",
    ),
    Ok(
        "sim::CollisionManager::DetectCollision(int, float, float, bool)",
    ),
    Ok(
        "sim::CollisionManager::DetectCollision(float, float, bool)",
    ),
    Ok(
        "sim::CollisionManager::SolveCollision(int, float, float)",
    ),
    Ok(
        "sim::CollisionManager::SolveCollision(float, float)",
    ),
    Ok(
        "sim::CollisionManager::EndDetectCollision(void)",
    ),
    Ok(
        "sim::CollisionManager::SetAreaActivated(int, bool)",
    ),
    Ok(
        "sim::CollisionManager::ActivateAllAreas(void)",
    ),
    Ok(
        "sim::CollisionManager::DeActivateAllAreas(void)",
    ),
    Ok(
        "sim::CollisionManager::DetectRayIntersection(sim::TArray<sim::RayIntersectionInfo> &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, bool, int)",
    ),
    Ok(
        "sim::CollisionManager::Area::Area(void)",
    ),
    Ok(
        "sim::CollisionManager::Area::~Area(void)",
    ),
    Ok(
        "sim::CollisionManager::Area::Reset(void)",
    ),
    Ok(
        "sim::CollisionManager::Area::AddCollisionObject(sim::CollisionObject *)",
    ),
    Ok(
        "sim::CollisionManager::Area::RemoveCollisionObject(sim::CollisionObject *)",
    ),
    Ok(
        "sim::CollisionManager::Area::AddPair(sim::CollisionObject *, sim::CollisionObject *)",
    ),
    Ok(
        "sim::CollisionManager::Area::PrepareForCollisionDetection(unsigned int)",
    ),
    Ok(
        "sim::CollisionManager::Area::EndCollisionDetection(unsigned int)",
    ),
    Ok(
        "sim::CollisionManager::Area::DetectRayIntersection(sim::TArray<sim::RayIntersectionInfo> &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, float &, bool)",
    ),
    Ok(
        "sim::TArray<int>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<int>::Grow(void)",
    ),
    Ok(
        "sim::TArray<int>::Add(int const &)",
    ),
    Ok(
        "sim::TArray<int>::RemoveAt(int)",
    ),
    Ok(
        "sim::TArray<sim::CollisionObjectPair>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<sim::CollisionObjectPair>::Grow(void)",
    ),
    Ok(
        "sim::TArray<sim::CollisionObjectPair>::NewElem(void)",
    ),
    Ok(
        "sim::TArray<sim::CollisionObjectPair>::RemoveAt(int)",
    ),
    Ok(
        "sim::TList<sim::CollisionObject *> type_info function",
    ),
    Ok(
        "sim::CollisionManager type_info function",
    ),
    Ok(
        "sim::TList<sim::CollisionObject *>::~TList(void)",
    ),
    Ok(
        "sim::CollisionObject::CollisionObject(sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionObject::~CollisionObject(void)",
    ),
    Ok(
        "sim::CollisionObject::SetIsStatic(bool)",
    ),
    Ok(
        "sim::CollisionObject::SetPhysicsProperties(sim::PhysicsProperties *)",
    ),
    Ok(
        "sim::CollisionObject::ConvertToRigidBody(void)",
    ),
    Ok(
        "sim::CollisionObject::Clone(sim::SimState *)",
    ),
    Ok(
        "sim::CollisionObject::SetCollisionVolume(sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionObject::SetVisibility(tCompositeDrawable *)",
    ),
    Ok(
        "sim::CollisionObject::SetVisibility(int, bool)",
    ),
    Ok(
        "sim::CollisionObject::UpdateVisibilityByJoint(sim::CollisionVolume *, int, bool)",
    ),
    Ok(
        "sim::CollisionObject::UpdateVisibilityByOwner(sim::CollisionVolume *, sim::TArray<bool> &)",
    ),
    Ok(
        "sim::CollisionObject::AddSelfCollision(int, int, bool, bool)",
    ),
    Ok(
        "sim::CollisionObject::SetSelfCollision(sim::CollisionObject::SelfCollision &)",
    ),
    Ok(
        "sim::CollisionObject::CollisionVolumeOwner::operator=(sim::CollisionObject::CollisionVolumeOwner const &)",
    ),
    Ok(
        "sim::LoadVectorFromCollisionVectorChunk(tChunkFile *, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::CollisionObjectLoader::CollisionObjectLoader(void)",
    ),
    Ok(
        "sim::CollisionObjectLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "sim::CollisionObjectLoader::LoadCollisionVolume(tChunkFile *)",
    ),
    Ok(
        "sim::CollisionObject::CollisionVolumeOwner::SetNumOwnerList(int)",
    ),
    Ok(
        "sim::TArray<sim::CollisionObject::SelfCollision>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<sim::CollisionObject::SelfCollision>::Grow(void)",
    ),
    Ok(
        "sim::TArray<sim::CollisionObject::SelfCollision>::NewElem(void)",
    ),
    Ok(
        "sim::TArray<tUidUnaligned>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<bool>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<tUidUnaligned>::Grow(void)",
    ),
    Ok(
        "sim::TArray<tUidUnaligned>::NewElem(void)",
    ),
    Ok(
        "sim::TArray<bool>::Grow(void)",
    ),
    Ok(
        "sim::TArray<bool>::NewElem(void)",
    ),
    Ok(
        "sim::CollisionObject type_info function",
    ),
    Ok(
        "sim::CollisionObjectLoader type_info function",
    ),
    Ok(
        "sim::CollisionObjectLoader::~CollisionObjectLoader(void)",
    ),
    Ok(
        "sim::CollisionVolume::CollisionVolume(void)",
    ),
    Ok(
        "sim::CollisionVolume::~CollisionVolume(void)",
    ),
    Ok(
        "sim::CollisionVolume::GetSubCollisionVolume(int, bool)",
    ),
    Ok(
        "sim::CollisionVolume::ConvertToRigidBody(void)",
    ),
    Ok(
        "sim::CollisionVolume::UpdateBBoxVisibility(void)",
    ),
    Ok(
        "sim::CollisionVolume::Clone(void)",
    ),
    Ok(
        "sim::CollisionVolume::Optimize(void)",
    ),
    Ok(
        "sim::CollisionVolume::DeOptimize(void)",
    ),
    Ok(
        "sim::CollisionVolume::SetClone(sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionVolume::UpdateAll(void)",
    ),
    Ok(
        "sim::CollisionVolume::UpdateBSphere(void)",
    ),
    Ok(
        "sim::CollisionVolume::UpdatePos(void)",
    ),
    Ok(
        "sim::CollisionVolume::UpdateRot(void)",
    ),
    Ok(
        "sim::CollisionVolume::UpdateScale(float)",
    ),
    Ok(
        "sim::CollisionVolume::Reserve(unsigned int)",
    ),
    Ok(
        "sim::CollisionVolume::AddSubVolume(sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionVolume::RemoveSubVolume(sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionVolume::SetCollisionObject(sim::CollisionObject *)",
    ),
    Ok(
        "sim::CollisionVolume::SetObjRefIndex(int)",
    ),
    Ok(
        "sim::CollisionVolume::IsBBIn(sim::CollisionVolume *, float)",
    ),
    Ok(
        "sim::SphereVolume::SphereVolume(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "sim::SphereVolume::~SphereVolume(void)",
    ),
    Ok(
        "sim::SphereVolume::SetClone(sim::CollisionVolume *)",
    ),
    Ok(
        "sim::SphereVolume::UpdateScale(float)",
    ),
    Ok(
        "sim::SphereVolume::UpdateRadius(float)",
    ),
    Ok(
        "sim::CylinderVolume::CylinderVolume(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, bool)",
    ),
    Ok(
        "sim::CylinderVolume::~CylinderVolume(void)",
    ),
    Ok(
        "sim::CylinderVolume::SetClone(sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CylinderVolume::UpdateScale(float)",
    ),
    Ok(
        "sim::CylinderVolume::SetRotation(void)",
    ),
    Ok(
        "sim::CylinderVolume::UpdateBBox(void)",
    ),
    Ok(
        "sim::CylinderVolume::UpdateBSphere(void)",
    ),
    Ok(
        "sim::CylinderVolume::OptimizeAxis(void)",
    ),
    Ok(
        "sim::OBBoxVolume::Set(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, float)",
    ),
    Ok(
        "sim::OBBoxVolume::~OBBoxVolume(void)",
    ),
    Ok(
        "sim::OBBoxVolume::SetClone(sim::CollisionVolume *)",
    ),
    Ok(
        "sim::OBBoxVolume::UpdateScale(float)",
    ),
    Ok(
        "sim::OBBoxVolume::SetRotation(void)",
    ),
    Ok(
        "sim::OBBoxVolume::UpdateBBox(void)",
    ),
    Ok(
        "sim::OBBoxVolume::UpdateBSphere(void)",
    ),
    Ok(
        "sim::OBBoxVolume::Projection(RadicalMathLibrary::Vector const &) const",
    ),
    Ok(
        "sim::OBBoxVolume::Projection(RadicalMathLibrary::Vector const &, int) const",
    ),
    Ok(
        "sim::OBBoxVolume::SubCorner(RadicalMathLibrary::Vector &, int) const",
    ),
    Ok(
        "sim::OBBoxVolume::Corner(RadicalMathLibrary::Vector &, int) const",
    ),
    Ok(
        "sim::OBBoxVolume::Side(RadicalMathLibrary::Vector &, int, int) const",
    ),
    Ok(
        "sim::OBBoxVolume::OptimizeAxis(void)",
    ),
    Ok(
        "sim::OBBoxVolume::SwapAxis(int, int)",
    ),
    Ok(
        "sim::WallVolume::WallVolume(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::WallVolume::WallVolume(void)",
    ),
    Ok(
        "sim::WallVolume::~WallVolume(void)",
    ),
    Ok(
        "sim::WallVolume::SetClone(sim::CollisionVolume *)",
    ),
    Ok(
        "sim::WallVolume::UpdateBBox(void)",
    ),
    Ok(
        "sim::WallVolume::UpdateScale(float)",
    ),
    Ok(
        "sim::WallVolume::SetRotation(void)",
    ),
    Ok(
        "sim::WallVolume::OptimizeAxis(void)",
    ),
    Ok(
        "sim::BBoxVolume::BBoxVolume(void)",
    ),
    Ok(
        "sim::BBoxVolume::~BBoxVolume(void)",
    ),
    Ok(
        "sim::BBoxVolume::UpdateBBox(void)",
    ),
    Ok(
        "sim::BBoxVolume::AddBox(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, sim::CollisionVolume *) const",
    ),
    Ok(
        "sim::SphereVolume::InertiaSelf(sim::SymMatrix &) const",
    ),
    Ok(
        "sim::CylinderVolume::InertiaSelf(sim::SymMatrix &) const",
    ),
    Ok(
        "sim::OBBoxVolume::InertiaSelf(sim::SymMatrix &) const",
    ),
    Ok(
        "sim::CollisionVolume type_info function",
    ),
    Ok(
        "sim::TList<sim::CollisionVolume *> type_info function",
    ),
    Ok(
        "sim::SphereVolume type_info function",
    ),
    Ok(
        "sim::CylinderVolume type_info function",
    ),
    Ok(
        "sim::OBBoxVolume type_info function",
    ),
    Ok(
        "sim::WallVolume type_info function",
    ),
    Ok(
        "sim::BBoxVolume type_info function",
    ),
    Ok(
        "sim::SymMatrix::SymMatrix(sim::SymMatrix const &)",
    ),
    Ok(
        "sim::TList<sim::CollisionVolume *>::~TList(void)",
    ),
    Ok(
        "sim::CollisionVolume::UpdateBBox(void)",
    ),
    Ok(
        "sim::CollisionVolume::InertiaSelf(sim::SymMatrix &) const",
    ),
    Ok(
        "sim::CollisionVolume::SetRotation(void)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::ImpulseBasedCollisionSolver(void)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::~ImpulseBasedCollisionSolver(void)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::UpdateForSimEnvironment(void)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::SetCollisionSolverAgent(sim::CollisionSolverAgent *)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::SolveCollisions(sim::TArray<sim::Collision> *, float, float)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::ExtractVelocities(void)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::SolveCollisionImpulse(void)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::StartObj(sim::SimulatedObject *, sim::SimulatedObject *, RadicalMathLibrary::Vector const &, sim::SymMatrix &, int, int)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::AddImpulse(sim::SimulatedObject *, sim::SimulatedObject *, RadicalMathLibrary::Vector const &, sim::SymMatrix &, int, int)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::EndObj(sim::SimulatedObject *, int, int, bool)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::ComputeImpulse(void)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::RestCoeff(void)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::FrictCoeff(void)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::TangRestCoeff(void)",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver::PositionCorrectionForInterpenetration(float &)",
    ),
    Ok(
        "sim::CollisionSolverAgent::CollisionSolverAgent(void)",
    ),
    Ok(
        "sim::CollisionSolverAgent::~CollisionSolverAgent(void)",
    ),
    Ok(
        "sim::CollisionSolverAgent::StartSolvingCollisionList(sim::TArray<sim::Collision> *, float)",
    ),
    Ok(
        "sim::CollisionSolverAgent::EndSolvingCollisionList(sim::TArray<sim::Collision> *, float)",
    ),
    Ok(
        "sim::CollisionSolverAgent::PreCollisionEvent(sim::Collision &, int)",
    ),
    Ok(
        "sim::CollisionSolverAgent::CollisionEvent(sim::SimState *, int, sim::SimState *, int, RadicalMathLibrary::Vector const &, float, float, sim::SimulatedObject **, sim::SimulatedObject **)",
    ),
    Ok(
        "sim::CollisionSolverAgent::TestImpulse(RadicalMathLibrary::Vector &, sim::Collision &)",
    ),
    Ok(
        "sim::CollisionSolverAgent::TestCache(sim::SimState *, int)",
    ),
    Ok(
        "sim::CollisionSolverAgent::EndObjectCollision(sim::SimState *, int)",
    ),
    Ok(
        "sim::CollisionSolverAgent::DisableCollisionAnalyser(void)",
    ),
    Ok(
        "sim::CollisionSolverAgent type_info function",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver type_info function",
    ),
    Ok(
        "sim::RayIntersectSphere(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, float &)",
    ),
    Ok(
        "sim::RayIntersectBBox(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float &)",
    ),
    Ok(
        "sim::RayIntersectCylinder(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::RayIntersectOBBox(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, sim::OBBoxVolume *, float &)",
    ),
    Ok(
        "sim::RayIntersectVolume(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, sim::RayIntersectionInfo &)",
    ),
    Ok(
        "sim::TestPointInVolume(RadicalMathLibrary::Vector const &, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::FindClosestPointOnVolume(RadicalMathLibrary::Vector const &, sim::CollisionVolume *, RadicalMathLibrary::Vector &, float &)",
    ),
    Ok(
        "sim::RayIntersectionInfo::Add(sim::TArray<sim::RayIntersectionInfo> &, sim::RayIntersectionInfo &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, float &)",
    ),
    Ok(
        "sim::TArray<sim::RayIntersectionInfo>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<sim::RayIntersectionInfo>::Grow(void)",
    ),
    Ok(
        "sim::TArray<sim::RayIntersectionInfo>::NewElem(void)",
    ),
    Ok(
        "sim::TArray<sim::RayIntersectionInfo>::InsertAt(int, sim::RayIntersectionInfo const &)",
    ),
    Ok(
        "sim::dStartStreamLine(void)",
    ),
    Ok(
        "sim::dStreamLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, pddiColour const &, pddiColour const &)",
    ),
    Ok(
        "sim::dEndStreamLine(void)",
    ),
    Ok(
        "sim::dLine2(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, pddiColour const &, pddiColour const &)",
    ),
    Ok(
        "sim::dBox3(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, pddiColour const &)",
    ),
    Ok(
        "sim::dLine3(RadicalMathLibrary::Vector const &, float, pddiColour const &)",
    ),
    Ok(
        "sim::LineElem::LineElem(void)",
    ),
    Ok(
        "sim::TArray<sim::LineElem>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<sim::LineElem>::Grow(void)",
    ),
    Ok(
        "sim::TArray<sim::LineElem>::NewElem(void)",
    ),
    Ok(
        "sim::PhysicsProperties::PhysicsProperties(void)",
    ),
    Ok(
        "sim::PhysicsProperties::~PhysicsProperties(void)",
    ),
    Ok(
        "sim::PhysicsProperties::Update(void)",
    ),
    Ok(
        "sim::PhysicsProperties::SetFrictCoeffCGS(float)",
    ),
    Ok(
        "sim::PhysicsProperties::SetRestCoeffCGS(float)",
    ),
    Ok(
        "sim::PhysicsProperties::SetTangRestCoeffCGS(float)",
    ),
    Ok(
        "sim::PhysicsProperties::SetDensityCGS(float)",
    ),
    Ok(
        "sim::PhysicsProperties::GetPhysicsProperties(tEntityStore *, char *, float, float, float, float)",
    ),
    Ok(
        "sim::PhysicsProperties::DefaultPhysicsProperties(tEntityStore *)",
    ),
    Ok(
        "sim::PhysicsProperties::DefaultArtPhysicsProperties(tEntityStore *)",
    ),
    Ok(
        "sim::PhysicsProperties::HardWoodProperties(tEntityStore *)",
    ),
    Ok(
        "sim::PhysicsProperties::CombinedRestCoeff(sim::PhysicsProperties const *, sim::PhysicsProperties const *)",
    ),
    Ok(
        "sim::PhysicsProperties::CombinedTangRestCoeff(sim::PhysicsProperties const *, sim::PhysicsProperties const *)",
    ),
    Ok(
        "sim::PhysicsProperties::CombinedFrictCoeff(sim::PhysicsProperties const *, sim::PhysicsProperties const *)",
    ),
    Ok(
        "sim::PhysicsProperties type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::PhysicsProperties>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::PhysicsProperties> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::PhysicsProperties>::safe_cast(IRefCount *)",
    ),
    Ok(
        "sim::SimUnits::Initialize(void)",
    ),
    Ok(
        "sim::SimUnits::Reset(void)",
    ),
    Ok(
        "sim::SimUnits::SimUnits(void)",
    ),
    Ok(
        "sim::SimUnits::~SimUnits(void)",
    ),
    Ok(
        "sim::SimEnvironment::SetCollisionDistanceCGS(float)",
    ),
    Ok(
        "sim::SimEnvironment::GetDefaultSimEnvironment(void)",
    ),
    Ok(
        "sim::SimEnvironment::SimEnvironment(void)",
    ),
    Ok(
        "sim::SimEnvironment::~SimEnvironment(void)",
    ),
    Ok(
        "sim::SimEnvironment::UpdateUnits(void)",
    ),
    Ok(
        "sim::SimEnvironment::SetGravityCGS(float, float, float)",
    ),
    Ok(
        "sim::SimSpeed::SetValueCGS(float)",
    ),
    Ok(
        "sim::SimLength::SimLength(float)",
    ),
    Ok(
        "sim::SimLength::SetValueCGS(float)",
    ),
    Ok(
        "sim::SimTime::SimTime(float)",
    ),
    Ok(
        "sim::SimTime::SetValueCGS(float)",
    ),
    Ok(
        "sim::SimUnits type_info function",
    ),
    Ok(
        "sim::SimEnvironment type_info function",
    ),
    Ok(
        "sim::SimTime::~SimTime(void)",
    ),
    Ok(
        "sim::SimTime type_info function",
    ),
    Ok(
        "sim::SimLength::~SimLength(void)",
    ),
    Ok(
        "sim::SimLength type_info function",
    ),
    Ok(
        "sim::SimSpeed type_info function",
    ),
    Ok(
        "sim::TList<sim::SimUnits *>::~TList(void)",
    ),
    Ok(
        "sim::TList<sim::SimUnits *> type_info function",
    ),
    Ok(
        "sim::SimUnits::UpdateUnits(void)",
    ),
    Ok(
        "sim::SimCGSValue::ValueCGS(void) const",
    ),
    Ok(
        "sim::SimCGSValue::Value(void) const",
    ),
    Ok(
        "sim::SimSpeed::~SimSpeed(void)",
    ),
    Ok(
        "sim::SimCGSValue type_info function",
    ),
    Ok(
        "sim::SimCGSValue::~SimCGSValue(void)",
    ),
    Ok(
        "sim::SubUpdateRotMatrix(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix &)",
    ),
    Ok(
        "sim::UpdateRotMatrixSafe(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix &, float)",
    ),
    Ok(
        "sim::WFromRotMatrix(RadicalMathLibrary::Vector &, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
    ),
    Ok(
        "sim::ScaleRotMatrix(float, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix &)",
    ),
    Ok(
        "sim::WDtToQuat(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Quaternion &)",
    ),
    Ok(
        "sim::AngleToQuat(float, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Quaternion &)",
    ),
    Ok(
        "sim::GetIndexOfMaxVectorComponent(RadicalMathLibrary::Vector const &, bool)",
    ),
    Ok(
        "sim::ComputePointMassInertia(sim::SymMatrix &, RadicalMathLibrary::Vector &, float)",
    ),
    Ok(
        "sim::SameMatrix(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
    ),
    Ok(
        "sim::SameTranslation(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
    ),
    Ok(
        "sim::SameRotation(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
    ),
    Ok(
        "sim::BuildRotationFromTo(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Quaternion &, bool &, float, float)",
    ),
    Ok(
        "sim::CopyRotation(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix &)",
    ),
    Ok(
        "sim::AxisAngle(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, float &)",
    ),
    Ok(
        "sim::SimState::CreateSimState(tUidUnaligned, unsigned int, tEntityStore *)",
    ),
    Ok(
        "sim::SimState::CreateSimState(sim::SimState *, char const *)",
    ),
    Ok(
        "sim::SimState::CreateStaticSimState(sim::CollisionObject *)",
    ),
    Ok(
        "sim::SimState::CreateSimState(sim::CollisionObject *, sim::SimulatedObject *)",
    ),
    Ok(
        "sim::SimState::CreateManualSimState(sim::CollisionVolume *, char const *)",
    ),
    Ok(
        "sim::ExtractVelocityFromMatrix(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float, float, sim::SimVelocityState &)",
    ),
    Ok(
        "sim::SimState::SimState(sim::SimControlEnum)",
    ),
    Ok(
        "sim::SimState::~SimState(void)",
    ),
    Ok(
        "sim::SimState::SetControl(sim::SimControlEnum)",
    ),
    Ok(
        "sim::SimState::InitAllVirtualCM(void)",
    ),
    Ok(
        "sim::SimState::SetHasMoved(bool)",
    ),
    Ok(
        "sim::SimState::SetSimulatedObject(sim::SimulatedObject *)",
    ),
    Ok(
        "sim::SimState::SetCollisionObject(sim::CollisionObject *)",
    ),
    Ok(
        "sim::SimState::GetSphereRadius(void) const",
    ),
    Ok(
        "sim::SimState::SetPhysicsProperties(sim::PhysicsProperties *)",
    ),
    Ok(
        "sim::SimState::SyncSimObj(void)",
    ),
    Ok(
        "sim::SimState::GetVelocity(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, int)",
    ),
    Ok(
        "sim::SimState::AddVirtualCM(int, unsigned int)",
    ),
    Ok(
        "sim::SimState::InitVirtualCM(int)",
    ),
    Ok(
        "sim::SimState::AddCacheToVirtualCM(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, int)",
    ),
    Ok(
        "sim::SimState::SetTransform(RadicalMathLibrary::Matrix const &, float)",
    ),
    Ok(
        "sim::SimState::MoveCollisionObject(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "sim::SimState::DynamicPositionAdjustment(RadicalMathLibrary::Vector const &, float, bool)",
    ),
    Ok(
        "sim::SimState::DebugDisplay(int)",
    ),
    Ok(
        "sim::SimState type_info function",
    ),
    Ok(
        "sim::SimState::GetVirtualCM(int)",
    ),
    Ok(
        "sim::SimState::GetTransform(int) const",
    ),
    Ok(
        "sim::SimState::GetPosition(int) const",
    ),
    Ok(
        "sim::SimState::ResetVelocities(void)",
    ),
    Ok(
        "sim::SimState::GetSimulatedObject(int)",
    ),
    Ok(
        "sim::SimState::RequiresPushTransforForDisplay(void) const",
    ),
    Ok(
        "sim::ManualSimState::ManualSimState(void)",
    ),
    Ok(
        "sim::ManualSimState::~ManualSimState(void)",
    ),
    Ok(
        "sim::ManualSimState type_info function",
    ),
    Ok(
        "sim::ManualSimState::GetTransform(int) const",
    ),
    Ok(
        "sim::ManualSimState::GetPosition(int) const",
    ),
    Ok(
        "sim::ManualSimState::SetTransform(RadicalMathLibrary::Matrix const &, float)",
    ),
    Ok(
        "global constructors keyed to sim::SimState::sApproxSpeedMagnitudeFactor",
    ),
    Ok(
        "sim::SimStateArticulated::CreateSimStateArticulated(tUidUnaligned, poser::Pose *, unsigned int, tEntityStore *)",
    ),
    Ok(
        "sim::SimStateArticulated::CreateSimStateArticulated(char const *, poser::Pose *, unsigned int, tEntityStore *)",
    ),
    Ok(
        "sim::SimStateArticulated::CreateSimStateArticulated(poser::Pose *, sim::CollisionObject *, sim::SimulatedObject *)",
    ),
    Ok(
        "sim::SimStateArticulated::SimStateArticulated(poser::Pose *, sim::SimControlEnum)",
    ),
    Ok(
        "sim::SimStateArticulated::~SimStateArticulated(void)",
    ),
    Ok(
        "sim::SimStateArticulated::SetCollisionObject(sim::CollisionObject *)",
    ),
    Ok(
        "sim::SimStateArticulated::SetPose(poser::Pose *)",
    ),
    Ok(
        "sim::SimStateArticulated::SetTransform(RadicalMathLibrary::Matrix const &, float)",
    ),
    Ok(
        "sim::SimStateArticulated::UpdateJointState(float)",
    ),
    Ok(
        "sim::SimStateArticulated::ConvertToRigidBody(void)",
    ),
    Ok(
        "sim::SimStateArticulated::AddVirtualCM(int, unsigned int)",
    ),
    Ok(
        "sim::SimStateArticulated::InitVirtualCM(int)",
    ),
    Ok(
        "sim::SimStateArticulated::ReleasePose(void)",
    ),
    Ok(
        "sim::SimStateArticulated::InitAllVirtualCM(void)",
    ),
    Ok(
        "sim::SimStateArticulated::GetVirtualCM(int)",
    ),
    Ok(
        "sim::SimStateArticulated::AddCacheToVirtualCM(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, int)",
    ),
    Ok(
        "sim::SimStateArticulated::StoreJointState(float)",
    ),
    Ok(
        "sim::SimStateArticulated::ResetVelocities(void)",
    ),
    Ok(
        "sim::SimStateArticulated::UpdateHasMoved(void)",
    ),
    Ok(
        "sim::SimStateArticulated::GetTransform(int) const",
    ),
    Ok(
        "sim::SimStateArticulated::GetPosition(int) const",
    ),
    Ok(
        "sim::SimStateArticulated::GetVelocity(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, int)",
    ),
    Ok(
        "sim::SimStateArticulated::GetSimulatedObject(int)",
    ),
    Ok(
        "sim::SimStateArticulated::DebugDisplay(int)",
    ),
    Ok(
        "sim::SimStateArticulated::JointState::JointState(void)",
    ),
    Ok(
        "sim::SimStateArticulated::JointState::~JointState(void)",
    ),
    Ok(
        "sim::SimStateArticulated::JointState::SetJoint(poser::Joint *)",
    ),
    Ok(
        "sim::SimStateArticulated::JointState::DebugDisplay(void)",
    ),
    Ok(
        "sim::SimStateArticulated::JointState::StoreJointState(float)",
    ),
    Ok(
        "sim::SimStateArticulated::JointState::GetVelocity(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::SimStateArticulated::JointState::UpdateVelocity(void)",
    ),
    Ok(
        "sim::TList<sim::JointVirtualCM *> type_info function",
    ),
    Ok(
        "sim::SimStateArticulated type_info function",
    ),
    Ok(
        "sim::TList<sim::JointVirtualCM *>::~TList(void)",
    ),
    Ok(
        "sim::SimStateArticulated::RequiresPushTransforForDisplay(void) const",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::ArticulatedPhysicsObject>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::SkeletonInfo>::SafeCast(void)",
    ),
    Ok(
        "sim::SkeletonInfo type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::ArticulatedPhysicsObject> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::SkeletonInfo> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::SkeletonInfo>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::ArticulatedPhysicsObject>::safe_cast(IRefCount *)",
    ),
    Ok(
        "sim::SimTarget::GetTransform(RadicalMathLibrary::Matrix &, float) const",
    ),
    Ok(
        "sim::SimMatrixTarget::GetTransform(RadicalMathLibrary::Matrix &, float) const",
    ),
    Ok(
        "sim::SimJntMatTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
    ),
    Ok(
        "sim::SimJntMatTarget::GetTransform(RadicalMathLibrary::Matrix &, float) const",
    ),
    Ok(
        "sim::SimTarget type_info function",
    ),
    Ok(
        "sim::SimVectorTarget type_info function",
    ),
    Ok(
        "sim::SimMatrixTarget type_info function",
    ),
    Ok(
        "sim::SimJntMatTarget type_info function",
    ),
    Ok(
        "sim::SimTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
    ),
    Ok(
        "sim::SimTarget::GetMassMatrix(sim::SymMatrix &) const",
    ),
    Ok(
        "sim::SimTarget::GetMass(void) const",
    ),
    Ok(
        "sim::SimTarget::GetSpeed(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::SimTarget::~SimTarget(void)",
    ),
    Ok(
        "sim::SimVectorTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
    ),
    Ok(
        "sim::SimVectorTarget::~SimVectorTarget(void)",
    ),
    Ok(
        "sim::SimMatrixTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
    ),
    Ok(
        "sim::SimMatrixTarget::~SimMatrixTarget(void)",
    ),
    Ok(
        "sim::SimJntMatTarget::~SimJntMatTarget(void)",
    ),
    Ok(
        "sim::SimulatedObject::SimulatedObject(sim::PhysicsProperties *)",
    ),
    Ok(
        "sim::SimulatedObject::SimulatedObject(void)",
    ),
    Ok(
        "sim::SimulatedObject::~SimulatedObject(void)",
    ),
    Ok(
        "sim::SimulatedObject::SetPhysicsProperties(sim::PhysicsProperties *)",
    ),
    Ok(
        "sim::SimulatedObject::SetSimEnvironment(sim::SimEnvironment *)",
    ),
    Ok(
        "sim::SimulatedObject::ResolveInterpenetration(int, float &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, bool, sim::SimulatedObject const &)",
    ),
    Ok(
        "sim::SimulatedObject::SetClone(sim::SimulatedObject *, sim::SimState *)",
    ),
    Ok(
        "sim::SimulatedObject type_info function",
    ),
    Ok(
        "sim::SimulatedObject::Update(float)",
    ),
    Ok(
        "sim::SimulatedObject::UpdateForPhysicsProperties(void)",
    ),
    Ok(
        "sim::SimulatedObject::UpdateForSimEnvironment(void)",
    ),
    Ok(
        "sim::SimulatedObject::ResetRestingDetector(void)",
    ),
    Ok(
        "sim::SimulatedObject::GetMinimumLinSpeed(void)",
    ),
    Ok(
        "sim::SimulatedObject::GetMinimumAngSpeed(void)",
    ),
    Ok(
        "sim::SimulatedObject::GetNumSubObj(void) const",
    ),
    Ok(
        "sim::SimulatedObject::InvMass(void) const",
    ),
    Ok(
        "sim::SimulatedObject::AddSolverConstraint(RadicalMathLibrary::Vector const &, int)",
    ),
    Ok(
        "sim::SimulatedObject::SpeedAdjustmentFromCache(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, int)",
    ),
    Ok(
        "sim::SimulatedObject::GetCollisionCache(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, int) const",
    ),
    Ok(
        "sim::SimulatedObject::IsCacheEmpty(int) const",
    ),
    Ok(
        "sim::SimulatedObject::ResetCache(int)",
    ),
    Ok(
        "sim::SimulatedObject::UpdateConstraintTarget(sim::LocalTarget const &, RadicalMathLibrary::Vector *, sim::SimTarget &) const",
    ),
    Ok(
        "sim::SimulatedObject::UpdateConstraint(sim::LocalTarget const &, sim::SimTarget const &, RadicalMathLibrary::Vector const *, float)",
    ),
    Ok(
        "sim::SimulatedObject::AddConstraint(sim::LocalTarget const &)",
    ),
    Ok(
        "sim::SimulatedObject::SetSimState(sim::SimState *)",
    ),
    Ok(
        "sim::InstallSimLoaders(void)",
    ),
    Ok(
        "sim::InitializeSimulation(sim::GeometryUnitsEnum)",
    ),
    Ok(
        "sim::ResetSimulation(void)",
    ),
    Ok(
        "sim::SetupLineDrawing(void)",
    ),
    Ok(
        "sim::CleanupLineDrawing(void)",
    ),
    Ok(
        "sim::tExportInfoLoader::tExportInfoLoader(void)",
    ),
    Ok(
        "sim::tExportInfoLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "sim::tExportInfo type_info function",
    ),
    Ok(
        "sim::tExportInfoLoader::~tExportInfoLoader(void)",
    ),
    Ok(
        "sim::tExportInfoLoader type_info function",
    ),
    Ok(
        "sim::tExportInfo::~tExportInfo(void)",
    ),
    Ok(
        "sim::SimUnitsManager::~SimUnitsManager(void)",
    ),
    Ok(
        "sim::SimUnitsManager::SimUnitsManager(void)",
    ),
    Ok(
        "sim::SimUnitsManager type_info function",
    ),
    Ok(
        "sim::SimUnitsManager::UpdateUnits(void)",
    ),
    Ok(
        "sim::SkeletonInfo::SkeletonInfo(tSkeleton *)",
    ),
    Ok(
        "sim::SkeletonInfo::SetJointAxis(int, RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "sim::SkeletonInfo::SetJointRotAxis(int, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::SkeletonInfo::~SkeletonInfo(void)",
    ),
    Ok(
        "sim::SymMatrix::SymMatrix(void)",
    ),
    Ok(
        "sim::SymMatrix::~SymMatrix(void)",
    ),
    Ok(
        "sim::SymMatrix::Add(sim::SymMatrix const &)",
    ),
    Ok(
        "sim::SymMatrix::Sum(sim::SymMatrix const &, sim::SymMatrix const &)",
    ),
    Ok(
        "sim::SymMatrix::Scale(float)",
    ),
    Ok(
        "sim::SymMatrix::Scale(sim::SymMatrix const &, float)",
    ),
    Ok(
        "sim::SymMatrix::TransformSelf(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "sim::SymMatrix::TransformSelf(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::SymMatrix::TransformVector(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::SymMatrix::Invert(sim::SymMatrix const &)",
    ),
    Ok(
        "sim::SymMatrix::Identity(void)",
    ),
    Ok(
        "sim::SymMatrix::Zero(void)",
    ),
    Ok(
        "sim::SymMatrix type_info function",
    ),
    Ok(
        "sim::VoidPList::VoidPList(int)",
    ),
    Ok(
        "sim::VoidPList::~VoidPList(void)",
    ),
    Ok(
        "sim::VoidPList::Remove(void *)",
    ),
    Ok(
        "sim::VoidPList::Contains(void *) const",
    ),
    Ok(
        "sim::VoidPList::Add(void *)",
    ),
    Ok(
        "sim::VoidPList::Grow(void)",
    ),
    Ok(
        "sim::VoidPList::ResizeArray(int)",
    ),
    Ok(
        "sim::VoidPList::RemoveAll(void)",
    ),
    Ok(
        "sim::VoidPList::RemoveAt(int)",
    ),
    Ok(
        "sim::VoidPList::Set(sim::VoidPList const &)",
    ),
    Ok(
        "sim::VoidPList type_info function",
    ),
    Ok(
        "sim::PhysicsObject::ResetUnitsRelatedValues(void)",
    ),
    Ok(
        "sim::PhysicsObject::PhysicsObject(sim::PhysicsProperties *, RadicalMathLibrary::Vector const &, sim::SymMatrix const &, float)",
    ),
    Ok(
        "sim::PhysicsObject::PhysicsObject(sim::PhysicsProperties *)",
    ),
    Ok(
        "sim::PhysicsObject::~PhysicsObject(void)",
    ),
    Ok(
        "sim::PhysicsObject::Clone(sim::SimState *)",
    ),
    Ok(
        "sim::PhysicsObject::SetClone(sim::PhysicsObject *, sim::SimState *)",
    ),
    Ok(
        "sim::PhysicsObject::SyncSimObj(bool)",
    ),
    Ok(
        "sim::PhysicsObject::SetExternalCMOffset(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsObject::UpdateForSimEnvironment(void)",
    ),
    Ok(
        "sim::PhysicsObject::UpdateForPhysicsProperties(void)",
    ),
    Ok(
        "sim::PhysicsObject::UpdateScale(void)",
    ),
    Ok(
        "sim::PhysicsObject::Update(float)",
    ),
    Ok(
        "sim::PhysicsObject::TestResting(float)",
    ),
    Ok(
        "sim::PhysicsObject::WakeUp(void)",
    ),
    Ok(
        "sim::PhysicsObject::SetCMVelocity(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsObject::AddForce(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const *)",
    ),
    Ok(
        "sim::PhysicsObject::AddTorque(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsObject::SolveAppliedForces(float)",
    ),
    Ok(
        "sim::PhysicsObject::BodyI(void)",
    ),
    Ok(
        "sim::PhysicsObject::ResetAppliedForces(void)",
    ),
    Ok(
        "sim::PhysicsObject::AddImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, sim::SymMatrix const &, sim::SimulatedObject *, int, int)",
    ),
    Ok(
        "sim::PhysicsObject::GetCollisionCache(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, int) const",
    ),
    Ok(
        "sim::PhysicsObject::EndCollision(bool, int, int)",
    ),
    Ok(
        "sim::PhysicsObject::GetMassMatrix(RadicalMathLibrary::Vector const &, sim::SymMatrix &, sim::SimulatedObject *, int, int)",
    ),
    Ok(
        "sim::PhysicsObject::GetKineticEnergy(void) const",
    ),
    Ok(
        "sim::PhysicsObject::UpdateConstraint(sim::LocalTarget const &, sim::SimTarget const &, RadicalMathLibrary::Vector const *, float)",
    ),
    Ok(
        "sim::PhysicsObject::AddConstraint(sim::LocalTarget const &)",
    ),
    Ok(
        "sim::ReadVectorFromPhysicsVectorChunk(tChunkFile *, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::ReadSymMatrixFromPhysicsInertiaMatrixChunk(tChunkFile *, sim::SymMatrix &)",
    ),
    Ok(
        "sim::PhysicsObjectLoader::PhysicsObjectLoader(void)",
    ),
    Ok(
        "sim::PhysicsObjectLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "sim::PhysicsObject type_info function",
    ),
    Ok(
        "sim::PhysicsObjectLoader type_info function",
    ),
    Ok(
        "sim::PhysicsObject::IsAtRest(void) const",
    ),
    Ok(
        "sim::PhysicsObject::ResetRestingDetector(void)",
    ),
    Ok(
        "sim::PhysicsObject::GetMinimumLinSpeed(void)",
    ),
    Ok(
        "sim::PhysicsObject::GetMinimumAngSpeed(void)",
    ),
    Ok(
        "sim::PhysicsObject::StartCollision(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, sim::SimulatedObject const *, int, int)",
    ),
    Ok(
        "sim::PhysicsObject::IsCacheEmpty(int) const",
    ),
    Ok(
        "sim::PhysicsObject::ValidCollision(sim::PhysicsObject const *) const",
    ),
    Ok(
        "sim::PhysicsObject::ResetCache(int)",
    ),
    Ok(
        "sim::PhysicsObject::Mass(void) const",
    ),
    Ok(
        "sim::PhysicsObject::InvMass(void) const",
    ),
    Ok(
        "sim::PhysicsObjectLoader::~PhysicsObjectLoader(void)",
    ),
    Ok(
        "global constructors keyed to sim::PhysicsObject::sSmall_Speed",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::ArticulatedPhysicsObject(sim::PhysicsProperties *, sim::PhysicsJoint **, int)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::~ArticulatedPhysicsObject(void)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::SetPose(poser::Pose *)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::SetSkeletonInfo(sim::SkeletonInfo *)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::InitFromPose(void)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::ComputeJointMasses(void)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::JointAxis(int, RadicalMathLibrary::Vector &, bool) const",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::ConvertToRigidBody(void)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::Clone(sim::SimState *)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::SetClone(sim::ArticulatedPhysicsObject *, sim::SimState *)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::Update(float)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::UpdatePoseMatrix(void)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::UpdateForPhysicsProperties(void)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::ComputeInertiaMatrix(void)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::StartCollision(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, sim::SimulatedObject const *, int, int)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::GetMassMatrix(RadicalMathLibrary::Vector const &, sim::SymMatrix &, sim::SimulatedObject *, int, int)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::SpeedAdjustmentFromCache(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, int)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::AddImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, sim::SymMatrix const &, sim::SimulatedObject *, int, int)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::EndCollision(bool, int, int)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::GetCollisionCache(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, int) const",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::IsCacheEmpty(int) const",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::ResetCache(int)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::StartHandlingCollision(sim::SimulatedObject const *, int, int)",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject type_info function",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject::UpdateScale(void)",
    ),
    Ok(
        "sim::PhysicsJoint::CreatePhysicsJoint(int, RadicalMathLibrary::Vector const &, float, int)",
    ),
    Ok(
        "sim::PhysicsJoint::PhysicsJoint(RadicalMathLibrary::Vector const &, float, int)",
    ),
    Ok(
        "sim::PhysicsJoint::~PhysicsJoint(void)",
    ),
    Ok(
        "sim::PhysicsJoint::SetInertiaMatrix(sim::SymMatrix const &)",
    ),
    Ok(
        "sim::PhysicsJoint::SetConstraintAngles(float, float)",
    ),
    Ok(
        "sim::PhysicsJoint::SetParentObject(sim::ArticulatedPhysicsObject *)",
    ),
    Ok(
        "sim::PhysicsJoint::UpdateForPhysicsProperties(void)",
    ),
    Ok(
        "sim::PhysicsJoint::SetTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "sim::PhysicsJoint::SetClone(sim::PhysicsJoint *)",
    ),
    Ok(
        "sim::PhysicsJoint::ComputeAbsorptionFactor(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint::GetMassMatrix(RadicalMathLibrary::Vector const &, sim::SymMatrix &)",
    ),
    Ok(
        "sim::PhysicsJoint::AddImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, sim::SymMatrix const &)",
    ),
    Ok(
        "sim::PhysicsJoint::StartIncludeCache(void)",
    ),
    Ok(
        "sim::PhysicsJoint::IncludeCache(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector)",
    ),
    Ok(
        "sim::PhysicsJoint::IncludeCacheReaction(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, bool)",
    ),
    Ok(
        "sim::PhysicsJoint::IsParentOf(sim::PhysicsJoint *)",
    ),
    Ok(
        "sim::PhysicsJoint::JointAngle(bool, float &)",
    ),
    Ok(
        "sim::PhysicsJoint::TryAddValue(float, float, float, float)",
    ),
    Ok(
        "sim::PhysicsJoint::OriginSpeed(void) const",
    ),
    Ok(
        "sim::PhysicsJoint0D::PhysicsJoint0D(RadicalMathLibrary::Vector const &, float, int)",
    ),
    Ok(
        "sim::PhysicsJoint0D::~PhysicsJoint0D(void)",
    ),
    Ok(
        "sim::PhysicsJoint0D::Clone(void)",
    ),
    Ok(
        "sim::PhysicsJoint::UpdateMatrix(RadicalMathLibrary::Matrix &)",
    ),
    Ok(
        "sim::PhysicsJoint1D::PhysicsJoint1D(RadicalMathLibrary::Vector const &, float, int)",
    ),
    Ok(
        "sim::PhysicsJoint1D::~PhysicsJoint1D(void)",
    ),
    Ok(
        "sim::PhysicsJoint1D::Clone(void)",
    ),
    Ok(
        "sim::PhysicsJoint1D::SetConstraintAngles(float, float)",
    ),
    Ok(
        "sim::PhysicsJoint1D::SetTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "sim::PhysicsJoint1D::UpdateDeformation(float, float, float)",
    ),
    Ok(
        "sim::PhysicsJoint1D::UpdateInertialDeformation(float, float, float, float, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "sim::PhysicsJoint1D::ImpulseReaction(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::PhysicsJoint1D::TestJointAngle(void)",
    ),
    Ok(
        "sim::PhysicsJoint1D::ComputeAbsorbedImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::PhysicsJoint1D::VelocityProjection(RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint1D::TryAddDeformationSpeed(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint1D::TryAddDeformationSpeed(float)",
    ),
    Ok(
        "sim::PhysicsJoint1D::TryFixOverFlow(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint1D::ComputeJointAngle(void)",
    ),
    Ok(
        "sim::PhysicsJoint3D::PhysicsJoint3D(RadicalMathLibrary::Vector const &, float, int)",
    ),
    Ok(
        "sim::PhysicsJoint3D::~PhysicsJoint3D(void)",
    ),
    Ok(
        "sim::PhysicsJoint3D::Clone(void)",
    ),
    Ok(
        "sim::PhysicsJoint3D::SetConstraintAngles(float, float)",
    ),
    Ok(
        "sim::PhysicsJoint3D::SetTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "sim::PhysicsJoint3D::UpdateDeformation(float, float, float)",
    ),
    Ok(
        "sim::PhysicsJoint3D::UpdateInertialDeformation(float, float, float, float, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "sim::PhysicsJoint3D::ImpulseReaction(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::PhysicsJoint3D::VelocityProjection(RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint3D::TestJointAngle(void)",
    ),
    Ok(
        "sim::PhysicsJoint3D::TryAddDeformationSpeed(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint3D::TryFixOverFlow(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint3D::ComputeJointAngle(void)",
    ),
    Ok(
        "sim::TList<sim::PhysicsJoint *> type_info function",
    ),
    Ok(
        "sim::PhysicsJoint type_info function",
    ),
    Ok(
        "sim::PhysicsJoint0D type_info function",
    ),
    Ok(
        "sim::PhysicsJoint1D type_info function",
    ),
    Ok(
        "sim::PhysicsJoint3D type_info function",
    ),
    Ok(
        "sim::TList<sim::PhysicsJoint *>::~TList(void)",
    ),
    Ok(
        "sim::PhysicsJoint::Mass(void) const",
    ),
    Ok(
        "sim::PhysicsJoint::InvMass(void) const",
    ),
    Ok(
        "sim::PhysicsJoint0D::operator=(sim::PhysicsJoint0D const &)",
    ),
    Ok(
        "sim::PhysicsJoint0D::ResetDeformationSpeed(void)",
    ),
    Ok(
        "sim::PhysicsJoint0D::ResetCache(void)",
    ),
    Ok(
        "sim::PhysicsJoint0D::ResetDeformation(void)",
    ),
    Ok(
        "sim::PhysicsJoint0D::DeformationEmpty(void) const",
    ),
    Ok(
        "sim::PhysicsJoint0D::Deformation(void) const",
    ),
    Ok(
        "sim::PhysicsJoint0D::Deformation(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint0D::UpdateDeformation(float, float, float)",
    ),
    Ok(
        "sim::PhysicsJoint0D::UpdateInertialDeformation(float, float, float, float, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "sim::PhysicsJoint0D::SetCache(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint0D::ComputeAbsorbedImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::PhysicsJoint0D::TryAddDeformationSpeed(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint0D::TryFixOverFlow(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint0D::GetRotAxis(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint0D::PerpAxisProjection(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint0D::VelocityProjection(RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint0D::GetCache(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint0D::AddCacheToDeformationSpeed(void)",
    ),
    Ok(
        "sim::PhysicsJoint0D::AddToDeformationSpeed(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint0D::TestJointAngle(void)",
    ),
    Ok(
        "sim::PhysicsJoint0D::ImpulseReaction(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::PhysicsJoint1D::operator=(sim::PhysicsJoint1D const &)",
    ),
    Ok(
        "sim::PhysicsJoint1D::ResetDeformationSpeed(void)",
    ),
    Ok(
        "sim::PhysicsJoint1D::ResetDeformation(void)",
    ),
    Ok(
        "sim::PhysicsJoint1D::ResetCache(void)",
    ),
    Ok(
        "sim::PhysicsJoint1D::DeformationEmpty(void) const",
    ),
    Ok(
        "sim::PhysicsJoint1D::Deformation(void) const",
    ),
    Ok(
        "sim::PhysicsJoint1D::Deformation(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint1D::GetRotAxis(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint1D::PerpAxisProjection(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint1D::SetCache(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint1D::GetCache(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint1D::AddCacheToDeformationSpeed(void)",
    ),
    Ok(
        "sim::PhysicsJoint1D::AddToDeformationSpeed(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint3D::operator=(sim::PhysicsJoint3D const &)",
    ),
    Ok(
        "sim::PhysicsJoint3D::ResetDeformationSpeed(void)",
    ),
    Ok(
        "sim::PhysicsJoint3D::ResetDeformation(void)",
    ),
    Ok(
        "sim::PhysicsJoint3D::ResetCache(void)",
    ),
    Ok(
        "sim::PhysicsJoint3D::DeformationEmpty(void) const",
    ),
    Ok(
        "sim::PhysicsJoint3D::Deformation(void) const",
    ),
    Ok(
        "sim::PhysicsJoint3D::Deformation(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint3D::GetRotAxis(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint3D::PerpAxisProjection(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint3D::SetCache(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint3D::ComputeAbsorbedImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::PhysicsJoint3D::GetCache(RadicalMathLibrary::Vector &) const",
    ),
    Ok(
        "sim::PhysicsJoint3D::AddCacheToDeformationSpeed(void)",
    ),
    Ok(
        "sim::PhysicsJoint3D::AddToDeformationSpeed(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::PhysicsJoint::operator=(sim::PhysicsJoint const &)",
    ),
    Ok(
        "global constructors keyed to sim::PhysicsJoint::CreatePhysicsJoint(int, RadicalMathLibrary::Vector const &, float, int)",
    ),
    Ok(
        "sim::VirtualCM::VirtualCM(unsigned int)",
    ),
    Ok(
        "sim::VirtualCM::InitLinear(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::VirtualCM::InitAngular(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::VirtualCM::Update(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "sim::VirtualCM::PrintOut(float) const",
    ),
    Ok(
        "sim::VirtualCM::AddObjectCache(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::VirtualCM::DebugDisplay(void) const",
    ),
    Ok(
        "sim::JointVirtualCM::PrintOut(float) const",
    ),
    Ok(
        "sim::VirtualCM type_info function",
    ),
    Ok(
        "sim::JointVirtualCM::~JointVirtualCM(void)",
    ),
    Ok(
        "sim::JointVirtualCM type_info function",
    ),
    Ok(
        "sim::VirtualCM::~VirtualCM(void)",
    ),
    Ok(
        "sim::PhysicsRestingDetector::PhysicsRestingDetector(void)",
    ),
    Ok(
        "sim::PhysicsRestingDetector::~PhysicsRestingDetector(void)",
    ),
    Ok(
        "sim::PhysicsRestingDetector::SetObj(sim::PhysicsObject const *)",
    ),
    Ok(
        "sim::PhysicsRestingDetector::UpdateRestingCondition(float)",
    ),
    Ok(
        "sim::PhysicsRestingDetector::TestRestingCondition(float)",
    ),
    Ok(
        "sim::PhysicsRestingDetector::ResetRestingCondition(void)",
    ),
    Ok(
        "sim::PhysicsRestingDetector::ComputeTypicalValues(float)",
    ),
    Ok(
        "sim::SimpleFilterAbs3D::SimpleFilterAbs3D(void)",
    ),
    Ok(
        "sim::CollisionAnalyser::~CollisionAnalyser(void)",
    ),
    Ok(
        "sim::CollisionAnalyser::StartSolvingCollisionList(sim::TArray<sim::Collision> *, float)",
    ),
    Ok(
        "sim::CollisionAnalyser::EndSolvingCollisionList(sim::TArray<sim::Collision> *, float)",
    ),
    Ok(
        "sim::CollisionAnalyser::PreCollisionEvent(sim::Collision &, int)",
    ),
    Ok(
        "sim::CollisionAnalyser::CollisionEvent(sim::SimState *, int, sim::SimState *, int, RadicalMathLibrary::Vector const &, float, float)",
    ),
    Ok(
        "sim::CollisionAnalyser::CreateNewDataIndex(void)",
    ),
    Ok(
        "sim::CollisionAnalyser::CreateNewData(void)",
    ),
    Ok(
        "sim::CollisionAnalyser::GetData(sim::CollisionAnalyserDataUID const &)",
    ),
    Ok(
        "sim::CollisionAnalyser::CleanCollisionDataList(void)",
    ),
    Ok(
        "sim::CollisionAnalyser::CalculateStateCollisionDataList(void)",
    ),
    Ok(
        "sim::CollisionAnalyser::NotifyShutdown(void)",
    ),
    Ok(
        "sim::CollisionAnalyser::Update(float)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserData *>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserData *>::Grow(void)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserData *>::Add(sim::CollisionAnalyserData *const &)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserDataIndex>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserDataIndex>::Grow(void)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserDataIndex>::NewElem(void)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserData *>::RemoveAt(int)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserData>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserData>::Grow(void)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserData>::NewElem(void)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserDataIndex>::RemoveAt(int)",
    ),
    Ok(
        "sim::CollisionAnalyser type_info function",
    ),
    Ok(
        "sim::CollisionAnalyserData::CollisionAnalyserData(void)",
    ),
    Ok(
        "sim::CollisionAnalyserData::operator=(sim::CollisionAnalyserData const &)",
    ),
    Ok(
        "sim::CollisionAnalyserData::~CollisionAnalyserData(void)",
    ),
    Ok(
        "sim::CollisionAnalyserData::Init(sim::SimState *, int, sim::SimState *, int, int)",
    ),
    Ok(
        "sim::CollisionAnalyserData::CalculateState(void)",
    ),
    Ok(
        "sim::CollisionAnalyserData::Processed(void)",
    ),
    Ok(
        "sim::CollisionAnalyserData::AddEvent(sim::CollisionAnalyserEventEnum, sim::CollisionAnalyserInfo &)",
    ),
    Ok(
        "sim::CollisionAnalyserData::NotifyShutdown(void)",
    ),
    Ok(
        "sim::CollisionAnalyserData::ReadyToTerminate(void)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserEvent>::ResizeArray(int)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserEvent>::Grow(void)",
    ),
    Ok(
        "sim::TArray<sim::CollisionAnalyserEvent>::Add(sim::CollisionAnalyserEvent const &)",
    ),
    Ok(
        "sim::CollisionAnalyserEvent::operator=(sim::CollisionAnalyserEvent const &)",
    ),
    Ok(
        "sim::CollisionAnalyserInfo::CollisionAnalyserInfo(void)",
    ),
    Ok(
        "sim::CollisionAnalyserInfo::CollisionAnalyserInfo(sim::CollisionAnalyserInfo const &)",
    ),
    Ok(
        "sim::CollisionDetector::CollisionDetector(void)",
    ),
    Ok(
        "sim::CollisionDetector::~CollisionDetector(void)",
    ),
    Ok(
        "sim::CollisionDetector::DetectCollision(sim::TArray<sim::CollisionObjectPair> *, sim::TArray<sim::Collision> *, float, bool)",
    ),
    Ok(
        "sim::CollisionDetector::DetectCollision(bool)",
    ),
    Ok(
        "sim::CollisionDetector::DetectCollision(sim::CollisionVolume *, sim::CollisionVolume *, sim::TArray<sim::Collision> *)",
    ),
    Ok(
        "sim::CollisionDetector::DetectCollision(sim::CollisionVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionDetector::DetectColl(sim::CollisionVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionDetector::DetectColl(sim::WallVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionDetector::DetectColl(sim::OBBoxVolume *, sim::OBBoxVolume *)",
    ),
    Ok(
        "sim::CollisionDetector::DetectColl(sim::OBBoxVolume *, sim::CylinderVolume *)",
    ),
    Ok(
        "sim::CollisionDetector::DetectBSColl(sim::OBBoxVolume *, sim::CollisionVolume *, float)",
    ),
    Ok(
        "sim::CollisionDetector::DetectColl(sim::CylinderVolume *, sim::CylinderVolume *)",
    ),
    Ok(
        "sim::CollisionDetector::DetectCSColl(sim::CylinderVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionDetector::DetectSSColl(sim::CollisionVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionDetector::DetectOnSubVolume(sim::CollisionVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionDetector::CollTestInit(sim::CollisionVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::SphereDistance(sim::CollisionVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::WallDistance(sim::WallVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::StaticOBBoxDistance(sim::OBBoxVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::StaticCylinderDistance(sim::CylinderVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionDetector::DetectProximity(sim::CollisionObjectPair *)",
    ),
    Ok(
        "sim::CollisionDetector::EstimateTimeNextTestForStaticObject(sim::CollisionObjectPair *, sim::CollisionVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::CollisionDetector::EstimateTimeNextTest(sim::CollisionObjectPair *, float)",
    ),
    Ok(
        "sim::CollisionDetector type_info function",
    ),
    Ok(
        "sim::SubCollisionDetector::SubCollisionDetector(void)",
    ),
    Ok(
        "sim::SubCollisionDetector::~SubCollisionDetector(void)",
    ),
    Ok(
        "sim::SubCollisionDetector::OBBoxV(sim::OBBoxVolume *, sim::OBBoxVolume *)",
    ),
    Ok(
        "sim::SubCollisionDetector::OBBoxBorderCollMove(sim::OBBoxVolume *, RadicalMathLibrary::Vector &, float, float, int)",
    ),
    Ok(
        "sim::SubCollisionDetector::OBBoxEE(sim::OBBoxVolume *, sim::OBBoxVolume *)",
    ),
    Ok(
        "sim::SubCollisionDetector::OBBoxSepPlane(sim::OBBoxVolume *, sim::OBBoxVolume *)",
    ),
    Ok(
        "sim::SubCollisionDetector::EdgeEdge(bool &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, float, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, float, RadicalMathLibrary::Vector &, float, float, sim::CollisionVolume *, sim::CollisionVolume *)",
    ),
    Ok(
        "sim::SubCollisionDetector::PointBoxColl(sim::OBBoxVolume *, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, float &, float, bool)",
    ),
    Ok(
        "sim::SubCollisionDetector::FindFaceIndexOrder(int *, float, float, float) const",
    ),
    Ok(
        "sim::SubCollisionDetector::FindSizeOrder4(int *, float *) const",
    ),
    Ok(
        "sim::SubCollisionDetector::OBBoxCylF(sim::OBBoxVolume *, sim::CylinderVolume *)",
    ),
    Ok(
        "sim::SubCollisionDetector::OBBoxCylV(sim::OBBoxVolume *, sim::CylinderVolume *)",
    ),
    Ok(
        "sim::SubCollisionDetector::OBBoxCylEE(sim::OBBoxVolume *, sim::CylinderVolume *)",
    ),
    Ok(
        "sim::SubCollisionDetector::OBBoxCylEC(sim::OBBoxVolume *, sim::CylinderVolume *)",
    ),
    Ok(
        "sim::SubCollisionDetector::CircleEdge(sim::CollisionVolume *, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, float, sim::CylinderVolume *, float, float, bool)",
    ),
    Ok(
        "sim::SubCollisionDetector::BoxSphereColl(sim::OBBoxVolume *, sim::CollisionVolume *, RadicalMathLibrary::Vector &, float)",
    ),
    Ok(
        "sim::SubCollisionDetector::CylCylEnd(sim::CylinderVolume *, sim::CylinderVolume *, bool, bool)",
    ),
    Ok(
        "sim::computeEdge(sim::CylinderVolume *, sim::CylinderVolume *, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::SubCollisionDetector::CylCylSphereEndSpecialFilter(float)",
    ),
    Ok(
        "sim::SubCollisionDetector::CylCylSphereEnd(sim::CylinderVolume *, sim::CylinderVolume *)",
    ),
    Ok(
        "sim::SubCollisionDetector::CircleCyl(sim::CylinderVolume *, sim::CylinderVolume *)",
    ),
    Ok(
        "sim::SubCollisionDetector::CylSphereColl(sim::CylinderVolume *, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector &, float &, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, bool)",
    ),
    Ok(
        "sim::SubCollisionDetector::PlanePlaneIntersection(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, bool)",
    ),
    Ok(
        "sim::SubCollisionDetector::CircleCircleIntersection(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, bool, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
    ),
    Ok(
        "sim::SubCollisionDetector::AddCollision(sim::CollisionVolume *, RadicalMathLibrary::Vector const &, sim::CollisionVolume *, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "sim::SubCollisionDetector::SetCollisionList(sim::TArray<sim::Collision> &)",
    ),
    Ok(
        "sim::TArray<sim::Collision>::RemoveAt(int)",
    ),
    Ok(
        "sim::SubCollisionDetector type_info function",
    ),
    Ok(
        "sim::SimpleFilter1D::SimpleFilter1D(void)",
    ),
    Ok(
        "sim::SimpleFilter1D::Init(float, float, float)",
    ),
    Ok(
        "sim::SimpleFilter1D::Estimate(float, float)",
    ),
    Ok(
        "sim::SimpleFilter3D::SimpleFilter3D(void)",
    ),
    Ok(
        "sim::SimpleFilter3D::Init(RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector const *)",
    ),
    Ok(
        "sim::SimpleFilter3D::Estimate(RadicalMathLibrary::Vector const *, float)",
    ),
    Ok(
        "sim::SimpleFilterAbs3D::Init(RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector const *)",
    ),
    Ok(
        "sim::SimpleFilterAbs3D::Estimate(RadicalMathLibrary::Vector const *, float)",
    ),
    Ok(
        "sim::Kalmann1D::Init(float, float, float)",
    ),
    Ok(
        "sim::Kalmann1D::Estimate(float, float)",
    ),
    Ok(
        "sim::DoubleKalmann1D::Init(float, float, float)",
    ),
    Ok(
        "sim::DoubleKalmann1D::Estimate(float, float)",
    ),
    Ok(
        "sim::SimpleFilter1D type_info function",
    ),
    Ok(
        "sim::SimpleFilter3D type_info function",
    ),
    Ok(
        "sim::SimpleFilterAbs3D type_info function",
    ),
    Ok(
        "sim::Kalmann1D type_info function",
    ),
    Ok(
        "sim::DoubleKalmann1D type_info function",
    ),
    Ok(
        "sim::SimpleFilter1D::GetEstimate(void) const",
    ),
    Ok(
        "sim::SimpleFilter3D::GetEstimate(void) const",
    ),
    Ok(
        "sim::Kalmann1D::GetEstimate(void) const",
    ),
    Ok(
        "sim::DoubleKalmann1D::GetEstimate(void) const",
    ),
    Ok(
        "sim::Filter1D type_info function",
    ),
    Ok(
        "sim::Filter3D type_info function",
    ),
    Ok(
        "poser::Joint::Joint(void)",
    ),
    Ok(
        "poser::Joint::~Joint(void)",
    ),
    Ok(
        "poser::Joint::SetChildJointCount(int)",
    ),
    Ok(
        "poser::Joint::SetChildJointMem(poser::Joint **)",
    ),
    Ok(
        "poser::Joint::AddChildJoint(poser::Joint *)",
    ),
    Ok(
        "poser::Joint::GetObjectTransform(void) const",
    ),
    Ok(
        "poser::Joint::SetObjectTransform(poser::Transform const &)",
    ),
    Ok(
        "poser::Joint::SetObjectMatrix(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "poser::Joint::SetObjectMatrixRotation(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "poser::Joint::SetObjectTranslation(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "poser::Joint::SetObjectQuaternion(RadicalMathLibrary::Quaternion const &)",
    ),
    Ok(
        "poser::Joint::GetWorldTransform(void) const",
    ),
    Ok(
        "poser::Joint::SetWorldTransform(poser::Transform const &)",
    ),
    Ok(
        "poser::Joint::NotifyWorldModified(void) const",
    ),
    Ok(
        "poser::Joint::ParentWorldModified(void)",
    ),
    Ok(
        "poser::Joint::SetWorldMatrix(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "poser::Joint::SetWorldTranslation(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "poser::Joint::Clean(void)",
    ),
    Ok(
        "poser::Pose::Pose(tPose *)",
    ),
    Ok(
        "poser::Pose::~Pose(void)",
    ),
    Ok(
        "poser::Pose::Assign(tPose *)",
    ),
    Ok(
        "poser::Pose::GetJointCount(void) const",
    ),
    Ok(
        "poser::Pose::SetRestPose(void)",
    ),
    Ok(
        "poser::Pose::FillP3DPose(tPose *, bool) const",
    ),
    Ok(
        "poser::Pose::Clean(void)",
    ),
    Ok(
        "poser::Pose type_info function",
    ),
    Ok(
        "poser::PoseDriver::PoseDriver(void)",
    ),
    Ok(
        "poser::PoseDriver::~PoseDriver(void)",
    ),
    Ok(
        "poser::PoseDriver type_info function",
    ),
    Ok(
        "poser::PoseDriver::GetMinimumJointIndex(void) const",
    ),
    Ok(
        "poser::PoseDriver::GetPriority(void) const",
    ),
    Ok(
        "poser::PoseDriver::SetIsEnabled(bool)",
    ),
    Ok(
        "poser::PoseEngine::PoseEngine(tPose *, int, int)",
    ),
    Ok(
        "poser::PoseEngine::~PoseEngine(void)",
    ),
    Ok(
        "poser::PoseEngine::GetPoseDriverIndex(int, poser::PoseDriver *) const",
    ),
    Ok(
        "poser::PoseEngine::AddPoseDriver(int, poser::PoseDriver *)",
    ),
    Ok(
        "poser::PoseEngine::RemovePoseDriver(int, int)",
    ),
    Ok(
        "poser::PoseEngine::RemovePoseDriver(int, poser::PoseDriver *)",
    ),
    Ok(
        "poser::PoseEngine::Begin(bool)",
    ),
    Ok(
        "poser::PoseEngine::Advance(int, float)",
    ),
    Ok(
        "poser::PoseEngine::Update(int)",
    ),
    Ok(
        "poser::PoseEngine::End(void)",
    ),
    Ok(
        "poser::PoseEngine type_info function",
    ),
    Ok(
        "poser::Transform::Transform(void)",
    ),
    Ok(
        "poser::Transform::Transform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "poser::Transform::Identity(void)",
    ),
    Ok(
        "poser::Transform::SetMatrix(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "poser::Transform::SetMatrixRotation(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "poser::Transform::GetQuaternion(void) const",
    ),
    Ok(
        "poser::Transform::SetQuaternion(RadicalMathLibrary::Quaternion const &)",
    ),
    Ok(
        "poser::Transform::Blend(float, poser::Transform const &)",
    ),
    Ok(
        "poser::Transform::Invert(void)",
    ),
    Ok(
        "FeProjectFileHandler::FeProjectFileHandler(void)",
    ),
    Ok(
        "FeProjectFileHandler::~FeProjectFileHandler(void)",
    ),
    Ok(
        "FeProjectFileHandler::CheckExtension(char *)",
    ),
    Ok(
        "FeProjectFileHandler::Load(tFile *, tEntityStore *)",
    ),
    Ok(
        "FeProjectFileHandler::LoadProject(XMLTree *)",
    ),
    Ok(
        "FeProjectFileHandler::LoadScreen(XMLTree *)",
    ),
    Ok(
        "FeProjectFileHandler::LoadPage(XMLTree *)",
    ),
    Ok(
        "FeProjectFileHandler::LoadTextStyle(XMLTree *)",
    ),
    Ok(
        "FeProjectFileHandler::ParsePageResources(XMLTree *, FePage *)",
    ),
    Ok(
        "FeProjectFileHandler::ParseDrawables(XMLTree *, FeOwner *)",
    ),
    Ok(
        "FeProjectFileHandler::ParseGroup(XMLTree *, FeOwner *)",
    ),
    Ok(
        "FeProjectFileHandler::ParseMovie(XMLTree *, FeOwner *)",
    ),
    Ok(
        "FeProjectFileHandler::ParsePolygon(XMLTree *, FeOwner *)",
    ),
    Ok(
        "FeProjectFileHandler::ParsePure3dObject(XMLTree *, FeOwner *)",
    ),
    Ok(
        "FeProjectFileHandler::ParseSprite(XMLTree *, FeOwner *)",
    ),
    Ok(
        "FeProjectFileHandler::ParseText(XMLTree *, FeOwner *)",
    ),
    Ok(
        "FeTextBibleLoader::FeTextBibleLoader(void)",
    ),
    Ok(
        "FeTextBibleLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "FeTextBibleLoader::LoadLanguage(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "FeProjectFileHandler type_info function",
    ),
    Ok(
        "FeTextBibleLoader::~FeTextBibleLoader(void)",
    ),
    Ok(
        "FeTextBibleLoader type_info function",
    ),
    Ok(
        "FePage::FePage(int, char const *, FeProject *)",
    ),
    Ok(
        "FePage::~FePage(void)",
    ),
    Ok(
        "FePage::GetBoundingBoxSize(int &, int &) const",
    ),
    Ok(
        "FePage::GetBoundingBox(int &, int &, int &, int &) const",
    ),
    Ok(
        "FePage::Display(void)",
    ),
    Ok(
        "FePage::GetGroup(tUidUnaligned)",
    ),
    Ok(
        "FePage::GetGroup(char const *)",
    ),
    Ok(
        "FePage::GetPolygon(tUidUnaligned)",
    ),
    Ok(
        "FePage::GetPolygon(char const *)",
    ),
    Ok(
        "FePage::GetLayer(tUidUnaligned)",
    ),
    Ok(
        "FePage::GetLayer(char const *)",
    ),
    Ok(
        "FePage::GetLayerByIndex(int)",
    ),
    Ok(
        "FePage::GetMovie(tUidUnaligned)",
    ),
    Ok(
        "FePage::GetMovie(char const *)",
    ),
    Ok(
        "FePage::GetNumberOfLayers(void) const",
    ),
    Ok(
        "FePage::GetPure3dObject(tUidUnaligned)",
    ),
    Ok(
        "FePage::GetPure3dObject(char const *)",
    ),
    Ok(
        "FePage::IsPage(void) const",
    ),
    Ok(
        "FePage::SetAlpha(float)",
    ),
    Ok(
        "rVector<int> type_info function",
    ),
    Ok(
        "FePage type_info function",
    ),
    Ok(
        "Scrooby::Layer type_info function",
    ),
    Ok(
        "Scrooby::Drawable::Drawable(void)",
    ),
    Ok(
        "Scrooby::Owner::Owner(void)",
    ),
    Ok(
        "Scrooby::Page::Page(int)",
    ),
    Ok(
        "rVector<int>::~rVector(void)",
    ),
    Ok(
        "Scrooby::Owner type_info function",
    ),
    Ok(
        "Scrooby::Page type_info function",
    ),
    Ok(
        "FeParent::FeParent(int)",
    ),
    Ok(
        "FeParent::~FeParent(void)",
    ),
    Ok(
        "FeParent::ResetIter(void) const",
    ),
    Ok(
        "FeParent::AddChild(FeEntity *)",
    ),
    Ok(
        "FeParent::RemoveChild(FeEntity *)",
    ),
    Ok(
        "FeParent::ReplaceChild(FeEntity *, FeEntity *)",
    ),
    Ok(
        "FeParent::Resize(unsigned int)",
    ),
    Ok(
        "FeParent::GetChild(char const *)",
    ),
    Ok(
        "FeParent::GetChild(tUidUnaligned)",
    ),
    Ok(
        "FeParent::GetChildIndex(int)",
    ),
    Ok(
        "FeParent::GetChildIndex(int) const",
    ),
    Ok(
        "FeParent::GetChildDrawable(unsigned int)",
    ),
    Ok(
        "FeParent::GetChildrenCount(void) const",
    ),
    Ok(
        "FeParent::GetGroup(char const *)",
    ),
    Ok(
        "FeParent::GetGroup(tUidUnaligned)",
    ),
    Ok(
        "FeParent::GetLayer(char const *)",
    ),
    Ok(
        "FeParent::GetLayer(tUidUnaligned)",
    ),
    Ok(
        "FeParent::GetPolygon(char const *)",
    ),
    Ok(
        "FeParent::GetPolygon(tUidUnaligned)",
    ),
    Ok(
        "FeParent::GetSprite(char const *)",
    ),
    Ok(
        "FeParent::GetSprite(tUidUnaligned)",
    ),
    Ok(
        "FeParent::GetText(char const *)",
    ),
    Ok(
        "FeParent::GetText(tUidUnaligned)",
    ),
    Ok(
        "FeParent::GetMovie(char const *)",
    ),
    Ok(
        "FeParent::GetMovie(tUidUnaligned)",
    ),
    Ok(
        "FeParent::GetPure3dObject(char const *)",
    ),
    Ok(
        "FeParent::GetPure3dObject(tUidUnaligned)",
    ),
    Ok(
        "FeParent::Size(void) const",
    ),
    Ok(
        "FeParent type_info function",
    ),
    Ok(
        "Scrooby::Polygon type_info function",
    ),
    Ok(
        "FePolygon::FePolygon(int, tName const &)",
    ),
    Ok(
        "FePolygon::~FePolygon(void)",
    ),
    Ok(
        "FePolygon::Reset(void)",
    ),
    Ok(
        "FePolygon::SetNumVertex(int)",
    ),
    Ok(
        "FePolygon::SetVertexLocation(int, int, int)",
    ),
    Ok(
        "FePolygon::SetVertexColour(int, int, int, int)",
    ),
    Ok(
        "FePolygon::SetVertexColour(unsigned int, pddiColour)",
    ),
    Ok(
        "FePolygon::SetVertexAlpha(int, float)",
    ),
    Ok(
        "FePolygon::GetBoundingBox(int &, int &, int &, int &) const",
    ),
    Ok(
        "FePolygon::GetBoundingBoxSize(int &, int &) const",
    ),
    Ok(
        "FePolygon::GetNumOfVertexes(void)",
    ),
    Ok(
        "FePolygon::GetVertexAlpha(int) const",
    ),
    Ok(
        "FePolygon::GetVertexColour(int) const",
    ),
    Ok(
        "FePolygon::GetVertexLocation(int, int &, int &) const",
    ),
    Ok(
        "FePolygon::Display(void)",
    ),
    Ok(
        "FePolygon::RecalculateDisplayColour(int)",
    ),
    Ok(
        "FePolygon::SetAlpha(float)",
    ),
    Ok(
        "FePolygon::SetColour(pddiColour)",
    ),
    Ok(
        "FePolygon type_info function",
    ),
    Ok(
        "Scrooby::Polygon::Polygon(int)",
    ),
    Ok(
        "FeProject::FeProject(int, char const *)",
    ),
    Ok(
        "FeProject::~FeProject(void)",
    ),
    Ok(
        "FeProject::GetCurrentScreen(void)",
    ),
    Ok(
        "FeProject::GetScreenCount(void)",
    ),
    Ok(
        "FeProject::GotoScreenByIndex(int, Scrooby::GotoScreenCallback *)",
    ),
    Ok(
        "FeProject::GotoScreen(char const *, Scrooby::GotoScreenCallback *)",
    ),
    Ok(
        "FeProject::GotoScreen(tUidUnaligned, Scrooby::GotoScreenCallback *)",
    ),
    Ok(
        "FeProject::GotoScreen(Scrooby::Screen *, Scrooby::GotoScreenCallback *)",
    ),
    Ok(
        "FeProject::SetScreenPath(char const *)",
    ),
    Ok(
        "FeProject::SetPagePath(char const *)",
    ),
    Ok(
        "FeProject::SetResPath(char const *)",
    ),
    Ok(
        "FeProject::LoadScreen(Scrooby::Screen *, Scrooby::GotoScreenCallback *)",
    ),
    Ok(
        "FeProject::UnLoadScreen(Scrooby::Screen *)",
    ),
    Ok(
        "FeProject::IsScreenLoaded(Scrooby::Screen *)",
    ),
    Ok(
        "FeProject::GetScreen(char const *)",
    ),
    Ok(
        "FeProject::GetScreen(tUidUnaligned)",
    ),
    Ok(
        "FeProject::SetScreenRes(float, float)",
    ),
    Ok(
        "FeProject::GetScreenWidth(void)",
    ),
    Ok(
        "FeProject::GetScreenHeight(void)",
    ),
    Ok(
        "FeProject::OnResourceLoadComplete(void)",
    ),
    Ok(
        "Scrooby::ResourceManagerCallback type_info function",
    ),
    Ok(
        "FeProject type_info function",
    ),
    Ok(
        "Scrooby::Screen type_info function",
    ),
    Ok(
        "Scrooby::Project::Project(void)",
    ),
    Ok(
        "Scrooby::ResourceManagerCallback::ResourceManagerCallback(void)",
    ),
    Ok(
        "Scrooby::ResourceManagerCallback::~ResourceManagerCallback(void)",
    ),
    Ok(
        "FeProject::IsDrawable(void)",
    ),
    Ok(
        "FeProject::IsLoadingScreens(void) const",
    ),
    Ok(
        "Scrooby::Project type_info function",
    ),
    Ok(
        "FePure3dObject::FePure3dObject(int, tName const &, int, int)",
    ),
    Ok(
        "FePure3dObject::~FePure3dObject(void)",
    ),
    Ok(
        "FePure3dObject::Reset(void)",
    ),
    Ok(
        "FePure3dObject::Update(float)",
    ),
    Ok(
        "FePure3dObject::Display(void)",
    ),
    Ok(
        "FePure3dObject::Add3dModel(char const *)",
    ),
    Ok(
        "FePure3dObject::SetCamera(tCamera *)",
    ),
    Ok(
        "FePure3dObject::GetCamera(void)",
    ),
    Ok(
        "FePure3dObject::GetMultiController(void)",
    ),
    Ok(
        "FePure3dObject::AdvanceAnimation(float)",
    ),
    Ok(
        "FePure3dObject::Render(void)",
    ),
    Ok(
        "FePure3dObject::GetMatrix(void)",
    ),
    Ok(
        "FePure3dObject::GetMatrix(void) const",
    ),
    Ok(
        "FePure3dObject::Translate(int, int)",
    ),
    Ok(
        "FePure3dObject::SetTranslation(int, int)",
    ),
    Ok(
        "FePure3dObject::ResetTransformation(void)",
    ),
    Ok(
        "FePure3dObject::GetDrawable(void)",
    ),
    Ok(
        "FePure3dObject::SetDrawable(tDrawable *)",
    ),
    Ok(
        "FePure3dObject::SetMultiController(tMultiController *)",
    ),
    Ok(
        "FePure3dObject::SetDefaultLight(tLight *)",
    ),
    Ok(
        "FePure3dObject type_info function",
    ),
    Ok(
        "Scrooby::HasBoundingBox::HasBoundingBox(int)",
    ),
    Ok(
        "Scrooby::BoundedDrawable::BoundedDrawable(int)",
    ),
    Ok(
        "Scrooby::Pure3dObject::Pure3dObject(int)",
    ),
    Ok(
        "FePure3dObject::GetView(void) const",
    ),
    Ok(
        "FePure3dObject::SetCameraSettings(float, float)",
    ),
    Ok(
        "FePure3dObject::SetDrawableTranslation(float, float, float)",
    ),
    Ok(
        "FePure3dObject::SetDrawableScale(float)",
    ),
    Ok(
        "FePure3dObject::SetColourWrite(bool)",
    ),
    Ok(
        "FePure3dObject::SetClearDepthBuffer(bool)",
    ),
    Ok(
        "FePure3dObject::SetZBufferEnabled(bool)",
    ),
    Ok(
        "FePure3dObject::SetWideScreenCorrectionEnabled(bool)",
    ),
    Ok(
        "Scrooby::Pure3dObject type_info function",
    ),
    Ok(
        "FeScreen::FeScreen(int, char const *, FeProject *)",
    ),
    Ok(
        "FeScreen::~FeScreen(void)",
    ),
    Ok(
        "FeScreen::GetBoundingBox(int &, int &, int &, int &) const",
    ),
    Ok(
        "FeScreen::GetBoundingBoxSize(int &, int &) const",
    ),
    Ok(
        "FeScreen::AddChild(FeEntity *)",
    ),
    Ok(
        "FeScreen::Display(void)",
    ),
    Ok(
        "FeScreen::DisplayBackground(void)",
    ),
    Ok(
        "FeScreen::DisplayForeground(void)",
    ),
    Ok(
        "FeScreen::GetPage(char const *)",
    ),
    Ok(
        "FeScreen::GetPage(tUidUnaligned)",
    ),
    Ok(
        "FeScreen::GetPageByIndex(int)",
    ),
    Ok(
        "FeScreen::GetNumberOfPages(void) const",
    ),
    Ok(
        "FeScreen type_info function",
    ),
    Ok(
        "Scrooby::Screen::Screen(int)",
    ),
    Ok(
        "FeScreen::SetScale(float)",
    ),
    Ok(
        "FeScreen::GetScale(void) const",
    ),
    Ok(
        "FeScreen::Reload(void)",
    ),
    Ok(
        "FeSprite::FeSprite(int, tName const &, int, int)",
    ),
    Ok(
        "FeSprite::~FeSprite(void)",
    ),
    Ok(
        "FeSprite::AddImage(char const *)",
    ),
    Ok(
        "FeSprite::SetImage(int, char const *)",
    ),
    Ok(
        "FeSprite::Display(void)",
    ),
    Ok(
        "FeSprite::GetIndex(void)",
    ),
    Ok(
        "FeSprite::GetNumOfImages(void)",
    ),
    Ok(
        "FeSprite::Reset(void)",
    ),
    Ok(
        "FeSprite::ResizeToBoundingBox(void)",
    ),
    Ok(
        "FeSprite::SetIndex(int)",
    ),
    Ok(
        "FeSprite::SetRawSprite(tSprite *, bool)",
    ),
    Ok(
        "FeSprite::DisplayBitmapText(void)",
    ),
    Ok(
        "FeSprite::DisplayBitmapChar(unsigned short)",
    ),
    Ok(
        "FeSprite::SetSpriteMode(Scrooby::eSpriteMode)",
    ),
    Ok(
        "FeSprite::CreateBitmapTextBuffer(unsigned int)",
    ),
    Ok(
        "FeSprite::SetBitmapText(unsigned short const *)",
    ),
    Ok(
        "FeSprite::SetBitmapText(char const *)",
    ),
    Ok(
        "FeSprite::SetBitmapTextSpacing(short)",
    ),
    Ok(
        "FeSprite::ConvertToScreenX(int)",
    ),
    Ok(
        "FeSprite::ConvertToScreenY(int)",
    ),
    Ok(
        "FeSprite::SetupTextWrapping(void)",
    ),
    Ok(
        "FeSprite::GetRawSprite(void)",
    ),
    Ok(
        "rVector<PascalCString *> type_info function",
    ),
    Ok(
        "FeSprite type_info function",
    ),
    Ok(
        "Scrooby::Sprite::Sprite(int)",
    ),
    Ok(
        "rVector<PascalCString *>::~rVector(void)",
    ),
    Ok(
        "FeText::FeText(int, tName const &, int, int)",
    ),
    Ok(
        "FeText::~FeText(void)",
    ),
    Ok(
        "FeText::AddHardCodedString(char const *)",
    ),
    Ok(
        "FeText::AddTextBibleString(char const *, char const *)",
    ),
    Ok(
        "FeText::Display(void)",
    ),
    Ok(
        "FeText::GetIndex(void)",
    ),
    Ok(
        "FeText::GetNumOfStrings(void)",
    ),
    Ok(
        "FeText::GetString(void)",
    ),
    Ok(
        "FeText::GetStringBuffer(void)",
    ),
    Ok(
        "FeText::SetStringBuffer(unsigned short *)",
    ),
    Ok(
        "FeText::GetStringBuffer(int)",
    ),
    Ok(
        "FeText::GetString(int)",
    ),
    Ok(
        "FeText::GetTextHeight(void)",
    ),
    Ok(
        "FeText::GetTextMode(void)",
    ),
    Ok(
        "FeText::GetTextWidth(void)",
    ),
    Ok(
        "FeText::Reset(void)",
    ),
    Ok(
        "FeText::ReCalculateAlignment(void)",
    ),
    Ok(
        "FeText::ResetText(void)",
    ),
    Ok(
        "FeText::RestoreDefaultColour(void)",
    ),
    Ok(
        "FeText::SetAlpha(float)",
    ),
    Ok(
        "FeText::SetColour(int, int, int)",
    ),
    Ok(
        "FeText::SetColour(pddiColour)",
    ),
    Ok(
        "FeText::SetString(int, char const *, char const *)",
    ),
    Ok(
        "FeText::SetString(int, char const *, unsigned int)",
    ),
    Ok(
        "FeText::SetString(int, UnicodeString &, char const *)",
    ),
    Ok(
        "FeText::SetString(int, UnicodeString &, unsigned int)",
    ),
    Ok(
        "FeText::SetIndex(int)",
    ),
    Ok(
        "FeText::SetTextMode(Scrooby::TextMode)",
    ),
    Ok(
        "FeText::SetTextStyle(char const *)",
    ),
    Ok(
        "FeText::SetTextStyle(unsigned int)",
    ),
    Ok(
        "FeText::SetDisplayShadow(bool)",
    ),
    Ok(
        "FeText::IsDisplayingShadow(void)",
    ),
    Ok(
        "FeText::SetShadowOffset(int, int)",
    ),
    Ok(
        "FeText::GetXShadowOffset(void)",
    ),
    Ok(
        "FeText::GetYShadowOffset(void)",
    ),
    Ok(
        "FeText::SetShadowColour(pddiColour)",
    ),
    Ok(
        "FeText::GetShadowColour(void)",
    ),
    Ok(
        "FeTextChildString::GetString(void)",
    ),
    Ok(
        "FeTextChildHardCodedString::FeTextChildHardCodedString(UnicodeString)",
    ),
    Ok(
        "FeTextChildHardCodedString::~FeTextChildHardCodedString(void)",
    ),
    Ok(
        "FeTextChildHardCodedString::GetStringBuffer(void)",
    ),
    Ok(
        "FeTextChildHardCodedString::IsValid(void)",
    ),
    Ok(
        "FeTextChildTextBibleString::FeTextChildTextBibleString(unsigned int, char const *)",
    ),
    Ok(
        "FeTextChildTextBibleString::~FeTextChildTextBibleString(void)",
    ),
    Ok(
        "FeTextChildTextBibleString::GetStringBuffer(void)",
    ),
    Ok(
        "FeTextChildTextBibleString::GetTextBibleResourceId(void) const",
    ),
    Ok(
        "FeTextChildTextBibleString::IsValid(void)",
    ),
    Ok(
        "FeText type_info function",
    ),
    Ok(
        "FeTextChildString type_info function",
    ),
    Ok(
        "FeTextChildHardCodedString type_info function",
    ),
    Ok(
        "FeTextChildTextBibleString type_info function",
    ),
    Ok(
        "Scrooby::Text::Text(int)",
    ),
    Ok(
        "FeText::SetDisplayOutline(bool)",
    ),
    Ok(
        "FeText::IsDisplayingOutline(void) const",
    ),
    Ok(
        "FeText::SetOutlineColour(pddiColour)",
    ),
    Ok(
        "FeText::GetOutlineColour(void) const",
    ),
    Ok(
        "FeText::GetFont(void) const",
    ),
    Ok(
        "FeTextChildString::~FeTextChildString(void)",
    ),
    Ok(
        "FeTextChildString::FeTextChildString(void)",
    ),
    Ok(
        "FeTextChildString::IsDrawable(void)",
    ),
    Ok(
        "FeTextBible::FeTextBible(int)",
    ),
    Ok(
        "FeTextBible::~FeTextBible(void)",
    ),
    Ok(
        "FeTextBible::GetWChar(unsigned int)",
    ),
    Ok(
        "FeTextBible::GetWChar(char const *)",
    ),
    Ok(
        "FeTextBible::SetLanguage(char)",
    ),
    Ok(
        "rVector<FeLanguage *> type_info function",
    ),
    Ok(
        "FeTextBible type_info function",
    ),
    Ok(
        "Scrooby::TextBible::TextBible(void)",
    ),
    Ok(
        "FeTextBible::IsDrawable(void)",
    ),
    Ok(
        "rVector<FeLanguage *>::~rVector(void)",
    ),
    Ok(
        "Scrooby::TextBible type_info function",
    ),
    Ok(
        "FeTextStyle::FeTextStyle(void)",
    ),
    Ok(
        "FeTextStyle::~FeTextStyle(void)",
    ),
    Ok(
        "FeTextStyle::SetFontName(PascalCString)",
    ),
    Ok(
        "FeTextStyle::SetFontFilename(PascalCString)",
    ),
    Ok(
        "FeTextStyle::SetFontStyle(PascalCString)",
    ),
    Ok(
        "FeTextStyle::SetColour(pddiColour *)",
    ),
    Ok(
        "FeTextStyle type_info function",
    ),
    Ok(
        "FeTextStyle::IsDrawable(void)",
    ),
    Ok(
        "tLinearTable::RawIterator::RawIterator(tLinearTable *)",
    ),
    Ok(
        "tLinearTable::RawIterator::~RawIterator(void)",
    ),
    Ok(
        "tLinearTable::RawIterator::First(void)",
    ),
    Ok(
        "tLinearTable::RawIterator::First(tUidUnaligned)",
    ),
    Ok(
        "tLinearTable::RawIterator::FirstFree(tUidUnaligned)",
    ),
    Ok(
        "tLinearTable::RawIterator::Next(void)",
    ),
    Ok(
        "tLinearTable::RawIterator::FirstIndex(tUidUnaligned)",
    ),
    Ok(
        "tLinearTable::RawIterator::FirstIndex(FeEntity *)",
    ),
    Ok(
        "tLinearTable::RawIterator::Current(void)",
    ),
    Ok(
        "tLinearTable::tLinearTable(void)",
    ),
    Ok(
        "tLinearTable::~tLinearTable(void)",
    ),
    Ok(
        "tLinearTable::RemoveAll(void)",
    ),
    Ok(
        "tLinearTable::Grow(void)",
    ),
    Ok(
        "tLinearTable::Repack(void)",
    ),
    Ok(
        "tLinearTable::Restore(FeEntity **, int)",
    ),
    Ok(
        "tLinearTable::Find(tUidUnaligned)",
    ),
    Ok(
        "tLinearTable::StoreNoAddRef(FeEntity *)",
    ),
    Ok(
        "tLinearTable::Store(FeEntity *)",
    ),
    Ok(
        "tLinearTable::Remove(FeEntity *)",
    ),
    Ok(
        "tLinearTable::Replace(FeEntity *, FeEntity *)",
    ),
    Ok(
        "tLinearTable::Resize(unsigned int)",
    ),
    Ok(
        "tLinearTable type_info function",
    ),
    Ok(
        "tLinearTable::AddRef(void)",
    ),
    Ok(
        "tLinearTable::Release(void)",
    ),
    Ok(
        "FeEntityDummy::FeEntityDummy(void)",
    ),
    Ok(
        "FeEntityDummy::~FeEntityDummy(void)",
    ),
    Ok(
        "FeEntityDummy type_info function",
    ),
    Ok(
        "FeEntityDummy::IsDrawable(void)",
    ),
    Ok(
        "FeResourceManager::FeResourceManager(int)",
    ),
    Ok(
        "FeResourceManager::~FeResourceManager(void)",
    ),
    Ok(
        "FeResourceManager::AddResource(char const *, FeEntity *, ResourceType, char const *)",
    ),
    Ok(
        "FeResourceManager::AddAlias(tName const &, int)",
    ),
    Ok(
        "FeResourceManager::AddPure3dAttributes(char const *, char const *, int)",
    ),
    Ok(
        "FeResourceManager::ContinueLoading(void)",
    ),
    Ok(
        "FeResourceManager::GetCallback(void) const",
    ),
    Ok(
        "FeResourceManager::GetCamera(int)",
    ),
    Ok(
        "FeResourceManager::GetIndex(tName const &, bool)",
    ),
    Ok(
        "FeResourceManager::GetMultiController(int)",
    ),
    Ok(
        "FeResourceManager::GetResource(char const *)",
    ),
    Ok(
        "FeResourceManager::GetResource(int)",
    ),
    Ok(
        "FeResourceManager::IsAsyncLoading(void)",
    ),
    Ok(
        "FeResourceManager::LoadAll(Scrooby::ResourceManagerCallback *)",
    ),
    Ok(
        "FeResourceManager::LoadProject(Scrooby::Project *, Scrooby::ResourceManagerCallback *)",
    ),
    Ok(
        "FeResourceManager::ProjectLoadComplete(void)",
    ),
    Ok(
        "FeResourceManager::RegisterCementFile(char const *)",
    ),
    Ok(
        "FeResourceManager::RemoveResource(tEntity *, char const *)",
    ),
    Ok(
        "FeResourceManager::RemoveResource(int, char const *)",
    ),
    Ok(
        "FeResourceManager::RemoveAlias(int)",
    ),
    Ok(
        "FeResourceManager::RemoveP3DAttributes(int)",
    ),
    Ok(
        "FeResourceManager::SetCallback(Scrooby::ResourceManagerCallback *)",
    ),
    Ok(
        "FeResourceManager::SetInventorySection(char const *)",
    ),
    Ok(
        "FeResourceManager::SetSecondaryInventorySection(char const *)",
    ),
    Ok(
        "FeResourceManager::SetLocalizationLanguage(Scrooby::XLLanguage)",
    ),
    Ok(
        "FeResourceManager::UnloadAll(void)",
    ),
    Ok(
        "FeResourceManager::UnloadProject(Scrooby::Project *)",
    ),
    Ok(
        "FeResourceManager::ResourceManagerEntryBase::ResourceManagerEntryBase(void)",
    ),
    Ok(
        "FeResourceManager::ResourceManagerEntryBase type_info function",
    ),
    Ok(
        "FeResourceManager::ResourceEntry type_info function",
    ),
    Ok(
        "FeResourceManager::AliasEntry type_info function",
    ),
    Ok(
        "FeResourceManager::Pure3dAttributesEntry type_info function",
    ),
    Ok(
        "rVector<FeResourceManager::ResourceEntry *> type_info function",
    ),
    Ok(
        "rVector<FeResourceManager::AliasEntry *> type_info function",
    ),
    Ok(
        "rVector<FeResourceManager::Pure3dAttributesEntry *> type_info function",
    ),
    Ok(
        "FeResourceManager type_info function",
    ),
    Ok(
        "Scrooby::ResourceManager::ResourceManager(void)",
    ),
    Ok(
        "FeResourceManager::P3DCallback::P3DCallback(void)",
    ),
    Ok(
        "FeResourceManager::IsDrawable(void)",
    ),
    Ok(
        "FeResourceManager::ResourceManagerEntryBase::~ResourceManagerEntryBase(void)",
    ),
    Ok(
        "FeResourceManager::ResourceManagerEntryBase::IsDrawable(void)",
    ),
    Ok(
        "FeResourceManager::ResourceEntry::~ResourceEntry(void)",
    ),
    Ok(
        "FeResourceManager::AliasEntry::~AliasEntry(void)",
    ),
    Ok(
        "FeResourceManager::Pure3dAttributesEntry::~Pure3dAttributesEntry(void)",
    ),
    Ok(
        "rVector<FeResourceManager::ResourceEntry *>::~rVector(void)",
    ),
    Ok(
        "rVector<FeResourceManager::AliasEntry *>::~rVector(void)",
    ),
    Ok(
        "rVector<FeResourceManager::Pure3dAttributesEntry *>::~rVector(void)",
    ),
    Ok(
        "Scrooby::ResourceManager type_info function",
    ),
    Ok(
        "FeResourceManager::P3DCallback::~P3DCallback(void)",
    ),
    Ok(
        "FeResourceManager::P3DCallback type_info function",
    ),
    Ok(
        "FeResourceManager::P3DCallback::AddRef(void)",
    ),
    Ok(
        "FeResourceManager::P3DCallback::Release(void)",
    ),
    Ok(
        "FeResourceManager::P3DCallback::Done(tLoadStatus, tLoadRequest *)",
    ),
    Ok(
        "Scrooby::App::App(void)",
    ),
    Ok(
        "Scrooby::App::~App(void)",
    ),
    Ok(
        "Scrooby::App::GetInstance(void)",
    ),
    Ok(
        "Scrooby::App::DeleteInstance(void)",
    ),
    Ok(
        "Scrooby::App::EnableScreenScaling(bool, float, float, float)",
    ),
    Ok(
        "Scrooby::App type_info function",
    ),
    Ok(
        "PascalCString::PascalCString(void)",
    ),
    Ok(
        "PascalCString::~PascalCString(void)",
    ),
    Ok(
        "PascalCString::PascalCString(char const *)",
    ),
    Ok(
        "PascalCString::PascalCString(char)",
    ),
    Ok(
        "PascalCString::PascalCString(PascalCString const &)",
    ),
    Ok(
        "PascalCString::operator=(PascalCString const &)",
    ),
    Ok(
        "PascalCString::operator=(char const *)",
    ),
    Ok(
        "PascalCString::Grow(unsigned int)",
    ),
    Ok(
        "PascalCString::operator+=(PascalCString const &)",
    ),
    Ok(
        "PascalCString::operator+=(char const *)",
    ),
    Ok(
        "PascalCString::operator+=(char)",
    ),
    Ok(
        "PascalCString::operator==(char const *) const",
    ),
    Ok(
        "PascalCString::operator!=(char const *) const",
    ),
    Ok(
        "PascalCString::Length(void) const",
    ),
    Ok(
        "PascalCString::Reserve(int)",
    ),
    Ok(
        "PascalCString::operator char *(void)",
    ),
    Ok(
        "PascalCString::AdjustMaxArraySize(unsigned int)",
    ),
    Ok(
        "PascalCString::SubString(int, int)",
    ),
    Ok(
        "PascalCString::StreamFirstWord(char)",
    ),
    Ok(
        "PascalCString::Find(char)",
    ),
    Ok(
        "PascalCString::EqualsInsensitive(char const *)",
    ),
    Ok(
        "PascalCString::Replace(PascalCString const &, PascalCString const &)",
    ),
    Ok(
        "PascalCString::ToUpper(void)",
    ),
    Ok(
        "PascalCString::FullFilename(void)",
    ),
    Ok(
        "PascalCString::JustFilename(void)",
    ),
    Ok(
        "PascalCString::JustExtension(void)",
    ),
    Ok(
        "PascalCString::JustPath(void)",
    ),
    Ok(
        "test(void)",
    ),
    Ok(
        "UnicodeString::UnicodeString(void)",
    ),
    Ok(
        "UnicodeString::UnicodeString(UnicodeString const &)",
    ),
    Ok(
        "UnicodeString::UnicodeString(char const *)",
    ),
    Ok(
        "UnicodeString::~UnicodeString(void)",
    ),
    Ok(
        "UnicodeString::operator=(UnicodeString const &)",
    ),
    Ok(
        "UnicodeString::operator+=(UnicodeString const &)",
    ),
    Ok(
        "UnicodeString::operator+=(unsigned short const &)",
    ),
    Ok(
        "UnicodeString::operator[](int) const",
    ),
    Ok(
        "UnicodeString::operator[](int)",
    ),
    Ok(
        "UnicodeString::Append(unsigned short const &)",
    ),
    Ok(
        "UnicodeString::Clear(void)",
    ),
    Ok(
        "UnicodeString::FindFirstSubstring(UnicodeString const &) const",
    ),
    Ok(
        "UnicodeString::GetBuffer(void)",
    ),
    Ok(
        "UnicodeString::Length(void) const",
    ),
    Ok(
        "UnicodeString::MakeAscii(char *, int) const",
    ),
    Ok(
        "UnicodeString::ReadAscii(char const *, int)",
    ),
    Ok(
        "UnicodeString::ReadUnicode(unsigned short const *, int)",
    ),
    Ok(
        "UnicodeString::Replace(UnicodeString const &, UnicodeString const &)",
    ),
    Ok(
        "UnicodeString::Resize(unsigned int)",
    ),
    Ok(
        "UnicodeString::Substring(unsigned int, unsigned int) const",
    ),
    Ok(
        "rstricmp(char const *, char const *)",
    ),
    Ok(
        "StringToJustificationEnum(char const *)",
    ),
    Ok(
        "XMLTree::XMLTree(void)",
    ),
    Ok(
        "XMLTree::XMLTree(XMLNode *)",
    ),
    Ok(
        "XMLTree::~XMLTree(void)",
    ),
    Ok(
        "XMLTree::LoadTreeFromBuffer(char *, unsigned int, char const *)",
    ),
    Ok(
        "XMLTree::LoadTreeWorker(char const *)",
    ),
    Ok(
        "XMLTree::SetCurrentElementByName(char const *)",
    ),
    Ok(
        "XMLTree::SetCurrentElementByIndex(int)",
    ),
    Ok(
        "XMLTree::GetFilename(PascalCString &)",
    ),
    Ok(
        "XMLTree::SetFilename(char const *)",
    ),
    Ok(
        "XMLTree::GetName(PascalCString &)",
    ),
    Ok(
        "XMLTree::GetAttribute(char const *, PascalCString &)",
    ),
    Ok(
        "XMLTree::GetAttribute(char const *, int *)",
    ),
    Ok(
        "XMLTree::GetAttribute(char const *, bool *)",
    ),
    Ok(
        "XMLTree::GetSubTreeByName(char const *)",
    ),
    Ok(
        "XMLTree::GetSubTreeByIndex(int)",
    ),
    Ok(
        "XMLTree type_info function",
    ),
    Ok(
        "FeApp::AddProject(Scrooby::Project *)",
    ),
    Ok(
        "FeApp::GetInstance(void)",
    ),
    Ok(
        "FeApp::GetProject(void)",
    ),
    Ok(
        "FeApp::GetProject(unsigned int)",
    ),
    Ok(
        "FeApp::GetResourceManager(void)",
    ),
    Ok(
        "FeApp::GetTextBible(char const *) const",
    ),
    Ok(
        "FeApp::GetScreenHeight(void)",
    ),
    Ok(
        "FeApp::GetScreenWidth(void)",
    ),
    Ok(
        "FeApp::AddScroobyHandlers(void)",
    ),
    Ok(
        "FeApp::DeleteInstance(void)",
    ),
    Ok(
        "FeApp::FeApp(void)",
    ),
    Ok(
        "FeApp::~FeApp(void)",
    ),
    Ok(
        "FeApp::Display(tUidUnaligned, tUidUnaligned)",
    ),
    Ok(
        "FeApp::Display(char const *, char const *)",
    ),
    Ok(
        "FeApp::DrawFrame(float)",
    ),
    Ok(
        "FeApp::DrawBackground(float)",
    ),
    Ok(
        "FeApp::DrawForeground(float)",
    ),
    Ok(
        "FeApp::GetFeResourceManager(void)",
    ),
    Ok(
        "FeApp::IsSafeToRender(void)",
    ),
    Ok(
        "FeApp::LoadProject(char const *, Scrooby::LoadProjectCallback *, char *, int)",
    ),
    Ok(
        "FeApp::LoadResourcesAll(Scrooby::ResourceManagerCallback *)",
    ),
    Ok(
        "FeApp::MarkSafeToRender(void)",
    ),
    Ok(
        "FeApp::OnProjectLoadComplete(Scrooby::Project *)",
    ),
    Ok(
        "FeApp::RegisterCementFile(char const *)",
    ),
    Ok(
        "FeApp::RemoveProject(Scrooby::Project *)",
    ),
    Ok(
        "FeApp::SetLocalizationLanguage(Scrooby::XLLanguage)",
    ),
    Ok(
        "FeApp::SetProjectIndex(unsigned int)",
    ),
    Ok(
        "FeApp::SetProject(Scrooby::Project *)",
    ),
    Ok(
        "FeApp::GetProjectIndex(void)",
    ),
    Ok(
        "FeApp::UnloadProject(Scrooby::Project *)",
    ),
    Ok(
        "FeApp::GetDeltaTime(void)",
    ),
    Ok(
        "rVector<FeProject *> type_info function",
    ),
    Ok(
        "FeApp type_info function",
    ),
    Ok(
        "FeApp::SetFullImageNames(bool)",
    ),
    Ok(
        "FeApp::UseFullImageNames(void)",
    ),
    Ok(
        "rVector<FeProject *>::~rVector(void)",
    ),
    Ok(
        "FeBoundedDrawable::FeBoundedDrawable(int, tName const &)",
    ),
    Ok(
        "FeBoundedDrawable::~FeBoundedDrawable(void)",
    ),
    Ok(
        "FeBoundedDrawable::GetBoundingBox(int &, int &, int &, int &) const",
    ),
    Ok(
        "FeBoundedDrawable::GetBoundingBoxSize(int &, int &) const",
    ),
    Ok(
        "FeBoundedDrawable::GetBoundingBoxCenter(int &, int &) const",
    ),
    Ok(
        "FeBoundedDrawable::IsPointInBoundingRect(float, float)",
    ),
    Ok(
        "FeBoundedDrawable::Reset(void)",
    ),
    Ok(
        "FeBoundedDrawable::SetHorizontalJustification(Scrooby::JustificationEnum)",
    ),
    Ok(
        "FeBoundedDrawable::SetVerticalJustification(Scrooby::JustificationEnum)",
    ),
    Ok(
        "FeBoundedDrawable::SetBoundingBoxSize(int, int)",
    ),
    Ok(
        "FeBoundedDrawable::ReCalculateAlignment(void)",
    ),
    Ok(
        "FeBoundedDrawable::GetMatrix(void)",
    ),
    Ok(
        "FeBoundedDrawable::GetMatrix(void) const",
    ),
    Ok(
        "FeBoundedDrawable::ScaleAboutCenter(float)",
    ),
    Ok(
        "FeBoundedDrawable::ScaleAboutCenter(float, float, float)",
    ),
    Ok(
        "FeBoundedDrawable::ScaleAboutPoint(float, int, int)",
    ),
    Ok(
        "FeBoundedDrawable::ScaleAboutPoint(float, float, float, int, int)",
    ),
    Ok(
        "FeBoundedDrawable::SetPositionOfCenter(int, int)",
    ),
    Ok(
        "FeBoundedDrawable::RotateAboutCenter(float, RadicalMathLibrary::Vector)",
    ),
    Ok(
        "FeBoundedDrawable type_info function",
    ),
    Ok(
        "FeBoundedDrawable::GetHorizontalJustification(void) const",
    ),
    Ok(
        "FeBoundedDrawable::GetVerticalJustification(void) const",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::FeProjectChunkHandler(void)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::LoadGroupChunk(tChunkFile *)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::LoadLayerChunk(tChunkFile *)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::LoadMovieChunk(tChunkFile *)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::LoadPageChunk(tChunkFile *)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::LoadPolygonChunk(tChunkFile *)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::LoadPure3dObjectChunk(tChunkFile *)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::LoadScreenChunk(tChunkFile *)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::LoadSpriteChunk(tChunkFile *)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::LoadTextChunk(tChunkFile *)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler::~FeProjectChunkHandler(void)",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler type_info function",
    ),
    Ok(
        "FeDrawable::FeDrawable(int, tName const &)",
    ),
    Ok(
        "FeDrawable::~FeDrawable(void)",
    ),
    Ok(
        "FeDrawable::DegreesToRadian(float)",
    ),
    Ok(
        "FeDrawable::Update(float)",
    ),
    Ok(
        "FeDrawable::Display(void)",
    ),
    Ok(
        "FeDrawable::GetAlpha(void) const",
    ),
    Ok(
        "FeDrawable::GetColour(void) const",
    ),
    Ok(
        "FeDrawable::GetMatrix(void)",
    ),
    Ok(
        "FeDrawable::GetMatrix(void) const",
    ),
    Ok(
        "FeDrawable::GetOriginPosition(int &, int &) const",
    ),
    Ok(
        "FeDrawable::InverseNormalizeCoord(float, float, int &, int &) const",
    ),
    Ok(
        "FeDrawable::IsPage(void) const",
    ),
    Ok(
        "FeDrawable::IsVisible(void) const",
    ),
    Ok(
        "FeDrawable::ModulateColour(pddiColour &, pddiColour const &)",
    ),
    Ok(
        "FeDrawable::NormalizeCoord(int, int, float &, float &) const",
    ),
    Ok(
        "FeDrawable::Reset(void)",
    ),
    Ok(
        "FeDrawable::ResetTransformation(void)",
    ),
    Ok(
        "FeDrawable::RotateArbitrary(float, float, float, float)",
    ),
    Ok(
        "FeDrawable::RotateX(float)",
    ),
    Ok(
        "FeDrawable::RotateY(float)",
    ),
    Ok(
        "FeDrawable::RotateZ(float)",
    ),
    Ok(
        "FeDrawable::Scale(float)",
    ),
    Ok(
        "FeDrawable::Scale(float, float, float)",
    ),
    Ok(
        "FeDrawable::SetAlpha(float)",
    ),
    Ok(
        "FeDrawable::SetClip(float, float, float, float)",
    ),
    Ok(
        "FeDrawable::SetColour(pddiColour)",
    ),
    Ok(
        "FeDrawable::SetLayer(float)",
    ),
    Ok(
        "FeDrawable::SetParent(FeDrawable *)",
    ),
    Ok(
        "FeDrawable::SetTransform(RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "FeDrawable::SetTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "FeDrawable::SetTranslation(int, int)",
    ),
    Ok(
        "FeDrawable::SetTranslationRealWorld(float, float)",
    ),
    Ok(
        "FeDrawable::SetVisible(bool)",
    ),
    Ok(
        "FeDrawable::Show(void)",
    ),
    Ok(
        "FeDrawable::Translate(int, int)",
    ),
    Ok(
        "FeDrawable::GetTransform(void)",
    ),
    Ok(
        "FeDrawable::GetTransform(void) const",
    ),
    Ok(
        "FeDrawable::GetNormalizedPosition(float &, float &) const",
    ),
    Ok(
        "FeDrawable::SetPosition(int, int)",
    ),
    Ok(
        "FeDrawable::TranslatePosition(int, int)",
    ),
    Ok(
        "FeDrawable type_info function",
    ),
    Ok(
        "FeDrawable::IsDrawable(void)",
    ),
    Ok(
        "FeEntity::FeEntity(void)",
    ),
    Ok(
        "FeEntity::~FeEntity(void)",
    ),
    Ok(
        "FeEntity::IsOwner(void) const",
    ),
    Ok(
        "FeEntity type_info function",
    ),
    Ok(
        "FeGroup::FeGroup(int, tName const &)",
    ),
    Ok(
        "FeGroup::~FeGroup(void)",
    ),
    Ok(
        "FeGroup::GetBoundingBox(int &, int &, int &, int &) const",
    ),
    Ok(
        "FeGroup::Show(void)",
    ),
    Ok(
        "FeGroup::GetBoundingBoxSize(int &, int &) const",
    ),
    Ok(
        "FeGroup::RecomputeOffsets(void)",
    ),
    Ok(
        "FeGroup::ScaleAboutCenter(float)",
    ),
    Ok(
        "FeGroup::ScaleAboutCenter(float, float, float)",
    ),
    Ok(
        "FeGroup::ScaleAboutPoint(float, int, int)",
    ),
    Ok(
        "FeGroup::RotateAboutCenter(float, RadicalMathLibrary::Vector)",
    ),
    Ok(
        "FeGroup type_info function",
    ),
    Ok(
        "Scrooby::Group::Group(int)",
    ),
    Ok(
        "FeGroup::Display(void)",
    ),
    Ok(
        "Scrooby::Group type_info function",
    ),
    Ok(
        "FeLanguage::FeLanguage(char const *)",
    ),
    Ok(
        "FeLanguage::~FeLanguage(void)",
    ),
    Ok(
        "FeLanguage::GetString(char const *)",
    ),
    Ok(
        "FeLanguage::GetString(unsigned int)",
    ),
    Ok(
        "FeLanguage::GetHash(char const *)",
    ),
    Ok(
        "FeLanguage type_info function",
    ),
    Ok(
        "FeLanguage::IsDrawable(void)",
    ),
    Ok(
        "FeLayer::FeLayer(int, char const *)",
    ),
    Ok(
        "FeLayer::~FeLayer(void)",
    ),
    Ok(
        "FeLayer::GetBoundingBoxSize(int &, int &) const",
    ),
    Ok(
        "FeLayer::GetBoundingBox(int &, int &, int &, int &) const",
    ),
    Ok(
        "FeLayer type_info function",
    ),
    Ok(
        "Scrooby::Layer::Layer(int)",
    ),
    Ok(
        "FeLayer::Display(void)",
    ),
    Ok(
        "FeMovie::~FeMovie(void)",
    ),
    Ok(
        "FeMovie::Reset(void)",
    ),
    Ok(
        "FeMovie::Display(void)",
    ),
    Ok(
        "FeMovie::SetAlpha(float)",
    ),
    Ok(
        "FeMovie::SetAlphaNoRedraw(float)",
    ),
    Ok(
        "FeMovie::SetColour(int, int, int)",
    ),
    Ok(
        "FeMovie::SetColour(pddiColour)",
    ),
    Ok(
        "FeMovie::SetColourNoRedraw(pddiColour)",
    ),
    Ok(
        "FeMovie::SetColourNoRedraw(int, int, int)",
    ),
    Ok(
        "FeMovie::GetAlpha(void) const",
    ),
    Ok(
        "FeMovie::GetColour(void) const",
    ),
    Ok(
        "FeMovie::Play(void)",
    ),
    Ok(
        "FeMovie::Pause(void)",
    ),
    Ok(
        "FeMovie::Stop(void)",
    ),
    Ok(
        "FeMovie::GetCurrentFrame(void) const",
    ),
    Ok(
        "FeMovie::SetNextFrame(int)",
    ),
    Ok(
        "FeMovie type_info function",
    ),
    Ok(
        "Scrooby::Movie type_info function",
    ),
    Ok(
        "FeOwner::FeOwner(int, tName const &)",
    ),
    Ok(
        "FeOwner::~FeOwner(void)",
    ),
    Ok(
        "FeOwner::Show(void)",
    ),
    Ok(
        "FeOwner::ShowChildren(void)",
    ),
    Ok(
        "FeOwner::DisplayChildren(void)",
    ),
    Ok(
        "FeOwner::Update(float)",
    ),
    Ok(
        "FeOwner::Display(void)",
    ),
    Ok(
        "FeOwner::IsOwner(void) const",
    ),
    Ok(
        "FeOwner type_info function",
    ),
    Ok(
        "XMLAttribute::GetName(void)",
    ),
    Ok(
        "XMLAttribute::GetValue(void)",
    ),
    Ok(
        "XMLAttributeList::GetLength(void)",
    ),
    Ok(
        "XMLAttributeList::AddItem(XMLAttribute *)",
    ),
    Ok(
        "XMLAttributeList::GetItem(int)",
    ),
    Ok(
        "XMLNodeList::GetLength(void)",
    ),
    Ok(
        "XMLNodeList::AddItem(XMLNode *)",
    ),
    Ok(
        "XMLNodeList::GetItem(int)",
    ),
    Ok(
        "XMLNode::XMLNode(void)",
    ),
    Ok(
        "XMLNode::~XMLNode(void)",
    ),
    Ok(
        "XMLNode::GetName(void)",
    ),
    Ok(
        "XMLNode::GetAttributes(void)",
    ),
    Ok(
        "XMLNode::GetChildNodes(void)",
    ),
    Ok(
        "XMLParser::XMLParser(void)",
    ),
    Ok(
        "XMLParser::~XMLParser(void)",
    ),
    Ok(
        "XMLParser::ParseFromBuffer(char *, unsigned int)",
    ),
    Ok(
        "XMLParser::Parse(char *&)",
    ),
    Ok(
        "XMLParser::ReadNextTag(char *&)",
    ),
    Ok(
        "XMLParser::DecodeTag(PascalCString &)",
    ),
    Ok(
        "XMLNode type_info function",
    ),
    Ok(
        "XMLParser type_info function",
    ),
    Ok(
        "XMLAttribute::~XMLAttribute(void)",
    ),
    Ok(
        "XMLAttribute::XMLAttribute(void)",
    ),
    Ok(
        "XMLAttributeList::~XMLAttributeList(void)",
    ),
    Ok(
        "XMLAttributeList::XMLAttributeList(void)",
    ),
    Ok(
        "XMLNodeList::~XMLNodeList(void)",
    ),
    Ok(
        "XMLNodeList::XMLNodeList(void)",
    ),
    Ok(
        "rVector<XMLAttribute *> type_info function",
    ),
    Ok(
        "rVector<XMLNode *> type_info function",
    ),
    Ok(
        "rVector<XMLAttribute *>::~rVector(void)",
    ),
    Ok(
        "rVector<XMLNode *>::~rVector(void)",
    ),
    Ok(
        "tContextInitData::tContextInitData(void)",
    ),
    Ok(
        "tPlatform::tPlatform(void)",
    ),
    Ok(
        "tPlatform::~tPlatform(void)",
    ),
    Ok(
        "tPlatform::Create(void)",
    ),
    Ok(
        "tPlatform::CreateContext(tContextInitData *)",
    ),
    Ok(
        "tPlatform::GetPlatform(void)",
    ),
    Ok(
        "global constructors keyed to malloc_uncached(int)",
    ),
    Ok(
        "global destructors keyed to malloc_uncached(int)",
    ),
    Ok(
        "tBillboardQuad::tBillboardQuad(void)",
    ),
    Ok(
        "tBillboardQuad::~tBillboardQuad(void)",
    ),
    Ok(
        "tBillboardQuad::Display(ps2PrimStream *, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
    ),
    Ok(
        "BakedBillboardQuad::Display(ps2PrimStream *)",
    ),
    Ok(
        "tBillboardQuad::Calculate(void)",
    ),
    Ok(
        "tCamRelativeBillboardQuad::~tCamRelativeBillboardQuad(void)",
    ),
    Ok(
        "tCamRelativeBillboardQuad::Display(ps2PrimStream *, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
    ),
    Ok(
        "tCamRelativeBillboardQuad::CalcScale(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &) const",
    ),
    Ok(
        "tBillboardQuad::DisplayOcclusionSprite(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "tBillboardQuadGroup::tBillboardQuadGroup(void)",
    ),
    Ok(
        "tBillboardQuadGroup::~tBillboardQuadGroup(void)",
    ),
    Ok(
        "tBillboardQuadGroup::SetShader(tShader *)",
    ),
    Ok(
        "tBillboardQuadGroup::FindQuadByUID(tUidUnaligned)",
    ),
    Ok(
        "tBillboardQuadGroup::Display(void)",
    ),
    Ok(
        "tBillboardQuadGroup::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "tBillboardQuadGroup::SetIntensityBias(float)",
    ),
    Ok(
        "tBillboardQuadGroupLoader::tBillboardQuadGroupLoader(void)",
    ),
    Ok(
        "tBillboardQuadGroupLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tBillboardQuadGroupLoader::LoadQuad(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "BillboardQuadManager::BillboardQuadManager(void)",
    ),
    Ok(
        "BillboardQuadManager::DisplayAll(void)",
    ),
    Ok(
        "BillboardQuadManager::Add(tBillboardQuadGroup *)",
    ),
    Ok(
        "tBillboardQuad type_info function",
    ),
    Ok(
        "tCamRelativeBillboardQuad type_info function",
    ),
    Ok(
        "tArray<tBillboardQuad *> type_info function",
    ),
    Ok(
        "tPtrArray<tBillboardQuad *> type_info function",
    ),
    Ok(
        "tBillboardQuadGroup type_info function",
    ),
    Ok(
        "tBillboardQuadGroupLoader type_info function",
    ),
    Ok(
        "tBillboardQuad::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "tBillboardQuad::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "tPtrArray<tBillboardQuad *>::~tPtrArray(void)",
    ),
    Ok(
        "tBillboardQuadGroup::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "tBillboardQuadGroup::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "tBillboardQuadGroupLoader::~tBillboardQuadGroupLoader(void)",
    ),
    Ok(
        "tArray<tBillboardQuad *>::~tArray(void)",
    ),
    Ok(
        "tArray<tBillboardQuad *>::SetSize(int)",
    ),
    Ok(
        "tPtrArray<tBillboardQuad *>::SetSize(int)",
    ),
    Ok(
        "tBMPHandler::CheckFormat(tImageHandler::Format)",
    ),
    Ok(
        "tBMPHandler::CreateImage(tFile *, tImageHandler::Builder *)",
    ),
    Ok(
        "tBMPHandler::SaveImage(tImage *, char *)",
    ),
    Ok(
        "tBMPHandler::~tBMPHandler(void)",
    ),
    Ok(
        "tBMPHandler type_info function",
    ),
    Ok(
        "tBMPHandler::GetExtension(void)",
    ),
    Ok(
        "tBMPHandler::CanLoad(void)",
    ),
    Ok(
        "tBMPHandler::CanSave(void)",
    ),
    Ok(
        "tCamera::tCamera(void)",
    ),
    Ok(
        "tCamera::~tCamera(void)",
    ),
    Ok(
        "tCamera::SetFOV(float, float)",
    ),
    Ok(
        "tCamera::GetFOV(float *, float *)",
    ),
    Ok(
        "tCamera::SetNearPlane(float)",
    ),
    Ok(
        "tCamera::SetFarPlane(float)",
    ),
    Ok(
        "tCamera::GetNearPlane(void)",
    ),
    Ok(
        "tCamera::GetFarPlane(void)",
    ),
    Ok(
        "tCamera::GetCameraSpaceClipPlane(tCamera::ClipCode, RadicalMathLibrary::Plane *)",
    ),
    Ok(
        "tCamera::GetWorldSpaceClipPlane(tCamera::ClipCode, RadicalMathLibrary::Plane *)",
    ),
    Ok(
        "tCamera::GetWorldToCameraMatrix(void)",
    ),
    Ok(
        "tCamera::GetCameraToWorldMatrix(void)",
    ),
    Ok(
        "tCamera::CameraToWorld(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tCamera::WorldToCamera(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tCamera::CameraToView(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tCamera::WorldToView(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tCamera::ViewToCamera(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tCamera::PointVisibleCamera(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tCamera::SphereVisibleCamera(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "tCamera::PointVisible(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tCamera::SphereVisible(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "tCamera::PointClipCode(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tCamera::GetWorldLookAtDirection(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tCamera::GetWorldPosition(RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tCamera::SetCameraMatrix(RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "tCamera::SetState(void)",
    ),
    Ok(
        "tCamera::Update(void)",
    ),
    Ok(
        "tCamera type_info function",
    ),
    Ok(
        "tCameraLoader::tCameraLoader(void)",
    ),
    Ok(
        "tCameraLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tCameraLoader type_info function",
    ),
    Ok(
        "tCameraLoader::~tCameraLoader(void)",
    ),
    Ok(
        "tChunkFile::tChunkFile(tFile *)",
    ),
    Ok(
        "tChunkFile::~tChunkFile(void)",
    ),
    Ok(
        "tChunkFile::ChunksRemaining(void)",
    ),
    Ok(
        "tChunkFile::BeginChunk(void)",
    ),
    Ok(
        "tChunkFile::BeginChunk(unsigned int)",
    ),
    Ok(
        "tChunkFile::EndChunk(void)",
    ),
    Ok(
        "tChunkFile::GetCurrentID(void)",
    ),
    Ok(
        "tChunkFile::BeginInset(void)",
    ),
    Ok(
        "tChunkFile::EndInset(tFile *)",
    ),
    Ok(
        "tChunkFile type_info function",
    ),
    Ok(
        "radLoadStream::~radLoadStream(void)",
    ),
    Ok(
        "radLoadStream::GetEndianSwap(void)",
    ),
    Ok(
        "radLoadStream::SetEndianSwap(bool)",
    ),
    Ok(
        "tChunkFile::Read(void *, unsigned int, unsigned int)",
    ),
    Ok(
        "tChunkFile::GetSize(void)",
    ),
    Ok(
        "tChunkFile::GetPosition(void)",
    ),
    Ok(
        "radLoadStream type_info function",
    ),
    Ok(
        "tContext::tContext(pddiDevice *, pddiDisplay *, pddiRenderContext *)",
    ),
    Ok(
        "tContext::Setup(void)",
    ),
    Ok(
        "tContext::BeginFrame(void)",
    ),
    Ok(
        "tContext::EndFrame(bool)",
    ),
    Ok(
        "tContext::SetView(tView *)",
    ),
    Ok(
        "tContext::GetView(void)",
    ),
    Ok(
        "tContext::SwapBuffers(void)",
    ),
    Ok(
        "tContext::GetMatrixStack(p3dMatrixType)",
    ),
    Ok(
        "tContext::LoadViewMatrix(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "tContext::GetWorldMatrix(void)",
    ),
    Ok(
        "tContext::WorldToView(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tContext::GetHardwareSkinning(void)",
    ),
    Ok(
        "pddiExtMemRegistration::CallBack::CallBack(void)",
    ),
    Ok(
        "RadcoreMemAdapt::RadcoreMemAdapt(void)",
    ),
    Ok(
        "pddiExtMemRegistration::CallBack type_info function",
    ),
    Ok(
        "RadcoreMemAdapt type_info function",
    ),
    Ok(
        "RadcoreMemAdapt::Alloc(void *, int)",
    ),
    Ok(
        "RadcoreMemAdapt::Free(void *)",
    ),
    Ok(
        "global constructors keyed to tContext::tContext(pddiDevice *, pddiDisplay *, pddiRenderContext *)",
    ),
    Ok(
        "tDrawable::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "tDrawable::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "tShaderIntBroadcast::Process(tShader *)",
    ),
    Ok(
        "tShaderFloatBroadcast::Process(tShader *)",
    ),
    Ok(
        "tShaderColourBroadcast::Process(tShader *)",
    ),
    Ok(
        "tShaderTextureBroadcast::Process(tShader *)",
    ),
    Ok(
        "tShaderVectorBroadcast::Process(tShader *)",
    ),
    Ok(
        "tShaderMatrixBroadcast::Process(tShader *)",
    ),
    Ok(
        "tDrawable type_info function",
    ),
    Ok(
        "tShaderIntBroadcast type_info function",
    ),
    Ok(
        "tShaderFloatBroadcast type_info function",
    ),
    Ok(
        "tShaderColourBroadcast type_info function",
    ),
    Ok(
        "tShaderTextureBroadcast type_info function",
    ),
    Ok(
        "tShaderVectorBroadcast type_info function",
    ),
    Ok(
        "tShaderMatrixBroadcast type_info function",
    ),
    Ok(
        "tDrawable::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "tDrawable::~tDrawable(void)",
    ),
    Ok(
        "global constructors keyed to tDrawable::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "tName::tName(void)",
    ),
    Ok(
        "tName::tName(char const *)",
    ),
    Ok(
        "tName::tName(tUidUnaligned)",
    ),
    Ok(
        "tName::tName(tName const &)",
    ),
    Ok(
        "tName::~tName(void)",
    ),
    Ok(
        "tName::SetText(char const *)",
    ),
    Ok(
        "tName::SetTextOnly(char const *)",
    ),
    Ok(
        "tName::SetUID(tUidUnaligned)",
    ),
    Ok(
        "tName::GetText(void) const",
    ),
    Ok(
        "tName::operator==(tName const &) const",
    ),
    Ok(
        "tName::operator!=(tName const &) const",
    ),
    Ok(
        "tName::operator=(tName const &)",
    ),
    Ok(
        "tName::MakeUID(char const *)",
    ),
    Ok(
        "tEntity::tEntity(void)",
    ),
    Ok(
        "tEntity::~tEntity(void)",
    ),
    Ok(
        "tEntity::CopyName(tEntity *)",
    ),
    Ok(
        "tEntity::GetNameDangerous(void)",
    ),
    Ok(
        "tEntity type_info function",
    ),
    Ok(
        "tDebug::CapturePDDIMessages(pddiDevice *)",
    ),
    Ok(
        "P3DVERIFY(int, char const *, char const *, char const *, char const *, char const *)",
    ),
    Ok(
        "AdaptPDDI::AdaptPDDI(void)",
    ),
    Ok(
        "AdaptPDDI type_info function",
    ),
    Ok(
        "pddiDevice::MessageCallback::MessageCallback(void)",
    ),
    Ok(
        "AdaptPDDI::Info(char const *)",
    ),
    Ok(
        "AdaptPDDI::Warn(char const *)",
    ),
    Ok(
        "AdaptPDDI::Fatal(char const *, char const *, int)",
    ),
    Ok(
        "pddiDevice::MessageCallback type_info function",
    ),
    Ok(
        "tFile::tFile(void)",
    ),
    Ok(
        "tFile::~tFile(void)",
    ),
    Ok(
        "tFile::SetFilename(char const *)",
    ),
    Ok(
        "tFile::UncompressBlock(unsigned char *, unsigned int, unsigned char *, unsigned int)",
    ),
    Ok(
        "tFileMem::tFileMem(unsigned char *, unsigned int, bool)",
    ),
    Ok(
        "tFileMem::~tFileMem(void)",
    ),
    Ok(
        "tFileMem::GetData(void *, unsigned int, tFile::DataType)",
    ),
    Ok(
        "tFileMem::EndOfFile(void)",
    ),
    Ok(
        "tFileMem::GetSize(void)",
    ),
    Ok(
        "tFileMem::Advance(unsigned int)",
    ),
    Ok(
        "tFileMem::GetPosition(void)",
    ),
    Ok(
        "tFileMem::GetMemory(void)",
    ),
    Ok(
        "tFileMem::SetCompressed(bool)",
    ),
    Ok(
        "tFileMem::SetUncompressedSize(int)",
    ),
    Ok(
        "tFile type_info function",
    ),
    Ok(
        "tFileMem type_info function",
    ),
    Ok(
        "tFile::SetPosition(int)",
    ),
    Ok(
        "tFile::Read(void *, unsigned int, unsigned int)",
    ),
    Ok(
        "tFile::SetCompressed(bool)",
    ),
    Ok(
        "tFile::SetUncompressedSize(int)",
    ),
    Ok(
        "tFileMem::GetEndianSwap(void)",
    ),
    Ok(
        "tFileMem::SetEndianSwap(bool)",
    ),
    Ok(
        "tFontGlyph::tFontGlyph(void)",
    ),
    Ok(
        "tFontGlyph::~tFontGlyph(void)",
    ),
    Ok(
        "tFont::DisplayText(unsigned short const *, int) const",
    ),
    Ok(
        "tFont::~tFont(void)",
    ),
    Ok(
        "tFont type_info function",
    ),
    Ok(
        "tGameAttr::tGameAttr(char const *, unsigned int)",
    ),
    Ok(
        "tGameAttr::~tGameAttr(void)",
    ),
    Ok(
        "tGameAttr::Set(char *, tGameAttr::Type, void *, unsigned int)",
    ),
    Ok(
        "tGameAttr::SetInt(char *, int)",
    ),
    Ok(
        "tGameAttr::SetFloat(char *, float)",
    ),
    Ok(
        "tGameAttr::SetColour(char *, pddiColour)",
    ),
    Ok(
        "tGameAttr::SetMatrix(char *, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "tGameAttr::SetVector(char *, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tGameAttrLoader::tGameAttrLoader(void)",
    ),
    Ok(
        "tGameAttrLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tGameAttr::BaseMap::~BaseMap(void)",
    ),
    Ok(
        "tGameAttr::BaseMap::SetName(char *)",
    ),
    Ok(
        "tGameAttr::BaseMap::SetParam(void *, int)",
    ),
    Ok(
        "tGameAttr type_info function",
    ),
    Ok(
        "tGameAttrLoader type_info function",
    ),
    Ok(
        "tGameAttrLoader::~tGameAttrLoader(void)",
    ),
    Ok(
        "global constructors keyed to tGameAttr::tGameAttr(char const *, unsigned int)",
    ),
    Ok(
        "tGeometry::tGeometry(int)",
    ),
    Ok(
        "tGeometry::~tGeometry(void)",
    ),
    Ok(
        "tGeometry::GetShader(int)",
    ),
    Ok(
        "tGeometry::SetShader(int, tShader *)",
    ),
    Ok(
        "tGeometry::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "tGeometry::SetPrimGroup(int, tPrimGroup *)",
    ),
    Ok(
        "tGeometry::Display(void)",
    ),
    Ok(
        "tGeometry::SetBoundingBox(float, float, float, float, float, float)",
    ),
    Ok(
        "tGeometry::SetBoundingSphere(float, float, float, float)",
    ),
    Ok(
        "tGeometryLoader::tGeometryLoader(void)",
    ),
    Ok(
        "tGeometryLoader::Allocate(int)",
    ),
    Ok(
        "tGeometryLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tArray<tPrimGroup *> type_info function",
    ),
    Ok(
        "tPtrArray<tPrimGroup *> type_info function",
    ),
    Ok(
        "tGeometry type_info function",
    ),
    Ok(
        "tGeometryLoader::~tGeometryLoader(void)",
    ),
    Ok(
        "tGeometryLoader type_info function",
    ),
    Ok(
        "tPtrArray<tPrimGroup *>::~tPtrArray(void)",
    ),
    Ok(
        "tGeometry::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "tGeometry::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "tGeometry::GetNumShader(void)",
    ),
    Ok(
        "tGeometry::GetNumPrimGroup(void)",
    ),
    Ok(
        "tGeometry::GetPrimGroup(int)",
    ),
    Ok(
        "tGeometry::GetNumFaceNormals(void)",
    ),
    Ok(
        "tGeometry::GetFaceNormals(void)",
    ),
    Ok(
        "tGeometry::CastsShadow(void)",
    ),
    Ok(
        "tGeometry::SetCastsShadow(int)",
    ),
    Ok(
        "tArray<tPrimGroup *>::~tArray(void)",
    ),
    Ok(
        "tArray<tPrimGroup *>::SetSize(int)",
    ),
    Ok(
        "tPtrArray<tPrimGroup *>::SetSize(int)",
    ),
    Ok(
        "tImage::tImage(void)",
    ),
    Ok(
        "tImage::~tImage(void)",
    ),
    Ok(
        "tImage::Invert(void)",
    ),
    Ok(
        "tImage8::tImage8(void)",
    ),
    Ok(
        "tImage8::~tImage8(void)",
    ),
    Ok(
        "tImage8::SetPixelIndex(int, int, unsigned int)",
    ),
    Ok(
        "tImage8::GetPixelIndex(int, int)",
    ),
    Ok(
        "tImage8::SetImage(int, int, unsigned char *)",
    ),
    Ok(
        "tImage8::SetSize(int, int)",
    ),
    Ok(
        "tImage8::ReSize(int, int)",
    ),
    Ok(
        "tImage8::GetColour(int, int)",
    ),
    Ok(
        "tImage8::SetColour(int, int, unsigned int)",
    ),
    Ok(
        "tImage8::GetPalette(void)",
    ),
    Ok(
        "tImage8::SetPalette(unsigned int *, int)",
    ),
    Ok(
        "tImage8::SetPaletteEntry(int, unsigned int)",
    ),
    Ok(
        "tImage8::GetPaletteEntry(int)",
    ),
    Ok(
        "tImage8::CopyRegion(tImage *, int, int, int, int, int, int)",
    ),
    Ok(
        "tImage8::Clear(unsigned int)",
    ),
    Ok(
        "tImageLoader::tImageLoader(void)",
    ),
    Ok(
        "tImageLoader::~tImageLoader(void)",
    ),
    Ok(
        "tImageLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tImageLoader::LoadImage(tChunkFile *, int)",
    ),
    Ok(
        "tImage type_info function",
    ),
    Ok(
        "tImage8 type_info function",
    ),
    Ok(
        "tImageLoader type_info function",
    ),
    Ok(
        "tImage8::SetUsedColours(int)",
    ),
    Ok(
        "tImage8::GetUsedColours(void)",
    ),
    Ok(
        "tImage8::Lock(void)",
    ),
    Ok(
        "ImageBuilder::ImageBuilder(void)",
    ),
    Ok(
        "ImageBuilder::BeginImage(int, int, int, tImageHandler::Builder::Origin, pddiColour *)",
    ),
    Ok(
        "ImageBuilder::ProcessScanline32(unsigned int *)",
    ),
    Ok(
        "ImageBuilder::ProcessScanline8(unsigned char *)",
    ),
    Ok(
        "ImageBuilder::EndImage(void)",
    ),
    Ok(
        "TextureBuilder::TextureBuilder(void)",
    ),
    Ok(
        "TextureBuilder::BeginImage(int, int, int, tImageHandler::Builder::Origin, pddiColour *)",
    ),
    Ok(
        "TextureBuilder::ProcessScanline32(unsigned int *)",
    ),
    Ok(
        "TextureBuilder::ProcessScanline8(unsigned char *)",
    ),
    Ok(
        "TextureBuilder::EndImage(void)",
    ),
    Ok(
        "TextureBuilder::DirectCopy(unsigned char *, int)",
    ),
    Ok(
        "TextureBuilder::SetCompressedData(int, char *, int)",
    ),
    Ok(
        "TextureBuilder::GetMemoryImagePtr(void)",
    ),
    Ok(
        "TextureBuilder::GetPaletteMemoryImagePtr(void)",
    ),
    Ok(
        "tImageHandler::CheckExtension(char *)",
    ),
    Ok(
        "tImageHandler::Load(tFile *, tEntityStore *)",
    ),
    Ok(
        "tImageHandler::SetNativeResolution(int, int)",
    ),
    Ok(
        "tImageFactory::tImageFactory(void)",
    ),
    Ok(
        "tImageFactory::~tImageFactory(void)",
    ),
    Ok(
        "tImageFactory::SetTextureHints(int, int, pddiTextureType, pddiTextureUsageHint)",
    ),
    Ok(
        "tImageFactory::LoadAsImage(tFile *, char *)",
    ),
    Ok(
        "tImageFactory::LoadAsImage(char *, char *)",
    ),
    Ok(
        "tImageFactory::ParseAsImage(tFile *, char *, tImageHandler::Format)",
    ),
    Ok(
        "tImageFactory::LoadAsTexture(char *, char *)",
    ),
    Ok(
        "tImageFactory::ParseAsTexture(tFile *, char *, int, tImageHandler::Format)",
    ),
    Ok(
        "tImageFactory::LoadIntoTexture(char *, tTexture *, int)",
    ),
    Ok(
        "tImageFactory::ParseIntoTexture(tFile *, tTexture *, tImageHandler::Format, int)",
    ),
    Ok(
        "tImageFactory::FindHandler(char *)",
    ),
    Ok(
        "tImageFactory::FindHandler(tImageHandler::Format)",
    ),
    Ok(
        "tImageFactory::AddHandler(tImageHandler *)",
    ),
    Ok(
        "tImageHandler::tImageHandler(void)",
    ),
    Ok(
        "tImageHandler type_info function",
    ),
    Ok(
        "ImageBuilder type_info function",
    ),
    Ok(
        "TextureBuilder type_info function",
    ),
    Ok(
        "tImageHandler::Builder::Builder(void)",
    ),
    Ok(
        "tImageHandler::~tImageHandler(void)",
    ),
    Ok(
        "tImageHandler::Builder::DirectCopy(unsigned char *, int)",
    ),
    Ok(
        "tImageHandler::Builder::GetMemoryImagePtr(void)",
    ),
    Ok(
        "tImageHandler::Builder::GetPaletteMemoryImagePtr(void)",
    ),
    Ok(
        "tImageHandler::Builder::SetCompressedData(int, char *, int)",
    ),
    Ok(
        "tImageHandler::Builder::SetExpectedFileSize(int)",
    ),
    Ok(
        "tImageHandler::Builder::GetExpectedFileSize(void)",
    ),
    Ok(
        "tImageHandler::Builder::SetTextureType(pddiTextureType)",
    ),
    Ok(
        "tImageHandler::SaveImage(tImage *, char *)",
    ),
    Ok(
        "tImageHandler::SetLoadType(tImageHandler::LoadType)",
    ),
    Ok(
        "tImageHandler::GetLoadType(void)",
    ),
    Ok(
        "tImageHandler::SetFullName(bool)",
    ),
    Ok(
        "tImageHandler::GetFullName(void)",
    ),
    Ok(
        "tRawImageHandler::tRawImageHandler(void)",
    ),
    Ok(
        "TextureBuilder::SetTextureType(pddiTextureType)",
    ),
    Ok(
        "tImageHandler::Builder type_info function",
    ),
    Ok(
        "tImageGlyph::tImageGlyph(void)",
    ),
    Ok(
        "tImageGlyph::~tImageGlyph(void)",
    ),
    Ok(
        "tImageFont::tImageFont(void)",
    ),
    Ok(
        "tImageFont::~tImageFont(void)",
    ),
    Ok(
        "tImageFont::GetTextHeight(unsigned short const *) const",
    ),
    Ok(
        "tImageFont::GetTextWidth(unsigned short const *) const",
    ),
    Ok(
        "tImageFont::DisplayText(tImage *, int, int, unsigned short const *, int) const",
    ),
    Ok(
        "tImageFont::GetLineWidth(unsigned short const *) const",
    ),
    Ok(
        "tImageFont::DisplayLine(tImage *, int, int, unsigned short const *, int) const",
    ),
    Ok(
        "tImageFont::FindGlyph(unsigned short) const",
    ),
    Ok(
        "tImageFontLoader::tImageFontLoader(void)",
    ),
    Ok(
        "tImageFontLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tImageFont type_info function",
    ),
    Ok(
        "tImageFontLoader type_info function",
    ),
    Ok(
        "tImageFont::GetFontSize(void) const",
    ),
    Ok(
        "tImageFont::GetFontWidth(void) const",
    ),
    Ok(
        "tImageFont::GetFontHeight(void) const",
    ),
    Ok(
        "tImageFont::GetFontBaseLine(void) const",
    ),
    Ok(
        "tImageFont::GetLineSpacing(void) const",
    ),
    Ok(
        "tImageFont::SetLineSpacing(unsigned int)",
    ),
    Ok(
        "tImageFont::GetColour(void) const",
    ),
    Ok(
        "tImageFont::SetColour(pddiColour)",
    ),
    Ok(
        "tImageFontLoader::~tImageFontLoader(void)",
    ),
    Ok(
        "tInventory::tInventory(void)",
    ),
    Ok(
        "tInventory::~tInventory(void)",
    ),
    Ok(
        "tInventory::Find(radLoadInventory::SafeCastBase &, tUidUnaligned)",
    ),
    Ok(
        "tInventory::Store(tEntity *)",
    ),
    Ok(
        "tInventory::Store(tUidUnaligned, IRefCount *)",
    ),
    Ok(
        "tInventory::StoreHandlingCollisions(tEntity *)",
    ),
    Ok(
        "tInventory::StoreHandlingCollisions(tUidUnaligned, IRefCount *)",
    ),
    Ok(
        "tInventory::Remove(IRefCount *)",
    ),
    Ok(
        "tInventory::TestCollision(tEntity *)",
    ),
    Ok(
        "tInventory::AddSection(char const *)",
    ),
    Ok(
        "tInventory::DeleteSection(tUidUnaligned)",
    ),
    Ok(
        "tInventory::GetSection(tUidUnaligned)",
    ),
    Ok(
        "tInventory::RemoveSectionElements(tUidUnaligned)",
    ),
    Ok(
        "tInventory::SelectSection(tName const &)",
    ),
    Ok(
        "tInventory::PushSection(void)",
    ),
    Ok(
        "tInventory::PopSection(void)",
    ),
    Ok(
        "tInventory::FindSection(tName const &)",
    ),
    Ok(
        "tInventory::SearchSection(unsigned int, radLoadInventory::SafeCastBase &, tName const &)",
    ),
    Ok(
        "tInventory::RePack(void)",
    ),
    Ok(
        "tInventory::SetAutoRepack(bool)",
    ),
    Ok(
        "tInventory::GetAutoRepack(void)",
    ),
    Ok(
        "tInventory::RemoveAllElements(void)",
    ),
    Ok(
        "tInventory::DeleteAllSections(void)",
    ),
    Ok(
        "tEntityStore::Store(tEntity *)",
    ),
    Ok(
        "tEntityStore::Store(tUidUnaligned, IRefCount *)",
    ),
    Ok(
        "tEntityStore::StoreHandlingCollisions(tEntity *)",
    ),
    Ok(
        "tEntityStore::StoreHandlingCollisions(tUidUnaligned, IRefCount *)",
    ),
    Ok(
        "tEntityStore type_info function",
    ),
    Ok(
        "tInventory type_info function",
    ),
    Ok(
        "tSafeCasterObj type_info function",
    ),
    Ok(
        "tEntityStore::~tEntityStore(void)",
    ),
    Ok(
        "tEntityStore::tEntityStore(void)",
    ),
    Ok(
        "tSafeCasterObj::safe_cast(IRefCount *)",
    ),
    Ok(
        "tLight::tLight(void)",
    ),
    Ok(
        "tLight::~tLight(void)",
    ),
    Ok(
        "tLight::Activate(unsigned int)",
    ),
    Ok(
        "tLight::Deactivate(void)",
    ),
    Ok(
        "tLight::SetColour(pddiColour)",
    ),
    Ok(
        "tLight::GetColour(void)",
    ),
    Ok(
        "tLight::SetPosition(float, float, float)",
    ),
    Ok(
        "tLight::Enable(bool)",
    ),
    Ok(
        "tLight::SetDecayType(tLight::DecayRange::Type)",
    ),
    Ok(
        "tLight::SetDecayRange(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tLight::SetDecayRotationY(float)",
    ),
    Ok(
        "tLight::SetIlluminationType(tLight::IlluminationType)",
    ),
    Ok(
        "tLightGroup::tLightGroup(void)",
    ),
    Ok(
        "tLightGroup::~tLightGroup(void)",
    ),
    Ok(
        "tLight type_info function",
    ),
    Ok(
        "tArray<tLight *> type_info function",
    ),
    Ok(
        "tPtrArray<tLight *> type_info function",
    ),
    Ok(
        "tLightGroup type_info function",
    ),
    Ok(
        "tLight::SetPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tPtrArray<tLight *>::~tPtrArray(void)",
    ),
    Ok(
        "tArray<tLight *>::~tArray(void)",
    ),
    Ok(
        "tArray<tLight *>::SetSize(int)",
    ),
    Ok(
        "tPtrArray<tLight *>::SetSize(int)",
    ),
    Ok(
        "tLightLoader::tLightLoader(void)",
    ),
    Ok(
        "tLightLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tLightGroupLoader::tLightGroupLoader(void)",
    ),
    Ok(
        "tLightGroupLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tLightLoader type_info function",
    ),
    Ok(
        "tLightGroupLoader type_info function",
    ),
    Ok(
        "tLightLoader::~tLightLoader(void)",
    ),
    Ok(
        "tLightGroupLoader::~tLightGroupLoader(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tLight>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tLight> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tLight>::safe_cast(IRefCount *)",
    ),
    Ok(
        "tLocator::tLocator(void)",
    ),
    Ok(
        "tLocator::~tLocator(void)",
    ),
    Ok(
        "tLocator::SetPosition(RadicalMathLibrary::Vector)",
    ),
    Ok(
        "tLocatorLoader::tLocatorLoader(void)",
    ),
    Ok(
        "tLocatorLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tLocator type_info function",
    ),
    Ok(
        "tLocatorLoader type_info function",
    ),
    Ok(
        "tLocatorLoader::~tLocatorLoader(void)",
    ),
    Ok(
        "tFileHandler::LoadFile(radLoadOptions *, radLoadUpdatableRequest *)",
    ),
    Ok(
        "tChunkHandler::LoadData(radLoadStream *, int, radLoadInventory *, IRefCount *)",
    ),
    Ok(
        "tP3DFileHandler::tP3DFileHandler(int)",
    ),
    Ok(
        "tP3DFileHandler::~tP3DFileHandler(void)",
    ),
    Ok(
        "tP3DFileHandler::CheckExtension(char *)",
    ),
    Ok(
        "tP3DFileHandler::Load(tFile *, tEntityStore *)",
    ),
    Ok(
        "tP3DFileHandler::AddHandler(tChunkHandler *)",
    ),
    Ok(
        "tP3DFileHandler::AddHandler(tChunkHandler *, unsigned int)",
    ),
    Ok(
        "tP3DFileHandler::GetHandler(unsigned int)",
    ),
    Ok(
        "tP3DFileHandler::RemoveAllHandlers(void)",
    ),
    Ok(
        "tSimpleChunkHandler::Load(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tSimpleChunkHandler::HandleCollision(tEntity *)",
    ),
    Ok(
        "tSimpleChunkHandler::CheckChunkID(unsigned int)",
    ),
    Ok(
        "tLoadRequest::tLoadRequest(char const *)",
    ),
    Ok(
        "tLoadRequest::tLoadRequest(tFile *)",
    ),
    Ok(
        "tLoadRequest::~tLoadRequest(void)",
    ),
    Ok(
        "tLoadRequest::SetCallback(tLoadRequest::Callback *)",
    ),
    Ok(
        "tLoadRequest::SetAsync(bool)",
    ),
    Ok(
        "tLoadRequest::SetMemoryAllocator(int)",
    ),
    Ok(
        "tLoadRequest::SetInventorySection(char const *)",
    ),
    Ok(
        "tLoadRequest::SetUserData(void *)",
    ),
    Ok(
        "tLoadRequest::SetDummy(bool)",
    ),
    Ok(
        "tLoadRequest::IsDummy(void)",
    ),
    Ok(
        "tLoadRequest::GetState(void)",
    ),
    Ok(
        "tLoadRequest::InternalCallback::Done(void)",
    ),
    Ok(
        "tLoadManager::tLoadManager(int)",
    ),
    Ok(
        "tLoadManager::~tLoadManager(void)",
    ),
    Ok(
        "tLoadManager::SwitchTask(void)",
    ),
    Ok(
        "tLoadManager::CancelAll(void)",
    ),
    Ok(
        "tLoadManager::Load(tLoadRequest *)",
    ),
    Ok(
        "tLoadManager::TriggerCallbacks(void)",
    ),
    Ok(
        "tLoadManager::AddHandler(tFileHandler *, char *)",
    ),
    Ok(
        "tLoadManager::GetHandler(char *)",
    ),
    Ok(
        "tLoadManager::RemoveAllHandlers(void)",
    ),
    Ok(
        "tLoadManager::GetP3DHandler(void)",
    ),
    Ok(
        "tFileHandler type_info function",
    ),
    Ok(
        "tChunkHandler type_info function",
    ),
    Ok(
        "tSimpleChunkHandler type_info function",
    ),
    Ok(
        "tP3DFileHandler type_info function",
    ),
    Ok(
        "tLoadRequest::InternalCallback::~InternalCallback(void)",
    ),
    Ok(
        "tLoadRequest::InternalCallback type_info function",
    ),
    Ok(
        "tLoadRequest type_info function",
    ),
    Ok(
        "tLoadManager type_info function",
    ),
    Ok(
        "tTempStore::~tTempStore(void)",
    ),
    Ok(
        "tTempStore type_info function",
    ),
    Ok(
        "tRefCountedTemp::~tRefCountedTemp(void)",
    ),
    Ok(
        "tRefCountedTemp::tRefCountedTemp(void)",
    ),
    Ok(
        "tFileHandler::~tFileHandler(void)",
    ),
    Ok(
        "tChunkHandler::SetNameOverride(char const *)",
    ),
    Ok(
        "tChunkHandler::~tChunkHandler(void)",
    ),
    Ok(
        "tSimpleChunkHandler::GetChunkID(void)",
    ),
    Ok(
        "tSimpleChunkHandler::SetNameOverride(char const *)",
    ),
    Ok(
        "tSimpleChunkHandler::~tSimpleChunkHandler(void)",
    ),
    Ok(
        "tTempStore::Store(tEntity *)",
    ),
    Ok(
        "tTempStore::StoreHandlingCollisions(tEntity *)",
    ),
    Ok(
        "tRefCountedTemp type_info function",
    ),
    Ok(
        "lzr_decompress(unsigned char const *, unsigned int, unsigned char *, unsigned int)",
    ),
    Ok(
        "tMatrixStack::tMatrixStack(pddiRenderContext *)",
    ),
    Ok(
        "tMatrixStack::Translate(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tMatrixStack::Translate(float, float, float)",
    ),
    Ok(
        "tMatrixStack::Scale(float, float, float)",
    ),
    Ok(
        "global constructors keyed to tMatrixStack::tmp",
    ),
    Ok(
        "p3d::MemSetup(void)",
    ),
    Ok(
        "p3d::GetCurrentAlloc(void)",
    ),
    Ok(
        "p3d::SetCurrentAlloc(p3d::AllocType)",
    ),
    Ok(
        "p3d::MallocTemp(unsigned int)",
    ),
    Ok(
        "p3d::FreeTemp(void *)",
    ),
    Ok(
        "p3d::UsePermanentMem(bool)",
    ),
    Ok(
        "p3d::MemoryRouter::MemoryRouter(void)",
    ),
    Ok(
        "p3d::MemoryRouter type_info function",
    ),
    Ok(
        "p3d::DefaultRouter type_info function",
    ),
    Ok(
        "p3d::DefaultRouter::GetCurrent(void)",
    ),
    Ok(
        "p3d::DefaultRouter::SetCurrent(p3d::AllocType)",
    ),
    Ok(
        "global constructors keyed to p3d::MemSetup(void)",
    ),
    Ok(
        "tPointCamera::tPointCamera(void)",
    ),
    Ok(
        "tPointCamera::~tPointCamera(void)",
    ),
    Ok(
        "tPointCamera::SetTarget(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tPointCamera::SetPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tPointCamera::SetUpVector(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tPointCamera::SetTwist(float)",
    ),
    Ok(
        "tPointCamera::Update(void)",
    ),
    Ok(
        "tPointCamera type_info function",
    ),
    Ok(
        "tPointLight::tPointLight(void)",
    ),
    Ok(
        "tPointLight::SetPosition(float, float, float)",
    ),
    Ok(
        "tPointLight::SetAttenuation(float, float, float)",
    ),
    Ok(
        "tPointLight::Update(void)",
    ),
    Ok(
        "tPointLight type_info function",
    ),
    Ok(
        "tPointLight::SetPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tPointLight::~tPointLight(void)",
    ),
    Ok(
        "tPNGHandler::CheckFormat(tImageHandler::Format)",
    ),
    Ok(
        "tPNGHandler::CreateImage(tFile *, tImageHandler::Builder *)",
    ),
    Ok(
        "tPNGHandler::SaveImage(tImage *, char *)",
    ),
    Ok(
        "tPNGHandler::~tPNGHandler(void)",
    ),
    Ok(
        "tPNGHandler type_info function",
    ),
    Ok(
        "tPNGHandler::GetExtension(void)",
    ),
    Ok(
        "tPNGHandler::CanLoad(void)",
    ),
    Ok(
        "tPNGHandler::CanSave(void)",
    ),
    Ok(
        "tPrimGroup::tPrimGroup(int)",
    ),
    Ok(
        "tPrimGroup::~tPrimGroup(void)",
    ),
    Ok(
        "tPrimGroup::SetShader(tShader *)",
    ),
    Ok(
        "tPrimGroupOptimised::tPrimGroupOptimised(int)",
    ),
    Ok(
        "tPrimGroupOptimised::~tPrimGroupOptimised(void)",
    ),
    Ok(
        "tPrimGroupOptimised::Display(void)",
    ),
    Ok(
        "tPrimGroupOptimised::SetBuffer(pddiPrimBuffer *)",
    ),
    Ok(
        "tPrimGroupOptimised::GetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tPrimGroupOptimised::SetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tPrimGroupOptimised::ReleaseTempVertices(void)",
    ),
    Ok(
        "tPrimGroupSkinnedOptimised::tPrimGroupSkinnedOptimised(int)",
    ),
    Ok(
        "tPrimGroupSkinnedOptimised::~tPrimGroupSkinnedOptimised(void)",
    ),
    Ok(
        "tPrimGroupSkinnedOptimised::Display(void)",
    ),
    Ok(
        "tPrimGroupSkinnedOptimised::DisplayInstanced(unsigned int)",
    ),
    Ok(
        "tPrimGroupStreamed::tPrimGroupStreamed(int, unsigned int, int, bool)",
    ),
    Ok(
        "tPrimGroupStreamed::~tPrimGroupStreamed(void)",
    ),
    Ok(
        "tPrimGroupStreamed::Display(void)",
    ),
    Ok(
        "tPrimGroupStreamed::Display(ps2PrimStream *)",
    ),
    Ok(
        "tPrimGroupSkinnedStreamed::tPrimGroupSkinnedStreamed(int, unsigned int, int, bool)",
    ),
    Ok(
        "tPrimGroupSkinnedStreamed::~tPrimGroupSkinnedStreamed(void)",
    ),
    Ok(
        "tPrimGroupSkinnedStreamed::Display(void)",
    ),
    Ok(
        "tPrimGroupSkinnedStreamed::DisplayInstanced(unsigned int)",
    ),
    Ok(
        "tPrimGroupSkinnedStreamed::GetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tPrimGroupSkinnedStreamed::SetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tPrimGroupStreamed::IndexedDisplay(pddiPrimBufferStream *)",
    ),
    Ok(
        "tPrimGroupStreamed::IndexedDisplay(ps2PrimStream *)",
    ),
    Ok(
        "tPrimGroupStreamed::NonIndexedDisplay(ps2PrimStream *)",
    ),
    Ok(
        "tPrimGroupLoader::tPrimGroupLoader(void)",
    ),
    Ok(
        "tPrimGroupLoader::~tPrimGroupLoader(void)",
    ),
    Ok(
        "tPrimGroupLoader::ParseHeader(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tPrimGroupLoader::LoadStreamed(tChunkFile *, tEntityStore *, RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "tPrimGroupLoader::Load(tChunkFile *, tEntityStore *, RadicalMathLibrary::Matrix *, bool, bool)",
    ),
    Ok(
        "tPrimGroup type_info function",
    ),
    Ok(
        "tPrimGroupOptimised type_info function",
    ),
    Ok(
        "tPrimGroupSkinnedOptimised type_info function",
    ),
    Ok(
        "tPrimGroupStreamed type_info function",
    ),
    Ok(
        "tPrimGroupSkinnedStreamed type_info function",
    ),
    Ok(
        "tPrimGroupLoader type_info function",
    ),
    Ok(
        "tPrimGroup::GetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tPrimGroup::SetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tPrimGroup::ReleaseTempVertices(void)",
    ),
    Ok(
        "tPrimGroup::DisplayInstanced(unsigned int)",
    ),
    Ok(
        "tPrimGroupSkinnedStreamed::SkinVertex::SkinVertex(void)",
    ),
    Ok(
        "tRawImageHandler::CheckFormat(tImageHandler::Format)",
    ),
    Ok(
        "tRawImageHandler::CreateImage(tFile *, tImageHandler::Builder *)",
    ),
    Ok(
        "tRawImageHandler::~tRawImageHandler(void)",
    ),
    Ok(
        "tRawImageHandler type_info function",
    ),
    Ok(
        "tRawImageHandler::GetExtension(void)",
    ),
    Ok(
        "tRawImageHandler::CanLoad(void)",
    ),
    Ok(
        "tRawImageHandler::CanSave(void)",
    ),
    Ok(
        "tRefCountedTemp::operator new(unsigned int)",
    ),
    Ok(
        "tRefCountedTemp::operator delete(void *)",
    ),
    Ok(
        "tShader::tShader(void)",
    ),
    Ok(
        "tShader::tShader(char *, char *)",
    ),
    Ok(
        "tShader::~tShader(void)",
    ),
    Ok(
        "tShaderLoader::tShaderLoader(void)",
    ),
    Ok(
        "tShaderLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tShaderDefinitionLoader::CheckChunkID(unsigned int)",
    ),
    Ok(
        "tShaderDefinitionLoader::Load(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tShader type_info function",
    ),
    Ok(
        "tShaderLoader type_info function",
    ),
    Ok(
        "tShaderDefinitionLoader type_info function",
    ),
    Ok(
        "tShaderLoader::~tShaderLoader(void)",
    ),
    Ok(
        "tShaderDefinitionLoader::~tShaderDefinitionLoader(void)",
    ),
    Ok(
        "tSprite::tSprite(tImage *, tShader *, int, int, int, tImageConverter *)",
    ),
    Ok(
        "tSprite::tSprite(tTexture **, int, int, int, tShader *, int, int, int, tImageConverter *)",
    ),
    Ok(
        "tSprite::~tSprite(void)",
    ),
    Ok(
        "tSprite::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "tSprite::SelectSegment(int)",
    ),
    Ok(
        "tSprite::SetBlitBorder(int)",
    ),
    Ok(
        "tSprite::CalcSections(tRect **, int &, int &)",
    ),
    Ok(
        "tSprite::BuildSections(tImage *, tImageConverter *)",
    ),
    Ok(
        "tSprite::BuildTexture(int, tRect &, int, int, tImage *, tImage *, tImageConverter *)",
    ),
    Ok(
        "tSprite::BuildPoly(int, tRect &, int, int)",
    ),
    Ok(
        "tSprite::SetColour(pddiColour)",
    ),
    Ok(
        "tSprite::Display(void)",
    ),
    Ok(
        "tSpriteLoader::tSpriteLoader(void)",
    ),
    Ok(
        "tSpriteLoader::~tSpriteLoader(void)",
    ),
    Ok(
        "tSpriteLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tSpriteLoader::LoadImage(tChunkFile *, int)",
    ),
    Ok(
        "tSpriteLoader::LoadTexture(tChunkFile *, int)",
    ),
    Ok(
        "tSprite type_info function",
    ),
    Ok(
        "tSpriteLoader type_info function",
    ),
    Ok(
        "sprVertex::sprVertex(void)",
    ),
    Ok(
        "tSprite::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "tSprite::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "tSpriteLoader::SetNormalization(bool)",
    ),
    Ok(
        "tSpriteLoader::GetNormalization(void)",
    ),
    Ok(
        "tSpotLight::tSpotLight(void)",
    ),
    Ok(
        "tSpotLight::SetPosition(float, float, float)",
    ),
    Ok(
        "tSpotLight::SetDirection(float, float, float)",
    ),
    Ok(
        "tSpotLight::SetRange(float)",
    ),
    Ok(
        "tSpotLight::SetAttenuation(float, float, float)",
    ),
    Ok(
        "tSpotLight::SetCone(float, float, float)",
    ),
    Ok(
        "tSpotLight::Update(void)",
    ),
    Ok(
        "tSpotLight type_info function",
    ),
    Ok(
        "tSpotLight::SetPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tSpotLight::~tSpotLight(void)",
    ),
    Ok(
        "tTargaHandler::CheckFormat(tImageHandler::Format)",
    ),
    Ok(
        "tTargaHandler::CreateImage(tFile *, tImageHandler::Builder *)",
    ),
    Ok(
        "tTargaHandler::SaveImage(tImage *, char *)",
    ),
    Ok(
        "tTargaHandler::~tTargaHandler(void)",
    ),
    Ok(
        "tTargaHandler type_info function",
    ),
    Ok(
        "tTargaHandler::GetExtension(void)",
    ),
    Ok(
        "tTargaHandler::CanLoad(void)",
    ),
    Ok(
        "tTargaHandler::CanSave(void)",
    ),
    Ok(
        "tTextString::~tTextString(void)",
    ),
    Ok(
        "tTextString::Display(void)",
    ),
    Ok(
        "tTextString::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "tTextString type_info function",
    ),
    Ok(
        "tTexture::tTexture(void)",
    ),
    Ok(
        "tTexture::~tTexture(void)",
    ),
    Ok(
        "tTexture::Create(int, int, int, int, int, pddiTextureType, pddiTextureUsageHint)",
    ),
    Ok(
        "tSetLoader::tSetLoader(void)",
    ),
    Ok(
        "tSetLoader::~tSetLoader(void)",
    ),
    Ok(
        "tSetLoader::Load(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tSetLoader::CheckChunkID(unsigned int)",
    ),
    Ok(
        "tSetLoader::GetChunkID(void)",
    ),
    Ok(
        "tTextureLoader::tTextureLoader(void)",
    ),
    Ok(
        "tTextureLoader::~tTextureLoader(void)",
    ),
    Ok(
        "tTextureLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tTextureLoader::LoadTexture(tChunkFile *)",
    ),
    Ok(
        "tTextureLoader::LoadImage(tChunkFile *, tImageFactory *, tTexture *, int)",
    ),
    Ok(
        "tTextureLoader::LoadVolumeImage(tChunkFile *, tImageFactory *, tTexture *, int, int)",
    ),
    Ok(
        "tTexture type_info function",
    ),
    Ok(
        "tTextureLoader type_info function",
    ),
    Ok(
        "tSetLoader type_info function",
    ),
    Ok(
        "global constructors keyed to tTexture::tTexture(void)",
    ),
    Ok(
        "global destructors keyed to tTexture::tTexture(void)",
    ),
    Ok(
        "tTextureGlyph::tTextureGlyph(void)",
    ),
    Ok(
        "tTextureGlyph::~tTextureGlyph(void)",
    ),
    Ok(
        "tTextureFont::tTextureFont(void)",
    ),
    Ok(
        "tTextureFont::~tTextureFont(void)",
    ),
    Ok(
        "tTextureFont::GetTextHeight(unsigned short const *) const",
    ),
    Ok(
        "tTextureFont::GetTextWidth(unsigned short const *) const",
    ),
    Ok(
        "tTextureFont::SetShader(tShader *)",
    ),
    Ok(
        "tTextureFont::SetMissingLetter(unsigned short)",
    ),
    Ok(
        "tTextureFont::GetLineWidth(unsigned short const *) const",
    ),
    Ok(
        "tTextureFont::DisplayLine(unsigned short const *, int) const",
    ),
    Ok(
        "tTextureFont::FindGlyph(unsigned short) const",
    ),
    Ok(
        "tTextureFont::DrawGlyph(ps2PrimStream *, unsigned int, float) const",
    ),
    Ok(
        "tTextureFont::DrawBlank(ps2PrimStream *, float, float) const",
    ),
    Ok(
        "tTextureFontLoader::tTextureFontLoader(void)",
    ),
    Ok(
        "tTextureFontLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tTextureFont type_info function",
    ),
    Ok(
        "tTextureFontLoader type_info function",
    ),
    Ok(
        "tFont::tFont(void)",
    ),
    Ok(
        "tTextureFont::GetFontSize(void) const",
    ),
    Ok(
        "tTextureFont::GetFontWidth(void) const",
    ),
    Ok(
        "tTextureFont::GetFontHeight(void) const",
    ),
    Ok(
        "tTextureFont::GetFontBaseLine(void) const",
    ),
    Ok(
        "tTextureFont::GetLineSpacing(void) const",
    ),
    Ok(
        "tTextureFont::SetLineSpacing(float)",
    ),
    Ok(
        "tTextureFont::GetColour(void) const",
    ),
    Ok(
        "tTextureFont::SetColour(pddiColour)",
    ),
    Ok(
        "tTextureFont::GetShader(void) const",
    ),
    Ok(
        "tTextureFontLoader::~tTextureFontLoader(void)",
    ),
    Ok(
        "p3d::UnicodeStrLen(unsigned short const *)",
    ),
    Ok(
        "p3d::UnicodeStrCpy(unsigned short const *, unsigned short *, int)",
    ),
    Ok(
        "p3d::UnicodeStrUpr(unsigned short *)",
    ),
    Ok(
        "p3d::UnicodeToAscii(unsigned short const *, char *, int)",
    ),
    Ok(
        "p3d::AsciiToUnicode(char const *, unsigned short *, int)",
    ),
    Ok(
        "p3d::openFile(char const *, bool)",
    ),
    Ok(
        "p3d::printf(char const *, ...)",
    ),
    Ok(
        "tVectorCamera::tVectorCamera(void)",
    ),
    Ok(
        "tVectorCamera::~tVectorCamera(void)",
    ),
    Ok(
        "tVectorCamera::SetDirection(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tVectorCamera::SetUpVector(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tVectorCamera::SetPosition(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tVectorCamera::Update(void)",
    ),
    Ok(
        "tVectorCamera type_info function",
    ),
    Ok(
        "tVertexList::tVertexList(unsigned int, unsigned int)",
    ),
    Ok(
        "tVertexList::~tVertexList(void)",
    ),
    Ok(
        "tVertexList::Allocate(unsigned int, unsigned int)",
    ),
    Ok(
        "tVertexList::Stream(ps2PrimStream *, int, int)",
    ),
    Ok(
        "tVertexList type_info function",
    ),
    Ok(
        "tView::tView(void)",
    ),
    Ok(
        "tView::~tView(void)",
    ),
    Ok(
        "tView::SetCamera(tCamera *)",
    ),
    Ok(
        "tView::SetWindow(float, float, float, float)",
    ),
    Ok(
        "tView::SetAmbientLight(pddiColour)",
    ),
    Ok(
        "tView::AddLight(tLight *)",
    ),
    Ok(
        "tView::RemoveLight(unsigned int)",
    ),
    Ok(
        "tView::RemoveAllLights(void)",
    ),
    Ok(
        "tView::GetLight(unsigned int)",
    ),
    Ok(
        "tView::BeginRender(void)",
    ),
    Ok(
        "tView::EndRender(void)",
    ),
    Ok(
        "tView type_info function",
    ),
    Ok(
        "AnimationGroupCompareByGroupID(void const *, void const *)",
    ),
    Ok(
        "AnimationGroupCompareByUID(void const *, void const *)",
    ),
    Ok(
        "tFrameController::tFrameController(void)",
    ),
    Ok(
        "tFrameController::tFrameController(tFrameController *)",
    ),
    Ok(
        "tFrameController::~tFrameController(void)",
    ),
    Ok(
        "tAnimationFrameController::tAnimationFrameController(void)",
    ),
    Ok(
        "tAnimationFrameController::tAnimationFrameController(tAnimationFrameController *)",
    ),
    Ok(
        "tAnimationFrameController::~tAnimationFrameController(void)",
    ),
    Ok(
        "tAnimationFrameController::Reset(void)",
    ),
    Ok(
        "tSimpleFrameController::tSimpleFrameController(void)",
    ),
    Ok(
        "tSimpleFrameController::tSimpleFrameController(tSimpleFrameController *)",
    ),
    Ok(
        "tSimpleFrameController::~tSimpleFrameController(void)",
    ),
    Ok(
        "tSimpleFrameController::SetAnimation(tAnimation *)",
    ),
    Ok(
        "tSimpleFrameController::SetAnimation(tAnimation *, float, float)",
    ),
    Ok(
        "tSimpleFrameController::GetAnimation(void)",
    ),
    Ok(
        "tSimpleFrameController::GetNumFrames(void)",
    ),
    Ok(
        "tSimpleFrameController::SetFrame(float)",
    ),
    Ok(
        "tSimpleFrameController::GetFrame(void)",
    ),
    Ok(
        "tSimpleFrameController::LastFrameReached(void)",
    ),
    Ok(
        "tSimpleFrameController::Advance(float, bool)",
    ),
    Ok(
        "tSimpleFrameController::Reset(void)",
    ),
    Ok(
        "tBlendFrameController::tBlendFrameController(void)",
    ),
    Ok(
        "tBlendFrameController::tBlendFrameController(tBlendFrameController *)",
    ),
    Ok(
        "tBlendFrameController::~tBlendFrameController(void)",
    ),
    Ok(
        "tBlendFrameController::SetAnimation(tAnimation *)",
    ),
    Ok(
        "tBlendFrameController::SetAnimation(tAnimation *, float)",
    ),
    Ok(
        "tBlendFrameController::SetAnimation(tAnimation *, float, float)",
    ),
    Ok(
        "tBlendFrameController::GetAnimation(void)",
    ),
    Ok(
        "tBlendFrameController::GetNumFrames(void)",
    ),
    Ok(
        "tBlendFrameController::SetFrame(float)",
    ),
    Ok(
        "tBlendFrameController::GetFrame(void)",
    ),
    Ok(
        "tBlendFrameController::Advance(float, bool)",
    ),
    Ok(
        "tBlendFrameController::Update(void)",
    ),
    Ok(
        "tBlendFrameController::RemoveOldestAnim(void)",
    ),
    Ok(
        "tBlendFrameController::PlayInfo::PlayInfo(void)",
    ),
    Ok(
        "tBlendFrameController::PlayInfo::~PlayInfo(void)",
    ),
    Ok(
        "tBlendFrameController::PlayInfo::SetAnimation(tAnimation *)",
    ),
    Ok(
        "tBlendFrameController::PlayInfo::Reset(void)",
    ),
    Ok(
        "tBlendFrameController::PlayInfo::NullAnimation(void)",
    ),
    Ok(
        "tBlendFrameController::Reset(void)",
    ),
    Ok(
        "tBlendFrameController::LastFrameReached(void)",
    ),
    Ok(
        "tFrameControllerLoader::tFrameControllerLoader(void)",
    ),
    Ok(
        "tFrameControllerLoader::~tFrameControllerLoader(void)",
    ),
    Ok(
        "tFrameControllerLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tFrameControllerLoader::CheckFC(unsigned int)",
    ),
    Ok(
        "tFrameControllerLoader::LoadFC(char *, unsigned int, tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tAnimationMemoryBlock::tAnimationMemoryBlock(unsigned int)",
    ),
    Ok(
        "tAnimationMemoryBlock::~tAnimationMemoryBlock(void)",
    ),
    Ok(
        "tAnimationMemoryBlock::Allocate(unsigned int, int)",
    ),
    Ok(
        "tAnimationGroup::tAnimationGroup(void)",
    ),
    Ok(
        "tAnimationGroup::~tAnimationGroup(void)",
    ),
    Ok(
        "tAnimationGroup::CleanUp(void)",
    ),
    Ok(
        "tAnimationGroup::GetIntChannel(unsigned int) const",
    ),
    Ok(
        "tAnimationGroup::GetFloat1Channel(unsigned int) const",
    ),
    Ok(
        "tAnimationGroup::GetFloat2Channel(unsigned int) const",
    ),
    Ok(
        "tAnimationGroup::GetVectorChannel(unsigned int) const",
    ),
    Ok(
        "tAnimationGroup::GetRotationChannel(unsigned int) const",
    ),
    Ok(
        "tAnimationGroup::GetEntityChannel(unsigned int) const",
    ),
    Ok(
        "tAnimationGroup::GetBoolChannel(unsigned int) const",
    ),
    Ok(
        "tAnimationGroup::GetColourChannel(unsigned int) const",
    ),
    Ok(
        "tAnimationGroup::GetEventChannel(unsigned int) const",
    ),
    Ok(
        "tAnimationGroup::GetChannel(int) const",
    ),
    Ok(
        "tAnimationGroup::FindChannel(unsigned int) const",
    ),
    Ok(
        "tAnimation::tAnimation(void)",
    ),
    Ok(
        "tAnimation::~tAnimation(void)",
    ),
    Ok(
        "tAnimation::GetGroupByIndex(int) const",
    ),
    Ok(
        "tAnimation::GetGroupById(int) const",
    ),
    Ok(
        "tAnimation::GetGroupByUID(tUidUnaligned) const",
    ),
    Ok(
        "tAnimation::MakeValidFrame(float, float, float, p3dCycleMode) const",
    ),
    Ok(
        "tAnimation::SortAnimationGroups(void)",
    ),
    Ok(
        "tAnimationLoader::tAnimationLoader(void)",
    ),
    Ok(
        "tAnimationLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tAnimationLoader::LoadAnimationGroup(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tFrameController type_info function",
    ),
    Ok(
        "tAnimationFrameController type_info function",
    ),
    Ok(
        "tSimpleFrameController type_info function",
    ),
    Ok(
        "tBlendFrameController type_info function",
    ),
    Ok(
        "tFrameControllerLoader type_info function",
    ),
    Ok(
        "tAnimationMemoryBlock type_info function",
    ),
    Ok(
        "tAnimationGroup type_info function",
    ),
    Ok(
        "tAnimation type_info function",
    ),
    Ok(
        "tAnimationLoader type_info function",
    ),
    Ok(
        "tAnimationFrameController::SetFrameRange(float, float)",
    ),
    Ok(
        "tAnimationFrameController::SetCycleMode(p3dCycleMode)",
    ),
    Ok(
        "tAnimationFrameController::GetCycleMode(void)",
    ),
    Ok(
        "tAnimationFrameController::SetRelativeSpeed(float)",
    ),
    Ok(
        "tAnimationFrameController::GetRelativeSpeed(void)",
    ),
    Ok(
        "tAnimationLoader::~tAnimationLoader(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimatedObject>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tExpressionMixer>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEffect>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tGeometry>::SafeCast(void)",
    ),
    Ok(
        "tEffect type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimatedObject> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tExpressionMixer> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEffect> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tGeometry> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tGeometry>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEffect>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tExpressionMixer>::safe_cast(IRefCount *)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimatedObject>::safe_cast(IRefCount *)",
    ),
    Ok(
        "tAnimatedObjectFactory::tAnimatedObjectFactory(void)",
    ),
    Ok(
        "tAnimatedObjectFactory::~tAnimatedObjectFactory(void)",
    ),
    Ok(
        "tAnimatedObjectFactory::CreateObject(tAnimatedObjectFrameController *, tPose *)",
    ),
    Ok(
        "tAnimatedObjectAnimation::tAnimatedObjectAnimation(void)",
    ),
    Ok(
        "tAnimatedObjectAnimation::~tAnimatedObjectAnimation(void)",
    ),
    Ok(
        "tAnimatedObjectAnimation::Clone(void) const",
    ),
    Ok(
        "tAnimatedObjectAnimation::GetFrameControllerByIndex(unsigned int) const",
    ),
    Ok(
        "tAnimatedObjectAnimation::Advance(float)",
    ),
    Ok(
        "tAnimatedObject::tAnimatedObject(void)",
    ),
    Ok(
        "tAnimatedObject::~tAnimatedObject(void)",
    ),
    Ok(
        "tAnimatedObject::Display(void)",
    ),
    Ok(
        "tAnimatedObject::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "tAnimatedObjectFrameController::tAnimatedObjectFrameController(void)",
    ),
    Ok(
        "tAnimatedObjectFrameController::tAnimatedObjectFrameController(tAnimatedObjectFrameController *)",
    ),
    Ok(
        "tAnimatedObjectFrameController::~tAnimatedObjectFrameController(void)",
    ),
    Ok(
        "tAnimatedObjectFrameController::SetRelativeSpeed(float)",
    ),
    Ok(
        "tAnimatedObjectFrameController::SetFrame(float)",
    ),
    Ok(
        "tAnimatedObjectFrameController::SetFrameRange(float, float)",
    ),
    Ok(
        "tAnimatedObjectFrameController::SetCycleMode(p3dCycleMode)",
    ),
    Ok(
        "tAnimatedObjectFrameController::Advance(float, bool)",
    ),
    Ok(
        "tAnimatedObjectFrameController::Reset(void)",
    ),
    Ok(
        "tAnimatedObjectFrameController::Clone(void)",
    ),
    Ok(
        "tAnimatedObjectFrameController::Update(void)",
    ),
    Ok(
        "tAnimatedObjectFactoryLoader::tAnimatedObjectFactoryLoader(void)",
    ),
    Ok(
        "tAnimatedObjectFactoryLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tAnimatedObjectLoader::tAnimatedObjectLoader(void)",
    ),
    Ok(
        "tAnimatedObjectLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tAnimatedObjectAnimationLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tAnimatedObjectFactory type_info function",
    ),
    Ok(
        "tAnimatedObjectAnimation type_info function",
    ),
    Ok(
        "tAnimatedObject type_info function",
    ),
    Ok(
        "tAnimatedObjectFrameController type_info function",
    ),
    Ok(
        "tAnimatedObjectFactoryLoader type_info function",
    ),
    Ok(
        "tAnimatedObjectLoader type_info function",
    ),
    Ok(
        "tAnimatedObjectFrameController::GetRelativeSpeed(void)",
    ),
    Ok(
        "tAnimatedObjectFrameController::GetNumFrames(void)",
    ),
    Ok(
        "tAnimatedObjectFrameController::GetFrame(void)",
    ),
    Ok(
        "tAnimatedObjectFrameController::GetCycleMode(void)",
    ),
    Ok(
        "tAnimatedObjectFrameController::LastFrameReached(void)",
    ),
    Ok(
        "tAnimatedObjectFactoryLoader::~tAnimatedObjectFactoryLoader(void)",
    ),
    Ok(
        "tAnimatedObjectLoader::~tAnimatedObjectLoader(void)",
    ),
    Ok(
        "global constructors keyed to tAnimatedObjectFactory::tAnimatedObjectFactory(void)",
    ),
    Ok(
        "tBillboardQuadGroupAnimationController::tBillboardQuadGroupAnimationController(void)",
    ),
    Ok(
        "tBillboardQuadGroupAnimationController::tBillboardQuadGroupAnimationController(tBillboardQuadGroupAnimationController *)",
    ),
    Ok(
        "tBillboardQuadGroupAnimationController::~tBillboardQuadGroupAnimationController(void)",
    ),
    Ok(
        "tBillboardQuadGroupAnimationController::Clone(void)",
    ),
    Ok(
        "tBillboardQuadGroupAnimationController::SetBillboardQuadGroup(tBillboardQuadGroup *)",
    ),
    Ok(
        "tBillboardQuadGroupAnimationController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "tBillboardQuadGroupAnimationController::Update(void)",
    ),
    Ok(
        "tBillboardQuadGroupAnimationController type_info function",
    ),
    Ok(
        "tCameraAnimationController::tCameraAnimationController(void)",
    ),
    Ok(
        "tCameraAnimationController::tCameraAnimationController(tCameraAnimationController *)",
    ),
    Ok(
        "tCameraAnimationController::~tCameraAnimationController(void)",
    ),
    Ok(
        "tCameraAnimationController::Clone(void)",
    ),
    Ok(
        "tCameraAnimationController::SetCamera(tVectorCamera *)",
    ),
    Ok(
        "tCameraAnimationController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "tCameraAnimationController::UpdateNoBlending(void)",
    ),
    Ok(
        "tCameraAnimationController::UpdateWithBlending(void)",
    ),
    Ok(
        "tCameraAnimationController::SetOffsetMatrix(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "tCameraAnimationController type_info function",
    ),
    Ok(
        "tChannel::tChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannel::CleanUp(void)",
    ),
    Ok(
        "tChannel::FindBracketKeys(float, int &, int &) const",
    ),
    Ok(
        "tIntChannel::tIntChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tIntChannel::CleanUp(void)",
    ),
    Ok(
        "tIntChannel::GetValue(float, int *) const",
    ),
    Ok(
        "tFloat1Channel::tFloat1Channel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tFloat1Channel::CleanUp(void)",
    ),
    Ok(
        "tFloat1Channel::GetValue(float, float *) const",
    ),
    Ok(
        "tFloat2Channel::tFloat2Channel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tFloat2Channel::CleanUp(void)",
    ),
    Ok(
        "tFloat2Channel::GetValue(float, RadicalMathLibrary::Vector2 *) const",
    ),
    Ok(
        "tVector1DOFChannel::tVector1DOFChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tVector1DOFChannel::CleanUp(void)",
    ),
    Ok(
        "tVector1DOFChannel::GetValue(float, RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "tVector2DOFChannel::tVector2DOFChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tVector2DOFChannel::CleanUp(void)",
    ),
    Ok(
        "tVector2DOFChannel::GetValue(float, RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "tVector3DOFChannel::tVector3DOFChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tVector3DOFChannel::CleanUp(void)",
    ),
    Ok(
        "tVector3DOFChannel::GetValue(float, RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "tQuaternionChannel::tQuaternionChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tQuaternionChannel::CleanUp(void)",
    ),
    Ok(
        "tQuaternionChannel::GetEuler(float, RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "tQuaternionChannel::GetQuaternion(float, RadicalMathLibrary::Quaternion *) const",
    ),
    Ok(
        "tQuaternionChannel::GetMatrix(float, RadicalMathLibrary::Matrix *) const",
    ),
    Ok(
        "tCompressedQuaternionChannel::tCompressedQuaternionChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tCompressedQuaternionChannel::CleanUp(void)",
    ),
    Ok(
        "tCompressedQuaternionChannel::GetEuler(float, RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "tCompressedQuaternionChannel::GetQuaternion(float, RadicalMathLibrary::Quaternion *) const",
    ),
    Ok(
        "tCompressedQuaternionChannel::GetMatrix(float, RadicalMathLibrary::Matrix *) const",
    ),
    Ok(
        "tStringChannel::tStringChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tStringChannel::CleanUp(void)",
    ),
    Ok(
        "tEntityChannel::tEntityChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tEntityChannel::CleanUp(void)",
    ),
    Ok(
        "tEntityChannel::GetValue(float, tEntity **) const",
    ),
    Ok(
        "tEntityChannel::FindEndKeys(float, float *, tEntity **, float *, tEntity **) const",
    ),
    Ok(
        "tBoolChannel::tBoolChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tBoolChannel::CleanUp(void)",
    ),
    Ok(
        "tBoolChannel::GetValue(float, bool *) const",
    ),
    Ok(
        "tColourChannel::tColourChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tColourChannel::CleanUp(void)",
    ),
    Ok(
        "tColourChannel::GetValue(float, pddiColour *) const",
    ),
    Ok(
        "tEventChannel::tEventChannel(int, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tEventChannel::CleanUp(void)",
    ),
    Ok(
        "tEventChannel::DispatchEvents(tEventRecipient *, tEventOrigin *, tName const &, float, float) const",
    ),
    Ok(
        "tChannelLoader::LoadChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannelLoader::LoadIntChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannelLoader::LoadFloat1Channel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannelLoader::LoadFloat2Channel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannelLoader::LoadVectorChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannelLoader::LoadRotationChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannelLoader::LoadStringChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannelLoader::LoadEntityChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannelLoader::LoadBoolChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannelLoader::LoadColourChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannelLoader::LoadEventChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
    ),
    Ok(
        "tChannel type_info function",
    ),
    Ok(
        "tIntChannel type_info function",
    ),
    Ok(
        "tFloat1Channel type_info function",
    ),
    Ok(
        "tFloat2Channel type_info function",
    ),
    Ok(
        "tVector1DOFChannel type_info function",
    ),
    Ok(
        "tVector2DOFChannel type_info function",
    ),
    Ok(
        "tVector3DOFChannel type_info function",
    ),
    Ok(
        "tQuaternionChannel type_info function",
    ),
    Ok(
        "tCompressedQuaternionChannel type_info function",
    ),
    Ok(
        "tStringChannel type_info function",
    ),
    Ok(
        "tEntityChannel type_info function",
    ),
    Ok(
        "tBoolChannel type_info function",
    ),
    Ok(
        "tColourChannel type_info function",
    ),
    Ok(
        "tEventChannel type_info function",
    ),
    Ok(
        "tNonCopyable type_info function",
    ),
    Ok(
        "tChannel::~tChannel(void)",
    ),
    Ok(
        "tIntChannel::~tIntChannel(void)",
    ),
    Ok(
        "tFloat1Channel::~tFloat1Channel(void)",
    ),
    Ok(
        "tFloat2Channel::~tFloat2Channel(void)",
    ),
    Ok(
        "tVector1DOFChannel::~tVector1DOFChannel(void)",
    ),
    Ok(
        "tVector2DOFChannel::~tVector2DOFChannel(void)",
    ),
    Ok(
        "tVector3DOFChannel::~tVector3DOFChannel(void)",
    ),
    Ok(
        "tQuaternionChannel::~tQuaternionChannel(void)",
    ),
    Ok(
        "tCompressedQuaternionChannel::~tCompressedQuaternionChannel(void)",
    ),
    Ok(
        "tStringChannel::~tStringChannel(void)",
    ),
    Ok(
        "tEntityChannel::~tEntityChannel(void)",
    ),
    Ok(
        "tBoolChannel::~tBoolChannel(void)",
    ),
    Ok(
        "tColourChannel::~tColourChannel(void)",
    ),
    Ok(
        "tEventChannel::~tEventChannel(void)",
    ),
    Ok(
        "tEvent::tEvent(void)",
    ),
    Ok(
        "tVectorChannel type_info function",
    ),
    Ok(
        "tRotationChannel type_info function",
    ),
    Ok(
        "tCompositeDrawable::tCompositeDrawable(int)",
    ),
    Ok(
        "tCompositeDrawable::~tCompositeDrawable(void)",
    ),
    Ok(
        "tCompositeDrawable::Clone(tPose *)",
    ),
    Ok(
        "tCompositeDrawable::Display(tPose *)",
    ),
    Ok(
        "tCompositeDrawable::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "tCompositeDrawable::SetPose(tPose *)",
    ),
    Ok(
        "tCompositeDrawable::FindNode(tUidUnaligned)",
    ),
    Ok(
        "tCompositeDrawable::FindNodeIndex(tUidUnaligned)",
    ),
    Ok(
        "tCompositeDrawable::AddProp(tDrawable *, int)",
    ),
    Ok(
        "tCompositeDrawable::AddEffect(tEffect *, int)",
    ),
    Ok(
        "tCompositeDrawable::AddPose(tDrawablePose *)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePropElement::SetDrawable(tDrawable *)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePropElement::Draw(tPose *)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePoseElement::SetDrawable(tDrawable *)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePoseElement::SetPose(tPose *)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePoseElement::Draw(tPose *)",
    ),
    Ok(
        "tCompositeDrawable::DrawableEffectElement::SetDrawable(tDrawable *)",
    ),
    Ok(
        "tCompositeDrawable::DrawableEffectElement::Draw(tPose *)",
    ),
    Ok(
        "tCompositeDrawableLoader::tCompositeDrawableLoader(void)",
    ),
    Ok(
        "tCompositeDrawableLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePropElement type_info function",
    ),
    Ok(
        "tCompositeDrawable::DrawablePoseElement type_info function",
    ),
    Ok(
        "tCompositeDrawable::DrawableEffectElement type_info function",
    ),
    Ok(
        "tArray<tCompositeDrawable::DrawableElement *> type_info function",
    ),
    Ok(
        "tPtrDynamicArray<tCompositeDrawable::DrawableElement *> type_info function",
    ),
    Ok(
        "tCompositeDrawable type_info function",
    ),
    Ok(
        "tCompositeDrawableLoader type_info function",
    ),
    Ok(
        "tPosable::tPosable(void)",
    ),
    Ok(
        "tPtrDynamicArray<tCompositeDrawable::DrawableElement *>::~tPtrDynamicArray(void)",
    ),
    Ok(
        "tCompositeDrawable::Display(void)",
    ),
    Ok(
        "tCompositeDrawable::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "tCompositeDrawable::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "tCompositeDrawable::DrawableElement::Display(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawableElement::SetPose(tPose *)",
    ),
    Ok(
        "tCompositeDrawable::DrawableElement::SetVisibility(bool)",
    ),
    Ok(
        "tCompositeDrawable::DrawableElement::SetLockVisibility(bool)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePropElement::~DrawablePropElement(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePropElement::GetUID(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePropElement::GetDrawable(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePropElement::SetPoseIndex(int)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePropElement::GetWorldMatrix(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePoseElement::~DrawablePoseElement(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePoseElement::GetUID(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePoseElement::GetDrawable(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawablePoseElement::GetWorldMatrix(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawableEffectElement::~DrawableEffectElement(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawableEffectElement::GetUID(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawableEffectElement::SetVisibility(bool)",
    ),
    Ok(
        "tCompositeDrawable::DrawableEffectElement::GetDrawable(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawableEffectElement::SetPoseIndex(int)",
    ),
    Ok(
        "tCompositeDrawable::DrawableEffectElement::GetWorldMatrix(void)",
    ),
    Ok(
        "tCompositeDrawableLoader::~tCompositeDrawableLoader(void)",
    ),
    Ok(
        "tArray<tCompositeDrawable::DrawableElement *>::~tArray(void)",
    ),
    Ok(
        "tArray<tCompositeDrawable::DrawableElement *>::SetSize(int)",
    ),
    Ok(
        "tPtrArray<tCompositeDrawable::DrawableElement *>::SetSize(int)",
    ),
    Ok(
        "tPosable type_info function",
    ),
    Ok(
        "tPtrArray<tCompositeDrawable::DrawableElement *> type_info function",
    ),
    Ok(
        "tPtrArray<tCompositeDrawable::DrawableElement *>::~tPtrArray(void)",
    ),
    Ok(
        "tCompositeDrawable::DrawableElement::~DrawableElement(void)",
    ),
    Ok(
        "tDrawablePose::~tDrawablePose(void)",
    ),
    Ok(
        "tDrawablePose::Display(void)",
    ),
    Ok(
        "tDrawablePose::SetPose(tPose *)",
    ),
    Ok(
        "tDrawablePose::GetPose(void)",
    ),
    Ok(
        "tDrawablePose type_info function",
    ),
    Ok(
        "tDrawablePose::GetSkeleton(void)",
    ),
    Ok(
        "tEvent::GetName(void)",
    ),
    Ok(
        "tEvent::GetParameter(void)",
    ),
    Ok(
        "tEvent::SetParameter(unsigned int)",
    ),
    Ok(
        "tBaseEvent::GetName(void)",
    ),
    Ok(
        "tBaseEvent::SetName(char *)",
    ),
    Ok(
        "tBaseEvent::GetParameter(void)",
    ),
    Ok(
        "tBaseEvent::SetParameter(unsigned int)",
    ),
    Ok(
        "tGenericEvent::~tGenericEvent(void)",
    ),
    Ok(
        "tGenericEvent::GetDataLength(void)",
    ),
    Ok(
        "tGenericEvent::SetDataLength(unsigned int)",
    ),
    Ok(
        "tGenericEvent::SetData(void *, bool)",
    ),
    Ok(
        "tEvent type_info function",
    ),
    Ok(
        "tBaseEvent type_info function",
    ),
    Ok(
        "tGenericEvent type_info function",
    ),
    Ok(
        "tEvent::~tEvent(void)",
    ),
    Ok(
        "tBaseEvent::~tBaseEvent(void)",
    ),
    Ok(
        "tExpression::tExpression(void)",
    ),
    Ok(
        "tExpression::~tExpression(void)",
    ),
    Ok(
        "tExpressionLoader::tExpressionLoader(void)",
    ),
    Ok(
        "tExpressionLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tExpressionGroup::tExpressionGroup(int)",
    ),
    Ok(
        "tExpressionGroup::~tExpressionGroup(void)",
    ),
    Ok(
        "tExpressionGroup::FindExpression(tName const &, int *) const",
    ),
    Ok(
        "tExpressionMixer::tExpressionMixer(void)",
    ),
    Ok(
        "tExpressionMixer::~tExpressionMixer(void)",
    ),
    Ok(
        "tExpressionMixer::SetExpressionGroup(tExpressionGroup *)",
    ),
    Ok(
        "tExpressionMixer::SetExpressionState(tName const &, float)",
    ),
    Ok(
        "tExpressionMixer::ResetToNeutral(void)",
    ),
    Ok(
        "tExpressionGroupLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tExpressionGroupLoader::tExpressionGroupLoader(void)",
    ),
    Ok(
        "tExpressionGroupLoader::tExpressionStore::tExpressionStore(void)",
    ),
    Ok(
        "tExpressionGroupLoader::tExpressionStore::~tExpressionStore(void)",
    ),
    Ok(
        "tExpressionGroupLoader::tExpressionStore::Find(radLoadInventory::SafeCastBase &, tUidUnaligned)",
    ),
    Ok(
        "tExpressionGroupLoader::tExpressionStore::Store(tEntity *)",
    ),
    Ok(
        "tExpressionGroupLoader::tExpressionStore::StoreHandlingCollisions(tEntity *)",
    ),
    Ok(
        "tExpressionMixerLoader::tExpressionMixerLoader(void)",
    ),
    Ok(
        "tExpressionMixerLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tExpression type_info function",
    ),
    Ok(
        "tArray<tExpression *> type_info function",
    ),
    Ok(
        "tPtrArray<tExpression *> type_info function",
    ),
    Ok(
        "tArray<p3dExpressionStage> type_info function",
    ),
    Ok(
        "tExpressionGroup type_info function",
    ),
    Ok(
        "tExpressionMixer type_info function",
    ),
    Ok(
        "tExpressionLoader type_info function",
    ),
    Ok(
        "tExpressionGroupLoader::tExpressionStore type_info function",
    ),
    Ok(
        "tExpressionGroupLoader type_info function",
    ),
    Ok(
        "tExpressionMixerLoader type_info function",
    ),
    Ok(
        "tPtrArray<tExpression *>::~tPtrArray(void)",
    ),
    Ok(
        "tExpressionLoader::~tExpressionLoader(void)",
    ),
    Ok(
        "tExpressionGroupLoader::~tExpressionGroupLoader(void)",
    ),
    Ok(
        "tExpressionMixerLoader::~tExpressionMixerLoader(void)",
    ),
    Ok(
        "tArray<tExpression *>::~tArray(void)",
    ),
    Ok(
        "tArray<p3dExpressionStage>::~tArray(void)",
    ),
    Ok(
        "tArray<tExpression *>::SetSize(int)",
    ),
    Ok(
        "tPtrArray<tExpression *>::SetSize(int)",
    ),
    Ok(
        "tArray<p3dExpressionStage>::SetSize(int)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tExpressionGroup>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tExpressionGroup> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tExpressionGroup>::safe_cast(IRefCount *)",
    ),
    Ok(
        "tExpressionAnimationController::tExpressionAnimationController(void)",
    ),
    Ok(
        "tExpressionAnimationController::tExpressionAnimationController(tExpressionAnimationController *)",
    ),
    Ok(
        "tExpressionAnimationController::~tExpressionAnimationController(void)",
    ),
    Ok(
        "tExpressionAnimationController::Clone(void)",
    ),
    Ok(
        "tExpressionAnimationController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "tExpressionAnimationController::SetTargetMixer(tExpressionMixer *)",
    ),
    Ok(
        "tExpressionAnimationController::GetTargetMixer(void) const",
    ),
    Ok(
        "tExpressionAnimationController::UpdateNoBlending(void)",
    ),
    Ok(
        "tExpressionAnimationController::UpdateWithBlending(void)",
    ),
    Ok(
        "tExpressionAnimationController::ResetAccumulators(void)",
    ),
    Ok(
        "tExpressionAnimationController type_info function",
    ),
    Ok(
        "tLightAnimationController::tLightAnimationController(void)",
    ),
    Ok(
        "tLightAnimationController::tLightAnimationController(tLightAnimationController *)",
    ),
    Ok(
        "tLightAnimationController::~tLightAnimationController(void)",
    ),
    Ok(
        "tLightAnimationController::Clone(void)",
    ),
    Ok(
        "tLightAnimationController::SetLight(tLight *)",
    ),
    Ok(
        "tLightAnimationController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "tLightAnimationController::UpdateNoBlending(void)",
    ),
    Ok(
        "tLightAnimationController::UpdateWithBlending(void)",
    ),
    Ok(
        "tLightAnimationController type_info function",
    ),
    Ok(
        "tMultiController::tMultiController(int, float)",
    ),
    Ok(
        "tMultiController::~tMultiController(void)",
    ),
    Ok(
        "tMultiController::Clone(void)",
    ),
    Ok(
        "tMultiController::Advance(float, bool)",
    ),
    Ok(
        "tMultiController::SetFrame(float)",
    ),
    Ok(
        "tMultiController::GetFrame(void)",
    ),
    Ok(
        "tMultiController::SetFrameRange(float, float)",
    ),
    Ok(
        "tMultiController::GetTrack(unsigned int)",
    ),
    Ok(
        "tMultiController::SetTrack(unsigned int, tFrameController *)",
    ),
    Ok(
        "tMultiController::Update(void)",
    ),
    Ok(
        "tMultiControllerLoader::tMultiControllerLoader(void)",
    ),
    Ok(
        "tMultiControllerLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tMultiController type_info function",
    ),
    Ok(
        "tMultiControllerLoader type_info function",
    ),
    Ok(
        "tMultiController::GetCycleMode(void)",
    ),
    Ok(
        "tMultiController::SetCycleMode(p3dCycleMode)",
    ),
    Ok(
        "tMultiController::GetNumFrames(void)",
    ),
    Ok(
        "tMultiController::SetRelativeSpeed(float)",
    ),
    Ok(
        "tMultiController::GetRelativeSpeed(void)",
    ),
    Ok(
        "tMultiController::LastFrameReached(void)",
    ),
    Ok(
        "tMultiController::Reset(void)",
    ),
    Ok(
        "tMultiControllerLoader::~tMultiControllerLoader(void)",
    ),
    Ok(
        "tPolySkin::tPolySkin(int)",
    ),
    Ok(
        "tPolySkin::~tPolySkin(void)",
    ),
    Ok(
        "tPolySkin::Display(tPose *)",
    ),
    Ok(
        "tPolySkin::DisplayInstanced(tPose *, unsigned int)",
    ),
    Ok(
        "tPolySkin::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "tPolySkinLoader::tPolySkinLoader(void)",
    ),
    Ok(
        "tPolySkinLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tPolySkin type_info function",
    ),
    Ok(
        "tPolySkinLoader::~tPolySkinLoader(void)",
    ),
    Ok(
        "tPolySkinLoader type_info function",
    ),
    Ok(
        "tPolySkin::Display(void)",
    ),
    Ok(
        "tPolySkin::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "tPolySkin::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "tPolySkinLoader::SetOptimise(bool)",
    ),
    Ok(
        "global constructors keyed to tPolySkin::tPolySkin(int)",
    ),
    Ok(
        "tPose::tPose(tSkeleton *)",
    ),
    Ok(
        "tPose::tPose(int)",
    ),
    Ok(
        "tPose::~tPose(void)",
    ),
    Ok(
        "tPose::SetSkeleton(tSkeleton *)",
    ),
    Ok(
        "tPose::FindJoint(tUidUnaligned) const",
    ),
    Ok(
        "tPose::FindJointIndex(tUidUnaligned) const",
    ),
    Ok(
        "tPose::Evaluate(RadicalMathLibrary::Matrix const *)",
    ),
    Ok(
        "tPose::ResetToRestPose(void)",
    ),
    Ok(
        "tPose type_info function",
    ),
    Ok(
        "tPoseAnimationController::tPoseAnimationController(void)",
    ),
    Ok(
        "tPoseAnimationController::tPoseAnimationController(tPoseAnimationController *)",
    ),
    Ok(
        "tPoseAnimationController::~tPoseAnimationController(void)",
    ),
    Ok(
        "tPoseAnimationController::Clone(void)",
    ),
    Ok(
        "tPoseAnimationController::SetPose(tPose *)",
    ),
    Ok(
        "tPoseAnimationController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "tPoseAnimationController::UpdateNoBlending(void)",
    ),
    Ok(
        "tPoseAnimationController::UpdateWithBlending(void)",
    ),
    Ok(
        "tPoseAnimationController type_info function",
    ),
    Ok(
        "tStateSequencerCommand::tStateSequencerCommand(void)",
    ),
    Ok(
        "tStateSequencerCommand::~tStateSequencerCommand(void)",
    ),
    Ok(
        "tStateTransition::tStateTransition(void)",
    ),
    Ok(
        "tStateTransition::~tStateTransition(void)",
    ),
    Ok(
        "tSequencerState::tSequencerState(void)",
    ),
    Ok(
        "tSequencerState::~tSequencerState(void)",
    ),
    Ok(
        "tSequencerState::DefaultTransition(void)",
    ),
    Ok(
        "tSubPartState::tSubPartState(void)",
    ),
    Ok(
        "tSubPartState::~tSubPartState(void)",
    ),
    Ok(
        "tSubPartState::SetState(tSequencerState *, float, float, float)",
    ),
    Ok(
        "tSubPartState::SetEventController(tEventController *)",
    ),
    Ok(
        "tSubPartState::SetAnimationTarget(tBlendFrameController *)",
    ),
    Ok(
        "tSubPartState::Kill(void)",
    ),
    Ok(
        "tSequencer::tSequencer(void)",
    ),
    Ok(
        "tSequencer::~tSequencer(void)",
    ),
    Ok(
        "tSequencer::SetRelativeSpeed(float)",
    ),
    Ok(
        "tSequencer::SetAnimationTarget(tEntity *, bool)",
    ),
    Ok(
        "tSequencer::HandleCommand(tStateSequencerCommand *, tSubPartState *)",
    ),
    Ok(
        "tSequencerLoader::tSequencerLoader(void)",
    ),
    Ok(
        "tSequencerLoader::~tSequencerLoader(void)",
    ),
    Ok(
        "tSequencerLoader::Load(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tSequencerLoader::Load(tFile *, tEntityStore *)",
    ),
    Ok(
        "tSequencerLoader::CheckChunkID(unsigned int)",
    ),
    Ok(
        "tSequencerLoader::ParseScript(TextDataParser *)",
    ),
    Ok(
        "tSequencerLoader::ParseSequencer(TextDataParser *)",
    ),
    Ok(
        "tSequencerLoader::ParseStates(TextDataParser *, tSequencer *)",
    ),
    Ok(
        "tSequencerLoader::ParseState(TextDataParser *, tSequencerState *)",
    ),
    Ok(
        "tSequencerLoader::ParseTransitions(TextDataParser *, tSequencerState *)",
    ),
    Ok(
        "tSequencerLoader::ParseTransition(TextDataParser *, tStateTransition *)",
    ),
    Ok(
        "tSequencerLoader::FixupTransitions(tSequencer *)",
    ),
    Ok(
        "tSequencerLoader::BuildSubParts(tSequencer *)",
    ),
    Ok(
        "tSequencerLoader::FindState(tSequencer *, char *)",
    ),
    Ok(
        "tSEQFileHandler::tSEQFileHandler(void)",
    ),
    Ok(
        "tSEQFileHandler::~tSEQFileHandler(void)",
    ),
    Ok(
        "tSEQFileHandler::CheckExtension(char *)",
    ),
    Ok(
        "tSEQFileHandler::Load(tFile *, tEntityStore *)",
    ),
    Ok(
        "tStateSequencerCommand type_info function",
    ),
    Ok(
        "tStateTransition type_info function",
    ),
    Ok(
        "tSequencerState type_info function",
    ),
    Ok(
        "tArray<tSequencerState *> type_info function",
    ),
    Ok(
        "tPtrArray<tSequencerState *> type_info function",
    ),
    Ok(
        "tArray<tSubPartState> type_info function",
    ),
    Ok(
        "tSequencer type_info function",
    ),
    Ok(
        "tSequencerLoader type_info function",
    ),
    Ok(
        "tSEQFileHandler type_info function",
    ),
    Ok(
        "tEventOriginSequencer::tEventOriginSequencer(void)",
    ),
    Ok(
        "tStateSequencerCommand::SetStartFrame(float)",
    ),
    Ok(
        "tPtrArray<tSequencerState *>::~tPtrArray(void)",
    ),
    Ok(
        "tSequencerLoader::GetChunkID(void)",
    ),
    Ok(
        "tArray<tSequencerState *>::~tArray(void)",
    ),
    Ok(
        "tArray<tSubPartState>::~tArray(void)",
    ),
    Ok(
        "tArray<tSequencerState *>::SetSize(int)",
    ),
    Ok(
        "tPtrArray<tSequencerState *>::SetSize(int)",
    ),
    Ok(
        "tArray<tSubPartState>::SetSize(int)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tBlendFrameController>::SafeCast(void)",
    ),
    Ok(
        "tEventOriginSequencer::~tEventOriginSequencer(void)",
    ),
    Ok(
        "tEventOriginSequencer type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tBlendFrameController> type_info function",
    ),
    Ok(
        "tEventOrigin::tEventOrigin(void)",
    ),
    Ok(
        "tEventOriginSequencer::AddRef(void)",
    ),
    Ok(
        "tEventOriginSequencer::Release(void)",
    ),
    Ok(
        "tEventOriginSequencer::Origin(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tBlendFrameController>::safe_cast(IRefCount *)",
    ),
    Ok(
        "tEventOrigin type_info function",
    ),
    Ok(
        "tEventOrigin::Origin(void)",
    ),
    Ok(
        "tSkeleton::tSkeleton(int)",
    ),
    Ok(
        "tSkeleton::~tSkeleton(void)",
    ),
    Ok(
        "tSkeleton::FindJoint(tUidUnaligned) const",
    ),
    Ok(
        "tSkeleton::FindJointIndex(tUidUnaligned) const",
    ),
    Ok(
        "tSkeleton::NewPose(void)",
    ),
    Ok(
        "tSkeleton::Rebuild(void)",
    ),
    Ok(
        "tSkeletonLoader::tSkeletonLoader(void)",
    ),
    Ok(
        "tSkeletonLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tArray<tSkeleton::Joint> type_info function",
    ),
    Ok(
        "tSkeleton type_info function",
    ),
    Ok(
        "tSkeletonLoader type_info function",
    ),
    Ok(
        "tSkeleton::Joint::Joint(void)",
    ),
    Ok(
        "tSkeletonLoader::~tSkeletonLoader(void)",
    ),
    Ok(
        "tArray<tSkeleton::Joint>::~tArray(void)",
    ),
    Ok(
        "tArray<tSkeleton::Joint>::SetSize(int)",
    ),
    Ok(
        "tShaderAnimationController::tShaderAnimationController(void)",
    ),
    Ok(
        "tShaderAnimationController::tShaderAnimationController(tShaderAnimationController *)",
    ),
    Ok(
        "tShaderAnimationController::~tShaderAnimationController(void)",
    ),
    Ok(
        "tShaderAnimationController::Clone(void)",
    ),
    Ok(
        "tShaderAnimationController::SetShader(tShader *)",
    ),
    Ok(
        "tShaderAnimationController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "tShaderAnimationController::UpdateNoBlending(void)",
    ),
    Ok(
        "tShaderAnimationController::UpdateWithBlending(void)",
    ),
    Ok(
        "tShaderAnimationController type_info function",
    ),
    Ok(
        "tTextureAnimationController::tTextureAnimationController(void)",
    ),
    Ok(
        "tTextureAnimationController::tTextureAnimationController(tTextureAnimationController *)",
    ),
    Ok(
        "tTextureAnimationController::~tTextureAnimationController(void)",
    ),
    Ok(
        "tTextureAnimationController::Clone(void)",
    ),
    Ok(
        "tTextureAnimationController::SetShader(tShader *)",
    ),
    Ok(
        "tTextureAnimationController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "tTextureAnimationController::Update(void)",
    ),
    Ok(
        "tTextureAnimationController type_info function",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::tVertexOffsetExpressionMixer(void)",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::~tVertexOffsetExpressionMixer(void)",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::ValidateExpressionGroup(tExpressionGroup *)",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::SetExpressionGroup(tExpressionGroup *)",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::ValidateTarget(tEntity *)",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::SetTarget(tEntity *)",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::CompactBlendStages(void)",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::ResetAccumulators(void)",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::Update(void)",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::GetVtxOffsets(int)",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::InitOffsetArray(void)",
    ),
    Ok(
        "compareOffsets(void const *, void const *)",
    ),
    Ok(
        "tVertexOffsetExpressionMixer type_info function",
    ),
    Ok(
        "tVertexOffsetExpressionMixer::GetTarget(void) const",
    ),
    Ok(
        "tSimpleVisibilityAnimationController::Update(void)",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController::tSceneGraphVisibilityAnimationController(void)",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController::tSceneGraphVisibilityAnimationController(tSceneGraphVisibilityAnimationController *)",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController::~tSceneGraphVisibilityAnimationController(void)",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController::Clone(void)",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController::SetAnimation(tAnimation *)",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController::SetAnimation(tAnimation *, float, float)",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController::SetDrawable(Scenegraph::Scenegraph *)",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController::RebindAnimationAndDrawable(void)",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController::SetVisibilityOnNode(int, bool)",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController::tCompDrawVisibilityAnimationController(void)",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController::tCompDrawVisibilityAnimationController(tCompDrawVisibilityAnimationController *)",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController::~tCompDrawVisibilityAnimationController(void)",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController::Clone(void)",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController::SetAnimation(tAnimation *)",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController::SetAnimation(tAnimation *, float, float)",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController::SetDrawable(tCompositeDrawable *)",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController::RebindAnimationAndDrawable(void)",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController::SetVisibilityOnNode(int, bool)",
    ),
    Ok(
        "tSimpleVisibilityAnimationController type_info function",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController type_info function",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController type_info function",
    ),
    Ok(
        "tSimpleVisibilityAnimationController::~tSimpleVisibilityAnimationController(void)",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController::HasHirarchy(void)",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController::HasHirarchy(void)",
    ),
    Ok(
        "tVertexAnimController::tVertexAnimController(void)",
    ),
    Ok(
        "tVertexAnimController::~tVertexAnimController(void)",
    ),
    Ok(
        "tVertexAnimController::SetTarget(tVertexAnimObject *)",
    ),
    Ok(
        "tVertexAnimController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "tVertexAnimController::Update(void)",
    ),
    Ok(
        "tVertexAnimController::Clone(void)",
    ),
    Ok(
        "tVertexAnimController::tVertexAnimController(tVertexAnimController *)",
    ),
    Ok(
        "tVertexAnimController type_info function",
    ),
    Ok(
        "tOffsetIndexList::tOffsetIndexList(void)",
    ),
    Ok(
        "tOffsetIndexList::~tOffsetIndexList(void)",
    ),
    Ok(
        "tOffsetIndexList::CreateIndex(int)",
    ),
    Ok(
        "tColourOffsetList::tColourOffsetList(void)",
    ),
    Ok(
        "tColourOffsetList::~tColourOffsetList(void)",
    ),
    Ok(
        "tColourOffsetList::CreateOffsets(int)",
    ),
    Ok(
        "tVectorOffsetList::tVectorOffsetList(void)",
    ),
    Ok(
        "tVectorOffsetList::~tVectorOffsetList(void)",
    ),
    Ok(
        "tVectorOffsetList::CreateOffsets(int)",
    ),
    Ok(
        "tVector2OffsetList::tVector2OffsetList(void)",
    ),
    Ok(
        "tVector2OffsetList::~tVector2OffsetList(void)",
    ),
    Ok(
        "tVector2OffsetList::CreateOffsets(int)",
    ),
    Ok(
        "tVertexAnimKey::tVertexAnimKey(void)",
    ),
    Ok(
        "tVertexAnimKey::~tVertexAnimKey(void)",
    ),
    Ok(
        "tVertexAnimKeyLoader::tVertexAnimKeyLoader(void)",
    ),
    Ok(
        "tVertexAnimKeyLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tOffsetListLoader::LoadObject(tChunkFile *, tEntityStore *, unsigned int, int &)",
    ),
    Ok(
        "tOffsetListLoader::LoadVectorOffsetList(tChunkFile *, tEntityStore *, int &)",
    ),
    Ok(
        "tOffsetListLoader::LoadVector2OffsetList(tChunkFile *, tEntityStore *, int &)",
    ),
    Ok(
        "tOffsetListLoader::LoadColourOffsetList(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tOffsetIndexList type_info function",
    ),
    Ok(
        "tColourOffsetList type_info function",
    ),
    Ok(
        "tVectorOffsetList type_info function",
    ),
    Ok(
        "tVector2OffsetList type_info function",
    ),
    Ok(
        "tVertexAnimKey type_info function",
    ),
    Ok(
        "tVertexAnimKeyLoader type_info function",
    ),
    Ok(
        "tVertexAnimKeyLoader::~tVertexAnimKeyLoader(void)",
    ),
    Ok(
        "tGeometryOffset::tGeometryOffset(tGeometry *)",
    ),
    Ok(
        "tGeometryOffset::~tGeometryOffset(void)",
    ),
    Ok(
        "tVertexOffsetList::tVertexOffsetList(void)",
    ),
    Ok(
        "tVertexOffsetList::SetNormal(int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tVertexOffsetList::AddNormalDiff(int, RadicalMathLibrary::Vector *, float)",
    ),
    Ok(
        "tVertexOffsetList::SetPosition(int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "tVertexOffsetList::AddPositionDiff(int, RadicalMathLibrary::Vector *, float)",
    ),
    Ok(
        "tVertexOffsetList::SetColour(int, tColourOffset *)",
    ),
    Ok(
        "tVertexOffsetList::AddColourDiff(int, tColourOffset *, float)",
    ),
    Ok(
        "tVertexOffsetList::SetUV(int, RadicalMathLibrary::Vector2 *, int)",
    ),
    Ok(
        "tVertexOffsetList::AddUVDiff(int, RadicalMathLibrary::Vector2 *, int, float)",
    ),
    Ok(
        "tVertexOffsetList::Reset(void)",
    ),
    Ok(
        "tVertexOffsetList::~tVertexOffsetList(void)",
    ),
    Ok(
        "tVertexAnimObject::tVertexAnimObject(void)",
    ),
    Ok(
        "tVertexAnimObject::~tVertexAnimObject(void)",
    ),
    Ok(
        "tVertexAnimObject::Reset(void)",
    ),
    Ok(
        "tVertexAnimObject::SetActiveObject(tGeometry *)",
    ),
    Ok(
        "tVertexAnimObject::Display(void)",
    ),
    Ok(
        "tVertexAnimObject::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "tVertexAnimObject::Update(tVertexAnimKey *, int)",
    ),
    Ok(
        "tVertexAnimObject::AddDifference(tVertexAnimKey *, int, float)",
    ),
    Ok(
        "tVertexOffsetList type_info function",
    ),
    Ok(
        "tGeometryOffset type_info function",
    ),
    Ok(
        "tVertexAnimObject type_info function",
    ),
    Ok(
        "tEffectController::tEffectController(void)",
    ),
    Ok(
        "tEffectController::tEffectController(tEffectController *)",
    ),
    Ok(
        "tEffectController::Clone(void)",
    ),
    Ok(
        "tEffectController::Update(void)",
    ),
    Ok(
        "tEffectController::Advance(float, bool)",
    ),
    Ok(
        "tEffectController::~tEffectController(void)",
    ),
    Ok(
        "tEffectController type_info function",
    ),
    Ok(
        "tEffectController::Reset(void)",
    ),
    Ok(
        "tEffectController::LastFrameReached(void)",
    ),
    Ok(
        "tEffectController::SetRelativeSpeed(float)",
    ),
    Ok(
        "tEffectController::GetRelativeSpeed(void)",
    ),
    Ok(
        "tEffectController::GetNumFrames(void)",
    ),
    Ok(
        "tEffectController::SetFrame(float)",
    ),
    Ok(
        "tEffectController::GetFrame(void)",
    ),
    Ok(
        "tEffectController::SetFrameRange(float, float)",
    ),
    Ok(
        "tEffectController::SetCycleMode(p3dCycleMode)",
    ),
    Ok(
        "tEffectController::GetCycleMode(void)",
    ),
    Ok(
        "tLensFlareGroupLoader::tLensFlareGroupLoader(void)",
    ),
    Ok(
        "tLensFlareGroupLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tLensFlareGroupLoader::LoadLensFlare(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tLensFlareGroupLoader type_info function",
    ),
    Ok(
        "tLensFlareGroupLoader::~tLensFlareGroupLoader(void)",
    ),
    Ok(
        "tGeneratorFactoryLoader::LoadGeneratorFactory(unsigned int, tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tEmitterFactoryLoader::LoadEmitterFactory(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tEmitterFactoryLoader::LoadBaseEmitterFactoryData(tChunkFile *, tEntityStore *, tBaseEmitterFactory *)",
    ),
    Ok(
        "tEmitterFactoryLoader::LoadSpriteEmitterFactoryData(tChunkFile *, tEntityStore *, tSpriteEmitterFactory *)",
    ),
    Ok(
        "tEmitterFactoryLoader::LoadBaseParticleData(tAnimation *, tBaseEmitterFactory *)",
    ),
    Ok(
        "tEmitterFactoryLoader::LoadSpriteParticleData(tAnimation *, tSpriteEmitterFactory *)",
    ),
    Ok(
        "tParticleSystemFactoryLoader::tParticleSystemFactoryLoader(void)",
    ),
    Ok(
        "tParticleSystemFactoryLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tParticleSystemLoader::tParticleSystemLoader(void)",
    ),
    Ok(
        "tParticleSystemLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tParticleSystemFactoryLoader type_info function",
    ),
    Ok(
        "tParticleSystemLoader type_info function",
    ),
    Ok(
        "tParticleSystemFactoryLoader::~tParticleSystemFactoryLoader(void)",
    ),
    Ok(
        "tParticleSystemLoader::~tParticleSystemLoader(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tParticleSystemFactory>::SafeCast(void)",
    ),
    Ok(
        "radLoadInventory::SafeCast<tParticleSystemFactory> type_info function",
    ),
    Ok(
        "radLoadInventory::SafeCast<tParticleSystemFactory>::safe_cast(IRefCount *)",
    ),
    Ok(
        "global constructors keyed to tGeneratorFactoryLoader::LoadGeneratorFactory(unsigned int, tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tParticleSystemFactory::tParticleSystemFactory(void)",
    ),
    Ok(
        "tParticleSystemFactory::~tParticleSystemFactory(void)",
    ),
    Ok(
        "tParticleSystemFactory::CreateEffect(tEffectController *)",
    ),
    Ok(
        "tParticleSystem::tParticleSystem(void)",
    ),
    Ok(
        "tParticleSystem::~tParticleSystem(void)",
    ),
    Ok(
        "tParticleSystem::SetRenderModule(tParticleRenderModule *)",
    ),
    Ok(
        "tParticleSystem::GetEmitter(int) const",
    ),
    Ok(
        "tParticleSystem::GetNumLiveParticles(void)",
    ),
    Ok(
        "tParticleSystem::ReleaseParticles(void)",
    ),
    Ok(
        "tParticleSystem::ResetParticles(void)",
    ),
    Ok(
        "tParticleSystem::ResetAnimation(void)",
    ),
    Ok(
        "tParticleSystem::ResetBiases(void)",
    ),
    Ok(
        "tParticleSystem::SetBias(unsigned int, float)",
    ),
    Ok(
        "tParticleSystem::SetBlendRatio(float)",
    ),
    Ok(
        "tParticleSystem::SetFrame(float)",
    ),
    Ok(
        "tParticleSystem::MakeValidFrame(float)",
    ),
    Ok(
        "tParticleSystem::Advance(float)",
    ),
    Ok(
        "tParticleSystem::Update(RadicalMathLibrary::Matrix const *)",
    ),
    Ok(
        "tParticleSystem::Display(void)",
    ),
    Ok(
        "tParticleSystem::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "tParticleSystem::LastFrameReached(void)",
    ),
    Ok(
        "tParticleSystem::SetVelocity(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "tParticleSystem::SortEmitters(void)",
    ),
    Ok(
        "tParticleSystem::ConvertEmittersToLocal(void)",
    ),
    Ok(
        "tParticleSystem::ComputePreciseBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "tParticleSystemFactory type_info function",
    ),
    Ok(
        "tParticleSystem type_info function",
    ),
    Ok(
        "tEffectFactory::~tEffectFactory(void)",
    ),
    Ok(
        "tEffectFactory::tEffectFactory(void)",
    ),
    Ok(
        "tEffect::~tEffect(void)",
    ),
    Ok(
        "tEffect::tEffect(void)",
    ),
    Ok(
        "tParticleSystem::GetFactory(void) const",
    ),
    Ok(
        "tParticleSystem::GetNumFrames(void)",
    ),
    Ok(
        "tParticleSystem::GetFrame(void)",
    ),
    Ok(
        "tParticleSystem::SetFrameRange(float, float)",
    ),
    Ok(
        "tParticleSystem::SetCycleMode(p3dCycleMode)",
    ),
    Ok(
        "tParticleSystem::GetCycleMode(void)",
    ),
    Ok(
        "tParticleSystem::Reset(void)",
    ),
    Ok(
        "tParticleSystem::SetVisibility(bool)",
    ),
    Ok(
        "tParticleSystem::GetVisibility(void)",
    ),
    Ok(
        "tEffectFactory type_info function",
    ),
    Ok(
        "global constructors keyed to tParticleSystemFactory::tParticleSystemFactory(void)",
    ),
    Ok(
        "global constructors keyed to ParticleSystemRandomData::msCurInt",
    ),
    Ok(
        "Scenegraph::TransformAnimationController::TransformAnimationController(void)",
    ),
    Ok(
        "Scenegraph::TransformAnimationController::TransformAnimationController(Scenegraph::TransformAnimationController *)",
    ),
    Ok(
        "Scenegraph::TransformAnimationController::~TransformAnimationController(void)",
    ),
    Ok(
        "Scenegraph::TransformAnimationController::SetTransformNode(Scenegraph::Transform *)",
    ),
    Ok(
        "Scenegraph::TransformAnimationController::Clone(void)",
    ),
    Ok(
        "Scenegraph::TransformAnimationController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "Scenegraph::TransformAnimationController::UpdateNoBlending(void)",
    ),
    Ok(
        "Scenegraph::TransformAnimationController::UpdateWithBlending(void)",
    ),
    Ok(
        "Scenegraph::TransformAnimationController type_info function",
    ),
    Ok(
        "Scenegraph::Scenegraph::Scenegraph(void)",
    ),
    Ok(
        "Scenegraph::Scenegraph::~Scenegraph(void)",
    ),
    Ok(
        "Scenegraph::Scenegraph::SetRoot(Scenegraph::Node *)",
    ),
    Ok(
        "Scenegraph::Scenegraph::UpdateTransform(void)",
    ),
    Ok(
        "Scenegraph::Scenegraph::Display(void)",
    ),
    Ok(
        "Scenegraph::Scenegraph::Search(Scenegraph::Node *, tUidUnaligned)",
    ),
    Ok(
        "Scenegraph::Scenegraph::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "Scenegraph::DrawableCounter::Visit(Scenegraph::Node *)",
    ),
    Ok(
        "Scenegraph::TranslucentDrawableCounter::Visit(Scenegraph::Node *)",
    ),
    Ok(
        "Scenegraph::SceneGraphTraversal::Traverse(Scenegraph::Node *, Scenegraph::SceneGraphVisitor &)",
    ),
    Ok(
        "Scenegraph::Iterator::Iterator(Scenegraph::Scenegraph *)",
    ),
    Ok(
        "Scenegraph::Iterator::~Iterator(void)",
    ),
    Ok(
        "Scenegraph::Iterator::First(void)",
    ),
    Ok(
        "Scenegraph::Iterator::Next(void)",
    ),
    Ok(
        "Scenegraph::LightGroupIterator::First(void)",
    ),
    Ok(
        "Scenegraph::LightGroupIterator::Next(void)",
    ),
    Ok(
        "Scenegraph::LightGroupIterator::GetLightGroup(void)",
    ),
    Ok(
        "Scenegraph::Node::Node(void)",
    ),
    Ok(
        "Scenegraph::Node::~Node(void)",
    ),
    Ok(
        "Scenegraph::Node::SetParent(Scenegraph::Node *)",
    ),
    Ok(
        "Scenegraph::Node::GetParent(void)",
    ),
    Ok(
        "Scenegraph::Node::GetTransform(void)",
    ),
    Ok(
        "Scenegraph::Node::GetWorldTransform(void)",
    ),
    Ok(
        "Scenegraph::Node::SetFlags(bool, unsigned int, Scenegraph::Node::Propagation, bool)",
    ),
    Ok(
        "Scenegraph::Branch::Branch(int)",
    ),
    Ok(
        "Scenegraph::Branch::~Branch(void)",
    ),
    Ok(
        "Scenegraph::Branch::GetNumChildren(void)",
    ),
    Ok(
        "Scenegraph::Branch::GetChild(unsigned int)",
    ),
    Ok(
        "Scenegraph::Branch::AddChild(Scenegraph::Node *)",
    ),
    Ok(
        "Scenegraph::Branch::RemoveChild(Scenegraph::Node *)",
    ),
    Ok(
        "Scenegraph::Branch::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
    ),
    Ok(
        "Scenegraph::Branch::CustomDisplay(RadicalMathLibrary::Matrix const &, Scenegraph::CustomDisplayCallback *)",
    ),
    Ok(
        "Scenegraph::Branch::UpdateTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "Scenegraph::Branch::SetFlags(bool, unsigned int, Scenegraph::Node::Propagation, bool)",
    ),
    Ok(
        "Scenegraph::Branch::Resize(int)",
    ),
    Ok(
        "Scenegraph::Leaf::Leaf(void)",
    ),
    Ok(
        "Scenegraph::Leaf::~Leaf(void)",
    ),
    Ok(
        "Scenegraph::Leaf::GetNumChildren(void)",
    ),
    Ok(
        "Scenegraph::Leaf::GetChild(unsigned int)",
    ),
    Ok(
        "Scenegraph::Leaf::UpdateTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "Scenegraph::Leaf::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
    ),
    Ok(
        "Scenegraph::Leaf::CustomDisplay(RadicalMathLibrary::Matrix const &, Scenegraph::CustomDisplayCallback *)",
    ),
    Ok(
        "Scenegraph::Transform::Transform(int)",
    ),
    Ok(
        "Scenegraph::Transform::~Transform(void)",
    ),
    Ok(
        "Scenegraph::Transform::GetTransform(void)",
    ),
    Ok(
        "Scenegraph::Transform::GetWorldTransform(void)",
    ),
    Ok(
        "Scenegraph::Transform::ModifyTransform(void)",
    ),
    Ok(
        "Scenegraph::Transform::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
    ),
    Ok(
        "Scenegraph::Transform::CustomDisplay(RadicalMathLibrary::Matrix const &, Scenegraph::CustomDisplayCallback *)",
    ),
    Ok(
        "Scenegraph::Transform::UpdateTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "Scenegraph::Drawable::Drawable(tDrawable *)",
    ),
    Ok(
        "Scenegraph::Drawable::~Drawable(void)",
    ),
    Ok(
        "Scenegraph::Drawable::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
    ),
    Ok(
        "Scenegraph::Drawable::CustomDisplay(RadicalMathLibrary::Matrix const &, Scenegraph::CustomDisplayCallback *)",
    ),
    Ok(
        "Scenegraph::Attachment::Attachment(tDrawablePose *, int)",
    ),
    Ok(
        "Scenegraph::Attachment::~Attachment(void)",
    ),
    Ok(
        "Scenegraph::Attachment::AddChild(Scenegraph::Node *)",
    ),
    Ok(
        "Scenegraph::Attachment::SetAttachment(int, Scenegraph::Node *)",
    ),
    Ok(
        "Scenegraph::Attachment::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
    ),
    Ok(
        "Scenegraph::Attachment::EvaluateAttachments(void)",
    ),
    Ok(
        "Scenegraph::Attachment::UpdateTransform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "Scenegraph::Attachment::Resize(int)",
    ),
    Ok(
        "Scenegraph::Visibility::Visibility(int)",
    ),
    Ok(
        "Scenegraph::Visibility::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
    ),
    Ok(
        "Scenegraph::Visibility::CustomDisplay(RadicalMathLibrary::Matrix const &, Scenegraph::CustomDisplayCallback *)",
    ),
    Ok(
        "Scenegraph::Camera::Camera(tCamera *)",
    ),
    Ok(
        "Scenegraph::Camera::~Camera(void)",
    ),
    Ok(
        "Scenegraph::LightGroup::LightGroup(tLightGroup *)",
    ),
    Ok(
        "Scenegraph::LightGroup::~LightGroup(void)",
    ),
    Ok(
        "Scenegraph::LightGroup::GetLights(void)",
    ),
    Ok(
        "Scenegraph::Loader::Loader(void)",
    ),
    Ok(
        "Scenegraph::Loader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "Scenegraph::SceneGraphGenericLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "Scenegraph::SceneGraphGenericLoader::LoadNode(tChunkFile *, tEntityStore *, RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "Scenegraph::Node type_info function",
    ),
    Ok(
        "Scenegraph::Branch type_info function",
    ),
    Ok(
        "Scenegraph::Leaf type_info function",
    ),
    Ok(
        "Scenegraph::Transform type_info function",
    ),
    Ok(
        "Scenegraph::Drawable type_info function",
    ),
    Ok(
        "Scenegraph::Attachment type_info function",
    ),
    Ok(
        "Scenegraph::Camera type_info function",
    ),
    Ok(
        "Scenegraph::LightGroup type_info function",
    ),
    Ok(
        "Scenegraph::Scenegraph type_info function",
    ),
    Ok(
        "Scenegraph::Visibility type_info function",
    ),
    Ok(
        "Scenegraph::Loader type_info function",
    ),
    Ok(
        "Scenegraph::DrawableCounter type_info function",
    ),
    Ok(
        "Scenegraph::TranslucentDrawableCounter type_info function",
    ),
    Ok(
        "Scenegraph::Iterator type_info function",
    ),
    Ok(
        "Scenegraph::LightGroupIterator::~LightGroupIterator(void)",
    ),
    Ok(
        "Scenegraph::LightGroupIterator type_info function",
    ),
    Ok(
        "Scenegraph::ShaderVisitor type_info function",
    ),
    Ok(
        "Scenegraph::Scenegraph::GetBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "Scenegraph::Scenegraph::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
    ),
    Ok(
        "Scenegraph::Visibility::~Visibility(void)",
    ),
    Ok(
        "Scenegraph::SceneGraphGenericLoader::SceneGraphGenericLoader(void)",
    ),
    Ok(
        "Scenegraph::Loader::~Loader(void)",
    ),
    Ok(
        "Scenegraph::SceneGraphVisitor::SceneGraphVisitor(void)",
    ),
    Ok(
        "Scenegraph::TranslucentDrawableCounter::TranslucentDrawableCounter(void)",
    ),
    Ok(
        "Scenegraph::Iterator::IsDone(void)",
    ),
    Ok(
        "Scenegraph::Iterator::GetNode(void)",
    ),
    Ok(
        "Scenegraph::ShaderVisitor::Visit(Scenegraph::Node *)",
    ),
    Ok(
        "Scenegraph::SceneGraphVisitor type_info function",
    ),
    Ok(
        "global constructors keyed to Scenegraph::Scenegraph::Scenegraph(void)",
    ),
    Ok(
        "tPS2FileMap::~tPS2FileMap(void)",
    ),
    Ok(
        "tPS2FileMap::Close(void)",
    ),
    Ok(
        "tPS2FileMap type_info function",
    ),
    Ok(
        "tAmbientLight::tAmbientLight(void)",
    ),
    Ok(
        "tAmbientLight::~tAmbientLight(void)",
    ),
    Ok(
        "tAmbientLight::Update(void)",
    ),
    Ok(
        "tAmbientLight type_info function",
    ),
    Ok(
        "tDirectionalLight::tDirectionalLight(void)",
    ),
    Ok(
        "tDirectionalLight::SetDirection(float, float, float)",
    ),
    Ok(
        "tDirectionalLight::Update(void)",
    ),
    Ok(
        "tDirectionalLight type_info function",
    ),
    Ok(
        "tDirectionalLight::~tDirectionalLight(void)",
    ),
    Ok(
        "DisplayList::DisplayList(void)",
    ),
    Ok(
        "DisplayList::~DisplayList(void)",
    ),
    Ok(
        "DisplayList::Display(void)",
    ),
    Ok(
        "DisplayList::Add(tDrawable *, RadicalMathLibrary::Matrix const *, float)",
    ),
    Ok(
        "DisplayList::Purge(void)",
    ),
    Ok(
        "DisplayList::SetSize(int)",
    ),
    Ok(
        "DisplayList::Sort(void)",
    ),
    Ok(
        "DisplayList::ZSortCompare(void const *, void const *)",
    ),
    Ok(
        "DisplayList::Drawable::Drawable(void)",
    ),
    Ok(
        "tFileFTT::tFileFTT(char const *, bool)",
    ),
    Ok(
        "tFileFTT::~tFileFTT(void)",
    ),
    Ok(
        "tFileFTT::EndOfFile(void)",
    ),
    Ok(
        "tFileFTT::GetSize(void)",
    ),
    Ok(
        "tFileFTT::SetPosition(int)",
    ),
    Ok(
        "tFileFTT::Advance(unsigned int)",
    ),
    Ok(
        "tFileFTT::GetPosition(void)",
    ),
    Ok(
        "tFileFTT::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "tFileFTT::WaitForCompletion(void)",
    ),
    Ok(
        "tFileFTT::GetData(void *, unsigned int, tFile::DataType)",
    ),
    Ok(
        "tFileFTT::SetCompressed(bool)",
    ),
    Ok(
        "tFileFTT::SetUncompressedSize(int)",
    ),
    Ok(
        "tFileFTT::ReadBuffer(char *)",
    ),
    Ok(
        "tFileFTT::FillBuffer(void)",
    ),
    Ok(
        "tFileFTT::OpenFile(void)",
    ),
    Ok(
        "tFileFTT type_info function",
    ),
    Ok(
        "tFileFTT::AddRef(void)",
    ),
    Ok(
        "tFileFTT::Release(void)",
    ),
    Ok(
        "tImageConverter::tImageConverter(void)",
    ),
    Ok(
        "tImageConverter::~tImageConverter(void)",
    ),
    Ok(
        "tImageConverter::ImageToTexture(tImage *, bool)",
    ),
    Ok(
        "tImageConverter::ImageInToVolumeTexture(tImage **, int, tTexture *, int)",
    ),
    Ok(
        "tImageConverter::ImageToVolumeTexture(tImage **, int, int, pddiTextureUsageHint)",
    ),
    Ok(
        "tImageConverter::UpdateTexture(tImage *, tTexture *, int)",
    ),
    Ok(
        "tImageConverter::UpdateSurface(tImage *, pddiLockInfo *)",
    ),
    Ok(
        "tImageConverter::UpdateVolumeTexture(tImage *, pddiLockInfo *, int)",
    ),
    Ok(
        "tImageConverter::FillLockPAL8(tImage *, pddiLockInfo *)",
    ),
    Ok(
        "tImageConverter::FillLockRGB16(tImage *, pddiLockInfo *)",
    ),
    Ok(
        "tImageConverter::FillLockRGB32(tImage *, pddiLockInfo *)",
    ),
    Ok(
        "tImageConverter::LockToImage(pddiLockInfo *)",
    ),
    Ok(
        "tImageConverter::UpdateImage(pddiLockInfo *, tImage *)",
    ),
    Ok(
        "tImageConverter type_info function",
    ),
    Ok(
        "TextDataParser::TextDataParser(tFile *)",
    ),
    Ok(
        "TextDataParser::~TextDataParser(void)",
    ),
    Ok(
        "TextDataParser::Reset(void)",
    ),
    Ok(
        "TextDataParser::Advance(void)",
    ),
    Ok(
        "TextDataParser::AdvanceTo(char *)",
    ),
    Ok(
        "TextDataParser::CurrentToken(char *, int)",
    ),
    Ok(
        "TextDataParser::DupCurrentToken(void)",
    ),
    Ok(
        "TextDataParser::TokenCountAtCurrentBracketLevel(char const *)",
    ),
    Ok(
        "TextDataParser::SkipBracketedSection(void)",
    ),
    Ok(
        "tEventController::tEventController(void)",
    ),
    Ok(
        "tEventController::tEventController(tEventController *)",
    ),
    Ok(
        "tEventController::~tEventController(void)",
    ),
    Ok(
        "tEventController::Clone(void)",
    ),
    Ok(
        "tEventController::ValidateAnimation(tAnimation *)",
    ),
    Ok(
        "tEventController::SetAnimation(tAnimation *)",
    ),
    Ok(
        "tEventController::SetAnimation(tAnimation *, float, float)",
    ),
    Ok(
        "tEventController::SetRecipient(tEventRecipient *)",
    ),
    Ok(
        "tEventController::GetRecipient(void)",
    ),
    Ok(
        "tEventController::SetOrigin(tEventOrigin *)",
    ),
    Ok(
        "tEventController::GetOrigin(void)",
    ),
    Ok(
        "tEventController::Update(void)",
    ),
    Ok(
        "tEventAnimTextLoader::Load(tFile *, tEntityStore *)",
    ),
    Ok(
        "tEventAnimTextLoader::Load(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tEventAnimTextLoader::CheckChunkID(unsigned int)",
    ),
    Ok(
        "tEventAnimTextLoader::ParseScript(TextDataParser *)",
    ),
    Ok(
        "tEventAnimTextLoader::ParseEventAnim(TextDataParser *)",
    ),
    Ok(
        "tEventAnimTextLoader::ParseEventChannel(TextDataParser *, char *&)",
    ),
    Ok(
        "tEventAnimTextLoader::ParseEvent(TextDataParser *, short &)",
    ),
    Ok(
        "tEventAnimTextLoader::ParseEventData(TextDataParser *, tGenericEvent *)",
    ),
    Ok(
        "tEventController type_info function",
    ),
    Ok(
        "tEventAnimTextLoader type_info function",
    ),
    Ok(
        "tEventAnimTextLoader::GetChunkID(void)",
    ),
    Ok(
        "tEventAnimTextLoader::~tEventAnimTextLoader(void)",
    ),
    Ok(
        "tExpressionOffsets::tExpressionOffsets(void)",
    ),
    Ok(
        "tExpressionOffsets::GetNumVerticesForKey(int)",
    ),
    Ok(
        "tExpressionOffsets::InsertList(tExpressionOffsets::OffsetList *, int)",
    ),
    Ok(
        "tExpressionOffsets::hasExpression(int)",
    ),
    Ok(
        "tExpressionOffsets::~tExpressionOffsets(void)",
    ),
    Ok(
        "tExpressionOffsetsLoader::tExpressionOffsetsLoader(void)",
    ),
    Ok(
        "tExpressionOffsetsLoader::LoadObject(tChunkFile *, tEntityStore *)",
    ),
    Ok(
        "tExpressionOffsets type_info function",
    ),
    Ok(
        "tExpressionOffsets::Offset::Offset(void)",
    ),
    Ok(
        "tLensFlareGroup::tLensFlareGroup(void)",
    ),
    Ok(
        "tLensFlareGroup::~tLensFlareGroup(void)",
    ),
    Ok(
        "tLensFlareGroup::ProcessShaders(tDrawable::ShaderCallback &)",
    ),
    Ok(
        "tLensFlareGroup::DisplayEffect(void)",
    ),
    Ok(
        "tLensFlare::tLensFlare(void)",
    ),
    Ok(
        "tLensFlare::~tLensFlare(void)",
    ),
    Ok(
        "tLensFlare::DisplayFlare(ps2PrimStream *, RadicalMathLibrary::Vector, float)",
    ),
    Ok(
        "tArray<tLensFlare *> type_info function",
    ),
    Ok(
        "tPtrArray<tLensFlare *> type_info function",
    ),
    Ok(
        "tLensFlareGroup type_info function",
    ),
    Ok(
        "tLensFlare type_info function",
    ),
    Ok(
        "tPtrArray<tLensFlare *>::~tPtrArray(void)",
    ),
    Ok(
        "tArray<tLensFlare *>::~tArray(void)",
    ),
    Ok(
        "tArray<tLensFlare *>::SetSize(int)",
    ),
    Ok(
        "tPtrArray<tLensFlare *>::SetSize(int)",
    ),
    Ok(
        "tParticlePool::tParticlePool(unsigned int, unsigned int, unsigned int)",
    ),
    Ok(
        "tParticlePool::~tParticlePool(void)",
    ),
    Ok(
        "tParticlePool::RequestParticle(tBaseParticle **, short *)",
    ),
    Ok(
        "tParticlePool::ReleaseParticle(short)",
    ),
    Ok(
        "List<tSpriteParticle>::nextFree(void)",
    ),
    Ok(
        "List<tSpriteParticle>::operator[](short)",
    ),
    Ok(
        "List<tSpriteParticle>::remove(short)",
    ),
    Ok(
        "Node<tSpriteParticle>::Node(void)",
    ),
    Ok(
        "List<tSpriteParticle>::List(unsigned int)",
    ),
    Ok(
        "Node<tSpriteParticle>::~Node(void)",
    ),
    Ok(
        "List<tSpriteParticle>::~List(void)",
    ),
    Ok(
        "tParticlePool type_info function",
    ),
    Ok(
        "tBaseParticle type_info function",
    ),
    Ok(
        "tSpriteParticle type_info function",
    ),
    Ok(
        "tBaseParticle::~tBaseParticle(void)",
    ),
    Ok(
        "tBaseParticle::Initialize(tBaseEmitter *)",
    ),
    Ok(
        "tBaseParticle::Update(float, float, tBaseEmitter *)",
    ),
    Ok(
        "tSpriteParticle::~tSpriteParticle(void)",
    ),
    Ok(
        "tSpriteParticle::Initialize(tBaseEmitter *)",
    ),
    Ok(
        "tSpriteParticle::Update(float, float, tBaseEmitter *)",
    ),
    Ok(
        "global constructors keyed to tParticlePool::tParticlePool(void)",
    ),
    Ok(
        "global destructors keyed to tParticlePool::tParticlePool(void)",
    ),
    Ok(
        "tParticleArray::tParticleArray(tParticlePool *)",
    ),
    Ok(
        "tParticleArray::~tParticleArray(void)",
    ),
    Ok(
        "tParticleArray::AllocateParticles(void)",
    ),
    Ok(
        "tParticleArray::ReleaseParticles(void)",
    ),
    Ok(
        "tParticleArray::UpdateParticles(float, float, tBaseEmitter *)",
    ),
    Ok(
        "tParticleArray::KillAllParticles(void)",
    ),
    Ok(
        "tParticleArray::RefreshParticleArray(void)",
    ),
    Ok(
        "tParticleArray::RejuenateDeadParticle(void)",
    ),
    Ok(
        "tParticleArray::SetNumLiveParticles(int)",
    ),
    Ok(
        "tParticleArray type_info function",
    ),
    Ok(
        "global constructors keyed to tParticleArray::tParticleArray(void)",
    ),
    Ok(
        "tBaseEmitterFactory::tBaseEmitterFactory(void)",
    ),
    Ok(
        "tBaseEmitterFactory::~tBaseEmitterFactory(void)",
    ),
    Ok(
        "tBaseEmitterFactory::SetUpEmitter(tBaseEmitter *)",
    ),
    Ok(
        "tSpriteEmitterFactory::tSpriteEmitterFactory(void)",
    ),
    Ok(
        "tSpriteEmitterFactory::~tSpriteEmitterFactory(void)",
    ),
    Ok(
        "tSpriteEmitterFactory::CreateEmitter(void)",
    ),
    Ok(
        "tSpriteEmitterFactory::CreateLocalEmitter(void)",
    ),
    Ok(
        "tSpriteEmitterFactory::SetUpEmitter(tBaseEmitter *)",
    ),
    Ok(
        "tBaseEmitter::tBaseEmitter(void)",
    ),
    Ok(
        "tBaseEmitter::~tBaseEmitter(void)",
    ),
    Ok(
        "tBaseEmitter::ResetParticles(void)",
    ),
    Ok(
        "tBaseEmitter::ResetAnimation(void)",
    ),
    Ok(
        "tBaseEmitter::ResetBiases(void)",
    ),
    Ok(
        "tBaseEmitter::SetBlendRatio(float)",
    ),
    Ok(
        "tBaseEmitter::SetFrame(float)",
    ),
    Ok(
        "tBaseEmitter::ComputePreciseBoundingBox(RadicalMathLibrary::Box3D *)",
    ),
    Ok(
        "tBaseEmitter::Update(float, float, RadicalMathLibrary::Matrix const *)",
    ),
    Ok(
        "tBaseEmitter::SetBias(unsigned int, float)",
    ),
    Ok(
        "tBaseEmitter::GetBias(unsigned int) const",
    ),
    Ok(
        "tBaseEmitter::ReconnectAnimations(void)",
    ),
    Ok(
        "tBaseEmitter::UpdateEmitterAttributes(void)",
    ),
    Ok(
        "tSpriteEmitter::tSpriteEmitter(void)",
    ),
    Ok(
        "tSpriteEmitter::~tSpriteEmitter(void)",
    ),
    Ok(
        "tSpriteEmitter::Display(void)",
    ),
    Ok(
        "tSpriteEmitter::ResetBiases(void)",
    ),
    Ok(
        "tSpriteEmitter::SetBias(unsigned int, float)",
    ),
    Ok(
        "tSpriteEmitter::GetBias(unsigned int) const",
    ),
    Ok(
        "tSpriteEmitter::ReconnectAnimations(void)",
    ),
    Ok(
        "tSpriteEmitter::UpdateEmitterAttributes(void)",
    ),
    Ok(
        "tLocalSpriteEmitter::Display(void)",
    ),
    Ok(
        "tBaseEmitterFactory type_info function",
    ),
    Ok(
        "tSpriteEmitterFactory type_info function",
    ),
    Ok(
        "tBaseEmitter type_info function",
    ),
    Ok(
        "tSpriteEmitter type_info function",
    ),
    Ok(
        "tLocalSpriteEmitter::~tLocalSpriteEmitter(void)",
    ),
    Ok(
        "tLocalSpriteEmitter type_info function",
    ),
    Ok(
        "tBaseEmitter::GetFrame(void) const",
    ),
    Ok(
        "tLocalSpriteEmitter::tLocalSpriteEmitter(void)",
    ),
    Ok(
        "global constructors keyed to tBaseEmitterFactory::tBaseEmitterFactory(void)",
    ),
    Ok(
        "tBaseGeneratorFactory::tBaseGeneratorFactory(void)",
    ),
    Ok(
        "tBaseGeneratorFactory::~tBaseGeneratorFactory(void)",
    ),
    Ok(
        "tPointGeneratorFactory::tPointGeneratorFactory(void)",
    ),
    Ok(
        "tPointGeneratorFactory::~tPointGeneratorFactory(void)",
    ),
    Ok(
        "tPointGeneratorFactory::CreateGenerator(void)",
    ),
    Ok(
        "tPlaneGeneratorFactory::tPlaneGeneratorFactory(void)",
    ),
    Ok(
        "tPlaneGeneratorFactory::~tPlaneGeneratorFactory(void)",
    ),
    Ok(
        "tPlaneGeneratorFactory::CreateGenerator(void)",
    ),
    Ok(
        "tSphereGeneratorFactory::tSphereGeneratorFactory(void)",
    ),
    Ok(
        "tSphereGeneratorFactory::~tSphereGeneratorFactory(void)",
    ),
    Ok(
        "tSphereGeneratorFactory::CreateGenerator(void)",
    ),
    Ok(
        "tBaseGenerator::tBaseGenerator(void)",
    ),
    Ok(
        "tBaseGenerator::~tBaseGenerator(void)",
    ),
    Ok(
        "tBaseGenerator::SetBlendRatio(float)",
    ),
    Ok(
        "tPointGenerator::tPointGenerator(void)",
    ),
    Ok(
        "tPointGenerator::~tPointGenerator(void)",
    ),
    Ok(
        "tPointGenerator::Generate(float, int, tBaseEmitter *)",
    ),
    Ok(
        "tPointGenerator::SetBias(unsigned int, float)",
    ),
    Ok(
        "tPointGenerator::GetBias(unsigned int) const",
    ),
    Ok(
        "tPointGenerator::ReconnectAnimations(void)",
    ),
    Ok(
        "tPlaneGenerator::tPlaneGenerator(void)",
    ),
    Ok(
        "tPlaneGenerator::~tPlaneGenerator(void)",
    ),
    Ok(
        "tPlaneGenerator::Generate(float, int, tBaseEmitter *)",
    ),
    Ok(
        "tPlaneGenerator::SetBias(unsigned int, float)",
    ),
    Ok(
        "tPlaneGenerator::GetBias(unsigned int) const",
    ),
    Ok(
        "tPlaneGenerator::ReconnectAnimations(void)",
    ),
    Ok(
        "tSphereGenerator::tSphereGenerator(void)",
    ),
    Ok(
        "tSphereGenerator::~tSphereGenerator(void)",
    ),
    Ok(
        "tSphereGenerator::Generate(float, int, tBaseEmitter *)",
    ),
    Ok(
        "tSphereGenerator::SetBias(unsigned int, float)",
    ),
    Ok(
        "tSphereGenerator::GetBias(unsigned int) const",
    ),
    Ok(
        "tSphereGenerator::ReconnectAnimations(void)",
    ),
    Ok(
        "tBaseGeneratorFactory type_info function",
    ),
    Ok(
        "tPointGeneratorFactory type_info function",
    ),
    Ok(
        "tPlaneGeneratorFactory type_info function",
    ),
    Ok(
        "tSphereGeneratorFactory type_info function",
    ),
    Ok(
        "tBaseGenerator type_info function",
    ),
    Ok(
        "tPointGenerator type_info function",
    ),
    Ok(
        "tPlaneGenerator type_info function",
    ),
    Ok(
        "tSphereGenerator type_info function",
    ),
    Ok(
        "global constructors keyed to tBaseGenerator::randomGenerator",
    ),
    Ok(
        "global destructors keyed to tBaseGenerator::randomGenerator",
    ),
    Ok(
        "tOpticEffect::tOpticEffect(void)",
    ),
    Ok(
        "tOpticEffect::~tOpticEffect(void)",
    ),
    Ok(
        "tOpticEffect::Display(void)",
    ),
    Ok(
        "tOpticEffect type_info function",
    ),
    Ok(
        "ps2Atof(char const *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ps2Device::ps2Device(void)",
    ),
    Ok(
        "ps2Device::~ps2Device(void)",
    ),
    Ok(
        "ps2Device::GetLibraryInfo(pddiLibInfo *)",
    ),
    Ok(
        "ps2Device::SetCurrentContext(pddiRenderContext *)",
    ),
    Ok(
        "ps2Device::NewDisplay(int)",
    ),
    Ok(
        "ps2Device::NewRenderContext(pddiDisplay *)",
    ),
    Ok(
        "ps2Device::NewTexture(pddiTextureDesc *)",
    ),
    Ok(
        "ps2Device::NewShader(char const *, char const *)",
    ),
    Ok(
        "ps2Device::NewPrimBuffer(pddiPrimBufferDesc *)",
    ),
    Ok(
        "ps2Device type_info function",
    ),
    Ok(
        "pddiDevice::pddiDevice(void)",
    ),
    Ok(
        "ps2Device::GetCurrentContext(void)",
    ),
    Ok(
        "ps2Device::AddCustomShader(char const *, char const *)",
    ),
    Ok(
        "global constructors keyed to pddiCreate",
    ),
    Ok(
        "global destructors keyed to pddiCreate",
    ),
    Ok(
        "ps2Display::ps2Display(void)",
    ),
    Ok(
        "ps2Display::~ps2Display(void)",
    ),
    Ok(
        "ps2Display::ReallySwapBuffers(void)",
    ),
    Ok(
        "ps2Display::SwapBuffers(void)",
    ),
    Ok(
        "ps2Display::InitDisplay(pddiDisplayInit const *)",
    ),
    Ok(
        "ps2Display::SetupFS_AA(short, short, short, short, short)",
    ),
    Ok(
        "ps2Display::InitDisplay(int, int, int)",
    ),
    Ok(
        "ps2Display::SetFBMask(unsigned int)",
    ),
    Ok(
        "ps2Display::GetCurrentFrame(void) const",
    ),
    Ok(
        "ps2Display::GetFrameAddr(int) const",
    ),
    Ok(
        "ps2Display::Screenshot(pddiColour *, int)",
    ),
    Ok(
        "pddiDisplay type_info function",
    ),
    Ok(
        "ps2Display type_info function",
    ),
    Ok(
        "pddiDisplay::pddiDisplay(void)",
    ),
    Ok(
        "pddiDisplay::IsWidescreen(void)",
    ),
    Ok(
        "pddiDisplay::SetForceVSync(bool)",
    ),
    Ok(
        "pddiDisplay::GetForceVSync(void)",
    ),
    Ok(
        "pddiDisplay::~pddiDisplay(void)",
    ),
    Ok(
        "ps2Display::GetHeight(void)",
    ),
    Ok(
        "ps2Display::GetWidth(void)",
    ),
    Ok(
        "ps2Display::GetDepth(void)",
    ),
    Ok(
        "ps2Display::GetDisplayMode(void)",
    ),
    Ok(
        "ps2Display::GetNumColourBuffer(void)",
    ),
    Ok(
        "ps2Display::GetBufferMask(void)",
    ),
    Ok(
        "ps2Display::GetZBufferFormat(void)",
    ),
    Ok(
        "ps2Display::GetZBufferAddress(void)",
    ),
    Ok(
        "ps2Display::GetFreeVideoMem(void)",
    ),
    Ok(
        "ps2Display::GetFreeTextureMem(void)",
    ),
    Ok(
        "ps2Display::GetTextureMemoryStart(void)",
    ),
    Ok(
        "ps2Display::SetTextureMemoryStart(unsigned int)",
    ),
    Ok(
        "ps2Display::GetTextureMemoryEnd(void)",
    ),
    Ok(
        "ps2Display::SetTextureMemoryEnd(unsigned int)",
    ),
    Ok(
        "ps2Display::GetTextureMemoryFree(void)",
    ),
    Ok(
        "ps2VertexList::ps2VertexList(pddiPrimBufferDesc &)",
    ),
    Ok(
        "ps2VertexList::~ps2VertexList(void)",
    ),
    Ok(
        "ps2VertexList::SetIndices(unsigned short *, int)",
    ),
    Ok(
        "ps2VertexList::WriteComponent(VifStream &, RadicalMathLibrary::Vector *, int, unsigned int, VIF::UnpackFormat)",
    ),
    Ok(
        "ps2VertexList::WriteComponent(VifStream &, RadicalMathLibrary::Vector2 *, int, unsigned int, VIF::UnpackFormat)",
    ),
    Ok(
        "ps2VertexList::WriteComponent(VifStream &, pddiColour *, int, unsigned int, VIF::UnpackFormat, bool)",
    ),
    Ok(
        "ps2VertexList::WritePositions(VifStream &, ps2VertexList::Position *, int, unsigned int)",
    ),
    Ok(
        "ps2VertexList::WriteMatrixIndices(VifStream &, ps2VertexList::MatrixIndices *, int, unsigned int, unsigned int)",
    ),
    Ok(
        "ps2VertexList::WriteSkinWeights(VifStream &, ps2VertexList::SkinWeights *, int, unsigned int)",
    ),
    Ok(
        "ps2VertexList::QuadPartitionVU(ps2VertexList::VUMemDescription *, ps2VertexList::VUMemLayout *)",
    ),
    Ok(
        "ps2VertexList::DeIndex(void)",
    ),
    Ok(
        "ps2VertexList::ComputeDMASize(pddiPrimBufferDesc &, ps2VertexList::VUMemLayout &, unsigned int &, unsigned int &)",
    ),
    Ok(
        "ps2VertexList::WritePacketHeader(VifStream &, int)",
    ),
    Ok(
        "ps2VertexList::CreateDMABuffer(pddiPrimBufferDesc &, void *, unsigned int &)",
    ),
    Ok(
        "ps2VertexList::ComputeOneBoneRLE(ps2VertexList::MatrixIndices *, unsigned int)",
    ),
    Ok(
        "ps2PrimBuffer::ps2PrimBuffer(ps2Context *, pddiPrimBufferDesc *)",
    ),
    Ok(
        "ps2PrimBuffer::~ps2PrimBuffer(void)",
    ),
    Ok(
        "ps2PrimBuffer::LockMemImage(unsigned int)",
    ),
    Ok(
        "ps2PrimBuffer::UnlockMemImage(void)",
    ),
    Ok(
        "ps2PrimBuffer::SetMemImageParam(unsigned int, unsigned int)",
    ),
    Ok(
        "ps2PrimBuffer::SetIndices(unsigned short *, int)",
    ),
    Ok(
        "ps2PrimBuffer::Lock(void)",
    ),
    Ok(
        "ps2PrimBuffer::Unlock(pddiPrimBufferStream *)",
    ),
    Ok(
        "ps2PrimBuffer::ChooseSkinningAddress(void)",
    ),
    Ok(
        "ps2PrimBuffer::Finalize(void)",
    ),
    Ok(
        "pddiPrimBuffer type_info function",
    ),
    Ok(
        "ps2PrimBuffer type_info function",
    ),
    Ok(
        "pddiPrimBufferStream::pddiPrimBufferStream(void)",
    ),
    Ok(
        "pddiPrimBufferStream::Binormal(float, float, float)",
    ),
    Ok(
        "pddiPrimBufferStream::Tangent(float, float, float)",
    ),
    Ok(
        "pddiPrimBuffer::pddiPrimBuffer(void)",
    ),
    Ok(
        "pddiPrimBuffer::Finalize(void)",
    ),
    Ok(
        "pddiPrimBuffer::SetMemImageParam(unsigned int, unsigned int)",
    ),
    Ok(
        "pddiPrimBuffer::SetUsedSize(int)",
    ),
    Ok(
        "pddiPrimBuffer::~pddiPrimBuffer(void)",
    ),
    Ok(
        "ps2PrimBuffer::GetPrimCount(void)",
    ),
    Ok(
        "ps2PrimBuffer::LockIndexBuffer(void)",
    ),
    Ok(
        "ps2PrimBuffer::UnlockIndexBuffer(int)",
    ),
    Ok(
        "ps2PrimBuffer::CheckMemImageVersion(int)",
    ),
    Ok(
        "ps2PrimBuffer::SetUsedSize(int)",
    ),
    Ok(
        "ps2PrimBuffer::Position(float, float, float)",
    ),
    Ok(
        "ps2PrimBuffer::Normal(float, float, float)",
    ),
    Ok(
        "ps2PrimBuffer::Colour(pddiColour, int)",
    ),
    Ok(
        "ps2PrimBuffer::TexCoord4(float, float, float, float, int)",
    ),
    Ok(
        "ps2PrimBuffer::TexCoord1(float, int)",
    ),
    Ok(
        "ps2PrimBuffer::TexCoord2(float, float, int)",
    ),
    Ok(
        "ps2PrimBuffer::TexCoord3(float, float, float, int)",
    ),
    Ok(
        "ps2PrimBuffer::Specular(pddiColour)",
    ),
    Ok(
        "ps2PrimBuffer::SkinIndices(unsigned int, unsigned int, unsigned int, unsigned int)",
    ),
    Ok(
        "ps2PrimBuffer::SkinWeights(float, float, float)",
    ),
    Ok(
        "ps2PrimBuffer::Vertex(RadicalMathLibrary::Vector *, pddiColour)",
    ),
    Ok(
        "ps2PrimBuffer::Vertex(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "ps2PrimBuffer::Vertex(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector2 *)",
    ),
    Ok(
        "ps2PrimBuffer::Vertex(RadicalMathLibrary::Vector *, pddiColour, RadicalMathLibrary::Vector2 *)",
    ),
    Ok(
        "ps2PrimBuffer::Vertex(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector2 *)",
    ),
    Ok(
        "ps2PrimBuffer::Next(void)",
    ),
    Ok(
        "pddiPrimBufferStream type_info function",
    ),
    Ok(
        "ps2ErrorShader::Install(void)",
    ),
    Ok(
        "ps2ErrorShader::ps2ErrorShader(ps2Context *)",
    ),
    Ok(
        "ps2ErrorShader::Validate(unsigned int)",
    ),
    Ok(
        "ps2ErrorShader::Bind(GSContext *, VifStream &)",
    ),
    Ok(
        "ps2ErrorShader type_info function",
    ),
    Ok(
        "pddiShader::CloneSimple(void)",
    ),
    Ok(
        "ps2Shader::ps2Shader(void)",
    ),
    Ok(
        "ps2ErrorShader::GetType(void)",
    ),
    Ok(
        "ps2ErrorShader::~ps2ErrorShader(void)",
    ),
    Ok(
        "ps2Shader type_info function",
    ),
    Ok(
        "pddiShader::pddiShader(void)",
    ),
    Ok(
        "ps2Shader::~ps2Shader(void)",
    ),
    Ok(
        "pddiShader type_info function",
    ),
    Ok(
        "pddiShader::~pddiShader(void)",
    ),
    Ok(
        "ps2LayeredShader::Install(void)",
    ),
    Ok(
        "ps2LayeredShader::ps2LayeredShader(ps2Context *)",
    ),
    Ok(
        "ps2LayeredShader::SetTopTex(pddiTexture *)",
    ),
    Ok(
        "ps2LayeredShader::~ps2LayeredShader(void)",
    ),
    Ok(
        "ps2LayeredShader type_info function",
    ),
    Ok(
        "ps2LayeredShader::GetType(void)",
    ),
    Ok(
        "ps2LightmapShader::Install(void)",
    ),
    Ok(
        "ps2LightmapShader::ps2LightmapShader(ps2Context *)",
    ),
    Ok(
        "ps2LightmapShader::~ps2LightmapShader(void)",
    ),
    Ok(
        "ps2LightmapShader::Reset(void)",
    ),
    Ok(
        "ps2LightmapShader::Validate(unsigned int)",
    ),
    Ok(
        "ps2LightmapShader::Bind(GSContext *, VifStream &)",
    ),
    Ok(
        "ps2LightmapShader::SetBase(pddiTexture *)",
    ),
    Ok(
        "ps2LightmapShader::SetLightmap(pddiTexture *)",
    ),
    Ok(
        "ps2LightmapShader::SetTexture(pddiTexture *, int)",
    ),
    Ok(
        "ps2LightmapShader::SetUVMode(int)",
    ),
    Ok(
        "ps2LightmapShader::SetFilterMode(int)",
    ),
    Ok(
        "ps2LightmapShader::SetBlendMode(int)",
    ),
    Ok(
        "ps2LightmapShader::EnableTwoLayerCBV(int)",
    ),
    Ok(
        "ps2LightmapShader type_info function",
    ),
    Ok(
        "ps2LightmapShader::GetType(void)",
    ),
    Ok(
        "ps2LightmapShader::GetTextureTable(void)",
    ),
    Ok(
        "ps2LightmapShader::GetIntTable(void)",
    ),
    Ok(
        "ps2LightmapShader::SetTopTex(pddiTexture *)",
    ),
    Ok(
        "ps2LightweightShader::Install(void)",
    ),
    Ok(
        "ps2LightweightShader::ps2LightweightShader(ps2Context *)",
    ),
    Ok(
        "ps2LightweightShader::~ps2LightweightShader(void)",
    ),
    Ok(
        "ps2LightweightShader::Validate(unsigned int)",
    ),
    Ok(
        "ps2LightweightShader::Bind(GSContext *, VifStream &)",
    ),
    Ok(
        "ps2LightweightShader::SetTexture(pddiTexture *)",
    ),
    Ok(
        "ps2LightweightShader::SetMipSharpness(float)",
    ),
    Ok(
        "ps2LightweightShader type_info function",
    ),
    Ok(
        "ps2LightweightShader::GetType(void)",
    ),
    Ok(
        "ps2LightweightShader::GetTextureTable(void)",
    ),
    Ok(
        "ps2LightweightShader::GetFloatTable(void)",
    ),
    Ok(
        "ps2ToonShader::Install(void)",
    ),
    Ok(
        "ps2ToonShader::ps2ToonShader(ps2Context *)",
    ),
    Ok(
        "ps2ToonShader::SetStyle(int)",
    ),
    Ok(
        "ps2ToonShader::SetLineWidth(float)",
    ),
    Ok(
        "ps2ToonShader::SetOutlineColour(pddiColour)",
    ),
    Ok(
        "ps2ToonShader::Bind(GSContext *, VifStream &)",
    ),
    Ok(
        "ps2ToonShader::SetBlendMode(int)",
    ),
    Ok(
        "ps2ToonShader::Validate(unsigned int)",
    ),
    Ok(
        "ps2ToonShader::~ps2ToonShader(void)",
    ),
    Ok(
        "ps2ToonShader type_info function",
    ),
    Ok(
        "ps2ToonShader::GetType(void)",
    ),
    Ok(
        "ps2ToonShader::GetTextureTable(void)",
    ),
    Ok(
        "ps2ToonShader::GetIntTable(void)",
    ),
    Ok(
        "ps2ToonShader::GetFloatTable(void)",
    ),
    Ok(
        "ps2ToonShader::GetColourTable(void)",
    ),
    Ok(
        "ps2ToonShader::SetSpecular(pddiColour)",
    ),
    Ok(
        "ps2ToonShader::SetShininess(float)",
    ),
    Ok(
        "float_to_k(float)",
    ),
    Ok(
        "ps2SimpleShader::Install(void)",
    ),
    Ok(
        "ps2SimpleShader::ps2SimpleShader(ps2Context *)",
    ),
    Ok(
        "ps2SimpleShader::~ps2SimpleShader(void)",
    ),
    Ok(
        "ps2SimpleShader::Validate(unsigned int)",
    ),
    Ok(
        "ps2SimpleShader::Bind(GSContext *, VifStream &)",
    ),
    Ok(
        "ps2SimpleShader::GuessVUProgram(void)",
    ),
    Ok(
        "ps2SimpleShader::SetTexture(pddiTexture *)",
    ),
    Ok(
        "ps2SimpleShader::SetUVMode(int)",
    ),
    Ok(
        "ps2SimpleShader::SetFilterMode(int)",
    ),
    Ok(
        "ps2SimpleShader::SetShadeMode(int)",
    ),
    Ok(
        "ps2SimpleShader::EnableLighting(int)",
    ),
    Ok(
        "ps2SimpleShader::SetDiffuse(pddiColour)",
    ),
    Ok(
        "ps2SimpleShader::SetEmissive(pddiColour)",
    ),
    Ok(
        "ps2SimpleShader::SetEmissiveAlpha(int)",
    ),
    Ok(
        "ps2SimpleShader::SetSpecular(pddiColour)",
    ),
    Ok(
        "ps2SimpleShader::SetShininess(float)",
    ),
    Ok(
        "ps2SimpleShader::SetBlendMode(int)",
    ),
    Ok(
        "ps2SimpleShader::EnableAlphaTest(int)",
    ),
    Ok(
        "ps2SimpleShader::SetAlphaCompare(int)",
    ),
    Ok(
        "ps2SimpleShader::SetAlphaThreshold(float)",
    ),
    Ok(
        "ps2SimpleShader::SetMipSharpness(float)",
    ),
    Ok(
        "ps2SimpleShader::CopySettings(ps2SimpleShader const &)",
    ),
    Ok(
        "ps2SimpleShader type_info function",
    ),
    Ok(
        "ps2SimpleShader::GetType(void)",
    ),
    Ok(
        "ps2SimpleShader::GetTextureTable(void)",
    ),
    Ok(
        "ps2SimpleShader::GetIntTable(void)",
    ),
    Ok(
        "ps2SimpleShader::GetFloatTable(void)",
    ),
    Ok(
        "ps2SimpleShader::GetColourTable(void)",
    ),
    Ok(
        "ps2RefractionShader::Install(void)",
    ),
    Ok(
        "ps2RefractionShader::ps2RefractionShader(ps2Context *)",
    ),
    Ok(
        "ps2RefractionShader::~ps2RefractionShader(void)",
    ),
    Ok(
        "ps2RefractionShader::SetRefractionIndex(float)",
    ),
    Ok(
        "ps2RefractionShader::SetRefractionColour(pddiColour)",
    ),
    Ok(
        "ps2RefractionShader::LowQuality(bool)",
    ),
    Ok(
        "ps2RefractionShader::SetRefractionBlend(float)",
    ),
    Ok(
        "ps2RefractionShader::Bind(GSContext *, VifStream &)",
    ),
    Ok(
        "ps2RefractionShader::Validate(unsigned int)",
    ),
    Ok(
        "ps2RefractionShader::CloneSimple(void)",
    ),
    Ok(
        "ps2RefractionShader::RefractionShadersLoaded(void)",
    ),
    Ok(
        "ps2RefractionShader type_info function",
    ),
    Ok(
        "ps2RefractionShader::GetType(void)",
    ),
    Ok(
        "ps2RefractionShader::GetTextureTable(void)",
    ),
    Ok(
        "ps2RefractionShader::GetIntTable(void)",
    ),
    Ok(
        "ps2RefractionShader::GetFloatTable(void)",
    ),
    Ok(
        "ps2RefractionShader::GetColourTable(void)",
    ),
    Ok(
        "ps2ReflectionShader::Install(void)",
    ),
    Ok(
        "ps2ReflectionShader::ps2ReflectionShader(ps2Context *, ps2ReflectionShader::ReflectionMethod)",
    ),
    Ok(
        "ps2ReflectionShader::~ps2ReflectionShader(void)",
    ),
    Ok(
        "ps2ReflectionShader::Reset(void)",
    ),
    Ok(
        "ps2ReflectionShader::Validate(unsigned int)",
    ),
    Ok(
        "ps2ReflectionShader::Bind(GSContext *, VifStream &)",
    ),
    Ok(
        "ps2ReflectionShader::SetBase(pddiTexture *)",
    ),
    Ok(
        "ps2ReflectionShader::SetReflectionMap(pddiTexture *)",
    ),
    Ok(
        "ps2ReflectionShader::SetTexture(pddiTexture *, int)",
    ),
    Ok(
        "ps2ReflectionShader::SetUVMode(int)",
    ),
    Ok(
        "ps2ReflectionShader::SetFilterMode(int)",
    ),
    Ok(
        "ps2ReflectionShader::SetBlendMode(int)",
    ),
    Ok(
        "ps2ReflectionShader::EnableTwoLayerCBV(int)",
    ),
    Ok(
        "ps2ReflectionShader::EnableLighting(int)",
    ),
    Ok(
        "ps2ReflectionShader::SetDiffuse(pddiColour)",
    ),
    Ok(
        "ps2ReflectionShader::SetEmissive(pddiColour)",
    ),
    Ok(
        "ps2ReflectionShader::SetSpecular(pddiColour)",
    ),
    Ok(
        "ps2ReflectionShader::SetEnvBlend(pddiColour)",
    ),
    Ok(
        "ps2ReflectionShader::SetShininess(float)",
    ),
    Ok(
        "ps2ReflectionShader::SetRotVect(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "ps2ReflectionShader type_info function",
    ),
    Ok(
        "ps2ReflectionShader::GetType(void)",
    ),
    Ok(
        "ps2ReflectionShader::GetTextureTable(void)",
    ),
    Ok(
        "ps2ReflectionShader::GetIntTable(void)",
    ),
    Ok(
        "ps2ReflectionShader::GetFloatTable(void)",
    ),
    Ok(
        "ps2ReflectionShader::GetColourTable(void)",
    ),
    Ok(
        "ps2ReflectionShader::GetVectorTable(void)",
    ),
    Ok(
        "ps2ShadowShader::Install(void)",
    ),
    Ok(
        "ps2ShadowShader::ps2ShadowShader(ps2Context *)",
    ),
    Ok(
        "ps2ShadowShader::~ps2ShadowShader(void)",
    ),
    Ok(
        "ps2ShadowShader::Validate(unsigned int)",
    ),
    Ok(
        "ps2ShadowShader::Bind(GSContext *, VifStream &)",
    ),
    Ok(
        "ps2ShadowShader type_info function",
    ),
    Ok(
        "ps2ShadowShader::GetType(void)",
    ),
    Ok(
        "ps2PrimStream::ps2PrimStream(void)",
    ),
    Ok(
        "ps2PrimStream::Begin(ps2Context *, pddiPrimType, unsigned int, unsigned int)",
    ),
    Ok(
        "ps2PrimStream::End(void)",
    ),
    Ok(
        "ps2PrimStream::NewPacket(VifStream *)",
    ),
    Ok(
        "ps2PrimStream::Flush(void)",
    ),
    Ok(
        "ps2PrimStream::NextBuffer(void)",
    ),
    Ok(
        "ps2PrimStream::GetPrimCount(void)",
    ),
    Ok(
        "ps2PrimStream::GetVertexCount(void)",
    ),
    Ok(
        "ps2Texture::ps2Texture(ps2Context *)",
    ),
    Ok(
        "ps2Texture::~ps2Texture(void)",
    ),
    Ok(
        "ps2Texture::NextVramOffset(unsigned int, unsigned int, unsigned int)",
    ),
    Ok(
        "ps2Texture::VramAlloc(unsigned int, unsigned int, unsigned int, unsigned int, unsigned short *, unsigned short *, bool)",
    ),
    Ok(
        "ps2Texture::SetPalette(int, pddiColour *)",
    ),
    Ok(
        "ps2Texture::Create(int, int, int, int, int, pddiTextureType, pddiTextureUsageHint)",
    ),
    Ok(
        "ps2Texture::SetVideoMemoryAddress(unsigned int)",
    ),
    Ok(
        "ps2Texture::BuildDmaChain(void)",
    ),
    Ok(
        "ps2Texture::AddToPacket(unsigned int *) const",
    ),
    Ok(
        "ps2Texture::Lock(int, pddiRect *)",
    ),
    Ok(
        "ps2Texture::Unlock(int)",
    ),
    Ok(
        "pddiTexture type_info function",
    ),
    Ok(
        "ps2Texture type_info function",
    ),
    Ok(
        "pddiTexture::pddiTexture(void)",
    ),
    Ok(
        "pddiTexture::SetCompressedData(int, char const *, int)",
    ),
    Ok(
        "pddiTexture::~pddiTexture(void)",
    ),
    Ok(
        "ps2Texture::GetPixelFormat(void)",
    ),
    Ok(
        "ps2Texture::GetWidth(void)",
    ),
    Ok(
        "ps2Texture::GetHeight(void)",
    ),
    Ok(
        "ps2Texture::GetDepth(void)",
    ),
    Ok(
        "ps2Texture::GetNumMipMaps(void)",
    ),
    Ok(
        "ps2Texture::GetAlphaDepth(void)",
    ),
    Ok(
        "ps2Texture::GetNumPaletteEntries(void)",
    ),
    Ok(
        "ps2Texture::GetPalette(pddiColour *)",
    ),
    Ok(
        "ps2Texture::SetPriority(int)",
    ),
    Ok(
        "ps2Texture::GetPriority(void)",
    ),
    Ok(
        "ps2Texture::Prefetch(void)",
    ),
    Ok(
        "ps2Texture::Discard(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ps2TexCache::ps2TexCache(unsigned int, unsigned int, ps2Context *)",
    ),
    Ok(
        "ps2TexCache::~ps2TexCache(void)",
    ),
    Ok(
        "ps2TexCache::AllocateCache(ps2Texture *)",
    ),
    Ok(
        "ps2TexCache::AllocRaw(int, int)",
    ),
    Ok(
        "ps2TexCache::Insert(ps2Texture *)",
    ),
    Ok(
        "ps2TexCache::Fill(unsigned int, unsigned int, ps2Texture *)",
    ),
    Ok(
        "ps2TexCache::Overlapping(ps2Texture const *, ps2Texture const *) const",
    ),
    Ok(
        "ps2TexCache::ResolveCacheConflict(ps2Texture *, ps2Texture *)",
    ),
    Ok(
        "ps2TexCache::InvalidateTexCache(void)",
    ),
    Ok(
        "ps2TexCache::EnsureResident(VifStream &, ps2Texture *)",
    ),
    Ok(
        "ps2TexCache::EnsureResident(VifStream &, ps2Texture *, ps2Texture *)",
    ),
    Ok(
        "ps2TexCache::EvictTex(ps2Texture *)",
    ),
    Ok(
        "ps2TexCache::Disable(bool)",
    ),
    Ok(
        "ps2TexCache type_info function",
    ),
    Ok(
        "ps2Vram::ps2Vram(ps2Context *)",
    ),
    Ok(
        "ps2Vram::BuildGifStrips(VifStream &, bool)",
    ),
    Ok(
        "ps2Vram::BuildGifStrips(VifStream &, ps2Vram::TexRect const &)",
    ),
    Ok(
        "ps2Vram::BlitBackToFront(void)",
    ),
    Ok(
        "ps2Vram::BlitBackToTexture(unsigned int, unsigned int, pddiColour)",
    ),
    Ok(
        "ps2Vram::DownsampleBackbuffer(pddiRect const *, int)",
    ),
    Ok(
        "ps2VuCodeInit(void)",
    ),
    Ok(
        "pddiRenderState::Sync(pddiRenderContext *)",
    ),
    Ok(
        "pddiViewState::Sync(pddiRenderContext *)",
    ),
    Ok(
        "pddiLightingState::Sync(pddiRenderContext *)",
    ),
    Ok(
        "pddiFogState::Sync(pddiRenderContext *)",
    ),
    Ok(
        "pddiStencilState::Sync(pddiRenderContext *)",
    ),
    Ok(
        "pddiBaseContext::pddiBaseContext(pddiDisplay *, pddiDevice *)",
    ),
    Ok(
        "pddiBaseContext::~pddiBaseContext(void)",
    ),
    Ok(
        "pddiBaseContext::DefaultState(void)",
    ),
    Ok(
        "pddiBaseContext::SyncState(unsigned int)",
    ),
    Ok(
        "pddiBaseContext::BuildStateStacks(void)",
    ),
    Ok(
        "pddiBaseContext::ResetStats(void)",
    ),
    Ok(
        "pddiBaseContext::ComputeFrameStats(void)",
    ),
    Ok(
        "pddiBaseContext::BuildMatrixStacks(void)",
    ),
    Ok(
        "pddiBaseContext::DisplayStats(void)",
    ),
    Ok(
        "pddiBaseContext::BeginFrame(void)",
    ),
    Ok(
        "pddiBaseContext::EndFrame(void)",
    ),
    Ok(
        "pddiBaseContext::SetClearColour(pddiColour)",
    ),
    Ok(
        "pddiBaseContext::GetClearColour(void)",
    ),
    Ok(
        "pddiBaseContext::SetClearDepth(float)",
    ),
    Ok(
        "pddiBaseContext::GetClearDepth(void)",
    ),
    Ok(
        "pddiBaseContext::SetClearStencil(unsigned int)",
    ),
    Ok(
        "pddiBaseContext::GetClearStencil(void)",
    ),
    Ok(
        "pddiBaseContext::Clear(unsigned int)",
    ),
    Ok(
        "pddiBaseContext::IdentityMatrix(pddiMatrixType)",
    ),
    Ok(
        "pddiBaseContext::LoadMatrix(pddiMatrixType, RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "pddiBaseContext::PushMatrix(pddiMatrixType)",
    ),
    Ok(
        "pddiBaseContext::PopMatrix(pddiMatrixType)",
    ),
    Ok(
        "pddiBaseContext::MultMatrix(pddiMatrixType, RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "pddiBaseContext::ScaleMatrix(pddiMatrixType, float, float, float)",
    ),
    Ok(
        "pddiBaseContext::GetMatrix(pddiMatrixType)",
    ),
    Ok(
        "pddiBaseContext::PushIdentityMatrix(pddiMatrixType)",
    ),
    Ok(
        "pddiBaseContext::PushLoadMatrix(pddiMatrixType, RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "pddiBaseContext::PushMultMatrix(pddiMatrixType, RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "pddiBaseContext::SetProjectionMode(pddiProjectionMode)",
    ),
    Ok(
        "pddiBaseContext::GetProjectionMode(void)",
    ),
    Ok(
        "pddiBaseContext::SetViewWindow(float, float, float, float)",
    ),
    Ok(
        "pddiBaseContext::GetViewWindow(float *, float *, float *, float *)",
    ),
    Ok(
        "pddiBaseContext::SetCamera(float, float, float, float)",
    ),
    Ok(
        "pddiBaseContext::GetCamera(float *, float *, float *, float *)",
    ),
    Ok(
        "pddiBaseContext::SetScissor(pddiRect *)",
    ),
    Ok(
        "pddiBaseContext::GetScissor(pddiRect *)",
    ),
    Ok(
        "pddiBaseContext::BeginPrims(pddiShader *, pddiPrimType, unsigned int, int, unsigned int)",
    ),
    Ok(
        "pddiBaseContext::EndPrims(ps2PrimStream *)",
    ),
    Ok(
        "pddiBaseContext::DrawPrimBuffer(pddiShader *, pddiPrimBuffer *)",
    ),
    Ok(
        "pddiBaseContext::DrawString(char const *, int, int, pddiColour)",
    ),
    Ok(
        "pddiBaseContext::GetMaxLights(void)",
    ),
    Ok(
        "pddiBaseContext::SetAmbientLight(pddiColour)",
    ),
    Ok(
        "pddiBaseContext::GetAmbientLight(void)",
    ),
    Ok(
        "pddiBaseContext::SetLight(int, pddiLightDesc *)",
    ),
    Ok(
        "pddiBaseContext::EnableLight(int, bool)",
    ),
    Ok(
        "pddiBaseContext::IsLightEnabled(int)",
    ),
    Ok(
        "pddiBaseContext::SetLightType(int, pddiLightType)",
    ),
    Ok(
        "pddiBaseContext::GetLightType(int)",
    ),
    Ok(
        "pddiBaseContext::SetLightColour(int, pddiColour)",
    ),
    Ok(
        "pddiBaseContext::GetLightColour(int)",
    ),
    Ok(
        "pddiBaseContext::SetLightPosition(int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "pddiBaseContext::GetLightPosition(int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "pddiBaseContext::SetLightDirection(int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "pddiBaseContext::GetLightDirection(int, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "pddiBaseContext::SetLightRange(int, float)",
    ),
    Ok(
        "pddiBaseContext::GetLightRange(int)",
    ),
    Ok(
        "pddiBaseContext::SetLightAttenuation(int, float, float, float)",
    ),
    Ok(
        "pddiBaseContext::GetLightAttenuation(int, float *, float *, float *)",
    ),
    Ok(
        "pddiBaseContext::SetLightCone(int, float, float, float)",
    ),
    Ok(
        "pddiBaseContext::GetLightCone(int, float *, float *, float *)",
    ),
    Ok(
        "pddiBaseContext::SetCullMode(pddiCullMode)",
    ),
    Ok(
        "pddiBaseContext::GetCullMode(void)",
    ),
    Ok(
        "pddiBaseContext::SetColourWrite(bool, bool, bool, bool)",
    ),
    Ok(
        "pddiBaseContext::GetColourWrite(bool *, bool *, bool *, bool *)",
    ),
    Ok(
        "pddiBaseContext::EnableZBuffer(bool)",
    ),
    Ok(
        "pddiBaseContext::IsZBufferEnabled(void)",
    ),
    Ok(
        "pddiBaseContext::SetZCompare(pddiCompareMode)",
    ),
    Ok(
        "pddiBaseContext::GetZCompare(void)",
    ),
    Ok(
        "pddiBaseContext::SetZWrite(bool)",
    ),
    Ok(
        "pddiBaseContext::GetZWrite(void)",
    ),
    Ok(
        "pddiBaseContext::SetZBias(float)",
    ),
    Ok(
        "pddiBaseContext::GetZBias(void)",
    ),
    Ok(
        "pddiBaseContext::SetZRange(float, float)",
    ),
    Ok(
        "pddiBaseContext::GetZRange(float *, float *)",
    ),
    Ok(
        "pddiBaseContext::EnableStencilBuffer(bool)",
    ),
    Ok(
        "pddiBaseContext::IsStencilBufferEnabled(void)",
    ),
    Ok(
        "pddiBaseContext::SetStencilCompare(pddiCompareMode)",
    ),
    Ok(
        "pddiBaseContext::GetStencilCompare(void)",
    ),
    Ok(
        "pddiBaseContext::SetStencilRef(int)",
    ),
    Ok(
        "pddiBaseContext::GetStencilRef(void)",
    ),
    Ok(
        "pddiBaseContext::SetStencilMask(unsigned int)",
    ),
    Ok(
        "pddiBaseContext::GetStencilMask(void)",
    ),
    Ok(
        "pddiBaseContext::SetStencilWriteMask(unsigned int)",
    ),
    Ok(
        "pddiBaseContext::GetStencilWriteMask(void)",
    ),
    Ok(
        "pddiBaseContext::SetStencilOp(pddiStencilOp, pddiStencilOp, pddiStencilOp)",
    ),
    Ok(
        "pddiBaseContext::GetStencilOp(pddiStencilOp *, pddiStencilOp *, pddiStencilOp *)",
    ),
    Ok(
        "pddiBaseContext::SetFillMode(pddiFillMode)",
    ),
    Ok(
        "pddiBaseContext::GetFillMode(void)",
    ),
    Ok(
        "pddiBaseContext::EnableFog(bool)",
    ),
    Ok(
        "pddiBaseContext::IsFogEnabled(void)",
    ),
    Ok(
        "pddiBaseContext::SetFog(pddiColour, float, float)",
    ),
    Ok(
        "pddiBaseContext::GetFog(pddiColour *, float *, float *)",
    ),
    Ok(
        "pddiBaseContext::GetIntStat(pddiStatType)",
    ),
    Ok(
        "pddiBaseContext::GetFloatStat(pddiStatType)",
    ),
    Ok(
        "pddiBaseContext::EnableStatsOverlay(bool)",
    ),
    Ok(
        "pddiBaseContext::IsStatsOverlayEnabled(void)",
    ),
    Ok(
        "pddiBaseContext::PushState(pddiStateMask)",
    ),
    Ok(
        "pddiBaseContext::PopState(pddiStateMask)",
    ),
    Ok(
        "pddiMemRegAlloc(void *, unsigned int)",
    ),
    Ok(
        "pddiMemRegFree(void *)",
    ),
    Ok(
        "pddiDevice::SetMessageCallback(pddiDevice::MessageCallback *)",
    ),
    Ok(
        "pddiBaseContext::GetExtension(unsigned int)",
    ),
    Ok(
        "pddiBaseContext::VerifyExtension(unsigned int)",
    ),
    Ok(
        "pddiExtMemRegistration::pddiExtMemRegistration(void)",
    ),
    Ok(
        "_pddiExtMemRegistration::_pddiExtMemRegistration(void)",
    ),
    Ok(
        "_pddiExtMemRegistration::~_pddiExtMemRegistration(void)",
    ),
    Ok(
        "pddiDevice type_info function",
    ),
    Ok(
        "pddiRenderContext type_info function",
    ),
    Ok(
        "pddiStack<RadicalMathLibrary::Matrix> type_info function",
    ),
    Ok(
        "pddiMatrixStack type_info function",
    ),
    Ok(
        "pddiRenderState type_info function",
    ),
    Ok(
        "pddiViewState type_info function",
    ),
    Ok(
        "pddiLightingState type_info function",
    ),
    Ok(
        "pddiFogState type_info function",
    ),
    Ok(
        "pddiStencilState type_info function",
    ),
    Ok(
        "pddiBaseContext type_info function",
    ),
    Ok(
        "pddiStack<pddiViewState> type_info function",
    ),
    Ok(
        "pddiStack<pddiRenderState> type_info function",
    ),
    Ok(
        "pddiStack<pddiLightingState> type_info function",
    ),
    Ok(
        "pddiStack<pddiFogState> type_info function",
    ),
    Ok(
        "pddiStack<pddiStencilState> type_info function",
    ),
    Ok(
        "pddiDevice::~pddiDevice(void)",
    ),
    Ok(
        "pddiRenderContext::pddiRenderContext(void)",
    ),
    Ok(
        "pddiRenderContext::~pddiRenderContext(void)",
    ),
    Ok(
        "pddiExtension::pddiExtension(void)",
    ),
    Ok(
        "pddiMatrixStack::~pddiMatrixStack(void)",
    ),
    Ok(
        "pddiStack<RadicalMathLibrary::Matrix>::~pddiStack(void)",
    ),
    Ok(
        "pddiRenderState::pddiRenderState(void)",
    ),
    Ok(
        "pddiViewState::pddiViewState(void)",
    ),
    Ok(
        "pddiLightingState::pddiLightingState(void)",
    ),
    Ok(
        "pddiFogState::pddiFogState(void)",
    ),
    Ok(
        "pddiStencilState::pddiStencilState(void)",
    ),
    Ok(
        "pddiBaseContext::DrawSync(void)",
    ),
    Ok(
        "pddiBaseContext::SetRenderTarget(pddiTexture *)",
    ),
    Ok(
        "pddiBaseContext::Screenshot(pddiColour *, int)",
    ),
    Ok(
        "pddiStack<pddiViewState>::~pddiStack(void)",
    ),
    Ok(
        "pddiStack<pddiRenderState>::~pddiStack(void)",
    ),
    Ok(
        "pddiStack<pddiLightingState>::~pddiStack(void)",
    ),
    Ok(
        "pddiStack<pddiFogState>::~pddiStack(void)",
    ),
    Ok(
        "pddiStack<pddiStencilState>::~pddiStack(void)",
    ),
    Ok(
        "pddiExtension type_info function",
    ),
    Ok(
        "pddiExtMemRegistration type_info function",
    ),
    Ok(
        "pddiState type_info function",
    ),
    Ok(
        "_pddiExtMemRegistration type_info function",
    ),
    Ok(
        "pddiExtension::~pddiExtension(void)",
    ),
    Ok(
        "pddiExtMemRegistration::~pddiExtMemRegistration(void)",
    ),
    Ok(
        "pddiLight::pddiLight(void)",
    ),
    Ok(
        "pddiState::pddiState(void)",
    ),
    Ok(
        "_pddiExtMemRegistration::Register(pddiExtMemRegistration::CallBack *)",
    ),
    Ok(
        "global constructors keyed to pddiRenderState::Sync(pddiRenderContext *)",
    ),
    Ok(
        "global destructors keyed to pddiRenderState::Sync(pddiRenderContext *)",
    ),
    Ok(
        "pddiBaseShader::SetTexture(unsigned int, pddiTexture *)",
    ),
    Ok(
        "pddiBaseShader::SetInt(unsigned int, int)",
    ),
    Ok(
        "pddiBaseShader::SetFloat(unsigned int, float)",
    ),
    Ok(
        "pddiBaseShader::SetColour(unsigned int, pddiColour)",
    ),
    Ok(
        "pddiBaseShader::SetVector(unsigned int, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "pddiBaseShader::SetMatrix(unsigned int, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "pddiBaseShader::InstallShader(char const *, pddiBaseShader *(*)(pddiRenderContext *, char const *, char const *), char const *)",
    ),
    Ok(
        "pddiBaseShader::AllocateShader(pddiRenderContext *, char const *, char const *)",
    ),
    Ok(
        "pddiBaseShader type_info function",
    ),
    Ok(
        "pddiBaseShader::~pddiBaseShader(void)",
    ),
    Ok(
        "pddiBaseShader::GetTextureTable(void)",
    ),
    Ok(
        "pddiBaseShader::GetIntTable(void)",
    ),
    Ok(
        "pddiBaseShader::GetFloatTable(void)",
    ),
    Ok(
        "pddiBaseShader::GetColourTable(void)",
    ),
    Ok(
        "pddiBaseShader::GetVectorTable(void)",
    ),
    Ok(
        "pddiBaseShader::GetMatrixTable(void)",
    ),
    Ok(
        "StoreTextureVIF1(unsigned long long *, short, short, short, short, short, short, short)",
    ),
    Ok(
        "EE::malloc_temp(int)",
    ),
    Ok(
        "EE::free_temp(void *)",
    ),
    Ok(
        "pddiFont::pddiFont(pddiRenderContext *)",
    ),
    Ok(
        "pddiFont::~pddiFont(void)",
    ),
    Ok(
        "pddiFont::Print(char const *, int, int, float, pddiColour)",
    ),
    Ok(
        "ps2MFIFO::ps2MFIFO(int)",
    ),
    Ok(
        "ps2MFIFO::Enable(bool)",
    ),
    Ok(
        "ps2MFIFO::FlushSPR(void)",
    ),
    Ok(
        "ps2MFIFO::Flush(void)",
    ),
    Ok(
        "ps2MFIFO::Add(void *, unsigned int)",
    ),
    Ok(
        "pddiObject::pddiObject(void)",
    ),
    Ok(
        "pddiObject::~pddiObject(void)",
    ),
    Ok(
        "pddiObject::AddRef(void)",
    ),
    Ok(
        "pddiObject::Release(void)",
    ),
    Ok(
        "pddiObject::GetLastError(void)",
    ),
    Ok(
        "pddiObject type_info function",
    ),
    Ok(
        "VifStream::Unpack(unsigned int, unsigned int, unsigned int, void *, VIF::UnpackAddressMode)",
    ),
    Ok(
        "ps2Context::ps2Context(pddiDisplay *, pddiDevice *)",
    ),
    Ok(
        "ps2Context::~ps2Context(void)",
    ),
    Ok(
        "ps2Context::RemoveIntc(void)",
    ),
    Ok(
        "ps2Context::AddIntc(void)",
    ),
    Ok(
        "ps2Context::DisplayReset(void)",
    ),
    Ok(
        "ps2Context::ClearVRAM(unsigned char, unsigned char, unsigned char, unsigned char)",
    ),
    Ok(
        "ps2Context::LoadMicrocode(void)",
    ),
    Ok(
        "ps2Context::GetFreeMicrocodeAddress(void)",
    ),
    Ok(
        "ps2Context::SyncScratchPad(void)",
    ),
    Ok(
        "ps2Context::Clear(unsigned int)",
    ),
    Ok(
        "ps2Context::BeginFrame(void)",
    ),
    Ok(
        "ps2Context::EndFrame(void)",
    ),
    Ok(
        "ps2Context::BeginTiming(void)",
    ),
    Ok(
        "ps2Context::EndTiming(void)",
    ),
    Ok(
        "ps2Context::SyncGSPath(void)",
    ),
    Ok(
        "ps2Context::WaitVSync(void)",
    ),
    Ok(
        "ps2Context::SetGSRegister(unsigned long, unsigned long)",
    ),
    Ok(
        "ps2Context::LoadHardwareMatrix(pddiMatrixType)",
    ),
    Ok(
        "ps2Context::SetupHardwareProjection(pddiViewState const *, float, float)",
    ),
    Ok(
        "ps2Context::SetupHardwareLight(int)",
    ),
    Ok(
        "ps2Context::LazyStateSet(void)",
    ),
    Ok(
        "ps2Context::SetZRange(float, float)",
    ),
    Ok(
        "ps2Context::SetViewWindow(float, float, float, float)",
    ),
    Ok(
        "ps2Context::SetColourWrite(bool, bool, bool, bool)",
    ),
    Ok(
        "ps2Context::EnableZBuffer(bool)",
    ),
    Ok(
        "ps2Context::SetZWrite(bool)",
    ),
    Ok(
        "ps2Context::SetDestAlphaTest(ps2DestAlphaTestMode)",
    ),
    Ok(
        "ps2Context::SetFog(pddiColour, float, float)",
    ),
    Ok(
        "ps2Context::SetZCompare(pddiCompareMode)",
    ),
    Ok(
        "ps2Context::SetCullMode(pddiCullMode)",
    ),
    Ok(
        "ps2Context::GetCullMode(void)",
    ),
    Ok(
        "ps2Context::SetAmbientLight(pddiColour)",
    ),
    Ok(
        "ps2Context::EnableClipper(bool)",
    ),
    Ok(
        "ps2Context::DrawPrimBuffer(pddiShader *, pddiPrimBuffer *)",
    ),
    Ok(
        "ps2Context::BeginPrims(pddiShader *, pddiPrimType, unsigned int, int, unsigned int)",
    ),
    Ok(
        "ps2Context::EndPrims(ps2PrimStream *)",
    ),
    Ok(
        "ps2Context::RebuildTransformContext(pddiViewState const *, float, float)",
    ),
    Ok(
        "ps2Context::GetScissorRegion(int *, int *, int *, int *)",
    ),
    Ok(
        "ps2Context::PreMultiplyLights(ps2LightingProperties const *)",
    ),
    Ok(
        "ps2Context::GetExtension(unsigned int)",
    ),
    Ok(
        "ps2Context::VerifyExtension(unsigned int)",
    ),
    Ok(
        "ps2Context::DrawSync(void)",
    ),
    Ok(
        "ps2Context::HardwareZbufferFog(int, int, int, int, float, float)",
    ),
    Ok(
        "ps2Context::SetShadowColour(int, int, int, int)",
    ),
    Ok(
        "ps2Context::SwirlyEffect(float, float, float, int)",
    ),
    Ok(
        "ps2Context::PreSwapProcess(unsigned int, int)",
    ),
    Ok(
        "ps2Context::ClearDestAlpha(pddiRect const *)",
    ),
    Ok(
        "ps2Context::SampleDestAlphaAndFill(pddiRect const *)",
    ),
    Ok(
        "ps2Context::TransformToScreen(RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "ps2Context::MotionBlur(unsigned int, unsigned int, pddiRect const *, pddiRect const *)",
    ),
    Ok(
        "ps2Context::RenderMotionBlur(void)",
    ),
    Ok(
        "ps2Context::GetBackBufferVRAM(void)",
    ),
    Ok(
        "ps2Context type_info function",
    ),
    Ok(
        "ps2ExtPS2Control type_info function",
    ),
    Ok(
        "ps2ExtFramebufferEffects type_info function",
    ),
    Ok(
        "pddiExtFramebufferEffects::pddiExtFramebufferEffects(void)",
    ),
    Ok(
        "pddiExtPS2Control::pddiExtPS2Control(void)",
    ),
    Ok(
        "ps2Context::GetMaxLights(void)",
    ),
    Ok(
        "ps2Context::GetMaxTextureDimension(void)",
    ),
    Ok(
        "ps2Context::SetupHardwareProjection(void)",
    ),
    Ok(
        "ps2ExtPS2Control::~ps2ExtPS2Control(void)",
    ),
    Ok(
        "ps2ExtPS2Control::LoadMicrocode(void)",
    ),
    Ok(
        "ps2ExtPS2Control::GetFreeMicrocodeAddress(void)",
    ),
    Ok(
        "ps2ExtPS2Control::SyncScratchPad(void)",
    ),
    Ok(
        "ps2ExtPS2Control::EnableClipper(bool)",
    ),
    Ok(
        "ps2ExtPS2Control::SetDestAlphaTest(ps2DestAlphaTestMode)",
    ),
    Ok(
        "ps2ExtPS2Control::ClearVRAM(unsigned char, unsigned char, unsigned char, unsigned char)",
    ),
    Ok(
        "ps2ExtPS2Control::EnableMotionBlur(bool, float, float, float)",
    ),
    Ok(
        "ps2ExtPS2Control::EnableFSAA(int)",
    ),
    Ok(
        "ps2ExtPS2Control::BeginStencilPass(int)",
    ),
    Ok(
        "ps2ExtPS2Control::EndStencilPass(int)",
    ),
    Ok(
        "ps2ExtPS2Control::HardwareZbufferFog(int, int, int, int, float, float)",
    ),
    Ok(
        "ps2ExtPS2Control::SetShadowColour(int, int, int, int)",
    ),
    Ok(
        "ps2ExtPS2Control::SwirlyEffect(float, float, float, int)",
    ),
    Ok(
        "ps2ExtPS2Control::InvalidateTexCache(void)",
    ),
    Ok(
        "ps2ExtPS2Control::AddVU1Program(char const *, unsigned int, int, bool)",
    ),
    Ok(
        "ps2ExtPS2Control::SetVU1CodePath(int)",
    ),
    Ok(
        "ps2ExtPS2Control::GetVU1ProgramAddress(int)",
    ),
    Ok(
        "ps2ExtPS2Control::GetVU1ProgramAddress(char const *)",
    ),
    Ok(
        "ps2ExtPS2Control::GetBackBufferVRAM(void)",
    ),
    Ok(
        "ps2ExtPS2Control::TransformToScreen(RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "ps2ExtPS2Control::ClearDestAlpha(pddiRect const *)",
    ),
    Ok(
        "ps2ExtPS2Control::SampleDestAlphaAndFill(pddiRect const *)",
    ),
    Ok(
        "ps2ExtPS2Control::SetBrightness(pddiColour)",
    ),
    Ok(
        "ps2ExtPS2Control::EnableTextures(bool)",
    ),
    Ok(
        "ps2ExtPS2Control::DisableTexCache(bool)",
    ),
    Ok(
        "ps2ExtPS2Control::DisplayVram(ps2VramView)",
    ),
    Ok(
        "ps2ExtPS2Control::ForceMFIFOSync(bool)",
    ),
    Ok(
        "ps2ExtPS2Control::MFIFOEnable(bool)",
    ),
    Ok(
        "ps2ExtFramebufferEffects::~ps2ExtFramebufferEffects(void)",
    ),
    Ok(
        "ps2ExtFramebufferEffects::EnableMotionBlur(bool, float, float, bool)",
    ),
    Ok(
        "ps2ExtFramebufferEffects::RenderMotionBlur(void)",
    ),
    Ok(
        "ps2ExtFramebufferEffects::SetQuality(pddiExtFramebufferEffects::Quality)",
    ),
    Ok(
        "pddiExtFramebufferEffects type_info function",
    ),
    Ok(
        "pddiExtPS2Control type_info function",
    ),
    Ok(
        "pddiExtFramebufferEffects::~pddiExtFramebufferEffects(void)",
    ),
    Ok(
        "pddiExtPS2Control::~pddiExtPS2Control(void)",
    ),
    Ok(
        "global constructors keyed to ps2Context::GetContext(void)",
    ),
    Ok(
        "ps2MatrixPalette::BuildPacket(unsigned int *&)",
    ),
    Ok(
        "ps2MatrixPalette::Init(unsigned int)",
    ),
    Ok(
        "ps2ExtHardwareSkinning::ps2ExtHardwareSkinning(ps2Context *)",
    ),
    Ok(
        "ps2ExtHardwareSkinning::SetMatrixCount(unsigned int)",
    ),
    Ok(
        "ps2ExtHardwareSkinning::SetMatrix(unsigned int, RadicalMathLibrary::Matrix *)",
    ),
    Ok(
        "ps2ExtHardwareSkinning::Begin(void)",
    ),
    Ok(
        "ps2ExtHardwareSkinning::End(void)",
    ),
    Ok(
        "ps2ExtHardwareSkinning::DrawSkin(pddiShader *, pddiPrimBuffer *)",
    ),
    Ok(
        "ps2ExtHardwareSkinning::~ps2ExtHardwareSkinning(void)",
    ),
    Ok(
        "ps2ExtHardwareSkinning type_info function",
    ),
    Ok(
        "pddiExtHardwareSkinning::pddiExtHardwareSkinning(void)",
    ),
    Ok(
        "ps2MatrixPalette::ps2MatrixPalette(void)",
    ),
    Ok(
        "ps2ExtHardwareSkinning::MaxMatrixPaletteSize(unsigned int)",
    ),
    Ok(
        "pddiExtHardwareSkinning type_info function",
    ),
    Ok(
        "pddiExtHardwareSkinning::~pddiExtHardwareSkinning(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radMathInitialize(void)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::Matrix(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::Identity(void)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::IdentityRotation(void)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::IdentityTranslation(void)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::IdentityProjection(void)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::FillRotation(RadicalMathLibrary::Quaternion const &)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::FillRotateX(float)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::FillRotateY(float)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::FillRotateZ(float)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::FillRotation(RadicalMathLibrary::Vector const &, float)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::FillRotateXYZ(float, float, float)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::FillTranslate(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::FillScale(float, float, float)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::FillHeadingXZ(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::FillHeadingYZ(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::FillHeading(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::Transpose(void)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::InvertOrtho(void)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::Invert(void)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::OrthoNormal(void)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::Transform(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::Transform(RadicalMathLibrary::Vector4 const &, RadicalMathLibrary::Vector4 *) const",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::RotateVector(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::Transform(int, RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector *) const",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::Transform(int, RadicalMathLibrary::Vector4 const *, RadicalMathLibrary::Vector4 *) const",
    ),
    Ok(
        "RadicalMathLibrary::Plane::Intersect(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
    ),
    Ok(
        "RadicalMathLibrary::Plane::Transform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "RadicalMathLibrary::Plane::Transform(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Plane const &)",
    ),
    Ok(
        "RadicalMathLibrary::Quaternion::Identity(void)",
    ),
    Ok(
        "RadicalMathLibrary::Quaternion::Mult(RadicalMathLibrary::Quaternion const &)",
    ),
    Ok(
        "RadicalMathLibrary::Quaternion::Inverse(void)",
    ),
    Ok(
        "RadicalMathLibrary::Quaternion::Normalize(void)",
    ),
    Ok(
        "RadicalMathLibrary::Quaternion::BuildFromAngleY(float)",
    ),
    Ok(
        "RadicalMathLibrary::Quaternion::ConvertToMatrix(RadicalMathLibrary::Matrix *) const",
    ),
    Ok(
        "RadicalMathLibrary::Quaternion::BuildFromMatrix(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "RadicalMathLibrary::Quaternion::Slerp(RadicalMathLibrary::Quaternion const &, RadicalMathLibrary::Quaternion const &, float)",
    ),
    Ok(
        "RadicalMathLibrary::Randomizer::Randomizer(unsigned int)",
    ),
    Ok(
        "RadicalMathLibrary::Randomizer::~Randomizer(void)",
    ),
    Ok(
        "RadicalMathLibrary::Randomizer::Seed(unsigned int)",
    ),
    Ok(
        "RadicalMathLibrary::Randomizer::Int(void)",
    ),
    Ok(
        "RadicalMathLibrary::Randomizer::IntRanged(unsigned int)",
    ),
    Ok(
        "RadicalMathLibrary::Randomizer::IntRanged(unsigned int, unsigned int)",
    ),
    Ok(
        "RadicalMathLibrary::Randomizer::Float(void)",
    ),
    Ok(
        "RadicalMathLibrary::Randomizer::FloatSigned(void)",
    ),
    Ok(
        "RadicalMathLibrary::Spline::operator=(RadicalMathLibrary::Spline const &)",
    ),
    Ok(
        "RadicalMathLibrary::Spline::SetCntrlMesh(RadicalMathLibrary::Spline::Basis, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "RadicalMathLibrary::Spline::SetCntrlMesh(RadicalMathLibrary::Spline::Basis, RadicalMathLibrary::Vector4 const &, RadicalMathLibrary::Vector4 const &, RadicalMathLibrary::Vector4 const &, RadicalMathLibrary::Vector4 const &)",
    ),
    Ok(
        "RadicalMathLibrary::Spline::SetCntrlMesh(RadicalMathLibrary::Spline::Basis, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "RadicalMathLibrary::Spline::Evaluate(float)",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::SplineCurve(int, RadicalMathLibrary::Spline::Basis, bool)",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::~SplineCurve(void)",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::operator=(RadicalMathLibrary::SplineCurve const &)",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::SetBasis(RadicalMathLibrary::Spline::Basis)",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::SetNumVertices(unsigned int)",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::SetCntrlVertex(unsigned int, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::GetEndParam(void) const",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::GetNumSegments(void) const",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::GetCntrlVertex(unsigned int)",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::GetKnot(unsigned int)",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::LoadEvaluator(RadicalMathLibrary::SplineCurve::Evaluator, float)",
    ),
    Ok(
        "RadicalMathLibrary::SplineCurve::Evaluate(float)",
    ),
    Ok(
        "global constructors keyed to RadicalMathLibrary::Spline::MBSpline",
    ),
    Ok(
        "RadicalMathLibrary::ATanCoords(float, float)",
    ),
    Ok(
        "RadicalMathLibrary::CartesianToPolar(float, float, float *, float *)",
    ),
    Ok(
        "RadicalMathLibrary::CartesianToSpherical(float, float, float, float *, float *, float *)",
    ),
    Ok(
        "RadicalMathLibrary::SphericalToCartesian(float, float, float, float *, float *, float *)",
    ),
    Ok(
        "RadicalMathLibrary::Vector::Equals(RadicalMathLibrary::Vector const &, float) const",
    ),
    Ok(
        "RadicalMathLibrary::Vector::CrossProduct(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "RadicalMathLibrary::Vector::CrossProduct(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "RadicalMathLibrary::Vector::Normalize(void)",
    ),
    Ok(
        "RadicalMathLibrary::Vector::Normalize(RadicalMathLibrary::Vector const &)",
    ),
    Ok(
        "RadicalMathLibrary::Vector::Transform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "RadicalMathLibrary::Vector::Transform(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "RadicalMathLibrary::Vector::Rotate(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "RadicalMathLibrary::Vector::Rotate(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "RadicalMathLibrary::Vector::ConvertToEulerYZX(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "RadicalMathLibrary::Vector4::Transform(RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "RadicalMathLibrary::Matrix::Mult(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &)",
    ),
    Ok(
        "radmusic::initialize(radmusic::stream_graph_description *, unsigned int, unsigned int, int)",
    ),
    Ok(
        "radmusic::terminate(void)",
    ),
    Ok(
        "radmusic::composition_new(void)",
    ),
    Ok(
        "radmusic::composition_delete(radmusic::composition **)",
    ),
    Ok(
        "radmusic::composition_data_loader::LoadData(radLoadStream *, int, radLoadInventory *, IRefCount *)",
    ),
    Ok(
        "radmusic::radload_composition_adapter::~radload_composition_adapter(void)",
    ),
    Ok(
        "radmusic::radmusic_file_loader::LoadFile(radLoadOptions *, radLoadUpdatableRequest *)",
    ),
    Ok(
        "radmusic::register_radload_loaders(void)",
    ),
    Ok(
        "radmusic::radload_composition_adapter type_info function",
    ),
    Ok(
        "radmusic::radmusic_file_loader::~radmusic_file_loader(void)",
    ),
    Ok(
        "radmusic::radmusic_file_loader type_info function",
    ),
    Ok(
        "radmusic::composition_data_loader::~composition_data_loader(void)",
    ),
    Ok(
        "radmusic::composition_data_loader type_info function",
    ),
    Ok(
        "ods::pointer_templ<ods::_comp>::operator=(ods::pointer_templ<ods::_comp> const &)",
    ),
    Ok(
        "radmusic::radload_composition_adapter::radload_composition_adapter(void)",
    ),
    Ok(
        "radmusic::radmusic_file_loader::radmusic_file_loader(void)",
    ),
    Ok(
        "radmusic::composition_data_loader::composition_data_loader(void)",
    ),
    Ok(
        "radmusic::radload_radmusic_inventory::radload_radmusic_inventory(void)",
    ),
    Ok(
        "radmusic::radload_radmusic_inventory::~radload_radmusic_inventory(void)",
    ),
    Ok(
        "radmusic::radload_radmusic_inventory type_info function",
    ),
    Ok(
        "radLoadInventory::~radLoadInventory(void)",
    ),
    Ok(
        "radLoadInventory::radLoadInventory(void)",
    ),
    Ok(
        "radmusic::radload_radmusic_inventory::Find(radLoadInventory::SafeCastBase &, tUidUnaligned)",
    ),
    Ok(
        "radLoadInventory type_info function",
    ),
    Ok(
        "radmusic::performance_new(radmusic::composition *, char const *, radMemorySpace)",
    ),
    Ok(
        "radmusic::performance_delete(radmusic::performance **)",
    ),
    Ok(
        "radmusic::performance_stop(radmusic::performance *)",
    ),
    Ok(
        "radmusic::performance_paused(radmusic::performance *)",
    ),
    Ok(
        "radmusic::performance_volume(radmusic::performance *, float)",
    ),
    Ok(
        "radmusic::performance_num_states(radmusic::performance *)",
    ),
    Ok(
        "radmusic::performance_state_name(radmusic::performance *, unsigned int, char *, unsigned int)",
    ),
    Ok(
        "radmusic::performance_num_state_values(radmusic::performance *, unsigned int)",
    ),
    Ok(
        "radmusic::performance_state_value_name(radmusic::performance *, unsigned int, unsigned int, char *, unsigned int)",
    ),
    Ok(
        "radmusic::performance_state_value(radmusic::performance *, unsigned int, unsigned int)",
    ),
    Ok(
        "radmusic::performance_num_events(radmusic::performance *)",
    ),
    Ok(
        "radmusic::performance_event_name(radmusic::performance *, unsigned int, char *, unsigned int)",
    ),
    Ok(
        "radmusic::performance_trigger_event(radmusic::performance *, unsigned int)",
    ),
    Ok(
        "radmusic::performance_update(radmusic::performance *, unsigned int)",
    ),
    Ok(
        "radmusic::debug_performance_current_region_name(radmusic::performance *, char *, unsigned int)",
    ),
    Ok(
        "radmusic::performance_is_state_steady_idle(radmusic::performance *)",
    ),
    Ok(
        "radmusic::debug_performance_current_beat(radmusic::performance *, float *)",
    ),
    Ok(
        "radmusic::_get_state_index(radmusic::performance *, ods::pointer_templ<ods::_state> const &)",
    ),
    Ok(
        "radmusic::_get_state_value(radmusic::performance *, ods::pointer_templ<ods::_state> const &)",
    ),
    Ok(
        "radmusic::_do_action_rand_state(radmusic::performance *, ods::pointer_templ<ods::_rand_state_action> const &)",
    ),
    Ok(
        "radmusic::_do_event_actions(radmusic::performance *, unsigned int)",
    ),
    Ok(
        "radmusic::group_memory_sizes_recurse(ods::pointer_templ<ods::_group> const &, unsigned int *, unsigned int *, ods::pointer_templ<ods::_group> *, unsigned int *, unsigned int *, ods::pointer_templ<ods::_group> *)",
    ),
    Ok(
        "radmusic::rsd_file_length_in_samples(ods::pointer_templ<ods::_rsd_file> const &)",
    ),
    Ok(
        "radmusic::rsd_file_length_in_frames(ods::pointer_templ<ods::_rsd_file> const &)",
    ),
    Ok(
        "radmusic::audio_format_frames_to_samples(ods::pointer_templ<ods::_audio_format> const &, unsigned int)",
    ),
    Ok(
        "radmusic::audio_format_samples_to_frames(ods::pointer_templ<ods::_audio_format> const &, unsigned int)",
    ),
    Ok(
        "radmusic::rsd_file_length_in_bytes(ods::pointer_templ<ods::_rsd_file> const &)",
    ),
    Ok(
        "radmusic::construct_audio_format(ods::pointer_templ<ods::_audio_format> const &, bool)",
    ),
    Ok(
        "radmusic::audio_format_samples_to_milliseconds(ods::pointer_templ<ods::_audio_format> const &, unsigned int)",
    ),
    Ok(
        "radmusic::group_memory_sizes(ods::pointer_templ<ods::_group> const &, unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
    ),
    Ok(
        "radmusic::composition_find_fade_transition(ods::pointer_templ<ods::_comp> const &, ods::pointer_templ<ods::_region> const &, ods::pointer_templ<ods::_region> const &)",
    ),
    Ok(
        "radmusic::composition_find_stitch_transition(ods::pointer_templ<ods::_comp> const &, ods::pointer_templ<ods::_region> const &, ods::pointer_templ<ods::_region> const &)",
    ),
    Ok(
        "radmusic::group_is_child_of(ods::pointer_templ<ods::_group> const &, ods::pointer_templ<ods::_group> const &)",
    ),
    Ok(
        "radmusic::beat_in_range(float, float, float)",
    ),
    Ok(
        "radmusic::beat_set_beat_in_range(ods::pointer_templ<ods::_beat_set> const &, float, float)",
    ),
    Ok(
        "radmusic::tempo_track_beat(ods::pointer_templ<ods::_tempo_track> const &, unsigned int, unsigned int)",
    ),
    Ok(
        "radmusic::calculate_action_offset(ods::pointer_templ<ods::_event> const &, unsigned int *)",
    ),
    Ok(
        "ods::pointer_templ<ods::_group>::pointer_templ(ods::pointer_templ<ods::_group> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_group>::operator=(ods::pointer_templ<ods::_group> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_fade_transition>::pointer_templ(ods::pointer_templ<ods::_fade_transition> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_fade_transition>::operator=(ods::pointer_templ<ods::_fade_transition> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_region>::operator=(ods::pointer_templ<ods::_region> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_stitch_transition>::pointer_templ(ods::pointer_templ<ods::_stitch_transition> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_stitch_transition>::operator=(ods::pointer_templ<ods::_stitch_transition> const &)",
    ),
    Ok(
        "radmusic::resource_manager_initialize(radmusic::stream_graph_description *, unsigned int, unsigned int)",
    ),
    Ok(
        "radmusic::resource_manager_terminate(void)",
    ),
    Ok(
        "radmusic::capture_stream_graph(radmusic::stream_graph **, IRadSoundHalAudioFormat *)",
    ),
    Ok(
        "radmusic::release_stream_graph(radmusic::stream_graph **)",
    ),
    Ok(
        "radmusic::capture_clip_player(IRadSoundClipPlayer **)",
    ),
    Ok(
        "radmusic::release_clip_player(IRadSoundClipPlayer **)",
    ),
    Ok(
        "radmusic::resource_manager_new(char const *, int, unsigned int, unsigned int, radMemorySpace, int, unsigned int, unsigned int)",
    ),
    Ok(
        "radmusic::resource_manager_delete(radmusic::resource_manager **)",
    ),
    Ok(
        "radmusic::_construct_file_data_source(radmusic::resource_manager *, ods::pointer_templ<ods::_rsd_file> const &, unsigned int)",
    ),
    Ok(
        "radmusic::resource_manager_update(radmusic::resource_manager *)",
    ),
    Ok(
        "radmusic::resource_manager_move_to_group(radmusic::resource_manager *, ods::pointer_templ<ods::_group> const &, unsigned int)",
    ),
    Ok(
        "radmusic::_queue_items_to_load(radmusic::resource_buffer *, ods::pointer_templ<ods::_group> const &, ods::pointer_templ<ods::_group> const &)",
    ),
    Ok(
        "radmusic::_resource_buffer_move_to_group(radmusic::resource_manager *, unsigned int, ods::pointer_templ<ods::_group> const &)",
    ),
    Ok(
        "radmusic::resource_manager_group_loaded(radmusic::resource_manager *, unsigned int, ods::pointer_templ<ods::_group> const &)",
    ),
    Ok(
        "radmusic::resource_manager_get_clip(radmusic::resource_manager *, ods::pointer_templ<ods::_clip> const &, unsigned int)",
    ),
    Ok(
        "radmusic::resource_manager_get_stream(radmusic::resource_manager *, ods::pointer_templ<ods::_stream> const &, unsigned int, unsigned int)",
    ),
    Ok(
        "ods::pointer_templ<ods::_stream>::pointer_templ(ods::pointer_templ<ods::_stream> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_stream>::operator=(ods::pointer_templ<ods::_stream> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_clip>::pointer_templ(ods::pointer_templ<ods::_clip> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_clip>::operator=(ods::pointer_templ<ods::_clip> const &)",
    ),
    Ok(
        "memory::initialize(int)",
    ),
    Ok(
        "memory::terminate(void)",
    ),
    Ok(
        "memory::allocator(void)",
    ),
    Ok(
        "memory::malloc(unsigned int, char const *)",
    ),
    Ok(
        "memory::calloc(unsigned int, char const *)",
    ),
    Ok(
        "memory::free(void *)",
    ),
    Ok(
        "memory::realloc(void *, unsigned int, unsigned int, char const *)",
    ),
    Ok(
        "ods::log_error(char const *)",
    ),
    Ok(
        "ods::project_get_built_in_type(ods::pointer const &, unsigned char)",
    ),
    Ok(
        "ods::project_find_instance(ods::pointer const &, char const *, ods::pointer *)",
    ),
    Ok(
        "ods::project_assemble_instance_name(ods::pointer const &, ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::type_format_name(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::uint32_type_format_name(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::bool_type_format_name(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::float_type_format_name(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::string_type_format_name(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::char_type_format_name(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::cls_type_name(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::cls_type_num_attributes(ods::pointer const &)",
    ),
    Ok(
        "ods::cls_type_attribute_name(ods::pointer const &, unsigned int, char *, unsigned int)",
    ),
    Ok(
        "ods::cls_type_find_attribute(ods::pointer const &, char const *)",
    ),
    Ok(
        "ods::cls_type_attribute_type(ods::pointer const &, unsigned int)",
    ),
    Ok(
        "ods::cls_type_attribute_offset(ods::pointer const &, unsigned int)",
    ),
    Ok(
        "ods::type_id(ods::pointer const &)",
    ),
    Ok(
        "ods::cls_type_format_name(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::_cls_type_attribute_name(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::_cls_type_attribute_type(ods::pointer const &)",
    ),
    Ok(
        "ods::ref_type_format_name(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::ref_type_get_type(ods::pointer const &)",
    ),
    Ok(
        "ods::array_type_format_name(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::array_type_get_type(ods::pointer const &)",
    ),
    Ok(
        "ods::instance_destroy(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::instance_construct(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::instance_size(ods::pointer const &)",
    ),
    Ok(
        "ods::instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
    ),
    Ok(
        "ods::instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
    ),
    Ok(
        "ods::instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
    ),
    Ok(
        "ods::uint32_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
    ),
    Ok(
        "ods::uint32_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
    ),
    Ok(
        "ods::uint32_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
    ),
    Ok(
        "ods::uint32_instance_write(ods::pointer, unsigned int)",
    ),
    Ok(
        "ods::uint32_instance_read(ods::pointer)",
    ),
    Ok(
        "ods::uint32_instance_construct(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::uint32_instance_construct(ods::pointer const &)",
    ),
    Ok(
        "ods::uint32_instance_destroy(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::uint32_instance_size(ods::pointer const &)",
    ),
    Ok(
        "ods::string_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
    ),
    Ok(
        "ods::string_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
    ),
    Ok(
        "ods::string_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
    ),
    Ok(
        "ods::string_instance_construct(ods::pointer const &)",
    ),
    Ok(
        "ods::string_instance_construct(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::string_instance_write(ods::pointer const &, char const *)",
    ),
    Ok(
        "ods::string_instance_read(ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::string_instance_destroy(ods::pointer const &)",
    ),
    Ok(
        "ods::string_instance_destroy(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::string_instance_size(ods::pointer const &)",
    ),
    Ok(
        "ods::ref_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
    ),
    Ok(
        "ods::ref_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
    ),
    Ok(
        "ods::ref_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
    ),
    Ok(
        "ods::ref_instance_construct(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::ref_instance_construct(ods::pointer const &)",
    ),
    Ok(
        "ods::ref_instance_read(ods::pointer const &)",
    ),
    Ok(
        "ods::ref_instance_destroy(ods::pointer const &)",
    ),
    Ok(
        "ods::ref_instance_destroy(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::ref_instance_size(ods::pointer const &)",
    ),
    Ok(
        "ods::bool_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
    ),
    Ok(
        "ods::bool_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
    ),
    Ok(
        "ods::bool_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
    ),
    Ok(
        "ods::bool_instance_construct(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::bool_instance_construct(ods::pointer const &)",
    ),
    Ok(
        "ods::bool_instance_destroy(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::bool_instance_size(ods::pointer const &)",
    ),
    Ok(
        "ods::bool_instance_write(ods::pointer const &, bool)",
    ),
    Ok(
        "ods::bool_instance_read(ods::pointer const &)",
    ),
    Ok(
        "ods::float_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
    ),
    Ok(
        "ods::float_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
    ),
    Ok(
        "ods::float_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
    ),
    Ok(
        "ods::float_instance_construct(ods::pointer const &)",
    ),
    Ok(
        "ods::float_instance_construct(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::float_instance_size(ods::pointer const &)",
    ),
    Ok(
        "ods::float_instance_destroy(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::float_instance_write(ods::pointer const &, float)",
    ),
    Ok(
        "ods::float_instance_read(ods::pointer const &)",
    ),
    Ok(
        "ods::char_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
    ),
    Ok(
        "ods::char_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
    ),
    Ok(
        "ods::char_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
    ),
    Ok(
        "ods::char_instance_construct(ods::pointer const &)",
    ),
    Ok(
        "ods::char_instance_construct(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::char_instance_destroy(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::char_instance_size(ods::pointer const &)",
    ),
    Ok(
        "ods::char_instance_write(ods::pointer const &, char)",
    ),
    Ok(
        "ods::char_instance_read(ods::pointer const &)",
    ),
    Ok(
        "ods::array_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
    ),
    Ok(
        "ods::array_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
    ),
    Ok(
        "ods::array_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
    ),
    Ok(
        "ods::array_instance_assemble_name(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::array_instance_construct(ods::pointer const &, unsigned int)",
    ),
    Ok(
        "ods::array_instance_construct(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::array_instance_destroy(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::array_instance_size(ods::pointer const &)",
    ),
    Ok(
        "ods::array_instance_num_items(ods::pointer const &)",
    ),
    Ok(
        "ods::array_instance_add_item(ods::pointer const &, unsigned int)",
    ),
    Ok(
        "ods::array_instance_item_at(ods::pointer const &, unsigned int, unsigned int)",
    ),
    Ok(
        "ods::cls_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
    ),
    Ok(
        "ods::cls_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
    ),
    Ok(
        "ods::cls_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
    ),
    Ok(
        "ods::cls_instance_assemble_name(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::cls_instance_construct(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::cls_instance_destroy(ods::pointer const &, ods::pointer const &)",
    ),
    Ok(
        "ods::cls_instance_size(ods::pointer const &)",
    ),
    Ok(
        "ods::indent(ods::stream_info *, unsigned int)",
    ),
    Ok(
        "ods::primitive_assemble_name(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::pointer const &, char *, unsigned int)",
    ),
    Ok(
        "ods::block_construct(ods::block *, ods::memory_hooks *, bool)",
    ),
    Ok(
        "ods::block_destroy(ods::block *)",
    ),
    Ok(
        "ods::block_construct_from_stream_synch(ods::block *, ods::stream_info *, ods::pointer *, ods::memory_hooks *, bool)",
    ),
    Ok(
        "ods::block_alloc(ods::block *, unsigned int, char const *)",
    ),
    Ok(
        "ods::block_write(bool, ods::pointer const &, void const *, unsigned int)",
    ),
    Ok(
        "ods::block_write(bool, ods::pointer, unsigned int, void const *, unsigned int)",
    ),
    Ok(
        "ods::_get_reference_value(ods::block *, unsigned int)",
    ),
    Ok(
        "ods::_set_reference_value(ods::block *, unsigned int, unsigned int)",
    ),
    Ok(
        "ods::block_add_reference(ods::block *, unsigned int)",
    ),
    Ok(
        "ods::block_revoke_reference(ods::block *, unsigned int)",
    ),
    Ok(
        "ods::block_write_reference(ods::pointer const &, unsigned int, unsigned int)",
    ),
    Ok(
        "ods::block_read_reference(ods::pointer const &, unsigned int)",
    ),
    Ok(
        "ods::block_read_reference(ods::pointer const &)",
    ),
    Ok(
        "ods::block_read(bool, ods::pointer const &, void *, unsigned int)",
    ),
    Ok(
        "ods::block_read(bool, ods::pointer const &, unsigned int, void *, unsigned int)",
    ),
    Ok(
        "ods::block_insert(ods::pointer const &, unsigned int, unsigned int)",
    ),
    Ok(
        "ods::block_delete(ods::pointer, unsigned int)",
    ),
    Ok(
        "ods::block_free(ods::pointer const &, unsigned int)",
    ),
    Ok(
        "ods::pointer::_add_to_list(ods::pointer const *)",
    ),
    Ok(
        "ods::pointer::_remove_from_list(ods::pointer const *)",
    ),
    Ok(
        "ods::pointer_construct(ods::pointer *)",
    ),
    Ok(
        "ods::pointer_destroy(ods::pointer *)",
    ),
    Ok(
        "ods::pointer::construct(ods::pointer *)",
    ),
    Ok(
        "ods::pointer::destroy(ods::pointer *)",
    ),
    Ok(
        "ods::pointer::pointer(void)",
    ),
    Ok(
        "ods::pointer::pointer(ods::block const *, unsigned int)",
    ),
    Ok(
        "ods::pointer::pointer(ods::pointer const &)",
    ),
    Ok(
        "ods::pointer::pointer(ods::null_ptr_type const &)",
    ),
    Ok(
        "ods::pointer::operator=(ods::null_ptr_type const &)",
    ),
    Ok(
        "ods::pointer::operator=(ods::pointer const &)",
    ),
    Ok(
        "ods::pointer::operator==(ods::pointer const &) const",
    ),
    Ok(
        "ods::pointer::operator!=(ods::pointer const &) const",
    ),
    Ok(
        "ods::pointer::offset(void) const",
    ),
    Ok(
        "ods::pointer::offset(unsigned int) const",
    ),
    Ok(
        "ods::pointer::memory(void) const",
    ),
    Ok(
        "ods::pointer::~pointer(void)",
    ),
    Ok(
        "ods::array_construct(ods::block *, unsigned int)",
    ),
    Ok(
        "ods::array_destroy(ods::pointer)",
    ),
    Ok(
        "ods::array_size(ods::pointer)",
    ),
    Ok(
        "ods::array_get_pointer_at(ods::pointer, unsigned int)",
    ),
    Ok(
        "ods::array_add_tail(ods::pointer const &)",
    ),
    Ok(
        "ods::reference_array_item_at(ods::pointer, unsigned int)",
    ),
    Ok(
        "ods::reference_array_num_items(ods::pointer)",
    ),
    Ok(
        "ods::string_construct(ods::block *, char const *)",
    ),
    Ok(
        "ods::string_get(ods::pointer, char *, unsigned int)",
    ),
    Ok(
        "ods::string_len(ods::pointer)",
    ),
    Ok(
        "ods::string_destroy(ods::pointer)",
    ),
    Ok(
        "ods::stdio_stream_write(void *, void const *, unsigned int)",
    ),
    Ok(
        "ods::stdio_stream_read(void *, void *, unsigned int)",
    ),
    Ok(
        "ods::radfile_write(void *, void const *, unsigned int)",
    ),
    Ok(
        "ods::radfile_read(void *, void *, unsigned int)",
    ),
    Ok(
        "ods::radload_write(void *, void const *, unsigned int)",
    ),
    Ok(
        "ods::radload_read(void *, void *, unsigned int)",
    ),
    Ok(
        "ods::memory_stream_write(void *, void const *, unsigned int)",
    ),
    Ok(
        "ods::memory_stream_read(void *, void *, unsigned int)",
    ),
    Ok(
        "ods::debug_printf_write(void *, void const *, unsigned int)",
    ),
    Ok(
        "ods::debug_printf_read(void *, void *, unsigned int)",
    ),
    Ok(
        "ods::VsnPrintf(char *, unsigned int, char const *, char *)",
    ),
    Ok(
        "ods::stream_printf(ods::stream_info *, char const *, ...)",
    ),
    Ok(
        "Parser::IsLetter(char)",
    ),
    Ok(
        "Parser::IsStartOfVarName(char)",
    ),
    Ok(
        "Parser::IsMiddleOfVarName(char)",
    ),
    Ok(
        "Parser::IsWhite(char)",
    ),
    Ok(
        "Parser::IsNumber(char)",
    ),
    Ok(
        "Parser::SkipWhite(void)",
    ),
    Ok(
        "Parser::IsTokenNsw(char const *)",
    ),
    Ok(
        "Parser::SkipToken(char const *)",
    ),
    Ok(
        "Parser::SkipTokenNsw(char const *)",
    ),
    Ok(
        "Parser::GetChar(char *)",
    ),
    Ok(
        "Parser::GetQuotedString(char *, int)",
    ),
    Ok(
        "Parser::GetInteger(void)",
    ),
    Ok(
        "Parser::GetFloat(void)",
    ),
    Ok(
        "Parser::IsNumber(void)",
    ),
    Ok(
        "Parser::GetVariableName(char *, int)",
    ),
    Ok(
        "Parser::NextChar(void)",
    ),
    Ok(
        "radmusic::music_engine_construct(radmusic::struct_music_engine *, radmusic::performance *)",
    ),
    Ok(
        "radmusic::music_engine_destroy(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::_construct_region_controllers(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::_destroy_region_controllers(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::music_engine_region_controller(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> const &)",
    ),
    Ok(
        "radmusic::music_engine_peek_region(radmusic::struct_music_engine *, radmusic::enum_region_resume_type *)",
    ),
    Ok(
        "radmusic::music_engine_flush_region_stack(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::music_engine_push_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, radmusic::enum_region_resume_type)",
    ),
    Ok(
        "radmusic::music_engine_pop_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> *, radmusic::enum_region_resume_type *)",
    ),
    Ok(
        "radmusic::music_engine_current_region_name(radmusic::struct_music_engine *, char *, unsigned int)",
    ),
    Ok(
        "radmusic::music_engine_is_state_steady_and_idle(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::music_engine_current_beat(radmusic::struct_music_engine *, float *)",
    ),
    Ok(
        "radmusic::music_engine_update(radmusic::struct_music_engine *, unsigned int)",
    ),
    Ok(
        "radmusic::music_engine_stop(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::music_engine_paused(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::music_engine_volume(radmusic::struct_music_engine *, float)",
    ),
    Ok(
        "radmusic::_do_action_push_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_push_region_action> const &)",
    ),
    Ok(
        "radmusic::_do_action_pop_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_pop_region_action> const &)",
    ),
    Ok(
        "radmusic::_do_action_play_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_play_region_action> const &)",
    ),
    Ok(
        "radmusic::_do_action_start_layer(radmusic::struct_music_engine *, ods::pointer_templ<ods::_start_layer_action> const &)",
    ),
    Ok(
        "radmusic::_do_action_stop_layer(radmusic::struct_music_engine *, ods::pointer_templ<ods::_stop_layer_action> const &)",
    ),
    Ok(
        "radmusic::music_engine_do_action(radmusic::struct_music_engine *, ods::pointer_templ<ods::_action> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_region>::pointer_templ(ods::pointer_templ<ods::_region> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_action>::pointer_templ(ods::pointer_templ<ods::_action> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_action>::operator=(ods::pointer_templ<ods::_action> const &)",
    ),
    Ok(
        "radmusic::state_fade_construct(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_fade_destroy(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_fade_kill(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_fade_paused(radmusic::struct_music_engine *, bool)",
    ),
    Ok(
        "radmusic::state_fade_update(radmusic::struct_music_engine *, unsigned int)",
    ),
    Ok(
        "radmusic::state_fade_initialize(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool, ods::pointer_templ<ods::_region> &, ods::pointer_templ<ods::_fade_transition> &)",
    ),
    Ok(
        "radmusic::state_fade_current_region(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_fade_initialized(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_fade_cancel_init(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_fade_enter(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_fade_start_layer(radmusic::struct_music_engine *, char const *)",
    ),
    Ok(
        "radmusic::state_fade_stop_layer(radmusic::struct_music_engine *, char const *)",
    ),
    Ok(
        "radmusic::state_fade_set_volume(radmusic::struct_music_engine *, float)",
    ),
    Ok(
        "radmusic::state_fade_set_pitch(radmusic::struct_music_engine *, float)",
    ),
    Ok(
        "radmusic::correct_vol(float, float)",
    ),
    Ok(
        "radmusic::_state_fade_update_fade_volumes(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_fade_fade_transition(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_fade_set_target_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool)",
    ),
    Ok(
        "radmusic::state_steady_construct(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_steady_destroy(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::_state_steady_reset(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_steady_is_idle(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_steady_initialize(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &)",
    ),
    Ok(
        "radmusic::state_steady_current_region(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_steady_enter(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_steady_set_volume(radmusic::struct_music_engine *, float)",
    ),
    Ok(
        "radmusic::state_steady_set_pitch(radmusic::struct_music_engine *, float)",
    ),
    Ok(
        "radmusic::state_steady_kill(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_steady_paused(radmusic::struct_music_engine *, bool)",
    ),
    Ok(
        "radmusic::state_steady_start_layer(radmusic::struct_music_engine *, char const *)",
    ),
    Ok(
        "radmusic::state_steady_stop_layer(radmusic::struct_music_engine *, char const *)",
    ),
    Ok(
        "radmusic::state_steady_set_target_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool)",
    ),
    Ok(
        "radmusic::_state_steady_clear_transition(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::_state_steady_init_transition(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool)",
    ),
    Ok(
        "radmusic::_state_steady_do_transition(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::_state_steady_check_for_transition(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_steady_update(radmusic::struct_music_engine *, unsigned int)",
    ),
    Ok(
        "radmusic::state_stitch_construct(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_stitch_destroy(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_stitch_initialize(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, ods::pointer_templ<ods::_region> &, ods::pointer_templ<ods::_stitch_transition> &)",
    ),
    Ok(
        "radmusic::state_stitch_initialized(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_stitch_current_region(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_stitch_enter(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_stitch_kill(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_stitch_paused(radmusic::struct_music_engine *, bool)",
    ),
    Ok(
        "radmusic::state_stitch_start_layer(radmusic::struct_music_engine *, char const *)",
    ),
    Ok(
        "radmusic::state_stitch_stop_layer(radmusic::struct_music_engine *, char const *)",
    ),
    Ok(
        "radmusic::state_stitch_update(radmusic::struct_music_engine *, unsigned int)",
    ),
    Ok(
        "radmusic::state_stitch_set_volume(radmusic::struct_music_engine *, float)",
    ),
    Ok(
        "radmusic::state_stitch_set_pitch(radmusic::struct_music_engine *, float)",
    ),
    Ok(
        "radmusic::state_stitch_set_target_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool)",
    ),
    Ok(
        "radmusic::state_stopped_construct(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_stopped_destroy(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_stopped_set_target_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool)",
    ),
    Ok(
        "radmusic::state_stopped_current_region(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_stopped_update(radmusic::struct_music_engine *, unsigned int)",
    ),
    Ok(
        "radmusic::state_stopped_enter(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_stopped_kill(radmusic::struct_music_engine *)",
    ),
    Ok(
        "radmusic::state_stopped_paused(radmusic::struct_music_engine *, bool)",
    ),
    Ok(
        "radmusic::state_stopped_set_pitch(radmusic::struct_music_engine *, float)",
    ),
    Ok(
        "radmusic::state_stopped_set_volume(radmusic::struct_music_engine *, float)",
    ),
    Ok(
        "radmusic::state_stopped_start_layer(radmusic::struct_music_engine *, char const *)",
    ),
    Ok(
        "radmusic::state_stopped_stop_layer(radmusic::struct_music_engine *, char const *)",
    ),
    Ok(
        "radmusic::sequence_player_new(ods::pointer_templ<ods::_sequence> &, radmusic::resource_manager *, char const *)",
    ),
    Ok(
        "radmusic::sequence_player_delete(radmusic::sequence_player **)",
    ),
    Ok(
        "radmusic::sequence_player_state(radmusic::sequence_player *)",
    ),
    Ok(
        "radmusic::sequence_player_paused(radmusic::sequence_player *, bool)",
    ),
    Ok(
        "radmusic::sequence_player_queue(radmusic::sequence_player *, unsigned int, radmusic::stream_graph *, bool)",
    ),
    Ok(
        "radmusic::sequence_player_dequeue(radmusic::sequence_player *, radmusic::stream_graph **)",
    ),
    Ok(
        "radmusic::sequence_player_beat(radmusic::sequence_player *, float *)",
    ),
    Ok(
        "radmusic::sequence_player_remaining_time(radmusic::sequence_player *)",
    ),
    Ok(
        "radmusic::sequence_player_volume(radmusic::sequence_player *, float)",
    ),
    Ok(
        "radmusic::sequence_player_pitch(radmusic::sequence_player *, float)",
    ),
    Ok(
        "radmusic::sequence_player_play(radmusic::sequence_player *)",
    ),
    Ok(
        "radmusic::sequence_player_update(radmusic::sequence_player *)",
    ),
    Ok(
        "ods::pointer_templ<ods::_sequence>::operator=(ods::pointer_templ<ods::_sequence> const &)",
    ),
    Ok(
        "ods::pointer_templ<ods::_sequence_event>::operator=(ods::pointer_templ<ods::_sequence_event> const &)",
    ),
    Ok(
        "radmusic::sequence_player_event::~sequence_player_event(void)",
    ),
    Ok(
        "radmusic::sequence_player_event::sequence_player_event(void)",
    ),
    Ok(
        "radmusic::sequence_player_event::operator=(radmusic::sequence_player_event const &)",
    ),
    Ok(
        "radmusic::region_controller_construct(radmusic::struct_region_controller *, radmusic::resource_manager *, ods::pointer_templ<ods::_region> const &)",
    ),
    Ok(
        "radmusic::region_controller_destroy(radmusic::struct_region_controller *)",
    ),
    Ok(
        "radmusic::region_controller_region(radmusic::struct_region_controller *)",
    ),
    Ok(
        "radmusic::region_controller_start_layer(radmusic::struct_region_controller *, char const *)",
    ),
    Ok(
        "radmusic::region_controller_stop_layer(radmusic::struct_region_controller *, char const *)",
    ),
    Ok(
        "radmusic::region_controller_queue_stream(radmusic::struct_region_controller *, radmusic::stream_graph *, bool, float, float)",
    ),
    Ok(
        "radmusic::region_controller_kill(radmusic::struct_region_controller *)",
    ),
    Ok(
        "radmusic::region_controller_paused(radmusic::struct_region_controller *, bool)",
    ),
    Ok(
        "radmusic::region_controller_play(radmusic::struct_region_controller *)",
    ),
    Ok(
        "radmusic::region_controller_update(radmusic::struct_region_controller *)",
    ),
    Ok(
        "radmusic::region_controller_volume(radmusic::struct_region_controller *, float)",
    ),
    Ok(
        "radmusic::region_controller_volume(radmusic::struct_region_controller *)",
    ),
    Ok(
        "radmusic::region_controller_pitch(radmusic::struct_region_controller *, float)",
    ),
    Ok(
        "radmusic::region_controller_dequeue_stream(radmusic::struct_region_controller *, radmusic::stream_graph **)",
    ),
    Ok(
        "radmusic::region_controller_resource_buffer(radmusic::struct_region_controller *, unsigned int)",
    ),
    Ok(
        "radmusic::region_controller_resource_buffer(radmusic::struct_region_controller *)",
    ),
    Ok(
        "radmusic::region_controller_primary_sequence(radmusic::struct_region_controller *)",
    ),
    Ok(
        "radmusic::region_controller_is_queued(radmusic::struct_region_controller *)",
    ),
    Ok(
        "radmusic::stream_graph_construct(radmusic::stream_graph *, IRadSoundHalAudioFormat *, bool, radMemorySpace, IRadMemoryAllocator *, unsigned int, unsigned int, int)",
    ),
    Ok(
        "radmusic::stream_graph_destroy(radmusic::stream_graph *)",
    ),
    Ok(
        "radmusic::stream_graph_state(radmusic::stream_graph *)",
    ),
    Ok(
        "radmusic::stream_graph_paused(radmusic::stream_graph *, bool)",
    ),
    Ok(
        "radmusic::stream_graph_queue_data_source(radmusic::stream_graph *, IRadSoundHalDataSource *, unsigned int)",
    ),
    Ok(
        "radmusic::stream_graph_queue_full(radmusic::stream_graph *)",
    ),
    Ok(
        "radmusic::stream_graph_queue_flush(radmusic::stream_graph *)",
    ),
    Ok(
        "radmusic::stream_graph_queue(radmusic::stream_graph *)",
    ),
    Ok(
        "radmusic::stream_graph_run(radmusic::stream_graph *)",
    ),
    Ok(
        "radmusic::stream_graph_dequeue(radmusic::stream_graph *)",
    ),
    Ok(
        "radmusic::stream_graph_volume(radmusic::stream_graph *, float)",
    ),
    Ok(
        "radmusic::stream_graph_pitch(radmusic::stream_graph *, float)",
    ),
    Ok(
        "radmusic::stream_graph_aux(radmusic::stream_graph *, unsigned int, float)",
    ),
    Ok(
        "radmusic::stream_graph_positional_group(radmusic::stream_graph *, IRadSoundHalPositionalGroup *)",
    ),
    Ok(
        "radmusic::stream_graph_position(radmusic::stream_graph *)",
    ),
    Ok(
        "radmusic::stream_graph_format(radmusic::stream_graph *)",
    ),
    Ok(
        "radmusic::stream_graph_callback::stream_graph_callback(void)",
    ),
    Ok(
        "radmusic::stream_graph_callback type_info function",
    ),
    Ok(
        "radmusic::stream_graph_callback::AddRef(void)",
    ),
    Ok(
        "radmusic::stream_graph_callback::Release(void)",
    ),
    Ok(
        "radmusic::stream_graph_callback::OnStitch(IRadSoundHalDataSource **, unsigned int, void *)",
    ),
    Ok(
        "global constructors keyed to radmusic::g_stream_graph_stitch_callback",
    ),
    Ok(
        "radSoundHalAudioFormat::radSoundHalAudioFormat(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::~radSoundHalAudioFormat(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::Initialize(IRadSoundHalAudioFormat::Encoding, IRefCount *, unsigned int, unsigned int, unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::GetEncoding(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::GetCustomEncodingInfo(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::GetNumberOfChannels(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::GetFrameSizeInSamples(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::GetFrameSizeInBytes(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::GetSampleRate(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::GetSampleSizeInBits(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::Matches(IRadSoundHalAudioFormat *)",
    ),
    Ok(
        "radSoundHalAudioFormat::SamplesToBytes(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::BytesToSamples(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::SamplesToFrames(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::FramesToSamples(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::FramesToBytes(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::BytesToFrames(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::GetBitResolution(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::ConvertSizeType(IRadSoundHalAudioFormat::SizeType, unsigned int, IRadSoundHalAudioFormat::SizeType)",
    ),
    Ok(
        "radSoundHalAudioFormat::BytesToMilliseconds(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::MillisecondsToBytes(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::SamplesToMilliseconds(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::FramesToMilliseconds(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::MillisecondsToFrames(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormat::MillisecondsToSamples(unsigned int)",
    ),
    Ok(
        "radSoundHalAudioFormatCreate(int)",
    ),
    Ok(
        "radSoundObject type_info function",
    ),
    Ok(
        "radSoundHalAudioFormat type_info function",
    ),
    Ok(
        "IRadSoundHalAudioFormat::IRadSoundHalAudioFormat(void)",
    ),
    Ok(
        "radSoundObject::~radSoundObject(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::AddRef(void)",
    ),
    Ok(
        "radSoundHalAudioFormat::Release(void)",
    ),
    Ok(
        "IRadSoundHalAudioFormat type_info function",
    ),
    Ok(
        "radSoundHalListener::radSoundHalListener(int)",
    ),
    Ok(
        "radSoundHalListener::~radSoundHalListener(void)",
    ),
    Ok(
        "radSoundHalListener::SetPosition(radSoundVector *)",
    ),
    Ok(
        "radSoundHalListener::GetPosition(radSoundVector *)",
    ),
    Ok(
        "radSoundHalListener::SetVelocity(radSoundVector *)",
    ),
    Ok(
        "radSoundHalListener::GetVelocity(radSoundVector *)",
    ),
    Ok(
        "radSoundHalListener::SetOrientation(radSoundVector *, radSoundVector *)",
    ),
    Ok(
        "radSoundHalListener::GetOrientation(radSoundVector *, radSoundVector *)",
    ),
    Ok(
        "radSoundHalListener::SetDistanceFactor(float)",
    ),
    Ok(
        "radSoundHalListener::GetDistanceFactor(void)",
    ),
    Ok(
        "radSoundHalListener::SetDopplerFactor(float)",
    ),
    Ok(
        "radSoundHalListener::GetDopplerFactor(void)",
    ),
    Ok(
        "radSoundHalListener::SetRollOffFactor(float)",
    ),
    Ok(
        "radSoundHalListener::GetRollOffFactor(void)",
    ),
    Ok(
        "radSoundHalListener::SetEnvEffectsEnabled(bool)",
    ),
    Ok(
        "radSoundHalListener::GetEnvEffectsEnabled(void)",
    ),
    Ok(
        "radSoundHalListener::SetEnvironmentAuxSend(unsigned int)",
    ),
    Ok(
        "radSoundHalListener::GetEnvironmentAuxSend(void)",
    ),
    Ok(
        "radSoundHalListener::CalculatePositionalPitchFactor(radSoundHalPositionalInformation const *)",
    ),
    Ok(
        "radSoundHalListener::CalculatePositionalPanFactor(radSoundHalPositionalInformation const *, float *, float *)",
    ),
    Ok(
        "radSoundHalListener::CalculatePositionalVolumeFactor(radSoundHalPositionalInformation const *)",
    ),
    Ok(
        "radSoundHalListener::UpdatePositionalSettings(void)",
    ),
    Ok(
        "radSoundHalListener::CalculatePositionalInformation(radSoundHalPositionalInformation *)",
    ),
    Ok(
        "radSoundHalListener::SetSupportSurround(bool)",
    ),
    Ok(
        "radSoundHalListener::GetSupportSurround(void)",
    ),
    Ok(
        "radSoundHalListener::GetInstance(void)",
    ),
    Ok(
        "radSoundHalListener::Initialize(int)",
    ),
    Ok(
        "radSoundHalListener::Terminate(void)",
    ),
    Ok(
        "radSoundHalListenerGet(void)",
    ),
    Ok(
        "radSoundHalListener type_info function",
    ),
    Ok(
        "IRadSoundHalListener::IRadSoundHalListener(void)",
    ),
    Ok(
        "radSoundHalListener::AddRef(void)",
    ),
    Ok(
        "radSoundHalListener::Release(void)",
    ),
    Ok(
        "IRadSoundHalListener type_info function",
    ),
    Ok(
        "radSoundHalPositionalGroupCreate(int)",
    ),
    Ok(
        "radSoundHalPositionalGroup::radSoundHalPositionalGroup(void)",
    ),
    Ok(
        "radSoundHalPositionalGroup::~radSoundHalPositionalGroup(void)",
    ),
    Ok(
        "radSoundHalPositionalGroup::SetPosition(radSoundVector *)",
    ),
    Ok(
        "radSoundHalPositionalGroup::GetPosition(radSoundVector *)",
    ),
    Ok(
        "radSoundHalPositionalGroup::SetVelocity(radSoundVector *)",
    ),
    Ok(
        "radSoundHalPositionalGroup::GetVelocity(radSoundVector *)",
    ),
    Ok(
        "radSoundHalPositionalGroup::SetOrientation(radSoundVector *, radSoundVector *)",
    ),
    Ok(
        "radSoundHalPositionalGroup::GetOrientation(radSoundVector *, radSoundVector *)",
    ),
    Ok(
        "radSoundHalPositionalGroup::SetConeAngles(float, float)",
    ),
    Ok(
        "radSoundHalPositionalGroup::GetConeAngles(float *, float *)",
    ),
    Ok(
        "radSoundHalPositionalGroup::SetConeOutsideVolume(float)",
    ),
    Ok(
        "radSoundHalPositionalGroup::GetConeOutsideVolume(void)",
    ),
    Ok(
        "radSoundHalPositionalGroup::SetMinMaxDistance(float, float)",
    ),
    Ok(
        "radSoundHalPositionalGroup::GetMinMaxDistance(float *, float *)",
    ),
    Ok(
        "radSoundHalPositionalGroup::SetOcclusion(float)",
    ),
    Ok(
        "radSoundHalPositionalGroup::GetOcclusion(void)",
    ),
    Ok(
        "radSoundHalPositionalGroup::SetObstruction(float)",
    ),
    Ok(
        "radSoundHalPositionalGroup::GetObstruction(void)",
    ),
    Ok(
        "radSoundHalPositionalGroup::AddPositionalEntity(radSoundHalPositionalEntity *)",
    ),
    Ok(
        "radSoundHalPositionalGroup::RemovePositionalEntity(radSoundHalPositionalEntity *)",
    ),
    Ok(
        "radSoundHalPositionalGroup::UpdatePositionalSettings(void)",
    ),
    Ok(
        "radSoundHalPositionalInformation type_info function",
    ),
    Ok(
        "radSoundHalPositionalGroup type_info function",
    ),
    Ok(
        "radLinkedClass<radSoundHalPositionalGroup> type_info function",
    ),
    Ok(
        "IRadSoundHalPositionalGroup::IRadSoundHalPositionalGroup(void)",
    ),
    Ok(
        "radSoundHalPositionalInformation::~radSoundHalPositionalInformation(void)",
    ),
    Ok(
        "radSoundHalPositionalGroup::AddRef(void)",
    ),
    Ok(
        "radSoundHalPositionalGroup::Release(void)",
    ),
    Ok(
        "IRadSoundHalPositionalGroup type_info function",
    ),
    Ok(
        "radSoundHalMemoryRegion::Initialize(void *, unsigned int, unsigned int, unsigned int, radMemorySpace, int)",
    ),
    Ok(
        "radSoundHalMemoryRegion::Terminate(void)",
    ),
    Ok(
        "radSoundHalMemoryRegion::GetRootRegion(void)",
    ),
    Ok(
        "radSoundHalMemoryRegion::radSoundHalMemoryRegion(void)",
    ),
    Ok(
        "radSoundHalMemoryRegion::Create(radSoundHalMemoryRegion *, IRadMemoryObject *, unsigned int)",
    ),
    Ok(
        "radSoundHalMemoryRegion::CreateChildRegion(unsigned int, unsigned int, char const *)",
    ),
    Ok(
        "radSoundHalMemoryRegion::CreateRoot(void *, unsigned int, unsigned int)",
    ),
    Ok(
        "radSoundHalMemoryRegion::~radSoundHalMemoryRegion(void)",
    ),
    Ok(
        "radSoundHalMemoryRegion::CreateMemoryObject(IRadMemoryObject **, unsigned int, char const *)",
    ),
    Ok(
        "radSoundHalMemoryRegion::GetSize(void)",
    ),
    Ok(
        "radSoundHalMemoryRegion::GetParent(void)",
    ),
    Ok(
        "radSoundHalMemoryRegion::GetFirstChild(void)",
    ),
    Ok(
        "radSoundHalMemoryRegion::GetNextChild(IRadSoundHalMemoryRegion *)",
    ),
    Ok(
        "radSoundHalMemoryRegion::GetStats(unsigned int *, unsigned int *, unsigned int *, bool)",
    ),
    Ok(
        "radSoundHalMemoryRegion::GetStats_Recurse(radSoundHalMemoryRegion *, unsigned int *, unsigned int *, unsigned int *, bool)",
    ),
    Ok(
        "radSoundHalBufferCalculateMemorySize(IRadSoundHalAudioFormat::SizeType, unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalAudioFormat *)",
    ),
    Ok(
        "radSoundHalDataSourceReadAlignmentGet(void)",
    ),
    Ok(
        "radSoundHalDataSourceReadMultipleGet(void)",
    ),
    Ok(
        "radSoundHalMemoryRegion type_info function",
    ),
    Ok(
        "IRadSoundHalMemoryRegion::IRadSoundHalMemoryRegion(void)",
    ),
    Ok(
        "radSoundHalMemoryRegion::AddRef(void)",
    ),
    Ok(
        "radSoundHalMemoryRegion::Release(void)",
    ),
    Ok(
        "IRadSoundHalMemoryRegion type_info function",
    ),
    Ok(
        "radSoundHalSystem::radSoundHalSystem(int)",
    ),
    Ok(
        "radSoundHalSystem::~radSoundHalSystem(void)",
    ),
    Ok(
        "radSoundHalSystem::Initialize(IRadSoundHalSystem::SystemDescription const &)",
    ),
    Ok(
        "radSoundHalSystem::GetRootMemoryRegion(void)",
    ),
    Ok(
        "radSoundHalSystem::GetNumAuxSends(void)",
    ),
    Ok(
        "radSoundHalSystem::SetOutputMode(radSoundOutputMode)",
    ),
    Ok(
        "radSoundHalSystem::GetOutputMode(void)",
    ),
    Ok(
        "radSoundHalSystem::GetReferenceClock(void)",
    ),
    Ok(
        "radSoundHalSystem::GetStats(IRadSoundHalSystem::Stats *)",
    ),
    Ok(
        "radSoundHalSystem::UpdateEffects(void)",
    ),
    Ok(
        "radSoundHalSystem::SetAuxEffect(unsigned int, IRadSoundHalEffect *)",
    ),
    Ok(
        "radSoundHalSystem::GetAuxEffect(unsigned int)",
    ),
    Ok(
        "radSoundHalSystem::SetAuxGain(unsigned int, float)",
    ),
    Ok(
        "radSoundHalSystem::GetAuxGain(unsigned int)",
    ),
    Ok(
        "radSoundHalSystem::Service(void)",
    ),
    Ok(
        "radSoundHalSystem::ServiceOncePerFrame(void)",
    ),
    Ok(
        "radSoundHalSystemGet(void)",
    ),
    Ok(
        "radSoundHalSystemInitialize(int)",
    ),
    Ok(
        "radSoundHalSystemTerminate(void)",
    ),
    Ok(
        "radSoundHalSystem type_info function",
    ),
    Ok(
        "IRadSoundHalSystem::IRadSoundHalSystem(void)",
    ),
    Ok(
        "radSoundHalSystem::AddRef(void)",
    ),
    Ok(
        "radSoundHalSystem::Release(void)",
    ),
    Ok(
        "IRadSoundHalSystem type_info function",
    ),
    Ok(
        "radSoundEffectPs2::radSoundEffectPs2(void)",
    ),
    Ok(
        "radSoundEffectPs2::~radSoundEffectPs2(void)",
    ),
    Ok(
        "radSoundEffectPs2::Update(void)",
    ),
    Ok(
        "radSoundEffectPs2::SetMasterGain(float)",
    ),
    Ok(
        "radSoundEffectPs2::GetMasterGain(void)",
    ),
    Ok(
        "radSoundEffectPs2::SetMode(IRadSoundEffectPs2::Mode)",
    ),
    Ok(
        "radSoundEffectPs2::GetMode(void)",
    ),
    Ok(
        "radSoundEffectPs2::SetDelay(float)",
    ),
    Ok(
        "radSoundEffectPs2::GetDelayTime(void)",
    ),
    Ok(
        "radSoundEffectPs2::SetFeedback(float)",
    ),
    Ok(
        "radSoundEffectPs2::GetFeedback(void)",
    ),
    Ok(
        "radSoundEffectPs2::SetGain(float)",
    ),
    Ok(
        "radSoundEffectPs2::GetGain(void)",
    ),
    Ok(
        "radSoundEffectPs2::SetEnabled(bool)",
    ),
    Ok(
        "radSoundEffectPs2::GetEnabled(void)",
    ),
    Ok(
        "radSoundEffectPs2::FindSonyModeInfo(void)",
    ),
    Ok(
        "radSoundEffectPs2::SetHardware(void)",
    ),
    Ok(
        "radSoundEffectPs2::Attach(unsigned int)",
    ),
    Ok(
        "radSoundEffectPs2::Detach(void)",
    ),
    Ok(
        "radSoundCreateEffectPs2(int)",
    ),
    Ok(
        "radSoundEffectPs2 type_info function",
    ),
    Ok(
        "IRadSoundEffectPs2::IRadSoundEffectPs2(void)",
    ),
    Ok(
        "radSoundEffectPs2::AddRef(void)",
    ),
    Ok(
        "radSoundEffectPs2::Release(void)",
    ),
    Ok(
        "IRadSoundEffectPs2 type_info function",
    ),
    Ok(
        "IRadSoundHalEffect::IRadSoundHalEffect(void)",
    ),
    Ok(
        "IRadSoundHalEffect type_info function",
    ),
    Ok(
        "radSoundIopPs2::radSoundIopPs2(unsigned int, unsigned int)",
    ),
    Ok(
        "radSoundIopPs2::~radSoundIopPs2(void)",
    ),
    Ok(
        "radSoundIopPs2::ThreadProc_RpcLoadReceive(void *)",
    ),
    Ok(
        "radSoundIopPs2::ThreadProc_RpcVoiceReceive(void *)",
    ),
    Ok(
        "radSoundIopPs2::RpcLoadHandler(unsigned int, void *, int)",
    ),
    Ok(
        "radSoundIopPs2::RpcVoiceHandler(unsigned int, void *, int)",
    ),
    Ok(
        "radSoundIopPs2::LoadBufferAsync(unsigned int, IRadSoundHalBuffer *, unsigned int, unsigned int)",
    ),
    Ok(
        "radSoundIopPs2::ClearBufferAsync(IRadSoundHalBuffer *, unsigned int, unsigned int)",
    ),
    Ok(
        "radSoundIopPs2::Service(void)",
    ),
    Ok(
        "radSoundIopPs2::LoadBufferComplete(void)",
    ),
    Ok(
        "radSoundIopPs2::ClearBufferComplete(void)",
    ),
    Ok(
        "radSoundIopPs2::BindToIopLoadServer(unsigned int)",
    ),
    Ok(
        "radSoundIopPs2::BindToIopVoiceServer(void)",
    ),
    Ok(
        "radSoundIopPs2::GetWriteCommandPacket(void)",
    ),
    Ok(
        "radSoundIopPs2::GetReadCommandPacket(void)",
    ),
    Ok(
        "radSoundIopPs2::GetInstance(void)",
    ),
    Ok(
        "radSoundIopPs2::Initialize(unsigned int, unsigned int, int)",
    ),
    Ok(
        "radSoundIopPs2::Terminate(void)",
    ),
    Ok(
        "radSoundIopPs2 type_info function",
    ),
    Ok(
        "radSoundIopPs2::AddRef(void)",
    ),
    Ok(
        "radSoundIopPs2::Release(void)",
    ),
    Ok(
        "radSoundVolumeAnalogToHardwareAdpcmPs2(float)",
    ),
    Ok(
        "radSoundVolumeAmplitudeToHardwareAdpcmPs2(float)",
    ),
    Ok(
        "radSoundPitchPercentageToHardwareAdpcmPs2(float, unsigned int)",
    ),
    Ok(
        "radSoundHalBufferAsyncRequestAdpcmPs2::radSoundHalBufferAsyncRequestAdpcmPs2(IRefCount *)",
    ),
    Ok(
        "radSoundHalBufferAsyncRequestAdpcmPs2::~radSoundHalBufferAsyncRequestAdpcmPs2(void)",
    ),
    Ok(
        "radSoundHalBufferAsyncRequestAdpcmPs2::Initialize(void)",
    ),
    Ok(
        "radSoundHalBufferAsyncRequestAdpcmPs2::Service(void)",
    ),
    Ok(
        "radSoundHalBufferAsyncRequestAdpcmPs2::CancelAllRequests(IRefCount *)",
    ),
    Ok(
        "radSoundHalBufferAsyncRequestAdpcmPs2 type_info function",
    ),
    Ok(
        "radSoundHalBufferAsyncRequestAdpcmPs2::AddRef(void)",
    ),
    Ok(
        "radSoundHalBufferAsyncRequestAdpcmPs2::Release(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::Initialize(IRadSoundHalAudioFormat *, IRadMemoryObject *, unsigned int, bool, bool)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::GetMemoryObject(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::ClearAsync(unsigned int, unsigned int, IRadSoundHalBufferClearCallback *)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::LoadAsync(IRadSoundHalDataSource *, unsigned int, unsigned int, IRadSoundHalBufferLoadCallback *)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::GetSizeInFrames(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::GetFormat(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::IsLooping(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::GetStartAddress(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::GetSizeInBytes(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::radSoundBufferAdpcmPs2(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::~radSoundBufferAdpcmPs2(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::CancelAsyncOperations(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::GetMinTransferSize(IRadSoundHalAudioFormat::SizeType)",
    ),
    Ok(
        "radSoundHalBufferCreate(int)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2 type_info function",
    ),
    Ok(
        "radLinkedClass<radSoundBufferAdpcmPs2> type_info function",
    ),
    Ok(
        "IRadSoundHalBuffer::IRadSoundHalBuffer(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::AddRef(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::Release(void)",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::ReSetAudioFormat(IRadSoundHalAudioFormat *)",
    ),
    Ok(
        "IRadSoundHalBuffer type_info function",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer::radSoundHalAdpcmBufferClearer(IRadSoundHalBuffer *, unsigned int, unsigned int, IRadSoundHalBufferClearCallback *)",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer::~radSoundHalAdpcmBufferClearer(void)",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer::BeginRequest(void)",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer::ServiceRequest(void)",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer::CallbackClient(void)",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer::CancelRequest(void)",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer::EndRequest(void)",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer type_info function",
    ),
    Ok(
        "radSoundPoolObject<radSoundHalAdpcmBufferClearer>::~radSoundPoolObject(void)",
    ),
    Ok(
        "radSoundPoolObject<radSoundHalAdpcmBufferClearer>::radSoundPoolObject(void)",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer::AddRef(void)",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer::Release(void)",
    ),
    Ok(
        "radSoundPoolObject<radSoundHalAdpcmBufferClearer> type_info function",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::OnDataSourceFramesLoaded(unsigned int)",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::ServiceRequest(void)",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::radSoundBufferAsyncLoaderAdpcmPs2(IRadSoundHalDataSource *, IRadSoundHalBuffer *, unsigned int, unsigned int, IRadSoundHalBufferLoadCallback *)",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::BeginRequest(void)",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::InternalService(void)",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::CancelRequest(void)",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::~radSoundBufferAsyncLoaderAdpcmPs2(void)",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2 type_info function",
    ),
    Ok(
        "IRadSoundHalDataSourceCallback::IRadSoundHalDataSourceCallback(void)",
    ),
    Ok(
        "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2>::~radSoundPoolObject(void)",
    ),
    Ok(
        "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2>::radSoundPoolObject(void)",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::AddRef(void)",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::Release(void)",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::EndRequest(void)",
    ),
    Ok(
        "IRadSoundHalDataSourceCallback type_info function",
    ),
    Ok(
        "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2> type_info function",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::Play(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::Stop(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::StopAndFreeHardwareVoices(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::IsPlaying(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetVoiceLoopAddresses(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::IsHardwarePlaying(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetPlaybackPositionInSamples(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetPlaybackPositionInSamples(unsigned int)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetStartAddressInSamples(unsigned int)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::FreeHardwareVoices(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetCoreVoices(unsigned int, unsigned int *, unsigned int)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetHardwareVoices(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetVoiceSwitchMask(unsigned int *)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetVoiceVolumes(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetVoiceEffects(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetVoicePitches(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::OcclusionAnalogToMultiplier(float)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::ObstructionAnalogToMultiplier(float)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::CalculateSurroundMultipliers(float *, float *)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::CaculateSurroundPanAmpFactor(float, float, float *, float *)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::radSoundVoiceAdpcmPs2(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::~radSoundVoiceAdpcmPs2(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetBuffer(IRadSoundHalBuffer *)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetBuffer(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetPositionalGroup(IRadSoundHalPositionalGroup *)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetPositionalGroup(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::OnApplyPositionalSettings(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetLeadVoice(unsigned int *)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::AttemptVoiceKill(unsigned int)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::HasVoiceOnCore(unsigned int)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetCoreWithMostFreeVoices(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetNumberOfUsedCoreVoices(unsigned int)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::Service(void)",
    ),
    Ok(
        "radSoundHalVoiceCreate(int)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2 type_info function",
    ),
    Ok(
        "radLinkedClass<radSoundVoiceAdpcmPs2> type_info function",
    ),
    Ok(
        "IRadSoundHalVoice::IRadSoundHalVoice(void)",
    ),
    Ok(
        "radSoundHalPositionalEntity::radSoundHalPositionalEntity(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::AddRef(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::Release(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetPriority(unsigned int)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetPriority(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetPitch(float)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetPitch(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetMuted(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetMuted(bool)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetTrim(float)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetTrim(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetPan(float)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetPan(void)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetAuxGain(unsigned int, float)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetAuxGain(unsigned int)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetAuxMode(unsigned int, radSoundAuxMode)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetAuxMode(unsigned int)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::SetVolume(float)",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::GetVolume(void)",
    ),
    Ok(
        "IRadSoundHalVoice type_info function",
    ),
    Ok(
        "radSoundHalPositionalEntity type_info function",
    ),
    Ok(
        "radSoundBufferedDataSource::radSoundBufferedDataSource(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::~radSoundBufferedDataSource(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::GetState(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::SetInputDataSource(IRadSoundHalDataSource *)",
    ),
    Ok(
        "radSoundBufferedDataSource::Initialize(radMemorySpace, IRadMemoryAllocator *, unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalAudioFormat *, char const *)",
    ),
    Ok(
        "radSoundBufferedDataSource::SetLowWaterMark(float)",
    ),
    Ok(
        "radSoundBufferedDataSource::GetLowWaterMark(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::GetFormat(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::GetInputDataSource(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::GetAvailableFrames(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::OnDataSourceFramesLoaded(unsigned int)",
    ),
    Ok(
        "radSoundBufferedDataSource::GetRemainingFrames(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
    ),
    Ok(
        "radSoundBufferedDataSource::ServiceCopy(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::OnMemoryCopyAsyncComplete(void *)",
    ),
    Ok(
        "radSoundBufferedDataSource::Update(unsigned int)",
    ),
    Ok(
        "radSoundBufferedDataSource::Service(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::ServiceInitializingSource(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::AllocateResources(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::ServiceRead(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::IsBufferFull(void)",
    ),
    Ok(
        "radSoundBufferedDataSourceCreate(int)",
    ),
    Ok(
        "radSoundUpdatableObject type_info function",
    ),
    Ok(
        "radSoundBufferedDataSource type_info function",
    ),
    Ok(
        "IRadSoundBufferedDataSource::IRadSoundBufferedDataSource(void)",
    ),
    Ok(
        "radSoundUpdatableObject::~radSoundUpdatableObject(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::AddRef(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::Release(void)",
    ),
    Ok(
        "radSoundBufferedDataSource::GetName(void)",
    ),
    Ok(
        "IRadSoundBufferedDataSource type_info function",
    ),
    Ok(
        "IRadSoundHalDataSource::IRadSoundHalDataSource(void)",
    ),
    Ok(
        "IRadSoundHalDataSource type_info function",
    ),
    Ok(
        "radSoundClip::radSoundClip(void)",
    ),
    Ok(
        "radSoundClip::~radSoundClip(void)",
    ),
    Ok(
        "radSoundClip::GetMemoryRegion(void)",
    ),
    Ok(
        "radSoundClip::Initialize(IRadSoundHalDataSource *, IRadSoundHalMemoryRegion *, bool, char const *)",
    ),
    Ok(
        "radSoundClip::GetLooping(void)",
    ),
    Ok(
        "radSoundClip::GetFormat(void)",
    ),
    Ok(
        "radSoundClip::SetTrim(float)",
    ),
    Ok(
        "radSoundClip::GetTrim(void)",
    ),
    Ok(
        "radSoundClip::SetState(IRadSoundClip::State)",
    ),
    Ok(
        "radSoundClip::GetState(void)",
    ),
    Ok(
        "radSoundClip::WillRelease(void)",
    ),
    Ok(
        "radSoundClip::Update(unsigned int)",
    ),
    Ok(
        "radSoundClip::OnBufferLoadComplete(unsigned int)",
    ),
    Ok(
        "radSoundClip::OnBufferClearComplete(void)",
    ),
    Ok(
        "radSoundClipCreate(int)",
    ),
    Ok(
        "radSoundClip::GetBuffer(void)",
    ),
    Ok(
        "radSoundClip type_info function",
    ),
    Ok(
        "radLinkedClass<radSoundClip> type_info function",
    ),
    Ok(
        "IRadSoundHalBufferLoadCallback::IRadSoundHalBufferLoadCallback(void)",
    ),
    Ok(
        "IRadSoundHalBufferClearCallback::IRadSoundHalBufferClearCallback(void)",
    ),
    Ok(
        "IRadSoundClip::IRadSoundClip(void)",
    ),
    Ok(
        "radSoundClip::AddRef(void)",
    ),
    Ok(
        "radSoundClip::Release(void)",
    ),
    Ok(
        "IRadSoundHalBufferLoadCallback type_info function",
    ),
    Ok(
        "IRadSoundHalBufferClearCallback type_info function",
    ),
    Ok(
        "IRadSoundClip type_info function",
    ),
    Ok(
        "radSoundClipPlayer::radSoundClipPlayer(int)",
    ),
    Ok(
        "radSoundClipPlayer::~radSoundClipPlayer(void)",
    ),
    Ok(
        "radSoundClipPlayer::SetPriority(unsigned int)",
    ),
    Ok(
        "radSoundClipPlayer::GetPriority(void)",
    ),
    Ok(
        "radSoundClipPlayer::SetClip(IRadSoundClip *)",
    ),
    Ok(
        "radSoundClipPlayer::GetClip(void)",
    ),
    Ok(
        "radSoundClipPlayer::IsPlaying(void)",
    ),
    Ok(
        "radSoundClipPlayer::Play(void)",
    ),
    Ok(
        "radSoundClipPlayer::Stop(void)",
    ),
    Ok(
        "radSoundClipPlayer::SetPlaybackPosition(unsigned int, IRadSoundHalAudioFormat::SizeType)",
    ),
    Ok(
        "radSoundClipPlayer::SetState(IRadSoundClipPlayer::State)",
    ),
    Ok(
        "radSoundClipPlayer::GetState(void)",
    ),
    Ok(
        "radSoundClipPlayer::SetTrim(float)",
    ),
    Ok(
        "radSoundClipPlayer::GetTrim(void)",
    ),
    Ok(
        "radSoundClipPlayer::StartVoice(void)",
    ),
    Ok(
        "radSoundClipPlayer::StopVoice(void)",
    ),
    Ok(
        "radSoundClipPlayer::SetVoiceBuffer(void)",
    ),
    Ok(
        "radSoundClipPlayer::Update(unsigned int)",
    ),
    Ok(
        "radSoundClipPlayer::SetPitch(float)",
    ),
    Ok(
        "radSoundClipPlayer::GetPitch(void)",
    ),
    Ok(
        "radSoundClipPlayer::SetPan(float)",
    ),
    Ok(
        "radSoundClipPlayer::GetPan(void)",
    ),
    Ok(
        "radSoundClipPlayer::SetAuxMode(unsigned int, radSoundAuxMode)",
    ),
    Ok(
        "radSoundClipPlayer::GetAuxMode(unsigned int)",
    ),
    Ok(
        "radSoundClipPlayer::SetAuxGain(unsigned int, float)",
    ),
    Ok(
        "radSoundClipPlayer::GetAuxGain(unsigned int)",
    ),
    Ok(
        "radSoundClipPlayer::GetPlaybackTimeInSamples(void)",
    ),
    Ok(
        "radSoundClipPlayer::SetMuted(bool)",
    ),
    Ok(
        "radSoundClipPlayer::GetMuted(void)",
    ),
    Ok(
        "radSoundClipPlayer::SetVolume(float)",
    ),
    Ok(
        "radSoundClipPlayer::GetVolume(void)",
    ),
    Ok(
        "radSoundClipPlayer::SetPositionalGroup(IRadSoundHalPositionalGroup *)",
    ),
    Ok(
        "radSoundClipPlayer::GetPositionalGroup(void)",
    ),
    Ok(
        "radSoundClipPlayerCreate(int)",
    ),
    Ok(
        "radSoundClipPlayer type_info function",
    ),
    Ok(
        "IRadSoundClipPlayer::IRadSoundClipPlayer(void)",
    ),
    Ok(
        "radSoundClipPlayer::AddRef(void)",
    ),
    Ok(
        "radSoundClipPlayer::Release(void)",
    ),
    Ok(
        "IRadSoundClipPlayer type_info function",
    ),
    Ok(
        "IRadSoundPlayer::IRadSoundPlayer(void)",
    ),
    Ok(
        "IRadSoundPlayer type_info function",
    ),
    Ok(
        "radSoundDataCache::radSoundDataCache(void)",
    ),
    Ok(
        "radSoundDataCache::~radSoundDataCache(void)",
    ),
    Ok(
        "radSoundDataCache::InitializeAsync(radMemorySpace, IRadMemoryAllocator *, IRadSoundHalDataSource *, char const *)",
    ),
    Ok(
        "radSoundDataCache::Update(unsigned int)",
    ),
    Ok(
        "radSoundDataCache::OnDataSourceFramesLoaded(unsigned int)",
    ),
    Ok(
        "radSoundDataCache::CreateDataSource(unsigned int, int)",
    ),
    Ok(
        "radSoundDataCache::GetState(void)",
    ),
    Ok(
        "radSoundDataCacheCreate(int)",
    ),
    Ok(
        "radSoundDataCacheDataSource::radSoundDataCacheDataSource(radSoundDataCache *, unsigned int)",
    ),
    Ok(
        "radSoundDataCacheDataSource::GetState(void)",
    ),
    Ok(
        "radSoundDataCacheDataSource::GetFormat(void)",
    ),
    Ok(
        "radSoundDataCacheDataSource::GetRemainingFrames(void)",
    ),
    Ok(
        "radSoundDataCacheDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
    ),
    Ok(
        "radSoundDataCache type_info function",
    ),
    Ok(
        "radSoundDataCacheDataSource::~radSoundDataCacheDataSource(void)",
    ),
    Ok(
        "radSoundDataCacheDataSource type_info function",
    ),
    Ok(
        "IRadSoundDataCache::IRadSoundDataCache(void)",
    ),
    Ok(
        "radSoundDataCache::AddRef(void)",
    ),
    Ok(
        "radSoundDataCache::Release(void)",
    ),
    Ok(
        "radSoundDataCache::WillRelease(void)",
    ),
    Ok(
        "radSoundDataCacheDataSource::AddRef(void)",
    ),
    Ok(
        "radSoundDataCacheDataSource::Release(void)",
    ),
    Ok(
        "radSoundDataCacheDataSource::GetAvailableFrames(void)",
    ),
    Ok(
        "radSoundDataCacheDataSource::GetName(void)",
    ),
    Ok(
        "IRadSoundDataCache type_info function",
    ),
    Ok(
        "Log(bool, char const *, unsigned int)",
    ),
    Ok(
        "RadSoundSetFilePerformanceCallback(void (*)(bool, char const *, unsigned int))",
    ),
    Ok(
        "radSoundRsdFileDataSource::radSoundRsdFileDataSource(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::~radSoundRsdFileDataSource(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::GetState(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::InitializeFromFile(IRadFile *, unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalAudioFormat *)",
    ),
    Ok(
        "radSoundRsdFileDataSource::InitializeFromFileName(char const *, bool, unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalAudioFormat *)",
    ),
    Ok(
        "radSoundRsdFileDataSource::GetFormat(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::GetRemainingFrames(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
    ),
    Ok(
        "radSoundRsdFileDataSource::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "radSoundRsdFileDataSource::_StateOpeningFile(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::_StateReadingHeader(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::InitFile(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::_StateIdle(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::_StateReadingData(void)",
    ),
    Ok(
        "radSoundRsdFileDataSourceCreate(int)",
    ),
    Ok(
        "radSoundRsdFileDataSource type_info function",
    ),
    Ok(
        "IRadSoundRsdFileDataSource::IRadSoundRsdFileDataSource(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::AddRef(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::Release(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::GetName(void)",
    ),
    Ok(
        "radSoundRsdFileDataSource::GetAvailableFrames(void)",
    ),
    Ok(
        "IRadSoundRsdFileDataSource type_info function",
    ),
    Ok(
        "radSoundMemoryDataSource::radSoundMemoryDataSource(void)",
    ),
    Ok(
        "radSoundMemoryDataSource::~radSoundMemoryDataSource(void)",
    ),
    Ok(
        "radSoundMemoryDataSource::Initialize(IRadSoundHalAudioFormat *, IRadSoundMemorySpaceObject *, unsigned int, unsigned int, IRadSoundHalAudioFormat::SizeType)",
    ),
    Ok(
        "radSoundMemoryDataSource::GetState(void)",
    ),
    Ok(
        "radSoundMemoryDataSource::GetFormat(void)",
    ),
    Ok(
        "radSoundMemoryDataSource::GetRemainingFrames(void)",
    ),
    Ok(
        "radSoundMemoryDataSource::Update(unsigned int)",
    ),
    Ok(
        "radSoundMemoryDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
    ),
    Ok(
        "radSoundMemoryDataSourceCreate(int)",
    ),
    Ok(
        "radSoundMemoryDataSource type_info function",
    ),
    Ok(
        "IRadSoundMemoryDataSource::IRadSoundMemoryDataSource(void)",
    ),
    Ok(
        "radSoundMemoryDataSource::AddRef(void)",
    ),
    Ok(
        "radSoundMemoryDataSource::Release(void)",
    ),
    Ok(
        "radSoundMemoryDataSource::GetAvailableFrames(void)",
    ),
    Ok(
        "radSoundMemoryDataSource::GetName(void)",
    ),
    Ok(
        "IRadSoundMemoryDataSource type_info function",
    ),
    Ok(
        "radSoundMemorySpaceObject::radSoundMemorySpaceObject(void)",
    ),
    Ok(
        "radSoundMemorySpaceObject::~radSoundMemorySpaceObject(void)",
    ),
    Ok(
        "radSoundMemorySpaceObject::Initialize(radMemorySpace, IRadMemoryAllocator *, unsigned int, unsigned int, char const *)",
    ),
    Ok(
        "radSoundMemorySpaceObject::GetAddress(void)",
    ),
    Ok(
        "radSoundMemorySpaceObject::GetAllocator(void)",
    ),
    Ok(
        "radSoundMemorySpaceObject::GetMemorySpace(void)",
    ),
    Ok(
        "radSoundMemorySpaceObject::GetSizeInBytes(void)",
    ),
    Ok(
        "radSoundMemorySpaceObject::GetIdentifier(void)",
    ),
    Ok(
        "radSoundMemorySpaceObjectCreate(int)",
    ),
    Ok(
        "radSoundMemorySpaceObject type_info function",
    ),
    Ok(
        "IRadSoundMemorySpaceObject::IRadSoundMemorySpaceObject(void)",
    ),
    Ok(
        "radSoundMemorySpaceObject::AddRef(void)",
    ),
    Ok(
        "radSoundMemorySpaceObject::Release(void)",
    ),
    Ok(
        "IRadSoundMemorySpaceObject type_info function",
    ),
    Ok(
        "radSoundStitchedDataSource::radSoundStitchedDataSource(void)",
    ),
    Ok(
        "radSoundStitchedDataSource::~radSoundStitchedDataSource(void)",
    ),
    Ok(
        "radSoundStitchedDataSource::InitializeFromAudioFormat(IRadSoundHalAudioFormat *)",
    ),
    Ok(
        "radSoundStitchedDataSource::InitializeFromDataSource(IRadSoundHalDataSource *)",
    ),
    Ok(
        "radSoundStitchedDataSource::SetStitchCallback(IRadSoundStitchCallback *, void *)",
    ),
    Ok(
        "radSoundStitchedDataSource::GetState(void)",
    ),
    Ok(
        "radSoundStitchedDataSource::GetFormat(void)",
    ),
    Ok(
        "radSoundStitchedDataSource::GetRemainingFrames(void)",
    ),
    Ok(
        "radSoundStitchedDataSource::Update(unsigned int)",
    ),
    Ok(
        "radSoundStitchedDataSource::ResetAudioFormat(IRadSoundHalAudioFormat *)",
    ),
    Ok(
        "radSoundStitchedDataSource::Reset(void)",
    ),
    Ok(
        "radSoundStitchedDataSource::Service(void)",
    ),
    Ok(
        "radSoundStitchedDataSource::OnDataSourceFramesLoaded(unsigned int)",
    ),
    Ok(
        "radSoundStitchedDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
    ),
    Ok(
        "radSoundStitchedDataSourceCreate(int)",
    ),
    Ok(
        "radSoundStitchedDataSource type_info function",
    ),
    Ok(
        "IRadSoundStitchedDataSource::IRadSoundStitchedDataSource(void)",
    ),
    Ok(
        "radSoundStitchedDataSource::AddRef(void)",
    ),
    Ok(
        "radSoundStitchedDataSource::Release(void)",
    ),
    Ok(
        "radSoundStitchedDataSource::GetAvailableFrames(void)",
    ),
    Ok(
        "radSoundStitchedDataSource::GetName(void)",
    ),
    Ok(
        "IRadSoundStitchedDataSource type_info function",
    ),
    Ok(
        "radSoundStreamPlayer::radSoundStreamPlayer(void)",
    ),
    Ok(
        "radSoundStreamPlayer::~radSoundStreamPlayer(void)",
    ),
    Ok(
        "radSoundStreamPlayer::InitializeAsync(unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalMemoryRegion *, char const *)",
    ),
    Ok(
        "radSoundStreamPlayer::Initialize(IRadSoundHalAudioFormat *, unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalMemoryRegion *, char const *)",
    ),
    Ok(
        "radSoundStreamPlayer::SetLowWaterMark(float)",
    ),
    Ok(
        "radSoundStreamPlayer::GetLowWaterMark(void)",
    ),
    Ok(
        "radSoundStreamPlayer::AllocateResources(IRadSoundHalAudioFormat *)",
    ),
    Ok(
        "radSoundStreamPlayer::Play(void)",
    ),
    Ok(
        "radSoundStreamPlayer::SetState(IRadSoundStreamPlayer::State)",
    ),
    Ok(
        "radSoundStreamPlayer::Stop(void)",
    ),
    Ok(
        "radSoundStreamPlayer::StopVoice(bool)",
    ),
    Ok(
        "radSoundStreamPlayer::IsPlaying(void)",
    ),
    Ok(
        "radSoundStreamPlayer::SetDataSource(IRadSoundHalDataSource *)",
    ),
    Ok(
        "radSoundStreamPlayer::OnBufferLoadComplete(unsigned int)",
    ),
    Ok(
        "radSoundStreamPlayer::OnBufferClearComplete(void)",
    ),
    Ok(
        "radSoundStreamPlayer::Update(unsigned int)",
    ),
    Ok(
        "radSoundStreamPlayer::ServiceStateMachine(void)",
    ),
    Ok(
        "radSoundStreamPlayer::ServicePlay(void)",
    ),
    Ok(
        "radSoundStreamPlayer::ServiceLoad(void)",
    ),
    Ok(
        "radSoundStreamPlayer::GetPlaybackTimeInSamples(void)",
    ),
    Ok(
        "radSoundStreamPlayer::SetPriority(unsigned int)",
    ),
    Ok(
        "radSoundStreamPlayer::GetPriority(void)",
    ),
    Ok(
        "radSoundStreamPlayer::SetMuted(bool)",
    ),
    Ok(
        "radSoundStreamPlayer::GetMuted(void)",
    ),
    Ok(
        "radSoundStreamPlayer::SetVolume(float)",
    ),
    Ok(
        "radSoundStreamPlayer::GetVolume(void)",
    ),
    Ok(
        "radSoundStreamPlayer::SetTrim(float)",
    ),
    Ok(
        "radSoundStreamPlayer::GetTrim(void)",
    ),
    Ok(
        "radSoundStreamPlayer::SetPitch(float)",
    ),
    Ok(
        "radSoundStreamPlayer::GetPitch(void)",
    ),
    Ok(
        "radSoundStreamPlayer::SetPan(float)",
    ),
    Ok(
        "radSoundStreamPlayer::GetPan(void)",
    ),
    Ok(
        "radSoundStreamPlayer::SetAuxMode(unsigned int, radSoundAuxMode)",
    ),
    Ok(
        "radSoundStreamPlayer::GetAuxMode(unsigned int)",
    ),
    Ok(
        "radSoundStreamPlayer::SetAuxGain(unsigned int, float)",
    ),
    Ok(
        "radSoundStreamPlayer::GetAuxGain(unsigned int)",
    ),
    Ok(
        "radSoundStreamPlayer::SetPositionalGroup(IRadSoundHalPositionalGroup *)",
    ),
    Ok(
        "radSoundStreamPlayer::GetPositionalGroup(void)",
    ),
    Ok(
        "radSoundStreamPlayer::GetDataSource(void)",
    ),
    Ok(
        "radSoundStreamPlayer::GetFormat(void)",
    ),
    Ok(
        "radSoundStreamPlayer::GetState(void)",
    ),
    Ok(
        "radSoundStreamPlayerCreate(int)",
    ),
    Ok(
        "radSoundStreamPlayer type_info function",
    ),
    Ok(
        "IRadSoundStreamPlayer::IRadSoundStreamPlayer(void)",
    ),
    Ok(
        "radSoundStreamPlayer::AddRef(void)",
    ),
    Ok(
        "radSoundStreamPlayer::Release(void)",
    ),
    Ok(
        "IRadSoundStreamPlayer type_info function",
    ),
    Ok(
        "radSoundPrintBanner(void)",
    ),
    Ok(
        "radSoundHalFileHeader::ConvertToPlatformEndian(void)",
    ),
    Ok(
        "radSoundHalFileHeader::GetEncodingFromChars(char *)",
    ),
    Ok(
        "radSoundHalFileHeader::InitializeAudioFormat(IRadSoundHalAudioFormat *, int)",
    ),
    Ok(
        "radSoundHalCreateRollOffTable(float, float *, unsigned int)",
    ),
    Ok(
        "IRadScript::IRadScript(int)",
    ),
    Ok(
        "IRadScript::~IRadScript(void)",
    ),
    Ok(
        "IRadScript::UnLoad(void)",
    ),
    Ok(
        "IRadScript::SetContext(IRadNameSpace *)",
    ),
    Ok(
        "IRadScript::SetAllocator(int)",
    ),
    Ok(
        "IRadScript::Load(char const *, void (*)(void *), void *, int)",
    ),
    Ok(
        "IRadScript::TokenizeScript(void)",
    ),
    Ok(
        "IRadScript::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "radScriptInitialize(int)",
    ),
    Ok(
        "radScriptTerminate(void)",
    ),
    Ok(
        "IRadScript type_info function",
    ),
    Ok(
        "IRadScript::AddRef(void)",
    ),
    Ok(
        "IRadScript::Release(void)",
    ),
    Ok(
        "radNameSpaceCreate(unsigned int)",
    ),
    Ok(
        "IRadNameSpace type_info function",
    ),
    Ok(
        "radLinkedClass<IRadNameSpace> type_info function",
    ),
    Ok(
        "IRadNameSpace::AddRef(void)",
    ),
    Ok(
        "IRadNameSpace::Release(void)",
    ),
    Ok(
        "IRadNameSpace::~IRadNameSpace(void)",
    ),
    Ok(
        "radFactoryInitialize(int)",
    ),
    Ok(
        "radFactoryTerminate(void)",
    ),
    Ok(
        "radFactoryRegister(char const *, IRefCount *(*)(int))",
    ),
    Ok(
        "radFactoryRegister(unsigned int, IRefCount *(*)(int))",
    ),
    Ok(
        "radFactoryRegister(char const *, void (*)(IRefCount **, int))",
    ),
    Ok(
        "radFactoryRegister(unsigned int, void (*)(IRefCount **, int))",
    ),
    Ok(
        "radFactoryCreateInstance(char const *, IRefCount **, int)",
    ),
    Ok(
        "radFactoryCreateInstance(unsigned int, IRefCount **, int)",
    ),
    Ok(
        "radFactoryNode type_info function",
    ),
    Ok(
        "radFactoryNode::~radFactoryNode(void)",
    ),
    Ok(
        "radTypeInfoLoaderCreate(int)",
    ),
    Ok(
        "radTypeInfoLoader type_info function",
    ),
    Ok(
        "IRadTypeInfoLoader::IRadTypeInfoLoader(void)",
    ),
    Ok(
        "radTypeInfoLoader::AddRef(void)",
    ),
    Ok(
        "radTypeInfoLoader::Release(void)",
    ),
    Ok(
        "radTypeInfoLoader::Initialize(IRadTypeInfoSystem *, int, char const *, void (*)(void *), void *, bool)",
    ),
    Ok(
        "radTypeInfoLoader::~radTypeInfoLoader(void)",
    ),
    Ok(
        "radTypeInfoLoader::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "radObjectListNode type_info function",
    ),
    Ok(
        "IRadObjectList type_info function",
    ),
    Ok(
        "IRadTypeInfoLoader type_info function",
    ),
    Ok(
        "IRadTypeInfo type_info function",
    ),
    Ok(
        "IRadTypeInfoIntLiteral type_info function",
    ),
    Ok(
        "IRadTypeInfoEnum type_info function",
    ),
    Ok(
        "IRadTypeInfoParam::~IRadTypeInfoParam(void)",
    ),
    Ok(
        "IRadTypeInfoParam type_info function",
    ),
    Ok(
        "IRadTypeInfoMethod type_info function",
    ),
    Ok(
        "radObjectListNode::~radObjectListNode(void)",
    ),
    Ok(
        "IRadObjectList::AddRef(void)",
    ),
    Ok(
        "IRadObjectList::Release(void)",
    ),
    Ok(
        "IRadObjectList::~IRadObjectList(void)",
    ),
    Ok(
        "IRadTypeInfo::AddRef(void)",
    ),
    Ok(
        "IRadTypeInfo::Release(void)",
    ),
    Ok(
        "IRadTypeInfoIntLiteral::AddRef(void)",
    ),
    Ok(
        "IRadTypeInfoIntLiteral::Release(void)",
    ),
    Ok(
        "IRadTypeInfoEnum::AddRef(void)",
    ),
    Ok(
        "IRadTypeInfoEnum::Release(void)",
    ),
    Ok(
        "IRadTypeInfoParam::AddRef(void)",
    ),
    Ok(
        "IRadTypeInfoParam::Release(void)",
    ),
    Ok(
        "IRadTypeInfoMethod::AddRef(void)",
    ),
    Ok(
        "IRadTypeInfoMethod::Release(void)",
    ),
    Ok(
        "IRadTypeInfoEnum::~IRadTypeInfoEnum(void)",
    ),
    Ok(
        "IRadTypeInfoIntLiteral::~IRadTypeInfoIntLiteral(void)",
    ),
    Ok(
        "IRadTypeInfoParam::Initialize(char const *, char const *, int)",
    ),
    Ok(
        "IRadTypeInfoMethod::~IRadTypeInfoMethod(void)",
    ),
    Ok(
        "IRadTypeInfo::~IRadTypeInfo(void)",
    ),
    Ok(
        "IRadTypeInfoMethod::Invoke(void *, void *, unsigned int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radTypeInfoSystemGet(void)",
    ),
    Ok(
        "radTypeInfoSystemInitialize(int)",
    ),
    Ok(
        "radTypeInfoSystemTerminate(void)",
    ),
    Ok(
        "radScriptUnLoadAllTypeInfo(void)",
    ),
    Ok(
        "IRadTypeInfoSystem type_info function",
    ),
    Ok(
        "IRadTypeInfoSystem::AddRef(void)",
    ),
    Ok(
        "IRadTypeInfoSystem::Release(void)",
    ),
    Ok(
        "IRadTypeInfoSystem::~IRadTypeInfoSystem(void)",
    ),
    Ok(
        "global constructors keyed to ParserConst::TOK_CREATE",
    ),
    Ok(
        "global destructors keyed to ParserConst::TOK_CREATE",
    ),
    Ok(
        "radMoviePlayer::radMoviePlayer(void)",
    ),
    Ok(
        "radMoviePlayer::~radMoviePlayer(void)",
    ),
    Ok(
        "radMoviePlayer::Initialize(IRadMovieRenderLoop *, IRadMovieRenderStrategy *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, IRadSoundHalAudioFormat::SizeType)",
    ),
    Ok(
        "radMoviePlayer::Render(void)",
    ),
    Ok(
        "radMoviePlayer::Load(char const *, unsigned int)",
    ),
    Ok(
        "radMoviePlayer::Unload(void)",
    ),
    Ok(
        "radMoviePlayer::Play(void)",
    ),
    Ok(
        "radMoviePlayer::Pause(void)",
    ),
    Ok(
        "radMoviePlayer::SetPan(float)",
    ),
    Ok(
        "radMoviePlayer::GetPan(void)",
    ),
    Ok(
        "radMoviePlayer::SetVolume(float)",
    ),
    Ok(
        "radMoviePlayer::GetVolume(void)",
    ),
    Ok(
        "radMoviePlayer::GetState(void)",
    ),
    Ok(
        "radMoviePlayer::GetVideoFrameInfo(IRadMoviePlayer2::VideoFrameInfo *)",
    ),
    Ok(
        "radMoviePlayer::GetFrameRate(void)",
    ),
    Ok(
        "radMoviePlayer::GetCurrentFrameNumber(void)",
    ),
    Ok(
        "radMoviePlayer::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "radMoviePlayer::Service(void)",
    ),
    Ok(
        "radMoviePlayer::GetCurrentTime(void)",
    ),
    Ok(
        "radMoviePlayer::SetState(IRadMoviePlayer2::State)",
    ),
    Ok(
        "radMoviePlayer::InternalPlay(void)",
    ),
    Ok(
        "radMoviePlayerCreate2(int)",
    ),
    Ok(
        "radMovieInitialize2(int)",
    ),
    Ok(
        "radMovieTerminate2(void)",
    ),
    Ok(
        "radMovieService2(void)",
    ),
    Ok(
        "radMoviePlayer type_info function",
    ),
    Ok(
        "radLinkedClass<radMoviePlayer> type_info function",
    ),
    Ok(
        "IRadMoviePlayer2::IRadMoviePlayer2(void)",
    ),
    Ok(
        "radMoviePlayer::AddRef(void)",
    ),
    Ok(
        "radMoviePlayer::Release(void)",
    ),
    Ok(
        "IRadMoviePlayer2 type_info function",
    ),
    Ok(
        "radMovieIpuPs2::radMovieIpuPs2(void)",
    ),
    Ok(
        "radMovieIpuPs2::~radMovieIpuPs2(void)",
    ),
    Ok(
        "radMovieIpuPs2::Service(void)",
    ),
    Ok(
        "radMovieIpuPs2::InputAsync(void *, unsigned int)",
    ),
    Ok(
        "radMovieIpuPs2::IsInputRequired(void)",
    ),
    Ok(
        "radMovieIpuPs2::DecodeFrameAsync(void *, unsigned int)",
    ),
    Ok(
        "radMovieIpuPs2::GetState(void)",
    ),
    Ok(
        "radMovieIpuPs2::Flush(void)",
    ),
    Ok(
        "radMovieIpuPs2::DmaFromIpuHandler(int, void *, void *)",
    ),
    Ok(
        "radMovieIpuPs2::OnDmaInterruptFromIpu(void)",
    ),
    Ok(
        "radMovieIpuPs2::Initialize(int)",
    ),
    Ok(
        "radMovieIpuPs2::Terminate(void)",
    ),
    Ok(
        "radMovieIpuPs2::GetInstance(void)",
    ),
    Ok(
        "radMovieVideoDecoderInitialize(int)",
    ),
    Ok(
        "radMovieVideoDecoderTerminate(void)",
    ),
    Ok(
        "radMovieIpuPs2 type_info function",
    ),
    Ok(
        "radMovieIpuPs2::AddRef(void)",
    ),
    Ok(
        "radMovieIpuPs2::Release(void)",
    ),
    Ok(
        "global constructors keyed to radMovieIpuPs2::s_refTheRadMovieIpuPs2",
    ),
    Ok(
        "global destructors keyed to radMovieIpuPs2::s_refTheRadMovieIpuPs2",
    ),
    Ok(
        "radMovieVideoDecoderPs2::radMovieVideoDecoderPs2(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::~radMovieVideoDecoderPs2(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::Initialize(unsigned int, unsigned int, unsigned int)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::SetSource(IRadFile *, unsigned int, unsigned int, unsigned int, unsigned int)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::Reset(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::Service(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::MonitorDecoder(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::AddDataToBuffer(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::AddDataToDecoder(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::GetState(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::GetFrameRate(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::GetCurrentFrameNumber(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::GetLockedVideoFrame(unsigned int *)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::UnlockVideoFrame(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::DecodeNextFrame(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::SetState(IRadMovieVideoDecoder::State)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::SetFileState(radMovieVideoDecoderPs2::FileState)",
    ),
    Ok(
        "radMovieVideoDecoderCreate(int)",
    ),
    Ok(
        "radMovieVideoDecoderPs2 type_info function",
    ),
    Ok(
        "IRadMovieVideoDecoder::IRadMovieVideoDecoder(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::AddRef(void)",
    ),
    Ok(
        "radMovieVideoDecoderPs2::Release(void)",
    ),
    Ok(
        "IRadMovieVideoDecoder type_info function",
    ),
    Ok(
        "radMovieRenderStrategyPs2::radMovieRenderStrategyPs2(void)",
    ),
    Ok(
        "radMovieRenderStrategyPs2::~radMovieRenderStrategyPs2(void)",
    ),
    Ok(
        "radMovieRenderStrategyPs2::SetParameters(unsigned int, unsigned int)",
    ),
    Ok(
        "radMovieRenderStrategyPs2::Render(void *)",
    ),
    Ok(
        "radMovieRenderStrategyPs2::PrepareImageTags(void *, unsigned int *)",
    ),
    Ok(
        "radMovieSimpleFullScreenRenderStrategyCreate(int)",
    ),
    Ok(
        "radMovieRenderStrategyPs2 type_info function",
    ),
    Ok(
        "IRadMovieRenderStrategy::IRadMovieRenderStrategy(void)",
    ),
    Ok(
        "radMovieRenderStrategyPs2::AddRef(void)",
    ),
    Ok(
        "radMovieRenderStrategyPs2::Release(void)",
    ),
    Ok(
        "IRadMovieRenderStrategy type_info function",
    ),
    Ok(
        "radMovieAudioDataSource::radMovieAudioDataSource(void)",
    ),
    Ok(
        "radMovieAudioDataSource::~radMovieAudioDataSource(void)",
    ),
    Ok(
        "radMovieAudioDataSource::GetState(void)",
    ),
    Ok(
        "radMovieAudioDataSource::Initialize(IRadFile *, unsigned int, unsigned int)",
    ),
    Ok(
        "radMovieAudioDataSource::GetFormat(void)",
    ),
    Ok(
        "radMovieAudioDataSource::GetRemainingFrames(void)",
    ),
    Ok(
        "radMovieAudioDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
    ),
    Ok(
        "radMovieAudioDataSource::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "radMovieAudioDataSource::_StateOpeningFile(void)",
    ),
    Ok(
        "radMovieAudioDataSource::_StateReadingHeader(void)",
    ),
    Ok(
        "radMovieAudioDataSource::InitFile(void)",
    ),
    Ok(
        "radMovieAudioDataSource::_StateIdle(void)",
    ),
    Ok(
        "radMovieAudioDataSource::_StateReadingData(void)",
    ),
    Ok(
        "radMovieAudioDataSourceCreate(int)",
    ),
    Ok(
        "radMovieAudioDataSource type_info function",
    ),
    Ok(
        "radMovieAudioDataSource::AddRef(void)",
    ),
    Ok(
        "radMovieAudioDataSource::Release(void)",
    ),
    Ok(
        "radMovieAudioDataSource::GetName(void)",
    ),
    Ok(
        "radMovieAudioDataSource::GetAvailableFrames(void)",
    ),
    Ok(
        "rDebugVsnPrintf(char *, unsigned int, char const *, char *)",
    ),
    Ok(
        "rDebugSnPrintf(char *, unsigned int, char const *, ...)",
    ),
    Ok(
        "rDebugAssertFail_Implementation(char const *, char const *, unsigned int)",
    ),
    Ok(
        "rDebugWarningFail_Implementation(char const *, char const *, unsigned int)",
    ),
    Ok(
        "rDebugString_Implementation(char const *)",
    ),
    Ok(
        "rDebuggerString_Implementation(char const *)",
    ),
    Ok(
        "rReleasePrintf(char const *, ...)",
    ),
    Ok(
        "global constructors keyed to rDebugVsnPrintf(char *, unsigned int, char const *, char *)",
    ),
    Ok(
        "global destructors keyed to rDebugVsnPrintf(char *, unsigned int, char const *, char *)",
    ),
    Ok(
        "radTimeInitialize(void)",
    ),
    Ok(
        "radTimeTerminate(void)",
    ),
    Ok(
        "radTimeGetMicroseconds(void)",
    ),
    Ok(
        "radTimeGetMicroseconds64(void)",
    ),
    Ok(
        "radTimeGetMilliseconds(void)",
    ),
    Ok(
        "radTimeGetSeconds(void)",
    ),
    Ok(
        "radTimeGetDate(radDate *)",
    ),
    Ok(
        "radTimeGetWeekday(unsigned short, unsigned char, unsigned char)",
    ),
    Ok(
        "radTimeCreateList(IRadTimerList **, unsigned int, int)",
    ),
    Ok(
        "radTimerList::radTimerList(unsigned int, int)",
    ),
    Ok(
        "radTimerList::~radTimerList(void)",
    ),
    Ok(
        "radTimerList::AddRef(void)",
    ),
    Ok(
        "radTimerList::Release(void)",
    ),
    Ok(
        "radTimerList::CreateTimer(IRadTimer **, unsigned int, IRadTimerCallback *, void *, bool, IRadTimer::ResetMode)",
    ),
    Ok(
        "radTimerList::Service(void)",
    ),
    Ok(
        "radTimerList::Service(unsigned int)",
    ),
    Ok(
        "radTimerList::AllocateTimerMemory(void)",
    ),
    Ok(
        "radTimerList::FreeTimerMemory(void *)",
    ),
    Ok(
        "radTimer::radTimer(radTimerList *, unsigned int, IRadTimerCallback *, void *, bool, IRadTimer::ResetMode)",
    ),
    Ok(
        "radTimer::~radTimer(void)",
    ),
    Ok(
        "radTimer::operator new(unsigned int, radTimerList *)",
    ),
    Ok(
        "radTimer::AddRef(void)",
    ),
    Ok(
        "radTimer::Release(void)",
    ),
    Ok(
        "radTimer::Start(void)",
    ),
    Ok(
        "radTimer::Stop(void)",
    ),
    Ok(
        "radTimer::RegisterCallback(IRadTimerCallback *, void *)",
    ),
    Ok(
        "radTimer::UnregisterCallback(IRadTimerCallback *)",
    ),
    Ok(
        "radTimer::GetTimeout(void)",
    ),
    Ok(
        "radTimer::SetTimeout(unsigned int)",
    ),
    Ok(
        "radTimer::GetResetMode(void)",
    ),
    Ok(
        "radTimer::SetResetMode(IRadTimer::ResetMode)",
    ),
    Ok(
        "radTimer::HasTimerExpired(void)",
    ),
    Ok(
        "radTimerList type_info function",
    ),
    Ok(
        "radTimer type_info function",
    ),
    Ok(
        "IRadTimer::IRadTimer(void)",
    ),
    Ok(
        "IRadTimerList::IRadTimerList(void)",
    ),
    Ok(
        "IRadTimer type_info function",
    ),
    Ok(
        "IRadTimerList type_info function",
    ),
    Ok(
        "radTimeCreateStopwatch(IRadStopwatch **, radTimeUnit, int)",
    ),
    Ok(
        "radTimeGetUnitName(radTimeUnit, char *)",
    ),
    Ok(
        "radStopwatch::radStopwatch(void)",
    ),
    Ok(
        "radStopwatch::~radStopwatch(void)",
    ),
    Ok(
        "radStopwatch::AddRef(void)",
    ),
    Ok(
        "radStopwatch::Release(void)",
    ),
    Ok(
        "radStopwatch::Start(void)",
    ),
    Ok(
        "radStopwatch::Stop(void)",
    ),
    Ok(
        "radStopwatch::GetElapsedTime(void) const",
    ),
    Ok(
        "radStopwatch::GetElapsedTime(radTimeUnit) const",
    ),
    Ok(
        "radStopwatch::IsRunning(void) const",
    ),
    Ok(
        "radStopwatch::Reset(void)",
    ),
    Ok(
        "radStopwatch::SetTimeUnits(radTimeUnit)",
    ),
    Ok(
        "radStopwatch::GetTimeUnits(void) const",
    ),
    Ok(
        "radStopwatch::GetConversionFactor(radTimeUnit, radTimeUnit, unsigned int *, unsigned int *)",
    ),
    Ok(
        "radStopwatch::GetTime(void) const",
    ),
    Ok(
        "radStopwatch type_info function",
    ),
    Ok(
        "IRadStopwatch::IRadStopwatch(void)",
    ),
    Ok(
        "IRadStopwatch type_info function",
    ),
    Ok(
        "radMemoryRoundUp(unsigned int, unsigned int)",
    ),
    Ok(
        "radMemoryRoundDown(unsigned int, unsigned int)",
    ),
    Ok(
        "radMemoryIsAligned(unsigned int, unsigned int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radMemoryCreateDougLeaHeap(unsigned int, int, char const *)",
    ),
    Ok(
        "radMemoryDlAllocator type_info function",
    ),
    Ok(
        "IRadMemoryHeap::IRadMemoryHeap(void)",
    ),
    Ok(
        "IRadMemoryHeap::AllowFreeing(bool)",
    ),
    Ok(
        "radMemoryDlAllocator::AddRef(void)",
    ),
    Ok(
        "radMemoryDlAllocator::Release(void)",
    ),
    Ok(
        "radMemoryDlAllocator::ValidateHeap(void)",
    ),
    Ok(
        "radMemoryDlAllocator::GetMemoryObject(IRadMemoryObject **, unsigned int)",
    ),
    Ok(
        "radMemoryDlAllocator::GetMemoryObjectAligned(IRadMemoryObject **, unsigned int, unsigned int)",
    ),
    Ok(
        "radMemoryDlAllocator::GetMemory(unsigned int)",
    ),
    Ok(
        "radMemoryDlAllocator::GetMemoryAligned(unsigned int, unsigned int)",
    ),
    Ok(
        "radMemoryDlAllocator::FreeMemoryAligned(void *)",
    ),
    Ok(
        "radMemoryDlAllocator::FreeMemory(void *)",
    ),
    Ok(
        "radMemoryDlAllocator::CanFreeMemory(void *)",
    ),
    Ok(
        "radMemoryDlAllocator::CanFreeMemoryAligned(void *)",
    ),
    Ok(
        "radMemoryDlAllocator::GetStatus(unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
    ),
    Ok(
        "radMemoryDlAllocator::GetSize(void)",
    ),
    Ok(
        "radMemoryDlAllocator::Chain(IRadMemoryHeap *)",
    ),
    Ok(
        "radMemoryDlAllocator::~radMemoryDlAllocator(void)",
    ),
    Ok(
        "IRadMemoryAllocator::IRadMemoryAllocator(void)",
    ),
    Ok(
        "radMemoryExternalHeapCreate(IRadMemoryHeap **, void *, unsigned int, radMemorySpace, unsigned int, unsigned int, int, char const *)",
    ),
    Ok(
        "ExternalMemoryHeap::operator new(unsigned int, int)",
    ),
    Ok(
        "ExternalMemoryHeap::operator delete(void *)",
    ),
    Ok(
        "ExternalMemoryHeap::AddRef(void)",
    ),
    Ok(
        "ExternalMemoryHeap::Release(void)",
    ),
    Ok(
        "ExternalMemoryHeap::GetMemoryObject(IRadMemoryObject **, unsigned int)",
    ),
    Ok(
        "ExternalMemoryHeap::GetMemoryObjectAligned(IRadMemoryObject **, unsigned int, unsigned int)",
    ),
    Ok(
        "ExternalMemoryHeap::GetMemory(unsigned int)",
    ),
    Ok(
        "ExternalMemoryHeap::GetMemoryAligned(unsigned int, unsigned int)",
    ),
    Ok(
        "ExternalMemoryHeap::CanFree(void *)",
    ),
    Ok(
        "ExternalMemoryHeap::FreeMemory(void *)",
    ),
    Ok(
        "ExternalMemoryHeap::FreeMemoryAligned(void *)",
    ),
    Ok(
        "ExternalMemoryHeap::CanFreeMemory(void *)",
    ),
    Ok(
        "ExternalMemoryHeap::CanFreeMemoryAligned(void *)",
    ),
    Ok(
        "ExternalMemoryHeap::GetStatus(unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
    ),
    Ok(
        "ExternalMemoryHeap::Map(void)",
    ),
    Ok(
        "ExternalMemoryHeap::Initialize(void *, unsigned int, radMemorySpace, unsigned int, unsigned int, int, char const *)",
    ),
    Ok(
        "ExternalMemoryHeap::ExternalMemoryHeap(void)",
    ),
    Ok(
        "ExternalMemoryHeap::~ExternalMemoryHeap(void)",
    ),
    Ok(
        "ExternalMemoryHeap::Allocate(unsigned int, unsigned int)",
    ),
    Ok(
        "ExternalMemoryHeap::AllocateFirstFit(unsigned int, unsigned int)",
    ),
    Ok(
        "ExternalMemoryHeap::SplitBlockBottom(ExternalMemoryObject *, unsigned int, unsigned int)",
    ),
    Ok(
        "ExternalMemoryHeap::Free(ExternalMemoryObject *)",
    ),
    Ok(
        "ExternalMemoryHeap::GetSize(void)",
    ),
    Ok(
        "ExternalMemoryHeap::ValidateHeap(void)",
    ),
    Ok(
        "ExternalMemoryHeap type_info function",
    ),
    Ok(
        "IRadMemoryObject::IRadMemoryObject(void)",
    ),
    Ok(
        "ExternalMemoryHeap::Chain(IRadMemoryHeap *)",
    ),
    Ok(
        "IRadMemoryObject type_info function",
    ),
    Ok(
        "ExternalMemoryObject::AddRef(void)",
    ),
    Ok(
        "ExternalMemoryObject::Release(void)",
    ),
    Ok(
        "ExternalMemoryObject::GetMemoryAddress(void)",
    ),
    Ok(
        "ExternalMemoryObject::GetMemorySize(void)",
    ),
    Ok(
        "ExternalMemoryObject type_info function",
    ),
    Ok(
        "ExternalMemoryObject::~ExternalMemoryObject(void)",
    ),
    Ok(
        "IRadMemoryAllocator::GetStatus(unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
    ),
    Ok(
        "IRadMemoryAllocator::GetSize(void)",
    ),
    Ok(
        "radMemorySetUsableAllocators(int *, unsigned int)",
    ),
    Ok(
        "radMemoryInitialize(void)",
    ),
    Ok(
        "radMemoryTerminate(void)",
    ),
    Ok(
        "radMemorySetOutOfMemoryCallback(void (*)(void *, int, unsigned int), void *)",
    ),
    Ok(
        "SetMemoryIdentification(char const *)",
    ),
    Ok(
        "radMemoryAlloc(int, unsigned int)",
    ),
    Ok(
        "radMemoryAllocAligned(int, unsigned int, unsigned int)",
    ),
    Ok(
        "radMemoryFree(int, void *)",
    ),
    Ok(
        "radMemoryFreeAligned(int, void *)",
    ),
    Ok(
        "radMemoryFreeAligned(void *)",
    ),
    Ok(
        "radMemoryFree(void *)",
    ),
    Ok(
        "radMemoryRegisterAllocator(int, int, IRadMemoryAllocator *)",
    ),
    Ok(
        "radMemoryGetAllocator(int)",
    ),
    Ok(
        "radMemoryGetAllocatorID(IRadMemoryAllocator *)",
    ),
    Ok(
        "radMemoryUnregisterAllocator(int)",
    ),
    Ok(
        "radMemoryFindAllocatorRecursive(radMemoryAllocatorTreeNode *, void *)",
    ),
    Ok(
        "radMemoryFindAllocatorAlignedRecursive(radMemoryAllocatorTreeNode *, void *)",
    ),
    Ok(
        "radMemorySetAllocatorCallback(IRadMemorySetAllocatorCallback *)",
    ),
    Ok(
        "radMemoryGetAllocatorCallback(void)",
    ),
    Ok(
        "radMemoryGetCurrentAllocator(void)",
    ),
    Ok(
        "radMemorySetCurrentAllocator(int)",
    ),
    Ok(
        "radMemorySetAllocationName(char const *)",
    ),
    Ok(
        "radMemoryGetAllocationName(void)",
    ),
    Ok(
        "IRadMemoryAllocator type_info function",
    ),
    Ok(
        "radMemoryAllocatorMalloc type_info function",
    ),
    Ok(
        "radMemoryAllocatorMalloc::AddRef(void)",
    ),
    Ok(
        "radMemoryAllocatorMalloc::Release(void)",
    ),
    Ok(
        "radMemoryAllocatorMalloc::GetMemory(unsigned int)",
    ),
    Ok(
        "radMemoryAllocatorMalloc::FreeMemory(void *)",
    ),
    Ok(
        "radMemoryAllocatorMalloc::GetMemoryAligned(unsigned int, unsigned int)",
    ),
    Ok(
        "radMemoryAllocatorMalloc::FreeMemoryAligned(void *)",
    ),
    Ok(
        "radMemoryAllocatorMalloc::CanFreeMemory(void *)",
    ),
    Ok(
        "radMemoryAllocatorMalloc::CanFreeMemoryAligned(void *)",
    ),
    Ok(
        "radMemorySpaceGetAllocator(radMemorySpace, int)",
    ),
    Ok(
        "radMemorySpaceInitialize(void)",
    ),
    Ok(
        "radMemorySpaceTerminate(void)",
    ),
    Ok(
        "radMemorySpaceAlloc(radMemorySpace, int, unsigned int)",
    ),
    Ok(
        "radMemorySpaceFree(radMemorySpace, int, void *)",
    ),
    Ok(
        "radMemorySpaceCopyAsync(void *, radMemorySpace, void const *, radMemorySpace, unsigned int)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToEe::MemorySpaceAsyncRequest_CopyEeToEe(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToEe::~MemorySpaceAsyncRequest_CopyEeToEe(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToEe::IsDone(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToEe::AddRef(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToEe::Release(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest::MemorySpaceAsyncRequest(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest::~MemorySpaceAsyncRequest(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest::operator new(unsigned int, char const *)",
    ),
    Ok(
        "MemorySpaceAsyncRequest::operator delete(void *)",
    ),
    Ok(
        "MemorySpaceAsyncRequest::ServiceHead(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest::QueueRequest(MemorySpaceAsyncRequest *)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToIop::MemorySpaceAsyncRequest_CopyEeToIop(void *, void const *, unsigned int)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToIop::~MemorySpaceAsyncRequest_CopyEeToIop(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToIop::DoRequest(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToIop::Service(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToIop::IsDone(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToEe::MemorySpaceAsyncRequest_CopyIopToEe(void *, void const *, unsigned int)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToEe::DoRequest(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToEe::~MemorySpaceAsyncRequest_CopyIopToEe(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToEe::Service(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToEe::IsDone(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::Initialize(unsigned int)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::Terminate(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::MemorySpaceAsyncRequest_CopyIopToIop(void *, void const *, unsigned int)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::~MemorySpaceAsyncRequest_CopyIopToIop(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::DoRequest(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::IsDone(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::Service(void)",
    ),
    Ok(
        "radMemoryAllocator_Iop::radMemoryAllocator_Iop(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToEe type_info function",
    ),
    Ok(
        "MemorySpaceAsyncRequest type_info function",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToIop type_info function",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToEe type_info function",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop type_info function",
    ),
    Ok(
        "IRadMemorySpaceCopyRequest::IRadMemorySpaceCopyRequest(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToIop::AddRef(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToIop::Release(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToEe::AddRef(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToEe::Release(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::AddRef(void)",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::Release(void)",
    ),
    Ok(
        "IRadMemorySpaceCopyRequest type_info function",
    ),
    Ok(
        "radMemoryAllocator_Iop type_info function",
    ),
    Ok(
        "radMemoryAllocator_Iop::AddRef(void)",
    ),
    Ok(
        "radMemoryAllocator_Iop::Release(void)",
    ),
    Ok(
        "radMemoryAllocator_Iop::GetMemory(unsigned int)",
    ),
    Ok(
        "radMemoryAllocator_Iop::FreeMemory(void *)",
    ),
    Ok(
        "radMemoryAllocator_Iop::CanFreeMemory(void *)",
    ),
    Ok(
        "radMemoryAllocator_Iop::GetMemoryAligned(unsigned int, unsigned int)",
    ),
    Ok(
        "radMemoryAllocator_Iop::FreeMemoryAligned(void *)",
    ),
    Ok(
        "radMemoryAllocator_Iop::CanFreeMemoryAligned(void *)",
    ),
    Ok(
        "global constructors keyed to radMemorySpace_OptimalAlignment",
    ),
    Ok(
        "global destructors keyed to radMemorySpace_OptimalAlignment",
    ),
    Ok(
        "radMemoryCreatePool(IRadMemoryPool **, unsigned int, unsigned int, unsigned int, bool, radMemoryDebugLevel, int, char const *)",
    ),
    Ok(
        "MemoryPool::MemoryPool(void)",
    ),
    Ok(
        "MemoryPool::Initialize(void *, unsigned int, unsigned int, unsigned int, bool, radMemoryDebugLevel, int, char const *)",
    ),
    Ok(
        "MemoryPool::GetMemory(void)",
    ),
    Ok(
        "MemoryPool::GetMemory(unsigned int)",
    ),
    Ok(
        "MemoryPool::FreeMemory(void *)",
    ),
    Ok(
        "MemoryPool::CanFreeMemory(void *)",
    ),
    Ok(
        "MemoryPool::GetMemoryAligned(unsigned int, unsigned int)",
    ),
    Ok(
        "MemoryPool::FreeMemoryAligned(void *)",
    ),
    Ok(
        "MemoryPool::CanFreeMemoryAligned(void *)",
    ),
    Ok(
        "MemoryPool::GetStatus(unsigned int *, unsigned int *, unsigned int *)",
    ),
    Ok(
        "MemoryPool::Chain(IRadMemoryPool *)",
    ),
    Ok(
        "MemoryPool::AddRef(void)",
    ),
    Ok(
        "MemoryPool::Release(void)",
    ),
    Ok(
        "MemoryPool::~MemoryPool(void)",
    ),
    Ok(
        "MemoryPool::operator new(unsigned int, int)",
    ),
    Ok(
        "MemoryPool::operator delete(void *)",
    ),
    Ok(
        "MemoryPool::WithinRange(void *)",
    ),
    Ok(
        "RoundUpAlignment(unsigned int, unsigned int)",
    ),
    Ok(
        "MemoryPool type_info function",
    ),
    Ok(
        "IRadMemoryPool::IRadMemoryPool(void)",
    ),
    Ok(
        "IRadMemoryPool type_info function",
    ),
    Ok(
        "radMemoryPlatInitialize(void)",
    ),
    Ok(
        "radMemoryPlatTerminate(void)",
    ),
    Ok(
        "radMemoryPlatAlloc(unsigned int)",
    ),
    Ok(
        "radMemoryPlatFree(void *)",
    ),
    Ok(
        "radMemoryPlatAllocAligned(unsigned int, unsigned int)",
    ),
    Ok(
        "radMemoryPlatFreeAligned(void *)",
    ),
    Ok(
        "StaticHeap::AddRef(void)",
    ),
    Ok(
        "StaticHeap::Align(unsigned int, unsigned int)",
    ),
    Ok(
        "StaticHeap::Align(char const *, unsigned int)",
    ),
    Ok(
        "StaticHeap::AllowFreeing(bool)",
    ),
    Ok(
        "StaticHeap::CanFreeMemory(void *)",
    ),
    Ok(
        "StaticHeap::CanFreeMemoryAligned(void *)",
    ),
    Ok(
        "StaticHeap::Contains(void const *)",
    ),
    Ok(
        "StaticHeap::CreateHeap(unsigned int)",
    ),
    Ok(
        "StaticHeap::FreeMemory(void *)",
    ),
    Ok(
        "StaticHeap::FreeMemoryAligned(void *)",
    ),
    Ok(
        "StaticHeap::FreeMemorySize(void) const",
    ),
    Ok(
        "StaticHeap::GetMemory(unsigned int)",
    ),
    Ok(
        "StaticHeap::GetMemoryAligned(unsigned int, unsigned int)",
    ),
    Ok(
        "StaticHeap::GetMemoryObject(IRadMemoryObject **, unsigned int)",
    ),
    Ok(
        "StaticHeap::GetMemoryObjectAligned(IRadMemoryObject **, unsigned int, unsigned int)",
    ),
    Ok(
        "StaticHeap::GetSize(void)",
    ),
    Ok(
        "StaticHeap::GetStatus(unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
    ),
    Ok(
        "StaticHeap::PrintOutOfMemoryMessage(unsigned int)",
    ),
    Ok(
        "StaticHeap::Release(void)",
    ),
    Ok(
        "StaticHeap::ValidateHeap(void)",
    ),
    Ok(
        "radMemoryCreateStaticHeap(unsigned int, int, char const *)",
    ),
    Ok(
        "StaticHeap::~StaticHeap(void)",
    ),
    Ok(
        "StaticHeap type_info function",
    ),
    Ok(
        "StaticHeap::StaticHeap(void)",
    ),
    Ok(
        "TrackingHeap::TrackingHeap(void)",
    ),
    Ok(
        "TrackingHeap::~TrackingHeap(void)",
    ),
    Ok(
        "TrackingHeap::AddRef(void)",
    ),
    Ok(
        "TrackingHeap::CanFreeMemory(void *)",
    ),
    Ok(
        "TrackingHeap::CanFreeMemoryAligned(void *)",
    ),
    Ok(
        "TrackingHeap::FreeMemory(void *)",
    ),
    Ok(
        "TrackingHeap::FreeMemoryAligned(void *)",
    ),
    Ok(
        "TrackingHeap::GetMemory(unsigned int)",
    ),
    Ok(
        "TrackingHeap::GetMemoryAligned(unsigned int, unsigned int)",
    ),
    Ok(
        "TrackingHeap::GetMemoryObject(IRadMemoryObject **, unsigned int)",
    ),
    Ok(
        "TrackingHeap::GetMemoryObjectAligned(IRadMemoryObject **, unsigned int, unsigned int)",
    ),
    Ok(
        "TrackingHeap::GetSize(void)",
    ),
    Ok(
        "TrackingHeap::GetStatus(unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
    ),
    Ok(
        "TrackingHeap::RecordAllocation(void *, unsigned int)",
    ),
    Ok(
        "TrackingHeap::Release(void)",
    ),
    Ok(
        "TrackingHeap::SetSize(unsigned int)",
    ),
    Ok(
        "TrackingHeap::ValidateHeap(void)",
    ),
    Ok(
        "radMemoryCreateTrackingHeap(unsigned int, int, char const *)",
    ),
    Ok(
        "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::_M_erase(_Rb_tree_node<pair<void *const, unsigned int> > *)",
    ),
    Ok(
        "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::find(void *const &)",
    ),
    Ok(
        "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::lower_bound(void *const &)",
    ),
    Ok(
        "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::upper_bound(void *const &)",
    ),
    Ok(
        "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::erase(_Rb_tree_iterator<pair<void *const, unsigned int>, pair<void *const, unsigned int> &, pair<void *const, unsigned int> *>, _Rb_tree_iterator<pair<void *const, unsigned int>, pair<void *const, unsigned int> &, pair<void *const, unsigned int> *>)",
    ),
    Ok(
        "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::erase(void *const &)",
    ),
    Ok(
        "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::_M_insert(_Rb_tree_node_base *, _Rb_tree_node_base *, pair<void *const, unsigned int> const &)",
    ),
    Ok(
        "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::insert_unique(pair<void *const, unsigned int> const &)",
    ),
    Ok(
        "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::insert_unique(_Rb_tree_iterator<pair<void *const, unsigned int>, pair<void *const, unsigned int> &, pair<void *const, unsigned int> *>, pair<void *const, unsigned int> const &)",
    ),
    Ok(
        "TrackingHeap type_info function",
    ),
    Ok(
        "map<void *, unsigned int, less<void *>, allocator<unsigned int> >::~map(void)",
    ),
    Ok(
        "radStringCreate(IRadString **, int)",
    ),
    Ok(
        "radStringMatchesWildCardPattern(char const *, char const *)",
    ),
    Ok(
        "radAsciiToSjis(radSJISChar *, char const *)",
    ),
    Ok(
        "radSjisStrncpy(radSJISChar *, radSJISChar const *, unsigned int)",
    ),
    Ok(
        "radString type_info function",
    ),
    Ok(
        "IRadString::IRadString(void)",
    ),
    Ok(
        "radString::AddRef(void)",
    ),
    Ok(
        "radString::Release(void)",
    ),
    Ok(
        "radString::Equals(char const *)",
    ),
    Ok(
        "radString::Equals(IRadString *)",
    ),
    Ok(
        "radString::GetSize(void)",
    ),
    Ok(
        "radString::SetSize(unsigned int)",
    ),
    Ok(
        "radString::Copy(char const *)",
    ),
    Ok(
        "radString::Copy(IRadString const *)",
    ),
    Ok(
        "radString::GetChars(char *, unsigned int) const",
    ),
    Ok(
        "radString::GetChars(void) const",
    ),
    Ok(
        "radString::GetLength(void) const",
    ),
    Ok(
        "radString::Append(IRadString *)",
    ),
    Ok(
        "radString::Append(char const *)",
    ),
    Ok(
        "radString::Append(unsigned int)",
    ),
    Ok(
        "radString::Append(int)",
    ),
    Ok(
        "radString::Append(char)",
    ),
    Ok(
        "radString::Append(void const *)",
    ),
    Ok(
        "radString::Append(float)",
    ),
    Ok(
        "radString::Append(bool)",
    ),
    Ok(
        "radString::ToLowercase(void)",
    ),
    Ok(
        "radString::ToUppercase(void)",
    ),
    Ok(
        "radString::MatchesWildCardPattern(char const *)",
    ),
    Ok(
        "radString::MatchesWildCardPattern(IRadString const *)",
    ),
    Ok(
        "radString::Compact(void)",
    ),
    Ok(
        "radString::~radString(void)",
    ),
    Ok(
        "IRadString type_info function",
    ),
    Ok(
        "radObjectBTree::Initialize(radObjectBTreeNode *, unsigned int)",
    ),
    Ok(
        "radObjectBTree::radObjectBTree(void)",
    ),
    Ok(
        "radObjectBTree::~radObjectBTree(void)",
    ),
    Ok(
        "radObjectBTree::AddObject(unsigned int const &, IRefCount *)",
    ),
    Ok(
        "radObjectBTree::RemoveObject(unsigned int const &)",
    ),
    Ok(
        "radObjectBTree::RemoveAll(void)",
    ),
    Ok(
        "radObjectBTree::RemoveAll_Helper(radObjectBTreeNode *)",
    ),
    Ok(
        "radObjectBTree::FindObject(unsigned int const &)",
    ),
    Ok(
        "radObjectBTree::GetFirst(radObjectBTree::TraversalOrder, unsigned int *)",
    ),
    Ok(
        "radObjectBTree::GetNext(unsigned int *)",
    ),
    Ok(
        "radObjectBTree::GetNextNode(void)",
    ),
    Ok(
        "radObjectBTree::find(unsigned int const &, radObjectBTreeNode **, radObjectBTreeNode **, int *)",
    ),
    Ok(
        "radObjectBTree::copyNode(radObjectBTreeNode *, radObjectBTreeNode *)",
    ),
    Ok(
        "radObjectBTree type_info function",
    ),
    Ok(
        "radObjectBTree::AddRef(void)",
    ),
    Ok(
        "radObjectBTree::Release(void)",
    ),
    Ok(
        "radDbgComTargetInitialize(radDbgComType, unsigned short, void *, int)",
    ),
    Ok(
        "radDbgComTargetTerminate(void)",
    ),
    Ok(
        "radDbgComService(void)",
    ),
    Ok(
        "radDbgComTargetCreateChannel(unsigned short, IRadDbgComChannel **, int)",
    ),
    Ok(
        "radDebugConsoleService(void)",
    ),
    Ok(
        "DebugConsole::~DebugConsole(void)",
    ),
    Ok(
        "DebugConsole::AddRef(void)",
    ),
    Ok(
        "DebugConsole::Release(void)",
    ),
    Ok(
        "DebugConsole::SetTitle(char const *)",
    ),
    Ok(
        "DebugConsole::SetBackgroundColor(unsigned int)",
    ),
    Ok(
        "DebugConsole::Clear(void)",
    ),
    Ok(
        "DebugConsole::SetCursorPosition(unsigned int, unsigned int)",
    ),
    Ok(
        "DebugConsole::SetTextColor(unsigned int)",
    ),
    Ok(
        "DebugConsole::TextOutAt(char const *, int, int)",
    ),
    Ok(
        "DebugConsole::TextOut(char const *)",
    ),
    Ok(
        "DebugConsole::SetKeyboardInputCallback(IRadDebugConsoleKeyboardInputCallback *)",
    ),
    Ok(
        "DebugConsole::SetPointerInputCallback(IRadDebugConsolePointerInputCallback *)",
    ),
    Ok(
        "DebugConsole::OnKeyPress(int)",
    ),
    Ok(
        "DebugConsole::OnVirtualKeyPress(int, bool, bool, bool)",
    ),
    Ok(
        "DebugConsole::OnMouseEvent(int, int, int, int, char, char, char, char, char)",
    ),
    Ok(
        "DebugConsole::ProcessInputBuffer(void)",
    ),
    Ok(
        "DebugConsole::AddInputBuffer(DebugConsole::InputBufferEntry const &)",
    ),
    Ok(
        "DebugConsole::IsBufferFull(void)",
    ),
    Ok(
        "ConsoleClient::~ConsoleClient(void)",
    ),
    Ok(
        "ConsoleClient::DeleteConsole(DebugConsole *)",
    ),
    Ok(
        "ConsoleClient::OnStatusChange(IRadDbgComChannel::ConnectionState, char const *)",
    ),
    Ok(
        "ConsoleClient::OnReceiveComplete(bool, unsigned int)",
    ),
    Ok(
        "ConsoleClient::OnSendComplete(bool)",
    ),
    Ok(
        "ConsoleClient::SendClientRecvReadyCommand(void)",
    ),
    Ok(
        "ConsoleClient::IsCompletePacket(unsigned int, unsigned char *)",
    ),
    Ok(
        "ConsoleClient::SendCreate(DebugConsole *)",
    ),
    Ok(
        "ConsoleClient::SendDestroy(DebugConsole *)",
    ),
    Ok(
        "ConsoleClient::SendTitle(DebugConsole *, char const *)",
    ),
    Ok(
        "ConsoleClient::SendBackgroundColor(DebugConsole *, unsigned int)",
    ),
    Ok(
        "ConsoleClient::SendClear(DebugConsole *)",
    ),
    Ok(
        "ConsoleClient::SendCursorPosition(DebugConsole *, unsigned int, unsigned int)",
    ),
    Ok(
        "ConsoleClient::SendTextColor(DebugConsole *, unsigned int)",
    ),
    Ok(
        "ConsoleClient::SendTextOutAt(DebugConsole *, char const *, int, int)",
    ),
    Ok(
        "ConsoleClient::SendTextOut(DebugConsole *, char const *)",
    ),
    Ok(
        "ConsoleClient::InitiateTransmission(void)",
    ),
    Ok(
        "ConsoleClient::IsValidConsole(DebugConsole *)",
    ),
    Ok(
        "ConsoleClient::AddRef(void)",
    ),
    Ok(
        "ConsoleClient::Service(void)",
    ),
    Ok(
        "ConsoleClient::Release(void)",
    ),
    Ok(
        "DebugConsole type_info function",
    ),
    Ok(
        "ConsoleClient type_info function",
    ),
    Ok(
        "IRadDbgComChannelSendCallback::IRadDbgComChannelSendCallback(void)",
    ),
    Ok(
        "IRadDbgComChannelReceiveCallback::IRadDbgComChannelReceiveCallback(void)",
    ),
    Ok(
        "IRadDbgComChannelStatusCallback type_info function",
    ),
    Ok(
        "IRadDbgComChannelSendCallback type_info function",
    ),
    Ok(
        "IRadDbgComChannelReceiveCallback type_info function",
    ),
    Ok(
        "IRadDebugConsole type_info function",
    ),
    Ok(
        "radControllerInitialize(IRadControllerConnectionChangeCallback *, int)",
    ),
    Ok(
        "radControllerTerminate(void)",
    ),
    Ok(
        "radControllerSystemGet(void)",
    ),
    Ok(
        "radControllerSystemService(void)",
    ),
    Ok(
        "rControllerSystem2::rControllerSystem2(IRadControllerConnectionChangeCallback *)",
    ),
    Ok(
        "rControllerSystem2::~rControllerSystem2(void)",
    ),
    Ok(
        "rControllerSystem2::Service(void)",
    ),
    Ok(
        "rControllerSystem2::AddRef(void)",
    ),
    Ok(
        "rControllerSystem2::Release(void)",
    ),
    Ok(
        "rControllerSystem2::GetNumberOfControllers(void)",
    ),
    Ok(
        "rControllerSystem2::GetControllerByIndex(unsigned int)",
    ),
    Ok(
        "rControllerSystem2::GetControllerAtLocation(char const *)",
    ),
    Ok(
        "rControllerSystem2::SetBufferTime(unsigned int)",
    ),
    Ok(
        "rControllerSystem2::MapVirtualTime(unsigned int, unsigned int)",
    ),
    Ok(
        "rControllerSystem2::SetVirtualTime(unsigned int)",
    ),
    Ok(
        "rControllerSystem2::SetCaptureRate(unsigned int)",
    ),
    Ok(
        "rControllerSystem2::RegisterConnectionChangeCallback(IRadControllerConnectionChangeCallback *)",
    ),
    Ok(
        "rControllerSystem2::UnRegisterConnectionChangeCallback(IRadControllerConnectionChangeCallback *)",
    ),
    Ok(
        "rControllerSystem2::OnTimerDone(unsigned int, void *)",
    ),
    Ok(
        "rControllerSystem2::InitializeLocations(void)",
    ),
    Ok(
        "rControllerSystem2::CreateController(int, iControllerLocation2 *, rController2 **)",
    ),
    Ok(
        "rControllerSystem2::_StartControllerInitialization(iControllerLocation2 *, int)",
    ),
    Ok(
        "rControllerSystem2::_RequestControllerMode(iControllerLocation2 *)",
    ),
    Ok(
        "rControllerSystem2::_RequestControllerModeDone(iControllerLocation2 *, int)",
    ),
    Ok(
        "rControllerSystem2::_RequestControllerActuator(iControllerLocation2 *)",
    ),
    Ok(
        "rControllerSystem2::_RequestControllerActuatorDone(iControllerLocation2 *, int)",
    ),
    Ok(
        "rControllerSystem2::_RequestControllerPressure(iControllerLocation2 *)",
    ),
    Ok(
        "rControllerSystem2::_RequestControllerPressureDone(iControllerLocation2 *, int)",
    ),
    Ok(
        "rControllerSystem2::_CheckControllerAsyncProcessing(iControllerLocation2 *)",
    ),
    Ok(
        "rControllerSystem2::_ControllerAlmostReady(iControllerLocation2 *, int, int)",
    ),
    Ok(
        "rControllerSystem2::_ControllerReady(iControllerLocation2 *, int, int)",
    ),
    Ok(
        "rControllerSystem2::SetupControllers(void)",
    ),
    Ok(
        "rControllerSystem2::iGetVirtualTime(void)",
    ),
    Ok(
        "rControllerSystem2::iGetVirtualTimeAdjust(void)",
    ),
    Ok(
        "iControllerLocation2::iControllerLocation2(int, int)",
    ),
    Ok(
        "iControllerLocation2::~iControllerLocation2(void)",
    ),
    Ok(
        "iControllerLocation2::AddRef(void)",
    ),
    Ok(
        "iControllerLocation2::Release(void)",
    ),
    Ok(
        "iControllerLocation2::GetPort(void)",
    ),
    Ok(
        "iControllerLocation2::GetSlot(void)",
    ),
    Ok(
        "iControllerLocation2::GetName(void)",
    ),
    Ok(
        "iControllerLocation2::GetNameBString(IRadString **)",
    ),
    Ok(
        "iControllerLocation2::AttachController(rController2 *)",
    ),
    Ok(
        "iControllerLocation2::GetAttachedController(rController2 **)",
    ),
    Ok(
        "iControllerLocation2::SetControllerState(iIControllerLocation2::LocationState)",
    ),
    Ok(
        "iControllerLocation2::GetControllerState(void)",
    ),
    Ok(
        "iControllerLocation2::SetControllerPrevState(iIControllerLocation2::LocationState)",
    ),
    Ok(
        "iControllerLocation2::GetControllerPrevState(void)",
    ),
    Ok(
        "iControllerLocation2::SetTotalNumModes(int)",
    ),
    Ok(
        "iControllerLocation2::GetTotalNumModes(void)",
    ),
    Ok(
        "iControllerLocation2::SetCurrentMode(int)",
    ),
    Ok(
        "iControllerLocation2::GetCurrentMode(void)",
    ),
    Ok(
        "iControllerLocation2::SetModeQueryResult(int, int)",
    ),
    Ok(
        "iControllerLocation2::GetModeQueryResult(int)",
    ),
    Ok(
        "iControllerLocation2::SetActAlign(int, int)",
    ),
    Ok(
        "iControllerLocation2::SetActDirect(int, int)",
    ),
    Ok(
        "iControllerLocation2::GetActAlignBuffer(void)",
    ),
    Ok(
        "iControllerLocation2::GetActDirectBuffer(void)",
    ),
    Ok(
        "iControllerLocation2::ReconnectIfControllerMatches(int, rController2 **, unsigned int)",
    ),
    Ok(
        "iControllerLocation2::GetNumActuators(void)",
    ),
    Ok(
        "iControllerLocation2::SetNumActuators(int)",
    ),
    Ok(
        "rController2::rController2(int, int, int, IRadString *, unsigned char *, unsigned char *, int, unsigned int)",
    ),
    Ok(
        "rController2::~rController2(void)",
    ),
    Ok(
        "rController2::AddRef(void)",
    ),
    Ok(
        "rController2::Release(void)",
    ),
    Ok(
        "rController2::IsConnected(void)",
    ),
    Ok(
        "rController2::GetClassification(void)",
    ),
    Ok(
        "rController2::GetType(void)",
    ),
    Ok(
        "rController2::GetNumberOfInputPointsOfType(char const *)",
    ),
    Ok(
        "rController2::GetNumberOfOutputPointsOfType(char const *)",
    ),
    Ok(
        "rController2::GetInputPointByTypeAndIndex(char const *, unsigned int)",
    ),
    Ok(
        "rController2::GetOutputPointByTypeAndIndex(char const *, unsigned int)",
    ),
    Ok(
        "rController2::GetInputPointByName(char const *)",
    ),
    Ok(
        "rController2::GetOutputPointByName(char const *)",
    ),
    Ok(
        "rController2::GetLocation(void)",
    ),
    Ok(
        "rController2::GetNumberOfInputPoints(void)",
    ),
    Ok(
        "rController2::GetInputPointByIndex(unsigned int)",
    ),
    Ok(
        "rController2::GetNumberOfOutputPoints(void)",
    ),
    Ok(
        "rController2::GetOutputPointByIndex(unsigned int)",
    ),
    Ok(
        "rController2::GetDataBuffer(void)",
    ),
    Ok(
        "rController2::Disconnect(void)",
    ),
    Ok(
        "rController2::Connect(void)",
    ),
    Ok(
        "rController2::iVirtualTimeChanged(void)",
    ),
    Ok(
        "rController2::iPoll(unsigned int)",
    ),
    Ok(
        "rController2::iSetBufferTime(unsigned int)",
    ),
    Ok(
        "rController2::GetId(void)",
    ),
    Ok(
        "iControllerOutputHandler2::iControllerOutputHandler2(int, int, unsigned char *)",
    ),
    Ok(
        "iControllerOutputHandler2::~iControllerOutputHandler2(void)",
    ),
    Ok(
        "iControllerOutputHandler2::AddRef(void)",
    ),
    Ok(
        "iControllerOutputHandler2::Release(void)",
    ),
    Ok(
        "iControllerOutputHandler2::Connect(void)",
    ),
    Ok(
        "iControllerOutputHandler2::Disconnect(void)",
    ),
    Ok(
        "iControllerOutputHandler2::iOnControllerGainChange(IRadControllerOutputPoint *)",
    ),
    Ok(
        "rControllerOutputPoint2::rControllerOutputPoint2(iRIControllerOutputPointCallback2 *, IRadString *, IRadString *)",
    ),
    Ok(
        "rControllerOutputPoint2::~rControllerOutputPoint2(void)",
    ),
    Ok(
        "rControllerOutputPoint2::AddRef(void)",
    ),
    Ok(
        "rControllerOutputPoint2::Release(void)",
    ),
    Ok(
        "rControllerOutputPoint2::GetName(void)",
    ),
    Ok(
        "rControllerOutputPoint2::GetType(void)",
    ),
    Ok(
        "rControllerOutputPoint2::GetGain(void)",
    ),
    Ok(
        "rControllerOutputPoint2::SetGain(float)",
    ),
    Ok(
        "rControllerInputPoint2::rControllerInputPoint2(IRefCount *, IRadString *, int, unsigned int, unsigned int)",
    ),
    Ok(
        "rControllerInputPoint2::~rControllerInputPoint2(void)",
    ),
    Ok(
        "rControllerInputPoint2::AddRef(void)",
    ),
    Ok(
        "rControllerInputPoint2::Release(void)",
    ),
    Ok(
        "rControllerInputPoint2::GetName(void)",
    ),
    Ok(
        "rControllerInputPoint2::GetType(void)",
    ),
    Ok(
        "rControllerInputPoint2::SetTolerance(float)",
    ),
    Ok(
        "rControllerInputPoint2::GetTolerance(void)",
    ),
    Ok(
        "rControllerInputPoint2::RegisterControllerInputPointCallback(IRadControllerInputPointCallback *, unsigned int)",
    ),
    Ok(
        "rControllerInputPoint2::UnRegisterControllerInputPointCallback(IRadControllerInputPointCallback *)",
    ),
    Ok(
        "rControllerInputPoint2::GetCurrentValue(unsigned int *)",
    ),
    Ok(
        "rControllerInputPoint2::SetRange(float, float)",
    ),
    Ok(
        "rControllerInputPoint2::GetRange(float *, float *)",
    ),
    Ok(
        "rControllerInputPoint2::CalculateNewValue(unsigned char *)",
    ),
    Ok(
        "rControllerInputPoint2::iInitialize(unsigned char *)",
    ),
    Ok(
        "rControllerInputPoint2::iHandleEvent(unsigned char *, unsigned int)",
    ),
    Ok(
        "LGDevWheelInputPoint::LGDevWheelInputPoint(LGDevInputPointData const *)",
    ),
    Ok(
        "LGDevWheelInputPoint::~LGDevWheelInputPoint(void)",
    ),
    Ok(
        "LGDevWheelInputPoint::CalculateNewValue(lgDevPosition *)",
    ),
    Ok(
        "LGDevWheelInputPoint::HandleEvent(lgDevPosition *, unsigned int)",
    ),
    Ok(
        "LGDevWheelInputPoint::SetTolerance(float)",
    ),
    Ok(
        "LGDevWheelInputPoint::RegisterControllerInputPointCallback(IRadControllerInputPointCallback *, unsigned int)",
    ),
    Ok(
        "LGDevWheelInputPoint::UnRegisterControllerInputPointCallback(IRadControllerInputPointCallback *)",
    ),
    Ok(
        "LGDevWheelInputPoint::GetCurrentValue(unsigned int *)",
    ),
    Ok(
        "LGDevWheelInputPoint::GetRange(float *, float *)",
    ),
    Ok(
        "LGDevWheelController::LGDevWheelController(lgDevDeviceDesc *)",
    ),
    Ok(
        "LGDevWheelController::iPoll(unsigned int)",
    ),
    Ok(
        "LGDevWheelController::iVirtualTimeChanged(void)",
    ),
    Ok(
        "LGDevWheelController::iSetBufferTime(unsigned int)",
    ),
    Ok(
        "LGDevWheelController::Disconnect(void)",
    ),
    Ok(
        "LGDevWheelController::Connect(void)",
    ),
    Ok(
        "LGDevWheelController::IsConnected(void)",
    ),
    Ok(
        "LGDevWheelController::GetNumberOfInputPointsOfType(char const *)",
    ),
    Ok(
        "LGDevWheelController::GetNumberOfOutputPointsOfType(char const *)",
    ),
    Ok(
        "LGDevWheelController::GetInputPointByTypeAndIndex(char const *, unsigned int)",
    ),
    Ok(
        "LGDevWheelController::GetOutputPointByTypeAndIndex(char const *, unsigned int)",
    ),
    Ok(
        "LGDevWheelController::GetInputPointByName(char const *)",
    ),
    Ok(
        "LGDevWheelController::GetOutputPointByName(char const *)",
    ),
    Ok(
        "LGDevWheelController::GetInputPointByIndex(unsigned int)",
    ),
    Ok(
        "LGDevWheelController::GetOutputPointByIndex(unsigned int)",
    ),
    Ok(
        "LGDevWheelOutputPoint::LGDevWheelOutputPoint(char const *, unsigned char)",
    ),
    Ok(
        "LGDevWheelOutputPoint::~LGDevWheelOutputPoint(void)",
    ),
    Ok(
        "LGDevWheelOutputPoint::GetGain(void)",
    ),
    Ok(
        "LGDevWheelOutputPoint::SetGain(float)",
    ),
    Ok(
        "LGDevWheelOutputPoint::GetEffect(void) const",
    ),
    Ok(
        "LGDevWheelOutputPoint::UpdateEffect(lgDevForceEffect const *)",
    ),
    Ok(
        "LGDevWheelOutputPoint::Update(unsigned int)",
    ),
    Ok(
        "rControllerSystem2 type_info function",
    ),
    Ok(
        "iControllerLocation2 type_info function",
    ),
    Ok(
        "rController2 type_info function",
    ),
    Ok(
        "iControllerOutputHandler2 type_info function",
    ),
    Ok(
        "rControllerOutputPoint2 type_info function",
    ),
    Ok(
        "rControllerInputPoint2 type_info function",
    ),
    Ok(
        "LGDevWheelInputPoint type_info function",
    ),
    Ok(
        "LGDevWheelOutputPoint type_info function",
    ),
    Ok(
        "LGDevWheelController type_info function",
    ),
    Ok(
        "IRadControllerSystem::IRadControllerSystem(void)",
    ),
    Ok(
        "IRadControllerOutputPoint::IRadControllerOutputPoint(void)",
    ),
    Ok(
        "IRadControllerOutputPoint::GetEffect(void) const",
    ),
    Ok(
        "IRadControllerOutputPoint::UpdateEffect(lgDevForceEffect const *)",
    ),
    Ok(
        "IRadControllerOutputPoint::Start(void)",
    ),
    Ok(
        "IRadControllerOutputPoint::Stop(void)",
    ),
    Ok(
        "IRadControllerOutputPoint::Update(unsigned int)",
    ),
    Ok(
        "IRadControllerInputPoint::IRadControllerInputPoint(void)",
    ),
    Ok(
        "iIControllerLocation2::iIControllerLocation2(void)",
    ),
    Ok(
        "iIController2::iIController2(void)",
    ),
    Ok(
        "iRIControllerOutputPointCallback2::iRIControllerOutputPointCallback2(void)",
    ),
    Ok(
        "iIControllerInputPoint2::iIControllerInputPoint2(void)",
    ),
    Ok(
        "LGDevWheelInputPoint::AddRef(void)",
    ),
    Ok(
        "LGDevWheelInputPoint::Release(void)",
    ),
    Ok(
        "LGDevWheelInputPoint::GetName(void)",
    ),
    Ok(
        "LGDevWheelInputPoint::GetType(void)",
    ),
    Ok(
        "LGDevWheelInputPoint::GetTolerance(void)",
    ),
    Ok(
        "LGDevWheelInputPoint::SetRange(float, float)",
    ),
    Ok(
        "LGDevWheelOutputPoint::AddRef(void)",
    ),
    Ok(
        "LGDevWheelOutputPoint::Release(void)",
    ),
    Ok(
        "LGDevWheelOutputPoint::GetName(void)",
    ),
    Ok(
        "LGDevWheelOutputPoint::GetType(void)",
    ),
    Ok(
        "LGDevWheelOutputPoint::Start(void)",
    ),
    Ok(
        "LGDevWheelOutputPoint::Stop(void)",
    ),
    Ok(
        "LGDevWheelController::AddRef(void)",
    ),
    Ok(
        "LGDevWheelController::Release(void)",
    ),
    Ok(
        "LGDevWheelController::~LGDevWheelController(void)",
    ),
    Ok(
        "LGDevWheelController::GetType(void)",
    ),
    Ok(
        "LGDevWheelController::GetClassification(void)",
    ),
    Ok(
        "LGDevWheelController::GetLocation(void)",
    ),
    Ok(
        "LGDevWheelController::GetNumberOfInputPoints(void)",
    ),
    Ok(
        "LGDevWheelController::GetNumberOfOutputPoints(void)",
    ),
    Ok(
        "IRadControllerSystem type_info function",
    ),
    Ok(
        "IRadControllerOutputPoint type_info function",
    ),
    Ok(
        "IRadControllerInputPoint type_info function",
    ),
    Ok(
        "iIControllerLocation2 type_info function",
    ),
    Ok(
        "iIController2 type_info function",
    ),
    Ok(
        "iRIControllerOutputPointCallback2 type_info function",
    ),
    Ok(
        "iIControllerInputPoint2 type_info function",
    ),
    Ok(
        "IRadController::IRadController(void)",
    ),
    Ok(
        "IRadController type_info function",
    ),
    Ok(
        "global constructors keyed to radControllerInitialize(IRadControllerConnectionChangeCallback *, int)",
    ),
    Ok(
        "radMakeIconSys(radPs2IconSys *, radSJISChar *, unsigned short)",
    ),
    Ok(
        "radSetIconSysTitle(radPs2IconSys *, radSJISChar *, unsigned short)",
    ),
    Ok(
        "radFileInitialize(unsigned int, unsigned int, int)",
    ),
    Ok(
        "radFileTerminate(void)",
    ),
    Ok(
        "radFileService(void)",
    ),
    Ok(
        "radFileOpenAsync(IRadFile **, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
    ),
    Ok(
        "radDriveOpenAsync(IRadDrive **, char const *, radFilePriority, int)",
    ),
    Ok(
        "radSetDefaultDrive(char const *)",
    ),
    Ok(
        "radFileRegisterCementLibraryAsync(IRadCementLibrary **, char const *, radCementLibraryPriority, unsigned int, int, radMemorySpace)",
    ),
    Ok(
        "radFileRegisterCementLibrarySync(IRadCementLibrary **, char const *, radCementLibraryPriority, unsigned int, int, radMemorySpace)",
    ),
    Ok(
        "radDriveMount(char const *, int)",
    ),
    Ok(
        "radDriveUnmount(char const *)",
    ),
    Ok(
        "radPlatformInitialize(char const *, radPlatformIOPMedia, radPlatformGameMediaType, char const *, int)",
    ),
    Ok(
        "radPlatformTerminate(void)",
    ),
    Ok(
        "radPlatformGet(void)",
    ),
    Ok(
        "radPlatform type_info function",
    ),
    Ok(
        "radPlatform::radPlatform(void)",
    ),
    Ok(
        "radPlatform::AddRef(void)",
    ),
    Ok(
        "radPlatform::Release(void)",
    ),
    Ok(
        "radPlatform::LoadIrxModule(char const *, int, char *)",
    ),
    Ok(
        "radPlatform::UnloadIrxModule(char const *)",
    ),
    Ok(
        "radPlatform::GetMediaType(void)",
    ),
    Ok(
        "IRadPlatform type_info function",
    ),
    Ok(
        "IRadPlatform::IRadPlatform(void)",
    ),
    Ok(
        "radThreadInitialize(unsigned int)",
    ),
    Ok(
        "radThreadTerminate(void)",
    ),
    Ok(
        "radThreadInternalLock(void)",
    ),
    Ok(
        "radThreadInternalUnlock(void)",
    ),
    Ok(
        "radThreadCreateMutex(IRadThreadMutex **, int)",
    ),
    Ok(
        "radThreadMutex::radThreadMutex(void)",
    ),
    Ok(
        "radThreadMutex::~radThreadMutex(void)",
    ),
    Ok(
        "radThreadMutex::Lock(void)",
    ),
    Ok(
        "radThreadMutex::Unlock(void)",
    ),
    Ok(
        "radThreadMutex::AddRef(void)",
    ),
    Ok(
        "radThreadMutex::Release(void)",
    ),
    Ok(
        "radThreadMutex type_info function",
    ),
    Ok(
        "IRadThreadMutex::IRadThreadMutex(void)",
    ),
    Ok(
        "IRadThreadMutex type_info function",
    ),
    Ok(
        "radThreadCreateSemaphore(IRadThreadSemaphore **, unsigned int, int)",
    ),
    Ok(
        "radThreadSemaphore::radThreadSemaphore(unsigned int)",
    ),
    Ok(
        "radThreadSemaphore::~radThreadSemaphore(void)",
    ),
    Ok(
        "radThreadSemaphore::Wait(void)",
    ),
    Ok(
        "radThreadSemaphore::Signal(void)",
    ),
    Ok(
        "radThreadSemaphore::AddRef(void)",
    ),
    Ok(
        "radThreadSemaphore::Release(void)",
    ),
    Ok(
        "radThreadSemaphore type_info function",
    ),
    Ok(
        "IRadThreadSemaphore::IRadThreadSemaphore(void)",
    ),
    Ok(
        "IRadThreadSemaphore type_info function",
    ),
    Ok(
        "radThreadCreateThread(IRadThread **, unsigned int (*)(void *), void *, IRadThread::Priority, unsigned int, int)",
    ),
    Ok(
        "radThreadGetActiveThread(void)",
    ),
    Ok(
        "radThreadSleep(unsigned int)",
    ),
    Ok(
        "radThreadCreateLocalStorage(IRadThreadLocalStorage **, int)",
    ),
    Ok(
        "radThreadGetActiveFiber(void)",
    ),
    Ok(
        "radThread::Initialize(unsigned int)",
    ),
    Ok(
        "radThread::Terminate(void)",
    ),
    Ok(
        "radThread::AlarmHandler(int, unsigned short, void *)",
    ),
    Ok(
        "radThread::radThread(void)",
    ),
    Ok(
        "radThread::radThread(unsigned int (*)(void *), void *, IRadThread::Priority, unsigned int)",
    ),
    Ok(
        "radThread::~radThread(void)",
    ),
    Ok(
        "radThread::InternalThreadEntry(void *)",
    ),
    Ok(
        "radThread::SetPriority(IRadThread::Priority)",
    ),
    Ok(
        "radThread::GetPriority(void)",
    ),
    Ok(
        "radThread::Suspend(void)",
    ),
    Ok(
        "radThread::Resume(void)",
    ),
    Ok(
        "radThread::IsRunning(unsigned int *)",
    ),
    Ok(
        "radThread::WaitForTermination(void)",
    ),
    Ok(
        "radThread::IsActive(void)",
    ),
    Ok(
        "radThread::GetActiveThread(void)",
    ),
    Ok(
        "radThread::SetLocalStorage(unsigned int, void *)",
    ),
    Ok(
        "radThread::GetLocalStorage(unsigned int)",
    ),
    Ok(
        "radThread::SetDefaultLocalStorage(unsigned int)",
    ),
    Ok(
        "radThread::GetActiveFiber(void)",
    ),
    Ok(
        "radThread::AddRef(void)",
    ),
    Ok(
        "radThread::Release(void)",
    ),
    Ok(
        "radThreadLocalStorage::radThreadLocalStorage(void)",
    ),
    Ok(
        "radThreadLocalStorage::~radThreadLocalStorage(void)",
    ),
    Ok(
        "radThreadLocalStorage::GetValue(void)",
    ),
    Ok(
        "radThreadLocalStorage::SetValue(void *)",
    ),
    Ok(
        "radThreadLocalStorage::AddRef(void)",
    ),
    Ok(
        "radThreadLocalStorage::Release(void)",
    ),
    Ok(
        "radThreadFiber::radThreadFiber(void)",
    ),
    Ok(
        "radThreadFiber::~radThreadFiber(void)",
    ),
    Ok(
        "radThreadFiber::SwitchTo(void)",
    ),
    Ok(
        "radThreadFiber::GetValue(void)",
    ),
    Ok(
        "radThreadFiber::SetValue(void *)",
    ),
    Ok(
        "radThreadFiber::AddRef(void)",
    ),
    Ok(
        "radThreadFiber::Release(void)",
    ),
    Ok(
        "radThreadFiber::PS2SwitchToFiber(unsigned int *, unsigned int *, unsigned int, unsigned int)",
    ),
    Ok(
        "radThreadFiber type_info function",
    ),
    Ok(
        "radThread type_info function",
    ),
    Ok(
        "radThreadLocalStorage type_info function",
    ),
    Ok(
        "IRadThread::IRadThread(void)",
    ),
    Ok(
        "IRadThreadLocalStorage::IRadThreadLocalStorage(void)",
    ),
    Ok(
        "IRadThreadFiber::IRadThreadFiber(void)",
    ),
    Ok(
        "IRadThread type_info function",
    ),
    Ok(
        "IRadThreadLocalStorage type_info function",
    ),
    Ok(
        "IRadThreadFiber type_info function",
    ),
    Ok(
        "radTextDisplayGet(IRadTextDisplay **, int)",
    ),
    Ok(
        "radTextDisplay::Initialize(int)",
    ),
    Ok(
        "radTextDisplay::Terminate(void)",
    ),
    Ok(
        "radTextDisplay::SetAutoSwap(bool)",
    ),
    Ok(
        "radTextDisplay::SwapBuffers(void)",
    ),
    Ok(
        "radTextDisplay::AddRef(void)",
    ),
    Ok(
        "radTextDisplay::Release(void)",
    ),
    Ok(
        "radTextDisplay::SetBackgroundColor(unsigned int)",
    ),
    Ok(
        "radTextDisplay::SetTextColor(unsigned int)",
    ),
    Ok(
        "radTextDisplay::Clear(void)",
    ),
    Ok(
        "radTextDisplay::GetDimensions(unsigned int *, unsigned int *) const",
    ),
    Ok(
        "radTextDisplay::SetCursorPosition(unsigned int, unsigned int)",
    ),
    Ok(
        "radTextDisplay::TextOut(char const *)",
    ),
    Ok(
        "radTextDisplay::TextOutAt(char const *, int, int)",
    ),
    Ok(
        "radTextDisplay::WriteLetter(int, int, char)",
    ),
    Ok(
        "radTextDisplay::ScrollUp(void)",
    ),
    Ok(
        "radTextDisplay::PaintIfAutoSwapOn(void)",
    ),
    Ok(
        "radTextDisplay::Paint(void)",
    ),
    Ok(
        "radTextDisplay::InitDisplay(void)",
    ),
    Ok(
        "radTextDisplay::CloseDisplay(void)",
    ),
    Ok(
        "radTextDisplay::Ps2InitConsole(void)",
    ),
    Ok(
        "radTextDisplay::Ps2SwapBuffers(void)",
    ),
    Ok(
        "IRadTextDisplay::IRadTextDisplay(void)",
    ),
    Ok(
        "radTextDisplay::radTextDisplay(void)",
    ),
    Ok(
        "radTextDisplay type_info function",
    ),
    Ok(
        "IRadTextDisplay type_info function",
    ),
    Ok(
        "global constructors keyed to radTextDisplay::m_Initialized",
    ),
    Ok(
        "radWeakCallbackWrapperCreate(IRadWeakCallbackWrapper **, int)",
    ),
    Ok(
        "radWeakCallbackWrapper::~radWeakCallbackWrapper(void)",
    ),
    Ok(
        "radWeakCallbackWrapper type_info function",
    ),
    Ok(
        "IRadWeakCallbackWrapper::IRadWeakCallbackWrapper(void)",
    ),
    Ok(
        "radWeakCallbackWrapper::AddRef(void)",
    ),
    Ok(
        "radWeakCallbackWrapper::Release(void)",
    ),
    Ok(
        "radWeakCallbackWrapper::SetWeakInterface(void *)",
    ),
    Ok(
        "radWeakCallbackWrapper::GetWeakInterface(void)",
    ),
    Ok(
        "radWeakCallbackWrapper::SetUserData(void *)",
    ),
    Ok(
        "radWeakCallbackWrapper::GetUserData(void)",
    ),
    Ok(
        "IRadWeakCallbackWrapper type_info function",
    ),
    Ok(
        "radControllerBufferCreate(IRadControllerBuffer **, int)",
    ),
    Ok(
        "ControllerBuffer::ControllerBuffer(int)",
    ),
    Ok(
        "ControllerBuffer::~ControllerBuffer(void)",
    ),
    Ok(
        "ControllerBuffer::AddRef(void)",
    ),
    Ok(
        "ControllerBuffer::Release(void)",
    ),
    Ok(
        "ControllerBuffer::Initialize(unsigned int, unsigned int)",
    ),
    Ok(
        "ControllerBuffer::SetQueueSize(unsigned int)",
    ),
    Ok(
        "ControllerBuffer::EnqueuePacket(void *)",
    ),
    Ok(
        "ControllerBuffer::PeekNextPacket(void *, int)",
    ),
    Ok(
        "ControllerBuffer::DequeuePacket(void *)",
    ),
    Ok(
        "ControllerBuffer::Flush(void)",
    ),
    Ok(
        "ControllerBuffer type_info function",
    ),
    Ok(
        "IRadControllerBuffer::IRadControllerBuffer(void)",
    ),
    Ok(
        "IRadControllerBuffer type_info function",
    ),
    Ok(
        "radFileSystem::Initialize(unsigned int, unsigned int, int)",
    ),
    Ok(
        "radFileSystem::Terminate(void)",
    ),
    Ok(
        "radFileSystem::Lock(void)",
    ),
    Ok(
        "radFileSystem::Unlock(void)",
    ),
    Ok(
        "radFileSystem::Service(void)",
    ),
    Ok(
        "radFileSystem::ProcessFileName(char const *, char *, char *, char **, bool)",
    ),
    Ok(
        "radFileSystem::FileOpen(IRadFile **, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
    ),
    Ok(
        "radFileSystem::DriveOpen(IRadDrive **, char const *, radFilePriority, int)",
    ),
    Ok(
        "radFileSystem::SetDefaultDrive(char const *)",
    ),
    Ok(
        "radFileSystem::RegisterCementLibrary(IRadCementLibrary **, char const *, radCementLibraryPriority, unsigned int, int, radMemorySpace)",
    ),
    Ok(
        "radFileSystem::RegisterCementLibrarySync(IRadCementLibrary **, char const *, radCementLibraryPriority, unsigned int, int, radMemorySpace)",
    ),
    Ok(
        "radFileSystem::GetConnectTimeOut(void)",
    ),
    Ok(
        "radFileSystem::DriveMount(char const *, int)",
    ),
    Ok(
        "radFileSystem::DriveUnmount(char const *)",
    ),
    Ok(
        "radFileSystem::GetDriveIndex(char const *)",
    ),
    Ok(
        "radFileSystem::ConstructDrive(radDrive **, char const *, int)",
    ),
    Ok(
        "PlatformDrivesGetDefaultDrive(char *)",
    ),
    Ok(
        "PlatformDrivesValidateDriveName(char const *)",
    ),
    Ok(
        "PlatformDrivesFactory(radDrive **, char const *, int)",
    ),
    Ok(
        "radRemoteDriveFactory(radDrive **, char const *, int)",
    ),
    Ok(
        "radRemoteDrive::radRemoteDrive(int, IRadDbgComChannel *)",
    ),
    Ok(
        "radRemoteDrive::~radRemoteDrive(void)",
    ),
    Ok(
        "radRemoteDrive::Lock(void)",
    ),
    Ok(
        "radRemoteDrive::Unlock(void)",
    ),
    Ok(
        "radRemoteDrive::GetDriveName(void)",
    ),
    Ok(
        "radRemoteDrive::GetCapabilities(void)",
    ),
    Ok(
        "radRemoteDrive::Initialize(void)",
    ),
    Ok(
        "radRemoteDrive::DoInitialize(void)",
    ),
    Ok(
        "radRemoteDrive::OpenFile(char const *, radFileOpenFlags, bool, unsigned int *, unsigned int *)",
    ),
    Ok(
        "radRemoteDrive::DoOpen(void)",
    ),
    Ok(
        "radRemoteDrive::ReceiveOpen(unsigned int)",
    ),
    Ok(
        "radRemoteDrive::CloseFile(unsigned int, char const *)",
    ),
    Ok(
        "radRemoteDrive::DoClose(void)",
    ),
    Ok(
        "radRemoteDrive::ReceiveClose(unsigned int)",
    ),
    Ok(
        "radRemoteDrive::DestroyFile(char const *)",
    ),
    Ok(
        "radRemoteDrive::DoDestroy(void)",
    ),
    Ok(
        "radRemoteDrive::ReceiveDestroy(unsigned int)",
    ),
    Ok(
        "radRemoteDrive::ReadFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "radRemoteDrive::DoRead(void)",
    ),
    Ok(
        "radRemoteDrive::ReceiveRead(unsigned int)",
    ),
    Ok(
        "radRemoteDrive::WriteFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void const *, unsigned int, unsigned int *, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "radRemoteDrive::DoWrite(void)",
    ),
    Ok(
        "radRemoteDrive::ReceiveWrite(unsigned int)",
    ),
    Ok(
        "radRemoteDrive::FindFirst(char const *, IRadDrive::DirectoryInfo *, radFileDirHandle *, bool)",
    ),
    Ok(
        "radRemoteDrive::DoFindFirst(void)",
    ),
    Ok(
        "radRemoteDrive::ReceiveFindFirst(unsigned int)",
    ),
    Ok(
        "radRemoteDrive::FindNext(radFileDirHandle *, IRadDrive::DirectoryInfo *)",
    ),
    Ok(
        "radRemoteDrive::DoFindNext(void)",
    ),
    Ok(
        "radRemoteDrive::ReceiveFindNext(unsigned int)",
    ),
    Ok(
        "radRemoteDrive::FindClose(radFileDirHandle *)",
    ),
    Ok(
        "radRemoteDrive::DoFindClose(void)",
    ),
    Ok(
        "radRemoteDrive::ReceiveFindClose(unsigned int)",
    ),
    Ok(
        "radRemoteDrive::Service(void)",
    ),
    Ok(
        "radRemoteDrive::OnSendComplete(bool)",
    ),
    Ok(
        "radRemoteDrive::OnReceiveComplete(bool, unsigned int)",
    ),
    Ok(
        "radRemoteDrive::ProcessDisconnect(void)",
    ),
    Ok(
        "radRemoteDrive type_info function",
    ),
    Ok(
        "radRemoteDrive::AddRef(void)",
    ),
    Ok(
        "radRemoteDrive::Release(void)",
    ),
    Ok(
        "radCementLibraryCreate(IRadCementLibrary **, radDrive *, char const *, radCementLibraryPriority, unsigned int, int, radMemorySpace)",
    ),
    Ok(
        "radCementLibrary::radCementLibrary(radDrive *, radFile *, radCementLibraryPriority)",
    ),
    Ok(
        "radCementLibrary::~radCementLibrary(void)",
    ),
    Ok(
        "radCementLibrary::Lock(void)",
    ),
    Ok(
        "radCementLibrary::Unlock(void)",
    ),
    Ok(
        "radCementLibrary::GetStatus(void)",
    ),
    Ok(
        "radCementLibrary::WaitForCompletion(void)",
    ),
    Ok(
        "radCementLibrary::IsOpen(void)",
    ),
    Ok(
        "radCementLibrary::SetCompletionCallback(IRadCementLibraryCompletionCallback *, void *)",
    ),
    Ok(
        "radCementLibrary::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "radCementLibrary::OpenFile(char const *, unsigned int *, unsigned int *)",
    ),
    Ok(
        "radCementLibrary::CompleteRegister(IRadCementLibrary::CementLibraryStatus)",
    ),
    Ok(
        "radCementLibrary::GetPriority(void) const",
    ),
    Ok(
        "radCementLibraryList::radCementLibraryList(void)",
    ),
    Ok(
        "radCementLibraryList::~radCementLibraryList(void)",
    ),
    Ok(
        "radCementLibraryList::AddLibrary(radCementLibrary *)",
    ),
    Ok(
        "radCementLibraryList::RemoveLibrary(radCementLibrary const *)",
    ),
    Ok(
        "radCementLibraryList::BeginIteration(radCementLibraryPriority)",
    ),
    Ok(
        "radCementLibraryList::GetNext(void)",
    ),
    Ok(
        "radSafeRefCount type_info function",
    ),
    Ok(
        "radCementLibrary type_info function",
    ),
    Ok(
        "IRadCementLibrary::IRadCementLibrary(void)",
    ),
    Ok(
        "IRadMutable::IRadMutable(void)",
    ),
    Ok(
        "radSafeRefCount::~radSafeRefCount(void)",
    ),
    Ok(
        "radCementLibrary::AddRef(void)",
    ),
    Ok(
        "radCementLibrary::Release(void)",
    ),
    Ok(
        "IRadCementLibrary type_info function",
    ),
    Ok(
        "IRadMutable type_info function",
    ),
    Ok(
        "radPs2CdDriveFactory(radDrive **, char const *, int)",
    ),
    Ok(
        "radPs2CdDrive::radPs2CdDrive(int)",
    ),
    Ok(
        "radPs2CdDrive::~radPs2CdDrive(void)",
    ),
    Ok(
        "radPs2CdDrive::Lock(void)",
    ),
    Ok(
        "radPs2CdDrive::Unlock(void)",
    ),
    Ok(
        "radPs2CdDrive::GetCapabilities(void)",
    ),
    Ok(
        "radPs2CdDrive::GetDriveName(void)",
    ),
    Ok(
        "radPs2CdDrive::GetReadBufferSectors(void)",
    ),
    Ok(
        "radPs2CdDrive::Initialize(void)",
    ),
    Ok(
        "radPs2CdDrive::OpenFile(char const *, radFileOpenFlags, bool, unsigned int *, unsigned int *)",
    ),
    Ok(
        "radPs2CdDrive::CloseFile(unsigned int, char const *)",
    ),
    Ok(
        "radPs2CdDrive::ReadAligned(unsigned int, char const *, unsigned int, unsigned int, void *, radMemorySpace)",
    ),
    Ok(
        "radPs2CdDrive::ReadBuffered(unsigned int, char const *, unsigned int, unsigned int, unsigned int, unsigned int, void *, radMemorySpace)",
    ),
    Ok(
        "radPs2CdDrive::FindFirst(char const *, IRadDrive::DirectoryInfo *, radFileDirHandle *, bool)",
    ),
    Ok(
        "radPs2CdDrive::FindNext(radFileDirHandle *, IRadDrive::DirectoryInfo *)",
    ),
    Ok(
        "radPs2CdDrive::FindClose(radFileDirHandle *)",
    ),
    Ok(
        "ErrorToMediaState(radFileError)",
    ),
    Ok(
        "radPs2CdDrive::SetMediaInfo(void)",
    ),
    Ok(
        "radPs2CdDrive::ReadVolumeName(char *)",
    ),
    Ok(
        "radPs2CdDrive::LoadDirectory(void)",
    ),
    Ok(
        "radPs2CdDrive::BuildDirectory(unsigned int, unsigned int, char *, unsigned int)",
    ),
    Ok(
        "radPs2CdDrive::FindDirectorySector(char const *, unsigned int, unsigned int *, unsigned int *)",
    ),
    Ok(
        "radPs2CdDrive::BuildFileSpec(char const *, char *, unsigned int, char **)",
    ),
    Ok(
        "radPs2CdDrive::Read(unsigned int, void *, unsigned int, bool)",
    ),
    Ok(
        "radPs2CdDrive::DiskChanged(void)",
    ),
    Ok(
        "radPs2CdDrive::FileNameMatchesSearch(char const *, char const *)",
    ),
    Ok(
        "bool radBinarySearch<radPs2CdDrive::DirectoryEntry>(radPs2CdDrive::DirectoryEntry const &, radPs2CdDrive::DirectoryEntry const *, int, unsigned int *)",
    ),
    Ok(
        "radPs2CdDrive type_info function",
    ),
    Ok(
        "radBufferedReader::radBufferedReader(void)",
    ),
    Ok(
        "radPs2CdDrive::ReadFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "radPs2CdDrive::DirectoryEntry::compare(void const *, void const *)",
    ),
    Ok(
        "radBufferedReader type_info function",
    ),
    Ok(
        "radPs2HostDriveFactory(radDrive **, char const *, int)",
    ),
    Ok(
        "radPs2HostDrive::radPs2HostDrive(int)",
    ),
    Ok(
        "radPs2HostDrive::~radPs2HostDrive(void)",
    ),
    Ok(
        "radPs2HostDrive::Lock(void)",
    ),
    Ok(
        "radPs2HostDrive::Unlock(void)",
    ),
    Ok(
        "radPs2HostDrive::GetCapabilities(void)",
    ),
    Ok(
        "radPs2HostDrive::GetDriveName(void)",
    ),
    Ok(
        "radPs2HostDrive::GetReadBufferSectors(void)",
    ),
    Ok(
        "radPs2HostDrive::Initialize(void)",
    ),
    Ok(
        "radPs2HostDrive::OpenFile(char const *, radFileOpenFlags, bool, unsigned int *, unsigned int *)",
    ),
    Ok(
        "radPs2HostDrive::CloseFile(unsigned int, char const *)",
    ),
    Ok(
        "radPs2HostDrive::ReadAligned(unsigned int, char const *, unsigned int, unsigned int, void *, radMemorySpace)",
    ),
    Ok(
        "radPs2HostDrive::ReadBuffered(unsigned int, char const *, unsigned int, unsigned int, unsigned int, unsigned int, void *, radMemorySpace)",
    ),
    Ok(
        "radPs2HostDrive::DestroyFile(char const *)",
    ),
    Ok(
        "radPs2HostDrive::BuildFileSpec(char const *, char *, unsigned int, char **)",
    ),
    Ok(
        "radPs2HostDrive type_info function",
    ),
    Ok(
        "radPs2HostDrive::ReadFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "radPs2MemcardDriveFactory(radDrive **, char const *, int)",
    ),
    Ok(
        "radPs2MemcardDrive::radPs2MemcardDrive(char const *, int)",
    ),
    Ok(
        "radPs2MemcardDrive::~radPs2MemcardDrive(void)",
    ),
    Ok(
        "radPs2MemcardDrive::Lock(void)",
    ),
    Ok(
        "radPs2MemcardDrive::Unlock(void)",
    ),
    Ok(
        "radPs2MemcardDrive::GetCapabilities(void)",
    ),
    Ok(
        "radPs2MemcardDrive::GetDriveName(void)",
    ),
    Ok(
        "radPs2MemcardDrive::Initialize(void)",
    ),
    Ok(
        "radPs2MemcardDrive::OpenSaveGame(char const *, radFileOpenFlags, bool, radMemcardInfo *, unsigned int, unsigned int *, unsigned int *)",
    ),
    Ok(
        "radPs2MemcardDrive::CloseFile(unsigned int, char const *)",
    ),
    Ok(
        "radPs2MemcardDrive::CommitFile(unsigned int, char const *)",
    ),
    Ok(
        "radPs2MemcardDrive::GetReadBlockSize(void)",
    ),
    Ok(
        "radPs2MemcardDrive::GetReadHeaderSize(unsigned int)",
    ),
    Ok(
        "radPs2MemcardDrive::GetWriteBlockSize(void)",
    ),
    Ok(
        "radPs2MemcardDrive::GetWriteHeaderSize(unsigned int)",
    ),
    Ok(
        "radPs2MemcardDrive::ReadSignedBlock(unsigned int, char const *, unsigned int, unsigned int, unsigned int, void *, radMemorySpace)",
    ),
    Ok(
        "radPs2MemcardDrive::WriteSignedBlock(unsigned int, char const *, unsigned int, unsigned int, unsigned int, void const *, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "radPs2MemcardDrive::DestroyFile(char const *)",
    ),
    Ok(
        "radPs2MemcardDrive::Format(void)",
    ),
    Ok(
        "radPs2MemcardDrive::FindFirst(char const *, IRadDrive::DirectoryInfo *, radFileDirHandle *, bool)",
    ),
    Ok(
        "radPs2MemcardDrive::FindNext(radFileDirHandle *, IRadDrive::DirectoryInfo *)",
    ),
    Ok(
        "radPs2MemcardDrive::FindClose(radFileDirHandle *)",
    ),
    Ok(
        "radPs2MemcardDrive::GetCreationSize(radMemcardInfo *, unsigned int)",
    ),
    Ok(
        "radPs2MemcardDrive::DeleteFiles(char const *, int, int)",
    ),
    Ok(
        "radPs2MemcardDrive::SetMediaInfo(void)",
    ),
    Ok(
        "radPs2MemcardDrive::GetPort(int *, int *)",
    ),
    Ok(
        "radPs2MemcardDrive::BuildFileSpec(char const *, char *, unsigned int, char **)",
    ),
    Ok(
        "radPs2MemcardDrive::WaitForResult(void)",
    ),
    Ok(
        "radPs2MemcardDrive::SyncFunction(int)",
    ),
    Ok(
        "radPs2MemcardDrive::ProcessError(int)",
    ),
    Ok(
        "radPs2MemcardDrive::CreateIcons(radMemcardInfo *, char *, int, int)",
    ),
    Ok(
        "radPs2MemcardDrive::ReadIcons(radMemcardInfo *, char *, int, int)",
    ),
    Ok(
        "radPs2MemcardDrive::Open(unsigned int *, unsigned int *, char *, int, int, int, bool)",
    ),
    Ok(
        "radPs2MemcardDrive::LoadBlock(unsigned int, unsigned int)",
    ),
    Ok(
        "radPs2MemcardDrive::FlushBlock(void)",
    ),
    Ok(
        "radPs2MemcardDrive::GetTableSize(unsigned int)",
    ),
    Ok(
        "radPs2MemcardDrive::CalculateCRC(unsigned int)",
    ),
    Ok(
        "radPs2MemcardDrive::GetSizeFromHandle(unsigned int, unsigned int *)",
    ),
    Ok(
        "radPs2MemcardDrive::InitializeFile(unsigned int, unsigned int)",
    ),
    Ok(
        "radPs2MemcardDrive type_info function",
    ),
    Ok(
        "radSignedReader::radSignedReader(void)",
    ),
    Ok(
        "radSignedWriter::radSignedWriter(void)",
    ),
    Ok(
        "radPs2MemcardDrive::ReadFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "radPs2MemcardDrive::WriteFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void const *, unsigned int, unsigned int *, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "radSignedReader type_info function",
    ),
    Ok(
        "radSignedWriter type_info function",
    ),
    Ok(
        "radRequestPoolInitialize(unsigned int, int)",
    ),
    Ok(
        "radRequestPoolTerminate(void)",
    ),
    Ok(
        "radRequest::operator new(unsigned int)",
    ),
    Ok(
        "radRequest::operator delete(void *)",
    ),
    Ok(
        "radRequest::radRequest(void)",
    ),
    Ok(
        "radRequest::~radRequest(void)",
    ),
    Ok(
        "CompletionEventRequest::CompletionEventRequest(IRadThreadSemaphore *, radDrive *)",
    ),
    Ok(
        "CompletionEventRequest::~CompletionEventRequest(void)",
    ),
    Ok(
        "CompletionEventRequest::DoRequest(void)",
    ),
    Ok(
        "CompletionEventRequest::ShouldCancel(void *)",
    ),
    Ok(
        "CompletionEventRequest::GetOwner(void)",
    ),
    Ok(
        "CompletionEventRequest::ReInit(void)",
    ),
    Ok(
        "CompletionCallbackRequest::CompletionCallbackRequest(IRadThread *)",
    ),
    Ok(
        "CompletionCallbackRequest::ShouldCancel(void *)",
    ),
    Ok(
        "CompletionCallbackRequest::IsRegisteredThread(IRadThread *)",
    ),
    Ok(
        "CompletionCallbackRequest::ReInit(void)",
    ),
    Ok(
        "FileCompletionRequest::FileCompletionRequest(IRadThread *, radFile *, IRadFileCompletionCallback *, void *)",
    ),
    Ok(
        "FileCompletionRequest::~FileCompletionRequest(void)",
    ),
    Ok(
        "FileCompletionRequest::DoRequest(void)",
    ),
    Ok(
        "FileCompletionRequest::callback(void)",
    ),
    Ok(
        "FileCompletionRequest::GetOwner(void)",
    ),
    Ok(
        "DriveCompletionRequest::DriveCompletionRequest(IRadThread *, radInstanceDrive *, IRadDriveCompletionCallback *, void *)",
    ),
    Ok(
        "DriveCompletionRequest::~DriveCompletionRequest(void)",
    ),
    Ok(
        "DriveCompletionRequest::DoRequest(void)",
    ),
    Ok(
        "DriveCompletionRequest::callback(void)",
    ),
    Ok(
        "DriveCompletionRequest::GetOwner(void)",
    ),
    Ok(
        "radFileRequest::radFileRequest(radFile *)",
    ),
    Ok(
        "radFileRequest::~radFileRequest(void)",
    ),
    Ok(
        "radFileRequest::handleError(radDrive::CompletionStatus, radFileError)",
    ),
    Ok(
        "radFileRequest::ShouldCancel(void *)",
    ),
    Ok(
        "radFileRequest::GetOwner(void)",
    ),
    Ok(
        "radFileRequest::ReInit(void)",
    ),
    Ok(
        "radFileRequest::GetFilename(void)",
    ),
    Ok(
        "FileOpenRequest::FileOpenRequest(radFile *, radFileOpenFlags, bool)",
    ),
    Ok(
        "FileOpenRequest::DoRequest(void)",
    ),
    Ok(
        "SaveGameOpenRequest::SaveGameOpenRequest(radFile *, radFileOpenFlags, bool, radMemcardInfo *, unsigned int)",
    ),
    Ok(
        "SaveGameOpenRequest::DoRequest(void)",
    ),
    Ok(
        "FileCloseRequest::FileCloseRequest(radFile *)",
    ),
    Ok(
        "FileCloseRequest::ReInit(void)",
    ),
    Ok(
        "FileCloseRequest::DoRequest(void)",
    ),
    Ok(
        "FileCommitRequest::FileCommitRequest(radFile *)",
    ),
    Ok(
        "FileCommitRequest::DoRequest(void)",
    ),
    Ok(
        "FileReadRequest::FileReadRequest(radFile *, void *, unsigned int, radMemorySpace)",
    ),
    Ok(
        "FileReadRequest::DoRequest(void)",
    ),
    Ok(
        "FileWriteRequest::FileWriteRequest(radFile *, void const *, unsigned int, radMemorySpace)",
    ),
    Ok(
        "FileWriteRequest::DoRequest(void)",
    ),
    Ok(
        "FileSetPositionRequest::FileSetPositionRequest(radFile *, unsigned int)",
    ),
    Ok(
        "FileSetPositionRequest::DoRequest(void)",
    ),
    Ok(
        "FileGetPositionRequest::FileGetPositionRequest(radFile *, unsigned int *)",
    ),
    Ok(
        "FileGetPositionRequest::DoRequest(void)",
    ),
    Ok(
        "FileGetSizeRequest::FileGetSizeRequest(radFile *, unsigned int *)",
    ),
    Ok(
        "FileGetSizeRequest::DoRequest(void)",
    ),
    Ok(
        "FileCancelRequest::FileCancelRequest(radFile *)",
    ),
    Ok(
        "FileCancelRequest::DoRequest(void)",
    ),
    Ok(
        "FileCancelRequest::ReInit(void)",
    ),
    Ok(
        "radDriveRequest::radDriveRequest(radInstanceDrive *)",
    ),
    Ok(
        "radDriveRequest::~radDriveRequest(void)",
    ),
    Ok(
        "radDriveRequest::ShouldCancel(void *)",
    ),
    Ok(
        "radDriveRequest::GetOwner(void)",
    ),
    Ok(
        "radDriveRequest::ReInit(void)",
    ),
    Ok(
        "DriveOpenRequest::DriveOpenRequest(radInstanceDrive *)",
    ),
    Ok(
        "DriveOpenRequest::DoRequest(void)",
    ),
    Ok(
        "DriveOpenRequest::ReInit(void)",
    ),
    Ok(
        "DriveMediaRequest::DriveMediaRequest(radInstanceDrive *, IRadDrive::MediaInfo *)",
    ),
    Ok(
        "DriveMediaRequest::DoRequest(void)",
    ),
    Ok(
        "DriveMediaRequest::ReInit(void)",
    ),
    Ok(
        "DriveFormatRequest::DriveFormatRequest(radInstanceDrive *)",
    ),
    Ok(
        "DriveFormatRequest::DoRequest(void)",
    ),
    Ok(
        "DriveCreateDirectoryRequest::DriveCreateDirectoryRequest(radInstanceDrive *, char const *)",
    ),
    Ok(
        "DriveCreateDirectoryRequest::DoRequest(void)",
    ),
    Ok(
        "DriveDestroyDirectoryRequest::DriveDestroyDirectoryRequest(radInstanceDrive *, char const *)",
    ),
    Ok(
        "DriveDestroyDirectoryRequest::DoRequest(void)",
    ),
    Ok(
        "DriveFindFirstRequest::DriveFindFirstRequest(radInstanceDrive *, char const *, IRadDrive::DirectoryInfo *)",
    ),
    Ok(
        "DriveFindFirstRequest::DoRequest(void)",
    ),
    Ok(
        "DriveFindNextRequest::DriveFindNextRequest(radInstanceDrive *, IRadDrive::DirectoryInfo *)",
    ),
    Ok(
        "DriveFindNextRequest::DoRequest(void)",
    ),
    Ok(
        "DriveFindCloseRequest::DriveFindCloseRequest(radInstanceDrive *)",
    ),
    Ok(
        "DriveFindCloseRequest::DoRequest(void)",
    ),
    Ok(
        "DriveFindCloseRequest::ReInit(void)",
    ),
    Ok(
        "DriveFileDestroyRequest::DriveFileDestroyRequest(radInstanceDrive *, char const *)",
    ),
    Ok(
        "DriveFileDestroyRequest::DoRequest(void)",
    ),
    Ok(
        "DriveCancelRequest::DriveCancelRequest(radInstanceDrive *)",
    ),
    Ok(
        "DriveCancelRequest::DoRequest(void)",
    ),
    Ok(
        "DriveCancelRequest::ReInit(void)",
    ),
    Ok(
        "radRequest type_info function",
    ),
    Ok(
        "CompletionEventRequest type_info function",
    ),
    Ok(
        "CompletionCallbackRequest type_info function",
    ),
    Ok(
        "FileCompletionRequest type_info function",
    ),
    Ok(
        "DriveCompletionRequest type_info function",
    ),
    Ok(
        "radFileRequest type_info function",
    ),
    Ok(
        "FileOpenRequest::~FileOpenRequest(void)",
    ),
    Ok(
        "FileOpenRequest type_info function",
    ),
    Ok(
        "SaveGameOpenRequest::~SaveGameOpenRequest(void)",
    ),
    Ok(
        "SaveGameOpenRequest type_info function",
    ),
    Ok(
        "FileCloseRequest::~FileCloseRequest(void)",
    ),
    Ok(
        "FileCloseRequest type_info function",
    ),
    Ok(
        "FileCommitRequest::~FileCommitRequest(void)",
    ),
    Ok(
        "FileCommitRequest type_info function",
    ),
    Ok(
        "FileReadRequest::~FileReadRequest(void)",
    ),
    Ok(
        "FileReadRequest type_info function",
    ),
    Ok(
        "FileWriteRequest::~FileWriteRequest(void)",
    ),
    Ok(
        "FileWriteRequest type_info function",
    ),
    Ok(
        "FileSetPositionRequest::~FileSetPositionRequest(void)",
    ),
    Ok(
        "FileSetPositionRequest type_info function",
    ),
    Ok(
        "FileGetPositionRequest::~FileGetPositionRequest(void)",
    ),
    Ok(
        "FileGetPositionRequest type_info function",
    ),
    Ok(
        "FileGetSizeRequest::~FileGetSizeRequest(void)",
    ),
    Ok(
        "FileGetSizeRequest type_info function",
    ),
    Ok(
        "FileCancelRequest::~FileCancelRequest(void)",
    ),
    Ok(
        "FileCancelRequest type_info function",
    ),
    Ok(
        "radDriveRequest type_info function",
    ),
    Ok(
        "DriveOpenRequest::~DriveOpenRequest(void)",
    ),
    Ok(
        "DriveOpenRequest type_info function",
    ),
    Ok(
        "DriveMediaRequest::~DriveMediaRequest(void)",
    ),
    Ok(
        "DriveMediaRequest type_info function",
    ),
    Ok(
        "DriveFormatRequest::~DriveFormatRequest(void)",
    ),
    Ok(
        "DriveFormatRequest type_info function",
    ),
    Ok(
        "DriveCreateDirectoryRequest::~DriveCreateDirectoryRequest(void)",
    ),
    Ok(
        "DriveCreateDirectoryRequest type_info function",
    ),
    Ok(
        "DriveDestroyDirectoryRequest::~DriveDestroyDirectoryRequest(void)",
    ),
    Ok(
        "DriveDestroyDirectoryRequest type_info function",
    ),
    Ok(
        "DriveFindFirstRequest::~DriveFindFirstRequest(void)",
    ),
    Ok(
        "DriveFindFirstRequest type_info function",
    ),
    Ok(
        "DriveFindNextRequest::~DriveFindNextRequest(void)",
    ),
    Ok(
        "DriveFindNextRequest type_info function",
    ),
    Ok(
        "DriveFindCloseRequest::~DriveFindCloseRequest(void)",
    ),
    Ok(
        "DriveFindCloseRequest type_info function",
    ),
    Ok(
        "DriveFileDestroyRequest::~DriveFileDestroyRequest(void)",
    ),
    Ok(
        "DriveFileDestroyRequest type_info function",
    ),
    Ok(
        "DriveCancelRequest::~DriveCancelRequest(void)",
    ),
    Ok(
        "DriveCancelRequest type_info function",
    ),
    Ok(
        "CompletionCallbackRequest::~CompletionCallbackRequest(void)",
    ),
    Ok(
        "radFilePoolInitialize(unsigned int, int)",
    ),
    Ok(
        "radFilePoolTerminate(void)",
    ),
    Ok(
        "radFile::operator new(unsigned int)",
    ),
    Ok(
        "radFile::operator delete(void *)",
    ),
    Ok(
        "radFile::radFile(radDrive *, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
    ),
    Ok(
        "radFile::radFile(radDrive *, char const *, bool, radFileOpenFlags, radMemcardInfo *, unsigned int, radFilePriority)",
    ),
    Ok(
        "radFile::~radFile(void)",
    ),
    Ok(
        "radFile::AddRef(void)",
    ),
    Ok(
        "radFile::Release(void)",
    ),
    Ok(
        "radFile::Lock(void)",
    ),
    Ok(
        "radFile::Unlock(void)",
    ),
    Ok(
        "radFile::CommitAsync(void)",
    ),
    Ok(
        "radFile::ReadAsync(void *, unsigned int, radMemorySpace)",
    ),
    Ok(
        "radFile::WriteAsync(void const *, unsigned int, radMemorySpace)",
    ),
    Ok(
        "radFile::SetPositionAsync(unsigned int)",
    ),
    Ok(
        "radFile::GetPositionAsync(unsigned int *)",
    ),
    Ok(
        "radFile::GetSizeAsync(unsigned int *)",
    ),
    Ok(
        "radFile::ReadSync(void *, unsigned int, radMemorySpace)",
    ),
    Ok(
        "radFile::WriteSync(void const *, unsigned int, radMemorySpace)",
    ),
    Ok(
        "radFile::SetPositionSync(unsigned int)",
    ),
    Ok(
        "radFile::GetPositionSync(unsigned int *)",
    ),
    Ok(
        "radFile::GetSizeSync(unsigned int *)",
    ),
    Ok(
        "radFile::CommitSync(void)",
    ),
    Ok(
        "radFile::GetSize(void)",
    ),
    Ok(
        "radFile::CancelAsync(void)",
    ),
    Ok(
        "radFile::AddCompletionCallback(IRadFileCompletionCallback *, void *)",
    ),
    Ok(
        "radFile::AddCompletionEvent(IRadThreadSemaphore *)",
    ),
    Ok(
        "radFile::CheckForCompletion(void)",
    ),
    Ok(
        "radFile::WaitForCompletion(void)",
    ),
    Ok(
        "radFile::GetLastError(void)",
    ),
    Ok(
        "radFile::IsOpen(void)",
    ),
    Ok(
        "radFile::GetFilename(void)",
    ),
    Ok(
        "radFile::GetDrivename(void)",
    ),
    Ok(
        "radFile::SetPriority(radFilePriority)",
    ),
    Ok(
        "radFile::GetPriority(void)",
    ),
    Ok(
        "radFile::IsSaveGame(void)",
    ),
    Ok(
        "radFile::GetOptimalSize(void)",
    ),
    Ok(
        "radFile::SetBufferedRead(IRadFile::BufferedReadState)",
    ),
    Ok(
        "radFile::GetHandle(void)",
    ),
    Ok(
        "radFile type_info function",
    ),
    Ok(
        "IRadFile::IRadFile(void)",
    ),
    Ok(
        "IRadFile type_info function",
    ),
    Ok(
        "radDrivePoolInitialize(unsigned int, int)",
    ),
    Ok(
        "radDrivePoolTerminate(void)",
    ),
    Ok(
        "radInstanceDrive::operator new(unsigned int)",
    ),
    Ok(
        "radInstanceDrive::operator delete(void *)",
    ),
    Ok(
        "radInstanceDrive::radInstanceDrive(radDrive *, radFilePriority)",
    ),
    Ok(
        "radInstanceDrive::~radInstanceDrive(void)",
    ),
    Ok(
        "radInstanceDrive::AddRef(void)",
    ),
    Ok(
        "radInstanceDrive::Release(void)",
    ),
    Ok(
        "radInstanceDrive::Lock(void)",
    ),
    Ok(
        "radInstanceDrive::Unlock(void)",
    ),
    Ok(
        "radInstanceDrive::GetCapabilities(void)",
    ),
    Ok(
        "radInstanceDrive::GetMediaInfoAsync(IRadDrive::MediaInfo *)",
    ),
    Ok(
        "radInstanceDrive::FormatAsync(void)",
    ),
    Ok(
        "radInstanceDrive::CreateDirectoryAsync(char const *)",
    ),
    Ok(
        "radInstanceDrive::DestroyDirectoryAsync(char const *)",
    ),
    Ok(
        "radInstanceDrive::FindFirstAsync(char const *, IRadDrive::DirectoryInfo *)",
    ),
    Ok(
        "radInstanceDrive::FindNextAsync(IRadDrive::DirectoryInfo *)",
    ),
    Ok(
        "radInstanceDrive::DestroyFileAsync(char const *, bool)",
    ),
    Ok(
        "radInstanceDrive::GetMediaInfoSync(IRadDrive::MediaInfo *)",
    ),
    Ok(
        "radInstanceDrive::FormatSync(void)",
    ),
    Ok(
        "radInstanceDrive::CreateDirectorySync(char const *)",
    ),
    Ok(
        "radInstanceDrive::DestroyDirectorySync(char const *)",
    ),
    Ok(
        "radInstanceDrive::FindFirstSync(char const *, IRadDrive::DirectoryInfo *)",
    ),
    Ok(
        "radInstanceDrive::FindNextSync(IRadDrive::DirectoryInfo *)",
    ),
    Ok(
        "radInstanceDrive::DestroyFileSync(char const *, bool)",
    ),
    Ok(
        "radInstanceDrive::CancelAsync(void)",
    ),
    Ok(
        "radInstanceDrive::AddCompletionCallback(IRadDriveCompletionCallback *, void *)",
    ),
    Ok(
        "radInstanceDrive::AddCompletionEvent(IRadThreadSemaphore *)",
    ),
    Ok(
        "radInstanceDrive::CheckForCompletion(void)",
    ),
    Ok(
        "radInstanceDrive::WaitForCompletion(void)",
    ),
    Ok(
        "radInstanceDrive::GetLastError(void)",
    ),
    Ok(
        "radInstanceDrive::RegisterErrorHandler(IRadDriveErrorCallback *, void *)",
    ),
    Ok(
        "radInstanceDrive::UnregisterErrorHandler(IRadDriveErrorCallback *)",
    ),
    Ok(
        "radInstanceDrive::RegisterErrorEvent(IRadThreadSemaphore *)",
    ),
    Ok(
        "radInstanceDrive::UnregisterErrorEvent(IRadThreadSemaphore *)",
    ),
    Ok(
        "radInstanceDrive::CheckForErrorState(void)",
    ),
    Ok(
        "radInstanceDrive::ResumeRequest(bool)",
    ),
    Ok(
        "radInstanceDrive::SetDefaultErrorBehaviour(IRadDrive::ErrorBehaviour)",
    ),
    Ok(
        "radInstanceDrive::SetErrorClearReporting(bool)",
    ),
    Ok(
        "radInstanceDrive::SetReadWriteGranularity(unsigned int)",
    ),
    Ok(
        "radInstanceDrive::GetReadWriteGranularity(void)",
    ),
    Ok(
        "radInstanceDrive::FileOpenAsync(IRadFile **, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
    ),
    Ok(
        "radInstanceDrive::FileOpenSync(IRadFile **, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
    ),
    Ok(
        "radInstanceDrive::SaveGameOpenAsync(IRadFile **, char const *, bool, radFileOpenFlags, radMemcardInfo *, unsigned int, bool, radFilePriority)",
    ),
    Ok(
        "radInstanceDrive::SaveGameOpenSync(IRadFile **, char const *, bool, radFileOpenFlags, radMemcardInfo *, unsigned int, bool, radFilePriority)",
    ),
    Ok(
        "radInstanceDrive::SetPriority(radFilePriority)",
    ),
    Ok(
        "radInstanceDrive::GetPriority(void)",
    ),
    Ok(
        "radInstanceDrive::GetDriveName(void)",
    ),
    Ok(
        "radInstanceDrive::GetCreationSize(radMemcardInfo *, unsigned int)",
    ),
    Ok(
        "radInstanceDrive type_info function",
    ),
    Ok(
        "IRadDrive::IRadDrive(void)",
    ),
    Ok(
        "radInstanceDrive::FileOpen(IRadFile **, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
    ),
    Ok(
        "IRadDrive type_info function",
    ),
    Ok(
        "radDrive::radDrive(void)",
    ),
    Ok(
        "radDrive::~radDrive(void)",
    ),
    Ok(
        "radDrive::GetLastError(void)",
    ),
    Ok(
        "radDrive::GetMediaInfo(void)",
    ),
    Ok(
        "radDrive::AddCallback(CompletionCallbackRequest *)",
    ),
    Ok(
        "radDrive::Service(void)",
    ),
    Ok(
        "radDrive::RegisterErrorHandler(IRadDriveErrorCallback *, void *)",
    ),
    Ok(
        "radDrive::UnregisterErrorHandler(IRadDriveErrorCallback *)",
    ),
    Ok(
        "radDrive::RegisterErrorEvent(IRadThreadSemaphore *)",
    ),
    Ok(
        "radDrive::SetDefaultErrorBehaviour(IRadDrive::ErrorBehaviour)",
    ),
    Ok(
        "radDrive::GetDefaultErrorBehaviour(void)",
    ),
    Ok(
        "radDrive::ResumeRequest(bool)",
    ),
    Ok(
        "radDrive::CheckForErrorState(void)",
    ),
    Ok(
        "radDrive::SetErrorState(void)",
    ),
    Ok(
        "radDrive::SetErrorClearReporting(bool)",
    ),
    Ok(
        "radDrive::GetErrorClearReporting(void)",
    ),
    Ok(
        "radDrive::QueueRequest(radRequest *, radFilePriority, bool)",
    ),
    Ok(
        "radDrive::CancelRequests(void *, radFilePriority)",
    ),
    Ok(
        "radDrive::OutstandingRequests(void)",
    ),
    Ok(
        "radDrive::RegisterCementLibrary(radCementLibrary *)",
    ),
    Ok(
        "radDrive::UnregisterCementLibrary(radCementLibrary *)",
    ),
    Ok(
        "radDrive::GetLibraryList(void)",
    ),
    Ok(
        "radDrive::GetCreationSize(radMemcardInfo *, unsigned int)",
    ),
    Ok(
        "radDrive::CommitFile(unsigned int, char const *)",
    ),
    Ok(
        "radDrive::OpenFile(char const *, radFileOpenFlags, bool, unsigned int *, unsigned int *)",
    ),
    Ok(
        "radDrive::OpenSaveGame(char const *, radFileOpenFlags, bool, radMemcardInfo *, unsigned int, unsigned int *, unsigned int *)",
    ),
    Ok(
        "radDrive::WriteFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void const *, unsigned int, unsigned int *, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "radDrive::Format(void)",
    ),
    Ok(
        "radDrive::CreateDir(char const *)",
    ),
    Ok(
        "radDrive::DestroyDir(char const *)",
    ),
    Ok(
        "radDrive::DestroyFile(char const *)",
    ),
    Ok(
        "radDrive::FindFirst(char const *, IRadDrive::DirectoryInfo *, radFileDirHandle *, bool)",
    ),
    Ok(
        "radDrive::FindNext(radFileDirHandle *, IRadDrive::DirectoryInfo *)",
    ),
    Ok(
        "radDrive::FindClose(radFileDirHandle *)",
    ),
    Ok(
        "radDrive type_info function",
    ),
    Ok(
        "radDrive::AddRef(void)",
    ),
    Ok(
        "radDrive::Release(void)",
    ),
    Ok(
        "radBufferedReader::BufferedReadFile(radDrive *, unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "radDriveThread::DriveThreadEntry(void *)",
    ),
    Ok(
        "radDriveThread::radDriveThread(IRadThreadMutex *, int, unsigned int)",
    ),
    Ok(
        "radDriveThread::~radDriveThread(void)",
    ),
    Ok(
        "radDriveThread::Lock(void)",
    ),
    Ok(
        "radDriveThread::Unlock(void)",
    ),
    Ok(
        "radDriveThread::QueueRequest(radRequest *, radFilePriority, bool)",
    ),
    Ok(
        "radDriveThread::CancelRequests(void *, radFilePriority)",
    ),
    Ok(
        "radDriveThread::GetCurrentRequest(void) const",
    ),
    Ok(
        "radDriveThread::OutstandingRequests(void)",
    ),
    Ok(
        "radDriveThread::WaitGlobalError(radDrive *)",
    ),
    Ok(
        "radDriveThread::ResumeRequest(bool)",
    ),
    Ok(
        "radDriveThread::NextRequest(radFilePriority *)",
    ),
    Ok(
        "radDriveThread::SetCurrentRequest(radRequest *)",
    ),
    Ok(
        "radDriveThread type_info function",
    ),
    Ok(
        "radDriveThread::AddRef(void)",
    ),
    Ok(
        "radDriveThread::Release(void)",
    ),
    Ok(
        "radSignedReader::SignedReadFile(radDrive *, unsigned int, char const *, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "radSignedWriter::SignedWriteFile(radDrive *, unsigned int, char const *, unsigned int, void const *, unsigned int, unsigned int *, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "FileCache::FileCache(void)",
    ),
    Ok(
        "FileCache::~FileCache(void)",
    ),
    Ok(
        "FileCache::InitCache(unsigned char *, unsigned int, radMemorySpace)",
    ),
    Ok(
        "FileCache::DoInit(unsigned int, char const *)",
    ),
    Ok(
        "FileCache::GetCacheMemorySpace(void)",
    ),
    Ok(
        "FileCache::ShouldUseCache(unsigned int, unsigned int)",
    ),
    Ok(
        "FileCache::Read(radDrive *, unsigned int, unsigned int, unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
    ),
    Ok(
        "FileCache::InvalidateCache(unsigned int, unsigned int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PtrHashTable::PtrHashTable(unsigned int, unsigned int, unsigned int)",
    ),
    Ok(
        "PtrHashTable::~PtrHashTable(void)",
    ),
    Ok(
        "PtrHashTable::Remove(void *)",
    ),
    Ok(
        "PtrHashTable::RemoveAll(void)",
    ),
    Ok(
        "PtrHashTable::RePack(void)",
    ),
    Ok(
        "PtrHashTable::ReSize(unsigned int)",
    ),
    Ok(
        "PtrHashTable::Store(tUidUnaligned, void *)",
    ),
    Ok(
        "PtrHashTable::Iterator::Iterator(PtrHashTable *)",
    ),
    Ok(
        "PtrHashTable::Iterator::~Iterator(void)",
    ),
    Ok(
        "PtrHashTable::Iterator::PtrFirst(tUidUnaligned)",
    ),
    Ok(
        "PtrHashTable::Iterator::PtrNext(void)",
    ),
    Ok(
        "PtrHashTable::Iterator::FirstFree(tUidUnaligned)",
    ),
    Ok(
        "PtrHashTable::RawIterator::RawIterator(PtrHashTable *)",
    ),
    Ok(
        "PtrHashTable::RawIterator::~RawIterator(void)",
    ),
    Ok(
        "PtrHashTable::RawIterator::PtrFirst(void)",
    ),
    Ok(
        "PtrHashTable::RawIterator::PtrLast(void)",
    ),
    Ok(
        "PtrHashTable::RawIterator::PtrNext(void)",
    ),
    Ok(
        "PtrHashTable::RawIterator::PtrPrev(void)",
    ),
    Ok(
        "PtrHashTable::RawIterator::GetKey(void)",
    ),
    Ok(
        "PtrHashTable::GetMemoryAllocator(void) const",
    ),
    Ok(
        "PtrHashTable::SetInternalMemoryAllocator(int)",
    ),
    Ok(
        "PtrHashTable type_info function",
    ),
    Ok(
        "radLoadHashedStore::radLoadHashedStore(int)",
    ),
    Ok(
        "radLoadHashedStore::~radLoadHashedStore(void)",
    ),
    Ok(
        "radLoadHashedStore::Dump(radLoadStore *)",
    ),
    Ok(
        "radLoadHashedStore::Find(radLoadInventory::SafeCastBase &, tUidUnaligned)",
    ),
    Ok(
        "radLoadHashedStore::GetElementCount(void)",
    ),
    Ok(
        "radLoadHashedStore::Store(tUidUnaligned, IRefCount *)",
    ),
    Ok(
        "radLoadHashedStore::StoreHandlingCollisions(tUidUnaligned, IRefCount *)",
    ),
    Ok(
        "radLoadHashedStore::Remove(IRefCount *)",
    ),
    Ok(
        "radLoadHashedStore::RemoveAll(void)",
    ),
    Ok(
        "radLoadHashedStore::RePack(void)",
    ),
    Ok(
        "radLoadHashedStore::SetAutoRepack(bool)",
    ),
    Ok(
        "radLoadHashedStore::GetAutoRepack(void)",
    ),
    Ok(
        "radLoadHashedStore::SetAutoCollisionTest(bool)",
    ),
    Ok(
        "radLoadHashedStore::TestCollision(tUidUnaligned, IRefCount *)",
    ),
    Ok(
        "RefHashTable<IRefCount> type_info function",
    ),
    Ok(
        "radLoadHashedStore type_info function",
    ),
    Ok(
        "SafeCasterObj type_info function",
    ),
    Ok(
        "radLoadStore::~radLoadStore(void)",
    ),
    Ok(
        "radLoadStore::radLoadStore(void)",
    ),
    Ok(
        "SafeCasterObj::safe_cast(IRefCount *)",
    ),
    Ok(
        "RefHashTable<IRefCount>::~RefHashTable(void)",
    ),
    Ok(
        "radLoadStore type_info function",
    ),
    Ok(
        "HashTable<IRefCount> type_info function",
    ),
    Ok(
        "HashTable<IRefCount>::~HashTable(void)",
    ),
    Ok(
        "radLoadInitialize(radLoadInit *)",
    ),
    Ok(
        "radLoadInstance(void)",
    ),
    Ok(
        "radLoadManager::radLoadManager(radLoadInit &)",
    ),
    Ok(
        "radLoadManager::~radLoadManager(void)",
    ),
    Ok(
        "radLoadManager::AddCallback(radLoadCallback *)",
    ),
    Ok(
        "radLoadManager::AddDataLoader(radLoadDataLoader *, unsigned int)",
    ),
    Ok(
        "radLoadManager::AddFileLoader(radLoadFileLoader *, char const *)",
    ),
    Ok(
        "radLoadManager::Cancel(void)",
    ),
    Ok(
        "radLoadManager::GetDataLoader(unsigned int)",
    ),
    Ok(
        "radLoadManager::GetFileLoader(char const *)",
    ),
    Ok(
        "radLoadManager::InternalService(void)",
    ),
    Ok(
        "radLoadManager::IsLoadPending(void)",
    ),
    Ok(
        "radLoadManager::IsSyncLoading(void)",
    ),
    Ok(
        "radLoadManager::Load(radLoadOptions *, radLoadRequest **)",
    ),
    Ok(
        "radLoadManager::Load(char const *, radLoadRequest **)",
    ),
    Ok(
        "radLoadManager::LoadThreadEntry(void *)",
    ),
    Ok(
        "radLoadManager::PercentDone(void)",
    ),
    Ok(
        "radLoadManager::PrintStats(void)",
    ),
    Ok(
        "radLoadManager::RemoveDataLoader(unsigned int)",
    ),
    Ok(
        "radLoadManager::RemoveDataLoader(radLoadDataLoader *)",
    ),
    Ok(
        "radLoadManager::RemoveFileLoader(char const *)",
    ),
    Ok(
        "radLoadManager::RemoveFileLoader(radLoadFileLoader *)",
    ),
    Ok(
        "radLoadManager::Service(void)",
    ),
    Ok(
        "radLoadManager::SetSyncLoading(bool)",
    ),
    Ok(
        "radLoadManager::SwitchTasks(void)",
    ),
    Ok(
        "radLoadManager::Terminate(void)",
    ),
    Ok(
        "HashTable<radLoadDataLoader>::RawIterator::~RawIterator(void)",
    ),
    Ok(
        "HashTable<radLoadFileLoader>::RawIterator::~RawIterator(void)",
    ),
    Ok(
        "radLoadManager::QueueItem::~QueueItem(void)",
    ),
    Ok(
        "radLoadManager::QueueItem type_info function",
    ),
    Ok(
        "radLoadManager type_info function",
    ),
    Ok(
        "RefHashTable<radLoadFileLoader> type_info function",
    ),
    Ok(
        "RefHashTable<radLoadDataLoader> type_info function",
    ),
    Ok(
        "RefQueue<radLoadObject> type_info function",
    ),
    Ok(
        "RefQueue<radLoadCallback> type_info function",
    ),
    Ok(
        "ILoadManager::ILoadManager(void)",
    ),
    Ok(
        "HashTable<radLoadDataLoader>::Iterator::~Iterator(void)",
    ),
    Ok(
        "HashTable<radLoadFileLoader>::Iterator::~Iterator(void)",
    ),
    Ok(
        "RefQueue<radLoadCallback>::~RefQueue(void)",
    ),
    Ok(
        "RefQueue<radLoadObject>::~RefQueue(void)",
    ),
    Ok(
        "RefHashTable<radLoadDataLoader>::~RefHashTable(void)",
    ),
    Ok(
        "RefHashTable<radLoadFileLoader>::~RefHashTable(void)",
    ),
    Ok(
        "ILoadManager type_info function",
    ),
    Ok(
        "HashTable<radLoadFileLoader> type_info function",
    ),
    Ok(
        "HashTable<radLoadDataLoader> type_info function",
    ),
    Ok(
        "Queue<radLoadObject> type_info function",
    ),
    Ok(
        "Queue<radLoadCallback> type_info function",
    ),
    Ok(
        "HashTable<radLoadFileLoader>::~HashTable(void)",
    ),
    Ok(
        "HashTable<radLoadDataLoader>::~HashTable(void)",
    ),
    Ok(
        "Queue<radLoadObject>::~Queue(void)",
    ),
    Ok(
        "Queue<radLoadCallback>::~Queue(void)",
    ),
    Ok(
        "radLoadObject::radLoadObject(void)",
    ),
    Ok(
        "radLoadObject::~radLoadObject(void)",
    ),
    Ok(
        "radLoadObject::AddRef(void)",
    ),
    Ok(
        "radLoadObject::Release(void)",
    ),
    Ok(
        "radLoadObject::ReleaseVerified(void)",
    ),
    Ok(
        "radLoadObject::operator new(unsigned int)",
    ),
    Ok(
        "radLoadObject::operator new(unsigned int, int)",
    ),
    Ok(
        "radLoadObject::operator delete(void *)",
    ),
    Ok(
        "radLoadObject type_info function",
    ),
    Ok(
        "PtrQueue::PtrQueue(unsigned int)",
    ),
    Ok(
        "PtrQueue::~PtrQueue(void)",
    ),
    Ok(
        "PtrQueue::PtrPush(void *)",
    ),
    Ok(
        "PtrQueue::PtrPop(void)",
    ),
    Ok(
        "PtrQueue::GetMemoryAllocator(void) const",
    ),
    Ok(
        "PtrQueue::SetInternalMemoryAllocator(int)",
    ),
    Ok(
        "PtrQueue type_info function",
    ),
    Ok(
        "radLoadRequest::radLoadRequest(void)",
    ),
    Ok(
        "radLoadRequest::~radLoadRequest(void)",
    ),
    Ok(
        "radLoadRequest::Cancel(void)",
    ),
    Ok(
        "radLoadRequest::GetPercentDone(void)",
    ),
    Ok(
        "radLoadRequest::GetInventory(void)",
    ),
    Ok(
        "radLoadRequest::GetState(void)",
    ),
    Ok(
        "radLoadRequest::GetTotalLoadTime(void)",
    ),
    Ok(
        "radLoadRequest::GetTotalQueuedTime(void)",
    ),
    Ok(
        "radLoadRequest::IsComplete(void)",
    ),
    Ok(
        "radLoadUpdatableRequest::radLoadUpdatableRequest(void)",
    ),
    Ok(
        "radLoadUpdatableRequest::~radLoadUpdatableRequest(void)",
    ),
    Ok(
        "radLoadUpdatableRequest::GetPercentDone(void)",
    ),
    Ok(
        "radLoadUpdatableRequest::SetInventory(radLoadInventory *)",
    ),
    Ok(
        "radLoadUpdatableRequest::SetState(radLoadState)",
    ),
    Ok(
        "radLoadUpdatableRequest::SetStream(radLoadStream *)",
    ),
    Ok(
        "radLoadUpdatableRequest::GetStream(void)",
    ),
    Ok(
        "radLoadRequest type_info function",
    ),
    Ok(
        "radLoadUpdatableRequest type_info function",
    ),
    Ok(
        "radLoadCreateFileStream(radLoadStream **, char const *, radLoadUpdatableRequest *)",
    ),
    Ok(
        "radLoadStream::EndianSwap(void *, unsigned int, unsigned int)",
    ),
    Ok(
        "radLoadBaseStream::radLoadBaseStream(unsigned int, radLoadUpdatableRequest *)",
    ),
    Ok(
        "radLoadDataStream::radLoadDataStream(unsigned char *, unsigned int, bool, radLoadUpdatableRequest *)",
    ),
    Ok(
        "radLoadDataStream::~radLoadDataStream(void)",
    ),
    Ok(
        "radLoadDataStream::Read(void *, unsigned int, unsigned int)",
    ),
    Ok(
        "radLoadDataStream::GetMemory(void)",
    ),
    Ok(
        "radLoadFileStream::radLoadFileStream(char const *, radLoadUpdatableRequest *)",
    ),
    Ok(
        "radLoadFileStream::~radLoadFileStream(void)",
    ),
    Ok(
        "radLoadFileStream::Read(void *, unsigned int, unsigned int)",
    ),
    Ok(
        "radLoadFileStream::GetSize(void)",
    ),
    Ok(
        "radLoadFileStream::GetPosition(void)",
    ),
    Ok(
        "radLoadFileStream::Callback::OnFileOperationsComplete(void *)",
    ),
    Ok(
        "radLoadFileStream::WaitForCompletion(void)",
    ),
    Ok(
        "radLoadLoaderStream::~radLoadLoaderStream(void)",
    ),
    Ok(
        "radLoadBaseStream type_info function",
    ),
    Ok(
        "radLoadDataStream type_info function",
    ),
    Ok(
        "radLoadFileStream type_info function",
    ),
    Ok(
        "radLoadLoaderStream type_info function",
    ),
    Ok(
        "radLoadFileStream::Callback::~Callback(void)",
    ),
    Ok(
        "radLoadFileStream::Callback type_info function",
    ),
    Ok(
        "radLoadBaseStream::~radLoadBaseStream(void)",
    ),
    Ok(
        "radLoadBaseStream::GetSize(void)",
    ),
    Ok(
        "radLoadBaseStream::GetPosition(void)",
    ),
    Ok(
        "radLoadFileStream::Callback::AddRef(void)",
    ),
    Ok(
        "radLoadFileStream::Callback::Release(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "assert",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "sfmoreglue",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "sfp",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "sinit",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "smakebuf",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_lock",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_unlock",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "srefill",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "sread",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "swrite",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "sseek",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "sclose",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "swsetup",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "sflags",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "sfvwrite",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_update_mallinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "mcmp",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "mdiff",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "istream::istream(int, streambuf *, ostream *)",
    ),
    Ok(
        "skip_ws(streambuf *)",
    ),
    Ok(
        "istream::get(char &)",
    ),
    Ok(
        "istream::peek(void)",
    ),
    Ok(
        "istream::ignore(int, int)",
    ),
    Ok(
        "istream::read(char *, int)",
    ),
    Ok(
        "istream::sync(void)",
    ),
    Ok(
        "istream::seekg(long)",
    ),
    Ok(
        "istream::seekg(long, ios::seek_dir)",
    ),
    Ok(
        "istream::tellg(void)",
    ),
    Ok(
        "istream::operator>>(char &)",
    ),
    Ok(
        "istream::operator>>(char *)",
    ),
    Ok(
        "istream::operator>>(short &)",
    ),
    Ok(
        "istream::operator>>(unsigned short &)",
    ),
    Ok(
        "istream::operator>>(int &)",
    ),
    Ok(
        "istream::operator>>(unsigned int &)",
    ),
    Ok(
        "istream::operator>>(long &)",
    ),
    Ok(
        "istream::operator>>(unsigned long &)",
    ),
    Ok(
        "istream::operator>>(long long &)",
    ),
    Ok(
        "istream::operator>>(unsigned long long &)",
    ),
    Ok(
        "istream::operator>>(bool &)",
    ),
    Ok(
        "istream::operator>>(long double &)",
    ),
    Ok(
        "istream::operator>>(double &)",
    ),
    Ok(
        "istream::operator>>(float &)",
    ),
    Ok(
        "istream::operator>>(streambuf *)",
    ),
    Ok(
        "ostream::operator<<(char)",
    ),
    Ok(
        "ostream::operator<<(int)",
    ),
    Ok(
        "ostream::operator<<(unsigned int)",
    ),
    Ok(
        "ostream::operator<<(long)",
    ),
    Ok(
        "ostream::operator<<(unsigned long)",
    ),
    Ok(
        "ostream::operator<<(long long)",
    ),
    Ok(
        "ostream::operator<<(unsigned long long)",
    ),
    Ok(
        "ostream::operator<<(double)",
    ),
    Ok(
        "ostream::operator<<(char const *)",
    ),
    Ok(
        "ostream::operator<<(streambuf *)",
    ),
    Ok(
        "ostream::ostream(int, streambuf *, ostream *)",
    ),
    Ok(
        "ostream::seekp(long)",
    ),
    Ok(
        "ostream::seekp(long, ios::seek_dir)",
    ),
    Ok(
        "ostream::tellp(void)",
    ),
    Ok(
        "ostream::flush(void)",
    ),
    Ok(
        "flush(ostream &)",
    ),
    Ok(
        "ws(istream &)",
    ),
    Ok(
        "istream::_skip_ws(void)",
    ),
    Ok(
        "ends(ostream &)",
    ),
    Ok(
        "endl(ostream &)",
    ),
    Ok(
        "lock(istream &)",
    ),
    Ok(
        "unlock(istream &)",
    ),
    Ok(
        "lock(ostream &)",
    ),
    Ok(
        "unlock(ostream &)",
    ),
    Ok(
        "ostream::write(char const *, int)",
    ),
    Ok(
        "ostream::do_osfx(void)",
    ),
    Ok(
        "iostream::iostream(int, streambuf *, ostream *)",
    ),
    Ok(
        "ios::close(void)",
    ),
    Ok(
        "istream::skip(int)",
    ),
    Ok(
        "oct(ios &)",
    ),
    Ok(
        "hex(ios &)",
    ),
    Ok(
        "dec(ios &)",
    ),
    Ok(
        "_IO_ostream_withassign::operator=(_IO_ostream_withassign &)",
    ),
    Ok(
        "_IO_ostream_withassign type_info function",
    ),
    Ok(
        "_IO_ostream_withassign::~_IO_ostream_withassign(void)",
    ),
    Ok(
        "_IO_istream_withassign::operator=(_IO_istream_withassign &)",
    ),
    Ok(
        "_IO_istream_withassign type_info function",
    ),
    Ok(
        "_IO_istream_withassign::~_IO_istream_withassign(void)",
    ),
    Ok(
        "iostream::iostream(int)",
    ),
    Ok(
        "iostream type_info function",
    ),
    Ok(
        "iostream::~iostream(void)",
    ),
    Ok(
        "istream::operator>>(istream &(*)(istream &))",
    ),
    Ok(
        "istream::operator>>(ios &(*)(ios &))",
    ),
    Ok(
        "istream::operator>>(signed char &)",
    ),
    Ok(
        "istream::operator>>(unsigned char &)",
    ),
    Ok(
        "istream::operator>>(signed char *)",
    ),
    Ok(
        "istream::operator>>(unsigned char *)",
    ),
    Ok(
        "istream::istreambuf(void) const",
    ),
    Ok(
        "istream::unget(char)",
    ),
    Ok(
        "istream::unget(void)",
    ),
    Ok(
        "istream::putback(char)",
    ),
    Ok(
        "istream::gcount(void)",
    ),
    Ok(
        "istream::get(void)",
    ),
    Ok(
        "istream::isfx(void)",
    ),
    Ok(
        "istream::ipfx1(void)",
    ),
    Ok(
        "istream::ipfx0(void)",
    ),
    Ok(
        "istream::ipfx(int)",
    ),
    Ok(
        "istream::read(void *, int)",
    ),
    Ok(
        "istream::read(signed char *, int)",
    ),
    Ok(
        "istream::read(unsigned char *, int)",
    ),
    Ok(
        "istream::getline(signed char *, int, char)",
    ),
    Ok(
        "istream::get(signed char *, int, char)",
    ),
    Ok(
        "istream::get(signed char &)",
    ),
    Ok(
        "istream::getline(unsigned char *, int, char)",
    ),
    Ok(
        "istream::get(unsigned char &)",
    ),
    Ok(
        "istream::get(unsigned char *, int, char)",
    ),
    Ok(
        "istream::istream(int)",
    ),
    Ok(
        "istream type_info function",
    ),
    Ok(
        "istream::~istream(void)",
    ),
    Ok(
        "ostream::ostreambuf(void) const",
    ),
    Ok(
        "ostream::operator<<(ios &(*)(ios &))",
    ),
    Ok(
        "ostream::operator<<(ostream &(*)(ostream &))",
    ),
    Ok(
        "ostream::operator<<(long double)",
    ),
    Ok(
        "ostream::operator<<(float)",
    ),
    Ok(
        "ostream::operator<<(bool)",
    ),
    Ok(
        "ostream::operator<<(unsigned short)",
    ),
    Ok(
        "ostream::operator<<(short)",
    ),
    Ok(
        "ostream::operator<<(signed char const *)",
    ),
    Ok(
        "ostream::operator<<(unsigned char const *)",
    ),
    Ok(
        "ostream::operator<<(signed char)",
    ),
    Ok(
        "ostream::operator<<(unsigned char)",
    ),
    Ok(
        "ostream::write(void const *, int)",
    ),
    Ok(
        "ostream::write(signed char const *, int)",
    ),
    Ok(
        "ostream::write(unsigned char const *, int)",
    ),
    Ok(
        "ostream::put(signed char)",
    ),
    Ok(
        "ostream::put(unsigned char)",
    ),
    Ok(
        "ostream::put(char)",
    ),
    Ok(
        "ostream::osfx(void)",
    ),
    Ok(
        "ostream::opfx(void)",
    ),
    Ok(
        "ostream::ostream(int)",
    ),
    Ok(
        "ostream type_info function",
    ),
    Ok(
        "ostream::~ostream(void)",
    ),
    Ok(
        "istream::getline(char *, int, char)",
    ),
    Ok(
        "istream::get(char *, int, char)",
    ),
    Ok(
        "_sb_readline(streambuf *, long &, char)",
    ),
    Ok(
        "istream::gets(char **, char)",
    ),
    Ok(
        "istream::scan(char const *, ...)",
    ),
    Ok(
        "istream::vscan(char const *, char *)",
    ),
    Ok(
        "streambuf::vscan(char const *, char *, ios *)",
    ),
    Ok(
        "streambuf::scan(char const *, ...)",
    ),
    Ok(
        "ios::sync_with_stdio(int)",
    ),
    Ok(
        "streambuf::_un_link(void)",
    ),
    Ok(
        "streambuf::_link_in(void)",
    ),
    Ok(
        "streambuf::switch_to_get_mode(void)",
    ),
    Ok(
        "streambuf::free_backup_area(void)",
    ),
    Ok(
        "__overflow(streambuf *, int)",
    ),
    Ok(
        "streambuf::underflow(void)",
    ),
    Ok(
        "streambuf::uflow(void)",
    ),
    Ok(
        "streambuf::overflow(int)",
    ),
    Ok(
        "streambuf::xsputn(char const *, long)",
    ),
    Ok(
        "streambuf::xsgetn(char *, long)",
    ),
    Ok(
        "streambuf::ignore(int)",
    ),
    Ok(
        "streambuf::sync(void)",
    ),
    Ok(
        "streambuf::pbackfail(int)",
    ),
    Ok(
        "streambuf::setbuf(char *, int)",
    ),
    Ok(
        "streambuf::seekpos(long, int)",
    ),
    Ok(
        "streambuf::sseekpos(long, int)",
    ),
    Ok(
        "streambuf::setb(char *, char *, int)",
    ),
    Ok(
        "streambuf::doallocate(void)",
    ),
    Ok(
        "streambuf::doallocbuf(void)",
    ),
    Ok(
        "streambuf::streambuf(int)",
    ),
    Ok(
        "streambuf::~streambuf(void)",
    ),
    Ok(
        "streambuf::seekoff(long, ios::seek_dir, int)",
    ),
    Ok(
        "streambuf::sseekoff(long, ios::seek_dir, int)",
    ),
    Ok(
        "streambuf::sputbackc(char)",
    ),
    Ok(
        "streambuf::sungetc(void)",
    ),
    Ok(
        "streambuf::get_column(void)",
    ),
    Ok(
        "streambuf::set_column(int)",
    ),
    Ok(
        "streambuf::flush_all(void)",
    ),
    Ok(
        "streambuf::flush_all_linebuffered(void)",
    ),
    Ok(
        "streambuf::sys_stat(void *)",
    ),
    Ok(
        "streambuf::sys_read(char *, long)",
    ),
    Ok(
        "streambuf::sys_write(char const *, long)",
    ),
    Ok(
        "streambuf::sys_seek(long, ios::seek_dir)",
    ),
    Ok(
        "streambuf::sys_close(void)",
    ),
    Ok(
        "streammarker::streammarker(streambuf *)",
    ),
    Ok(
        "streammarker::~streammarker(void)",
    ),
    Ok(
        "streammarker::delta(streammarker &)",
    ),
    Ok(
        "streammarker::delta(void)",
    ),
    Ok(
        "streambuf::seekmark(streammarker &, int)",
    ),
    Ok(
        "streambuf::unsave_markers(void)",
    ),
    Ok(
        "ios::readable(void)",
    ),
    Ok(
        "ios::writable(void)",
    ),
    Ok(
        "ios::is_open(void)",
    ),
    Ok(
        "global destructors keyed to streambuf::_un_link(void)",
    ),
    Ok(
        "global constructors keyed to streambuf::_un_link(void)",
    ),
    Ok(
        "ios::~ios(void)",
    ),
    Ok(
        "ios::ios(streambuf *, ostream *)",
    ),
    Ok(
        "ios::init(streambuf *, ostream *)",
    ),
    Ok(
        "filebuf::file_ptr(void)",
    ),
    Ok(
        "filebuf::cur_ptr(void)",
    ),
    Ok(
        "filebuf::is_reading(void)",
    ),
    Ok(
        "filebuf::fd(void) const",
    ),
    Ok(
        "filebuf::is_open(void) const",
    ),
    Ok(
        "filebuf type_info function",
    ),
    Ok(
        "streambuf::stossc(void)",
    ),
    Ok(
        "streambuf::snextc(void)",
    ),
    Ok(
        "streambuf::sgetc(void)",
    ),
    Ok(
        "streambuf::sbumpc(void)",
    ),
    Ok(
        "streambuf::sputc(int)",
    ),
    Ok(
        "streambuf::sgetn(char *, long)",
    ),
    Ok(
        "streambuf::padn(char, long)",
    ),
    Ok(
        "streambuf::sputn(char const *, long)",
    ),
    Ok(
        "streambuf::out_waiting(void)",
    ),
    Ok(
        "streambuf::in_avail(void)",
    ),
    Ok(
        "streambuf::allocbuf(void)",
    ),
    Ok(
        "streambuf::allocate(void)",
    ),
    Ok(
        "streambuf::linebuffered(int)",
    ),
    Ok(
        "streambuf::unbuffered(int)",
    ),
    Ok(
        "streambuf::linebuffered(void)",
    ),
    Ok(
        "streambuf::unbuffered(void)",
    ),
    Ok(
        "streambuf::pubseekpos(long, int)",
    ),
    Ok(
        "streambuf::pubseekoff(long, ios::seek_dir, int)",
    ),
    Ok(
        "streambuf::put_mode(void)",
    ),
    Ok(
        "streambuf::have_markers(void)",
    ),
    Ok(
        "streambuf::have_backup(void)",
    ),
    Ok(
        "streambuf::eNptr(void)",
    ),
    Ok(
        "streambuf::Nbase(void)",
    ),
    Ok(
        "streambuf::eBptr(void)",
    ),
    Ok(
        "streambuf::Bptr(void)",
    ),
    Ok(
        "streambuf::Bbase(void)",
    ),
    Ok(
        "streambuf::eGptr(void)",
    ),
    Ok(
        "streambuf::Gbase(void)",
    ),
    Ok(
        "streambuf::in_backup(void)",
    ),
    Ok(
        "streambuf::shortbuf(void)",
    ),
    Ok(
        "streambuf::setg(char *, char *, char *)",
    ),
    Ok(
        "streambuf::setp(char *, char *)",
    ),
    Ok(
        "streambuf::pbump(int)",
    ),
    Ok(
        "streambuf::gbump(int)",
    ),
    Ok(
        "streambuf::xsetflags(int, int)",
    ),
    Ok(
        "streambuf::xsetflags(int)",
    ),
    Ok(
        "streambuf::xflags(int)",
    ),
    Ok(
        "streambuf::xflags(void)",
    ),
    Ok(
        "streambuf::xput_char(char)",
    ),
    Ok(
        "streambuf::blen(void) const",
    ),
    Ok(
        "streambuf::ebuf(void) const",
    ),
    Ok(
        "streambuf::base(void) const",
    ),
    Ok(
        "streambuf::eback(void) const",
    ),
    Ok(
        "streambuf::pbase(void) const",
    ),
    Ok(
        "streambuf::epptr(void) const",
    ),
    Ok(
        "streambuf::egptr(void) const",
    ),
    Ok(
        "streambuf::pptr(void) const",
    ),
    Ok(
        "streambuf::gptr(void) const",
    ),
    Ok(
        "streambuf::xchain(void)",
    ),
    Ok(
        "streambuf::_vtable(void)",
    ),
    Ok(
        "streambuf type_info function",
    ),
    Ok(
        "streammarker::saving(void)",
    ),
    Ok(
        "streammarker::set_offset(int)",
    ),
    Ok(
        "ios::Init::Init(void)",
    ),
    Ok(
        "ios::unset(state_value)",
    ),
    Ok(
        "ios::sync_with_stdio(void)",
    ),
    Ok(
        "ios::rdbuf(streambuf *)",
    ),
    Ok(
        "ios::rdbuf(void) const",
    ),
    Ok(
        "ios::exceptions(int)",
    ),
    Ok(
        "ios::exceptions(void) const",
    ),
    Ok(
        "ios::operator!(void) const",
    ),
    Ok(
        "ios::operator void *(void) const",
    ),
    Ok(
        "ios::rdstate(void) const",
    ),
    Ok(
        "ios::bad(void) const",
    ),
    Ok(
        "ios::fail(void) const",
    ),
    Ok(
        "ios::eof(void) const",
    ),
    Ok(
        "ios::good(void) const",
    ),
    Ok(
        "ios::setstate(int)",
    ),
    Ok(
        "ios::set(int)",
    ),
    Ok(
        "ios::clear(int)",
    ),
    Ok(
        "ios::_throw_failure(void) const",
    ),
    Ok(
        "ios::width(int)",
    ),
    Ok(
        "ios::width(void) const",
    ),
    Ok(
        "ios::unsetf(unsigned long)",
    ),
    Ok(
        "ios::setf(unsigned long, unsigned long)",
    ),
    Ok(
        "ios::setf(unsigned long)",
    ),
    Ok(
        "ios::precision(int)",
    ),
    Ok(
        "ios::precision(void) const",
    ),
    Ok(
        "ios::flags(unsigned long)",
    ),
    Ok(
        "ios::flags(void) const",
    ),
    Ok(
        "ios::fill(short)",
    ),
    Ok(
        "ios::fill(void) const",
    ),
    Ok(
        "ios::tie(ostream *)",
    ),
    Ok(
        "ios::tie(void) const",
    ),
    Ok(
        "ios type_info function",
    ),
    Ok(
        "_ios_fields type_info function",
    ),
    Ok(
        "_IO_FILE type_info function",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "overflow",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "underflow",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "uflow",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "filebuf::init(void)",
    ),
    Ok(
        "filebuf::filebuf(void)",
    ),
    Ok(
        "filebuf::filebuf(int)",
    ),
    Ok(
        "filebuf::filebuf(int, char *, int)",
    ),
    Ok(
        "filebuf::~filebuf(void)",
    ),
    Ok(
        "filebuf::open(char const *, int, int)",
    ),
    Ok(
        "filebuf::open(char const *, char const *)",
    ),
    Ok(
        "filebuf::attach(int)",
    ),
    Ok(
        "filebuf::setbuf(char *, int)",
    ),
    Ok(
        "filebuf::doallocate(void)",
    ),
    Ok(
        "filebuf::overflow(int)",
    ),
    Ok(
        "filebuf::underflow(void)",
    ),
    Ok(
        "filebuf::sync(void)",
    ),
    Ok(
        "filebuf::seekoff(long, ios::seek_dir, int)",
    ),
    Ok(
        "filebuf::close(void)",
    ),
    Ok(
        "filebuf::sys_read(char *, long)",
    ),
    Ok(
        "filebuf::sys_seek(long, ios::seek_dir)",
    ),
    Ok(
        "filebuf::sys_write(char const *, long)",
    ),
    Ok(
        "filebuf::sys_stat(void *)",
    ),
    Ok(
        "filebuf::sys_close(void)",
    ),
    Ok(
        "filebuf::xsputn(char const *, long)",
    ),
    Ok(
        "filebuf::xsgetn(char *, long)",
    ),
    Ok(
        "_IO_istream_withassign::operator=(istream &)",
    ),
    Ok(
        "_IO_ostream_withassign::operator=(ostream &)",
    ),
    Ok(
        "global constructors keyed to _IO_stdin_",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "stdiobuf::stdiobuf(__sFILE *)",
    ),
    Ok(
        "stdiobuf::~stdiobuf(void)",
    ),
    Ok(
        "stdiobuf::sys_read(char *, long)",
    ),
    Ok(
        "stdiobuf::sys_write(char const *, long)",
    ),
    Ok(
        "stdiobuf::sys_seek(long, ios::seek_dir)",
    ),
    Ok(
        "stdiobuf::sys_close(void)",
    ),
    Ok(
        "stdiobuf::sync(void)",
    ),
    Ok(
        "stdiobuf::overflow(int)",
    ),
    Ok(
        "stdiobuf::xsputn(char const *, long)",
    ),
    Ok(
        "stdiobuf::buffered(int)",
    ),
    Ok(
        "ostdiostream::buffered(int)",
    ),
    Ok(
        "ostdiostream::buffered(void) const",
    ),
    Ok(
        "ostdiostream::rdbuf(void)",
    ),
    Ok(
        "ostdiostream::ostdiostream(int, __sFILE *)",
    ),
    Ok(
        "ostdiostream type_info function",
    ),
    Ok(
        "ostdiostream::~ostdiostream(void)",
    ),
    Ok(
        "istdiostream::buffered(int)",
    ),
    Ok(
        "istdiostream::buffered(void) const",
    ),
    Ok(
        "istdiostream::rdbuf(void)",
    ),
    Ok(
        "istdiostream::istdiostream(int, __sFILE *)",
    ),
    Ok(
        "istdiostream type_info function",
    ),
    Ok(
        "istdiostream::~istdiostream(void)",
    ),
    Ok(
        "stdiobuf::buffered(void) const",
    ),
    Ok(
        "stdiobuf::stdiofile(void) const",
    ),
    Ok(
        "stdiobuf type_info function",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_pow",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_rem_pio2",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_sqrt",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_acosf",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_asinf",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_atan2f",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_expf",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_fmodf",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_logf",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_powf",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_rem_pio2f",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_sqrtf",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "kernel_cos",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "kernel_rem_pio2",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "kernel_sin",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "kernel_cosf",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "kernel_rem_pio2f",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "kernel_sinf",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "kernel_tanf",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "errno",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "srget",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "do_global_ctors",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "main",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "divdi3",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "default_terminate",
        ),
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "erminate",
        ),
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "hrow_type_match",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "empty",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "get_eh_context",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "get_eh_info",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "get_dynamic_handler_chain",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "sjthrow",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "sjpopnthrow",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "eh_rtime_match",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "get_eh_table_version",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "get_eh_table_language",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "unwinding_cleanup",
        ),
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "hrow",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "rethrow",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "fixdfdi",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "fixunsdfdi",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "floatdidf",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "moddi3",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "muldi3",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "pure_virtual",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "udivdi3",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "umoddi3",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "pack_d",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "unpack_d",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "fpcmp_parts_d",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "make_dp",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "terminate(void)",
    ),
    Ok(
        "__default_unexpected(void)",
    ),
    Ok(
        "set_terminate(void (*)(void))",
    ),
    Ok(
        "set_unexpected(void (*)(void))",
    ),
    Ok(
        "unexpected(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "cp_exception_info",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "cp_eh_info",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "start_cp_handler",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "eh_alloc",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "eh_free",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "cplus_type_matcher",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "cp_push_exception",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "cp_pop_exception",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "uncatch_exception",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "check_eh_spec",
        ),
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "hrow_bad_cast",
        ),
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "hrow_bad_typeid",
        ),
    ),
    Ok(
        "uncaught_exception(void)",
    ),
    Ok(
        "exception::what(void) const",
    ),
    Ok(
        "bad_exception::~bad_exception(void)",
    ),
    Ok(
        "bad_exception::bad_exception(void)",
    ),
    Ok(
        "bad_exception type_info function",
    ),
    Ok(
        "exception::~exception(void)",
    ),
    Ok(
        "exception::exception(void)",
    ),
    Ok(
        "exception type_info function",
    ),
    Err(
        InvalidSpecialMethod(
            "pack_f",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "unpack_f",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "make_fp",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "register_frame_info_table",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "deregister_frame_info",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "frame_state_for",
        ),
    ),
    Ok(
        "type_info::~type_info(void)",
    ),
    Ok(
        "type_info::operator==(type_info const &) const",
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_class",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_si",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_user",
        ),
    ),
    Ok(
        "__user_type_info::dcast(type_info const &, int, void *, type_info const *, void *) const",
    ),
    Ok(
        "__si_type_info::dcast(type_info const &, int, void *, type_info const *, void *) const",
    ),
    Ok(
        "__class_type_info::dcast(type_info const &, int, void *, type_info const *, void *) const",
    ),
    Ok(
        "__class_type_info::__class_type_info(char const *, __class_type_info::base_info const *, unsigned int)",
    ),
    Ok(
        "__class_type_info type_info function",
    ),
    Ok(
        "__class_type_info::~__class_type_info(void)",
    ),
    Ok(
        "__si_type_info::__si_type_info(char const *, __user_type_info const &)",
    ),
    Ok(
        "__si_type_info type_info function",
    ),
    Ok(
        "__si_type_info::~__si_type_info(void)",
    ),
    Ok(
        "__user_type_info::__user_type_info(char const *)",
    ),
    Ok(
        "__user_type_info type_info function",
    ),
    Ok(
        "__user_type_info::~__user_type_info(void)",
    ),
    Ok(
        "bad_typeid::~bad_typeid(void)",
    ),
    Ok(
        "bad_typeid::bad_typeid(void)",
    ),
    Ok(
        "bad_typeid type_info function",
    ),
    Ok(
        "bad_cast::~bad_cast(void)",
    ),
    Ok(
        "bad_cast::bad_cast(void)",
    ),
    Ok(
        "bad_cast type_info function",
    ),
    Ok(
        "type_info::operator!=(type_info const &) const",
    ),
    Ok(
        "type_info::name(void) const",
    ),
    Ok(
        "type_info::type_info(char const *)",
    ),
    Ok(
        "type_info type_info function",
    ),
    Ok(
        "type_info::before(type_info const &) const",
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "hrow_type_match_rtti",
        ),
    ),
    Ok(
        "__is_pointer(void *)",
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_ptr",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_attr",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_func",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_ptmf",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_ptmd",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_array",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "dynamic_cast",
        ),
    ),
    Ok(
        "void type_info function",
    ),
    Ok(
        "long long type_info function",
    ),
    Ok(
        "long type_info function",
    ),
    Ok(
        "int type_info function",
    ),
    Ok(
        "short type_info function",
    ),
    Ok(
        "bool type_info function",
    ),
    Ok(
        "char type_info function",
    ),
    Ok(
        "wchar_t type_info function",
    ),
    Ok(
        "long double type_info function",
    ),
    Ok(
        "double type_info function",
    ),
    Ok(
        "float type_info function",
    ),
    Ok(
        "unsigned int type_info function",
    ),
    Ok(
        "unsigned long type_info function",
    ),
    Ok(
        "unsigned long long type_info function",
    ),
    Ok(
        "unsigned short type_info function",
    ),
    Ok(
        "unsigned char type_info function",
    ),
    Ok(
        "signed char type_info function",
    ),
    Ok(
        "__array_type_info type_info function",
    ),
    Ok(
        "__array_type_info::~__array_type_info(void)",
    ),
    Ok(
        "__ptmd_type_info type_info function",
    ),
    Ok(
        "__ptmd_type_info::~__ptmd_type_info(void)",
    ),
    Ok(
        "__ptmf_type_info type_info function",
    ),
    Ok(
        "__ptmf_type_info::~__ptmf_type_info(void)",
    ),
    Ok(
        "__func_type_info type_info function",
    ),
    Ok(
        "__func_type_info::~__func_type_info(void)",
    ),
    Ok(
        "__builtin_type_info type_info function",
    ),
    Ok(
        "__builtin_type_info::~__builtin_type_info(void)",
    ),
    Ok(
        "__attr_type_info type_info function",
    ),
    Ok(
        "__attr_type_info::~__attr_type_info(void)",
    ),
    Ok(
        "__pointer_type_info type_info function",
    ),
    Ok(
        "__pointer_type_info::~__pointer_type_info(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::sbEnabled",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::CarSelectionInfo::sNumUsedSlots",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::sCallback",
    ),
    Ok(
        "ActionButton::CollectibleFood::sfSmallTurboGain",
    ),
    Ok(
        "ActionButton::CollectibleFood::sfLargeTurboGain",
    ),
    Ok(
        "ActionButton::CollectibleCard::mAnimatedCollectionThing",
    ),
    Ok(
        "ActionButton::CollectibleCard::mCollectibleCardCount",
    ),
    Ok(
        "ActionButton::WrenchIcon::mWrenchCount",
    ),
    Ok(
        "ActionButton::WrenchIcon::mAnimatedCollectionThing",
    ),
    Ok(
        "ActionButton::NitroIcon::mNitroCount",
    ),
    Ok(
        "ActionButton::NitroIcon::mAnimatedCollectionThing",
    ),
    Ok(
        "ActionButton::PurchaseReward::sbEnabled",
    ),
    Ok(
        "ActionButton::theListOfActions",
    ),
    Ok(
        "ActionButtonManager::spActionButtonManager",
    ),
    Ok(
        "CharacterAi::State::sMemoryPool",
    ),
    Ok(
        "ActorManager::ActorRemovalRangeSqr",
    ),
    Ok(
        "ActorManager::sp_Instance",
    ),
    Ok(
        "FlyingActor::s_Randomizer",
    ),
    Ok(
        "FlyingActor::s_RandomizerSeeded",
    ),
    Ok(
        "AttackBehaviour::s_Randomizer",
    ),
    Ok(
        "AttackBehaviour::s_RandomizerSeeded",
    ),
    Ok(
        "EvasionBehaviour::s_Randomizer",
    ),
    Ok(
        "EvasionBehaviour::s_RandomizerSeeded",
    ),
    Ok(
        "Projectile::s_Speed",
    ),
    Ok(
        "ActorDSG::s_IDCounter",
    ),
    Ok(
        "UFOAttackBehaviour::s_Randomizer",
    ),
    Ok(
        "UFOAttackBehaviour::s_RandomizerSeeded",
    ),
    Ok(
        "basic_string<char, string_char_traits<char>, __default_alloc_template<false, 0> >::nilRep",
    ),
    Ok(
        "__malloc_alloc_template<0>::__malloc_alloc_oom_handler",
    ),
    Ok(
        "__default_alloc_template<false, 0>::_S_free_list",
    ),
    Ok(
        "__default_alloc_template<false, 0>::_S_start_free",
    ),
    Ok(
        "__default_alloc_template<false, 0>::_S_end_free",
    ),
    Ok(
        "__default_alloc_template<false, 0>::_S_heap_size",
    ),
    Ok(
        "Action::sMemoryPool",
    ),
    Ok(
        "WalkerLocomotionAction::sRandom",
    ),
    Ok(
        "WalkerLocomotionAction::sRandomSeeded",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "VehicleAIRender::spInstance",
    ),
    Ok(
        "ATCManager::spInstance",
    ),
    Ok(
        "ConversationCam::sInstCount",
    ),
    Ok(
        "SuperCam::s_secondaryControllerID",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SuperCamCentral::mTotalSuperCamCentrals",
    ),
    Ok(
        "SuperCamCentral::CAMERA_INVENTORY_SECTION",
    ),
    Ok(
        "SuperCamCentral::mFollowCamDataChunks",
    ),
    Ok(
        "SuperCamCentral::mNumUsedFDC",
    ),
    Ok(
        "SuperCamManager::mspInstance",
    ),
    Ok(
        "SuperSprintCam::mSprintCamCount",
    ),
    Ok(
        "CardGallery::spInstance",
    ),
    Ok(
        "CheatInputSystem::spInstance",
    ),
    Ok(
        "CheatInputSystem::s_cheatsEnabled",
    ),
    Ok(
        "CheatsDB::s_maxNumPossibleCheats",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Console::spInstance",
    ),
    Ok(
        "Console::FunctionTableEntry::sMemoryPool",
    ),
    Ok(
        "Console::AliasTableEntry::sMemoryPool",
    ),
    Ok(
        "BootupContext::spInstance",
    ),
    Ok(
        "EntryContext::spInstance",
    ),
    Ok(
        "ExitContext::spInstance",
    ),
    Ok(
        "FrontEndContext::spInstance",
    ),
    Ok(
        "PauseContext::spInstance",
    ),
    Ok(
        "LoadingGameplayContext::spInstance",
    ),
    Ok(
        "GameplayContext::spInstance",
    ),
    Ok(
        "LoadingDemoContext::spInstance",
    ),
    Ok(
        "DemoContext::spInstance",
    ),
    Ok(
        "GameDataManager::spInstance",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PersistentWorldManager::spInstance",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MemoryCardManager::spInstance",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EventManager::spInstance",
    ),
    Ok(
        "GameFlow::spInstance",
    ),
    Ok(
        "Button::mTickCount",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "InputManager::spInstance",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "InteriorManager::spInstance",
    ),
    Ok(
        "InteriorManager::sRandom",
    ),
    Ok(
        "InteriorManager::sRandomSeeded",
    ),
    Ok(
        "InteriorManager::sPersistGagIndex",
    ),
    Ok(
        "LoadingManager::spInstance",
    ),
    Ok(
        "LocatorLoader::msZoneNameCount",
    ),
    Ok(
        "CommandLineOptions::sOptions",
    ),
    Ok(
        "CommandLineOptions::s_defaultLevel",
    ),
    Ok(
        "CommandLineOptions::s_defaultMission",
    ),
    Ok(
        "Game::spInstance",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PS2Platform::s_MainCement",
    ),
    Ok(
        "PS2Platform::spInstance",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "HeapManager::s_Instance",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TriggerVolumeTracker::spInstance",
    ),
    Ok(
        "TriggerVolumeTracker::sP1",
    ),
    Ok(
        "TriggerVolumeTracker::sP2",
    ),
    Ok(
        "TriggerVolumeTracker::sP3",
    ),
    Ok(
        "TriggerVolumeTracker::sP4",
    ),
    Ok(
        "GameplayManager::spInstance",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MissionManager::spInstance",
    ),
    Ok(
        "MissionScriptLoader::spInstance",
    ),
    Ok(
        "AnimatedIcon::sAnimatedIconPool",
    ),
    Ok(
        "AnimatedIcon::sNumAllocated",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CharacterSheetManager::spInstance",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RewardsManager::spInstance",
    ),
    Ok(
        "MissionCondition::mFailedHitNRun",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PresentationManager::spInstance",
    ),
    Ok(
        "TutorialManager::spInstance",
    ),
    Ok(
        "CGuiManager::s_memcardCheckState",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CGuiScreen::s_p3dMultiController",
    ),
    Ok(
        "CGuiScreen::s_numIrisFrames",
    ),
    Ok(
        "CGuiScreenLoadSave::s_forceGotoMemoryCardScreen",
    ),
    Ok(
        "CGuiScreenMemoryCard::s_currentMemoryCardSlot",
    ),
    Ok(
        "CGuiScreenMessage::s_ControllerDisconnectedPort",
    ),
    Ok(
        "CGuiScreenMessage::s_messageIndex",
    ),
    Ok(
        "CGuiScreenMessage::s_pMessageCallback",
    ),
    Ok(
        "CGuiScreenPrompt::s_messageIndex",
    ),
    Ok(
        "CGuiScreenPrompt::s_numResponses",
    ),
    Ok(
        "CGuiScreenPrompt::s_pPromptCallback",
    ),
    Ok(
        "CGuiScreenPrompt::s_defaultToNo",
    ),
    Ok(
        "CGuiSystem::spInstance",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CGuiTextBible::s_textBible",
    ),
    Ok(
        "CGuiTextBible::s_currentLanguage",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CGuiScreenAutoLoad::s_autoLoadGameSlot",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CGuiScreenIntroTransition::s_introTransitionPlayed",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CGuiScreenSplash::s_demoPlaybackToggle",
    ),
    Ok(
        "CGuiScreenViewCredits::s_totalTranslateY",
    ),
    Ok(
        "CGuiScreenViewCredits::s_numPixelsPerLine",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CGuiScreenMiniHud::s_pausedControllerID",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CGuiManagerInGame::s_currentHUD",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CGuiScreenHud::s_numCoinsDisplay",
    ),
    Ok(
        "CGuiScreenIrisWipe::g_IsIrisClosed",
    ),
    Ok(
        "CGuiScreenLetterBox::m_enableReopen",
    ),
    Ok(
        "CGuiScreenLetterBox::m_forceOpen",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CGuiScreenLetterBox::s_suppressAcceptCancelButtons",
    ),
    Ok(
        "CGuiScreenMissionBase::s_AnimatedBitmapName",
    ),
    Ok(
        "CGuiScreenMissionBase::s_AnimatedBitmapShortName",
    ),
    Ok(
        "CGuiScreenMissionBase::s_AnimatedBitmapSprite",
    ),
    Ok(
        "CGuiScreenMissionBase::s_BitmapLoadPending",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CGuiScreenPhoneBooth::s_currentDebugVehicleSelection",
    ),
    Ok(
        "CGuiScreenPhoneBooth::s_currentTeleportSelection",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CHudMap::s_registeredIcons",
    ),
    Ok(
        "CHudMap::s_numRegisteredIcons",
    ),
    Ok(
        "CHudMap::s_fpIconID",
    ),
    Ok(
        "ISpatialProxyAA::msIntersectionEpsilon",
    ),
    Ok(
        "DSGFactory::mspInstance",
    ),
    Ok(
        "IEntityDSG::msDeletionsSafe",
    ),
    Ok(
        "IntersectDSG::mspIndexData",
    ),
    Ok(
        "IntersectDSG::mspTerrainData",
    ),
    Ok(
        "IntersectDSG::mspVertexData",
    ),
    Ok(
        "IntersectDSG::mspNormalData",
    ),
    Ok(
        "LensFlareDSG::spDrawQueue",
    ),
    Ok(
        "LensFlareDSG::spVisTestQueue",
    ),
    Ok(
        "LensFlareDSG::sP3DVisibilityCounter",
    ),
    Ok(
        "BreakablesManager::spInstance",
    ),
    Ok(
        "BreakablesManager::sInventorySectionName",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SkidmarkManager::spInstance",
    ),
    Ok(
        "IntersectManager::mspInstance",
    ),
    Ok(
        "AllWrappers::mspInstance",
    ),
    Ok(
        "BillboardWrappedLoader::mOverrideWrapper",
    ),
    Ok(
        "FenceLoader::mFenceCount",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "AnimDynaPhysLoader::s_ShadowList",
    ),
    Ok(
        "ParticleManager::spInstance",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "AnimEntityDSGManager::spInstance",
    ),
    Ok(
        "RenderFlow::spInstance",
    ),
    Ok(
        "RenderFlow::sDrawStatsOverlay",
    ),
    Ok(
        "RenderManager::mspInstance",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CubicBezier::sIsInitialized",
    ),
    Ok(
        "CubicBezier::B0",
    ),
    Ok(
        "CubicBezier::B1",
    ),
    Ok(
        "CubicBezier::B2",
    ),
    Ok(
        "CubicBezier::B3",
    ),
    Ok(
        "RoadManager::mInstance",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SimpsonsSoundPlayer::s_playersCreated",
    ),
    Ok(
        "SimpsonsSoundPlayer::s_clipPlayersInUse",
    ),
    Ok(
        "SimpsonsSoundPlayer::s_streamPlayersInUse",
    ),
    Ok(
        "SimpsonsSoundPlayer::s_resourceManager",
    ),
    Ok(
        "SimpsonsSoundPlayer::s_playerManager",
    ),
    Ok(
        "SimpsonsSoundPlayer::s_soundLoader",
    ),
    Ok(
        "SoundManager::spInstance",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radLinkedClass<SoundRenderingPlayerCallback>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<SoundRenderingPlayerCallback>::s_pLinkedClassTail",
    ),
    Ok(
        "radLinkedClass<carSoundParameters>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<carSoundParameters>::s_pLinkedClassTail",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DialogList::s_introKey",
    ),
    Ok(
        "DialogList::s_aztecKey",
    ),
    Ok(
        "DialogList::s_milhouseKey",
    ),
    Ok(
        "DialogList::s_nelsonKey",
    ),
    Ok(
        "DialogList::s_raceZombie1",
    ),
    Ok(
        "DialogList::s_raceZombie2",
    ),
    Ok(
        "DialogList::s_showDialogSpew",
    ),
    Ok(
        "DialogQueueElement::s_timerList",
    ),
    Ok(
        "DialogQueueElement::s_watcherInitialized",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radLinkedClass<reverbSettings>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<reverbSettings>::s_pLinkedClassTail",
    ),
    Ok(
        "radLinkedClass<positionalSoundSettings>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<positionalSoundSettings>::s_pLinkedClassTail",
    ),
    Ok(
        "radLinkedClass<Sound::daSoundPlayerBase>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<Sound::daSoundPlayerBase>::s_pLinkedClassTail",
    ),
    Ok(
        "radLinkedClass<Sound::daSoundClipStreamPlayer>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<Sound::daSoundClipStreamPlayer>::s_pLinkedClassTail",
    ),
    Ok(
        "Fader::s_faderUpdateList",
    ),
    Ok(
        "Sound::gCompressedStreamAudioFormat",
    ),
    Ok(
        "Sound::gUnCompressedStreamAudioFormat",
    ),
    Ok(
        "Sound::gClipFileAudioFormat",
    ),
    Ok(
        "Sound::gMusicAudioFormat",
    ),
    Ok(
        "Sound::gStreamers",
    ),
    Ok(
        "Sound::daSoundPlayerManager::s_pInstance",
    ),
    Ok(
        "radLinkedClass<Sound::daSoundDynaLoadRegion>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<Sound::daSoundDynaLoadRegion>::s_pLinkedClassTail",
    ),
    Ok(
        "Sound::daSoundDynaLoadManager::s_pSingleton",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::s_pActiveRegion",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::s_ActiveSlot",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion::s_GlobalPendingSwapCount",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sound::gpBTreeNodePool",
    ),
    Ok(
        "Sound::gTotalMicrosecondsWastedParsingScripts",
    ),
    Ok(
        "Sound::DAMEMORY_ALLOC_SOUND",
    ),
    Ok(
        "Sound::daSoundRenderingManager::s_Singleton",
    ),
    Ok(
        "radLinkedClass<daSoundResourceData>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<daSoundResourceData>::s_pLinkedClassTail",
    ),
    Ok(
        "daSoundResourceData::s_fileDescUsedCount",
    ),
    Ok(
        "Sound::daSoundResourceManager::s_pSingleton",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sound::gClipLoadInfo",
    ),
    Ok(
        "Sound::gClipPlayerArray",
    ),
    Ok(
        "Sound::gStreamPlayerArray",
    ),
    Ok(
        "radLinkedClass<globalSettings>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<globalSettings>::s_pLinkedClassTail",
    ),
    Ok(
        "SoundDebugDisplay::s_isVisible",
    ),
    Ok(
        "SoundDebugDisplay::s_red",
    ),
    Ok(
        "SoundDebugDisplay::s_green",
    ),
    Ok(
        "SoundDebugDisplay::s_blue",
    ),
    Ok(
        "SoundDebugDisplay::s_leftOffset",
    ),
    Ok(
        "SoundDebugDisplay::s_topOffset",
    ),
    Ok(
        "SoundDebugDisplay::s_page",
    ),
    Ok(
        "SoundDebugDisplay::s_dumpToWindow",
    ),
    Ok(
        "SoundDebugDisplay::s_radius",
    ),
    Ok(
        "SoundDebugDisplay::s_dumpTypeInfoToWindow",
    ),
    Ok(
        "MovingSoundManager::s_waspUID",
    ),
    Ok(
        "TrafficSoundPlayer::s_timerList",
    ),
    Ok(
        "Avatar::s_displayCoordinates",
    ),
    Ok(
        "AvatarManager::spAvatarManager",
    ),
    Ok(
        "HitnRunManager::smpHitnRunManager",
    ),
    Ok(
        "VehicleCentral::spInstance",
    ),
    Ok(
        "VehicleCentral::spGenericAI",
    ),
    Ok(
        "WorldPhysicsManager::spInstance",
    ),
    Ok(
        "CoinManager::spCoinManager",
    ),
    Ok(
        "Sparkle::sRandom",
    ),
    Ok(
        "Sparkle::sRandomSeeded",
    ),
    Ok(
        "Sparkle::spInstance",
    ),
    Ok(
        "Character::msIntersectInfo",
    ),
    Ok(
        "Character::Prop::spSkeleton",
    ),
    Ok(
        "Character::Prop::sSkelRefs",
    ),
    Ok(
        "CharacterManager::spCharacterManager",
    ),
    Ok(
        "CharacterTune::sGetInPosition",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CharacterManager::sInitialWalkLocator",
    ),
    Ok(
        "CharacterManager::sCharacterToSpawn",
    ),
    Ok(
        "CharacterManager::sSpawnedCharacter",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Vehicle::s_DamageFromExplosion",
    ),
    Ok(
        "Vehicle::s_DamageFromExplosionPlayer",
    ),
    Ok(
        "Vehicle::sDoBounce",
    ),
    Ok(
        "TrafficManager::mInstance",
    ),
    Ok(
        "TrafficManager::sSwatchColours",
    ),
    Ok(
        "PathManager::mInstance",
    ),
    Ok(
        "PedestrianManager::mDefaultModelGroup",
    ),
    Ok(
        "PedestrianManager::mInstance",
    ),
    Ok(
        "ParkedCarManager::spInstance",
    ),
    Ok(
        "LoadingSuperSprintContext::spInstance",
    ),
    Ok(
        "SuperSprintContext::spInstance",
    ),
    Ok(
        "SuperSprintFEContext::spInstance",
    ),
    Ok(
        "SuperSprintManager::spInstance",
    ),
    Ok(
        "SuperSprintData::CHARACTER_NAMES",
    ),
    Ok(
        "FootprintManager::spFootprintManager",
    ),
    Ok(
        "choreo::Bank::m_DefaultScriptReadHandlersRegistered",
    ),
    Ok(
        "choreo::Bank::m_ScriptReadHandlerCount",
    ),
    Ok(
        "choreo::DEFAULT_FACING_VECTOR",
    ),
    Ok(
        "choreo::ScriptReader::m_ErrorHandler",
    ),
    Ok(
        "choreo::ScriptReader::m_ErrorHandlerContext",
    ),
    Ok(
        "sim::MAXLEVEL",
    ),
    Ok(
        "sim::CollisionManager::sInstance",
    ),
    Ok(
        "sim::CollisionManager::Area::sUpdateSimStateSTBC",
    ),
    Ok(
        "sim::FACTMINV",
    ),
    Ok(
        "sim::MAXREST",
    ),
    Ok(
        "sim::MINREST",
    ),
    Ok(
        "sim::maxFactRest",
    ),
    Ok(
        "sim::minFactRest",
    ),
    Ok(
        "sim::useCorrectPosition",
    ),
    Ok(
        "sim::RayIntersectionInfo::sMethod",
    ),
    Ok(
        "sim::RayIntersectionInfo::sRayThickness",
    ),
    Ok(
        "sim::RayIntersectionInfo::sReturnClosestOnly",
    ),
    Ok(
        "sim::RayIntersectionInfo::sRootOnly",
    ),
    Ok(
        "sim::g_pLineElemArray",
    ),
    Ok(
        "sim::g_pDefaultShader",
    ),
    Ok(
        "sim::g_LineStreamCounter",
    ),
    Ok(
        "sim::SimUnits::sUnitSet",
    ),
    Ok(
        "sim::SimUnits::sM",
    ),
    Ok(
        "sim::SimUnits::sL",
    ),
    Ok(
        "sim::SimUnits::sT",
    ),
    Ok(
        "sim::SimUnits::sList",
    ),
    Ok(
        "sim::SimEnvironment::sDefaultSimEnvironment",
    ),
    Ok(
        "sim::SimEnvironment::sCollisionDistanceCGS",
    ),
    Ok(
        "sim::SimEnvironment::sCollisionDistance",
    ),
    Ok(
        "sim::SimState::sApproxSpeedMagnitudeFactor",
    ),
    Ok(
        "sim::ManualSimState::sIdentity",
    ),
    Ok(
        "sim::SimStateArticulated::sUseInventoryObject",
    ),
    Ok(
        "sim::SimulatedObject::sSimulatedObjectRefIndex",
    ),
    Ok(
        "sim::PhysicsObject::sSmall_Speed",
    ),
    Ok(
        "sim::PhysicsObject::sThresholdTimeForRestingTest",
    ),
    Ok(
        "sim::PhysicsObject::sThresholdTimeForContactFriction",
    ),
    Ok(
        "sim::VirtualCM::sDefault_invTA",
    ),
    Ok(
        "sim::VirtualCM::sDefault_invTV",
    ),
    Ok(
        "sim::VirtualCM::sDefault_invTP",
    ),
    Ok(
        "sim::VirtualCM::sDefault_restP",
    ),
    Ok(
        "sim::VirtualCM::sDefault_restV",
    ),
    Ok(
        "sim::CollisionAnalyserData::sDefaultCollisionType",
    ),
    Ok(
        "sim::CollisionAnalyserInfo::sDefaultBounceSpeedThreshold",
    ),
    Ok(
        "sim::CollisionAnalyserInfo::sDefaultBounceTimeThreshold",
    ),
    Ok(
        "sim::CollisionAnalyserInfo::sDefaultRollingThreshold",
    ),
    Ok(
        "sim::CollisionAnalyserInfo::sDefaultLowerThresholdFactor",
    ),
    Ok(
        "sim::CollisionAnalyserInfo::sDefaultUpperThresholdFactor",
    ),
    Ok(
        "sim::CollisionDetector::sSafeTimeBeforeCollision",
    ),
    Ok(
        "FeTextBibleLoader::s_onlyLoadCurrentLanguage",
    ),
    Ok(
        "Scrooby::g_CameraNearPlane",
    ),
    Ok(
        "Scrooby::g_CameraFarPlane",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FeTextBible::m_index",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Scrooby::App::sInstance",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FeApp::s_Instance",
    ),
    Ok(
        "BillboardQuadManager::spInstance",
    ),
    Ok(
        "BillboardQuadManager::sCollectPass",
    ),
    Ok(
        "BillboardQuadManager::sEnabled",
    ),
    Ok(
        "tName::s_allocator",
    ),
    Ok(
        "tMatrixStack::tmp",
    ),
    Ok(
        "tMatrixStack::tmpv",
    ),
    Ok(
        "tSprite::createLinear",
    ),
    Ok(
        "tSetLoader::m_Random",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "p3d::platform",
    ),
    Ok(
        "p3d::context",
    ),
    Ok(
        "p3d::inventory",
    ),
    Ok(
        "p3d::stack",
    ),
    Ok(
        "p3d::loadManager",
    ),
    Ok(
        "p3d::pddi",
    ),
    Ok(
        "p3d::device",
    ),
    Ok(
        "p3d::display",
    ),
    Ok(
        "ParticleSystemRandomData::msCurInt",
    ),
    Ok(
        "ParticleSystemRandomData::msCurFloat",
    ),
    Ok(
        "tFileFTT::mTaskedOutTime",
    ),
    Ok(
        "tBaseGenerator::randomGenerator",
    ),
    Ok(
        "ps2LightmapShader::textureTable",
    ),
    Ok(
        "ps2LightmapShader::intTable",
    ),
    Ok(
        "ps2LightmapShader::g_context",
    ),
    Ok(
        "ps2LightweightShader::g_context",
    ),
    Ok(
        "ps2LightweightShader::textureTable",
    ),
    Ok(
        "ps2LightweightShader::floatTable",
    ),
    Ok(
        "ps2ToonShader::colourTable",
    ),
    Ok(
        "ps2ToonShader::textureTable",
    ),
    Ok(
        "ps2ToonShader::intTable",
    ),
    Ok(
        "ps2ToonShader::floatTable",
    ),
    Ok(
        "ps2ToonShader::toonProgram",
    ),
    Ok(
        "ps2SimpleShader::colourTable",
    ),
    Ok(
        "ps2SimpleShader::textureTable",
    ),
    Ok(
        "ps2SimpleShader::intTable",
    ),
    Ok(
        "ps2SimpleShader::floatTable",
    ),
    Ok(
        "ps2SimpleShader::g_context",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ps2RefractionShader::colourTable",
    ),
    Ok(
        "ps2RefractionShader::textureTable",
    ),
    Ok(
        "ps2RefractionShader::intTable",
    ),
    Ok(
        "ps2RefractionShader::floatTable",
    ),
    Ok(
        "ps2ReflectionShader::colourTable",
    ),
    Ok(
        "ps2ReflectionShader::textureTable",
    ),
    Ok(
        "ps2ReflectionShader::intTable",
    ),
    Ok(
        "ps2ReflectionShader::floatTable",
    ),
    Ok(
        "ps2ReflectionShader::vectorTable",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "pddiBaseShader::currentUID",
    ),
    Ok(
        "pddiBaseShader::newUID",
    ),
    Ok(
        "pddiBaseShader::lastShader",
    ),
    Ok(
        "pddiFont::xscale",
    ),
    Ok(
        "pddiFont::yscale",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RadicalMathLibrary::Spline::MBSpline",
    ),
    Ok(
        "RadicalMathLibrary::Spline::MBezier",
    ),
    Ok(
        "RadicalMathLibrary::Spline::MHermite",
    ),
    Ok(
        "RadicalMathLibrary::Spline::MBSplineD1",
    ),
    Ok(
        "RadicalMathLibrary::Spline::MBezierD1",
    ),
    Ok(
        "RadicalMathLibrary::Spline::MHermiteD1",
    ),
    Ok(
        "RadicalMathLibrary::Spline::MBSplineD2",
    ),
    Ok(
        "RadicalMathLibrary::Spline::MBezierD2",
    ),
    Ok(
        "RadicalMathLibrary::Spline::MHermiteD2",
    ),
    Ok(
        "radmusic::debug_channel",
    ),
    Ok(
        "radmusic::g_p_performance_list_head",
    ),
    Ok(
        "radmusic::g_audio_format_info",
    ),
    Ok(
        "radmusic::g_p_stream_graph_nodes",
    ),
    Ok(
        "radmusic::g_p_clip_player_nodes",
    ),
    Ok(
        "radmusic::g_num_stream_graphs",
    ),
    Ok(
        "radmusic::g_num_clip_players",
    ),
    Ok(
        "memory::g_allocator",
    ),
    Ok(
        "memory::g_p_tag",
    ),
    Ok(
        "ods::g_type_functions",
    ),
    Ok(
        "ods::stdio_stream_functions",
    ),
    Ok(
        "ods::radfile_stream_functions",
    ),
    Ok(
        "ods::radload_stream_functions",
    ),
    Ok(
        "ods::memory_stream_functions",
    ),
    Ok(
        "ods::debug_printf_stream_functions",
    ),
    Ok(
        "radmusic::g_state_functions",
    ),
    Ok(
        "radmusic::g_p_event_handlers",
    ),
    Ok(
        "radmusic::g_stream_graph_stitch_callback",
    ),
    Ok(
        "radSoundHalListener::s_pTheRadSoundSoftwareListener",
    ),
    Ok(
        "radLinkedClass<radSoundHalPositionalGroup>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<radSoundHalPositionalGroup>::s_pLinkedClassTail",
    ),
    Ok(
        "radSoundHalMemoryRegion::s_MemorySpace",
    ),
    Ok(
        "radSoundHalMemoryRegion::s_pRadSoundMemoryRegion_Root",
    ),
    Ok(
        "radSoundHalMemoryRegion::s_Alignment",
    ),
    Ok(
        "radSoundHalSystem::s_pRsdSystem",
    ),
    Ok(
        "radSoundEffectPs2::s_aEffectModeInfo",
    ),
    Ok(
        "radSoundEffectPs2::s_NumberOfEffectModes",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radSoundIopPs2::s_pTheSoundRpcClient",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radSoundHalBufferAsyncRequestAdpcmPs2::s_pRequestHead",
    ),
    Ok(
        "radLinkedClass<radSoundBufferAdpcmPs2>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<radSoundBufferAdpcmPs2>::s_pLinkedClassTail",
    ),
    Ok(
        "radSoundPoolObject<radSoundHalAdpcmBufferClearer>::s_pIRadMemoryPool",
    ),
    Ok(
        "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2>::s_pIRadMemoryPool",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radLinkedClass<radSoundVoiceAdpcmPs2>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<radSoundVoiceAdpcmPs2>::s_pLinkedClassTail",
    ),
    Ok(
        "radLinkedClass<radSoundClip>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<radSoundClip>::s_pLinkedClassTail",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radSoundObject::s_SoundObjectName",
    ),
    Ok(
        "radSoundObject::s_SoundObjectCount",
    ),
    Ok(
        "radSoundUpdatableObject::s_Updating",
    ),
    Ok(
        "radSoundUpdatableObject::s_ListWasChanged",
    ),
    Ok(
        "radSoundUpdatableObject::s_pRadSoundUpdateHead",
    ),
    Ok(
        "radSoundUpdatableObject::s_UpdatableCount",
    ),
    Ok(
        "radSoundUpdatableObject::s_UpdatingCount",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radLinkedClass<IRadNameSpace>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<IRadNameSpace>::s_pLinkedClassTail",
    ),
    Ok(
        "ParserConst::TOK_CREATE",
    ),
    Ok(
        "ParserConst::TOK_WITH",
    ),
    Ok(
        "ParserConst::TOK_NAMED",
    ),
    Ok(
        "ParserConst::TOK_OPTION",
    ),
    Ok(
        "ParserConst::TOK_PC",
    ),
    Ok(
        "ParserConst::TOK_PS2",
    ),
    Ok(
        "ParserConst::TOK_XBOX",
    ),
    Ok(
        "ParserConst::TOK_GCN",
    ),
    Ok(
        "ParserConst::TOK_REF",
    ),
    Ok(
        "ParserConst::TOK_LCURLY",
    ),
    Ok(
        "ParserConst::TOK_RCURLY",
    ),
    Ok(
        "ParserConst::TOK_LPAREN",
    ),
    Ok(
        "ParserConst::TOK_RPAREN",
    ),
    Ok(
        "ParserConst::TOK_BOOL",
    ),
    Ok(
        "ParserConst::TOK_CHAR",
    ),
    Ok(
        "ParserConst::TOK_UCHAR",
    ),
    Ok(
        "ParserConst::TOK_SHORT",
    ),
    Ok(
        "ParserConst::TOK_USHORT",
    ),
    Ok(
        "ParserConst::TOK_INT",
    ),
    Ok(
        "ParserConst::TOK_UINT",
    ),
    Ok(
        "ParserConst::TOK_LONG",
    ),
    Ok(
        "ParserConst::TOK_ULONG",
    ),
    Ok(
        "ParserConst::TOK_FLOAT",
    ),
    Ok(
        "ParserConst::TOK_DOUBLE",
    ),
    Ok(
        "ParserConst::TOK_IREFCOUNT",
    ),
    Ok(
        "IRadTypeInfoSystem::ms_pEmptyString",
    ),
    Ok(
        "IRadTypeInfoSystem::s_pTheTypeInfoSystem",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radLinkedClass<radMoviePlayer>::s_pLinkedClassHead",
    ),
    Ok(
        "radLinkedClass<radMoviePlayer>::s_pLinkedClassTail",
    ),
    Ok(
        "radMovieIpuPs2::s_refTheRadMovieIpuPs2",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radObject::s_Allocator",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::s_pTransferBuffer",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::s_TransferBufferSize",
    ),
    Ok(
        "MemorySpaceAsyncRequest::s_pRequest_Head",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radThread::s_PriorityMap",
    ),
    Ok(
        "radThread::s_AlarmId",
    ),
    Ok(
        "radTextDisplay::m_Initialized",
    ),
    Ok(
        "radTextDisplay::m_Alloc",
    ),
    Ok(
        "radFileSystem::s_Initialized",
    ),
    Ok(
        "radFileSystem::s_Allocator",
    ),
    Ok(
        "radFileSystem::s_RemoteDriveConnectTimeout",
    ),
    Ok(
        "radFileSystem::s_TotalDriveCount",
    ),
    Ok(
        "radFileSystem::s_AutoMount",
    ),
    Ok(
        "radFileSystem::s_pMutex",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ILoadManager::s_instance",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radLoadObject::s_allocator",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_av_",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_trim_threshold",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_top_pad",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_sbrk_base",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_max_sbrked_mem",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_max_total_mem",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_current_mallinfo",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "mb_cur_max",
        ),
    ),
    Ok(
        "global frames keyed to istream::istream(int, streambuf *, ostream *)",
    ),
    Ok(
        "global frames keyed to istream::getline(char *, int, char)",
    ),
    Ok(
        "global frames keyed to istream::scan(char const *, ...)",
    ),
    Ok(
        "global frames keyed to streambuf::vscan(char const *, char *, ios *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global frames keyed to cout",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global frames keyed to streambuf::_un_link(void)",
    ),
    Ok(
        "global frames keyed to filebuf::init(void)",
    ),
    Ok(
        "global frames keyed to _IO_istream_withassign::operator=(istream &)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global frames keyed to _IO_stdin_",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global frames keyed to stdiobuf::stdiobuf(__sFILE *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_klibinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "sce_sema_id",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "sce_eh_sema_id",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "erminate_func",
        ),
    ),
    Ok(
        "global frames keyed to __default_terminate",
    ),
    Ok(
        "global frames keyed to terminate(void)",
    ),
    Ok(
        "global frames keyed to type_info::~type_info(void)",
    ),
    Ok(
        "void type_info node",
    ),
    Ok(
        "long long type_info node",
    ),
    Ok(
        "long type_info node",
    ),
    Ok(
        "int type_info node",
    ),
    Ok(
        "short type_info node",
    ),
    Ok(
        "bool type_info node",
    ),
    Ok(
        "char type_info node",
    ),
    Ok(
        "wchar_t type_info node",
    ),
    Ok(
        "long double type_info node",
    ),
    Ok(
        "double type_info node",
    ),
    Ok(
        "float type_info node",
    ),
    Ok(
        "unsigned int type_info node",
    ),
    Ok(
        "unsigned long type_info node",
    ),
    Ok(
        "unsigned long long type_info node",
    ),
    Ok(
        "unsigned short type_info node",
    ),
    Ok(
        "unsigned char type_info node",
    ),
    Ok(
        "signed char type_info node",
    ),
    Ok(
        "global frames keyed to type_info::before(type_info const &) const",
    ),
    Err(
        UnrecognizedSpecialMethod(
            "CTOR_LIST",
        ),
    ),
    Err(
        UnrecognizedSpecialMethod(
            "DTOR_LIST",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ChangeState<CharacterAi::Loco> virtual table",
    ),
    Ok(
        "ChangeState<CharacterAi::InCar> virtual table",
    ),
    Ok(
        "ISpatialProxyAA virtual table",
    ),
    Ok(
        "ActionButton::AutomaticDoor virtual table",
    ),
    Ok(
        "ActionButton::PlayAnimOnce virtual table",
    ),
    Ok(
        "AssignValueToFloat virtual table",
    ),
    Ok(
        "DelayAction virtual table",
    ),
    Ok(
        "TriggerEventAction virtual table",
    ),
    Ok(
        "CharacterAi::GetOut::EventListener virtual table",
    ),
    Ok(
        "CharacterAi::GetOut virtual table",
    ),
    Ok(
        "CharacterAi::GetIn::EventListener virtual table",
    ),
    Ok(
        "CharacterAi::GetIn virtual table",
    ),
    Ok(
        "CharacterAi::InSim virtual table",
    ),
    Ok(
        "CharacterAi::Loco virtual table",
    ),
    Ok(
        "CharacterAi::InCar virtual table",
    ),
    Ok(
        "CharacterAi::NoState virtual table",
    ),
    Ok(
        "CharacterAi::State virtual table",
    ),
    Ok(
        "ActionButtonManager::EventListener virtual table",
    ),
    Ok(
        "ActionButtonManager virtual table",
    ),
    Ok(
        "ActionButton::PurchaseSkin virtual table",
    ),
    Ok(
        "ActionButton::PurchaseCar virtual table",
    ),
    Ok(
        "ActionButton::PurchaseReward virtual table",
    ),
    Ok(
        "ActionButton::TeleportAction::EventListener virtual table",
    ),
    Ok(
        "ActionButton::TeleportAction virtual table",
    ),
    Ok(
        "ActionButton::GenericEventButtonHandler virtual table",
    ),
    Ok(
        "ActionButton::NitroIcon::RespawnEntity virtual table",
    ),
    Ok(
        "ActionButton::NitroIcon virtual table",
    ),
    Ok(
        "ActionButton::WrenchIcon::RespawnEntity virtual table",
    ),
    Ok(
        "ActionButton::WrenchIcon virtual table",
    ),
    Ok(
        "ActionButton::CollectibleCard virtual table",
    ),
    Ok(
        "ActionButton::CollectibleFood virtual table",
    ),
    Ok(
        "ActionButton::RespawnCollectible virtual table",
    ),
    Ok(
        "ActionButton::Collectible virtual table",
    ),
    Ok(
        "ActionButton::Doorbell virtual table",
    ),
    Ok(
        "ActionButton::Bounce virtual table",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone virtual table",
    ),
    Ok(
        "ActionButton::SummonVehiclePhoneStaticCallback virtual table",
    ),
    Ok(
        "ActionButton::PrankPhone virtual table",
    ),
    Ok(
        "ActionButton::UseVendingMachine virtual table",
    ),
    Ok(
        "ActionButton::DestroyObject::CStatePropListener virtual table",
    ),
    Ok(
        "ActionButton::DestroyObject virtual table",
    ),
    Ok(
        "ActionButton::AutoPlayAnimInOut virtual table",
    ),
    Ok(
        "ActionButton::AutoPlayAnimLoop virtual table",
    ),
    Ok(
        "ActionButton::AutoPlayAnim virtual table",
    ),
    Ok(
        "ActionButton::PlayAnimLoop virtual table",
    ),
    Ok(
        "ActionButton::PlayAnim virtual table",
    ),
    Ok(
        "ActionButton::ReverseAnim virtual table",
    ),
    Ok(
        "ActionButton::ToggleAnim virtual table",
    ),
    Ok(
        "ActionButton::AnimSwitch virtual table",
    ),
    Ok(
        "ActionButton::ActionEventHandler virtual table",
    ),
    Ok(
        "ActionButton::GetInCar virtual table",
    ),
    Ok(
        "ActionButton::EnterInterior virtual table",
    ),
    Ok(
        "ActionButton::AttachProp virtual table",
    ),
    Ok(
        "ActionButton::PropHandler virtual table",
    ),
    Ok(
        "ActionButton::ButtonHandler virtual table",
    ),
    Ok(
        "ActionButton::AnimEntityDSGWrapper virtual table",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper virtual table",
    ),
    Ok(
        "_Alloc_traits<ContextEnum, s2alloc<ContextEnum> >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<tName, s2alloc<tName> >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<EventListener *, s2alloc<EventListener *> >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<bool, s2alloc<bool> >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<sim::CollisionObject *, s2alloc<sim::CollisionObject *> >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<MapElement<sim::CollisionObject *, DynaPhysDSG *>, s2alloc<MapElement<sim::CollisionObject *, DynaPhysDSG *> > >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<IntersectionList::LineSegment2D, s2alloc<IntersectionList::LineSegment2D> >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<MapElement<tUidUnaligned, tPose *>, s2alloc<MapElement<tUidUnaligned, tPose *> > >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<IEntityDSG *, s2alloc<IEntityDSG *> >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<WorldScene::zSortBlah, s2alloc<WorldScene::zSortBlah> >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<MapElement<ParticleEnum::ParticleID, int>, s2alloc<MapElement<ParticleEnum::ParticleID, int> > >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<GeometryVehicle::VehicleFrameController, s2alloc<GeometryVehicle::VehicleFrameController> >::_S_instanceless",
    ),
    Ok(
        "radLoadInventory::SafeCast<ActionEventLocator> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<CarStartLocator> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<StatePropDSG> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<AnimCollisionEntityDSG> virtual table",
    ),
    Ok(
        "ActionButton::TalkMission virtual table",
    ),
    Ok(
        "ActionButton::TalkDialog virtual table",
    ),
    Ok(
        "ActionButton::TalkFood virtual table",
    ),
    Ok(
        "ActionButton::OpenDoor virtual table",
    ),
    Ok(
        "ActionButton::IGameObjectWrapper virtual table",
    ),
    Ok(
        "CStatePropListener virtual table",
    ),
    Ok(
        "LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "tRefCounted virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCastBase virtual table",
    ),
    Ok(
        "ProjectileDSG::CStatePropListener virtual table",
    ),
    Ok(
        "ProjectileDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "ProjectileDSG virtual table",
    ),
    Ok(
        "ActorAnimationUFO virtual table",
    ),
    Ok(
        "WingAnimator virtual table",
    ),
    Ok(
        "ActorAnimationWasp virtual table",
    ),
    Ok(
        "StatePropDSGProcAnimator virtual table",
    ),
    Ok(
        "ActorAnimation virtual table",
    ),
    Ok(
        "ActorDSG::CStatePropListener virtual table",
    ),
    Ok(
        "ActorDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "ActorDSG virtual table",
    ),
    Ok(
        "UFOBeamAlwaysOn virtual table",
    ),
    Ok(
        "AttractionBehaviour::EventListener virtual table",
    ),
    Ok(
        "AttractionBehaviour virtual table",
    ),
    Ok(
        "UFOAttackBehaviour virtual table",
    ),
    Ok(
        "UFOBehaviour virtual table",
    ),
    Ok(
        "EvasionBehaviour virtual table",
    ),
    Ok(
        "AttackBehaviour::EventListener virtual table",
    ),
    Ok(
        "AttackBehaviour virtual table",
    ),
    Ok(
        "Projectile virtual table",
    ),
    Ok(
        "FlyingActor::CStatePropListener virtual table",
    ),
    Ok(
        "FlyingActor virtual table",
    ),
    Ok(
        "Behaviour virtual table",
    ),
    Ok(
        "Actor virtual table",
    ),
    Ok(
        "IntersectionList virtual table",
    ),
    Ok(
        "ActorManager virtual table",
    ),
    Ok(
        "SpawnPoint::EventListener virtual table",
    ),
    Ok(
        "SpawnPoint::IHudMapIconLocator virtual table",
    ),
    Ok(
        "SpawnPoint virtual table",
    ),
    Ok(
        "_Alloc_traits<RadicalMathLibrary::Vector, s2alloc<RadicalMathLibrary::Vector> >::_S_instanceless",
    ),
    Ok(
        "basic_string<char, string_char_traits<char>, __default_alloc_template<false, 0> >::npos",
    ),
    Ok(
        "_Alloc_traits<Actor *, s2alloc<Actor *> >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<BreakablesManager::BreakableInstances, s2alloc<BreakablesManager::BreakableInstances> >::_S_instanceless",
    ),
    Ok(
        "radLoadInventory::SafeCast<EventLocator> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tDrawable> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<CStatePropData> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<Locator> virtual table",
    ),
    Ok(
        "ActionController virtual table",
    ),
    Ok(
        "Sequencer virtual table",
    ),
    Ok(
        "SurfAction virtual table",
    ),
    Ok(
        "KickAction virtual table",
    ),
    Ok(
        "ChangeNPCControllerState virtual table",
    ),
    Ok(
        "ChangeLocomotion virtual table",
    ),
    Ok(
        "GroundSnap virtual table",
    ),
    Ok(
        "Position virtual table",
    ),
    Ok(
        "Orient virtual table",
    ),
    Ok(
        "Arrive virtual table",
    ),
    Ok(
        "ReleaseDoorsAction virtual table",
    ),
    Ok(
        "CarDoorAction virtual table",
    ),
    Ok(
        "PlayIdleAnimationAction virtual table",
    ),
    Ok(
        "PlayAnimationAction virtual table",
    ),
    Ok(
        "GetUpAction virtual table",
    ),
    Ok(
        "FlailAction virtual table",
    ),
    Ok(
        "CringeAction virtual table",
    ),
    Ok(
        "DodgeAction virtual table",
    ),
    Ok(
        "JumpAction virtual table",
    ),
    Ok(
        "DecelAction virtual table",
    ),
    Ok(
        "AccelAction virtual table",
    ),
    Ok(
        "ReverseAction virtual table",
    ),
    Ok(
        "SteerAction virtual table",
    ),
    Ok(
        "HoldAnimationAction virtual table",
    ),
    Ok(
        "InCarAction virtual table",
    ),
    Ok(
        "WalkerLocomotionAction virtual table",
    ),
    Ok(
        "SlaveAction virtual table",
    ),
    Ok(
        "Action virtual table",
    ),
    Ok(
        "Task virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Locomotion> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Animation> virtual table",
    ),
    Ok(
        "TrafficAI::SECONDS_LOOKAHEAD",
    ),
    Ok(
        "TrafficAI::LOOKAHEAD_MIN",
    ),
    Ok(
        "VehicleAI::DEFAULT_MIN_SHORTCUT_SKILL",
    ),
    Ok(
        "VehicleAI::DEFAULT_MAX_SHORTCUT_SKILL",
    ),
    Ok(
        "VehicleAI::CATCHUP_NORMAL_DRIVING_PERCENTAGE_OF_TOPSPEED",
    ),
    Ok(
        "VehicleAI::CATCHUP_MAX_SHORTCUTSKILL_MOD",
    ),
    Ok(
        "WaypointAI::DEFAULT_TRIGGER_RADIUS",
    ),
    Ok(
        "VehicleAIRender virtual table",
    ),
    Ok(
        "TrafficAI virtual table",
    ),
    Ok(
        "WaypointAI::IHudMapIconLocator virtual table",
    ),
    Ok(
        "WaypointAI virtual table",
    ),
    Ok(
        "ChaseAI::IHudMapIconLocator virtual table",
    ),
    Ok(
        "ChaseAI virtual table",
    ),
    Ok(
        "VehicleAI::IHudMapIconLocator virtual table",
    ),
    Ok(
        "VehicleAI virtual table",
    ),
    Ok(
        "PotentialField virtual table",
    ),
    Ok(
        "Potentials virtual table",
    ),
    Ok(
        "IHudMapIconLocator virtual table",
    ),
    Ok(
        "ATCLoader virtual table",
    ),
    Ok(
        "radLoadDataLoader virtual table",
    ),
    Ok(
        "RailCam::BehaviourNames",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SuperSprintCam virtual table",
    ),
    Ok(
        "SurveillanceCam virtual table",
    ),
    Ok(
        "ReverseCam virtual table",
    ),
    Ok(
        "StaticCam virtual table",
    ),
    Ok(
        "WalkerCam virtual table",
    ),
    Ok(
        "WalkerCamData virtual table",
    ),
    Ok(
        "TrackerCam virtual table",
    ),
    Ok(
        "TrackerCamData virtual table",
    ),
    Ok(
        "WrecklessCam virtual table",
    ),
    Ok(
        "WrecklessEventListener virtual table",
    ),
    Ok(
        "RailCam virtual table",
    ),
    Ok(
        "RelativeAnimatedCam virtual table",
    ),
    Ok(
        "KullCam virtual table",
    ),
    Ok(
        "SuperCamController virtual table",
    ),
    Ok(
        "FollowCam virtual table",
    ),
    Ok(
        "FollowCamData virtual table",
    ),
    Ok(
        "DebugCam virtual table",
    ),
    Ok(
        "ConversationCam virtual table",
    ),
    Ok(
        "ConversationCamData virtual table",
    ),
    Ok(
        "ChaseCam virtual table",
    ),
    Ok(
        "ChaseCamData virtual table",
    ),
    Ok(
        "BumperCam virtual table",
    ),
    Ok(
        "BumperCamData virtual table",
    ),
    Ok(
        "SuperCamCentral::GameDataHandler virtual table",
    ),
    Ok(
        "SuperCamCentral virtual table",
    ),
    Ok(
        "AnimatedCam virtual table",
    ),
    Ok(
        "SuperCam virtual table",
    ),
    Ok(
        "SineCosShaker virtual table",
    ),
    Ok(
        "ICameraShaker virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tVectorCamera> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<WalkerCamDataChunk> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tMultiController> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCamera> virtual table",
    ),
    Ok(
        "FollowCamDataChunk virtual table",
    ),
    Ok(
        "GameDataHandler virtual table",
    ),
    Ok(
        "CollectorCard virtual table",
    ),
    Ok(
        "CardsDB virtual table",
    ),
    Ok(
        "CardGallery::ICheatEnteredCallback virtual table",
    ),
    Ok(
        "CardGallery virtual table",
    ),
    Ok(
        "BonusCard virtual table",
    ),
    Ok(
        "Card virtual table",
    ),
    Ok(
        "ICheatEnteredCallback virtual table",
    ),
    Ok(
        "CheatInputHandler virtual table",
    ),
    Ok(
        "CheatInputSystem virtual table",
    ),
    Ok(
        "CheatsDB virtual table",
    ),
    Ok(
        "DebugConsoleCallback::IRadDebugConsolePointerInputCallback virtual table",
    ),
    Ok(
        "DebugConsoleCallback virtual table",
    ),
    Ok(
        "Console virtual table",
    ),
    Ok(
        "IRadDebugConsoleKeyboardInputCallback virtual table",
    ),
    Ok(
        "IRadDebugConsolePointerInputCallback virtual table",
    ),
    Ok(
        "LoadingContext::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "LoadingContext virtual table",
    ),
    Ok(
        "PlayingContext virtual table",
    ),
    Ok(
        "FrontEndContext::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "FrontEndContext virtual table",
    ),
    Ok(
        "ExitContext virtual table",
    ),
    Ok(
        "PauseContext virtual table",
    ),
    Ok(
        "EntryContext virtual table",
    ),
    Ok(
        "BootupContext::PresentationEvent::PresentationEventCallBack virtual table",
    ),
    Ok(
        "BootupContext::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "BootupContext virtual table",
    ),
    Ok(
        "Context virtual table",
    ),
    Ok(
        "_Alloc_traits<TutorialMode, s2alloc<TutorialMode> >::_S_instanceless",
    ),
    Ok(
        "_Alloc_traits<MapElement<tUidUnaligned, tUidUnaligned>, s2alloc<MapElement<tUidUnaligned, tUidUnaligned> > >::_S_instanceless",
    ),
    Ok(
        "PresentationEvent::PresentationEventCallBack virtual table",
    ),
    Ok(
        "GameplayContext virtual table",
    ),
    Ok(
        "ComedyCam virtual table",
    ),
    Ok(
        "LoadingGameplayContext::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "LoadingGameplayContext virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tLightGroup> virtual table",
    ),
    Ok(
        "DemoContext virtual table",
    ),
    Ok(
        "LoadingDemoContext::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "LoadingDemoContext virtual table",
    ),
    Ok(
        "SaveGameInfo virtual table",
    ),
    Ok(
        "GameDataManager::IRadDriveErrorCallback virtual table",
    ),
    Ok(
        "GameDataManager virtual table",
    ),
    Ok(
        "IRadDriveErrorCallback virtual table",
    ),
    Ok(
        "IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "IRefCount virtual table",
    ),
    Ok(
        "MemoryCardManager::IRadDriveErrorCallback virtual table",
    ),
    Ok(
        "MemoryCardManager::IRadDriveCompletionCallback virtual table",
    ),
    Ok(
        "MemoryCardManager virtual table",
    ),
    Ok(
        "IRadDriveCompletionCallback virtual table",
    ),
    Ok(
        "EventListener virtual table",
    ),
    Ok(
        "GameFlow virtual table",
    ),
    Ok(
        "IRadTimerCallback virtual table",
    ),
    Ok(
        "Mappable virtual table",
    ),
    Ok(
        "InputManager::GameDataHandler virtual table",
    ),
    Ok(
        "InputManager virtual table",
    ),
    Ok(
        "UserController virtual table",
    ),
    Ok(
        "WheelRumble virtual table",
    ),
    Ok(
        "ConstantEffect virtual table",
    ),
    Ok(
        "BaseDamper virtual table",
    ),
    Ok(
        "SteeringSpring virtual table",
    ),
    Ok(
        "ForceEffect virtual table",
    ),
    Ok(
        "RumbleEffect virtual table",
    ),
    Ok(
        "IRadControllerInputPointCallback virtual table",
    ),
    Ok(
        "IRadControllerConnectionChangeCallback virtual table",
    ),
    Ok(
        "Gag::EventListener virtual table",
    ),
    Ok(
        "Gag::AnimationPlayer::LoadDataCallBack virtual table",
    ),
    Ok(
        "Gag virtual table",
    ),
    Ok(
        "GagDrawable::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "GagDrawable virtual table",
    ),
    Ok(
        "InteriorManager virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<DirectionalLocator> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tFrameController> virtual table",
    ),
    Ok(
        "InteriorExit virtual table",
    ),
    Ok(
        "AnimationPlayer::LoadDataCallBack virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::CollisionObject> virtual table",
    ),
    Ok(
        "PathLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "PathLoader virtual table",
    ),
    Ok(
        "RoadLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "RoadLoader virtual table",
    ),
    Ok(
        "RoadDataSegmentLoader virtual table",
    ),
    Ok(
        "PedGroupLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "PedGroupLocator virtual table",
    ),
    Ok(
        "LocatorLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "LocatorLoader virtual table",
    ),
    Ok(
        "IWrappedLoader virtual table",
    ),
    Ok(
        "IntersectionLoader virtual table",
    ),
    Ok(
        "SoundFileHandler virtual table",
    ),
    Ok(
        "ScroobyFileHandler::Scrooby::LoadProjectCallback virtual table",
    ),
    Ok(
        "ScroobyFileHandler virtual table",
    ),
    Ok(
        "IconFileHandler::IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "IconFileHandler virtual table",
    ),
    Ok(
        "P3DFileHandler::FileHandler virtual table",
    ),
    Ok(
        "P3DFileHandler virtual table",
    ),
    Ok(
        "ConsoleFileHandler::IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "ConsoleFileHandler virtual table",
    ),
    Ok(
        "ChoreoFileHandler::IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "ChoreoFileHandler virtual table",
    ),
    Ok(
        "CementFileHandler::IRadCementLibraryCompletionCallback virtual table",
    ),
    Ok(
        "CementFileHandler virtual table",
    ),
    Ok(
        "LoadingManager virtual table",
    ),
    Ok(
        "FileHandler virtual table",
    ),
    Ok(
        "WalkerCamDataChunk virtual table",
    ),
    Ok(
        "CameraDataLoader virtual table",
    ),
    Ok(
        "tLoadRequest::Callback virtual table",
    ),
    Ok(
        "_Alloc_traits<RoadSegment *, s2alloc<RoadSegment *> >::_S_instanceless",
    ),
    Ok(
        "Scrooby::LoadProjectCallback virtual table",
    ),
    Ok(
        "FileHandler::LoadFileCallback virtual table",
    ),
    Ok(
        "IRadCementLibraryCompletionCallback virtual table",
    ),
    Ok(
        "radLoadCallback virtual table",
    ),
    Ok(
        "PS2Platform virtual table",
    ),
    Ok(
        "Game virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tTextureFont> virtual table",
    ),
    Ok(
        "HeapManager virtual table",
    ),
    Ok(
        "HeapActivityTracker virtual table",
    ),
    Ok(
        "HeapStack virtual table",
    ),
    Ok(
        "_Alloc_traits<pair<void *const, unsigned int>, s2alloc<pair<void *const, unsigned int> > >::_S_instanceless",
    ),
    Ok(
        "IRadMemoryActivityCallback virtual table",
    ),
    Ok(
        "IRadMemorySetAllocatorCallback virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StaticCamLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "StaticCamLocator virtual table",
    ),
    Ok(
        "ZoneEventLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "ZoneEventLocator virtual table",
    ),
    Ok(
        "TriggerVolumeTracker virtual table",
    ),
    Ok(
        "SplineLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "SplineLocator virtual table",
    ),
    Ok(
        "SphereTriggerVolume::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "SphereTriggerVolume virtual table",
    ),
    Ok(
        "ScriptLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "ScriptLocator virtual table",
    ),
    Ok(
        "RectTriggerVolume::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "RectTriggerVolume virtual table",
    ),
    Ok(
        "TriggerVolume::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "TriggerVolume virtual table",
    ),
    Ok(
        "OcclusionLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "OcclusionLocator virtual table",
    ),
    Ok(
        "InteriorEntranceLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "InteriorEntranceLocator virtual table",
    ),
    Ok(
        "FOVLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "FOVLocator virtual table",
    ),
    Ok(
        "EventLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "EventLocator virtual table",
    ),
    Ok(
        "DirectionalLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "DirectionalLocator virtual table",
    ),
    Ok(
        "CarStartLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "CarStartLocator virtual table",
    ),
    Ok(
        "ActionEventLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "ActionEventLocator virtual table",
    ),
    Ok(
        "TriggerLocator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "TriggerLocator virtual table",
    ),
    Ok(
        "Locator::IHudMapIconLocator virtual table",
    ),
    Ok(
        "Locator virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<TriggerVolume> virtual table",
    ),
    Ok(
        "RacePositionBonusObjective::EventListener virtual table",
    ),
    Ok(
        "RacePositionBonusObjective virtual table",
    ),
    Ok(
        "TimeRemainBonusObjective virtual table",
    ),
    Ok(
        "NoCopBonusObjective::EventListener virtual table",
    ),
    Ok(
        "NoCopBonusObjective virtual table",
    ),
    Ok(
        "NoDamageBonusObjective::EventListener virtual table",
    ),
    Ok(
        "NoDamageBonusObjective virtual table",
    ),
    Ok(
        "StatePropCollectible::IHudMapIconLocator virtual table",
    ),
    Ok(
        "StatePropCollectible::CStatePropListener virtual table",
    ),
    Ok(
        "StatePropCollectible::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "StatePropCollectible virtual table",
    ),
    Ok(
        "BonusObjective virtual table",
    ),
    Ok(
        "AnimatedIcon virtual table",
    ),
    Ok(
        "AnimatedIcon::AnimIconDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "AnimatedIcon::AnimIconDSG virtual table",
    ),
    Ok(
        "MissionScriptLoader virtual table",
    ),
    Ok(
        "MissionManager::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "MissionManager::PresentationEvent::PresentationEventCallBack virtual table",
    ),
    Ok(
        "MissionManager virtual table",
    ),
    Ok(
        "GameplayManager::PresentationEvent::PresentationEventCallBack virtual table",
    ),
    Ok(
        "GameplayManager virtual table",
    ),
    Ok(
        "BonusMissionInfo virtual table",
    ),
    Ok(
        "Mission virtual table",
    ),
    Ok(
        "MissionStage::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "MissionStage virtual table",
    ),
    Ok(
        "_Alloc_traits<UFOWeapon, s2alloc<UFOWeapon> >::_S_instanceless",
    ),
    Ok(
        "radLoadInventory::SafeCast<tTexture> virtual table",
    ),
    Ok(
        "Console::ExecuteScriptCallback virtual table",
    ),
    Ok(
        "SafeZone virtual table",
    ),
    Ok(
        "CharacterSheetManager virtual table",
    ),
    Ok(
        "RewardsManager virtual table",
    ),
    Ok(
        "Merchandise virtual table",
    ),
    Ok(
        "Reward virtual table",
    ),
    Ok(
        "KeepBarrelCondition virtual table",
    ),
    Ok(
        "NotAbductedCondition virtual table",
    ),
    Ok(
        "GetOutOfCarCondition virtual table",
    ),
    Ok(
        "VehicleCarryingStateProp virtual table",
    ),
    Ok(
        "PositionCondition virtual table",
    ),
    Ok(
        "TimeOutCondition virtual table",
    ),
    Ok(
        "RaceCondition virtual table",
    ),
    Ok(
        "OutOfBoundsCondition virtual table",
    ),
    Ok(
        "LeaveInteriorCondition virtual table",
    ),
    Ok(
        "FollowCondition virtual table",
    ),
    Ok(
        "DamageCondition virtual table",
    ),
    Ok(
        "VehicleCondition virtual table",
    ),
    Ok(
        "MissionCondition virtual table",
    ),
    Ok(
        "GoOutsideObjective virtual table",
    ),
    Ok(
        "BuySkinObjective virtual table",
    ),
    Ok(
        "BuyCarObjective virtual table",
    ),
    Ok(
        "TimerObjective virtual table",
    ),
    Ok(
        "PickupItemObjective virtual table",
    ),
    Ok(
        "LoadVehicleObjective virtual table",
    ),
    Ok(
        "LoadVehicleObjective::LoadDisposableCarAsyncCallback virtual table",
    ),
    Ok(
        "CoinObjective virtual table",
    ),
    Ok(
        "InteriorObjective::IHudMapIconLocator virtual table",
    ),
    Ok(
        "InteriorObjective virtual table",
    ),
    Ok(
        "FMVObjective::PresentationEvent::PresentationEventCallBack virtual table",
    ),
    Ok(
        "FMVObjective virtual table",
    ),
    Ok(
        "CollectionCondition virtual table",
    ),
    Ok(
        "CollectDumpedObjective virtual table",
    ),
    Ok(
        "TalkToObjective::IHudMapIconLocator virtual table",
    ),
    Ok(
        "TalkToObjective virtual table",
    ),
    Ok(
        "RaceObjective virtual table",
    ),
    Ok(
        "LoseObjective virtual table",
    ),
    Ok(
        "GoToObjective virtual table",
    ),
    Ok(
        "GetInObjective::IHudMapIconLocator virtual table",
    ),
    Ok(
        "GetInObjective virtual table",
    ),
    Ok(
        "FollowObjective virtual table",
    ),
    Ok(
        "DialogueObjective virtual table",
    ),
    Ok(
        "DestroyBossObjective virtual table",
    ),
    Ok(
        "DestroyObjective virtual table",
    ),
    Ok(
        "DeliveryObjective virtual table",
    ),
    Ok(
        "CollectibleObjective virtual table",
    ),
    Ok(
        "MissionObjective virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<StatePropCollectible> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<ZoneEventLocator> virtual table",
    ),
    Ok(
        "AllocPool<TransitionEvent> virtual table",
    ),
    Ok(
        "AllocPool<NISEvent> virtual table",
    ),
    Ok(
        "AllocPool<FMVEvent> virtual table",
    ),
    Ok(
        "TutorialManager::GameDataHandler virtual table",
    ),
    Ok(
        "TutorialManager virtual table",
    ),
    Ok(
        "PresentationAnimator virtual table",
    ),
    Ok(
        "PresentationManager::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "PresentationManager::PresentationEvent::PresentationEventCallBack virtual table",
    ),
    Ok(
        "PresentationManager virtual table",
    ),
    Ok(
        "PresentationOverlay virtual table",
    ),
    Ok(
        "TransitionPlayer virtual table",
    ),
    Ok(
        "PlayerDrawable virtual table",
    ),
    Ok(
        "NISPlayer virtual table",
    ),
    Ok(
        "MouthFlapper virtual table",
    ),
    Ok(
        "CameraPlayer virtual table",
    ),
    Ok(
        "SimpleAnimationPlayer virtual table",
    ),
    Ok(
        "Blinker virtual table",
    ),
    Ok(
        "AnimationPlayer virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCompositeDrawable> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<Scenegraph::Scenegraph> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimation> virtual table",
    ),
    Ok(
        "RespawnEntity virtual table",
    ),
    Ok(
        "FMVUserInputHandler virtual table",
    ),
    Ok(
        "FMVPlayer::radRefCount virtual table",
    ),
    Ok(
        "FMVPlayer::IRadDriveCompletionCallback virtual table",
    ),
    Ok(
        "FMVPlayer::IRadMovieRenderLoop virtual table",
    ),
    Ok(
        "FMVPlayer virtual table",
    ),
    Ok(
        "radRefCount virtual table",
    ),
    Ok(
        "radObject virtual table",
    ),
    Ok(
        "radBaseObject virtual table",
    ),
    Ok(
        "IRadMovieRenderLoop virtual table",
    ),
    Ok(
        "CGuiTextBible virtual table",
    ),
    Ok(
        "CGuiScreenMemoryCard virtual table",
    ),
    Ok(
        "CGuiScreenLoadSave virtual table",
    ),
    Ok(
        "CGuiScreenMemCardCheck::IMemoryCardFormatCallback virtual table",
    ),
    Ok(
        "CGuiScreenMemCardCheck::IMemoryCardCheckCallback virtual table",
    ),
    Ok(
        "CGuiScreenMemCardCheck virtual table",
    ),
    Ok(
        "CGuiUserInputHandler virtual table",
    ),
    Ok(
        "CGuiScreenPrompt virtual table",
    ),
    Ok(
        "CGuiScreenMessage virtual table",
    ),
    Ok(
        "CGuiScreen virtual table",
    ),
    Ok(
        "CGuiSystem::GameDataHandler virtual table",
    ),
    Ok(
        "CGuiSystem::Scrooby::LoadProjectCallback virtual table",
    ),
    Ok(
        "CGuiSystem virtual table",
    ),
    Ok(
        "CGuiManager::EventListener virtual table",
    ),
    Ok(
        "CGuiManager::Scrooby::GotoScreenCallback virtual table",
    ),
    Ok(
        "CGuiManager virtual table",
    ),
    Ok(
        "Scrooby::GotoScreenCallback virtual table",
    ),
    Ok(
        "CGuiWindow virtual table",
    ),
    Ok(
        "CGuiMenuPrompt virtual table",
    ),
    Ok(
        "CGuiMenu2D virtual table",
    ),
    Ok(
        "CGuiMenu virtual table",
    ),
    Ok(
        "GuiMenuItemSprite virtual table",
    ),
    Ok(
        "GuiMenuItemText virtual table",
    ),
    Ok(
        "GuiMenuItem virtual table",
    ),
    Ok(
        "CGuiEntity virtual table",
    ),
    Ok(
        "_Alloc_traits<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID> >::_S_instanceless",
    ),
    Ok(
        "IMemoryCardCheckCallback virtual table",
    ),
    Ok(
        "IMemoryCardFormatCallback virtual table",
    ),
    Ok(
        "CGuiManagerLanguage::EventListener virtual table",
    ),
    Ok(
        "CGuiManagerLanguage::Scrooby::GotoScreenCallback virtual table",
    ),
    Ok(
        "CGuiManagerLanguage virtual table",
    ),
    Ok(
        "CGuiScreenLanguage virtual table",
    ),
    Ok(
        "CGuiScreenLicense virtual table",
    ),
    Ok(
        "CGuiScreenBootupLoad virtual table",
    ),
    Ok(
        "CGuiManagerBootUp::EventListener virtual table",
    ),
    Ok(
        "CGuiManagerBootUp::Scrooby::GotoScreenCallback virtual table",
    ),
    Ok(
        "CGuiManagerBootUp virtual table",
    ),
    Ok(
        "CGuiScreenDemo virtual table",
    ),
    Ok(
        "CGuiScreenLoadingFE::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "CGuiScreenLoadingFE virtual table",
    ),
    Ok(
        "CGuiScreenLoading::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "CGuiScreenLoading virtual table",
    ),
    Ok(
        "CGuiManagerBackEnd::EventListener virtual table",
    ),
    Ok(
        "CGuiManagerBackEnd::Scrooby::GotoScreenCallback virtual table",
    ),
    Ok(
        "CGuiManagerBackEnd virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tSprite> virtual table",
    ),
    Ok(
        "CGuiScreenPlayMovie::PresentationEvent::PresentationEventCallBack virtual table",
    ),
    Ok(
        "CGuiScreenPlayMovie virtual table",
    ),
    Ok(
        "CGuiScreenViewMovies virtual table",
    ),
    Ok(
        "CGuiScreenViewCredits virtual table",
    ),
    Ok(
        "CGuiScreenSound virtual table",
    ),
    Ok(
        "CGuiScreenController virtual table",
    ),
    Ok(
        "CGuiScreenOptions::ICheatEnteredCallback virtual table",
    ),
    Ok(
        "CGuiScreenOptions virtual table",
    ),
    Ok(
        "CGuiScreenVehicleGallery::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "CGuiScreenVehicleGallery virtual table",
    ),
    Ok(
        "CGuiScreenSkinGallery::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "CGuiScreenSkinGallery virtual table",
    ),
    Ok(
        "CGuiScreenMissionGallery::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "CGuiScreenMissionGallery virtual table",
    ),
    Ok(
        "CGuiScreenCardGallery virtual table",
    ),
    Ok(
        "CGuiScreenScrapBookStats virtual table",
    ),
    Ok(
        "CGuiScreenScrapBookContents virtual table",
    ),
    Ok(
        "CGuiScreenScrapBook virtual table",
    ),
    Ok(
        "CGuiScreenAutoLoad::GameDataLoadCallback virtual table",
    ),
    Ok(
        "CGuiScreenAutoLoad::CGuiScreenLoadSave virtual table",
    ),
    Ok(
        "CGuiScreenAutoLoad virtual table",
    ),
    Ok(
        "CGuiScreenLoadGame::GameDataLoadCallback virtual table",
    ),
    Ok(
        "CGuiScreenLoadGame::CGuiScreenLoadSave virtual table",
    ),
    Ok(
        "CGuiScreenLoadGame virtual table",
    ),
    Ok(
        "CGuiScreenIntroTransition virtual table",
    ),
    Ok(
        "CGuiScreenMainMenu virtual table",
    ),
    Ok(
        "CGuiScreenSplash virtual table",
    ),
    Ok(
        "CGuiManagerFrontEnd::EventListener virtual table",
    ),
    Ok(
        "CGuiManagerFrontEnd::Scrooby::GotoScreenCallback virtual table",
    ),
    Ok(
        "CGuiManagerFrontEnd virtual table",
    ),
    Ok(
        "GameDataLoadCallback virtual table",
    ),
    Ok(
        "CGuiScreenMiniSummary virtual table",
    ),
    Ok(
        "CGuiScreenMiniPause virtual table",
    ),
    Ok(
        "CGuiScreenMiniHud virtual table",
    ),
    Ok(
        "CGuiScreenMiniMenu virtual table",
    ),
    Ok(
        "CGuiManagerMiniGame::EventListener virtual table",
    ),
    Ok(
        "CGuiManagerMiniGame::Scrooby::GotoScreenCallback virtual table",
    ),
    Ok(
        "CGuiManagerMiniGame virtual table",
    ),
    Ok(
        "ResetCar virtual table",
    ),
    Ok(
        "CGuiScreenCreditsPostFMV virtual table",
    ),
    Ok(
        "CGuiScreenTutorial virtual table",
    ),
    Ok(
        "CGuiScreenSaveGame::GameDataSaveCallback virtual table",
    ),
    Ok(
        "CGuiScreenSaveGame::CGuiScreenLoadSave virtual table",
    ),
    Ok(
        "CGuiScreenSaveGame virtual table",
    ),
    Ok(
        "CGuiScreenPurchaseRewards::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "CGuiScreenPurchaseRewards virtual table",
    ),
    Ok(
        "CGuiScreenPhoneBooth::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "CGuiScreenPhoneBooth virtual table",
    ),
    Ok(
        "IGuiScreenRewards::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "IGuiScreenRewards virtual table",
    ),
    Ok(
        "CGuiScreenIrisWipe virtual table",
    ),
    Ok(
        "CGuiScreenLetterBox::EventListener virtual table",
    ),
    Ok(
        "CGuiScreenLetterBox virtual table",
    ),
    Ok(
        "CGuiScreenViewCards virtual table",
    ),
    Ok(
        "CGuiScreenLevelEnd virtual table",
    ),
    Ok(
        "CGuiScreenLevelStats virtual table",
    ),
    Ok(
        "CGuiScreenMissionSuccess virtual table",
    ),
    Ok(
        "CGuiScreenMissionOver::EventListener virtual table",
    ),
    Ok(
        "CGuiScreenMissionOver virtual table",
    ),
    Ok(
        "CGuiScreenMissionLoad::EventListener virtual table",
    ),
    Ok(
        "CGuiScreenMissionLoad virtual table",
    ),
    Ok(
        "CGuiScreenMissionBase virtual table",
    ),
    Ok(
        "CGuiScreenPauseSettings::ICheatEnteredCallback virtual table",
    ),
    Ok(
        "CGuiScreenPauseSettings virtual table",
    ),
    Ok(
        "CGuiScreenPauseSound virtual table",
    ),
    Ok(
        "CGuiScreenPauseController virtual table",
    ),
    Ok(
        "CGuiScreenPauseOptions virtual table",
    ),
    Ok(
        "CGuiScreenMissionSelect virtual table",
    ),
    Ok(
        "CGuiScreenPauseMission virtual table",
    ),
    Ok(
        "CGuiScreenPauseSunday virtual table",
    ),
    Ok(
        "CGuiScreenPause virtual table",
    ),
    Ok(
        "CGuiScreenHud::EventListener virtual table",
    ),
    Ok(
        "CGuiScreenHud virtual table",
    ),
    Ok(
        "MessageQueue virtual table",
    ),
    Ok(
        "CGuiScreenMultiHud virtual table",
    ),
    Ok(
        "CGuiManagerInGame::IMemoryCardInfoLoadCallback virtual table",
    ),
    Ok(
        "CGuiManagerInGame::Scrooby::LoadProjectCallback virtual table",
    ),
    Ok(
        "CGuiManagerInGame::EventListener virtual table",
    ),
    Ok(
        "CGuiManagerInGame::Scrooby::GotoScreenCallback virtual table",
    ),
    Ok(
        "CGuiManagerInGame virtual table",
    ),
    Ok(
        "GuiSFX::RestartCurrentMission virtual table",
    ),
    Ok(
        "GuiSFX::OpenIris virtual table",
    ),
    Ok(
        "GuiSFX::AbortCurrentMission virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCameraAnimationController> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEntity> virtual table",
    ),
    Ok(
        "GameDataSaveCallback virtual table",
    ),
    Ok(
        "IMemoryCardInfoLoadCallback virtual table",
    ),
    Ok(
        "HudItemDropped virtual table",
    ),
    Ok(
        "HudWaspDestroyed virtual table",
    ),
    Ok(
        "HudHitNRun virtual table",
    ),
    Ok(
        "HudCountDown virtual table",
    ),
    Ok(
        "HudMissionObjective virtual table",
    ),
    Ok(
        "HudMissionProgress virtual table",
    ),
    Ok(
        "HudCoinCollected virtual table",
    ),
    Ok(
        "HudCardCollected virtual table",
    ),
    Ok(
        "HudEventHandler virtual table",
    ),
    Ok(
        "ScrollingText virtual table",
    ),
    Ok(
        "GuiSFX::UnderdampedTranslator virtual table",
    ),
    Ok(
        "GuiSFX::Translator virtual table",
    ),
    Ok(
        "GuiSFX::Spin virtual table",
    ),
    Ok(
        "GuiSFX::PulseScale virtual table",
    ),
    Ok(
        "GuiSFX::ImageCycler virtual table",
    ),
    Ok(
        "GuiSFX::ResumeGame virtual table",
    ),
    Ok(
        "GuiSFX::PauseGame virtual table",
    ),
    Ok(
        "GuiSFX::PauseInFrames virtual table",
    ),
    Ok(
        "GuiSFX::Pause virtual table",
    ),
    Ok(
        "GuiSFX::Show virtual table",
    ),
    Ok(
        "GuiSFX::IrisWipeClose virtual table",
    ),
    Ok(
        "GuiSFX::IrisWipeOpen virtual table",
    ),
    Ok(
        "GuiSFX::ColorChange virtual table",
    ),
    Ok(
        "GuiSFX::SwitchContext virtual table",
    ),
    Ok(
        "GuiSFX::SendEvent virtual table",
    ),
    Ok(
        "GuiSFX::RecieveEvent::EventListener virtual table",
    ),
    Ok(
        "GuiSFX::RecieveEvent virtual table",
    ),
    Ok(
        "GuiSFX::InputStateChange virtual table",
    ),
    Ok(
        "GuiSFX::Hide virtual table",
    ),
    Ok(
        "GuiSFX::GotoScreen virtual table",
    ),
    Ok(
        "GuiSFX::Dummy virtual table",
    ),
    Ok(
        "GuiSFX::Junction3 virtual table",
    ),
    Ok(
        "GuiSFX::Junction2 virtual table",
    ),
    Ok(
        "GuiSFX::Chainable3 virtual table",
    ),
    Ok(
        "GuiSFX::Chainable2 virtual table",
    ),
    Ok(
        "GuiSFX::Chainable1 virtual table",
    ),
    Ok(
        "GuiSFX::Chainable virtual table",
    ),
    Ok(
        "GuiSFX::Transition virtual table",
    ),
    Ok(
        "CTeleTypeText virtual table",
    ),
    Ok(
        "ImageSlider virtual table",
    ),
    Ok(
        "Slider virtual table",
    ),
    Ok(
        "CHudMap virtual table",
    ),
    Ok(
        "HudMapCam virtual table",
    ),
    Ok(
        "TransitionEvent virtual table",
    ),
    Ok(
        "NISEvent virtual table",
    ),
    Ok(
        "FMVEvent virtual table",
    ),
    Ok(
        "PresentationEvent virtual table",
    ),
    Ok(
        "WorldScene virtual table",
    ),
    Ok(
        "SphereSP virtual table",
    ),
    Ok(
        "SpatialTree virtual table",
    ),
    Ok(
        "HexahedronP virtual table",
    ),
    Ok(
        "BoxPts virtual table",
    ),
    Ok(
        "StatePropDSG::CStatePropListener virtual table",
    ),
    Ok(
        "StatePropDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "StatePropDSG virtual table",
    ),
    Ok(
        "AnimDynaPhysWrapper virtual table",
    ),
    Ok(
        "InstAnimDynaPhysDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "InstAnimDynaPhysDSG virtual table",
    ),
    Ok(
        "WorldSphereDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "WorldSphereDSG virtual table",
    ),
    Ok(
        "LensFlareDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "LensFlareDSG virtual table",
    ),
    Ok(
        "InstStatPhysDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "InstStatPhysDSG virtual table",
    ),
    Ok(
        "BreakableObjectDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "BreakableObjectDSG virtual table",
    ),
    Ok(
        "FenceEntityDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "FenceEntityDSG virtual table",
    ),
    Ok(
        "IntersectDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "IntersectDSG virtual table",
    ),
    Ok(
        "AnimEntityDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "AnimEntityDSG virtual table",
    ),
    Ok(
        "InstStatEntityDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "InstStatEntityDSG virtual table",
    ),
    Ok(
        "StaticEntityDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "StaticEntityDSG virtual table",
    ),
    Ok(
        "InstDynaPhysDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "InstDynaPhysDSG virtual table",
    ),
    Ok(
        "DynaPhysDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "DynaPhysDSG virtual table",
    ),
    Ok(
        "StaticPhysDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "StaticPhysDSG virtual table",
    ),
    Ok(
        "AnimCollisionEntityDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "AnimCollisionEntityDSG virtual table",
    ),
    Ok(
        "CollisionEntityDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "CollisionEntityDSG virtual table",
    ),
    Ok(
        "CollisionAttributes virtual table",
    ),
    Ok(
        "IEntityDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "IEntityDSG virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::PhysicsObject> virtual table",
    ),
    Ok(
        "tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "BreakablesManager virtual table",
    ),
    Ok(
        "Skidmark::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "Skidmark virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tShader> virtual table",
    ),
    Ok(
        "LensFlareLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "LensFlareLoader virtual table",
    ),
    Ok(
        "BreakableObjectLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "BreakableObjectLoader virtual table",
    ),
    Ok(
        "InstParticleSystemLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "InstParticleSystemLoader virtual table",
    ),
    Ok(
        "BillboardWrappedLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "BillboardWrappedLoader virtual table",
    ),
    Ok(
        "AnimObjDSGWrapperLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "AnimObjDSGWrapperLoader virtual table",
    ),
    Ok(
        "AnimDynaPhysWrapperLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "AnimDynaPhysWrapperLoader virtual table",
    ),
    Ok(
        "AnimDynaPhysLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "AnimDynaPhysLoader virtual table",
    ),
    Ok(
        "WorldSphereLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "WorldSphereLoader virtual table",
    ),
    Ok(
        "InstStatEntityLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "InstStatEntityLoader virtual table",
    ),
    Ok(
        "InstStatPhysLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "InstStatPhysLoader virtual table",
    ),
    Ok(
        "DynaPhysLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "DynaPhysLoader virtual table",
    ),
    Ok(
        "AnimDSGLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "AnimDSGLoader virtual table",
    ),
    Ok(
        "AnimCollLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "AnimCollLoader virtual table",
    ),
    Ok(
        "IntersectLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "IntersectLoader virtual table",
    ),
    Ok(
        "FenceLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "FenceLoader virtual table",
    ),
    Ok(
        "TreeDSGLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "TreeDSGLoader virtual table",
    ),
    Ok(
        "StaticPhysLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "StaticPhysLoader virtual table",
    ),
    Ok(
        "StaticEntityLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "StaticEntityLoader virtual table",
    ),
    Ok(
        "GeometryWrappedLoader::IWrappedLoader virtual table",
    ),
    Ok(
        "GeometryWrappedLoader virtual table",
    ),
    Ok(
        "tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> virtual table",
    ),
    Ok(
        "tPtrArray<ParticleManager::ManagedParticleSystem *> virtual table",
    ),
    Ok(
        "tPtrDynamicArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > virtual table",
    ),
    Ok(
        "ParticleSystemDSG::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "ParticleSystemDSG virtual table",
    ),
    Ok(
        "tArray<ParticleManager::ManagedParticleSystem *> virtual table",
    ),
    Ok(
        "tArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > virtual table",
    ),
    Ok(
        "AnimEntityDSGManager virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<AnimEntityDSG> virtual table",
    ),
    Ok(
        "RenderFlow virtual table",
    ),
    Ok(
        "WorldRenderLayer virtual table",
    ),
    Ok(
        "RenderManager::EventListener virtual table",
    ),
    Ok(
        "RenderManager::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "RenderManager virtual table",
    ),
    Ok(
        "FrontEndRenderLayer virtual table",
    ),
    Ok(
        "RenderLayer virtual table",
    ),
    Ok(
        "ChunkListenerCallback virtual table",
    ),
    Ok(
        "RoadManager::AGAINST_TRAFFIC_COST_MULTIPLIER",
    ),
    Ok(
        "RoadSegment::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "RoadSegment virtual table",
    ),
    Ok(
        "RoadManager virtual table",
    ),
    Ok(
        "Lane::ILaneControl virtual table",
    ),
    Ok(
        "Lane virtual table",
    ),
    Ok(
        "CourtesyStop virtual table",
    ),
    Ok(
        "NWayStop virtual table",
    ),
    Ok(
        "TrafficLight virtual table",
    ),
    Ok(
        "TrafficControl virtual table",
    ),
    Ok(
        "ILaneControl virtual table",
    ),
    Ok(
        "ILaneInformation virtual table",
    ),
    Ok(
        "SoundRenderingPlayerCallback::radRefCount virtual table",
    ),
    Ok(
        "SoundRenderingPlayerCallback virtual table",
    ),
    Ok(
        "SoundManager::GameDataHandler virtual table",
    ),
    Ok(
        "SoundManager virtual table",
    ),
    Ok(
        "PositionalSoundPlayer virtual table",
    ),
    Ok(
        "PositionCarrier virtual table",
    ),
    Ok(
        "SoundLoader virtual table",
    ),
    Ok(
        "SoundCluster::radRefCount virtual table",
    ),
    Ok(
        "SoundCluster virtual table",
    ),
    Ok(
        "SimpsonsSoundPlayer virtual table",
    ),
    Ok(
        "Listener virtual table",
    ),
    Ok(
        "_Alloc_traits<DialogQueueElement *, s2alloc<DialogQueueElement *> >::_S_instanceless",
    ),
    Ok(
        "Sound::IDaSoundDynaLoadCompletionCallback virtual table",
    ),
    Ok(
        "Sound::IDaSoundPlayerState virtual table",
    ),
    Ok(
        "SkidEngineState virtual table",
    ),
    Ok(
        "IdleEngineState virtual table",
    ),
    Ok(
        "ReverseEngineState virtual table",
    ),
    Ok(
        "InAirEngineState virtual table",
    ),
    Ok(
        "DownshiftEngineState virtual table",
    ),
    Ok(
        "UpshiftEngineState virtual table",
    ),
    Ok(
        "NormalEngineState virtual table",
    ),
    Ok(
        "EngineState virtual table",
    ),
    Ok(
        "carSoundParameters::radRefCount virtual table",
    ),
    Ok(
        "carSoundParameters virtual table",
    ),
    Ok(
        "SoundAvatar virtual table",
    ),
    Ok(
        "VehicleSoundPlayer virtual table",
    ),
    Ok(
        "VehicleSoundDebugPage virtual table",
    ),
    Ok(
        "AvatarSoundPlayer virtual table",
    ),
    Ok(
        "ICarSoundParameters virtual table",
    ),
    Ok(
        "SimpsonsSoundPlayerCallback virtual table",
    ),
    Ok(
        "DialogCoordinator virtual table",
    ),
    Ok(
        "DialogPriorityQueue::DialogCompleteCallback virtual table",
    ),
    Ok(
        "DialogPriorityQueue virtual table",
    ),
    Ok(
        "DialogSoundDebugPage virtual table",
    ),
    Ok(
        "DialogQueueElement::radRefCount virtual table",
    ),
    Ok(
        "DialogQueueElement::SimpsonsSoundPlayerCallback virtual table",
    ),
    Ok(
        "DialogQueueElement virtual table",
    ),
    Ok(
        "DialogList virtual table",
    ),
    Ok(
        "ConversationMatcher virtual table",
    ),
    Ok(
        "DialogSelectionGroup virtual table",
    ),
    Ok(
        "DialogLine virtual table",
    ),
    Ok(
        "Conversation virtual table",
    ),
    Ok(
        "PlayableDialog virtual table",
    ),
    Ok(
        "SelectableDialog virtual table",
    ),
    Ok(
        "_Alloc_traits<SelectableDialog *, s2alloc<SelectableDialog *> >::_S_instanceless",
    ),
    Ok(
        "DialogCompleteCallback virtual table",
    ),
    Ok(
        "DialogLineCompleteCallback virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<radmusic::radload_composition_adapter> virtual table",
    ),
    Ok(
        "MusicPlayer virtual table",
    ),
    Ok(
        "NISSoundPlayer virtual table",
    ),
    Ok(
        "NISPlayerGroup virtual table",
    ),
    Ok(
        "reverbSettings::radRefCount virtual table",
    ),
    Ok(
        "reverbSettings virtual table",
    ),
    Ok(
        "positionalSoundSettings::radRefCount virtual table",
    ),
    Ok(
        "positionalSoundSettings virtual table",
    ),
    Ok(
        "PS2ReverbController virtual table",
    ),
    Ok(
        "ReverbController virtual table",
    ),
    Ok(
        "SoundFXPauseLogic::SimpsonsSoundPlayerCallback virtual table",
    ),
    Ok(
        "SoundFXPauseLogic virtual table",
    ),
    Ok(
        "SoundFXGameplayLogic::SimpsonsSoundPlayerCallback virtual table",
    ),
    Ok(
        "SoundFXGameplayLogic virtual table",
    ),
    Ok(
        "SoundFXFrontEndLogic::SimpsonsSoundPlayerCallback virtual table",
    ),
    Ok(
        "SoundFXFrontEndLogic virtual table",
    ),
    Ok(
        "SoundFXLogic::SimpsonsSoundPlayerCallback virtual table",
    ),
    Ok(
        "SoundFXLogic virtual table",
    ),
    Ok(
        "SoundEffectPlayer virtual table",
    ),
    Ok(
        "IReverbSettings virtual table",
    ),
    Ok(
        "IPositionalSoundSettings virtual table",
    ),
    Ok(
        "Sound::daSoundTuner::radRefCount virtual table",
    ),
    Ok(
        "Sound::daSoundTuner virtual table",
    ),
    Ok(
        "Sound::daSoundTuner_ActiveFadeInfo virtual table",
    ),
    Ok(
        "TunerDebugPage virtual table",
    ),
    Ok(
        "SoundResourceFilenameBuilder virtual table",
    ),
    Ok(
        "Fader virtual table",
    ),
    Ok(
        "Sound::daSoundRenderingManager virtual table",
    ),
    Ok(
        "Sound::daSoundPlayerManager::radRefCount virtual table",
    ),
    Ok(
        "Sound::daSoundPlayerManager virtual table",
    ),
    Ok(
        "Sound::daSoundAsyncFadeCallback virtual table",
    ),
    Ok(
        "Sound::MusicSoundPlayer::radRefCount virtual table",
    ),
    Ok(
        "Sound::MusicSoundPlayer virtual table",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::IRadSoundStitchCallback virtual table",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer::radRefCount virtual table",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer virtual table",
    ),
    Ok(
        "Sound::daSoundPlayerBase::radRefCount virtual table",
    ),
    Ok(
        "Sound::daSoundPlayerBase virtual table",
    ),
    Ok(
        "Sound::daSoundAllocatedResource virtual table",
    ),
    Ok(
        "Sound::daSoundDynaLoadManager virtual table",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion virtual table",
    ),
    Ok(
        "Sound::daSoundResourceManager::radRefCount virtual table",
    ),
    Ok(
        "Sound::daSoundResourceManager virtual table",
    ),
    Ok(
        "daSoundResourceData virtual table",
    ),
    Ok(
        "IDaSoundResource virtual table",
    ),
    Ok(
        "Sound::IDaSoundTuner virtual table",
    ),
    Ok(
        "Sound::IDaSoundFadeState virtual table",
    ),
    Ok(
        "IRadSoundStitchCallback virtual table",
    ),
    Ok(
        "IDaSoundResourceData virtual table",
    ),
    Ok(
        "Sound::IDaSoundWiring virtual table",
    ),
    Ok(
        "globalSettings::radRefCount virtual table",
    ),
    Ok(
        "globalSettings virtual table",
    ),
    Ok(
        "IGlobalSettings virtual table",
    ),
    Ok(
        "SoundDebugPage virtual table",
    ),
    Ok(
        "SoundDebugDisplay virtual table",
    ),
    Ok(
        "MovingSoundManager virtual table",
    ),
    Ok(
        "AnimObjSoundPlayer virtual table",
    ),
    Ok(
        "PlatformSoundPlayer virtual table",
    ),
    Ok(
        "WaspSoundPlayer::EventListener virtual table",
    ),
    Ok(
        "WaspSoundPlayer::SimpsonsSoundPlayerCallback virtual table",
    ),
    Ok(
        "WaspSoundPlayer virtual table",
    ),
    Ok(
        "ActorPlayer::SimpsonsSoundPlayerCallback virtual table",
    ),
    Ok(
        "ActorPlayer virtual table",
    ),
    Ok(
        "AvatarVehiclePosnPlayer::EventListener virtual table",
    ),
    Ok(
        "AvatarVehiclePosnPlayer virtual table",
    ),
    Ok(
        "AIVehicleSoundPlayer virtual table",
    ),
    Ok(
        "TrafficSoundPlayer::IRadTimerCallback virtual table",
    ),
    Ok(
        "TrafficSoundPlayer virtual table",
    ),
    Ok(
        "VehiclePositionalSoundPlayer virtual table",
    ),
    Ok(
        "WorldObject virtual table",
    ),
    Ok(
        "WorldCollisionSolverAgentManager virtual table",
    ),
    Ok(
        "HitnRunManager virtual table",
    ),
    Ok(
        "AvatarManager virtual table",
    ),
    Ok(
        "VehicleCentral virtual table",
    ),
    Ok(
        "Avatar virtual table",
    ),
    Ok(
        "CoinManager::ICheatEnteredCallback virtual table",
    ),
    Ok(
        "CoinManager virtual table",
    ),
    Ok(
        "CameraRelativeCharacterControllerEventHandler virtual table",
    ),
    Ok(
        "AmbientDialogueTrigger::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "AmbientDialogueTrigger virtual table",
    ),
    Ok(
        "AmbientDialogueButton virtual table",
    ),
    Ok(
        "CharacterTarget::IHudMapIconLocator virtual table",
    ),
    Ok(
        "CharacterTarget virtual table",
    ),
    Ok(
        "InCarCharacterMappable virtual table",
    ),
    Ok(
        "BipedCharacterMappable virtual table",
    ),
    Ok(
        "CharacterMappable virtual table",
    ),
    Ok(
        "Wander virtual table",
    ),
    Ok(
        "CharacterManager::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "CharacterManager virtual table",
    ),
    Ok(
        "NPCharacter::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "NPCharacter virtual table",
    ),
    Ok(
        "Character::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "Character virtual table",
    ),
    Ok(
        "ISuperCamTarget virtual table",
    ),
    Ok(
        "AICharacterController virtual table",
    ),
    Ok(
        "CameraRelativeCharacterController virtual table",
    ),
    Ok(
        "PhysicalController virtual table",
    ),
    Ok(
        "NPCController virtual table",
    ),
    Ok(
        "CharacterController virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Bank> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tSkeleton> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tDrawablePose> virtual table",
    ),
    Ok(
        "TrafficLocomotion::SECONDS_BETW_HISTORY_UPDATES",
    ),
    Ok(
        "VehicleEventListener virtual table",
    ),
    Ok(
        "TrafficLocomotion virtual table",
    ),
    Ok(
        "SuspensionJointDriver virtual table",
    ),
    Ok(
        "RootMatrixDriver virtual table",
    ),
    Ok(
        "RedBrickCollisionSolverAgent virtual table",
    ),
    Ok(
        "PhysicsLocomotion virtual table",
    ),
    Ok(
        "VehicleLocomotion virtual table",
    ),
    Ok(
        "sim::PhysicsJointInertialEffector virtual table",
    ),
    Ok(
        "sim::PhysicsJointMatrixModifier virtual table",
    ),
    Ok(
        "TrafficBodyDrawable virtual table",
    ),
    Ok(
        "Vehicle::IHudMapIconLocator virtual table",
    ),
    Ok(
        "Vehicle::ISuperCamTarget virtual table",
    ),
    Ok(
        "Vehicle::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "Vehicle virtual table",
    ),
    Ok(
        "WorldCollisionSolverAgent virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tPoseAnimationController> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEffectController> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tBillboardQuadGroup> virtual table",
    ),
    Ok(
        "VehicleMappable virtual table",
    ),
    Ok(
        "HumanVehicleController::EventListener virtual table",
    ),
    Ok(
        "HumanVehicleController virtual table",
    ),
    Ok(
        "VehicleWander virtual table",
    ),
    Ok(
        "AiVehicleController virtual table",
    ),
    Ok(
        "VehicleController virtual table",
    ),
    Ok(
        "TrafficManager::FADE_RADIUS",
    ),
    Ok(
        "TrafficManager::CENTER_OFFSET",
    ),
    Ok(
        "TrafficManager::ADD_RADIUS",
    ),
    Ok(
        "TrafficManager::REMOVE_RADIUS",
    ),
    Ok(
        "TrafficManager::INITIAL_ADD_RADIUS",
    ),
    Ok(
        "TrafficManager::MILLISECONDS_BETWEEN_REMOVE",
    ),
    Ok(
        "TrafficManager::MILLISECONDS_BETWEEN_ADD",
    ),
    Ok(
        "TrafficManager::MILLISECONDS_POPULATE_WORLD",
    ),
    Ok(
        "TrafficManager::EventListener virtual table",
    ),
    Ok(
        "TrafficManager virtual table",
    ),
    Ok(
        "TrafficVehicle virtual table",
    ),
    Ok(
        "ITrafficSpawnController virtual table",
    ),
    Ok(
        "PathManager virtual table",
    ),
    Ok(
        "PathSegment::tDrawable::ShaderCallback virtual table",
    ),
    Ok(
        "PathSegment virtual table",
    ),
    Ok(
        "PedestrianManager::FADE_RADIUS",
    ),
    Ok(
        "PedestrianManager::CENTER_OFFSET",
    ),
    Ok(
        "PedestrianManager::ADD_RADIUS",
    ),
    Ok(
        "PedestrianManager::REMOVE_RADIUS",
    ),
    Ok(
        "PedestrianManager::INITIAL_ADD_RADIUS",
    ),
    Ok(
        "PedestrianManager::MILLISECONDS_PER_GROUND_INTERSECT",
    ),
    Ok(
        "PedestrianManager::MILLISECONDS_BETW_ADDS",
    ),
    Ok(
        "PedestrianManager::MILLISECONDS_BETW_REMOVES",
    ),
    Ok(
        "PedestrianManager::MILLISECONDS_POPULATE_WORLD",
    ),
    Ok(
        "PedestrianManager virtual table",
    ),
    Ok(
        "Pedestrian virtual table",
    ),
    Ok(
        "SpawnManager virtual table",
    ),
    Ok(
        "ChaseManager::EventListener virtual table",
    ),
    Ok(
        "ChaseManager virtual table",
    ),
    Ok(
        "CStatePropDataLoader virtual table",
    ),
    Ok(
        "CStatePropData virtual table",
    ),
    Ok(
        "CStateProp virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimatedObjectFactory> virtual table",
    ),
    Ok(
        "TractorBeam virtual table",
    ),
    Ok(
        "Weapon virtual table",
    ),
    Ok(
        "UFO::EventListener virtual table",
    ),
    Ok(
        "UFO virtual table",
    ),
    Ok(
        "Boss virtual table",
    ),
    Ok(
        "_Alloc_traits<MapElement<float, int>, s2alloc<MapElement<float, int> > >::_S_instanceless",
    ),
    Ok(
        "ParkedCarManager::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "ParkedCarManager virtual table",
    ),
    Ok(
        "SuperSprintFEContext::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "SuperSprintFEContext virtual table",
    ),
    Ok(
        "SuperSprintContext virtual table",
    ),
    Ok(
        "LoadingSuperSprintContext::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "LoadingSuperSprintContext virtual table",
    ),
    Ok(
        "SuperSprintData::NUM_CHARACTER_NAMES",
    ),
    Ok(
        "SuperSprintData::VEHICLE_NAMES",
    ),
    Ok(
        "SuperSprintData::NUM_NAMES",
    ),
    Ok(
        "SuperSprintManager::LoadingManager::ProcessRequestsCallback virtual table",
    ),
    Ok(
        "SuperSprintManager::PresentationEvent::PresentationEventCallBack virtual table",
    ),
    Ok(
        "SuperSprintManager::GameplayManager virtual table",
    ),
    Ok(
        "SuperSprintManager virtual table",
    ),
    Ok(
        "SuperSprintDrawable virtual table",
    ),
    Ok(
        "choreo::AnimationFootDriver virtual table",
    ),
    Ok(
        "choreo::AnimationJointDriver virtual table",
    ),
    Ok(
        "choreo::AnimationRootDriver virtual table",
    ),
    Ok(
        "choreo::AnimationFrame virtual table",
    ),
    Ok(
        "choreo::AnimationDriver virtual table",
    ),
    Ok(
        "choreo::Animation virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Partition> virtual table",
    ),
    Ok(
        "choreo::FootBlendDriver virtual table",
    ),
    Ok(
        "choreo::JointBlendDriver virtual table",
    ),
    Ok(
        "choreo::RootBlendDriver virtual table",
    ),
    Ok(
        "choreo::PuppetDriverFactory virtual table",
    ),
    Ok(
        "choreo::PuppetDriver virtual table",
    ),
    Ok(
        "choreo::Driver virtual table",
    ),
    Ok(
        "choreo::Bank virtual table",
    ),
    Ok(
        "choreo::Bank::RawIterator virtual table",
    ),
    Ok(
        "tEntityTable virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Rig> virtual table",
    ),
    Ok(
        "choreo::BaseBank virtual table",
    ),
    Ok(
        "choreo::BaseBank::RawIterator virtual table",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank virtual table",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::RawIterator virtual table",
    ),
    Ok(
        "choreo::P3DEntityStoreWrapperBank virtual table",
    ),
    Ok(
        "choreo::MultiBank virtual table",
    ),
    Ok(
        "choreo::FootBlenderPoleVectorSimTarget virtual table",
    ),
    Ok(
        "choreo::FootBlenderEffectorSimTarget virtual table",
    ),
    Ok(
        "choreo::Engine virtual table",
    ),
    Ok(
        "choreo::FootBlender virtual table",
    ),
    Ok(
        "choreo::FootPlanter virtual table",
    ),
    Ok(
        "choreo::JointBlender virtual table",
    ),
    Ok(
        "choreo::ChoreoChunkHandler virtual table",
    ),
    Ok(
        "choreo::ChoreoScriptHandler virtual table",
    ),
    Ok(
        "radLoadFileLoader virtual table",
    ),
    Ok(
        "choreo::LocomotionRootDriver virtual table",
    ),
    Ok(
        "choreo::LocomotionDriver virtual table",
    ),
    Ok(
        "choreo::Locomotion virtual table",
    ),
    Ok(
        "choreo::LocomotionSlot virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Transition> virtual table",
    ),
    Ok(
        "choreo::LODPartition virtual table",
    ),
    Ok(
        "choreo::CompletePartition virtual table",
    ),
    Ok(
        "choreo::IntersectPartition virtual table",
    ),
    Ok(
        "choreo::UnionPartition virtual table",
    ),
    Ok(
        "choreo::ExclusivePartition virtual table",
    ),
    Ok(
        "choreo::InclusivePartition virtual table",
    ),
    Ok(
        "choreo::Partition virtual table",
    ),
    Ok(
        "choreo::Puppet virtual table",
    ),
    Ok(
        "choreo::ReplayDriverInternal virtual table",
    ),
    Ok(
        "choreo::ReplayBuffer virtual table",
    ),
    Ok(
        "choreo::ReplayDriver virtual table",
    ),
    Ok(
        "choreo::Replay virtual table",
    ),
    Ok(
        "choreo::ReplayBlendDriver virtual table",
    ),
    Ok(
        "choreo::ReplayBlender virtual table",
    ),
    Ok(
        "choreo::Rig virtual table",
    ),
    Ok(
        "choreo::RigLeg virtual table",
    ),
    Ok(
        "choreo::RootDriverInternal virtual table",
    ),
    Ok(
        "choreo::RootDriver virtual table",
    ),
    Ok(
        "choreo::RootTransformController virtual table",
    ),
    Ok(
        "choreo::RootRotationController virtual table",
    ),
    Ok(
        "choreo::RootPositionController virtual table",
    ),
    Ok(
        "choreo::RootController virtual table",
    ),
    Ok(
        "choreo::RootFixupDriver virtual table",
    ),
    Ok(
        "choreo::RootBlender virtual table",
    ),
    Ok(
        "choreo::ScriptReader virtual table",
    ),
    Ok(
        "choreo::FTTFileReader virtual table",
    ),
    Ok(
        "choreo::P3DFileReader virtual table",
    ),
    Ok(
        "choreo::StringFileReader virtual table",
    ),
    Ok(
        "choreo::FileReader virtual table",
    ),
    Ok(
        "choreo::SynchronizationRootDriver virtual table",
    ),
    Ok(
        "choreo::SynchronizationDriver virtual table",
    ),
    Ok(
        "choreo::Transition virtual table",
    ),
    Ok(
        "choreo::BlendFootDriver virtual table",
    ),
    Ok(
        "choreo::BlendJointDriver virtual table",
    ),
    Ok(
        "choreo::BlendPhase virtual table",
    ),
    Ok(
        "choreo::BlendDriver virtual table",
    ),
    Ok(
        "choreo::Blend virtual table",
    ),
    Ok(
        "choreo::BlendSlotFootInfo virtual table",
    ),
    Ok(
        "choreo::BlendSlot virtual table",
    ),
    Ok(
        "sim::CollisionManager virtual table",
    ),
    Ok(
        "sim::TList<sim::CollisionObject *> virtual table",
    ),
    Ok(
        "sim::CollisionObjectLoader virtual table",
    ),
    Ok(
        "sim::CollisionObject virtual table",
    ),
    Ok(
        "sim::BBoxVolume virtual table",
    ),
    Ok(
        "sim::WallVolume virtual table",
    ),
    Ok(
        "sim::OBBoxVolume virtual table",
    ),
    Ok(
        "sim::CylinderVolume virtual table",
    ),
    Ok(
        "sim::SphereVolume virtual table",
    ),
    Ok(
        "sim::TList<sim::CollisionVolume *> virtual table",
    ),
    Ok(
        "sim::CollisionVolume virtual table",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver virtual table",
    ),
    Ok(
        "sim::CollisionSolverAgent virtual table",
    ),
    Ok(
        "sim::PhysicsProperties::sim::SimUnits virtual table",
    ),
    Ok(
        "sim::PhysicsProperties virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::PhysicsProperties> virtual table",
    ),
    Ok(
        "sim::TList<sim::SimUnits *> virtual table",
    ),
    Ok(
        "sim::SimSpeed virtual table",
    ),
    Ok(
        "sim::SimLength virtual table",
    ),
    Ok(
        "sim::SimTime virtual table",
    ),
    Ok(
        "sim::SimEnvironment::sim::SimUnits virtual table",
    ),
    Ok(
        "sim::SimEnvironment virtual table",
    ),
    Ok(
        "sim::SimUnits virtual table",
    ),
    Ok(
        "sim::SimCGSValue virtual table",
    ),
    Ok(
        "sim::SimState virtual table",
    ),
    Ok(
        "sim::ManualSimState virtual table",
    ),
    Ok(
        "sim::SimStateArticulated virtual table",
    ),
    Ok(
        "sim::TList<sim::JointVirtualCM *> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::SkeletonInfo> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::ArticulatedPhysicsObject> virtual table",
    ),
    Ok(
        "sim::SimJntMatTarget virtual table",
    ),
    Ok(
        "sim::SimMatrixTarget virtual table",
    ),
    Ok(
        "sim::SimVectorTarget virtual table",
    ),
    Ok(
        "sim::SimTarget virtual table",
    ),
    Ok(
        "sim::SimulatedObject virtual table",
    ),
    Ok(
        "sim::tExportInfoLoader virtual table",
    ),
    Ok(
        "sim::tExportInfo virtual table",
    ),
    Ok(
        "sim::SimUnitsManager virtual table",
    ),
    Ok(
        "sim::SkeletonInfo virtual table",
    ),
    Ok(
        "sim::SymMatrix virtual table",
    ),
    Ok(
        "sim::VoidPList virtual table",
    ),
    Ok(
        "sim::PhysicsObjectLoader virtual table",
    ),
    Ok(
        "sim::PhysicsObject virtual table",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject virtual table",
    ),
    Ok(
        "sim::PhysicsJoint3D virtual table",
    ),
    Ok(
        "sim::PhysicsJoint1D virtual table",
    ),
    Ok(
        "sim::PhysicsJoint0D virtual table",
    ),
    Ok(
        "sim::PhysicsJoint virtual table",
    ),
    Ok(
        "sim::TList<sim::PhysicsJoint *> virtual table",
    ),
    Ok(
        "sim::JointVirtualCM virtual table",
    ),
    Ok(
        "sim::VirtualCM virtual table",
    ),
    Ok(
        "sim::CollisionAnalyser virtual table",
    ),
    Ok(
        "sim::CollisionDetector virtual table",
    ),
    Ok(
        "sim::SubCollisionDetector virtual table",
    ),
    Ok(
        "sim::DoubleKalmann1D virtual table",
    ),
    Ok(
        "sim::Kalmann1D virtual table",
    ),
    Ok(
        "sim::SimpleFilterAbs3D virtual table",
    ),
    Ok(
        "sim::SimpleFilter3D virtual table",
    ),
    Ok(
        "sim::SimpleFilter1D virtual table",
    ),
    Ok(
        "poser::Pose virtual table",
    ),
    Ok(
        "poser::PoseDriver virtual table",
    ),
    Ok(
        "poser::PoseEngine virtual table",
    ),
    Ok(
        "FeTextBibleLoader virtual table",
    ),
    Ok(
        "FeProjectFileHandler virtual table",
    ),
    Ok(
        "FePage::Scrooby::Page virtual table",
    ),
    Ok(
        "FePage::Scrooby::Owner virtual table",
    ),
    Ok(
        "FePage::FeParent virtual table",
    ),
    Ok(
        "FePage::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FePage virtual table",
    ),
    Ok(
        "rVector<int> virtual table",
    ),
    Ok(
        "Scrooby::Page virtual table",
    ),
    Ok(
        "Scrooby::Page::Scrooby::Owner virtual table",
    ),
    Ok(
        "Scrooby::Page::Scrooby::Drawable virtual table",
    ),
    Ok(
        "Scrooby::Owner virtual table",
    ),
    Ok(
        "Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeParent virtual table",
    ),
    Ok(
        "FeParent::Scrooby::Owner virtual table",
    ),
    Ok(
        "FePolygon::Scrooby::Polygon virtual table",
    ),
    Ok(
        "FePolygon::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FePolygon virtual table",
    ),
    Ok(
        "Scrooby::Polygon virtual table",
    ),
    Ok(
        "Scrooby::Polygon::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeProject::Scrooby::Project virtual table",
    ),
    Ok(
        "FeProject::Scrooby::Owner virtual table",
    ),
    Ok(
        "FeProject::Scrooby::ResourceManagerCallback virtual table",
    ),
    Ok(
        "FeProject::FeParent virtual table",
    ),
    Ok(
        "FeProject virtual table",
    ),
    Ok(
        "Scrooby::ResourceManagerCallback virtual table",
    ),
    Ok(
        "Scrooby::Project virtual table",
    ),
    Ok(
        "FePure3dObject::Scrooby::Pure3dObject virtual table",
    ),
    Ok(
        "FePure3dObject::Scrooby::Owner virtual table",
    ),
    Ok(
        "FePure3dObject::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "FePure3dObject::Scrooby::BoundedDrawable virtual table",
    ),
    Ok(
        "FePure3dObject::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FePure3dObject::FeParent virtual table",
    ),
    Ok(
        "FePure3dObject virtual table",
    ),
    Ok(
        "Scrooby::Pure3dObject virtual table",
    ),
    Ok(
        "Scrooby::Pure3dObject::Scrooby::Drawable virtual table",
    ),
    Ok(
        "Scrooby::Pure3dObject::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "Scrooby::Pure3dObject::Scrooby::BoundedDrawable virtual table",
    ),
    Ok(
        "Scrooby::BoundedDrawable virtual table",
    ),
    Ok(
        "Scrooby::BoundedDrawable::Scrooby::Drawable virtual table",
    ),
    Ok(
        "Scrooby::BoundedDrawable::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "Scrooby::HasBoundingBox::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeScreen::Scrooby::Screen virtual table",
    ),
    Ok(
        "FeScreen::Scrooby::Owner virtual table",
    ),
    Ok(
        "FeScreen::FeParent virtual table",
    ),
    Ok(
        "FeScreen::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeScreen virtual table",
    ),
    Ok(
        "Scrooby::Screen virtual table",
    ),
    Ok(
        "Scrooby::Screen::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeSprite::Scrooby::Sprite virtual table",
    ),
    Ok(
        "FeSprite::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "FeSprite::Scrooby::BoundedDrawable virtual table",
    ),
    Ok(
        "FeSprite::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeSprite virtual table",
    ),
    Ok(
        "rVector<PascalCString *> virtual table",
    ),
    Ok(
        "Scrooby::Sprite virtual table",
    ),
    Ok(
        "Scrooby::Sprite::Scrooby::Drawable virtual table",
    ),
    Ok(
        "Scrooby::Sprite::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "Scrooby::Sprite::Scrooby::BoundedDrawable virtual table",
    ),
    Ok(
        "FeTextChildTextBibleString virtual table",
    ),
    Ok(
        "FeTextChildHardCodedString virtual table",
    ),
    Ok(
        "FeTextChildString virtual table",
    ),
    Ok(
        "FeText::Scrooby::Text virtual table",
    ),
    Ok(
        "FeText::Scrooby::Owner virtual table",
    ),
    Ok(
        "FeText::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "FeText::Scrooby::BoundedDrawable virtual table",
    ),
    Ok(
        "FeText::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeText::FeParent virtual table",
    ),
    Ok(
        "FeText virtual table",
    ),
    Ok(
        "Scrooby::Text virtual table",
    ),
    Ok(
        "Scrooby::Text::Scrooby::Drawable virtual table",
    ),
    Ok(
        "Scrooby::Text::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "Scrooby::Text::Scrooby::BoundedDrawable virtual table",
    ),
    Ok(
        "FeTextBible::Scrooby::TextBible virtual table",
    ),
    Ok(
        "FeTextBible virtual table",
    ),
    Ok(
        "rVector<FeLanguage *> virtual table",
    ),
    Ok(
        "Scrooby::TextBible virtual table",
    ),
    Ok(
        "FeTextStyle virtual table",
    ),
    Ok(
        "tLinearTable virtual table",
    ),
    Ok(
        "FeEntityDummy virtual table",
    ),
    Ok(
        "FeResourceManager::Scrooby::ResourceManager virtual table",
    ),
    Ok(
        "FeResourceManager virtual table",
    ),
    Ok(
        "rVector<FeResourceManager::Pure3dAttributesEntry *> virtual table",
    ),
    Ok(
        "rVector<FeResourceManager::AliasEntry *> virtual table",
    ),
    Ok(
        "rVector<FeResourceManager::ResourceEntry *> virtual table",
    ),
    Ok(
        "FeResourceManager::Pure3dAttributesEntry virtual table",
    ),
    Ok(
        "FeResourceManager::AliasEntry virtual table",
    ),
    Ok(
        "FeResourceManager::ResourceEntry virtual table",
    ),
    Ok(
        "FeResourceManager::ResourceManagerEntryBase virtual table",
    ),
    Ok(
        "FeResourceManager::P3DCallback virtual table",
    ),
    Ok(
        "Scrooby::ResourceManager virtual table",
    ),
    Ok(
        "Scrooby::App virtual table",
    ),
    Ok(
        "XMLTree virtual table",
    ),
    Ok(
        "FeApp virtual table",
    ),
    Ok(
        "rVector<FeProject *> virtual table",
    ),
    Ok(
        "FeBoundedDrawable::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "FeBoundedDrawable::Scrooby::BoundedDrawable virtual table",
    ),
    Ok(
        "FeBoundedDrawable virtual table",
    ),
    Ok(
        "FeBoundedDrawable::Scrooby::Drawable virtual table",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler virtual table",
    ),
    Ok(
        "FeDrawable::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeDrawable virtual table",
    ),
    Ok(
        "FeEntity virtual table",
    ),
    Ok(
        "FeGroup::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "FeGroup::Scrooby::Group virtual table",
    ),
    Ok(
        "FeGroup::Scrooby::Owner virtual table",
    ),
    Ok(
        "FeGroup::FeParent virtual table",
    ),
    Ok(
        "FeGroup virtual table",
    ),
    Ok(
        "FeGroup::Scrooby::Drawable virtual table",
    ),
    Ok(
        "Scrooby::Group virtual table",
    ),
    Ok(
        "Scrooby::Group::Scrooby::Drawable virtual table",
    ),
    Ok(
        "Scrooby::Group::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "Scrooby::Group::Scrooby::Owner virtual table",
    ),
    Ok(
        "FeLanguage virtual table",
    ),
    Ok(
        "FeLayer::Scrooby::Owner virtual table",
    ),
    Ok(
        "FeLayer::FeParent virtual table",
    ),
    Ok(
        "FeLayer::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeLayer virtual table",
    ),
    Ok(
        "Scrooby::Layer::Scrooby::Owner virtual table",
    ),
    Ok(
        "Scrooby::Layer::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeMovie::Scrooby::Movie virtual table",
    ),
    Ok(
        "FeMovie::Scrooby::Owner virtual table",
    ),
    Ok(
        "FeMovie::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "FeMovie::Scrooby::BoundedDrawable virtual table",
    ),
    Ok(
        "FeMovie::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeMovie::FeParent virtual table",
    ),
    Ok(
        "FeMovie virtual table",
    ),
    Ok(
        "Scrooby::Movie virtual table",
    ),
    Ok(
        "Scrooby::Movie::Scrooby::Drawable virtual table",
    ),
    Ok(
        "Scrooby::Movie::Scrooby::HasBoundingBox virtual table",
    ),
    Ok(
        "Scrooby::Movie::Scrooby::BoundedDrawable virtual table",
    ),
    Ok(
        "FeOwner::Scrooby::Owner virtual table",
    ),
    Ok(
        "FeOwner::FeParent virtual table",
    ),
    Ok(
        "FeOwner::Scrooby::Drawable virtual table",
    ),
    Ok(
        "FeOwner virtual table",
    ),
    Ok(
        "XMLParser virtual table",
    ),
    Ok(
        "XMLNode virtual table",
    ),
    Ok(
        "rVector<XMLNode *> virtual table",
    ),
    Ok(
        "rVector<XMLAttribute *> virtual table",
    ),
    Ok(
        "tBillboardQuadGroupLoader virtual table",
    ),
    Ok(
        "tBillboardQuadGroup virtual table",
    ),
    Ok(
        "tPtrArray<tBillboardQuad *> virtual table",
    ),
    Ok(
        "tArray<tBillboardQuad *> virtual table",
    ),
    Ok(
        "tCamRelativeBillboardQuad virtual table",
    ),
    Ok(
        "tBillboardQuad virtual table",
    ),
    Ok(
        "tBMPHandler virtual table",
    ),
    Ok(
        "tCamera virtual table",
    ),
    Ok(
        "tCameraLoader virtual table",
    ),
    Ok(
        "tChunkFile virtual table",
    ),
    Ok(
        "RadcoreMemAdapt virtual table",
    ),
    Ok(
        "pddiExtMemRegistration::CallBack virtual table",
    ),
    Ok(
        "tShaderMatrixBroadcast virtual table",
    ),
    Ok(
        "tShaderVectorBroadcast virtual table",
    ),
    Ok(
        "tShaderTextureBroadcast virtual table",
    ),
    Ok(
        "tShaderColourBroadcast virtual table",
    ),
    Ok(
        "tShaderFloatBroadcast virtual table",
    ),
    Ok(
        "tShaderIntBroadcast virtual table",
    ),
    Ok(
        "tDrawable virtual table",
    ),
    Ok(
        "tEntity virtual table",
    ),
    Ok(
        "AdaptPDDI virtual table",
    ),
    Ok(
        "pddiDevice::MessageCallback virtual table",
    ),
    Ok(
        "tFileMem virtual table",
    ),
    Ok(
        "tFile virtual table",
    ),
    Ok(
        "tFont virtual table",
    ),
    Ok(
        "tGameAttrLoader virtual table",
    ),
    Ok(
        "tGameAttr virtual table",
    ),
    Ok(
        "tGeometryLoader virtual table",
    ),
    Ok(
        "tGeometry virtual table",
    ),
    Ok(
        "tPtrArray<tPrimGroup *> virtual table",
    ),
    Ok(
        "tArray<tPrimGroup *> virtual table",
    ),
    Ok(
        "tImageLoader virtual table",
    ),
    Ok(
        "tImage8 virtual table",
    ),
    Ok(
        "tImage virtual table",
    ),
    Ok(
        "TextureBuilder virtual table",
    ),
    Ok(
        "ImageBuilder virtual table",
    ),
    Ok(
        "tImageHandler virtual table",
    ),
    Ok(
        "tImageHandler::Builder virtual table",
    ),
    Ok(
        "tImageFontLoader virtual table",
    ),
    Ok(
        "tImageFont virtual table",
    ),
    Ok(
        "tSafeCasterObj virtual table",
    ),
    Ok(
        "tInventory virtual table",
    ),
    Ok(
        "tEntityStore virtual table",
    ),
    Ok(
        "tLightGroup virtual table",
    ),
    Ok(
        "tPtrArray<tLight *> virtual table",
    ),
    Ok(
        "tArray<tLight *> virtual table",
    ),
    Ok(
        "tLight virtual table",
    ),
    Ok(
        "tLightGroupLoader virtual table",
    ),
    Ok(
        "tLightLoader virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tLight> virtual table",
    ),
    Ok(
        "tLocatorLoader virtual table",
    ),
    Ok(
        "tLocator virtual table",
    ),
    Ok(
        "tTempStore virtual table",
    ),
    Ok(
        "tLoadManager virtual table",
    ),
    Ok(
        "tLoadRequest virtual table",
    ),
    Ok(
        "tLoadRequest::InternalCallback virtual table",
    ),
    Ok(
        "tP3DFileHandler virtual table",
    ),
    Ok(
        "tSimpleChunkHandler virtual table",
    ),
    Ok(
        "tChunkHandler virtual table",
    ),
    Ok(
        "tFileHandler virtual table",
    ),
    Ok(
        "tRefCountedTemp virtual table",
    ),
    Ok(
        "p3d::DefaultRouter virtual table",
    ),
    Ok(
        "p3d::MemoryRouter virtual table",
    ),
    Ok(
        "tPointCamera virtual table",
    ),
    Ok(
        "tPointLight virtual table",
    ),
    Ok(
        "tPNGHandler virtual table",
    ),
    Ok(
        "tPrimGroupLoader virtual table",
    ),
    Ok(
        "tPrimGroupSkinnedStreamed virtual table",
    ),
    Ok(
        "tPrimGroupStreamed virtual table",
    ),
    Ok(
        "tPrimGroupSkinnedOptimised virtual table",
    ),
    Ok(
        "tPrimGroupOptimised virtual table",
    ),
    Ok(
        "tPrimGroup virtual table",
    ),
    Ok(
        "tRawImageHandler virtual table",
    ),
    Ok(
        "tShaderDefinitionLoader virtual table",
    ),
    Ok(
        "tShaderLoader virtual table",
    ),
    Ok(
        "tShader virtual table",
    ),
    Ok(
        "tSpriteLoader virtual table",
    ),
    Ok(
        "tSprite virtual table",
    ),
    Ok(
        "tSpotLight virtual table",
    ),
    Ok(
        "tTargaHandler virtual table",
    ),
    Ok(
        "tTextString virtual table",
    ),
    Ok(
        "tSetLoader virtual table",
    ),
    Ok(
        "tTextureLoader virtual table",
    ),
    Ok(
        "tTexture virtual table",
    ),
    Ok(
        "tTextureFontLoader virtual table",
    ),
    Ok(
        "tTextureFont virtual table",
    ),
    Ok(
        "tVectorCamera virtual table",
    ),
    Ok(
        "tVertexList virtual table",
    ),
    Ok(
        "tView virtual table",
    ),
    Ok(
        "tAnimationLoader virtual table",
    ),
    Ok(
        "tAnimation virtual table",
    ),
    Ok(
        "tAnimationGroup virtual table",
    ),
    Ok(
        "tAnimationMemoryBlock virtual table",
    ),
    Ok(
        "tFrameControllerLoader virtual table",
    ),
    Ok(
        "tBlendFrameController virtual table",
    ),
    Ok(
        "tSimpleFrameController virtual table",
    ),
    Ok(
        "tAnimationFrameController virtual table",
    ),
    Ok(
        "tFrameController virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tGeometry> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEffect> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tExpressionMixer> virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimatedObject> virtual table",
    ),
    Ok(
        "tAnimatedObjectLoader virtual table",
    ),
    Ok(
        "tAnimatedObjectFactoryLoader virtual table",
    ),
    Ok(
        "tAnimatedObjectFrameController virtual table",
    ),
    Ok(
        "tAnimatedObject virtual table",
    ),
    Ok(
        "tAnimatedObjectAnimation virtual table",
    ),
    Ok(
        "tAnimatedObjectFactory virtual table",
    ),
    Ok(
        "tBillboardQuadGroupAnimationController virtual table",
    ),
    Ok(
        "tCameraAnimationController virtual table",
    ),
    Ok(
        "tEventChannel virtual table",
    ),
    Ok(
        "tColourChannel virtual table",
    ),
    Ok(
        "tBoolChannel virtual table",
    ),
    Ok(
        "tEntityChannel virtual table",
    ),
    Ok(
        "tStringChannel virtual table",
    ),
    Ok(
        "tCompressedQuaternionChannel virtual table",
    ),
    Ok(
        "tQuaternionChannel virtual table",
    ),
    Ok(
        "tVector3DOFChannel virtual table",
    ),
    Ok(
        "tVector2DOFChannel virtual table",
    ),
    Ok(
        "tVector1DOFChannel virtual table",
    ),
    Ok(
        "tFloat2Channel virtual table",
    ),
    Ok(
        "tFloat1Channel virtual table",
    ),
    Ok(
        "tIntChannel virtual table",
    ),
    Ok(
        "tChannel virtual table",
    ),
    Ok(
        "tCompositeDrawableLoader virtual table",
    ),
    Ok(
        "tCompositeDrawable::tPosable virtual table",
    ),
    Ok(
        "tCompositeDrawable virtual table",
    ),
    Ok(
        "tPtrDynamicArray<tCompositeDrawable::DrawableElement *> virtual table",
    ),
    Ok(
        "tArray<tCompositeDrawable::DrawableElement *> virtual table",
    ),
    Ok(
        "tCompositeDrawable::DrawableEffectElement virtual table",
    ),
    Ok(
        "tCompositeDrawable::DrawablePoseElement virtual table",
    ),
    Ok(
        "tCompositeDrawable::DrawablePropElement virtual table",
    ),
    Ok(
        "tCompositeDrawable::DrawableElement virtual table",
    ),
    Ok(
        "tPosable virtual table",
    ),
    Ok(
        "tDrawablePose::tPosable virtual table",
    ),
    Ok(
        "tDrawablePose virtual table",
    ),
    Ok(
        "tGenericEvent virtual table",
    ),
    Ok(
        "tBaseEvent virtual table",
    ),
    Ok(
        "tEvent virtual table",
    ),
    Ok(
        "tExpression::INVALID_EXPRESSION_KEYVAL",
    ),
    Ok(
        "tExpressionMixerLoader virtual table",
    ),
    Ok(
        "tExpressionGroupLoader virtual table",
    ),
    Ok(
        "tExpressionGroupLoader::tExpressionStore virtual table",
    ),
    Ok(
        "tExpressionLoader virtual table",
    ),
    Ok(
        "tExpressionMixer virtual table",
    ),
    Ok(
        "tExpressionGroup virtual table",
    ),
    Ok(
        "tArray<p3dExpressionStage> virtual table",
    ),
    Ok(
        "tPtrArray<tExpression *> virtual table",
    ),
    Ok(
        "tArray<tExpression *> virtual table",
    ),
    Ok(
        "tExpression virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tExpressionGroup> virtual table",
    ),
    Ok(
        "tExpressionAnimationController virtual table",
    ),
    Ok(
        "tLightAnimationController virtual table",
    ),
    Ok(
        "tMultiControllerLoader virtual table",
    ),
    Ok(
        "tMultiController virtual table",
    ),
    Ok(
        "tPolySkinLoader virtual table",
    ),
    Ok(
        "tPolySkin::tPosable virtual table",
    ),
    Ok(
        "tPolySkin virtual table",
    ),
    Ok(
        "tPose virtual table",
    ),
    Ok(
        "tPoseAnimationController virtual table",
    ),
    Ok(
        "tSEQFileHandler virtual table",
    ),
    Ok(
        "tSequencerLoader virtual table",
    ),
    Ok(
        "tSequencer virtual table",
    ),
    Ok(
        "tArray<tSubPartState> virtual table",
    ),
    Ok(
        "tPtrArray<tSequencerState *> virtual table",
    ),
    Ok(
        "tArray<tSequencerState *> virtual table",
    ),
    Ok(
        "tSequencerState virtual table",
    ),
    Ok(
        "tStateTransition virtual table",
    ),
    Ok(
        "tStateSequencerCommand virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tBlendFrameController> virtual table",
    ),
    Ok(
        "tEventOriginSequencer::tEventOrigin virtual table",
    ),
    Ok(
        "tEventOriginSequencer virtual table",
    ),
    Ok(
        "tEventOrigin virtual table",
    ),
    Ok(
        "tSkeletonLoader virtual table",
    ),
    Ok(
        "tSkeleton virtual table",
    ),
    Ok(
        "tArray<tSkeleton::Joint> virtual table",
    ),
    Ok(
        "tShaderAnimationController virtual table",
    ),
    Ok(
        "tTextureAnimationController virtual table",
    ),
    Ok(
        "tVertexOffsetExpressionMixer virtual table",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController virtual table",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController virtual table",
    ),
    Ok(
        "tSimpleVisibilityAnimationController virtual table",
    ),
    Ok(
        "tVertexAnimController virtual table",
    ),
    Ok(
        "tVertexAnimKeyLoader virtual table",
    ),
    Ok(
        "tVertexAnimKey virtual table",
    ),
    Ok(
        "tVector2OffsetList virtual table",
    ),
    Ok(
        "tVectorOffsetList virtual table",
    ),
    Ok(
        "tColourOffsetList virtual table",
    ),
    Ok(
        "tOffsetIndexList virtual table",
    ),
    Ok(
        "tVertexAnimObject virtual table",
    ),
    Ok(
        "tGeometryOffset virtual table",
    ),
    Ok(
        "tVertexOffsetList virtual table",
    ),
    Ok(
        "tEffectController virtual table",
    ),
    Ok(
        "tLensFlareGroupLoader virtual table",
    ),
    Ok(
        "tParticleSystemLoader virtual table",
    ),
    Ok(
        "tParticleSystemFactoryLoader virtual table",
    ),
    Ok(
        "radLoadInventory::SafeCast<tParticleSystemFactory> virtual table",
    ),
    Ok(
        "tParticleSystem virtual table",
    ),
    Ok(
        "tParticleSystemFactory virtual table",
    ),
    Ok(
        "tEffect virtual table",
    ),
    Ok(
        "tEffectFactory virtual table",
    ),
    Ok(
        "Scenegraph::TransformAnimationController virtual table",
    ),
    Ok(
        "Scenegraph::ShaderVisitor virtual table",
    ),
    Ok(
        "Scenegraph::LightGroupIterator virtual table",
    ),
    Ok(
        "Scenegraph::Iterator virtual table",
    ),
    Ok(
        "Scenegraph::TranslucentDrawableCounter virtual table",
    ),
    Ok(
        "Scenegraph::DrawableCounter virtual table",
    ),
    Ok(
        "Scenegraph::Loader virtual table",
    ),
    Ok(
        "Scenegraph::Visibility virtual table",
    ),
    Ok(
        "Scenegraph::Scenegraph virtual table",
    ),
    Ok(
        "Scenegraph::LightGroup virtual table",
    ),
    Ok(
        "Scenegraph::Camera virtual table",
    ),
    Ok(
        "Scenegraph::Attachment virtual table",
    ),
    Ok(
        "Scenegraph::Drawable virtual table",
    ),
    Ok(
        "Scenegraph::Transform virtual table",
    ),
    Ok(
        "Scenegraph::Leaf virtual table",
    ),
    Ok(
        "Scenegraph::Branch virtual table",
    ),
    Ok(
        "Scenegraph::Node virtual table",
    ),
    Ok(
        "Scenegraph::SceneGraphVisitor virtual table",
    ),
    Ok(
        "tPS2FileMap virtual table",
    ),
    Ok(
        "tAmbientLight virtual table",
    ),
    Ok(
        "tDirectionalLight virtual table",
    ),
    Ok(
        "tFileFTT::IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "tFileFTT virtual table",
    ),
    Ok(
        "tImageConverter virtual table",
    ),
    Ok(
        "tEventAnimTextLoader virtual table",
    ),
    Ok(
        "tEventController virtual table",
    ),
    Ok(
        "tExpressionOffsets virtual table",
    ),
    Ok(
        "tLensFlare virtual table",
    ),
    Ok(
        "tLensFlareGroup virtual table",
    ),
    Ok(
        "tPtrArray<tLensFlare *> virtual table",
    ),
    Ok(
        "tArray<tLensFlare *> virtual table",
    ),
    Ok(
        "tParticlePool virtual table",
    ),
    Ok(
        "tSpriteParticle virtual table",
    ),
    Ok(
        "tBaseParticle virtual table",
    ),
    Ok(
        "tParticleArray virtual table",
    ),
    Ok(
        "tLocalSpriteEmitter virtual table",
    ),
    Ok(
        "tSpriteEmitter virtual table",
    ),
    Ok(
        "tBaseEmitter virtual table",
    ),
    Ok(
        "tSpriteEmitterFactory virtual table",
    ),
    Ok(
        "tBaseEmitterFactory virtual table",
    ),
    Ok(
        "tSphereGenerator virtual table",
    ),
    Ok(
        "tPlaneGenerator virtual table",
    ),
    Ok(
        "tPointGenerator virtual table",
    ),
    Ok(
        "tBaseGenerator virtual table",
    ),
    Ok(
        "tSphereGeneratorFactory virtual table",
    ),
    Ok(
        "tPlaneGeneratorFactory virtual table",
    ),
    Ok(
        "tPointGeneratorFactory virtual table",
    ),
    Ok(
        "tBaseGeneratorFactory virtual table",
    ),
    Ok(
        "tOpticEffect virtual table",
    ),
    Ok(
        "ps2Device virtual table",
    ),
    Ok(
        "ps2Display virtual table",
    ),
    Ok(
        "pddiDisplay virtual table",
    ),
    Ok(
        "ps2PrimBuffer::pddiPrimBufferStream virtual table",
    ),
    Ok(
        "ps2PrimBuffer virtual table",
    ),
    Ok(
        "pddiPrimBuffer virtual table",
    ),
    Ok(
        "pddiPrimBufferStream virtual table",
    ),
    Ok(
        "ps2ErrorShader virtual table",
    ),
    Ok(
        "ps2Shader virtual table",
    ),
    Ok(
        "pddiShader virtual table",
    ),
    Ok(
        "ps2LayeredShader virtual table",
    ),
    Ok(
        "ps2LightmapShader virtual table",
    ),
    Ok(
        "ps2LightweightShader virtual table",
    ),
    Ok(
        "ps2ToonShader virtual table",
    ),
    Ok(
        "ps2SimpleShader virtual table",
    ),
    Ok(
        "ps2RefractionShader virtual table",
    ),
    Ok(
        "ps2ReflectionShader virtual table",
    ),
    Ok(
        "ps2ShadowShader virtual table",
    ),
    Ok(
        "ps2Texture virtual table",
    ),
    Ok(
        "pddiTexture virtual table",
    ),
    Ok(
        "ps2TexCache virtual table",
    ),
    Ok(
        "pddiStack<pddiStencilState> virtual table",
    ),
    Ok(
        "pddiStack<pddiFogState> virtual table",
    ),
    Ok(
        "pddiStack<pddiLightingState> virtual table",
    ),
    Ok(
        "pddiStack<pddiRenderState> virtual table",
    ),
    Ok(
        "pddiStack<pddiViewState> virtual table",
    ),
    Ok(
        "pddiBaseContext virtual table",
    ),
    Ok(
        "pddiStencilState virtual table",
    ),
    Ok(
        "pddiFogState virtual table",
    ),
    Ok(
        "pddiLightingState virtual table",
    ),
    Ok(
        "pddiViewState virtual table",
    ),
    Ok(
        "pddiRenderState virtual table",
    ),
    Ok(
        "pddiMatrixStack virtual table",
    ),
    Ok(
        "pddiStack<RadicalMathLibrary::Matrix> virtual table",
    ),
    Ok(
        "pddiRenderContext virtual table",
    ),
    Ok(
        "pddiDevice virtual table",
    ),
    Ok(
        "_pddiExtMemRegistration virtual table",
    ),
    Ok(
        "pddiExtMemRegistration virtual table",
    ),
    Ok(
        "pddiExtension virtual table",
    ),
    Ok(
        "pddiState virtual table",
    ),
    Ok(
        "pddiBaseShader virtual table",
    ),
    Ok(
        "pddiObject virtual table",
    ),
    Ok(
        "ps2ExtFramebufferEffects virtual table",
    ),
    Ok(
        "ps2ExtPS2Control virtual table",
    ),
    Ok(
        "ps2Context virtual table",
    ),
    Ok(
        "pddiExtPS2Control virtual table",
    ),
    Ok(
        "pddiExtFramebufferEffects virtual table",
    ),
    Ok(
        "SHADER::DitherMatrix",
    ),
    Ok(
        "SHADER::filterMinTable",
    ),
    Ok(
        "SHADER::filterMagTable",
    ),
    Ok(
        "SHADER::uvTable",
    ),
    Ok(
        "SHADER::alphaTestTable",
    ),
    Ok(
        "SHADER::alphaBlendTable",
    ),
    Ok(
        "SHADER::zCompareTable",
    ),
    Ok(
        "SHADER::primTable",
    ),
    Ok(
        "SHADER::destAlphaTestTable",
    ),
    Ok(
        "SHADER::mipTable",
    ),
    Ok(
        "ps2ExtHardwareSkinning virtual table",
    ),
    Ok(
        "pddiExtHardwareSkinning virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radmusic::composition_data_loader virtual table",
    ),
    Ok(
        "radmusic::radmusic_file_loader virtual table",
    ),
    Ok(
        "radmusic::radload_composition_adapter virtual table",
    ),
    Ok(
        "radmusic::radload_radmusic_inventory virtual table",
    ),
    Ok(
        "radLoadInventory virtual table",
    ),
    Ok(
        "ods::pointer_null",
    ),
    Ok(
        "radmusic::stream_graph_callback virtual table",
    ),
    Ok(
        "radSoundHalAudioFormat::radSoundObject virtual table",
    ),
    Ok(
        "radSoundHalAudioFormat virtual table",
    ),
    Ok(
        "radSoundObject virtual table",
    ),
    Ok(
        "IRadSoundHalAudioFormat virtual table",
    ),
    Ok(
        "radSoundHalListener::radSoundObject virtual table",
    ),
    Ok(
        "radSoundHalListener virtual table",
    ),
    Ok(
        "IRadSoundHalListener virtual table",
    ),
    Ok(
        "radSoundHalPositionalGroup::radSoundObject virtual table",
    ),
    Ok(
        "radSoundHalPositionalGroup virtual table",
    ),
    Ok(
        "radSoundHalPositionalInformation virtual table",
    ),
    Ok(
        "IRadSoundHalPositionalGroup virtual table",
    ),
    Ok(
        "radSoundHalMemoryRegion::radSoundObject virtual table",
    ),
    Ok(
        "radSoundHalMemoryRegion virtual table",
    ),
    Ok(
        "IRadSoundHalMemoryRegion virtual table",
    ),
    Ok(
        "radSoundHalSystem::radSoundObject virtual table",
    ),
    Ok(
        "radSoundHalSystem virtual table",
    ),
    Ok(
        "IRadSoundHalSystem virtual table",
    ),
    Ok(
        "radSoundEffectPs2::radSoundObject virtual table",
    ),
    Ok(
        "radSoundEffectPs2 virtual table",
    ),
    Ok(
        "IRadSoundEffectPs2 virtual table",
    ),
    Ok(
        "IRadSoundHalEffect virtual table",
    ),
    Ok(
        "radSoundIopPs2 virtual table",
    ),
    Ok(
        "radSoundHalBufferAsyncRequestAdpcmPs2 virtual table",
    ),
    Ok(
        "radSoundBufferAdpcmPs2::radSoundObject virtual table",
    ),
    Ok(
        "radSoundBufferAdpcmPs2 virtual table",
    ),
    Ok(
        "IRadSoundHalBuffer virtual table",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer::radSoundPoolObject<radSoundHalAdpcmBufferClearer> virtual table",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer virtual table",
    ),
    Ok(
        "radSoundPoolObject<radSoundHalAdpcmBufferClearer> virtual table",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2> virtual table",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2::radSoundHalBufferAsyncRequestAdpcmPs2 virtual table",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2 virtual table",
    ),
    Ok(
        "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2> virtual table",
    ),
    Ok(
        "IRadSoundHalDataSourceCallback virtual table",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::radSoundObject virtual table",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2::radSoundHalPositionalEntity virtual table",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2 virtual table",
    ),
    Ok(
        "radSoundHalPositionalEntity virtual table",
    ),
    Ok(
        "IRadSoundHalVoice virtual table",
    ),
    Ok(
        "radSoundBufferedDataSource::radSoundUpdatableObject virtual table",
    ),
    Ok(
        "radSoundBufferedDataSource::IRadSoundHalDataSourceCallback virtual table",
    ),
    Ok(
        "radSoundBufferedDataSource virtual table",
    ),
    Ok(
        "radSoundUpdatableObject virtual table",
    ),
    Ok(
        "IRadSoundBufferedDataSource virtual table",
    ),
    Ok(
        "IRadSoundHalDataSource virtual table",
    ),
    Ok(
        "radSoundClip::radSoundUpdatableObject virtual table",
    ),
    Ok(
        "radSoundClip::IRadSoundHalBufferClearCallback virtual table",
    ),
    Ok(
        "radSoundClip::IRadSoundHalBufferLoadCallback virtual table",
    ),
    Ok(
        "radSoundClip virtual table",
    ),
    Ok(
        "IRadSoundClip virtual table",
    ),
    Ok(
        "IRadSoundHalBufferClearCallback virtual table",
    ),
    Ok(
        "IRadSoundHalBufferLoadCallback virtual table",
    ),
    Ok(
        "radSoundClipPlayer::radSoundUpdatableObject virtual table",
    ),
    Ok(
        "radSoundClipPlayer virtual table",
    ),
    Ok(
        "IRadSoundClipPlayer virtual table",
    ),
    Ok(
        "IRadSoundPlayer virtual table",
    ),
    Ok(
        "radSoundDataCacheDataSource::radSoundObject virtual table",
    ),
    Ok(
        "radSoundDataCacheDataSource virtual table",
    ),
    Ok(
        "radSoundDataCache::radSoundUpdatableObject virtual table",
    ),
    Ok(
        "radSoundDataCache::IRadSoundHalDataSourceCallback virtual table",
    ),
    Ok(
        "radSoundDataCache virtual table",
    ),
    Ok(
        "IRadSoundDataCache virtual table",
    ),
    Ok(
        "radSoundRsdFileDataSource::radSoundObject virtual table",
    ),
    Ok(
        "radSoundRsdFileDataSource::IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "radSoundRsdFileDataSource virtual table",
    ),
    Ok(
        "IRadSoundRsdFileDataSource virtual table",
    ),
    Ok(
        "radSoundMemoryDataSource::radSoundUpdatableObject virtual table",
    ),
    Ok(
        "radSoundMemoryDataSource virtual table",
    ),
    Ok(
        "IRadSoundMemoryDataSource virtual table",
    ),
    Ok(
        "radSoundMemorySpaceObject::radSoundObject virtual table",
    ),
    Ok(
        "radSoundMemorySpaceObject virtual table",
    ),
    Ok(
        "IRadSoundMemorySpaceObject virtual table",
    ),
    Ok(
        "radSoundStitchedDataSource::radSoundUpdatableObject virtual table",
    ),
    Ok(
        "radSoundStitchedDataSource::IRadSoundHalDataSourceCallback virtual table",
    ),
    Ok(
        "radSoundStitchedDataSource virtual table",
    ),
    Ok(
        "IRadSoundStitchedDataSource virtual table",
    ),
    Ok(
        "radSoundStreamPlayer::radSoundUpdatableObject virtual table",
    ),
    Ok(
        "radSoundStreamPlayer::IRadSoundHalBufferClearCallback virtual table",
    ),
    Ok(
        "radSoundStreamPlayer::IRadSoundHalBufferLoadCallback virtual table",
    ),
    Ok(
        "radSoundStreamPlayer virtual table",
    ),
    Ok(
        "IRadSoundStreamPlayer virtual table",
    ),
    Ok(
        "IRadScript::radRefCount virtual table",
    ),
    Ok(
        "IRadScript virtual table",
    ),
    Ok(
        "IRadNameSpace virtual table",
    ),
    Ok(
        "radFactoryNode virtual table",
    ),
    Ok(
        "radTypeInfoLoader::radRefCount virtual table",
    ),
    Ok(
        "radTypeInfoLoader::IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "radTypeInfoLoader virtual table",
    ),
    Ok(
        "IRadTypeInfoMethod::radRefCount virtual table",
    ),
    Ok(
        "IRadTypeInfoMethod virtual table",
    ),
    Ok(
        "IRadTypeInfoParam::radRefCount virtual table",
    ),
    Ok(
        "IRadTypeInfoParam virtual table",
    ),
    Ok(
        "IRadTypeInfoEnum::radRefCount virtual table",
    ),
    Ok(
        "IRadTypeInfoEnum virtual table",
    ),
    Ok(
        "IRadTypeInfoIntLiteral::radRefCount virtual table",
    ),
    Ok(
        "IRadTypeInfoIntLiteral virtual table",
    ),
    Ok(
        "IRadTypeInfo::radRefCount virtual table",
    ),
    Ok(
        "IRadTypeInfo virtual table",
    ),
    Ok(
        "IRadTypeInfoLoader virtual table",
    ),
    Ok(
        "IRadObjectList::radRefCount virtual table",
    ),
    Ok(
        "IRadObjectList virtual table",
    ),
    Ok(
        "radObjectListNode virtual table",
    ),
    Ok(
        "IRadTypeInfoSystem virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radMoviePlayer::radRefCount virtual table",
    ),
    Ok(
        "radMoviePlayer::IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "radMoviePlayer virtual table",
    ),
    Ok(
        "IRadMoviePlayer2 virtual table",
    ),
    Ok(
        "radMovieIpuPs2 virtual table",
    ),
    Ok(
        "radMovieVideoDecoderPs2::radRefCount virtual table",
    ),
    Ok(
        "radMovieVideoDecoderPs2::IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "radMovieVideoDecoderPs2 virtual table",
    ),
    Ok(
        "IRadMovieVideoDecoder virtual table",
    ),
    Ok(
        "radMovieRenderStrategyPs2::radRefCount virtual table",
    ),
    Ok(
        "radMovieRenderStrategyPs2 virtual table",
    ),
    Ok(
        "IRadMovieRenderStrategy virtual table",
    ),
    Ok(
        "radMovieAudioDataSource::radRefCount virtual table",
    ),
    Ok(
        "radMovieAudioDataSource::IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "radMovieAudioDataSource virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "radTimer virtual table",
    ),
    Ok(
        "radTimerList::radObject virtual table",
    ),
    Ok(
        "radTimerList virtual table",
    ),
    Ok(
        "IRadTimerList virtual table",
    ),
    Ok(
        "IRadTimer virtual table",
    ),
    Ok(
        "radStopwatch::radObject virtual table",
    ),
    Ok(
        "radStopwatch virtual table",
    ),
    Ok(
        "IRadStopwatch virtual table",
    ),
    Ok(
        "radMemoryDlAllocator::radRefCount virtual table",
    ),
    Ok(
        "radMemoryDlAllocator virtual table",
    ),
    Ok(
        "IRadMemoryHeap virtual table",
    ),
    Ok(
        "ExternalMemoryHeap::radObject virtual table",
    ),
    Ok(
        "ExternalMemoryHeap virtual table",
    ),
    Ok(
        "IRadMemoryObject virtual table",
    ),
    Ok(
        "ExternalMemoryObject::radBaseObject virtual table",
    ),
    Ok(
        "ExternalMemoryObject virtual table",
    ),
    Ok(
        "radMemoryAllocatorMalloc virtual table",
    ),
    Ok(
        "IRadMemoryAllocator virtual table",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop::IRadMemorySpaceCopyRequest virtual table",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop virtual table",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToEe::IRadMemorySpaceCopyRequest virtual table",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToEe virtual table",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToIop::IRadMemorySpaceCopyRequest virtual table",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToIop virtual table",
    ),
    Ok(
        "MemorySpaceAsyncRequest::IRadMemorySpaceCopyRequest virtual table",
    ),
    Ok(
        "MemorySpaceAsyncRequest virtual table",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToEe virtual table",
    ),
    Ok(
        "radMemoryAllocator_Iop virtual table",
    ),
    Ok(
        "IRadMemorySpaceCopyRequest virtual table",
    ),
    Ok(
        "MemoryPool virtual table",
    ),
    Ok(
        "IRadMemoryPool virtual table",
    ),
    Ok(
        "StaticHeap::radRefCount virtual table",
    ),
    Ok(
        "StaticHeap virtual table",
    ),
    Ok(
        "TrackingHeap::radRefCount virtual table",
    ),
    Ok(
        "TrackingHeap virtual table",
    ),
    Ok(
        "radString::radRefCount virtual table",
    ),
    Ok(
        "radString virtual table",
    ),
    Ok(
        "IRadString virtual table",
    ),
    Ok(
        "radObjectBTree virtual table",
    ),
    Ok(
        "ConsoleClient::radObject virtual table",
    ),
    Ok(
        "ConsoleClient::IRadDbgComChannelSendCallback virtual table",
    ),
    Ok(
        "ConsoleClient::IRadDbgComChannelReceiveCallback virtual table",
    ),
    Ok(
        "ConsoleClient virtual table",
    ),
    Ok(
        "DebugConsole::radObject virtual table",
    ),
    Ok(
        "DebugConsole virtual table",
    ),
    Ok(
        "IRadDebugConsole virtual table",
    ),
    Ok(
        "IRadDbgComChannelReceiveCallback virtual table",
    ),
    Ok(
        "IRadDbgComChannelSendCallback virtual table",
    ),
    Ok(
        "IRadDbgComChannelStatusCallback virtual table",
    ),
    Ok(
        "LGDevWheelController::radRefCount virtual table",
    ),
    Ok(
        "LGDevWheelController virtual table",
    ),
    Ok(
        "LGDevWheelOutputPoint::radRefCount virtual table",
    ),
    Ok(
        "LGDevWheelOutputPoint virtual table",
    ),
    Ok(
        "LGDevWheelInputPoint::radRefCount virtual table",
    ),
    Ok(
        "LGDevWheelInputPoint virtual table",
    ),
    Ok(
        "rControllerInputPoint2::radObject virtual table",
    ),
    Ok(
        "rControllerInputPoint2 virtual table",
    ),
    Ok(
        "rControllerOutputPoint2::radObject virtual table",
    ),
    Ok(
        "rControllerOutputPoint2 virtual table",
    ),
    Ok(
        "iControllerOutputHandler2::radObject virtual table",
    ),
    Ok(
        "iControllerOutputHandler2 virtual table",
    ),
    Ok(
        "rController2::radObject virtual table",
    ),
    Ok(
        "rController2 virtual table",
    ),
    Ok(
        "iControllerLocation2::radObject virtual table",
    ),
    Ok(
        "iControllerLocation2 virtual table",
    ),
    Ok(
        "rControllerSystem2::radObject virtual table",
    ),
    Ok(
        "rControllerSystem2::IRadTimerCallback virtual table",
    ),
    Ok(
        "rControllerSystem2 virtual table",
    ),
    Ok(
        "iIControllerInputPoint2 virtual table",
    ),
    Ok(
        "iRIControllerOutputPointCallback2 virtual table",
    ),
    Ok(
        "iIController2 virtual table",
    ),
    Ok(
        "iIControllerLocation2 virtual table",
    ),
    Ok(
        "IRadControllerInputPoint virtual table",
    ),
    Ok(
        "IRadControllerOutputPoint virtual table",
    ),
    Ok(
        "IRadControllerSystem virtual table",
    ),
    Ok(
        "IRadController virtual table",
    ),
    Ok(
        "radPlatform virtual table",
    ),
    Ok(
        "IRadPlatform virtual table",
    ),
    Ok(
        "radThreadMutex::radObject virtual table",
    ),
    Ok(
        "radThreadMutex virtual table",
    ),
    Ok(
        "IRadThreadMutex virtual table",
    ),
    Ok(
        "radThreadSemaphore::radObject virtual table",
    ),
    Ok(
        "radThreadSemaphore virtual table",
    ),
    Ok(
        "IRadThreadSemaphore virtual table",
    ),
    Ok(
        "radThreadLocalStorage::radObject virtual table",
    ),
    Ok(
        "radThreadLocalStorage virtual table",
    ),
    Ok(
        "radThread::radObject virtual table",
    ),
    Ok(
        "radThread virtual table",
    ),
    Ok(
        "radThreadFiber::radObject virtual table",
    ),
    Ok(
        "radThreadFiber virtual table",
    ),
    Ok(
        "IRadThreadFiber virtual table",
    ),
    Ok(
        "IRadThreadLocalStorage virtual table",
    ),
    Ok(
        "IRadThread virtual table",
    ),
    Ok(
        "radTextDisplay virtual table",
    ),
    Ok(
        "IRadTextDisplay virtual table",
    ),
    Ok(
        "radWeakCallbackWrapper::radRefCount virtual table",
    ),
    Ok(
        "radWeakCallbackWrapper virtual table",
    ),
    Ok(
        "IRadWeakCallbackWrapper virtual table",
    ),
    Ok(
        "ControllerBuffer::radObject virtual table",
    ),
    Ok(
        "ControllerBuffer virtual table",
    ),
    Ok(
        "IRadControllerBuffer virtual table",
    ),
    Ok(
        "radRemoteDrive::IRadDbgComChannelReceiveCallback virtual table",
    ),
    Ok(
        "radRemoteDrive::IRadDbgComChannelSendCallback virtual table",
    ),
    Ok(
        "radRemoteDrive::radSafeRefCount virtual table",
    ),
    Ok(
        "radRemoteDrive::radObject virtual table",
    ),
    Ok(
        "radRemoteDrive virtual table",
    ),
    Ok(
        "radCementLibrary::radSafeRefCount virtual table",
    ),
    Ok(
        "radCementLibrary::radObject virtual table",
    ),
    Ok(
        "radCementLibrary::IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "radCementLibrary virtual table",
    ),
    Ok(
        "radSafeRefCount virtual table",
    ),
    Ok(
        "IRadMutable virtual table",
    ),
    Ok(
        "IRadCementLibrary virtual table",
    ),
    Ok(
        "radPs2CdDrive::radSafeRefCount virtual table",
    ),
    Ok(
        "radPs2CdDrive::radObject virtual table",
    ),
    Ok(
        "radPs2CdDrive::radDrive virtual table",
    ),
    Ok(
        "radPs2CdDrive virtual table",
    ),
    Ok(
        "radBufferedReader virtual table",
    ),
    Ok(
        "radPs2HostDrive::radSafeRefCount virtual table",
    ),
    Ok(
        "radPs2HostDrive::radObject virtual table",
    ),
    Ok(
        "radPs2HostDrive::radDrive virtual table",
    ),
    Ok(
        "radPs2HostDrive virtual table",
    ),
    Ok(
        "radPs2MemcardDrive::radSignedWriter virtual table",
    ),
    Ok(
        "radPs2MemcardDrive::radSignedReader virtual table",
    ),
    Ok(
        "radPs2MemcardDrive::radSafeRefCount virtual table",
    ),
    Ok(
        "radPs2MemcardDrive::radObject virtual table",
    ),
    Ok(
        "radPs2MemcardDrive virtual table",
    ),
    Ok(
        "radSignedWriter virtual table",
    ),
    Ok(
        "radSignedReader virtual table",
    ),
    Ok(
        "DriveCancelRequest virtual table",
    ),
    Ok(
        "DriveFileDestroyRequest virtual table",
    ),
    Ok(
        "DriveFindCloseRequest virtual table",
    ),
    Ok(
        "DriveFindNextRequest virtual table",
    ),
    Ok(
        "DriveFindFirstRequest virtual table",
    ),
    Ok(
        "DriveDestroyDirectoryRequest virtual table",
    ),
    Ok(
        "DriveCreateDirectoryRequest virtual table",
    ),
    Ok(
        "DriveFormatRequest virtual table",
    ),
    Ok(
        "DriveMediaRequest virtual table",
    ),
    Ok(
        "DriveOpenRequest virtual table",
    ),
    Ok(
        "radDriveRequest virtual table",
    ),
    Ok(
        "FileCancelRequest virtual table",
    ),
    Ok(
        "FileGetSizeRequest virtual table",
    ),
    Ok(
        "FileGetPositionRequest virtual table",
    ),
    Ok(
        "FileSetPositionRequest virtual table",
    ),
    Ok(
        "FileWriteRequest virtual table",
    ),
    Ok(
        "FileReadRequest virtual table",
    ),
    Ok(
        "FileCommitRequest virtual table",
    ),
    Ok(
        "FileCloseRequest virtual table",
    ),
    Ok(
        "SaveGameOpenRequest virtual table",
    ),
    Ok(
        "FileOpenRequest virtual table",
    ),
    Ok(
        "radFileRequest virtual table",
    ),
    Ok(
        "DriveCompletionRequest virtual table",
    ),
    Ok(
        "FileCompletionRequest virtual table",
    ),
    Ok(
        "CompletionCallbackRequest virtual table",
    ),
    Ok(
        "CompletionEventRequest virtual table",
    ),
    Ok(
        "radRequest virtual table",
    ),
    Ok(
        "radFile::IRadMutable virtual table",
    ),
    Ok(
        "radFile virtual table",
    ),
    Ok(
        "IRadFile virtual table",
    ),
    Ok(
        "radInstanceDrive::IRadMutable virtual table",
    ),
    Ok(
        "radInstanceDrive virtual table",
    ),
    Ok(
        "IRadDrive virtual table",
    ),
    Ok(
        "radDrive::radSafeRefCount virtual table",
    ),
    Ok(
        "radDrive::radObject virtual table",
    ),
    Ok(
        "radDrive virtual table",
    ),
    Ok(
        "radDriveThread::radSafeRefCount virtual table",
    ),
    Ok(
        "radDriveThread::radObject virtual table",
    ),
    Ok(
        "radDriveThread virtual table",
    ),
    Ok(
        "PtrHashTable virtual table",
    ),
    Ok(
        "SafeCasterObj virtual table",
    ),
    Ok(
        "radLoadHashedStore virtual table",
    ),
    Ok(
        "RefHashTable<IRefCount> virtual table",
    ),
    Ok(
        "radLoadStore virtual table",
    ),
    Ok(
        "RefQueue<radLoadCallback> virtual table",
    ),
    Ok(
        "RefQueue<radLoadObject> virtual table",
    ),
    Ok(
        "RefHashTable<radLoadDataLoader> virtual table",
    ),
    Ok(
        "RefHashTable<radLoadFileLoader> virtual table",
    ),
    Ok(
        "radLoadManager virtual table",
    ),
    Ok(
        "radLoadManager::QueueItem virtual table",
    ),
    Ok(
        "ILoadManager virtual table",
    ),
    Ok(
        "radLoadObject virtual table",
    ),
    Ok(
        "PtrQueue virtual table",
    ),
    Ok(
        "radLoadUpdatableRequest virtual table",
    ),
    Ok(
        "radLoadRequest virtual table",
    ),
    Ok(
        "radLoadFileStream::Callback::IRadFileCompletionCallback virtual table",
    ),
    Ok(
        "radLoadFileStream::Callback virtual table",
    ),
    Ok(
        "radLoadLoaderStream virtual table",
    ),
    Ok(
        "radLoadFileStream virtual table",
    ),
    Ok(
        "radLoadDataStream virtual table",
    ),
    Ok(
        "radLoadBaseStream virtual table",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "mprec_tens",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "mprec_bigtens",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "mprec_tinytens",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "infinity",
        ),
    ),
    Ok(
        "_IO_ostream_withassign::ios virtual table",
    ),
    Ok(
        "_IO_istream_withassign::ios virtual table",
    ),
    Ok(
        "iostream::ios virtual table",
    ),
    Ok(
        "istream::ios virtual table",
    ),
    Ok(
        "ostream::ios virtual table",
    ),
    Ok(
        "filebuf virtual table",
    ),
    Ok(
        "streambuf virtual table",
    ),
    Ok(
        "ios virtual table",
    ),
    Ok(
        "filebuf::openprot",
    ),
    Ok(
        "ostdiostream::ios virtual table",
    ),
    Ok(
        "istdiostream::ios virtual table",
    ),
    Ok(
        "stdiobuf virtual table",
    ),
    Err(
        InvalidSpecialMethod(
            "fdlib_version",
        ),
    ),
    Ok(
        "bad_exception virtual table",
    ),
    Ok(
        "exception virtual table",
    ),
    Ok(
        "__class_type_info virtual table",
    ),
    Ok(
        "__si_type_info virtual table",
    ),
    Ok(
        "__user_type_info virtual table",
    ),
    Ok(
        "bad_typeid virtual table",
    ),
    Ok(
        "bad_cast virtual table",
    ),
    Ok(
        "type_info virtual table",
    ),
    Ok(
        "__array_type_info virtual table",
    ),
    Ok(
        "__ptmd_type_info virtual table",
    ),
    Ok(
        "__ptmf_type_info virtual table",
    ),
    Ok(
        "__func_type_info virtual table",
    ),
    Ok(
        "__builtin_type_info virtual table",
    ),
    Ok(
        "__attr_type_info virtual table",
    ),
    Ok(
        "__pointer_type_info virtual table",
    ),
    Ok(
        "CStatePropListener type_info node",
    ),
    Ok(
        "LoadingManager::ProcessRequestsCallback type_info node",
    ),
    Ok(
        "CharacterAi::State type_info node",
    ),
    Ok(
        "ISpatialProxyAA type_info node",
    ),
    Ok(
        "IRefCount type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCastBase type_info node",
    ),
    Ok(
        "CharacterTune::sfJumpHeight",
    ),
    Ok(
        "CharacterTune::sGetInHeightThreshold",
    ),
    Ok(
        "CharacterTune::sfGetInOutOfCarAnimSpeed",
    ),
    Ok(
        "CharacterTune::sGetInOpenSpeed",
    ),
    Ok(
        "CharacterTune::sGetInOpenDelay",
    ),
    Ok(
        "CharacterTune::sGetInCloseSpeed",
    ),
    Ok(
        "CharacterTune::sGetInCloseDelay",
    ),
    Ok(
        "CharacterTune::sGetOutOpenSpeed",
    ),
    Ok(
        "CharacterTune::sGetOutOpenDelay",
    ),
    Ok(
        "CharacterTune::sGetOutCloseSpeed",
    ),
    Ok(
        "CharacterTune::sGetOutCloseDelay",
    ),
    Ok(
        "RespawnEntity type_info node",
    ),
    Ok(
        "EventListener type_info node",
    ),
    Ok(
        "IntersectionList type_info node",
    ),
    Ok(
        "Behaviour type_info node",
    ),
    Ok(
        "ActorAnimation type_info node",
    ),
    Ok(
        "StatePropDSGProcAnimator type_info node",
    ),
    Ok(
        "Sequencer type_info node",
    ),
    Ok(
        "ActionController type_info node",
    ),
    Ok(
        "CharacterTune::sfTurboRotateRate",
    ),
    Ok(
        "CharacterTune::sfLocoRotateRate",
    ),
    Ok(
        "CharacterTune::sfLocoDecceleration",
    ),
    Ok(
        "CharacterTune::sfLocoAcceleration",
    ),
    Ok(
        "CharacterTune::bLocoTest",
    ),
    Ok(
        "CharacterTune::sfMaxSpeed",
    ),
    Ok(
        "CharacterTune::sfAirGravity",
    ),
    Ok(
        "CharacterTune::sfDashBurstMax",
    ),
    Ok(
        "CharacterTune::sfAirAccelScale",
    ),
    Ok(
        "CharacterTune::sfStompGravityScale",
    ),
    Ok(
        "CharacterTune::sfAirRotateRate",
    ),
    Ok(
        "CharacterTune::sfDoubleJumpAllowUp",
    ),
    Ok(
        "CharacterTune::sfDoubleJumpAllowDown",
    ),
    Ok(
        "CharacterTune::sfDoubleJumpHeight",
    ),
    Ok(
        "Potentials type_info node",
    ),
    Ok(
        "PotentialField type_info node",
    ),
    Ok(
        "IHudMapIconLocator type_info node",
    ),
    Ok(
        "VehicleAIRender type_info node",
    ),
    Ok(
        "ICameraShaker type_info node",
    ),
    Ok(
        "GameDataHandler type_info node",
    ),
    Ok(
        "BumperCamData type_info node",
    ),
    Ok(
        "ISuperCamTarget type_info node",
    ),
    Ok(
        "ChaseCamData type_info node",
    ),
    Ok(
        "ConversationCamData type_info node",
    ),
    Ok(
        "FollowCamData type_info node",
    ),
    Ok(
        "TrackerCamData type_info node",
    ),
    Ok(
        "WalkerCamData type_info node",
    ),
    Ok(
        "FollowCamDataChunk type_info node",
    ),
    Ok(
        "Card type_info node",
    ),
    Ok(
        "ICheatEnteredCallback type_info node",
    ),
    Ok(
        "CardsDB type_info node",
    ),
    Ok(
        "CheatsDB type_info node",
    ),
    Ok(
        "CheatInputSystem type_info node",
    ),
    Ok(
        "IRadDebugConsoleKeyboardInputCallback type_info node",
    ),
    Ok(
        "IRadDebugConsolePointerInputCallback type_info node",
    ),
    Ok(
        "PresentationEvent::PresentationEventCallBack type_info node",
    ),
    Ok(
        "IRadDriveErrorCallback type_info node",
    ),
    Ok(
        "IRadTimerCallback type_info node",
    ),
    Ok(
        "RumbleEffect type_info node",
    ),
    Ok(
        "ForceEffect type_info node",
    ),
    Ok(
        "IRadControllerInputPointCallback type_info node",
    ),
    Ok(
        "IRadControllerConnectionChangeCallback type_info node",
    ),
    Ok(
        "AnimationPlayer::LoadDataCallBack type_info node",
    ),
    Ok(
        "FileHandler type_info node",
    ),
    Ok(
        "FileHandler::LoadFileCallback type_info node",
    ),
    Ok(
        "Scrooby::LoadProjectCallback type_info node",
    ),
    Ok(
        "IWrappedLoader type_info node",
    ),
    Ok(
        "Game type_info node",
    ),
    Ok(
        "HeapStack type_info node",
    ),
    Ok(
        "IRadMemoryActivityCallback type_info node",
    ),
    Ok(
        "IRadMemorySetAllocatorCallback type_info node",
    ),
    Ok(
        "TriggerVolumeTracker::sColType",
    ),
    Ok(
        "HasPresentationInfo type_info node",
    ),
    Ok(
        "Console::ExecuteScriptCallback type_info node",
    ),
    Ok(
        "AnimatedIcon type_info node",
    ),
    Ok(
        "tCompositeDrawable::DrawableElement type_info node",
    ),
    Ok(
        "BonusObjective type_info node",
    ),
    Ok(
        "SafeZone type_info node",
    ),
    Ok(
        "Reward type_info node",
    ),
    Ok(
        "Blinker type_info node",
    ),
    Ok(
        "PresentationAnimator type_info node",
    ),
    Ok(
        "AllocPool<FMVEvent> type_info node",
    ),
    Ok(
        "AllocPool<NISEvent> type_info node",
    ),
    Ok(
        "AllocPool<TransitionEvent> type_info node",
    ),
    Ok(
        "radBaseObject type_info node",
    ),
    Ok(
        "CGuiEntity type_info node",
    ),
    Ok(
        "GuiMenuItem type_info node",
    ),
    Ok(
        "Scrooby::GotoScreenCallback type_info node",
    ),
    Ok(
        "IMemoryCardCheckCallback type_info node",
    ),
    Ok(
        "IMemoryCardFormatCallback type_info node",
    ),
    Ok(
        "CGuiTextBible type_info node",
    ),
    Ok(
        "Scrooby::Drawable type_info node",
    ),
    Ok(
        "GameDataLoadCallback type_info node",
    ),
    Ok(
        "IMemoryCardInfoLoadCallback type_info node",
    ),
    Ok(
        "MessageQueue type_info node",
    ),
    Ok(
        "CGuiScreenHasTransitions type_info node",
    ),
    Ok(
        "GameDataSaveCallback type_info node",
    ),
    Ok(
        "HudEventHandler type_info node",
    ),
    Ok(
        "CHudMap type_info node",
    ),
    Ok(
        "Slider type_info node",
    ),
    Ok(
        "CTeleTypeText type_info node",
    ),
    Ok(
        "GuiSFX::Transition type_info node",
    ),
    Ok(
        "GuiSFX::HasTimeInterval type_info node",
    ),
    Ok(
        "GuiSFX::HasMulticontroller type_info node",
    ),
    Ok(
        "ScrollingText type_info node",
    ),
    Ok(
        "StatePropDSG::sp_SharedtPoses",
    ),
    Ok(
        "tDrawable::ShaderCallback type_info node",
    ),
    Ok(
        "tArray<ParticleManager::ManagedParticleSystem *> type_info node",
    ),
    Ok(
        "tArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info node",
    ),
    Ok(
        "RenderLayer type_info node",
    ),
    Ok(
        "ChunkListenerCallback type_info node",
    ),
    Ok(
        "TrafficControl type_info node",
    ),
    Ok(
        "ILaneInformation type_info node",
    ),
    Ok(
        "ILaneControl type_info node",
    ),
    Ok(
        "RoadManager type_info node",
    ),
    Ok(
        "Listener type_info node",
    ),
    Ok(
        "SimpsonsSoundPlayer type_info node",
    ),
    Ok(
        "PositionCarrier type_info node",
    ),
    Ok(
        "radLinkedClass<SoundRenderingPlayerCallback> type_info node",
    ),
    Ok(
        "AvatarSoundPlayer type_info node",
    ),
    Ok(
        "SimpsonsSoundPlayerCallback type_info node",
    ),
    Ok(
        "radLinkedClass<carSoundParameters> type_info node",
    ),
    Ok(
        "EngineState type_info node",
    ),
    Ok(
        "SoundDebugPage type_info node",
    ),
    Ok(
        "SelectableDialog type_info node",
    ),
    Ok(
        "ConversationMatcher type_info node",
    ),
    Ok(
        "DialogList type_info node",
    ),
    Ok(
        "DialogLineCompleteCallback type_info node",
    ),
    Ok(
        "DialogCompleteCallback type_info node",
    ),
    Ok(
        "SoundEffectPlayer type_info node",
    ),
    Ok(
        "radLinkedClass<positionalSoundSettings> type_info node",
    ),
    Ok(
        "radLinkedClass<reverbSettings> type_info node",
    ),
    Ok(
        "radLinkedClass<Sound::daSoundDynaLoadRegion> type_info node",
    ),
    Ok(
        "radLinkedClass<Sound::daSoundPlayerBase> type_info node",
    ),
    Ok(
        "IRadSoundStitchCallback type_info node",
    ),
    Ok(
        "SoundResourceFilenameBuilder type_info node",
    ),
    Ok(
        "Sound::daSoundTuner_ActiveFadeInfo type_info node",
    ),
    Ok(
        "radLinkedClass<globalSettings> type_info node",
    ),
    Ok(
        "SoundDebugDisplay type_info node",
    ),
    Ok(
        "CharacterManager::sbFixedSimRate",
    ),
    Ok(
        "CharacterTune::sfKickingForce",
    ),
    Ok(
        "CharacterTune::sfSlamForce",
    ),
    Ok(
        "CharacterTune::sfHighJumpHeight",
    ),
    Ok(
        "CharacterTune::sfDashDeceleration",
    ),
    Ok(
        "CharacterTune::sfDashAcceleration",
    ),
    Ok(
        "CharacterTune::sfShockTime",
    ),
    Ok(
        "VehicleLocomotion type_info node",
    ),
    Ok(
        "TrafficVehicle type_info node",
    ),
    Ok(
        "ITrafficSpawnController type_info node",
    ),
    Ok(
        "PathManager type_info node",
    ),
    Ok(
        "SpawnManager type_info node",
    ),
    Ok(
        "sim::VoidPList type_info node",
    ),
    Ok(
        "sim::ImpulseBasedCollisionSolver type_info node",
    ),
    Ok(
        "sim::SimUnits type_info node",
    ),
    Ok(
        "sim::SymMatrix type_info node",
    ),
    Ok(
        "sim::PhysicsJoint type_info node",
    ),
    Ok(
        "sim::VirtualCM type_info node",
    ),
    Ok(
        "sim::CollisionAnalyser type_info node",
    ),
    Ok(
        "sim::SubCollisionDetector type_info node",
    ),
    Ok(
        "sim::Filter1D type_info node",
    ),
    Ok(
        "sim::Filter3D type_info node",
    ),
    Ok(
        "rVector<int> type_info node",
    ),
    Ok(
        "Scrooby::Owner type_info node",
    ),
    Ok(
        "Scrooby::ResourceManagerCallback type_info node",
    ),
    Ok(
        "Scrooby::Project type_info node",
    ),
    Ok(
        "rVector<PascalCString *> type_info node",
    ),
    Ok(
        "rVector<FeLanguage *> type_info node",
    ),
    Ok(
        "Scrooby::TextBible type_info node",
    ),
    Ok(
        "FeResourceManager::AliasEntry type_info node",
    ),
    Ok(
        "rVector<FeResourceManager::ResourceEntry *> type_info node",
    ),
    Ok(
        "rVector<FeResourceManager::AliasEntry *> type_info node",
    ),
    Ok(
        "rVector<FeResourceManager::Pure3dAttributesEntry *> type_info node",
    ),
    Ok(
        "Scrooby::ResourceManager type_info node",
    ),
    Ok(
        "Scrooby::App type_info node",
    ),
    Ok(
        "XMLTree type_info node",
    ),
    Ok(
        "rVector<FeProject *> type_info node",
    ),
    Ok(
        "XMLNode type_info node",
    ),
    Ok(
        "XMLParser type_info node",
    ),
    Ok(
        "rVector<XMLAttribute *> type_info node",
    ),
    Ok(
        "rVector<XMLNode *> type_info node",
    ),
    Ok(
        "tArray<tBillboardQuad *> type_info node",
    ),
    Ok(
        "pddiExtMemRegistration::CallBack type_info node",
    ),
    Ok(
        "pddiDevice::MessageCallback type_info node",
    ),
    Ok(
        "tArray<tPrimGroup *> type_info node",
    ),
    Ok(
        "tImageHandler::Builder type_info node",
    ),
    Ok(
        "tArray<tLight *> type_info node",
    ),
    Ok(
        "p3d::MemoryRouter type_info node",
    ),
    Ok(
        "tPrimGroupLoader type_info node",
    ),
    Ok(
        "tAnimationGroup type_info node",
    ),
    Ok(
        "tNonCopyable type_info node",
    ),
    Ok(
        "tArray<tCompositeDrawable::DrawableElement *> type_info node",
    ),
    Ok(
        "tPosable type_info node",
    ),
    Ok(
        "tArray<tExpression *> type_info node",
    ),
    Ok(
        "tArray<p3dExpressionStage> type_info node",
    ),
    Ok(
        "tStateSequencerCommand type_info node",
    ),
    Ok(
        "tArray<tSequencerState *> type_info node",
    ),
    Ok(
        "tArray<tSubPartState> type_info node",
    ),
    Ok(
        "tEventOrigin type_info node",
    ),
    Ok(
        "tArray<tSkeleton::Joint> type_info node",
    ),
    Ok(
        "Scenegraph::SceneGraphVisitor type_info node",
    ),
    Ok(
        "Scenegraph::Iterator type_info node",
    ),
    Ok(
        "tImageConverter type_info node",
    ),
    Ok(
        "tArray<tLensFlare *> type_info node",
    ),
    Ok(
        "tBaseParticle type_info node",
    ),
    Ok(
        "pddiObject type_info node",
    ),
    Ok(
        "pddiPrimBufferStream type_info node",
    ),
    Ok(
        "ps2TexCache type_info node",
    ),
    Ok(
        "pddiStack<RadicalMathLibrary::Matrix> type_info node",
    ),
    Ok(
        "pddiState type_info node",
    ),
    Ok(
        "pddiStack<pddiViewState> type_info node",
    ),
    Ok(
        "pddiStack<pddiRenderState> type_info node",
    ),
    Ok(
        "pddiStack<pddiLightingState> type_info node",
    ),
    Ok(
        "pddiStack<pddiFogState> type_info node",
    ),
    Ok(
        "pddiStack<pddiStencilState> type_info node",
    ),
    Ok(
        "pddiExtension type_info node",
    ),
    Ok(
        "radLinkedClass<radSoundHalPositionalGroup> type_info node",
    ),
    Ok(
        "radLinkedClass<radSoundBufferAdpcmPs2> type_info node",
    ),
    Ok(
        "radSoundHalPositionalEntity type_info node",
    ),
    Ok(
        "radLinkedClass<radSoundVoiceAdpcmPs2> type_info node",
    ),
    Ok(
        "radLinkedClass<radSoundClip> type_info node",
    ),
    Ok(
        "radLinkedClass<IRadNameSpace> type_info node",
    ),
    Ok(
        "radLinkedClass<radMoviePlayer> type_info node",
    ),
    Ok(
        "IRadDbgComChannelStatusCallback type_info node",
    ),
    Ok(
        "IRadMutable type_info node",
    ),
    Ok(
        "radBufferedReader type_info node",
    ),
    Ok(
        "radSignedReader type_info node",
    ),
    Ok(
        "radSignedWriter type_info node",
    ),
    Ok(
        "radRequest type_info node",
    ),
    Ok(
        "ILoadManager type_info node",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "_IO_FILE type_info node",
    ),
    Ok(
        "_ios_fields type_info node",
    ),
    Ok(
        "exception type_info node",
    ),
    Ok(
        "type_info type_info node",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::sSelectedVehicleName",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone::sCarSelectInfo",
    ),
    Ok(
        "ActionButton::AnimCollisionEntityDSGWrapper type_info node",
    ),
    Ok(
        "ActionButton::IGameObjectWrapper type_info node",
    ),
    Ok(
        "ActionButton::AnimEntityDSGWrapper type_info node",
    ),
    Ok(
        "ActionButton::ButtonHandler type_info node",
    ),
    Ok(
        "tRefCounted type_info node",
    ),
    Ok(
        "ActionButton::PropHandler type_info node",
    ),
    Ok(
        "ActionButton::AttachProp type_info node",
    ),
    Ok(
        "ActionButton::EnterInterior type_info node",
    ),
    Ok(
        "ActionButton::GetInCar type_info node",
    ),
    Ok(
        "ActionButton::ActionEventHandler type_info node",
    ),
    Ok(
        "ActionButton::AnimSwitch type_info node",
    ),
    Ok(
        "ActionButton::ToggleAnim type_info node",
    ),
    Ok(
        "ActionButton::ReverseAnim type_info node",
    ),
    Ok(
        "ActionButton::PlayAnim type_info node",
    ),
    Ok(
        "ActionButton::PlayAnimLoop type_info node",
    ),
    Ok(
        "ActionButton::AutoPlayAnim type_info node",
    ),
    Ok(
        "ActionButton::AutoPlayAnimLoop type_info node",
    ),
    Ok(
        "ActionButton::AutoPlayAnimInOut type_info node",
    ),
    Ok(
        "ActionButton::DestroyObject type_info node",
    ),
    Ok(
        "ActionButton::UseVendingMachine type_info node",
    ),
    Ok(
        "ActionButton::PrankPhone type_info node",
    ),
    Ok(
        "ActionButton::SummonVehiclePhoneStaticCallback type_info node",
    ),
    Ok(
        "ActionButton::SummonVehiclePhone type_info node",
    ),
    Ok(
        "ActionButton::Bounce type_info node",
    ),
    Ok(
        "ActionButton::Doorbell type_info node",
    ),
    Ok(
        "ActionButton::Collectible type_info node",
    ),
    Ok(
        "ActionButton::RespawnCollectible type_info node",
    ),
    Ok(
        "ActionButton::CollectibleFood type_info node",
    ),
    Ok(
        "ActionButton::CollectibleCard type_info node",
    ),
    Ok(
        "ActionButton::WrenchIcon type_info node",
    ),
    Ok(
        "ActionButton::NitroIcon type_info node",
    ),
    Ok(
        "ActionButton::GenericEventButtonHandler type_info node",
    ),
    Ok(
        "ActionButton::TeleportAction type_info node",
    ),
    Ok(
        "ActionButton::PurchaseReward type_info node",
    ),
    Ok(
        "ActionButton::PurchaseCar type_info node",
    ),
    Ok(
        "ActionButton::PurchaseSkin type_info node",
    ),
    Ok(
        "ActionButtonManager type_info node",
    ),
    Ok(
        "CharacterAi::NoState type_info node",
    ),
    Ok(
        "CharacterAi::InCar type_info node",
    ),
    Ok(
        "CharacterAi::Loco type_info node",
    ),
    Ok(
        "CharacterAi::InSim type_info node",
    ),
    Ok(
        "CharacterAi::GetIn type_info node",
    ),
    Ok(
        "CharacterAi::GetOut type_info node",
    ),
    Ok(
        "TriggerEventAction type_info node",
    ),
    Ok(
        "DelayAction type_info node",
    ),
    Ok(
        "AssignValueToFloat type_info node",
    ),
    Ok(
        "ActionButton::PlayAnimOnce type_info node",
    ),
    Ok(
        "ActionButton::AutomaticDoor type_info node",
    ),
    Ok(
        "ChangeState<CharacterAi::InCar> type_info node",
    ),
    Ok(
        "ChangeState<CharacterAi::Loco> type_info node",
    ),
    Ok(
        "ActionButton::OpenDoor type_info node",
    ),
    Ok(
        "ActionButton::TalkFood type_info node",
    ),
    Ok(
        "ActionButton::TalkDialog type_info node",
    ),
    Ok(
        "ActionButton::TalkMission type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<AnimCollisionEntityDSG> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<StatePropDSG> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<CarStartLocator> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<ActionEventLocator> type_info node",
    ),
    Ok(
        "Action type_info node",
    ),
    Ok(
        "radLoadObject type_info node",
    ),
    Ok(
        "tDrawable type_info node",
    ),
    Ok(
        "SpawnPoint type_info node",
    ),
    Ok(
        "ActorManager type_info node",
    ),
    Ok(
        "Actor type_info node",
    ),
    Ok(
        "FlyingActor type_info node",
    ),
    Ok(
        "Projectile type_info node",
    ),
    Ok(
        "AttackBehaviour type_info node",
    ),
    Ok(
        "EvasionBehaviour type_info node",
    ),
    Ok(
        "UFOBehaviour type_info node",
    ),
    Ok(
        "UFOAttackBehaviour type_info node",
    ),
    Ok(
        "AttractionBehaviour type_info node",
    ),
    Ok(
        "UFOBeamAlwaysOn type_info node",
    ),
    Ok(
        "stringbuf type_info node",
    ),
    Ok(
        "ActorDSG type_info node",
    ),
    Ok(
        "ActorAnimationWasp type_info node",
    ),
    Ok(
        "WingAnimator type_info node",
    ),
    Ok(
        "ActorAnimationUFO type_info node",
    ),
    Ok(
        "ProjectileDSG type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<Locator> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<CStatePropData> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tDrawable> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<EventLocator> type_info node",
    ),
    Ok(
        "streambuf type_info node",
    ),
    Ok(
        "TriggerLocator type_info node",
    ),
    Ok(
        "StatePropDSG type_info node",
    ),
    Ok(
        "Task type_info node",
    ),
    Ok(
        "SlaveAction type_info node",
    ),
    Ok(
        "WalkerLocomotionAction type_info node",
    ),
    Ok(
        "InCarAction type_info node",
    ),
    Ok(
        "HoldAnimationAction type_info node",
    ),
    Ok(
        "SteerAction type_info node",
    ),
    Ok(
        "ReverseAction type_info node",
    ),
    Ok(
        "AccelAction type_info node",
    ),
    Ok(
        "DecelAction type_info node",
    ),
    Ok(
        "JumpAction type_info node",
    ),
    Ok(
        "DodgeAction type_info node",
    ),
    Ok(
        "CringeAction type_info node",
    ),
    Ok(
        "FlailAction type_info node",
    ),
    Ok(
        "GetUpAction type_info node",
    ),
    Ok(
        "PlayAnimationAction type_info node",
    ),
    Ok(
        "PlayIdleAnimationAction type_info node",
    ),
    Ok(
        "CarDoorAction type_info node",
    ),
    Ok(
        "ReleaseDoorsAction type_info node",
    ),
    Ok(
        "Arrive type_info node",
    ),
    Ok(
        "Orient type_info node",
    ),
    Ok(
        "Position type_info node",
    ),
    Ok(
        "GroundSnap type_info node",
    ),
    Ok(
        "ChangeLocomotion type_info node",
    ),
    Ok(
        "ChangeNPCControllerState type_info node",
    ),
    Ok(
        "KickAction type_info node",
    ),
    Ok(
        "SurfAction type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Animation> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Locomotion> type_info node",
    ),
    Ok(
        "VehicleAI type_info node",
    ),
    Ok(
        "ChaseAI type_info node",
    ),
    Ok(
        "WaypointAI type_info node",
    ),
    Ok(
        "TrafficAI type_info node",
    ),
    Ok(
        "AiVehicleController type_info node",
    ),
    Ok(
        "ATCLoader type_info node",
    ),
    Ok(
        "radLoadDataLoader type_info node",
    ),
    Ok(
        "tSimpleChunkHandler type_info node",
    ),
    Ok(
        "SineCosShaker type_info node",
    ),
    Ok(
        "SuperCam type_info node",
    ),
    Ok(
        "AnimatedCam type_info node",
    ),
    Ok(
        "SuperCamCentral type_info node",
    ),
    Ok(
        "BumperCam type_info node",
    ),
    Ok(
        "ChaseCam type_info node",
    ),
    Ok(
        "ConversationCam type_info node",
    ),
    Ok(
        "DebugCam type_info node",
    ),
    Ok(
        "FollowCam type_info node",
    ),
    Ok(
        "SuperCamController type_info node",
    ),
    Ok(
        "KullCam type_info node",
    ),
    Ok(
        "RelativeAnimatedCam type_info node",
    ),
    Ok(
        "RailCam type_info node",
    ),
    Ok(
        "WrecklessEventListener type_info node",
    ),
    Ok(
        "WrecklessCam type_info node",
    ),
    Ok(
        "TrackerCam type_info node",
    ),
    Ok(
        "WalkerCam type_info node",
    ),
    Ok(
        "WalkerCamDataChunk type_info node",
    ),
    Ok(
        "StaticCam type_info node",
    ),
    Ok(
        "ReverseCam type_info node",
    ),
    Ok(
        "SurveillanceCam type_info node",
    ),
    Ok(
        "SuperSprintCam type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCamera> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tMultiController> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<WalkerCamDataChunk> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tVectorCamera> type_info node",
    ),
    Ok(
        "Mappable type_info node",
    ),
    Ok(
        "tEntity type_info node",
    ),
    Ok(
        "BonusCard type_info node",
    ),
    Ok(
        "CardGallery type_info node",
    ),
    Ok(
        "CollectorCard type_info node",
    ),
    Ok(
        "CheatInputHandler type_info node",
    ),
    Ok(
        "Console type_info node",
    ),
    Ok(
        "DebugConsoleCallback type_info node",
    ),
    Ok(
        "Context type_info node",
    ),
    Ok(
        "BootupContext type_info node",
    ),
    Ok(
        "EntryContext type_info node",
    ),
    Ok(
        "PauseContext type_info node",
    ),
    Ok(
        "ExitContext type_info node",
    ),
    Ok(
        "FrontEndContext type_info node",
    ),
    Ok(
        "PlayingContext type_info node",
    ),
    Ok(
        "LoadingContext type_info node",
    ),
    Ok(
        "LoadingGameplayContext type_info node",
    ),
    Ok(
        "ComedyCam type_info node",
    ),
    Ok(
        "GameplayContext type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tLightGroup> type_info node",
    ),
    Ok(
        "LoadingDemoContext type_info node",
    ),
    Ok(
        "DemoContext type_info node",
    ),
    Ok(
        "GameDataManager type_info node",
    ),
    Ok(
        "IRadFileCompletionCallback type_info node",
    ),
    Ok(
        "SaveGameInfo type_info node",
    ),
    Ok(
        "MemoryCardManager type_info node",
    ),
    Ok(
        "IRadDriveCompletionCallback type_info node",
    ),
    Ok(
        "GameFlow type_info node",
    ),
    Ok(
        "SteeringSpring type_info node",
    ),
    Ok(
        "BaseDamper type_info node",
    ),
    Ok(
        "ConstantEffect type_info node",
    ),
    Ok(
        "WheelRumble type_info node",
    ),
    Ok(
        "UserController type_info node",
    ),
    Ok(
        "InputManager type_info node",
    ),
    Ok(
        "InteriorManager type_info node",
    ),
    Ok(
        "GagDrawable type_info node",
    ),
    Ok(
        "Gag type_info node",
    ),
    Ok(
        "InteriorExit type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tFrameController> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<DirectionalLocator> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::CollisionObject> type_info node",
    ),
    Ok(
        "DynaPhysDSG type_info node",
    ),
    Ok(
        "tLoadRequest::Callback type_info node",
    ),
    Ok(
        "radLoadCallback type_info node",
    ),
    Ok(
        "CameraDataLoader type_info node",
    ),
    Ok(
        "LoadingManager type_info node",
    ),
    Ok(
        "CementFileHandler type_info node",
    ),
    Ok(
        "IRadCementLibraryCompletionCallback type_info node",
    ),
    Ok(
        "ChoreoFileHandler type_info node",
    ),
    Ok(
        "ConsoleFileHandler type_info node",
    ),
    Ok(
        "P3DFileHandler type_info node",
    ),
    Ok(
        "IconFileHandler type_info node",
    ),
    Ok(
        "ScroobyFileHandler type_info node",
    ),
    Ok(
        "SoundFileHandler type_info node",
    ),
    Ok(
        "IntersectionLoader type_info node",
    ),
    Ok(
        "LocatorLoader type_info node",
    ),
    Ok(
        "PedGroupLocator type_info node",
    ),
    Ok(
        "RoadDataSegmentLoader type_info node",
    ),
    Ok(
        "RoadLoader type_info node",
    ),
    Ok(
        "PathLoader type_info node",
    ),
    Ok(
        "tChunkHandler type_info node",
    ),
    Ok(
        "EventLocator type_info node",
    ),
    Ok(
        "PS2Platform type_info node",
    ),
    Ok(
        "Platform type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tTextureFont> type_info node",
    ),
    Ok(
        "HeapActivityTracker type_info node",
    ),
    Ok(
        "HeapManager type_info node",
    ),
    Ok(
        "Locator type_info node",
    ),
    Ok(
        "ActionEventLocator type_info node",
    ),
    Ok(
        "CarStartLocator type_info node",
    ),
    Ok(
        "DirectionalLocator type_info node",
    ),
    Ok(
        "FOVLocator type_info node",
    ),
    Ok(
        "InteriorEntranceLocator type_info node",
    ),
    Ok(
        "OcclusionLocator type_info node",
    ),
    Ok(
        "TriggerVolume type_info node",
    ),
    Ok(
        "RectTriggerVolume type_info node",
    ),
    Ok(
        "ScriptLocator type_info node",
    ),
    Ok(
        "SphereTriggerVolume type_info node",
    ),
    Ok(
        "SplineLocator type_info node",
    ),
    Ok(
        "TriggerVolumeTracker type_info node",
    ),
    Ok(
        "ZoneEventLocator type_info node",
    ),
    Ok(
        "StaticCamLocator type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<TriggerVolume> type_info node",
    ),
    Ok(
        "IEntityDSG type_info node",
    ),
    Ok(
        "MissionStage type_info node",
    ),
    Ok(
        "Mission type_info node",
    ),
    Ok(
        "BonusMissionInfo type_info node",
    ),
    Ok(
        "GameplayManager type_info node",
    ),
    Ok(
        "MissionManager type_info node",
    ),
    Ok(
        "MissionScriptLoader type_info node",
    ),
    Ok(
        "AnimatedIcon::AnimIconDSG type_info node",
    ),
    Ok(
        "StatePropCollectible type_info node",
    ),
    Ok(
        "NoDamageBonusObjective type_info node",
    ),
    Ok(
        "NoCopBonusObjective type_info node",
    ),
    Ok(
        "TimeRemainBonusObjective type_info node",
    ),
    Ok(
        "RacePositionBonusObjective type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tTexture> type_info node",
    ),
    Ok(
        "InstStatEntityDSG type_info node",
    ),
    Ok(
        "CharacterSheetManager type_info node",
    ),
    Ok(
        "Merchandise type_info node",
    ),
    Ok(
        "RewardsManager type_info node",
    ),
    Ok(
        "MissionCondition type_info node",
    ),
    Ok(
        "VehicleCondition type_info node",
    ),
    Ok(
        "DamageCondition type_info node",
    ),
    Ok(
        "FollowCondition type_info node",
    ),
    Ok(
        "LeaveInteriorCondition type_info node",
    ),
    Ok(
        "OutOfBoundsCondition type_info node",
    ),
    Ok(
        "RaceCondition type_info node",
    ),
    Ok(
        "TimeOutCondition type_info node",
    ),
    Ok(
        "PositionCondition type_info node",
    ),
    Ok(
        "VehicleCarryingStateProp type_info node",
    ),
    Ok(
        "GetOutOfCarCondition type_info node",
    ),
    Ok(
        "NotAbductedCondition type_info node",
    ),
    Ok(
        "KeepBarrelCondition type_info node",
    ),
    Ok(
        "MissionObjective type_info node",
    ),
    Ok(
        "CollectibleObjective type_info node",
    ),
    Ok(
        "DeliveryObjective type_info node",
    ),
    Ok(
        "DestroyObjective type_info node",
    ),
    Ok(
        "DestroyBossObjective type_info node",
    ),
    Ok(
        "DialogueObjective type_info node",
    ),
    Ok(
        "FollowObjective type_info node",
    ),
    Ok(
        "GetInObjective type_info node",
    ),
    Ok(
        "GoToObjective type_info node",
    ),
    Ok(
        "LoseObjective type_info node",
    ),
    Ok(
        "RaceObjective type_info node",
    ),
    Ok(
        "TalkToObjective type_info node",
    ),
    Ok(
        "CollectDumpedObjective type_info node",
    ),
    Ok(
        "CollectionCondition type_info node",
    ),
    Ok(
        "FMVObjective type_info node",
    ),
    Ok(
        "InteriorObjective type_info node",
    ),
    Ok(
        "CoinObjective type_info node",
    ),
    Ok(
        "LoadVehicleObjective::LoadDisposableCarAsyncCallback type_info node",
    ),
    Ok(
        "LoadVehicleObjective type_info node",
    ),
    Ok(
        "PickupItemObjective type_info node",
    ),
    Ok(
        "TimerObjective type_info node",
    ),
    Ok(
        "BuyCarObjective type_info node",
    ),
    Ok(
        "BuySkinObjective type_info node",
    ),
    Ok(
        "GoOutsideObjective type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<ZoneEventLocator> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<StatePropCollectible> type_info node",
    ),
    Ok(
        "AnimationPlayer type_info node",
    ),
    Ok(
        "SimpleAnimationPlayer type_info node",
    ),
    Ok(
        "CameraPlayer type_info node",
    ),
    Ok(
        "MouthFlapper type_info node",
    ),
    Ok(
        "NISPlayer type_info node",
    ),
    Ok(
        "PlayerDrawable type_info node",
    ),
    Ok(
        "TransitionPlayer type_info node",
    ),
    Ok(
        "PresentationOverlay type_info node",
    ),
    Ok(
        "PresentationManager type_info node",
    ),
    Ok(
        "TutorialManager type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimation> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<Scenegraph::Scenegraph> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCompositeDrawable> type_info node",
    ),
    Ok(
        "poser::PoseDriver type_info node",
    ),
    Ok(
        "radObject type_info node",
    ),
    Ok(
        "radRefCount type_info node",
    ),
    Ok(
        "FMVPlayer type_info node",
    ),
    Ok(
        "IRadMovieRenderLoop type_info node",
    ),
    Ok(
        "FMVUserInputHandler type_info node",
    ),
    Ok(
        "CGuiScreenPrompt::s_responses",
    ),
    Ok(
        "IRadMemoryHeap type_info node",
    ),
    Ok(
        "Scrooby::BoundedDrawable type_info node",
    ),
    Ok(
        "Scrooby::HasBoundingBox type_info node",
    ),
    Ok(
        "Scrooby::Text type_info node",
    ),
    Ok(
        "Scrooby::Sprite type_info node",
    ),
    Ok(
        "GuiMenuItemText type_info node",
    ),
    Ok(
        "GuiMenuItemSprite type_info node",
    ),
    Ok(
        "CGuiMenu type_info node",
    ),
    Ok(
        "CGuiMenu2D type_info node",
    ),
    Ok(
        "CGuiMenuPrompt type_info node",
    ),
    Ok(
        "CGuiWindow type_info node",
    ),
    Ok(
        "CGuiManager type_info node",
    ),
    Ok(
        "CGuiSystem type_info node",
    ),
    Ok(
        "CGuiScreen type_info node",
    ),
    Ok(
        "CGuiScreenMessage type_info node",
    ),
    Ok(
        "CGuiScreenPrompt type_info node",
    ),
    Ok(
        "CGuiUserInputHandler type_info node",
    ),
    Ok(
        "CGuiScreenMemCardCheck type_info node",
    ),
    Ok(
        "CGuiScreenLoadSave type_info node",
    ),
    Ok(
        "CGuiScreenMemoryCard type_info node",
    ),
    Ok(
        "IRadMemoryAllocator type_info node",
    ),
    Ok(
        "CGuiManagerBootUp type_info node",
    ),
    Ok(
        "CGuiScreenBootupLoad type_info node",
    ),
    Ok(
        "CGuiScreenLicense type_info node",
    ),
    Ok(
        "CGuiScreenLanguage type_info node",
    ),
    Ok(
        "CGuiManagerLanguage type_info node",
    ),
    Ok(
        "CGuiManagerBackEnd type_info node",
    ),
    Ok(
        "CGuiScreenLoading type_info node",
    ),
    Ok(
        "CGuiScreenLoadingFE type_info node",
    ),
    Ok(
        "CGuiScreenDemo type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tSprite> type_info node",
    ),
    Ok(
        "CGuiScreenViewCredits::s_creditsOffsets",
    ),
    Ok(
        "CGuiManagerFrontEnd type_info node",
    ),
    Ok(
        "CGuiScreenSplash type_info node",
    ),
    Ok(
        "CGuiScreenMainMenu type_info node",
    ),
    Ok(
        "CGuiScreenIntroTransition type_info node",
    ),
    Ok(
        "CGuiScreenLoadGame type_info node",
    ),
    Ok(
        "CGuiScreenAutoLoad type_info node",
    ),
    Ok(
        "CGuiScreenScrapBook type_info node",
    ),
    Ok(
        "CGuiScreenScrapBookContents type_info node",
    ),
    Ok(
        "CGuiScreenScrapBookStats type_info node",
    ),
    Ok(
        "CGuiScreenCardGallery type_info node",
    ),
    Ok(
        "CGuiScreenMissionGallery type_info node",
    ),
    Ok(
        "CGuiScreenSkinGallery type_info node",
    ),
    Ok(
        "CGuiScreenVehicleGallery type_info node",
    ),
    Ok(
        "CGuiScreenOptions type_info node",
    ),
    Ok(
        "CGuiScreenController type_info node",
    ),
    Ok(
        "CGuiScreenSound type_info node",
    ),
    Ok(
        "CGuiScreenViewCredits type_info node",
    ),
    Ok(
        "CGuiScreenViewMovies type_info node",
    ),
    Ok(
        "CGuiScreenPlayMovie type_info node",
    ),
    Ok(
        "CGuiManagerMiniGame type_info node",
    ),
    Ok(
        "CGuiScreenMiniMenu type_info node",
    ),
    Ok(
        "CGuiScreenMiniHud type_info node",
    ),
    Ok(
        "CGuiScreenMiniPause type_info node",
    ),
    Ok(
        "CGuiScreenMiniSummary type_info node",
    ),
    Ok(
        "GuiSFX::AbortCurrentMission type_info node",
    ),
    Ok(
        "GuiSFX::OpenIris type_info node",
    ),
    Ok(
        "GuiSFX::RestartCurrentMission type_info node",
    ),
    Ok(
        "CGuiManagerInGame type_info node",
    ),
    Ok(
        "CGuiScreenMultiHud type_info node",
    ),
    Ok(
        "CGuiScreenHud type_info node",
    ),
    Ok(
        "CGuiScreenPause type_info node",
    ),
    Ok(
        "CGuiScreenPauseSunday type_info node",
    ),
    Ok(
        "CGuiScreenPauseMission type_info node",
    ),
    Ok(
        "CGuiScreenMissionSelect type_info node",
    ),
    Ok(
        "CGuiScreenPauseOptions type_info node",
    ),
    Ok(
        "CGuiScreenPauseController type_info node",
    ),
    Ok(
        "CGuiScreenPauseSound type_info node",
    ),
    Ok(
        "CGuiScreenPauseSettings type_info node",
    ),
    Ok(
        "CGuiScreenMissionBase type_info node",
    ),
    Ok(
        "CGuiScreenMissionLoad type_info node",
    ),
    Ok(
        "CGuiScreenMissionOver type_info node",
    ),
    Ok(
        "CGuiScreenMissionSuccess type_info node",
    ),
    Ok(
        "CGuiScreenLevelStats type_info node",
    ),
    Ok(
        "CGuiScreenLevelEnd type_info node",
    ),
    Ok(
        "CGuiScreenViewCards type_info node",
    ),
    Ok(
        "CGuiScreenLetterBox type_info node",
    ),
    Ok(
        "CGuiScreenIrisWipe type_info node",
    ),
    Ok(
        "IGuiScreenRewards type_info node",
    ),
    Ok(
        "CGuiScreenPhoneBooth type_info node",
    ),
    Ok(
        "CGuiScreenPurchaseRewards type_info node",
    ),
    Ok(
        "CGuiScreenSaveGame type_info node",
    ),
    Ok(
        "CGuiScreenTutorial type_info node",
    ),
    Ok(
        "CGuiScreenCreditsPostFMV type_info node",
    ),
    Ok(
        "ResetCar type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEntity> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tCameraAnimationController> type_info node",
    ),
    Ok(
        "GuiSFX::Chainable1 type_info node",
    ),
    Ok(
        "GuiSFX::SendEvent type_info node",
    ),
    Ok(
        "HudCardCollected type_info node",
    ),
    Ok(
        "HudCoinCollected type_info node",
    ),
    Ok(
        "HudMissionProgress type_info node",
    ),
    Ok(
        "HudMissionObjective type_info node",
    ),
    Ok(
        "HudCountDown type_info node",
    ),
    Ok(
        "HudHitNRun type_info node",
    ),
    Ok(
        "HudWaspDestroyed type_info node",
    ),
    Ok(
        "HudItemDropped type_info node",
    ),
    Ok(
        "HudMapCam type_info node",
    ),
    Ok(
        "ImageSlider type_info node",
    ),
    Ok(
        "GuiSFX::Chainable type_info node",
    ),
    Ok(
        "GuiSFX::Chainable2 type_info node",
    ),
    Ok(
        "GuiSFX::Chainable3 type_info node",
    ),
    Ok(
        "GuiSFX::Junction2 type_info node",
    ),
    Ok(
        "GuiSFX::Junction3 type_info node",
    ),
    Ok(
        "GuiSFX::Dummy type_info node",
    ),
    Ok(
        "GuiSFX::GotoScreen type_info node",
    ),
    Ok(
        "GuiSFX::Hide type_info node",
    ),
    Ok(
        "GuiSFX::InputStateChange type_info node",
    ),
    Ok(
        "GuiSFX::RecieveEvent type_info node",
    ),
    Ok(
        "GuiSFX::SwitchContext type_info node",
    ),
    Ok(
        "GuiSFX::ColorChange type_info node",
    ),
    Ok(
        "GuiSFX::IrisWipeOpen type_info node",
    ),
    Ok(
        "GuiSFX::IrisWipeClose type_info node",
    ),
    Ok(
        "GuiSFX::Show type_info node",
    ),
    Ok(
        "GuiSFX::Pause type_info node",
    ),
    Ok(
        "GuiSFX::PauseInFrames type_info node",
    ),
    Ok(
        "GuiSFX::PauseGame type_info node",
    ),
    Ok(
        "GuiSFX::ResumeGame type_info node",
    ),
    Ok(
        "GuiSFX::ImageCycler type_info node",
    ),
    Ok(
        "GuiSFX::PulseScale type_info node",
    ),
    Ok(
        "GuiSFX::Spin type_info node",
    ),
    Ok(
        "GuiSFX::Translator type_info node",
    ),
    Ok(
        "GuiSFX::UnderdampedTranslator type_info node",
    ),
    Ok(
        "PresentationEvent type_info node",
    ),
    Ok(
        "FMVEvent type_info node",
    ),
    Ok(
        "NISEvent type_info node",
    ),
    Ok(
        "TransitionEvent type_info node",
    ),
    Ok(
        "BoxPts type_info node",
    ),
    Ok(
        "HexahedronP type_info node",
    ),
    Ok(
        "SpatialTree type_info node",
    ),
    Ok(
        "SphereSP type_info node",
    ),
    Ok(
        "WorldScene type_info node",
    ),
    Ok(
        "CollisionAttributes type_info node",
    ),
    Ok(
        "CollisionEntityDSG type_info node",
    ),
    Ok(
        "AnimCollisionEntityDSG type_info node",
    ),
    Ok(
        "StaticPhysDSG type_info node",
    ),
    Ok(
        "InstDynaPhysDSG type_info node",
    ),
    Ok(
        "StaticEntityDSG type_info node",
    ),
    Ok(
        "AnimEntityDSG type_info node",
    ),
    Ok(
        "IntersectDSG type_info node",
    ),
    Ok(
        "FenceEntityDSG type_info node",
    ),
    Ok(
        "BreakableObjectDSG type_info node",
    ),
    Ok(
        "InstStatPhysDSG type_info node",
    ),
    Ok(
        "LensFlareDSG type_info node",
    ),
    Ok(
        "WorldSphereDSG type_info node",
    ),
    Ok(
        "InstAnimDynaPhysDSG type_info node",
    ),
    Ok(
        "AnimDynaPhysWrapper type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::PhysicsObject> type_info node",
    ),
    Ok(
        "BreakablesManager type_info node",
    ),
    Ok(
        "Skidmark type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tShader> type_info node",
    ),
    Ok(
        "GeometryWrappedLoader type_info node",
    ),
    Ok(
        "StaticEntityLoader type_info node",
    ),
    Ok(
        "StaticPhysLoader type_info node",
    ),
    Ok(
        "TreeDSGLoader type_info node",
    ),
    Ok(
        "FenceLoader type_info node",
    ),
    Ok(
        "IntersectLoader type_info node",
    ),
    Ok(
        "AnimCollLoader type_info node",
    ),
    Ok(
        "AnimDSGLoader type_info node",
    ),
    Ok(
        "DynaPhysLoader type_info node",
    ),
    Ok(
        "InstStatPhysLoader type_info node",
    ),
    Ok(
        "InstStatEntityLoader type_info node",
    ),
    Ok(
        "WorldSphereLoader type_info node",
    ),
    Ok(
        "AnimDynaPhysLoader type_info node",
    ),
    Ok(
        "AnimDynaPhysWrapperLoader type_info node",
    ),
    Ok(
        "AnimObjDSGWrapperLoader type_info node",
    ),
    Ok(
        "BillboardWrappedLoader type_info node",
    ),
    Ok(
        "InstParticleSystemLoader type_info node",
    ),
    Ok(
        "BreakableObjectLoader type_info node",
    ),
    Ok(
        "LensFlareLoader type_info node",
    ),
    Ok(
        "tGeometryLoader type_info node",
    ),
    Ok(
        "tBillboardQuadGroupLoader type_info node",
    ),
    Ok(
        "ParticleSystemDSG type_info node",
    ),
    Ok(
        "tPtrDynamicArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info node",
    ),
    Ok(
        "tPtrArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info node",
    ),
    Ok(
        "tPtrArray<ParticleManager::ManagedParticleSystem *> type_info node",
    ),
    Ok(
        "tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> type_info node",
    ),
    Ok(
        "AnimEntityDSGManager type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<AnimEntityDSG> type_info node",
    ),
    Ok(
        "RenderFlow type_info node",
    ),
    Ok(
        "ParticleSystemRandomData::msIntRands",
    ),
    Ok(
        "ParticleSystemRandomData::msFloatRands",
    ),
    Ok(
        "FrontEndRenderLayer type_info node",
    ),
    Ok(
        "RenderManager type_info node",
    ),
    Ok(
        "WorldRenderLayer type_info node",
    ),
    Ok(
        "TrafficLight type_info node",
    ),
    Ok(
        "NWayStop type_info node",
    ),
    Ok(
        "CourtesyStop type_info node",
    ),
    Ok(
        "Lane type_info node",
    ),
    Ok(
        "RoadSegment type_info node",
    ),
    Ok(
        "SoundCluster type_info node",
    ),
    Ok(
        "Sound::IDaSoundDynaLoadCompletionCallback type_info node",
    ),
    Ok(
        "SoundLoader type_info node",
    ),
    Ok(
        "PositionalSoundPlayer type_info node",
    ),
    Ok(
        "SoundManager type_info node",
    ),
    Ok(
        "SoundRenderingPlayerCallback type_info node",
    ),
    Ok(
        "Sound::IDaSoundPlayerState type_info node",
    ),
    Ok(
        "VehicleSoundDebugPage type_info node",
    ),
    Ok(
        "VehicleSoundPlayer type_info node",
    ),
    Ok(
        "SoundAvatar type_info node",
    ),
    Ok(
        "carSoundParameters type_info node",
    ),
    Ok(
        "ICarSoundParameters type_info node",
    ),
    Ok(
        "NormalEngineState type_info node",
    ),
    Ok(
        "UpshiftEngineState type_info node",
    ),
    Ok(
        "DownshiftEngineState type_info node",
    ),
    Ok(
        "InAirEngineState type_info node",
    ),
    Ok(
        "ReverseEngineState type_info node",
    ),
    Ok(
        "IdleEngineState type_info node",
    ),
    Ok(
        "SkidEngineState type_info node",
    ),
    Ok(
        "PlayableDialog type_info node",
    ),
    Ok(
        "Conversation type_info node",
    ),
    Ok(
        "DialogLine type_info node",
    ),
    Ok(
        "DialogSelectionGroup type_info node",
    ),
    Ok(
        "DialogQueueElement type_info node",
    ),
    Ok(
        "DialogSoundDebugPage type_info node",
    ),
    Ok(
        "DialogPriorityQueue type_info node",
    ),
    Ok(
        "DialogCoordinator type_info node",
    ),
    Ok(
        "MusicPlayer type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<radmusic::radload_composition_adapter> type_info node",
    ),
    Ok(
        "NISPlayerGroup type_info node",
    ),
    Ok(
        "NISSoundPlayer type_info node",
    ),
    Ok(
        "SoundFXLogic type_info node",
    ),
    Ok(
        "SoundFXFrontEndLogic type_info node",
    ),
    Ok(
        "SoundFXGameplayLogic type_info node",
    ),
    Ok(
        "SoundFXPauseLogic type_info node",
    ),
    Ok(
        "ReverbController type_info node",
    ),
    Ok(
        "PS2ReverbController type_info node",
    ),
    Ok(
        "positionalSoundSettings type_info node",
    ),
    Ok(
        "IPositionalSoundSettings type_info node",
    ),
    Ok(
        "reverbSettings type_info node",
    ),
    Ok(
        "IReverbSettings type_info node",
    ),
    Ok(
        "daSoundResourceData::s_fileDescArray",
    ),
    Ok(
        "Sound::daSoundTuner::s_groupWirings",
    ),
    Ok(
        "daSoundResourceData type_info node",
    ),
    Ok(
        "IDaSoundResource type_info node",
    ),
    Ok(
        "Sound::daSoundResourceManager type_info node",
    ),
    Ok(
        "Sound::daSoundDynaLoadRegion type_info node",
    ),
    Ok(
        "Sound::daSoundDynaLoadManager type_info node",
    ),
    Ok(
        "Sound::daSoundAllocatedResource type_info node",
    ),
    Ok(
        "Sound::daSoundPlayerBase type_info node",
    ),
    Ok(
        "Sound::daSoundClipStreamPlayer type_info node",
    ),
    Ok(
        "Sound::MusicSoundPlayer type_info node",
    ),
    Ok(
        "Sound::daSoundAsyncFadeCallback type_info node",
    ),
    Ok(
        "Sound::daSoundPlayerManager type_info node",
    ),
    Ok(
        "Sound::IDaSoundFadeState type_info node",
    ),
    Ok(
        "Sound::daSoundRenderingManager type_info node",
    ),
    Ok(
        "Fader type_info node",
    ),
    Ok(
        "TunerDebugPage type_info node",
    ),
    Ok(
        "Sound::daSoundTuner type_info node",
    ),
    Ok(
        "Sound::IDaSoundTuner type_info node",
    ),
    Ok(
        "Sound::IDaSoundWiring type_info node",
    ),
    Ok(
        "IDaSoundResourceData type_info node",
    ),
    Ok(
        "globalSettings type_info node",
    ),
    Ok(
        "IGlobalSettings type_info node",
    ),
    Ok(
        "VehiclePositionalSoundPlayer type_info node",
    ),
    Ok(
        "TrafficSoundPlayer type_info node",
    ),
    Ok(
        "AIVehicleSoundPlayer type_info node",
    ),
    Ok(
        "AvatarVehiclePosnPlayer type_info node",
    ),
    Ok(
        "ActorPlayer type_info node",
    ),
    Ok(
        "WaspSoundPlayer type_info node",
    ),
    Ok(
        "PlatformSoundPlayer type_info node",
    ),
    Ok(
        "AnimObjSoundPlayer type_info node",
    ),
    Ok(
        "MovingSoundManager type_info node",
    ),
    Ok(
        "Avatar type_info node",
    ),
    Ok(
        "VehicleCentral type_info node",
    ),
    Ok(
        "AvatarManager type_info node",
    ),
    Ok(
        "HitnRunManager type_info node",
    ),
    Ok(
        "WorldCollisionSolverAgentManager type_info node",
    ),
    Ok(
        "WorldObject type_info node",
    ),
    Ok(
        "sim::CollisionSolverAgent type_info node",
    ),
    Ok(
        "CoinManager type_info node",
    ),
    Ok(
        "CharacterController type_info node",
    ),
    Ok(
        "NPCController type_info node",
    ),
    Ok(
        "PhysicalController type_info node",
    ),
    Ok(
        "CameraRelativeCharacterController type_info node",
    ),
    Ok(
        "AICharacterController type_info node",
    ),
    Ok(
        "Character type_info node",
    ),
    Ok(
        "NPCharacter type_info node",
    ),
    Ok(
        "CharacterManager type_info node",
    ),
    Ok(
        "Wander type_info node",
    ),
    Ok(
        "CharacterMappable type_info node",
    ),
    Ok(
        "BipedCharacterMappable type_info node",
    ),
    Ok(
        "InCarCharacterMappable type_info node",
    ),
    Ok(
        "CharacterTarget type_info node",
    ),
    Ok(
        "AmbientDialogueButton type_info node",
    ),
    Ok(
        "AmbientDialogueTrigger type_info node",
    ),
    Ok(
        "CameraRelativeCharacterControllerEventHandler type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tDrawablePose> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tSkeleton> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Bank> type_info node",
    ),
    Ok(
        "Vehicle type_info node",
    ),
    Ok(
        "TrafficBodyDrawable type_info node",
    ),
    Ok(
        "sim::PhysicsJointMatrixModifier type_info node",
    ),
    Ok(
        "sim::PhysicsJointInertialEffector type_info node",
    ),
    Ok(
        "PhysicsLocomotion type_info node",
    ),
    Ok(
        "RedBrickCollisionSolverAgent type_info node",
    ),
    Ok(
        "WorldCollisionSolverAgent type_info node",
    ),
    Ok(
        "RootMatrixDriver type_info node",
    ),
    Ok(
        "SuspensionJointDriver type_info node",
    ),
    Ok(
        "TrafficLocomotion type_info node",
    ),
    Ok(
        "VehicleEventListener type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tBillboardQuadGroup> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEffectController> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tPoseAnimationController> type_info node",
    ),
    Ok(
        "VehicleController type_info node",
    ),
    Ok(
        "VehicleWander type_info node",
    ),
    Ok(
        "HumanVehicleController type_info node",
    ),
    Ok(
        "VehicleMappable type_info node",
    ),
    Ok(
        "TrafficManager type_info node",
    ),
    Ok(
        "PathSegment type_info node",
    ),
    Ok(
        "Pedestrian type_info node",
    ),
    Ok(
        "PedestrianManager type_info node",
    ),
    Ok(
        "ChaseManager type_info node",
    ),
    Ok(
        "CStateProp type_info node",
    ),
    Ok(
        "CStatePropData type_info node",
    ),
    Ok(
        "CStatePropDataLoader type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimatedObjectFactory> type_info node",
    ),
    Ok(
        "Boss type_info node",
    ),
    Ok(
        "UFO type_info node",
    ),
    Ok(
        "Weapon type_info node",
    ),
    Ok(
        "TractorBeam type_info node",
    ),
    Ok(
        "ParkedCarManager type_info node",
    ),
    Ok(
        "LoadingSuperSprintContext type_info node",
    ),
    Ok(
        "SuperSprintContext type_info node",
    ),
    Ok(
        "SuperSprintFEContext type_info node",
    ),
    Ok(
        "SuperSprintDrawable type_info node",
    ),
    Ok(
        "SuperSprintManager type_info node",
    ),
    Ok(
        "choreo::Animation type_info node",
    ),
    Ok(
        "choreo::PuppetDriverFactory type_info node",
    ),
    Ok(
        "choreo::AnimationDriver type_info node",
    ),
    Ok(
        "choreo::PuppetDriver type_info node",
    ),
    Ok(
        "choreo::AnimationFrame type_info node",
    ),
    Ok(
        "choreo::AnimationRootDriver type_info node",
    ),
    Ok(
        "choreo::RootBlendDriver type_info node",
    ),
    Ok(
        "choreo::AnimationJointDriver type_info node",
    ),
    Ok(
        "choreo::JointBlendDriver type_info node",
    ),
    Ok(
        "choreo::AnimationFootDriver type_info node",
    ),
    Ok(
        "choreo::FootBlendDriver type_info node",
    ),
    Ok(
        "choreo::Driver type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Partition> type_info node",
    ),
    Ok(
        "choreo::Bank::m_ScriptReadHandlers",
    ),
    Ok(
        "tEntityTable type_info node",
    ),
    Ok(
        "choreo::Bank::RawIterator type_info node",
    ),
    Ok(
        "choreo::BaseBank::RawIterator type_info node",
    ),
    Ok(
        "choreo::Bank type_info node",
    ),
    Ok(
        "choreo::BaseBank type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Rig> type_info node",
    ),
    Ok(
        "radLoadHashedStore type_info node",
    ),
    Ok(
        "choreo::MultiBank type_info node",
    ),
    Ok(
        "choreo::P3DEntityStoreWrapperBank type_info node",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank::RawIterator type_info node",
    ),
    Ok(
        "choreo::P3DInventoryWrapperBank type_info node",
    ),
    Ok(
        "choreo::Engine type_info node",
    ),
    Ok(
        "choreo::FootBlenderEffectorSimTarget type_info node",
    ),
    Ok(
        "choreo::FootBlenderPoleVectorSimTarget type_info node",
    ),
    Ok(
        "sim::SimTarget type_info node",
    ),
    Ok(
        "choreo::FootBlender type_info node",
    ),
    Ok(
        "choreo::FootPlanter type_info node",
    ),
    Ok(
        "choreo::JointBlender type_info node",
    ),
    Ok(
        "choreo::ChoreoScriptHandler type_info node",
    ),
    Ok(
        "choreo::ChoreoChunkHandler type_info node",
    ),
    Ok(
        "radLoadFileLoader type_info node",
    ),
    Ok(
        "tFileHandler type_info node",
    ),
    Ok(
        "choreo::LocomotionSlot type_info node",
    ),
    Ok(
        "choreo::Locomotion type_info node",
    ),
    Ok(
        "choreo::LocomotionDriver type_info node",
    ),
    Ok(
        "choreo::LocomotionRootDriver type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<choreo::Transition> type_info node",
    ),
    Ok(
        "choreo::BlendSlot type_info node",
    ),
    Ok(
        "choreo::Partition type_info node",
    ),
    Ok(
        "choreo::InclusivePartition type_info node",
    ),
    Ok(
        "choreo::ExclusivePartition type_info node",
    ),
    Ok(
        "choreo::UnionPartition type_info node",
    ),
    Ok(
        "choreo::IntersectPartition type_info node",
    ),
    Ok(
        "choreo::CompletePartition type_info node",
    ),
    Ok(
        "choreo::LODPartition type_info node",
    ),
    Ok(
        "choreo::Puppet type_info node",
    ),
    Ok(
        "choreo::Replay type_info node",
    ),
    Ok(
        "choreo::ReplayDriver type_info node",
    ),
    Ok(
        "choreo::ReplayBuffer type_info node",
    ),
    Ok(
        "choreo::ReplayDriverInternal type_info node",
    ),
    Ok(
        "choreo::ReplayBlendDriver type_info node",
    ),
    Ok(
        "choreo::ReplayBlender type_info node",
    ),
    Ok(
        "choreo::RigLeg type_info node",
    ),
    Ok(
        "choreo::Rig type_info node",
    ),
    Ok(
        "choreo::RootController type_info node",
    ),
    Ok(
        "choreo::RootPositionController type_info node",
    ),
    Ok(
        "choreo::RootRotationController type_info node",
    ),
    Ok(
        "choreo::RootTransformController type_info node",
    ),
    Ok(
        "choreo::RootDriver type_info node",
    ),
    Ok(
        "choreo::RootDriverInternal type_info node",
    ),
    Ok(
        "choreo::RootBlender type_info node",
    ),
    Ok(
        "choreo::RootFixupDriver type_info node",
    ),
    Ok(
        "choreo::StringFileReader type_info node",
    ),
    Ok(
        "choreo::FileReader type_info node",
    ),
    Ok(
        "choreo::P3DFileReader type_info node",
    ),
    Ok(
        "choreo::FTTFileReader type_info node",
    ),
    Ok(
        "choreo::ScriptReader type_info node",
    ),
    Ok(
        "choreo::SynchronizationDriver type_info node",
    ),
    Ok(
        "choreo::SynchronizationRootDriver type_info node",
    ),
    Ok(
        "choreo::Transition type_info node",
    ),
    Ok(
        "choreo::BlendSlotFootInfo type_info node",
    ),
    Ok(
        "choreo::Blend type_info node",
    ),
    Ok(
        "choreo::BlendDriver type_info node",
    ),
    Ok(
        "choreo::BlendPhase type_info node",
    ),
    Ok(
        "choreo::BlendJointDriver type_info node",
    ),
    Ok(
        "choreo::BlendFootDriver type_info node",
    ),
    Ok(
        "sim::TList<sim::CollisionObject *> type_info node",
    ),
    Ok(
        "sim::CollisionManager type_info node",
    ),
    Ok(
        "sim::CollisionObject type_info node",
    ),
    Ok(
        "sim::CollisionObjectLoader type_info node",
    ),
    Ok(
        "sim::CollisionVolume type_info node",
    ),
    Ok(
        "sim::TList<sim::CollisionVolume *> type_info node",
    ),
    Ok(
        "sim::SphereVolume type_info node",
    ),
    Ok(
        "sim::CylinderVolume type_info node",
    ),
    Ok(
        "sim::OBBoxVolume type_info node",
    ),
    Ok(
        "sim::WallVolume type_info node",
    ),
    Ok(
        "sim::BBoxVolume type_info node",
    ),
    Ok(
        "sim::PhysicsProperties type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::PhysicsProperties> type_info node",
    ),
    Ok(
        "sim::SimEnvironment type_info node",
    ),
    Ok(
        "sim::SimTime type_info node",
    ),
    Ok(
        "sim::SimCGSValue type_info node",
    ),
    Ok(
        "sim::SimLength type_info node",
    ),
    Ok(
        "sim::SimSpeed type_info node",
    ),
    Ok(
        "sim::TList<sim::SimUnits *> type_info node",
    ),
    Ok(
        "sim::SimState type_info node",
    ),
    Ok(
        "sim::ManualSimState type_info node",
    ),
    Ok(
        "sim::TList<sim::JointVirtualCM *> type_info node",
    ),
    Ok(
        "sim::SimStateArticulated type_info node",
    ),
    Ok(
        "sim::SkeletonInfo type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::ArticulatedPhysicsObject> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<sim::SkeletonInfo> type_info node",
    ),
    Ok(
        "sim::SimVectorTarget type_info node",
    ),
    Ok(
        "sim::SimMatrixTarget type_info node",
    ),
    Ok(
        "sim::SimJntMatTarget type_info node",
    ),
    Ok(
        "sim::SimulatedObject type_info node",
    ),
    Ok(
        "sim::tExportInfo type_info node",
    ),
    Ok(
        "sim::tExportInfoLoader type_info node",
    ),
    Ok(
        "sim::SimUnitsManager type_info node",
    ),
    Ok(
        "sim::PhysicsObject type_info node",
    ),
    Ok(
        "sim::PhysicsObjectLoader type_info node",
    ),
    Ok(
        "sim::ArticulatedPhysicsObject type_info node",
    ),
    Ok(
        "sim::TList<sim::PhysicsJoint *> type_info node",
    ),
    Ok(
        "sim::PhysicsJoint0D type_info node",
    ),
    Ok(
        "sim::PhysicsJoint1D type_info node",
    ),
    Ok(
        "sim::PhysicsJoint3D type_info node",
    ),
    Ok(
        "sim::JointVirtualCM type_info node",
    ),
    Ok(
        "sim::CollisionDetector type_info node",
    ),
    Ok(
        "sim::SimpleFilter1D type_info node",
    ),
    Ok(
        "sim::SimpleFilter3D type_info node",
    ),
    Ok(
        "sim::SimpleFilterAbs3D type_info node",
    ),
    Ok(
        "sim::Kalmann1D type_info node",
    ),
    Ok(
        "sim::DoubleKalmann1D type_info node",
    ),
    Ok(
        "poser::Pose type_info node",
    ),
    Ok(
        "poser::PoseEngine type_info node",
    ),
    Ok(
        "FeProjectFileHandler type_info node",
    ),
    Ok(
        "FeTextBibleLoader type_info node",
    ),
    Ok(
        "FeTextBible::m_languageIDs",
    ),
    Ok(
        "FePage type_info node",
    ),
    Ok(
        "Scrooby::Page type_info node",
    ),
    Ok(
        "Scrooby::Layer type_info node",
    ),
    Ok(
        "FeOwner type_info node",
    ),
    Ok(
        "FeParent type_info node",
    ),
    Ok(
        "Scrooby::Polygon type_info node",
    ),
    Ok(
        "FePolygon type_info node",
    ),
    Ok(
        "FeDrawable type_info node",
    ),
    Ok(
        "FeProject type_info node",
    ),
    Ok(
        "Scrooby::Screen type_info node",
    ),
    Ok(
        "FeEntity type_info node",
    ),
    Ok(
        "FePure3dObject type_info node",
    ),
    Ok(
        "Scrooby::Pure3dObject type_info node",
    ),
    Ok(
        "FeBoundedDrawable type_info node",
    ),
    Ok(
        "FeScreen type_info node",
    ),
    Ok(
        "FeSprite type_info node",
    ),
    Ok(
        "FeText type_info node",
    ),
    Ok(
        "FeTextChildString type_info node",
    ),
    Ok(
        "FeTextChildHardCodedString type_info node",
    ),
    Ok(
        "FeTextChildTextBibleString type_info node",
    ),
    Ok(
        "FeTextBible type_info node",
    ),
    Ok(
        "FeTextStyle type_info node",
    ),
    Ok(
        "tLinearTable type_info node",
    ),
    Ok(
        "FeEntityDummy type_info node",
    ),
    Ok(
        "FeResourceManager::ResourceManagerEntryBase type_info node",
    ),
    Ok(
        "FeResourceManager::ResourceEntry type_info node",
    ),
    Ok(
        "FeResourceManager::Pure3dAttributesEntry type_info node",
    ),
    Ok(
        "FeResourceManager type_info node",
    ),
    Ok(
        "FeResourceManager::P3DCallback type_info node",
    ),
    Ok(
        "FeApp type_info node",
    ),
    Ok(
        "Scrooby::FeProjectChunkHandler type_info node",
    ),
    Ok(
        "FeGroup type_info node",
    ),
    Ok(
        "Scrooby::Group type_info node",
    ),
    Ok(
        "FeLanguage type_info node",
    ),
    Ok(
        "FeLayer type_info node",
    ),
    Ok(
        "FeMovie type_info node",
    ),
    Ok(
        "Scrooby::Movie type_info node",
    ),
    Ok(
        "tBillboardQuad type_info node",
    ),
    Ok(
        "tCamRelativeBillboardQuad type_info node",
    ),
    Ok(
        "tPtrArray<tBillboardQuad *> type_info node",
    ),
    Ok(
        "tBillboardQuadGroup type_info node",
    ),
    Ok(
        "tBMPHandler type_info node",
    ),
    Ok(
        "tImageHandler type_info node",
    ),
    Ok(
        "tCamera type_info node",
    ),
    Ok(
        "tCameraLoader type_info node",
    ),
    Ok(
        "tChunkFile type_info node",
    ),
    Ok(
        "radLoadStream type_info node",
    ),
    Ok(
        "RadcoreMemAdapt type_info node",
    ),
    Ok(
        "tShaderIntBroadcast type_info node",
    ),
    Ok(
        "tShaderFloatBroadcast type_info node",
    ),
    Ok(
        "tShaderColourBroadcast type_info node",
    ),
    Ok(
        "tShaderTextureBroadcast type_info node",
    ),
    Ok(
        "tShaderVectorBroadcast type_info node",
    ),
    Ok(
        "tShaderMatrixBroadcast type_info node",
    ),
    Ok(
        "AdaptPDDI type_info node",
    ),
    Ok(
        "tFile type_info node",
    ),
    Ok(
        "tFileMem type_info node",
    ),
    Ok(
        "tFont type_info node",
    ),
    Ok(
        "tGameAttr type_info node",
    ),
    Ok(
        "tGameAttrLoader type_info node",
    ),
    Ok(
        "tPtrArray<tPrimGroup *> type_info node",
    ),
    Ok(
        "tGeometry type_info node",
    ),
    Ok(
        "tImage type_info node",
    ),
    Ok(
        "tImage8 type_info node",
    ),
    Ok(
        "tImageLoader type_info node",
    ),
    Ok(
        "ImageBuilder type_info node",
    ),
    Ok(
        "TextureBuilder type_info node",
    ),
    Ok(
        "tImageFont type_info node",
    ),
    Ok(
        "tImageFontLoader type_info node",
    ),
    Ok(
        "tEntityStore type_info node",
    ),
    Ok(
        "tInventory type_info node",
    ),
    Ok(
        "tSafeCasterObj type_info node",
    ),
    Ok(
        "tLight type_info node",
    ),
    Ok(
        "tPtrArray<tLight *> type_info node",
    ),
    Ok(
        "tLightGroup type_info node",
    ),
    Ok(
        "tLightLoader type_info node",
    ),
    Ok(
        "tLightGroupLoader type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tLight> type_info node",
    ),
    Ok(
        "tLocator type_info node",
    ),
    Ok(
        "tLocatorLoader type_info node",
    ),
    Ok(
        "tP3DFileHandler type_info node",
    ),
    Ok(
        "tLoadRequest::InternalCallback type_info node",
    ),
    Ok(
        "tLoadRequest type_info node",
    ),
    Ok(
        "tRefCountedTemp type_info node",
    ),
    Ok(
        "tLoadManager type_info node",
    ),
    Ok(
        "tTempStore type_info node",
    ),
    Ok(
        "p3d::DefaultRouter type_info node",
    ),
    Ok(
        "tPointCamera type_info node",
    ),
    Ok(
        "tPointLight type_info node",
    ),
    Ok(
        "tPNGHandler type_info node",
    ),
    Ok(
        "tPrimGroup type_info node",
    ),
    Ok(
        "tPrimGroupOptimised type_info node",
    ),
    Ok(
        "tPrimGroupSkinnedOptimised type_info node",
    ),
    Ok(
        "tPrimGroupStreamed type_info node",
    ),
    Ok(
        "tPrimGroupSkinnedStreamed type_info node",
    ),
    Ok(
        "tRawImageHandler type_info node",
    ),
    Ok(
        "tShader type_info node",
    ),
    Ok(
        "tShaderLoader type_info node",
    ),
    Ok(
        "tShaderDefinitionLoader type_info node",
    ),
    Ok(
        "tSprite type_info node",
    ),
    Ok(
        "tSpriteLoader type_info node",
    ),
    Ok(
        "tSpotLight type_info node",
    ),
    Ok(
        "tTargaHandler type_info node",
    ),
    Ok(
        "tTextString type_info node",
    ),
    Ok(
        "tTexture type_info node",
    ),
    Ok(
        "tTextureLoader type_info node",
    ),
    Ok(
        "tSetLoader type_info node",
    ),
    Ok(
        "tTextureFont type_info node",
    ),
    Ok(
        "tTextureFontLoader type_info node",
    ),
    Ok(
        "tVectorCamera type_info node",
    ),
    Ok(
        "tVertexList type_info node",
    ),
    Ok(
        "tView type_info node",
    ),
    Ok(
        "tFrameController type_info node",
    ),
    Ok(
        "tAnimationFrameController type_info node",
    ),
    Ok(
        "tSimpleFrameController type_info node",
    ),
    Ok(
        "tBlendFrameController type_info node",
    ),
    Ok(
        "tFrameControllerLoader type_info node",
    ),
    Ok(
        "tAnimationMemoryBlock type_info node",
    ),
    Ok(
        "tAnimation type_info node",
    ),
    Ok(
        "tAnimationLoader type_info node",
    ),
    Ok(
        "tEffect type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tAnimatedObject> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tExpressionMixer> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tEffect> type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tGeometry> type_info node",
    ),
    Ok(
        "tAnimatedObjectFactory type_info node",
    ),
    Ok(
        "tAnimatedObjectAnimation type_info node",
    ),
    Ok(
        "tAnimatedObject type_info node",
    ),
    Ok(
        "tAnimatedObjectFrameController type_info node",
    ),
    Ok(
        "tAnimatedObjectFactoryLoader type_info node",
    ),
    Ok(
        "tAnimatedObjectLoader type_info node",
    ),
    Ok(
        "tBillboardQuadGroupAnimationController type_info node",
    ),
    Ok(
        "tCameraAnimationController type_info node",
    ),
    Ok(
        "tChannel type_info node",
    ),
    Ok(
        "tIntChannel type_info node",
    ),
    Ok(
        "tFloat1Channel type_info node",
    ),
    Ok(
        "tFloat2Channel type_info node",
    ),
    Ok(
        "tVector1DOFChannel type_info node",
    ),
    Ok(
        "tVectorChannel type_info node",
    ),
    Ok(
        "tVector2DOFChannel type_info node",
    ),
    Ok(
        "tVector3DOFChannel type_info node",
    ),
    Ok(
        "tQuaternionChannel type_info node",
    ),
    Ok(
        "tRotationChannel type_info node",
    ),
    Ok(
        "tCompressedQuaternionChannel type_info node",
    ),
    Ok(
        "tStringChannel type_info node",
    ),
    Ok(
        "tEntityChannel type_info node",
    ),
    Ok(
        "tBoolChannel type_info node",
    ),
    Ok(
        "tColourChannel type_info node",
    ),
    Ok(
        "tEventChannel type_info node",
    ),
    Ok(
        "tCompositeDrawable::DrawablePropElement type_info node",
    ),
    Ok(
        "tCompositeDrawable::DrawablePoseElement type_info node",
    ),
    Ok(
        "tCompositeDrawable::DrawableEffectElement type_info node",
    ),
    Ok(
        "tPtrDynamicArray<tCompositeDrawable::DrawableElement *> type_info node",
    ),
    Ok(
        "tPtrArray<tCompositeDrawable::DrawableElement *> type_info node",
    ),
    Ok(
        "tCompositeDrawable type_info node",
    ),
    Ok(
        "tCompositeDrawableLoader type_info node",
    ),
    Ok(
        "tDrawablePose type_info node",
    ),
    Ok(
        "tEvent type_info node",
    ),
    Ok(
        "tBaseEvent type_info node",
    ),
    Ok(
        "tGenericEvent type_info node",
    ),
    Ok(
        "tExpression type_info node",
    ),
    Ok(
        "tPtrArray<tExpression *> type_info node",
    ),
    Ok(
        "tExpressionGroup type_info node",
    ),
    Ok(
        "tExpressionMixer type_info node",
    ),
    Ok(
        "tExpressionLoader type_info node",
    ),
    Ok(
        "tExpressionGroupLoader::tExpressionStore type_info node",
    ),
    Ok(
        "tExpressionGroupLoader type_info node",
    ),
    Ok(
        "tExpressionMixerLoader type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tExpressionGroup> type_info node",
    ),
    Ok(
        "tExpressionAnimationController type_info node",
    ),
    Ok(
        "tLightAnimationController type_info node",
    ),
    Ok(
        "tMultiController type_info node",
    ),
    Ok(
        "tMultiControllerLoader type_info node",
    ),
    Ok(
        "tPolySkin type_info node",
    ),
    Ok(
        "tPolySkinLoader type_info node",
    ),
    Ok(
        "tPose type_info node",
    ),
    Ok(
        "tPoseAnimationController type_info node",
    ),
    Ok(
        "tStateTransition type_info node",
    ),
    Ok(
        "tSequencerState type_info node",
    ),
    Ok(
        "tPtrArray<tSequencerState *> type_info node",
    ),
    Ok(
        "tSequencer type_info node",
    ),
    Ok(
        "tSequencerLoader type_info node",
    ),
    Ok(
        "tSEQFileHandler type_info node",
    ),
    Ok(
        "tEventOriginSequencer type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tBlendFrameController> type_info node",
    ),
    Ok(
        "tSkeleton type_info node",
    ),
    Ok(
        "tSkeletonLoader type_info node",
    ),
    Ok(
        "tShaderAnimationController type_info node",
    ),
    Ok(
        "tTextureAnimationController type_info node",
    ),
    Ok(
        "tVertexOffsetExpressionMixer type_info node",
    ),
    Ok(
        "tSimpleVisibilityAnimationController type_info node",
    ),
    Ok(
        "tSceneGraphVisibilityAnimationController type_info node",
    ),
    Ok(
        "tCompDrawVisibilityAnimationController type_info node",
    ),
    Ok(
        "tVertexAnimController type_info node",
    ),
    Ok(
        "tOffsetIndexList type_info node",
    ),
    Ok(
        "tColourOffsetList type_info node",
    ),
    Ok(
        "tVectorOffsetList type_info node",
    ),
    Ok(
        "tVector2OffsetList type_info node",
    ),
    Ok(
        "tVertexAnimKey type_info node",
    ),
    Ok(
        "tVertexAnimKeyLoader type_info node",
    ),
    Ok(
        "tVertexOffsetList type_info node",
    ),
    Ok(
        "tGeometryOffset type_info node",
    ),
    Ok(
        "tVertexAnimObject type_info node",
    ),
    Ok(
        "tEffectController type_info node",
    ),
    Ok(
        "tLensFlareGroupLoader type_info node",
    ),
    Ok(
        "tParticleSystemFactoryLoader type_info node",
    ),
    Ok(
        "tParticleSystemLoader type_info node",
    ),
    Ok(
        "radLoadInventory::SafeCast<tParticleSystemFactory> type_info node",
    ),
    Ok(
        "tParticleSystemFactory type_info node",
    ),
    Ok(
        "tEffectFactory type_info node",
    ),
    Ok(
        "tParticleSystem type_info node",
    ),
    Ok(
        "Scenegraph::TransformAnimationController type_info node",
    ),
    Ok(
        "Scenegraph::Node type_info node",
    ),
    Ok(
        "Scenegraph::Branch type_info node",
    ),
    Ok(
        "Scenegraph::Leaf type_info node",
    ),
    Ok(
        "Scenegraph::Transform type_info node",
    ),
    Ok(
        "Scenegraph::Drawable type_info node",
    ),
    Ok(
        "Scenegraph::Attachment type_info node",
    ),
    Ok(
        "Scenegraph::Camera type_info node",
    ),
    Ok(
        "Scenegraph::LightGroup type_info node",
    ),
    Ok(
        "Scenegraph::Scenegraph type_info node",
    ),
    Ok(
        "Scenegraph::Visibility type_info node",
    ),
    Ok(
        "Scenegraph::Loader type_info node",
    ),
    Ok(
        "Scenegraph::DrawableCounter type_info node",
    ),
    Ok(
        "Scenegraph::TranslucentDrawableCounter type_info node",
    ),
    Ok(
        "Scenegraph::LightGroupIterator type_info node",
    ),
    Ok(
        "Scenegraph::ShaderVisitor type_info node",
    ),
    Ok(
        "tPS2FileMap type_info node",
    ),
    Ok(
        "tAmbientLight type_info node",
    ),
    Ok(
        "tDirectionalLight type_info node",
    ),
    Ok(
        "tFileFTT type_info node",
    ),
    Ok(
        "tEventController type_info node",
    ),
    Ok(
        "tEventAnimTextLoader type_info node",
    ),
    Ok(
        "tExpressionOffsets type_info node",
    ),
    Ok(
        "tPtrArray<tLensFlare *> type_info node",
    ),
    Ok(
        "tLensFlareGroup type_info node",
    ),
    Ok(
        "tLensFlare type_info node",
    ),
    Ok(
        "tOpticEffect type_info node",
    ),
    Ok(
        "tParticlePool type_info node",
    ),
    Ok(
        "tSpriteParticle type_info node",
    ),
    Ok(
        "tParticleArray type_info node",
    ),
    Ok(
        "tBaseEmitterFactory type_info node",
    ),
    Ok(
        "tSpriteEmitterFactory type_info node",
    ),
    Ok(
        "tBaseEmitter type_info node",
    ),
    Ok(
        "tSpriteEmitter type_info node",
    ),
    Ok(
        "tLocalSpriteEmitter type_info node",
    ),
    Ok(
        "tBaseGeneratorFactory type_info node",
    ),
    Ok(
        "tPointGeneratorFactory type_info node",
    ),
    Ok(
        "tPlaneGeneratorFactory type_info node",
    ),
    Ok(
        "tSphereGeneratorFactory type_info node",
    ),
    Ok(
        "tBaseGenerator type_info node",
    ),
    Ok(
        "tPointGenerator type_info node",
    ),
    Ok(
        "tPlaneGenerator type_info node",
    ),
    Ok(
        "tSphereGenerator type_info node",
    ),
    Ok(
        "ps2Device type_info node",
    ),
    Ok(
        "pddiDevice type_info node",
    ),
    Ok(
        "pddiDisplay type_info node",
    ),
    Ok(
        "ps2Display type_info node",
    ),
    Ok(
        "pddiPrimBuffer type_info node",
    ),
    Ok(
        "ps2PrimBuffer type_info node",
    ),
    Ok(
        "ps2ErrorShader type_info node",
    ),
    Ok(
        "ps2Shader type_info node",
    ),
    Ok(
        "pddiShader type_info node",
    ),
    Ok(
        "pddiBaseShader type_info node",
    ),
    Ok(
        "ps2LayeredShader type_info node",
    ),
    Ok(
        "ps2LightmapShader type_info node",
    ),
    Ok(
        "ps2LightweightShader type_info node",
    ),
    Ok(
        "ps2ToonShader type_info node",
    ),
    Ok(
        "ps2SimpleShader type_info node",
    ),
    Ok(
        "ps2RefractionShader type_info node",
    ),
    Ok(
        "ps2ReflectionShader type_info node",
    ),
    Ok(
        "ps2ShadowShader type_info node",
    ),
    Ok(
        "pddiTexture type_info node",
    ),
    Ok(
        "ps2Texture type_info node",
    ),
    Ok(
        "pddiRenderContext type_info node",
    ),
    Ok(
        "pddiMatrixStack type_info node",
    ),
    Ok(
        "pddiRenderState type_info node",
    ),
    Ok(
        "pddiViewState type_info node",
    ),
    Ok(
        "pddiLightingState type_info node",
    ),
    Ok(
        "pddiFogState type_info node",
    ),
    Ok(
        "pddiStencilState type_info node",
    ),
    Ok(
        "pddiBaseContext type_info node",
    ),
    Ok(
        "pddiExtMemRegistration type_info node",
    ),
    Ok(
        "_pddiExtMemRegistration type_info node",
    ),
    Ok(
        "ps2Context type_info node",
    ),
    Ok(
        "ps2ExtPS2Control type_info node",
    ),
    Ok(
        "pddiExtPS2Control type_info node",
    ),
    Ok(
        "ps2ExtFramebufferEffects type_info node",
    ),
    Ok(
        "pddiExtFramebufferEffects type_info node",
    ),
    Ok(
        "ps2ExtHardwareSkinning type_info node",
    ),
    Ok(
        "pddiExtHardwareSkinning type_info node",
    ),
    Ok(
        "radmusic::radload_composition_adapter type_info node",
    ),
    Ok(
        "radmusic::radmusic_file_loader type_info node",
    ),
    Ok(
        "radmusic::composition_data_loader type_info node",
    ),
    Ok(
        "radmusic::radload_radmusic_inventory type_info node",
    ),
    Ok(
        "radLoadInventory type_info node",
    ),
    Ok(
        "radmusic::stream_graph_callback type_info node",
    ),
    Ok(
        "radSoundObject type_info node",
    ),
    Ok(
        "radSoundHalAudioFormat type_info node",
    ),
    Ok(
        "IRadSoundHalAudioFormat type_info node",
    ),
    Ok(
        "radSoundHalListener type_info node",
    ),
    Ok(
        "IRadSoundHalListener type_info node",
    ),
    Ok(
        "radSoundHalPositionalInformation type_info node",
    ),
    Ok(
        "radSoundHalPositionalGroup type_info node",
    ),
    Ok(
        "IRadSoundHalPositionalGroup type_info node",
    ),
    Ok(
        "radSoundHalMemoryRegion type_info node",
    ),
    Ok(
        "IRadSoundHalMemoryRegion type_info node",
    ),
    Ok(
        "radSoundHalSystem type_info node",
    ),
    Ok(
        "IRadSoundHalSystem type_info node",
    ),
    Ok(
        "radSoundEffectPs2 type_info node",
    ),
    Ok(
        "IRadSoundEffectPs2 type_info node",
    ),
    Ok(
        "IRadSoundHalEffect type_info node",
    ),
    Ok(
        "radSoundIopPs2 type_info node",
    ),
    Ok(
        "radSoundHalBufferAsyncRequestAdpcmPs2 type_info node",
    ),
    Ok(
        "radSoundBufferAdpcmPs2 type_info node",
    ),
    Ok(
        "IRadSoundHalBuffer type_info node",
    ),
    Ok(
        "radSoundHalAdpcmBufferClearer type_info node",
    ),
    Ok(
        "radSoundPoolObject<radSoundHalAdpcmBufferClearer> type_info node",
    ),
    Ok(
        "radSoundBufferAsyncLoaderAdpcmPs2 type_info node",
    ),
    Ok(
        "IRadSoundHalDataSourceCallback type_info node",
    ),
    Ok(
        "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2> type_info node",
    ),
    Ok(
        "radSoundVoiceAdpcmPs2 type_info node",
    ),
    Ok(
        "IRadSoundHalVoice type_info node",
    ),
    Ok(
        "radSoundUpdatableObject type_info node",
    ),
    Ok(
        "radSoundBufferedDataSource type_info node",
    ),
    Ok(
        "IRadSoundBufferedDataSource type_info node",
    ),
    Ok(
        "IRadSoundHalDataSource type_info node",
    ),
    Ok(
        "radSoundClip type_info node",
    ),
    Ok(
        "IRadSoundClip type_info node",
    ),
    Ok(
        "IRadSoundHalBufferLoadCallback type_info node",
    ),
    Ok(
        "IRadSoundHalBufferClearCallback type_info node",
    ),
    Ok(
        "radSoundClipPlayer type_info node",
    ),
    Ok(
        "IRadSoundClipPlayer type_info node",
    ),
    Ok(
        "IRadSoundPlayer type_info node",
    ),
    Ok(
        "radSoundDataCache type_info node",
    ),
    Ok(
        "IRadSoundDataCache type_info node",
    ),
    Ok(
        "radSoundDataCacheDataSource type_info node",
    ),
    Ok(
        "radSoundRsdFileDataSource type_info node",
    ),
    Ok(
        "IRadSoundRsdFileDataSource type_info node",
    ),
    Ok(
        "radSoundMemoryDataSource type_info node",
    ),
    Ok(
        "IRadSoundMemoryDataSource type_info node",
    ),
    Ok(
        "radSoundMemorySpaceObject type_info node",
    ),
    Ok(
        "IRadSoundMemorySpaceObject type_info node",
    ),
    Ok(
        "radSoundStitchedDataSource type_info node",
    ),
    Ok(
        "IRadSoundStitchedDataSource type_info node",
    ),
    Ok(
        "radSoundStreamPlayer type_info node",
    ),
    Ok(
        "IRadSoundStreamPlayer type_info node",
    ),
    Ok(
        "IRadScript type_info node",
    ),
    Ok(
        "IRadNameSpace type_info node",
    ),
    Ok(
        "radFactoryNode type_info node",
    ),
    Ok(
        "radTypeInfoLoader type_info node",
    ),
    Ok(
        "IRadTypeInfoLoader type_info node",
    ),
    Ok(
        "radObjectListNode type_info node",
    ),
    Ok(
        "IRadObjectList type_info node",
    ),
    Ok(
        "IRadTypeInfo type_info node",
    ),
    Ok(
        "IRadTypeInfoIntLiteral type_info node",
    ),
    Ok(
        "IRadTypeInfoEnum type_info node",
    ),
    Ok(
        "IRadTypeInfoParam type_info node",
    ),
    Ok(
        "IRadTypeInfoMethod type_info node",
    ),
    Ok(
        "IRadTypeInfoSystem type_info node",
    ),
    Ok(
        "radMoviePlayer type_info node",
    ),
    Ok(
        "IRadMoviePlayer2 type_info node",
    ),
    Ok(
        "radMovieIpuPs2 type_info node",
    ),
    Ok(
        "radMovieVideoDecoderPs2 type_info node",
    ),
    Ok(
        "IRadMovieVideoDecoder type_info node",
    ),
    Ok(
        "radMovieRenderStrategyPs2 type_info node",
    ),
    Ok(
        "IRadMovieRenderStrategy type_info node",
    ),
    Ok(
        "radMovieAudioDataSource type_info node",
    ),
    Ok(
        "radTimerList type_info node",
    ),
    Ok(
        "IRadTimerList type_info node",
    ),
    Ok(
        "radTimer type_info node",
    ),
    Ok(
        "IRadTimer type_info node",
    ),
    Ok(
        "radStopwatch type_info node",
    ),
    Ok(
        "IRadStopwatch type_info node",
    ),
    Ok(
        "radMemoryDlAllocator type_info node",
    ),
    Ok(
        "ExternalMemoryHeap type_info node",
    ),
    Ok(
        "IRadMemoryObject type_info node",
    ),
    Ok(
        "ExternalMemoryObject type_info node",
    ),
    Ok(
        "radMemoryAllocatorMalloc type_info node",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToEe type_info node",
    ),
    Ok(
        "IRadMemorySpaceCopyRequest type_info node",
    ),
    Ok(
        "MemorySpaceAsyncRequest type_info node",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyEeToIop type_info node",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToEe type_info node",
    ),
    Ok(
        "MemorySpaceAsyncRequest_CopyIopToIop type_info node",
    ),
    Ok(
        "radMemoryAllocator_Iop type_info node",
    ),
    Ok(
        "MemoryPool type_info node",
    ),
    Ok(
        "IRadMemoryPool type_info node",
    ),
    Ok(
        "StaticHeap type_info node",
    ),
    Ok(
        "TrackingHeap type_info node",
    ),
    Ok(
        "radString type_info node",
    ),
    Ok(
        "IRadString type_info node",
    ),
    Ok(
        "radObjectBTree type_info node",
    ),
    Ok(
        "DebugConsole type_info node",
    ),
    Ok(
        "IRadDebugConsole type_info node",
    ),
    Ok(
        "ConsoleClient type_info node",
    ),
    Ok(
        "IRadDbgComChannelReceiveCallback type_info node",
    ),
    Ok(
        "IRadDbgComChannelSendCallback type_info node",
    ),
    Ok(
        "rControllerSystem2 type_info node",
    ),
    Ok(
        "IRadControllerSystem type_info node",
    ),
    Ok(
        "iControllerLocation2 type_info node",
    ),
    Ok(
        "iIControllerLocation2 type_info node",
    ),
    Ok(
        "rController2 type_info node",
    ),
    Ok(
        "iIController2 type_info node",
    ),
    Ok(
        "iControllerOutputHandler2 type_info node",
    ),
    Ok(
        "iRIControllerOutputPointCallback2 type_info node",
    ),
    Ok(
        "rControllerOutputPoint2 type_info node",
    ),
    Ok(
        "IRadControllerOutputPoint type_info node",
    ),
    Ok(
        "rControllerInputPoint2 type_info node",
    ),
    Ok(
        "iIControllerInputPoint2 type_info node",
    ),
    Ok(
        "LGDevWheelInputPoint type_info node",
    ),
    Ok(
        "IRadControllerInputPoint type_info node",
    ),
    Ok(
        "LGDevWheelOutputPoint type_info node",
    ),
    Ok(
        "LGDevWheelController type_info node",
    ),
    Ok(
        "IRadController type_info node",
    ),
    Ok(
        "radPlatform type_info node",
    ),
    Ok(
        "IRadPlatform type_info node",
    ),
    Ok(
        "radThreadMutex type_info node",
    ),
    Ok(
        "IRadThreadMutex type_info node",
    ),
    Ok(
        "radThreadSemaphore type_info node",
    ),
    Ok(
        "IRadThreadSemaphore type_info node",
    ),
    Ok(
        "radThread::s_ThreadTable",
    ),
    Ok(
        "radThreadLocalStorage::s_InUseIndexTable",
    ),
    Ok(
        "radThreadFiber type_info node",
    ),
    Ok(
        "IRadThreadFiber type_info node",
    ),
    Ok(
        "radThread type_info node",
    ),
    Ok(
        "IRadThread type_info node",
    ),
    Ok(
        "radThreadLocalStorage type_info node",
    ),
    Ok(
        "IRadThreadLocalStorage type_info node",
    ),
    Ok(
        "radTextDisplay type_info node",
    ),
    Ok(
        "IRadTextDisplay type_info node",
    ),
    Ok(
        "radWeakCallbackWrapper type_info node",
    ),
    Ok(
        "IRadWeakCallbackWrapper type_info node",
    ),
    Ok(
        "ControllerBuffer type_info node",
    ),
    Ok(
        "IRadControllerBuffer type_info node",
    ),
    Ok(
        "radFileSystem::s_DefaultDrive",
    ),
    Ok(
        "radFileSystem::s_DriveMap",
    ),
    Ok(
        "radRemoteDrive type_info node",
    ),
    Ok(
        "radDrive type_info node",
    ),
    Ok(
        "radSafeRefCount type_info node",
    ),
    Ok(
        "radCementLibrary type_info node",
    ),
    Ok(
        "IRadCementLibrary type_info node",
    ),
    Ok(
        "radPs2CdDrive type_info node",
    ),
    Ok(
        "radPs2HostDrive type_info node",
    ),
    Ok(
        "radPs2MemcardDrive type_info node",
    ),
    Ok(
        "CompletionEventRequest type_info node",
    ),
    Ok(
        "CompletionCallbackRequest type_info node",
    ),
    Ok(
        "FileCompletionRequest type_info node",
    ),
    Ok(
        "DriveCompletionRequest type_info node",
    ),
    Ok(
        "radFileRequest type_info node",
    ),
    Ok(
        "FileOpenRequest type_info node",
    ),
    Ok(
        "SaveGameOpenRequest type_info node",
    ),
    Ok(
        "FileCloseRequest type_info node",
    ),
    Ok(
        "FileCommitRequest type_info node",
    ),
    Ok(
        "FileReadRequest type_info node",
    ),
    Ok(
        "FileWriteRequest type_info node",
    ),
    Ok(
        "FileSetPositionRequest type_info node",
    ),
    Ok(
        "FileGetPositionRequest type_info node",
    ),
    Ok(
        "FileGetSizeRequest type_info node",
    ),
    Ok(
        "FileCancelRequest type_info node",
    ),
    Ok(
        "radDriveRequest type_info node",
    ),
    Ok(
        "DriveOpenRequest type_info node",
    ),
    Ok(
        "DriveMediaRequest type_info node",
    ),
    Ok(
        "DriveFormatRequest type_info node",
    ),
    Ok(
        "DriveCreateDirectoryRequest type_info node",
    ),
    Ok(
        "DriveDestroyDirectoryRequest type_info node",
    ),
    Ok(
        "DriveFindFirstRequest type_info node",
    ),
    Ok(
        "DriveFindNextRequest type_info node",
    ),
    Ok(
        "DriveFindCloseRequest type_info node",
    ),
    Ok(
        "DriveFileDestroyRequest type_info node",
    ),
    Ok(
        "DriveCancelRequest type_info node",
    ),
    Ok(
        "radFile type_info node",
    ),
    Ok(
        "IRadFile type_info node",
    ),
    Ok(
        "radInstanceDrive type_info node",
    ),
    Ok(
        "IRadDrive type_info node",
    ),
    Ok(
        "radDriveThread type_info node",
    ),
    Ok(
        "PtrHashTable type_info node",
    ),
    Ok(
        "RefHashTable<IRefCount> type_info node",
    ),
    Ok(
        "HashTable<IRefCount> type_info node",
    ),
    Ok(
        "radLoadStore type_info node",
    ),
    Ok(
        "SafeCasterObj type_info node",
    ),
    Ok(
        "radLoadManager::QueueItem type_info node",
    ),
    Ok(
        "radLoadManager type_info node",
    ),
    Ok(
        "RefHashTable<radLoadFileLoader> type_info node",
    ),
    Ok(
        "HashTable<radLoadFileLoader> type_info node",
    ),
    Ok(
        "RefHashTable<radLoadDataLoader> type_info node",
    ),
    Ok(
        "HashTable<radLoadDataLoader> type_info node",
    ),
    Ok(
        "RefQueue<radLoadObject> type_info node",
    ),
    Ok(
        "Queue<radLoadObject> type_info node",
    ),
    Ok(
        "RefQueue<radLoadCallback> type_info node",
    ),
    Ok(
        "Queue<radLoadCallback> type_info node",
    ),
    Ok(
        "radLoadUpdatableRequest type_info node",
    ),
    Ok(
        "PtrQueue type_info node",
    ),
    Ok(
        "radLoadRequest type_info node",
    ),
    Ok(
        "radLoadBaseStream type_info node",
    ),
    Ok(
        "radLoadDataStream type_info node",
    ),
    Ok(
        "radLoadFileStream type_info node",
    ),
    Ok(
        "radLoadLoaderStream type_info node",
    ),
    Ok(
        "radLoadFileStream::Callback type_info node",
    ),
    Ok(
        "_IO_ostream_withassign type_info node",
    ),
    Ok(
        "ostream type_info node",
    ),
    Ok(
        "_IO_istream_withassign type_info node",
    ),
    Ok(
        "istream type_info node",
    ),
    Ok(
        "iostream type_info node",
    ),
    Ok(
        "ios type_info node",
    ),
    Ok(
        "filebuf type_info node",
    ),
    Ok(
        "ostdiostream type_info node",
    ),
    Ok(
        "istdiostream type_info node",
    ),
    Ok(
        "stdiobuf type_info node",
    ),
    Ok(
        "bad_exception type_info node",
    ),
    Ok(
        "__class_type_info type_info node",
    ),
    Ok(
        "__user_type_info type_info node",
    ),
    Ok(
        "__si_type_info type_info node",
    ),
    Ok(
        "bad_typeid type_info node",
    ),
    Ok(
        "bad_cast type_info node",
    ),
    Ok(
        "__array_type_info type_info node",
    ),
    Ok(
        "__ptmd_type_info type_info node",
    ),
    Ok(
        "__ptmf_type_info type_info node",
    ),
    Ok(
        "__func_type_info type_info node",
    ),
    Ok(
        "__builtin_type_info type_info node",
    ),
    Ok(
        "__attr_type_info type_info node",
    ),
    Ok(
        "__pointer_type_info type_info node",
    ),
]
