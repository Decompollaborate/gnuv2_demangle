---
source: src/gnuv2_demangle/tests/snapshots.rs
expression: "demangle_lines(contents, &config)"
---
[
    (
        "VU_BASE",
        Err(
            NotMangled,
        ),
    ),
    (
        "_VU_DMA_OFFSET_size",
        Err(
            NotMangled,
        ),
    ),
    (
        "vu0_SphereVAABox",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_LOAD_CONTEXT",
        Err(
            NotMangled,
        ),
    ),
    (
        "vu0_SphereVTBox",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_CHECKSKINNING_LOADPRIMGROUP",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_LOADPRIMGROUP",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_XGKICK",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_UNLIT_PROGRAM",
        Err(
            NotMangled,
        ),
    ),
    (
        "vu0_unitmatrix",
        Err(
            NotMangled,
        ),
    ),
    (
        "vu0_mulmatrix",
        Err(
            NotMangled,
        ),
    ),
    (
        "vu0_rotateX",
        Err(
            NotMangled,
        ),
    ),
    (
        "vu0_translate",
        Err(
            NotMangled,
        ),
    ),
    (
        "vclUnlit_CodeEnd",
        Err(
            NotMangled,
        ),
    ),
    (
        "vu0_transform",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_UNLIT_TRI",
        Err(
            NotMangled,
        ),
    ),
    (
        "vu0_quaternionmatrix",
        Err(
            NotMangled,
        ),
    ),
    (
        "vu0_quaternionmultiply",
        Err(
            NotMangled,
        ),
    ),
    (
        "vu0_end",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_UNLITFOG_TRI",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_LIT_PROGRAM",
        Err(
            NotMangled,
        ),
    ),
    (
        "vclLit_CodeEnd",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_LIT_TRI",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_LITFOG_TRI",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_LITSPEC_TRI",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_LITSPECFOG_TRI",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_UNLIT_TRI_MT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_REFRACT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_TOON",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_REFLECT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_LINE",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_DONOTHING",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_SHADOW_VOL",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_SNOW",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_SKINBLEND_NT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_SKINBLEND1B_NT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_SKINBLEND_CT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_SKINBLEND1B_CT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU_END",
        Err(
            NotMangled,
        ),
    ),
    (
        "_exit",
        Err(
            NotMangled,
        ),
    ),
    (
        "__Q212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper::AnimCollisionEntityDSGWrapper(void)",
        ),
    ),
    (
        "_$_Q212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper::~AnimCollisionEntityDSGWrapper(void)",
        ),
    ),
    (
        "UpdateVisibility__Q212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper::UpdateVisibility(void)",
        ),
    ),
    (
        "SetGameObject__Q212ActionButton29AnimCollisionEntityDSGWrapperP22AnimCollisionEntityDSG",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper::SetGameObject(AnimCollisionEntityDSG *)",
        ),
    ),
    (
        "GetAnimationDirection__Q212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper::GetAnimationDirection(void)",
        ),
    ),
    (
        "SetAnimationDirection__Q212ActionButton29AnimCollisionEntityDSGWrapperf",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper::SetAnimationDirection(float)",
        ),
    ),
    (
        "GetAnimController__CQ212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper::GetAnimController(void) const",
        ),
    ),
    (
        "GetDrawable__CQ212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper::GetDrawable(void) const",
        ),
    ),
    (
        "Display__Q212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper::Display(void)",
        ),
    ),
    (
        "_$_Q212ActionButton20AnimEntityDSGWrapper",
        Ok(
            "ActionButton::AnimEntityDSGWrapper::~AnimEntityDSGWrapper(void)",
        ),
    ),
    (
        "UpdateVisibility__Q212ActionButton20AnimEntityDSGWrapper",
        Ok(
            "ActionButton::AnimEntityDSGWrapper::UpdateVisibility(void)",
        ),
    ),
    (
        "GetAnimationDirection__Q212ActionButton20AnimEntityDSGWrapper",
        Ok(
            "ActionButton::AnimEntityDSGWrapper::GetAnimationDirection(void)",
        ),
    ),
    (
        "SetAnimationDirection__Q212ActionButton20AnimEntityDSGWrapperf",
        Ok(
            "ActionButton::AnimEntityDSGWrapper::SetAnimationDirection(float)",
        ),
    ),
    (
        "GetAnimController__CQ212ActionButton20AnimEntityDSGWrapper",
        Ok(
            "ActionButton::AnimEntityDSGWrapper::GetAnimController(void) const",
        ),
    ),
    (
        "GetDrawable__CQ212ActionButton20AnimEntityDSGWrapper",
        Ok(
            "ActionButton::AnimEntityDSGWrapper::GetDrawable(void) const",
        ),
    ),
    (
        "Display__Q212ActionButton20AnimEntityDSGWrapper",
        Ok(
            "ActionButton::AnimEntityDSGWrapper::Display(void)",
        ),
    ),
    (
        "__Q212ActionButton13ButtonHandler",
        Ok(
            "ActionButton::ButtonHandler::ButtonHandler(void)",
        ),
    ),
    (
        "_$_Q212ActionButton13ButtonHandler",
        Ok(
            "ActionButton::ButtonHandler::~ButtonHandler(void)",
        ),
    ),
    (
        "ButtonPressed__Q212ActionButton13ButtonHandlerP9Character",
        Ok(
            "ActionButton::ButtonHandler::ButtonPressed(Character *)",
        ),
    ),
    (
        "Enter__Q212ActionButton13ButtonHandlerP9Character",
        Ok(
            "ActionButton::ButtonHandler::Enter(Character *)",
        ),
    ),
    (
        "Exit__Q212ActionButton13ButtonHandlerP9Character",
        Ok(
            "ActionButton::ButtonHandler::Exit(Character *)",
        ),
    ),
    (
        "IsActionButtonPressed__Q212ActionButton13ButtonHandlerP9Character",
        Ok(
            "ActionButton::ButtonHandler::IsActionButtonPressed(Character *)",
        ),
    ),
    (
        "_$_Q212ActionButton11PropHandler",
        Ok(
            "ActionButton::PropHandler::~PropHandler(void)",
        ),
    ),
    (
        "GetProp__CQ212ActionButton11PropHandler",
        Ok(
            "ActionButton::PropHandler::GetProp(void) const",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton10AttachPropP9CharacterP9Sequencer",
        Ok(
            "ActionButton::AttachProp::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton13EnterInteriorP23InteriorEntranceLocator",
        Ok(
            "ActionButton::EnterInterior::EnterInterior(InteriorEntranceLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton13EnterInterior",
        Ok(
            "ActionButton::EnterInterior::~EnterInterior(void)",
        ),
    ),
    (
        "SetLocator__Q212ActionButton13EnterInteriorP23InteriorEntranceLocator",
        Ok(
            "ActionButton::EnterInterior::SetLocator(InteriorEntranceLocator *)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton13EnterInteriorP9CharacterP9Sequencer",
        Ok(
            "ActionButton::EnterInterior::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton8GetInCarP12EventLocator",
        Ok(
            "ActionButton::GetInCar::GetInCar(EventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton8GetInCar",
        Ok(
            "ActionButton::GetInCar::~GetInCar(void)",
        ),
    ),
    (
        "SetEventLocator__Q212ActionButton8GetInCarP12EventLocator",
        Ok(
            "ActionButton::GetInCar::SetEventLocator(EventLocator *)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton8GetInCarP9CharacterP9Sequencer",
        Ok(
            "ActionButton::GetInCar::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton18ActionEventHandlerP18ActionEventLocator",
        Ok(
            "ActionButton::ActionEventHandler::ActionEventHandler(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton18ActionEventHandler",
        Ok(
            "ActionButton::ActionEventHandler::~ActionEventHandler(void)",
        ),
    ),
    (
        "SetActionEventLocator__Q212ActionButton18ActionEventHandlerP18ActionEventLocator",
        Ok(
            "ActionButton::ActionEventHandler::SetActionEventLocator(ActionEventLocator *)",
        ),
    ),
    (
        "__Q212ActionButton10AnimSwitchP18ActionEventLocator",
        Ok(
            "ActionButton::AnimSwitch::AnimSwitch(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch::~AnimSwitch(void)",
        ),
    ),
    (
        "Create__Q212ActionButton10AnimSwitchP12tEntityStore",
        Ok(
            "ActionButton::AnimSwitch::Create(tEntityStore *)",
        ),
    ),
    (
        "OnReset__Q212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch::OnReset(void)",
        ),
    ),
    (
        "Init__Q212ActionButton10AnimSwitchPQ212ActionButton18IGameObjectWrapperPQ25tPose5Jointb",
        Ok(
            "ActionButton::AnimSwitch::Init(ActionButton::IGameObjectWrapper *, tPose::Joint *, bool)",
        ),
    ),
    (
        "GetAnimationDirection__Q212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch::GetAnimationDirection(void)",
        ),
    ),
    (
        "SetAnimationDirection__Q212ActionButton10AnimSwitchf",
        Ok(
            "ActionButton::AnimSwitch::SetAnimationDirection(float)",
        ),
    ),
    (
        "GetAnimController__CQ212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch::GetAnimController(void) const",
        ),
    ),
    (
        "Update__Q212ActionButton10AnimSwitchf",
        Ok(
            "ActionButton::AnimSwitch::Update(float)",
        ),
    ),
    (
        "Destroy__Q212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch::Destroy(void)",
        ),
    ),
    (
        "ButtonPressed__Q212ActionButton10AnimSwitchP9Character",
        Ok(
            "ActionButton::AnimSwitch::ButtonPressed(Character *)",
        ),
    ),
    (
        "PositionCharacter__Q212ActionButton10AnimSwitchP9CharacterP9Sequencer",
        Ok(
            "ActionButton::AnimSwitch::PositionCharacter(Character *, Sequencer *)",
        ),
    ),
    (
        "SequenceActions__Q212ActionButton10AnimSwitchP9CharacterP9Sequencer",
        Ok(
            "ActionButton::AnimSwitch::SequenceActions(Character *, Sequencer *)",
        ),
    ),
    (
        "SetAnimation__Q212ActionButton10AnimSwitchP9CharacterP9Sequencer",
        Ok(
            "ActionButton::AnimSwitch::SetAnimation(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton10ToggleAnimP18ActionEventLocator",
        Ok(
            "ActionButton::ToggleAnim::ToggleAnim(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton10ToggleAnim",
        Ok(
            "ActionButton::ToggleAnim::~ToggleAnim(void)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton10ToggleAnimP9CharacterP9Sequencer",
        Ok(
            "ActionButton::ToggleAnim::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton11ReverseAnimP9CharacterP9Sequencer",
        Ok(
            "ActionButton::ReverseAnim::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton8PlayAnimP18ActionEventLocator",
        Ok(
            "ActionButton::PlayAnim::PlayAnim(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton8PlayAnim",
        Ok(
            "ActionButton::PlayAnim::~PlayAnim(void)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton8PlayAnimP9CharacterP9Sequencer",
        Ok(
            "ActionButton::PlayAnim::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton12PlayAnimLoopP18ActionEventLocator",
        Ok(
            "ActionButton::PlayAnimLoop::PlayAnimLoop(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton12PlayAnimLoop",
        Ok(
            "ActionButton::PlayAnimLoop::~PlayAnimLoop(void)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton12PlayAnimLoopP9CharacterP9Sequencer",
        Ok(
            "ActionButton::PlayAnimLoop::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton12AutoPlayAnimP18ActionEventLocator",
        Ok(
            "ActionButton::AutoPlayAnim::AutoPlayAnim(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton12AutoPlayAnim",
        Ok(
            "ActionButton::AutoPlayAnim::~AutoPlayAnim(void)",
        ),
    ),
    (
        "IsActionButtonPressed__Q212ActionButton12AutoPlayAnimP9Character",
        Ok(
            "ActionButton::AutoPlayAnim::IsActionButtonPressed(Character *)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton12AutoPlayAnimP9CharacterP9Sequencer",
        Ok(
            "ActionButton::AutoPlayAnim::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton12AutoPlayAnimP9Character",
        Ok(
            "ActionButton::AutoPlayAnim::OnEnter(Character *)",
        ),
    ),
    (
        "OnUpdate__Q212ActionButton12AutoPlayAnimf",
        Ok(
            "ActionButton::AutoPlayAnim::OnUpdate(float)",
        ),
    ),
    (
        "OnExit__Q212ActionButton12AutoPlayAnimP9Character",
        Ok(
            "ActionButton::AutoPlayAnim::OnExit(Character *)",
        ),
    ),
    (
        "PositionCharacter__Q212ActionButton12AutoPlayAnimP9CharacterP9Sequencer",
        Ok(
            "ActionButton::AutoPlayAnim::PositionCharacter(Character *, Sequencer *)",
        ),
    ),
    (
        "SetAnimation__Q212ActionButton12AutoPlayAnimP9CharacterP9Sequencer",
        Ok(
            "ActionButton::AutoPlayAnim::SetAnimation(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton16AutoPlayAnimLoopP18ActionEventLocator",
        Ok(
            "ActionButton::AutoPlayAnimLoop::AutoPlayAnimLoop(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton16AutoPlayAnimLoop",
        Ok(
            "ActionButton::AutoPlayAnimLoop::~AutoPlayAnimLoop(void)",
        ),
    ),
    (
        "__Q212ActionButton17AutoPlayAnimInOutP18ActionEventLocator",
        Ok(
            "ActionButton::AutoPlayAnimInOut::AutoPlayAnimInOut(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton17AutoPlayAnimInOut",
        Ok(
            "ActionButton::AutoPlayAnimInOut::~AutoPlayAnimInOut(void)",
        ),
    ),
    (
        "IsActionButtonPressed__Q212ActionButton17AutoPlayAnimInOutP9Character",
        Ok(
            "ActionButton::AutoPlayAnimInOut::IsActionButtonPressed(Character *)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton17AutoPlayAnimInOutP9CharacterP9Sequencer",
        Ok(
            "ActionButton::AutoPlayAnimInOut::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "OnUpdate__Q212ActionButton17AutoPlayAnimInOutf",
        Ok(
            "ActionButton::AutoPlayAnimInOut::OnUpdate(float)",
        ),
    ),
    (
        "OnExit__Q212ActionButton17AutoPlayAnimInOutP9Character",
        Ok(
            "ActionButton::AutoPlayAnimInOut::OnExit(Character *)",
        ),
    ),
    (
        "__Q212ActionButton13DestroyObjectP18ActionEventLocator",
        Ok(
            "ActionButton::DestroyObject::DestroyObject(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton13DestroyObject",
        Ok(
            "ActionButton::DestroyObject::~DestroyObject(void)",
        ),
    ),
    (
        "Create__Q212ActionButton13DestroyObjectP12tEntityStore",
        Ok(
            "ActionButton::DestroyObject::Create(tEntityStore *)",
        ),
    ),
    (
        "NeedsUpdate__CQ212ActionButton13DestroyObject",
        Ok(
            "ActionButton::DestroyObject::NeedsUpdate(void) const",
        ),
    ),
    (
        "Enter__Q212ActionButton13DestroyObjectP9Character",
        Ok(
            "ActionButton::DestroyObject::Enter(Character *)",
        ),
    ),
    (
        "OnReset__Q212ActionButton13DestroyObject",
        Ok(
            "ActionButton::DestroyObject::OnReset(void)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton13DestroyObjectP9CharacterP9Sequencer",
        Ok(
            "ActionButton::DestroyObject::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "PositionCharacter__Q212ActionButton13DestroyObjectP9CharacterP9Sequencer",
        Ok(
            "ActionButton::DestroyObject::PositionCharacter(Character *, Sequencer *)",
        ),
    ),
    (
        "SetAnimation__Q212ActionButton13DestroyObjectP9CharacterP9Sequencer",
        Ok(
            "ActionButton::DestroyObject::SetAnimation(Character *, Sequencer *)",
        ),
    ),
    (
        "OnUpdate__Q212ActionButton13DestroyObjectf",
        Ok(
            "ActionButton::DestroyObject::OnUpdate(float)",
        ),
    ),
    (
        "RecieveEvent__Q212ActionButton13DestroyObjectiP10CStateProp",
        Ok(
            "ActionButton::DestroyObject::RecieveEvent(int, CStateProp *)",
        ),
    ),
    (
        "__Q212ActionButton17UseVendingMachineP18ActionEventLocator",
        Ok(
            "ActionButton::UseVendingMachine::UseVendingMachine(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton17UseVendingMachine",
        Ok(
            "ActionButton::UseVendingMachine::~UseVendingMachine(void)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton17UseVendingMachineP9CharacterP9Sequencer",
        Ok(
            "ActionButton::UseVendingMachine::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "SetAnimation__Q212ActionButton17UseVendingMachineP9CharacterP9Sequencer",
        Ok(
            "ActionButton::UseVendingMachine::SetAnimation(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton10PrankPhoneP18ActionEventLocator",
        Ok(
            "ActionButton::PrankPhone::PrankPhone(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton10PrankPhone",
        Ok(
            "ActionButton::PrankPhone::~PrankPhone(void)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton10PrankPhoneP9CharacterP9Sequencer",
        Ok(
            "ActionButton::PrankPhone::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "SetAnimation__Q212ActionButton10PrankPhoneP9CharacterP9Sequencer",
        Ok(
            "ActionButton::PrankPhone::SetAnimation(Character *, Sequencer *)",
        ),
    ),
    (
        "Create__Q212ActionButton8DoorbellP12tEntityStore",
        Ok(
            "ActionButton::Doorbell::Create(tEntityStore *)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton8DoorbellP9CharacterP9Sequencer",
        Ok(
            "ActionButton::Doorbell::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton18SummonVehiclePhoneP18ActionEventLocator",
        Ok(
            "ActionButton::SummonVehiclePhone::SummonVehiclePhone(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton18SummonVehiclePhone",
        Ok(
            "ActionButton::SummonVehiclePhone::~SummonVehiclePhone(void)",
        ),
    ),
    (
        "Create__Q212ActionButton18SummonVehiclePhoneP12tEntityStore",
        Ok(
            "ActionButton::SummonVehiclePhone::Create(tEntityStore *)",
        ),
    ),
    (
        "UsesActionButton__CQ212ActionButton18SummonVehiclePhone",
        Ok(
            "ActionButton::SummonVehiclePhone::UsesActionButton(void) const",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton18SummonVehiclePhoneP9CharacterP9Sequencer",
        Ok(
            "ActionButton::SummonVehiclePhone::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "LoadVehicle__Q212ActionButton18SummonVehiclePhonePCcT1Q214VehicleCentral10DriverInit",
        Ok(
            "ActionButton::SummonVehiclePhone::LoadVehicle(char const *, char const *, VehicleCentral::DriverInit)",
        ),
    ),
    (
        "LoadVehicle__Q212ActionButton18SummonVehiclePhonei",
        Ok(
            "ActionButton::SummonVehiclePhone::LoadVehicle(int)",
        ),
    ),
    (
        "LoadDebugVehicle__Q212ActionButton18SummonVehiclePhone",
        Ok(
            "ActionButton::SummonVehiclePhone::LoadDebugVehicle(void)",
        ),
    ),
    (
        "OnUpdate__Q212ActionButton18SummonVehiclePhonef",
        Ok(
            "ActionButton::SummonVehiclePhone::OnUpdate(float)",
        ),
    ),
    (
        "_$_Q212ActionButton32SummonVehiclePhoneStaticCallback",
        Ok(
            "ActionButton::SummonVehiclePhoneStaticCallback::~SummonVehiclePhoneStaticCallback(void)",
        ),
    ),
    (
        "OnProcessRequestsComplete__Q212ActionButton32SummonVehiclePhoneStaticCallbackPv",
        Ok(
            "ActionButton::SummonVehiclePhoneStaticCallback::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "SetAnimation__Q212ActionButton18SummonVehiclePhoneP9CharacterP9Sequencer",
        Ok(
            "ActionButton::SummonVehiclePhone::SetAnimation(Character *, Sequencer *)",
        ),
    ),
    (
        "_$_Q212ActionButton6Bounce",
        Ok(
            "ActionButton::Bounce::~Bounce(void)",
        ),
    ),
    (
        "Create__Q212ActionButton6BounceP12tEntityStore",
        Ok(
            "ActionButton::Bounce::Create(tEntityStore *)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton6BounceP9Character",
        Ok(
            "ActionButton::Bounce::OnEnter(Character *)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton6BounceP9CharacterP7Locator",
        Ok(
            "ActionButton::Bounce::OnEnter(Character *, Locator *)",
        ),
    ),
    (
        "__Q212ActionButton11CollectibleP18ActionEventLocator",
        Ok(
            "ActionButton::Collectible::Collectible(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton11Collectible",
        Ok(
            "ActionButton::Collectible::~Collectible(void)",
        ),
    ),
    (
        "Create__Q212ActionButton11CollectibleP12tEntityStore",
        Ok(
            "ActionButton::Collectible::Create(tEntityStore *)",
        ),
    ),
    (
        "OnReset__Q212ActionButton11Collectible",
        Ok(
            "ActionButton::Collectible::OnReset(void)",
        ),
    ),
    (
        "ResetCollectible__Q212ActionButton11Collectible",
        Ok(
            "ActionButton::Collectible::ResetCollectible(void)",
        ),
    ),
    (
        "OnUpdate__Q212ActionButton11Collectiblef",
        Ok(
            "ActionButton::Collectible::OnUpdate(float)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton11CollectibleP9Character",
        Ok(
            "ActionButton::Collectible::OnEnter(Character *)",
        ),
    ),
    (
        "OnExit__Q212ActionButton11CollectibleP9Character",
        Ok(
            "ActionButton::Collectible::OnExit(Character *)",
        ),
    ),
    (
        "__Q212ActionButton18RespawnCollectibleP18ActionEventLocator",
        Ok(
            "ActionButton::RespawnCollectible::RespawnCollectible(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton18RespawnCollectible",
        Ok(
            "ActionButton::RespawnCollectible::~RespawnCollectible(void)",
        ),
    ),
    (
        "__Q212ActionButton15CollectibleFoodP18ActionEventLocatorf",
        Ok(
            "ActionButton::CollectibleFood::CollectibleFood(ActionEventLocator *, float)",
        ),
    ),
    (
        "_$_Q212ActionButton15CollectibleFood",
        Ok(
            "ActionButton::CollectibleFood::~CollectibleFood(void)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton15CollectibleFoodP9Character",
        Ok(
            "ActionButton::CollectibleFood::OnEnter(Character *)",
        ),
    ),
    (
        "__Q212ActionButton15CollectibleCardP18ActionEventLocator",
        Ok(
            "ActionButton::CollectibleCard::CollectibleCard(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton15CollectibleCard",
        Ok(
            "ActionButton::CollectibleCard::~CollectibleCard(void)",
        ),
    ),
    (
        "Create__Q212ActionButton15CollectibleCardP12tEntityStore",
        Ok(
            "ActionButton::CollectibleCard::Create(tEntityStore *)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton15CollectibleCardP9Character",
        Ok(
            "ActionButton::CollectibleCard::OnEnter(Character *)",
        ),
    ),
    (
        "UpdateThing__Q212ActionButton15CollectibleCardUi",
        Ok(
            "ActionButton::CollectibleCard::UpdateThing(unsigned int)",
        ),
    ),
    (
        "__Q212ActionButton10WrenchIconP18ActionEventLocator",
        Ok(
            "ActionButton::WrenchIcon::WrenchIcon(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton10WrenchIcon",
        Ok(
            "ActionButton::WrenchIcon::~WrenchIcon(void)",
        ),
    ),
    (
        "Create__Q212ActionButton10WrenchIconP12tEntityStore",
        Ok(
            "ActionButton::WrenchIcon::Create(tEntityStore *)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton10WrenchIconP9Character",
        Ok(
            "ActionButton::WrenchIcon::OnEnter(Character *)",
        ),
    ),
    (
        "UpdateThing__Q212ActionButton10WrenchIconUi",
        Ok(
            "ActionButton::WrenchIcon::UpdateThing(unsigned int)",
        ),
    ),
    (
        "Update__Q212ActionButton10WrenchIconf",
        Ok(
            "ActionButton::WrenchIcon::Update(float)",
        ),
    ),
    (
        "__Q212ActionButton9NitroIconP18ActionEventLocator",
        Ok(
            "ActionButton::NitroIcon::NitroIcon(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton9NitroIcon",
        Ok(
            "ActionButton::NitroIcon::~NitroIcon(void)",
        ),
    ),
    (
        "Create__Q212ActionButton9NitroIconP12tEntityStore",
        Ok(
            "ActionButton::NitroIcon::Create(tEntityStore *)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton9NitroIconP9Character",
        Ok(
            "ActionButton::NitroIcon::OnEnter(Character *)",
        ),
    ),
    (
        "UpdateThing__Q212ActionButton9NitroIconUi",
        Ok(
            "ActionButton::NitroIcon::UpdateThing(unsigned int)",
        ),
    ),
    (
        "Update__Q212ActionButton9NitroIconf",
        Ok(
            "ActionButton::NitroIcon::Update(float)",
        ),
    ),
    (
        "__Q212ActionButton25GenericEventButtonHandlerP12EventLocator9EventEnum",
        Ok(
            "ActionButton::GenericEventButtonHandler::GenericEventButtonHandler(EventLocator *, EventEnum)",
        ),
    ),
    (
        "_$_Q212ActionButton25GenericEventButtonHandler",
        Ok(
            "ActionButton::GenericEventButtonHandler::~GenericEventButtonHandler(void)",
        ),
    ),
    (
        "NewAction__Q212ActionButton25GenericEventButtonHandlerP12EventLocator9EventEnum19GameMemoryAllocator",
        Ok(
            "ActionButton::GenericEventButtonHandler::NewAction(EventLocator *, EventEnum, GameMemoryAllocator)",
        ),
    ),
    (
        "SetEventLocator__Q212ActionButton25GenericEventButtonHandlerP12EventLocator",
        Ok(
            "ActionButton::GenericEventButtonHandler::SetEventLocator(EventLocator *)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton25GenericEventButtonHandlerP9CharacterP9Sequencer",
        Ok(
            "ActionButton::GenericEventButtonHandler::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton14TeleportActionP18ActionEventLocator",
        Ok(
            "ActionButton::TeleportAction::TeleportAction(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton14TeleportAction",
        Ok(
            "ActionButton::TeleportAction::~TeleportAction(void)",
        ),
    ),
    (
        "Create__Q212ActionButton14TeleportActionP12tEntityStore",
        Ok(
            "ActionButton::TeleportAction::Create(tEntityStore *)",
        ),
    ),
    (
        "HandleEvent__Q212ActionButton14TeleportAction9EventEnumPv",
        Ok(
            "ActionButton::TeleportAction::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton14TeleportActionP9CharacterP9Sequencer",
        Ok(
            "ActionButton::TeleportAction::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton14TeleportActionP9Character",
        Ok(
            "ActionButton::TeleportAction::OnEnter(Character *)",
        ),
    ),
    (
        "OnExit__Q212ActionButton14TeleportActionP9Character",
        Ok(
            "ActionButton::TeleportAction::OnExit(Character *)",
        ),
    ),
    (
        "__Q212ActionButton14PurchaseRewardP18ActionEventLocator",
        Ok(
            "ActionButton::PurchaseReward::PurchaseReward(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton14PurchaseReward",
        Ok(
            "ActionButton::PurchaseReward::~PurchaseReward(void)",
        ),
    ),
    (
        "OnUpdate__Q212ActionButton14PurchaseRewardf",
        Ok(
            "ActionButton::PurchaseReward::OnUpdate(float)",
        ),
    ),
    (
        "__Q212ActionButton11PurchaseCarP18ActionEventLocator",
        Ok(
            "ActionButton::PurchaseCar::PurchaseCar(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton11PurchaseCar",
        Ok(
            "ActionButton::PurchaseCar::~PurchaseCar(void)",
        ),
    ),
    (
        "Create__Q212ActionButton11PurchaseCarP12tEntityStore",
        Ok(
            "ActionButton::PurchaseCar::Create(tEntityStore *)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton11PurchaseCarP9Character",
        Ok(
            "ActionButton::PurchaseCar::OnButtonPressed(Character *)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton11PurchaseCarP9Character",
        Ok(
            "ActionButton::PurchaseCar::OnEnter(Character *)",
        ),
    ),
    (
        "OnExit__Q212ActionButton11PurchaseCarP9Character",
        Ok(
            "ActionButton::PurchaseCar::OnExit(Character *)",
        ),
    ),
    (
        "OnUpdate__Q212ActionButton11PurchaseCarf",
        Ok(
            "ActionButton::PurchaseCar::OnUpdate(float)",
        ),
    ),
    (
        "__Q212ActionButton12PurchaseSkinP18ActionEventLocator",
        Ok(
            "ActionButton::PurchaseSkin::PurchaseSkin(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton12PurchaseSkin",
        Ok(
            "ActionButton::PurchaseSkin::~PurchaseSkin(void)",
        ),
    ),
    (
        "Create__Q212ActionButton12PurchaseSkinP12tEntityStore",
        Ok(
            "ActionButton::PurchaseSkin::Create(tEntityStore *)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton12PurchaseSkinP9Character",
        Ok(
            "ActionButton::PurchaseSkin::OnButtonPressed(Character *)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton12PurchaseSkinP9Character",
        Ok(
            "ActionButton::PurchaseSkin::OnEnter(Character *)",
        ),
    ),
    (
        "OnExit__Q212ActionButton12PurchaseSkinP9Character",
        Ok(
            "ActionButton::PurchaseSkin::OnExit(Character *)",
        ),
    ),
    (
        "OnUpdate__Q212ActionButton12PurchaseSkinf",
        Ok(
            "ActionButton::PurchaseSkin::OnUpdate(float)",
        ),
    ),
    (
        "CompareActionType__12ActionButtonPCcG13tUidUnaligned",
        Ok(
            "ActionButton::CompareActionType(char const *, tUidUnaligned)",
        ),
    ),
    (
        "__19ActionButtonManager",
        Ok(
            "ActionButtonManager::ActionButtonManager(void)",
        ),
    ),
    (
        "FindHandler__C19ActionButtonManagerPC18ActionEventLocator",
        Ok(
            "ActionButtonManager::FindHandler(ActionEventLocator const *) const",
        ),
    ),
    (
        "AddVehicleSelectInfo__19ActionButtonManageriPPc",
        Ok(
            "ActionButtonManager::AddVehicleSelectInfo(int, char **)",
        ),
    ),
    (
        "ClearVehicleSelectInfo__19ActionButtonManageriPPc",
        Ok(
            "ActionButtonManager::ClearVehicleSelectInfo(int, char **)",
        ),
    ),
    (
        "OnProcessRequestsComplete__19ActionButtonManagerPv",
        Ok(
            "ActionButtonManager::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "_$_19ActionButtonManager",
        Ok(
            "ActionButtonManager::~ActionButtonManager(void)",
        ),
    ),
    (
        "Destroy__19ActionButtonManager",
        Ok(
            "ActionButtonManager::Destroy(void)",
        ),
    ),
    (
        "CreateInstance__19ActionButtonManager",
        Ok(
            "ActionButtonManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__19ActionButtonManager",
        Ok(
            "ActionButtonManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__19ActionButtonManager",
        Ok(
            "ActionButtonManager::DestroyInstance(void)",
        ),
    ),
    (
        "EnterGame__19ActionButtonManager",
        Ok(
            "ActionButtonManager::EnterGame(void)",
        ),
    ),
    (
        "Update__19ActionButtonManagerf",
        Ok(
            "ActionButtonManager::Update(float)",
        ),
    ),
    (
        "AddActionEventLocator__19ActionButtonManagerP18ActionEventLocatorP12tEntityStore",
        Ok(
            "ActionButtonManager::AddActionEventLocator(ActionEventLocator *, tEntityStore *)",
        ),
    ),
    (
        "GetActionByIndex__C19ActionButtonManageri",
        Ok(
            "ActionButtonManager::GetActionByIndex(int) const",
        ),
    ),
    (
        "AddAction__19ActionButtonManagerPQ212ActionButton13ButtonHandlerRiG13tUidUnaligned",
        Ok(
            "ActionButtonManager::AddAction(ActionButton::ButtonHandler *, int &, tUidUnaligned)",
        ),
    ),
    (
        "RemoveActionByIndex__19ActionButtonManageri",
        Ok(
            "ActionButtonManager::RemoveActionByIndex(int)",
        ),
    ),
    (
        "CreateActionEventTrigger__19ActionButtonManagerPCcRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "ActionButtonManager::CreateActionEventTrigger(char const *, RadicalMathLibrary::Vector &, float)",
        ),
    ),
    (
        "LinkActionToObjectJoint__19ActionButtonManagerPCcN41",
        Ok(
            "ActionButtonManager::LinkActionToObjectJoint(char const *, char const *, char const *, char const *, char const *)",
        ),
    ),
    (
        "LinkActionToObject__19ActionButtonManagerPCcN41b",
        Ok(
            "ActionButtonManager::LinkActionToObject(char const *, char const *, char const *, char const *, char const *, bool)",
        ),
    ),
    (
        "LinkActionToLocator__19ActionButtonManagerP18ActionEventLocatorP12tEntityStore",
        Ok(
            "ActionButtonManager::LinkActionToLocator(ActionEventLocator *, tEntityStore *)",
        ),
    ),
    (
        "EnterActionTrigger__19ActionButtonManagerP9Characteri",
        Ok(
            "ActionButtonManager::EnterActionTrigger(Character *, int)",
        ),
    ),
    (
        "ExitActionTrigger__19ActionButtonManagerP9Characteri",
        Ok(
            "ActionButtonManager::ExitActionTrigger(Character *, int)",
        ),
    ),
    (
        "NewActionButtonHandler__19ActionButtonManagerPCcP18ActionEventLocator",
        Ok(
            "ActionButtonManager::NewActionButtonHandler(char const *, ActionEventLocator *)",
        ),
    ),
    (
        "HandleEvent__19ActionButtonManager9EventEnumPv",
        Ok(
            "ActionButtonManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Find__C19ActionButtonManageri",
        Ok(
            "ActionButtonManager::Find(int) const",
        ),
    ),
    (
        "RemoveActionByArrayPos__19ActionButtonManageri",
        Ok(
            "ActionButtonManager::RemoveActionByArrayPos(int)",
        ),
    ),
    (
        "__Q211CharacterAi5StateP9Character",
        Ok(
            "CharacterAi::State::State(Character *)",
        ),
    ),
    (
        "_$_Q211CharacterAi5State",
        Ok(
            "CharacterAi::State::~State(void)",
        ),
    ),
    (
        "__Q211CharacterAi5InCarP9Character",
        Ok(
            "CharacterAi::InCar::InCar(Character *)",
        ),
    ),
    (
        "_$_Q211CharacterAi5InCar",
        Ok(
            "CharacterAi::InCar::~InCar(void)",
        ),
    ),
    (
        "Enter__Q211CharacterAi5InCar",
        Ok(
            "CharacterAi::InCar::Enter(void)",
        ),
    ),
    (
        "Exit__Q211CharacterAi5InCar",
        Ok(
            "CharacterAi::InCar::Exit(void)",
        ),
    ),
    (
        "SequenceAction__Q211CharacterAi5InCar",
        Ok(
            "CharacterAi::InCar::SequenceAction(void)",
        ),
    ),
    (
        "Update__Q211CharacterAi5InCarf",
        Ok(
            "CharacterAi::InCar::Update(float)",
        ),
    ),
    (
        "__Q211CharacterAi4LocoP9Character",
        Ok(
            "CharacterAi::Loco::Loco(Character *)",
        ),
    ),
    (
        "_$_Q211CharacterAi4Loco",
        Ok(
            "CharacterAi::Loco::~Loco(void)",
        ),
    ),
    (
        "Enter__Q211CharacterAi4Loco",
        Ok(
            "CharacterAi::Loco::Enter(void)",
        ),
    ),
    (
        "Exit__Q211CharacterAi4Loco",
        Ok(
            "CharacterAi::Loco::Exit(void)",
        ),
    ),
    (
        "SequenceAction__Q211CharacterAi4Loco",
        Ok(
            "CharacterAi::Loco::SequenceAction(void)",
        ),
    ),
    (
        "Update__Q211CharacterAi4Locof",
        Ok(
            "CharacterAi::Loco::Update(float)",
        ),
    ),
    (
        "__Q211CharacterAi5GetInP9Character",
        Ok(
            "CharacterAi::GetIn::GetIn(Character *)",
        ),
    ),
    (
        "_$_Q211CharacterAi5GetIn",
        Ok(
            "CharacterAi::GetIn::~GetIn(void)",
        ),
    ),
    (
        "Enter__Q211CharacterAi5GetIn",
        Ok(
            "CharacterAi::GetIn::Enter(void)",
        ),
    ),
    (
        "HandleEvent__Q211CharacterAi5GetIn9EventEnumPv",
        Ok(
            "CharacterAi::GetIn::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "CalcGetInPath__Q211CharacterAi5GetInPiPQ218RadicalMathLibrary6VectorPbT3",
        Ok(
            "CharacterAi::GetIn::CalcGetInPath(int *, RadicalMathLibrary::Vector *, bool *, bool *)",
        ),
    ),
    (
        "SequenceAction__Q211CharacterAi5GetIn",
        Ok(
            "CharacterAi::GetIn::SequenceAction(void)",
        ),
    ),
    (
        "Update__Q211CharacterAi5GetInf",
        Ok(
            "CharacterAi::GetIn::Update(float)",
        ),
    ),
    (
        "Exit__Q211CharacterAi5GetIn",
        Ok(
            "CharacterAi::GetIn::Exit(void)",
        ),
    ),
    (
        "__Q211CharacterAi6GetOutP9Character",
        Ok(
            "CharacterAi::GetOut::GetOut(Character *)",
        ),
    ),
    (
        "_$_Q211CharacterAi6GetOut",
        Ok(
            "CharacterAi::GetOut::~GetOut(void)",
        ),
    ),
    (
        "Enter__Q211CharacterAi6GetOut",
        Ok(
            "CharacterAi::GetOut::Enter(void)",
        ),
    ),
    (
        "HandleEvent__Q211CharacterAi6GetOut9EventEnumPv",
        Ok(
            "CharacterAi::GetOut::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Exit__Q211CharacterAi6GetOut",
        Ok(
            "CharacterAi::GetOut::Exit(void)",
        ),
    ),
    (
        "SequenceAction__Q211CharacterAi6GetOut",
        Ok(
            "CharacterAi::GetOut::SequenceAction(void)",
        ),
    ),
    (
        "Update__Q211CharacterAi6GetOutf",
        Ok(
            "CharacterAi::GetOut::Update(float)",
        ),
    ),
    (
        "DoGetOut__Q211CharacterAi6GetOut",
        Ok(
            "CharacterAi::GetOut::DoGetOut(void)",
        ),
    ),
    (
        "__Q211CharacterAi5InSimP9Character",
        Ok(
            "CharacterAi::InSim::InSim(Character *)",
        ),
    ),
    (
        "_$_Q211CharacterAi5InSim",
        Ok(
            "CharacterAi::InSim::~InSim(void)",
        ),
    ),
    (
        "Enter__Q211CharacterAi5InSim",
        Ok(
            "CharacterAi::InSim::Enter(void)",
        ),
    ),
    (
        "Exit__Q211CharacterAi5InSim",
        Ok(
            "CharacterAi::InSim::Exit(void)",
        ),
    ),
    (
        "SequenceAction__Q211CharacterAi5InSim",
        Ok(
            "CharacterAi::InSim::SequenceAction(void)",
        ),
    ),
    (
        "Update__Q211CharacterAi5InSimf",
        Ok(
            "CharacterAi::InSim::Update(float)",
        ),
    ),
    (
        "__Q211CharacterAi12StateManagerP9Character",
        Ok(
            "CharacterAi::StateManager::StateManager(Character *)",
        ),
    ),
    (
        "_$_Q211CharacterAi12StateManager",
        Ok(
            "CharacterAi::StateManager::~StateManager(void)",
        ),
    ),
    (
        "GetCharacter__Q211CharacterAi12StateManager",
        Ok(
            "CharacterAi::StateManager::GetCharacter(void)",
        ),
    ),
    (
        "GetState__CQ211CharacterAi12StateManager",
        Ok(
            "CharacterAi::StateManager::GetState(void) const",
        ),
    ),
    (
        "SetState__Q211CharacterAi12StateManagerPQ211CharacterAi5State",
        Ok(
            "CharacterAi::StateManager::SetState(CharacterAi::State *)",
        ),
    ),
    (
        "ResetState__Q211CharacterAi12StateManager",
        Ok(
            "CharacterAi::StateManager::ResetState(void)",
        ),
    ),
    (
        "Update__Q211CharacterAi12StateManagerf",
        Ok(
            "CharacterAi::StateManager::Update(float)",
        ),
    ),
    (
        "GetCurrentState__CQ211CharacterAi12StateManager",
        Ok(
            "CharacterAi::StateManager::GetCurrentState(void) const",
        ),
    ),
    (
        "__Q212ActionButton12PlayAnimOnceP18ActionEventLocator",
        Ok(
            "ActionButton::PlayAnimOnce::PlayAnimOnce(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton12PlayAnimOnce",
        Ok(
            "ActionButton::PlayAnimOnce::~PlayAnimOnce(void)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton12PlayAnimOnceP9CharacterP9Sequencer",
        Ok(
            "ActionButton::PlayAnimOnce::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "PositionCharacter__Q212ActionButton12PlayAnimOnceP9CharacterP9Sequencer",
        Ok(
            "ActionButton::PlayAnimOnce::PositionCharacter(Character *, Sequencer *)",
        ),
    ),
    (
        "__Q212ActionButton13AutomaticDoorP18ActionEventLocator",
        Ok(
            "ActionButton::AutomaticDoor::AutomaticDoor(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton13AutomaticDoor",
        Ok(
            "ActionButton::AutomaticDoor::~AutomaticDoor(void)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton13AutomaticDoorP9Character",
        Ok(
            "ActionButton::AutomaticDoor::OnEnter(Character *)",
        ),
    ),
    (
        "OnExit__Q212ActionButton13AutomaticDoorP9Character",
        Ok(
            "ActionButton::AutomaticDoor::OnExit(Character *)",
        ),
    ),
    (
        "_$_t17ContiguousBinNode1Z11SpatialNode",
        Ok(
            "ContiguousBinNode<SpatialNode>::~ContiguousBinNode(void)",
        ),
    ),
    (
        "__t17ContiguousBinNode1Z11SpatialNode",
        Ok(
            "ContiguousBinNode<SpatialNode>::ContiguousBinNode(void)",
        ),
    ),
    (
        "GetSubTreeSize__t17ContiguousBinNode1Z11SpatialNode",
        Ok(
            "ContiguousBinNode<SpatialNode>::GetSubTreeSize(void)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1ZQ23sim9Collisioni",
        Ok(
            "sim::TArray<sim::Collision>::ResizeArray(int)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1ZQ23sim9Collision",
        Ok(
            "sim::TArray<sim::Collision>::Grow(void)",
        ),
    ),
    (
        "Add__Q23simt6TArray1ZQ23sim9CollisionRCQ23sim9Collision",
        Ok(
            "sim::TArray<sim::Collision>::Add(sim::Collision const &)",
        ),
    ),
    (
        "SetState__H1ZQ211CharacterAi4Loco_11CharacterAiPQ211CharacterAi12StateManager_v",
        Ok(
            "void CharacterAi::SetState<CharacterAi::Loco>(CharacterAi::StateManager *)",
        ),
    ),
    (
        "SetState__H1ZQ211CharacterAi5InCar_11CharacterAiPQ211CharacterAi12StateManager_v",
        Ok(
            "void CharacterAi::SetState<CharacterAi::InCar>(CharacterAi::StateManager *)",
        ),
    ),
    (
        "__tfQ212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton20AnimEntityDSGWrapper",
        Ok(
            "ActionButton::AnimEntityDSGWrapper type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton13ButtonHandler",
        Ok(
            "ActionButton::ButtonHandler type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton11PropHandler",
        Ok(
            "ActionButton::PropHandler type_info function",
        ),
    ),
    (
        "_$_Q212ActionButton10AttachProp",
        Ok(
            "ActionButton::AttachProp::~AttachProp(void)",
        ),
    ),
    (
        "__tfQ212ActionButton10AttachProp",
        Ok(
            "ActionButton::AttachProp type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton13EnterInterior",
        Ok(
            "ActionButton::EnterInterior type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton8GetInCar",
        Ok(
            "ActionButton::GetInCar type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton18ActionEventHandler",
        Ok(
            "ActionButton::ActionEventHandler type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton10ToggleAnim",
        Ok(
            "ActionButton::ToggleAnim type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton11ReverseAnim",
        Ok(
            "ActionButton::ReverseAnim type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton8PlayAnim",
        Ok(
            "ActionButton::PlayAnim type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton12PlayAnimLoop",
        Ok(
            "ActionButton::PlayAnimLoop type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton12AutoPlayAnim",
        Ok(
            "ActionButton::AutoPlayAnim type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton16AutoPlayAnimLoop",
        Ok(
            "ActionButton::AutoPlayAnimLoop type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton17AutoPlayAnimInOut",
        Ok(
            "ActionButton::AutoPlayAnimInOut type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton13DestroyObject",
        Ok(
            "ActionButton::DestroyObject type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton17UseVendingMachine",
        Ok(
            "ActionButton::UseVendingMachine type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton10PrankPhone",
        Ok(
            "ActionButton::PrankPhone type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton32SummonVehiclePhoneStaticCallback",
        Ok(
            "ActionButton::SummonVehiclePhoneStaticCallback type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton18SummonVehiclePhone",
        Ok(
            "ActionButton::SummonVehiclePhone type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton6Bounce",
        Ok(
            "ActionButton::Bounce type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton8Doorbell",
        Ok(
            "ActionButton::Doorbell type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton11Collectible",
        Ok(
            "ActionButton::Collectible type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton18RespawnCollectible",
        Ok(
            "ActionButton::RespawnCollectible type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton15CollectibleFood",
        Ok(
            "ActionButton::CollectibleFood type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton15CollectibleCard",
        Ok(
            "ActionButton::CollectibleCard type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton10WrenchIcon",
        Ok(
            "ActionButton::WrenchIcon type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton9NitroIcon",
        Ok(
            "ActionButton::NitroIcon type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton25GenericEventButtonHandler",
        Ok(
            "ActionButton::GenericEventButtonHandler type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton14TeleportAction",
        Ok(
            "ActionButton::TeleportAction type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton14PurchaseReward",
        Ok(
            "ActionButton::PurchaseReward type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton11PurchaseCar",
        Ok(
            "ActionButton::PurchaseCar type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton12PurchaseSkin",
        Ok(
            "ActionButton::PurchaseSkin type_info function",
        ),
    ),
    (
        "__tf19ActionButtonManager",
        Ok(
            "ActionButtonManager type_info function",
        ),
    ),
    (
        "__tfQ211CharacterAi5State",
        Ok(
            "CharacterAi::State type_info function",
        ),
    ),
    (
        "__tfQ211CharacterAi7NoState",
        Ok(
            "CharacterAi::NoState type_info function",
        ),
    ),
    (
        "__tfQ211CharacterAi5InCar",
        Ok(
            "CharacterAi::InCar type_info function",
        ),
    ),
    (
        "__tfQ211CharacterAi4Loco",
        Ok(
            "CharacterAi::Loco type_info function",
        ),
    ),
    (
        "__tfQ211CharacterAi5InSim",
        Ok(
            "CharacterAi::InSim type_info function",
        ),
    ),
    (
        "__tfQ211CharacterAi5GetIn",
        Ok(
            "CharacterAi::GetIn type_info function",
        ),
    ),
    (
        "__tfQ211CharacterAi6GetOut",
        Ok(
            "CharacterAi::GetOut type_info function",
        ),
    ),
    (
        "_$_18TriggerEventAction",
        Ok(
            "TriggerEventAction::~TriggerEventAction(void)",
        ),
    ),
    (
        "__tf18TriggerEventAction",
        Ok(
            "TriggerEventAction type_info function",
        ),
    ),
    (
        "_$_11DelayAction",
        Ok(
            "DelayAction::~DelayAction(void)",
        ),
    ),
    (
        "__tf11DelayAction",
        Ok(
            "DelayAction type_info function",
        ),
    ),
    (
        "_$_18AssignValueToFloat",
        Ok(
            "AssignValueToFloat::~AssignValueToFloat(void)",
        ),
    ),
    (
        "__tf18AssignValueToFloat",
        Ok(
            "AssignValueToFloat type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton12PlayAnimOnce",
        Ok(
            "ActionButton::PlayAnimOnce type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton13AutomaticDoor",
        Ok(
            "ActionButton::AutomaticDoor type_info function",
        ),
    ),
    (
        "__tf15ISpatialProxyAA",
        Ok(
            "ISpatialProxyAA type_info function",
        ),
    ),
    (
        "_$_t11ChangeState1ZQ211CharacterAi5InCar",
        Ok(
            "ChangeState<CharacterAi::InCar>::~ChangeState(void)",
        ),
    ),
    (
        "__tft11ChangeState1ZQ211CharacterAi5InCar",
        Ok(
            "ChangeState<CharacterAi::InCar> type_info function",
        ),
    ),
    (
        "_$_t11ChangeState1ZQ211CharacterAi4Loco",
        Ok(
            "ChangeState<CharacterAi::Loco>::~ChangeState(void)",
        ),
    ),
    (
        "__tft11ChangeState1ZQ211CharacterAi4Loco",
        Ok(
            "ChangeState<CharacterAi::Loco> type_info function",
        ),
    ),
    (
        "_$_11tRefCounted",
        Ok(
            "tRefCounted::~tRefCounted(void)",
        ),
    ),
    (
        "__11tRefCounted",
        Ok(
            "tRefCounted::tRefCounted(void)",
        ),
    ),
    (
        "__Q25tPose5Joint",
        Ok(
            "tPose::Joint::Joint(void)",
        ),
    ),
    (
        "__Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "LoadingManager::ProcessRequestsCallback::ProcessRequestsCallback(void)",
        ),
    ),
    (
        "__18CStatePropListener",
        Ok(
            "CStatePropListener::CStatePropListener(void)",
        ),
    ),
    (
        "_$_Q212ActionButton18IGameObjectWrapper",
        Ok(
            "ActionButton::IGameObjectWrapper::~IGameObjectWrapper(void)",
        ),
    ),
    (
        "__Q212ActionButton18IGameObjectWrapper",
        Ok(
            "ActionButton::IGameObjectWrapper::IGameObjectWrapper(void)",
        ),
    ),
    (
        "IsManualUpdate__CQ212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper::IsManualUpdate(void) const",
        ),
    ),
    (
        "IsManualUpdate__CQ212ActionButton20AnimEntityDSGWrapper",
        Ok(
            "ActionButton::AnimEntityDSGWrapper::IsManualUpdate(void) const",
        ),
    ),
    (
        "Update__Q212ActionButton13ButtonHandlerf",
        Ok(
            "ActionButton::ButtonHandler::Update(float)",
        ),
    ),
    (
        "UsesActionButton__CQ212ActionButton13ButtonHandler",
        Ok(
            "ActionButton::ButtonHandler::UsesActionButton(void) const",
        ),
    ),
    (
        "NeedsUpdate__CQ212ActionButton13ButtonHandler",
        Ok(
            "ActionButton::ButtonHandler::NeedsUpdate(void) const",
        ),
    ),
    (
        "Reset__Q212ActionButton13ButtonHandler",
        Ok(
            "ActionButton::ButtonHandler::Reset(void)",
        ),
    ),
    (
        "GetType__Q212ActionButton13ButtonHandler",
        Ok(
            "ActionButton::ButtonHandler::GetType(void)",
        ),
    ),
    (
        "IsInstanceEnabled__CQ212ActionButton13ButtonHandler",
        Ok(
            "ActionButton::ButtonHandler::IsInstanceEnabled(void) const",
        ),
    ),
    (
        "OnReset__Q212ActionButton13ButtonHandler",
        Ok(
            "ActionButton::ButtonHandler::OnReset(void)",
        ),
    ),
    (
        "OnUpdate__Q212ActionButton13ButtonHandlerf",
        Ok(
            "ActionButton::ButtonHandler::OnUpdate(float)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton13ButtonHandlerP9CharacterP9Sequencer",
        Ok(
            "ActionButton::ButtonHandler::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton13ButtonHandlerP9Character",
        Ok(
            "ActionButton::ButtonHandler::OnEnter(Character *)",
        ),
    ),
    (
        "OnExit__Q212ActionButton13ButtonHandlerP9Character",
        Ok(
            "ActionButton::ButtonHandler::OnExit(Character *)",
        ),
    ),
    (
        "GetType__Q212ActionButton13EnterInterior",
        Ok(
            "ActionButton::EnterInterior::GetType(void)",
        ),
    ),
    (
        "GetType__Q212ActionButton8GetInCar",
        Ok(
            "ActionButton::GetInCar::GetType(void)",
        ),
    ),
    (
        "Create__Q212ActionButton18ActionEventHandlerP12tEntityStore",
        Ok(
            "ActionButton::ActionEventHandler::Create(tEntityStore *)",
        ),
    ),
    (
        "GetType__Q212ActionButton18ActionEventHandler",
        Ok(
            "ActionButton::ActionEventHandler::GetType(void)",
        ),
    ),
    (
        "GameObjectDestroyed__Q212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch::GameObjectDestroyed(void)",
        ),
    ),
    (
        "UsesActionButton__CQ212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch::UsesActionButton(void) const",
        ),
    ),
    (
        "NeedsUpdate__CQ212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch::NeedsUpdate(void) const",
        ),
    ),
    (
        "GetType__Q212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch::GetType(void)",
        ),
    ),
    (
        "OnUpdate__Q212ActionButton10AnimSwitchf",
        Ok(
            "ActionButton::AnimSwitch::OnUpdate(float)",
        ),
    ),
    (
        "OnInit__Q212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch::OnInit(void)",
        ),
    ),
    (
        "NewAction__Q212ActionButton10ToggleAnimP18ActionEventLocator",
        Ok(
            "ActionButton::ToggleAnim::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "_$_Q212ActionButton11ReverseAnim",
        Ok(
            "ActionButton::ReverseAnim::~ReverseAnim(void)",
        ),
    ),
    (
        "NewAction__Q212ActionButton11ReverseAnimP18ActionEventLocator",
        Ok(
            "ActionButton::ReverseAnim::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewAction__Q212ActionButton8PlayAnimP18ActionEventLocator",
        Ok(
            "ActionButton::PlayAnim::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewAction__Q212ActionButton12PlayAnimLoopP18ActionEventLocator",
        Ok(
            "ActionButton::PlayAnimLoop::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewAction__Q212ActionButton12AutoPlayAnimP18ActionEventLocator",
        Ok(
            "ActionButton::AutoPlayAnim::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "GetIsCyclic__CQ212ActionButton12AutoPlayAnim",
        Ok(
            "ActionButton::AutoPlayAnim::GetIsCyclic(void) const",
        ),
    ),
    (
        "NewAction__Q212ActionButton16AutoPlayAnimLoopP18ActionEventLocator",
        Ok(
            "ActionButton::AutoPlayAnimLoop::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "GetIsCyclic__CQ212ActionButton16AutoPlayAnimLoop",
        Ok(
            "ActionButton::AutoPlayAnimLoop::GetIsCyclic(void) const",
        ),
    ),
    (
        "NewAction__Q212ActionButton17AutoPlayAnimInOutP18ActionEventLocator",
        Ok(
            "ActionButton::AutoPlayAnimInOut::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewAction__Q212ActionButton13DestroyObjectP18ActionEventLocator",
        Ok(
            "ActionButton::DestroyObject::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "GetType__Q212ActionButton13DestroyObject",
        Ok(
            "ActionButton::DestroyObject::GetType(void)",
        ),
    ),
    (
        "IsInstanceEnabled__CQ212ActionButton13DestroyObject",
        Ok(
            "ActionButton::DestroyObject::IsInstanceEnabled(void) const",
        ),
    ),
    (
        "NewAction__Q212ActionButton17UseVendingMachineP18ActionEventLocator",
        Ok(
            "ActionButton::UseVendingMachine::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewAction__Q212ActionButton10PrankPhoneP18ActionEventLocator",
        Ok(
            "ActionButton::PrankPhone::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewAction__Q212ActionButton18SummonVehiclePhoneP18ActionEventLocator",
        Ok(
            "ActionButton::SummonVehiclePhone::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "GetType__Q212ActionButton18SummonVehiclePhone",
        Ok(
            "ActionButton::SummonVehiclePhone::GetType(void)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton18SummonVehiclePhoneP9Character",
        Ok(
            "ActionButton::SummonVehiclePhone::OnButtonPressed(Character *)",
        ),
    ),
    (
        "OnEnter__Q212ActionButton18SummonVehiclePhoneP9Character",
        Ok(
            "ActionButton::SummonVehiclePhone::OnEnter(Character *)",
        ),
    ),
    (
        "OnExit__Q212ActionButton18SummonVehiclePhoneP9Character",
        Ok(
            "ActionButton::SummonVehiclePhone::OnExit(Character *)",
        ),
    ),
    (
        "NeedsUpdate__CQ212ActionButton18SummonVehiclePhone",
        Ok(
            "ActionButton::SummonVehiclePhone::NeedsUpdate(void) const",
        ),
    ),
    (
        "UsesActionButton__CQ212ActionButton6Bounce",
        Ok(
            "ActionButton::Bounce::UsesActionButton(void) const",
        ),
    ),
    (
        "_$_Q212ActionButton8Doorbell",
        Ok(
            "ActionButton::Doorbell::~Doorbell(void)",
        ),
    ),
    (
        "NewAction__Q212ActionButton8DoorbellP18ActionEventLocator",
        Ok(
            "ActionButton::Doorbell::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewAction__Q212ActionButton8OpenDoorP18ActionEventLocator",
        Ok(
            "ActionButton::OpenDoor::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewAction__Q212ActionButton8TalkFoodP18ActionEventLocator",
        Ok(
            "ActionButton::TalkFood::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewAction__Q212ActionButton10TalkDialogP18ActionEventLocator",
        Ok(
            "ActionButton::TalkDialog::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewAction__Q212ActionButton11TalkMissionP18ActionEventLocator",
        Ok(
            "ActionButton::TalkMission::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "ShouldRespawn__CQ212ActionButton11Collectible",
        Ok(
            "ActionButton::Collectible::ShouldRespawn(void) const",
        ),
    ),
    (
        "IsRespawnTimeExpired__CQ212ActionButton11Collectible",
        Ok(
            "ActionButton::Collectible::IsRespawnTimeExpired(void) const",
        ),
    ),
    (
        "GetRespawnTime__CQ212ActionButton11Collectible",
        Ok(
            "ActionButton::Collectible::GetRespawnTime(void) const",
        ),
    ),
    (
        "SetRespawnTime__Q212ActionButton11Collectiblef",
        Ok(
            "ActionButton::Collectible::SetRespawnTime(float)",
        ),
    ),
    (
        "UpdateRespawnTime__Q212ActionButton11Collectiblef",
        Ok(
            "ActionButton::Collectible::UpdateRespawnTime(float)",
        ),
    ),
    (
        "NeedsUpdate__CQ212ActionButton11Collectible",
        Ok(
            "ActionButton::Collectible::NeedsUpdate(void) const",
        ),
    ),
    (
        "ShouldRespawn__CQ212ActionButton18RespawnCollectible",
        Ok(
            "ActionButton::RespawnCollectible::ShouldRespawn(void) const",
        ),
    ),
    (
        "GetRespawnTime__CQ212ActionButton18RespawnCollectible",
        Ok(
            "ActionButton::RespawnCollectible::GetRespawnTime(void) const",
        ),
    ),
    (
        "SetRespawnTime__Q212ActionButton18RespawnCollectiblef",
        Ok(
            "ActionButton::RespawnCollectible::SetRespawnTime(float)",
        ),
    ),
    (
        "UpdateRespawnTime__Q212ActionButton18RespawnCollectiblef",
        Ok(
            "ActionButton::RespawnCollectible::UpdateRespawnTime(float)",
        ),
    ),
    (
        "NewFoodSmallAction__Q212ActionButton15CollectibleFoodP18ActionEventLocator",
        Ok(
            "ActionButton::CollectibleFood::NewFoodSmallAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewFoodLargeAction__Q212ActionButton15CollectibleFoodP18ActionEventLocator",
        Ok(
            "ActionButton::CollectibleFood::NewFoodLargeAction(ActionEventLocator *)",
        ),
    ),
    (
        "GetType__Q212ActionButton15CollectibleCard",
        Ok(
            "ActionButton::CollectibleCard::GetType(void)",
        ),
    ),
    (
        "NewAction__Q212ActionButton15CollectibleCardP18ActionEventLocator",
        Ok(
            "ActionButton::CollectibleCard::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "GetType__Q212ActionButton10WrenchIcon",
        Ok(
            "ActionButton::WrenchIcon::GetType(void)",
        ),
    ),
    (
        "NewAction__Q212ActionButton10WrenchIconP18ActionEventLocator",
        Ok(
            "ActionButton::WrenchIcon::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "GetType__Q212ActionButton9NitroIcon",
        Ok(
            "ActionButton::NitroIcon::GetType(void)",
        ),
    ),
    (
        "NewAction__Q212ActionButton9NitroIconP18ActionEventLocator",
        Ok(
            "ActionButton::NitroIcon::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "GetType__Q212ActionButton25GenericEventButtonHandler",
        Ok(
            "ActionButton::GenericEventButtonHandler::GetType(void)",
        ),
    ),
    (
        "NewAction__Q212ActionButton14TeleportActionP18ActionEventLocator",
        Ok(
            "ActionButton::TeleportAction::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "GetType__Q212ActionButton14TeleportAction",
        Ok(
            "ActionButton::TeleportAction::GetType(void)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton14PurchaseRewardP9CharacterP9Sequencer",
        Ok(
            "ActionButton::PurchaseReward::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "NeedsUpdate__CQ212ActionButton14PurchaseReward",
        Ok(
            "ActionButton::PurchaseReward::NeedsUpdate(void) const",
        ),
    ),
    (
        "NewAction__Q212ActionButton11PurchaseCarP18ActionEventLocator",
        Ok(
            "ActionButton::PurchaseCar::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "GetType__Q212ActionButton11PurchaseCar",
        Ok(
            "ActionButton::PurchaseCar::GetType(void)",
        ),
    ),
    (
        "UsesActionButton__CQ212ActionButton11PurchaseCar",
        Ok(
            "ActionButton::PurchaseCar::UsesActionButton(void) const",
        ),
    ),
    (
        "NewAction__Q212ActionButton12PurchaseSkinP18ActionEventLocator",
        Ok(
            "ActionButton::PurchaseSkin::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "GetType__Q212ActionButton12PurchaseSkin",
        Ok(
            "ActionButton::PurchaseSkin::GetType(void)",
        ),
    ),
    (
        "UsesActionButton__CQ212ActionButton12PurchaseSkin",
        Ok(
            "ActionButton::PurchaseSkin::UsesActionButton(void) const",
        ),
    ),
    (
        "_$_Q211CharacterAi7NoState",
        Ok(
            "CharacterAi::NoState::~NoState(void)",
        ),
    ),
    (
        "GetStateID__CQ211CharacterAi7NoState",
        Ok(
            "CharacterAi::NoState::GetStateID(void) const",
        ),
    ),
    (
        "Enter__Q211CharacterAi7NoState",
        Ok(
            "CharacterAi::NoState::Enter(void)",
        ),
    ),
    (
        "Exit__Q211CharacterAi7NoState",
        Ok(
            "CharacterAi::NoState::Exit(void)",
        ),
    ),
    (
        "SequenceAction__Q211CharacterAi7NoState",
        Ok(
            "CharacterAi::NoState::SequenceAction(void)",
        ),
    ),
    (
        "Update__Q211CharacterAi7NoStatef",
        Ok(
            "CharacterAi::NoState::Update(float)",
        ),
    ),
    (
        "GetStateID__CQ211CharacterAi5InCar",
        Ok(
            "CharacterAi::InCar::GetStateID(void) const",
        ),
    ),
    (
        "GetStateID__CQ211CharacterAi4Loco",
        Ok(
            "CharacterAi::Loco::GetStateID(void) const",
        ),
    ),
    (
        "GetStateID__CQ211CharacterAi5InSim",
        Ok(
            "CharacterAi::InSim::GetStateID(void) const",
        ),
    ),
    (
        "GetStateID__CQ211CharacterAi5GetIn",
        Ok(
            "CharacterAi::GetIn::GetStateID(void) const",
        ),
    ),
    (
        "GetStateID__CQ211CharacterAi6GetOut",
        Ok(
            "CharacterAi::GetOut::GetStateID(void) const",
        ),
    ),
    (
        "__6Action",
        Ok(
            "Action::Action(void)",
        ),
    ),
    (
        "__11SlaveAction",
        Ok(
            "SlaveAction::SlaveAction(void)",
        ),
    ),
    (
        "WakeUp__18TriggerEventActionf",
        Ok(
            "TriggerEventAction::WakeUp(float)",
        ),
    ),
    (
        "Update__11DelayActionf",
        Ok(
            "DelayAction::Update(float)",
        ),
    ),
    (
        "WakeUp__18AssignValueToFloatf",
        Ok(
            "AssignValueToFloat::WakeUp(float)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z22AnimCollisionEntityDSG",
        Ok(
            "radLoadInventory::SafeCast<AnimCollisionEntityDSG>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z12StatePropDSG",
        Ok(
            "radLoadInventory::SafeCast<StatePropDSG>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z15CarStartLocator",
        Ok(
            "radLoadInventory::SafeCast<CarStartLocator>::SafeCast(void)",
        ),
    ),
    (
        "NewAction__Q212ActionButton12PlayAnimOnceP18ActionEventLocator",
        Ok(
            "ActionButton::PlayAnimOnce::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "NewAction__Q212ActionButton13AutomaticDoorP18ActionEventLocator",
        Ok(
            "ActionButton::AutomaticDoor::NewAction(ActionEventLocator *)",
        ),
    ),
    (
        "OnButtonPressed__Q212ActionButton13AutomaticDoorP9CharacterP9Sequencer",
        Ok(
            "ActionButton::AutomaticDoor::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "_$_15ISpatialProxyAA",
        Ok(
            "ISpatialProxyAA::~ISpatialProxyAA(void)",
        ),
    ),
    (
        "Update__t11ChangeState1ZQ211CharacterAi4Locof",
        Ok(
            "ChangeState<CharacterAi::Loco>::Update(float)",
        ),
    ),
    (
        "Update__t11ChangeState1ZQ211CharacterAi5InCarf",
        Ok(
            "ChangeState<CharacterAi::InCar>::Update(float)",
        ),
    ),
    (
        "__tf9IRefCount",
        Ok(
            "IRefCount type_info function",
        ),
    ),
    (
        "__tf11tRefCounted",
        Ok(
            "tRefCounted type_info function",
        ),
    ),
    (
        "__tfQ214LoadingManager23ProcessRequestsCallback",
        Ok(
            "LoadingManager::ProcessRequestsCallback type_info function",
        ),
    ),
    (
        "__tf18CStatePropListener",
        Ok(
            "CStatePropListener type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton18IGameObjectWrapper",
        Ok(
            "ActionButton::IGameObjectWrapper type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton8OpenDoor",
        Ok(
            "ActionButton::OpenDoor type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton8TalkFood",
        Ok(
            "ActionButton::TalkFood type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton10TalkDialog",
        Ok(
            "ActionButton::TalkDialog type_info function",
        ),
    ),
    (
        "__tfQ212ActionButton11TalkMission",
        Ok(
            "ActionButton::TalkMission type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z22AnimCollisionEntityDSG",
        Ok(
            "radLoadInventory::SafeCast<AnimCollisionEntityDSG> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z12StatePropDSG",
        Ok(
            "radLoadInventory::SafeCast<StatePropDSG> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z15CarStartLocator",
        Ok(
            "radLoadInventory::SafeCast<CarStartLocator> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z18ActionEventLocator",
        Ok(
            "radLoadInventory::SafeCast<ActionEventLocator> type_info function",
        ),
    ),
    (
        "__Q216radLoadInventory12SafeCastBase",
        Ok(
            "radLoadInventory::SafeCastBase::SafeCastBase(void)",
        ),
    ),
    (
        "__9tDrawable",
        Ok(
            "tDrawable::tDrawable(void)",
        ),
    ),
    (
        "_$_Q212ActionButton8OpenDoor",
        Ok(
            "ActionButton::OpenDoor::~OpenDoor(void)",
        ),
    ),
    (
        "_$_Q212ActionButton8TalkFood",
        Ok(
            "ActionButton::TalkFood::~TalkFood(void)",
        ),
    ),
    (
        "_$_Q212ActionButton10TalkDialog",
        Ok(
            "ActionButton::TalkDialog::~TalkDialog(void)",
        ),
    ),
    (
        "_$_Q212ActionButton11TalkMission",
        Ok(
            "ActionButton::TalkMission::~TalkMission(void)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z18ActionEventLocatorP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<ActionEventLocator>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z15CarStartLocatorP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<CarStartLocator>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z12StatePropDSGP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<StatePropDSG>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z22AnimCollisionEntityDSGP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<AnimCollisionEntityDSG>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "__tfQ216radLoadInventory12SafeCastBase",
        Ok(
            "radLoadInventory::SafeCastBase type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__Q212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "global constructors keyed to ActionButton::AnimCollisionEntityDSGWrapper::AnimCollisionEntityDSGWrapper(void)",
        ),
    ),
    (
        "_GLOBAL_$D$__Q212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "global destructors keyed to ActionButton::AnimCollisionEntityDSGWrapper::AnimCollisionEntityDSGWrapper(void)",
        ),
    ),
    (
        "CreateInstance__12ActorManager",
        Ok(
            "ActorManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__12ActorManager",
        Ok(
            "ActorManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__12ActorManager",
        Ok(
            "ActorManager::DestroyInstance(void)",
        ),
    ),
    (
        "__12ActorManager",
        Ok(
            "ActorManager::ActorManager(void)",
        ),
    ),
    (
        "_$_12ActorManager",
        Ok(
            "ActorManager::~ActorManager(void)",
        ),
    ),
    (
        "AddActor__12ActorManagerP5Actor",
        Ok(
            "ActorManager::AddActor(Actor *)",
        ),
    ),
    (
        "AddActorToBank__12ActorManagerP5Actor",
        Ok(
            "ActorManager::AddActorToBank(Actor *)",
        ),
    ),
    (
        "RemoveActor__12ActorManagerib",
        Ok(
            "ActorManager::RemoveActor(int, bool)",
        ),
    ),
    (
        "RemoveActorByDSGPointer__12ActorManagerP8ActorDSGb",
        Ok(
            "ActorManager::RemoveActorByDSGPointer(ActorDSG *, bool)",
        ),
    ),
    (
        "RemoveAllActors__12ActorManager",
        Ok(
            "ActorManager::RemoveAllActors(void)",
        ),
    ),
    (
        "AddSpawnPoint__12ActorManagerP10SpawnPoint",
        Ok(
            "ActorManager::AddSpawnPoint(SpawnPoint *)",
        ),
    ),
    (
        "FireProjectile__12ActorManagerG13tUidUnalignedRCQ218RadicalMathLibrary6VectorT2Ui",
        Ok(
            "ActorManager::FireProjectile(tUidUnaligned, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, unsigned int)",
        ),
    ),
    (
        "Update__12ActorManagerUi",
        Ok(
            "ActorManager::Update(unsigned int)",
        ),
    ),
    (
        "HandleEvent__12ActorManager9EventEnumPv",
        Ok(
            "ActorManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "GetActorByName__12ActorManagerPCc",
        Ok(
            "ActorManager::GetActorByName(char const *)",
        ),
    ),
    (
        "GetActorByUID__12ActorManagerG13tUidUnaligned",
        Ok(
            "ActorManager::GetActorByUID(tUidUnaligned)",
        ),
    ),
    (
        "GetActorsByType__12ActorManagerPCc",
        Ok(
            "ActorManager::GetActorsByType(char const *)",
        ),
    ),
    (
        "SetupConsoleFunctions__12ActorManager",
        Ok(
            "ActorManager::SetupConsoleFunctions(void)",
        ),
    ),
    (
        "WithinAliveRange__12ActorManageri",
        Ok(
            "ActorManager::WithinAliveRange(int)",
        ),
    ),
    (
        "AddFlyingActor__12ActorManageriPPc",
        Ok(
            "ActorManager::AddFlyingActor(int, char **)",
        ),
    ),
    (
        "AddFlyingActorByLocator__12ActorManageriPPc",
        Ok(
            "ActorManager::AddFlyingActorByLocator(int, char **)",
        ),
    ),
    (
        "AddSpawnPointScript__12ActorManageriPPc",
        Ok(
            "ActorManager::AddSpawnPointScript(int, char **)",
        ),
    ),
    (
        "AddSpawnPointByLocatorScript__12ActorManageriPPc",
        Ok(
            "ActorManager::AddSpawnPointByLocatorScript(int, char **)",
        ),
    ),
    (
        "SetProjectileStats__12ActorManageriPPc",
        Ok(
            "ActorManager::SetProjectileStats(int, char **)",
        ),
    ),
    (
        "PreallocateActors__12ActorManageriPPc",
        Ok(
            "ActorManager::PreallocateActors(int, char **)",
        ),
    ),
    (
        "SetActorRotationSpeed__12ActorManageriPPc",
        Ok(
            "ActorManager::SetActorRotationSpeed(int, char **)",
        ),
    ),
    (
        "AddShield__12ActorManageriPPc",
        Ok(
            "ActorManager::AddShield(int, char **)",
        ),
    ),
    (
        "GetSpawnPointByName__12ActorManagerPCc",
        Ok(
            "ActorManager::GetSpawnPointByName(char const *)",
        ),
    ),
    (
        "RemoveAllSpawnPoints__12ActorManager",
        Ok(
            "ActorManager::RemoveAllSpawnPoints(void)",
        ),
    ),
    (
        "CreateActor__12ActorManagerG13tUidUnalignedT1RCQ218RadicalMathLibrary6Matrix",
        Ok(
            "ActorManager::CreateActor(tUidUnaligned, tUidUnaligned, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "AddBehaviour__12ActorManageriPPc",
        Ok(
            "ActorManager::AddBehaviour(int, char **)",
        ),
    ),
    (
        "SetCollisionAttributes__12ActorManageriPPc",
        Ok(
            "ActorManager::SetCollisionAttributes(int, char **)",
        ),
    ),
    (
        "__11FlyingActor",
        Ok(
            "FlyingActor::FlyingActor(void)",
        ),
    ),
    (
        "_$_11FlyingActor",
        Ok(
            "FlyingActor::~FlyingActor(void)",
        ),
    ),
    (
        "Init__11FlyingActorPCcT1",
        Ok(
            "FlyingActor::Init(char const *, char const *)",
        ),
    ),
    (
        "Update__11FlyingActorUi",
        Ok(
            "FlyingActor::Update(unsigned int)",
        ),
    ),
    (
        "AddBehaviour__11FlyingActorP9Behaviour",
        Ok(
            "FlyingActor::AddBehaviour(Behaviour *)",
        ),
    ),
    (
        "Activate__11FlyingActor",
        Ok(
            "FlyingActor::Activate(void)",
        ),
    ),
    (
        "DeactivateBehaviours__11FlyingActor",
        Ok(
            "FlyingActor::DeactivateBehaviours(void)",
        ),
    ),
    (
        "SetRotationSpeed__11FlyingActorf",
        Ok(
            "FlyingActor::SetRotationSpeed(float)",
        ),
    ),
    (
        "LookAt__11FlyingActorRCQ218RadicalMathLibrary6VectorUi",
        Ok(
            "FlyingActor::LookAt(RadicalMathLibrary::Vector const &, unsigned int)",
        ),
    ),
    (
        "ReleaseBehaviours__11FlyingActor",
        Ok(
            "FlyingActor::ReleaseBehaviours(void)",
        ),
    ),
    (
        "FindWaypoint__11FlyingActorRCQ218RadicalMathLibrary6VectorT1i",
        Ok(
            "FlyingActor::FindWaypoint(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, int)",
        ),
    ),
    (
        "MoveTo__11FlyingActorRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "FlyingActor::MoveTo(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "ChangeBehaviour__11FlyingActorP9Behaviour",
        Ok(
            "FlyingActor::ChangeBehaviour(Behaviour *)",
        ),
    ),
    (
        "UpdateMovement__11FlyingActorUiPQ218RadicalMathLibrary6Vector",
        Ok(
            "FlyingActor::UpdateMovement(unsigned int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "FindGroundIntersection__11FlyingActorPfPQ218RadicalMathLibrary6Vector",
        Ok(
            "FlyingActor::FindGroundIntersection(float *, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "RecieveEvent__11FlyingActoriP10CStateProp",
        Ok(
            "FlyingActor::RecieveEvent(int, CStateProp *)",
        ),
    ),
    (
        "__5Actor",
        Ok(
            "Actor::Actor(void)",
        ),
    ),
    (
        "_$_5Actor",
        Ok(
            "Actor::~Actor(void)",
        ),
    ),
    (
        "SetPosition__5ActorRCQ218RadicalMathLibrary6Vector",
        Ok(
            "Actor::SetPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetPosition__C5ActorPQ218RadicalMathLibrary6Vector",
        Ok(
            "Actor::GetPosition(RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "GetTransform__C5ActorPQ218RadicalMathLibrary6Matrix",
        Ok(
            "Actor::GetTransform(RadicalMathLibrary::Matrix *) const",
        ),
    ),
    (
        "GetDSG__C5Actor",
        Ok(
            "Actor::GetDSG(void) const",
        ),
    ),
    (
        "SetTransform__5ActorRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "Actor::SetTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "SetState__5Actori",
        Ok(
            "Actor::SetState(int)",
        ),
    ),
    (
        "GetState__C5Actor",
        Ok(
            "Actor::GetState(void) const",
        ),
    ),
    (
        "GetName__C5Actor",
        Ok(
            "Actor::GetName(void) const",
        ),
    ),
    (
        "GetUID__C5Actor",
        Ok(
            "Actor::GetUID(void) const",
        ),
    ),
    (
        "GetStatePropUID__C5Actor",
        Ok(
            "Actor::GetStatePropUID(void) const",
        ),
    ),
    (
        "SetUID__5ActorG13tUidUnaligned",
        Ok(
            "Actor::SetUID(tUidUnaligned)",
        ),
    ),
    (
        "SetStatePropID__5ActorUi",
        Ok(
            "Actor::SetStatePropID(unsigned int)",
        ),
    ),
    (
        "AddToDSG__5Actor",
        Ok(
            "Actor::AddToDSG(void)",
        ),
    ),
    (
        "RemoveFromDSG__5Actor",
        Ok(
            "Actor::RemoveFromDSG(void)",
        ),
    ),
    (
        "LoadShield__5ActorPCc",
        Ok(
            "Actor::LoadShield(char const *)",
        ),
    ),
    (
        "LoadTractorBeam__5ActorPCc",
        Ok(
            "Actor::LoadTractorBeam(char const *)",
        ),
    ),
    (
        "ActivateTractorBeam__5Actor",
        Ok(
            "Actor::ActivateTractorBeam(void)",
        ),
    ),
    (
        "DeactivateTractorBeam__5Actor",
        Ok(
            "Actor::DeactivateTractorBeam(void)",
        ),
    ),
    (
        "IsTractorBeamOn__C5Actor",
        Ok(
            "Actor::IsTractorBeamOn(void) const",
        ),
    ),
    (
        "FillIntersectionList__5ActorRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "Actor::FillIntersectionList(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "FillIntersectionListDynamics__5ActorRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "Actor::FillIntersectionListDynamics(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "FillIntersectionListStatics__5ActorRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "Actor::FillIntersectionListStatics(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "FillIntersectionListFence__5ActorRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "Actor::FillIntersectionListFence(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "__15AttackBehaviourff",
        Ok(
            "AttackBehaviour::AttackBehaviour(float, float)",
        ),
    ),
    (
        "_$_15AttackBehaviour",
        Ok(
            "AttackBehaviour::~AttackBehaviour(void)",
        ),
    ),
    (
        "Apply__15AttackBehaviourP5ActorUi",
        Ok(
            "AttackBehaviour::Apply(Actor *, unsigned int)",
        ),
    ),
    (
        "SetMaxFiringRange__15AttackBehaviourf",
        Ok(
            "AttackBehaviour::SetMaxFiringRange(float)",
        ),
    ),
    (
        "SetFiringArc__15AttackBehaviourf",
        Ok(
            "AttackBehaviour::SetFiringArc(float)",
        ),
    ),
    (
        "SetActorMoveSpeed__15AttackBehaviourf",
        Ok(
            "AttackBehaviour::SetActorMoveSpeed(float)",
        ),
    ),
    (
        "SetMovementIntervals__15AttackBehaviourf",
        Ok(
            "AttackBehaviour::SetMovementIntervals(float)",
        ),
    ),
    (
        "IsMovementDisabled__C15AttackBehaviour",
        Ok(
            "AttackBehaviour::IsMovementDisabled(void) const",
        ),
    ),
    (
        "Activate__15AttackBehaviour",
        Ok(
            "AttackBehaviour::Activate(void)",
        ),
    ),
    (
        "Deactivate__15AttackBehaviour",
        Ok(
            "AttackBehaviour::Deactivate(void)",
        ),
    ),
    (
        "WithinFiringRange__C15AttackBehaviourRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "AttackBehaviour::WithinFiringRange(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
        ),
    ),
    (
        "WithinFiringArc__C15AttackBehaviourRCQ218RadicalMathLibrary6VectorN21",
        Ok(
            "AttackBehaviour::WithinFiringArc(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
        ),
    ),
    (
        "IsTooClose__C15AttackBehaviourRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "AttackBehaviour::IsTooClose(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
        ),
    ),
    (
        "MoveIntoAttackRange__15AttackBehaviourP5ActorRCQ218RadicalMathLibrary6Vector",
        Ok(
            "AttackBehaviour::MoveIntoAttackRange(Actor *, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "MoveAway__15AttackBehaviourP5ActorRCQ218RadicalMathLibrary6Vector",
        Ok(
            "AttackBehaviour::MoveAway(Actor *, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "HandleEvent__15AttackBehaviour9EventEnumPv",
        Ok(
            "AttackBehaviour::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__16EvasionBehaviourfffff",
        Ok(
            "EvasionBehaviour::EvasionBehaviour(float, float, float, float, float)",
        ),
    ),
    (
        "_$_16EvasionBehaviour",
        Ok(
            "EvasionBehaviour::~EvasionBehaviour(void)",
        ),
    ),
    (
        "Apply__16EvasionBehaviourP5ActorUi",
        Ok(
            "EvasionBehaviour::Apply(Actor *, unsigned int)",
        ),
    ),
    (
        "Activate__16EvasionBehaviour",
        Ok(
            "EvasionBehaviour::Activate(void)",
        ),
    ),
    (
        "Deactivate__16EvasionBehaviour",
        Ok(
            "EvasionBehaviour::Deactivate(void)",
        ),
    ),
    (
        "SetSpeed__16EvasionBehaviourf",
        Ok(
            "EvasionBehaviour::SetSpeed(float)",
        ),
    ),
    (
        "FindEvasionDestination__16EvasionBehaviourRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "EvasionBehaviour::FindEvasionDestination(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "FindGroundHeight__C16EvasionBehaviourffPf",
        Ok(
            "EvasionBehaviour::FindGroundHeight(float, float, float *) const",
        ),
    ),
    (
        "__10SpawnPointPCcT1RCQ218RadicalMathLibrary6SphereUi",
        Ok(
            "SpawnPoint::SpawnPoint(char const *, char const *, RadicalMathLibrary::Sphere const &, unsigned int)",
        ),
    ),
    (
        "_$_10SpawnPoint",
        Ok(
            "SpawnPoint::~SpawnPoint(void)",
        ),
    ),
    (
        "AddBehaviour__10SpawnPointP9Behaviour",
        Ok(
            "SpawnPoint::AddBehaviour(Behaviour *)",
        ),
    ),
    (
        "OnTrigger__10SpawnPointUi",
        Ok(
            "SpawnPoint::OnTrigger(unsigned int)",
        ),
    ),
    (
        "CanRespawn__C10SpawnPoint",
        Ok(
            "SpawnPoint::CanRespawn(void) const",
        ),
    ),
    (
        "HandleEvent__10SpawnPoint9EventEnumPv",
        Ok(
            "SpawnPoint::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__10Projectile",
        Ok(
            "Projectile::Projectile(void)",
        ),
    ),
    (
        "_$_10Projectile",
        Ok(
            "Projectile::~Projectile(void)",
        ),
    ),
    (
        "SetSpeed__10Projectilef",
        Ok(
            "Projectile::SetSpeed(float)",
        ),
    ),
    (
        "Init__10ProjectilePCcT1",
        Ok(
            "Projectile::Init(char const *, char const *)",
        ),
    ),
    (
        "Update__10ProjectileUi",
        Ok(
            "Projectile::Update(unsigned int)",
        ),
    ),
    (
        "AddBehaviour__10ProjectileP9Behaviour",
        Ok(
            "Projectile::AddBehaviour(Behaviour *)",
        ),
    ),
    (
        "Fire__10Projectile",
        Ok(
            "Projectile::Fire(void)",
        ),
    ),
    (
        "CalculateIntersections__10Projectile",
        Ok(
            "Projectile::CalculateIntersections(void)",
        ),
    ),
    (
        "AdjustCollisionPosition__10ProjectileRCQ218RadicalMathLibrary6VectorN21PQ218RadicalMathLibrary6Vector",
        Ok(
            "Projectile::AdjustCollisionPosition(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "ApplyDamage__10ProjectileP11DynaPhysDSG",
        Ok(
            "Projectile::ApplyDamage(DynaPhysDSG *)",
        ),
    ),
    (
        "IsJumpingPlayer__10ProjectileP11DynaPhysDSG",
        Ok(
            "Projectile::IsJumpingPlayer(DynaPhysDSG *)",
        ),
    ),
    (
        "__8ActorDSG",
        Ok(
            "ActorDSG::ActorDSG(void)",
        ),
    ),
    (
        "_$_8ActorDSG",
        Ok(
            "ActorDSG::~ActorDSG(void)",
        ),
    ),
    (
        "PreReactToCollision__8ActorDSGPQ23sim8SimStateRQ23sim9Collision",
        Ok(
            "ActorDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
        ),
    ),
    (
        "SetRank__8ActorDSGRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "ActorDSG::SetRank(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "PostReactToCollision__8ActorDSGRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "ActorDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "ApplyForce__8ActorDSGRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "ActorDSG::ApplyForce(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "RecieveEvent__8ActorDSGiP10CStateProp",
        Ok(
            "ActorDSG::RecieveEvent(int, CStateProp *)",
        ),
    ),
    (
        "HandleEvent__8ActorDSGQ212StatePropDSG5Event",
        Ok(
            "ActorDSG::HandleEvent(StatePropDSG::Event)",
        ),
    ),
    (
        "LoadShield__8ActorDSGPCc",
        Ok(
            "ActorDSG::LoadShield(char const *)",
        ),
    ),
    (
        "LoadTractorBeam__8ActorDSGPCc",
        Ok(
            "ActorDSG::LoadTractorBeam(char const *)",
        ),
    ),
    (
        "ActivateTractorBeam__8ActorDSG",
        Ok(
            "ActorDSG::ActivateTractorBeam(void)",
        ),
    ),
    (
        "DeactivateTractorBeam__8ActorDSG",
        Ok(
            "ActorDSG::DeactivateTractorBeam(void)",
        ),
    ),
    (
        "IsTractorBeamOn__C8ActorDSG",
        Ok(
            "ActorDSG::IsTractorBeamOn(void) const",
        ),
    ),
    (
        "Display__8ActorDSG",
        Ok(
            "ActorDSG::Display(void)",
        ),
    ),
    (
        "AdvanceAnimation__8ActorDSGf",
        Ok(
            "ActorDSG::AdvanceAnimation(float)",
        ),
    ),
    (
        "DestroyShield__8ActorDSG",
        Ok(
            "ActorDSG::DestroyShield(void)",
        ),
    ),
    (
        "PlayShieldGettingHit__8ActorDSG",
        Ok(
            "ActorDSG::PlayShieldGettingHit(void)",
        ),
    ),
    (
        "RestoreShield__8ActorDSG",
        Ok(
            "ActorDSG::RestoreShield(void)",
        ),
    ),
    (
        "SetPhysicsProperties__8ActorDSGffff",
        Ok(
            "ActorDSG::SetPhysicsProperties(float, float, float, float)",
        ),
    ),
    (
        "LoadSetup__8ActorDSGP14CStatePropDataiRCQ218RadicalMathLibrary6MatrixP19CollisionAttributesbT5P12tEntityStore",
        Ok(
            "ActorDSG::LoadSetup(CStatePropData *, int, RadicalMathLibrary::Matrix const &, CollisionAttributes *, bool, bool, tEntityStore *)",
        ),
    ),
    (
        "GenerateCoins__8ActorDSGi",
        Ok(
            "ActorDSG::GenerateCoins(int)",
        ),
    ),
    (
        "CastsShadow__8ActorDSG",
        Ok(
            "ActorDSG::CastsShadow(void)",
        ),
    ),
    (
        "__18UFOAttackBehaviourf",
        Ok(
            "UFOAttackBehaviour::UFOAttackBehaviour(float)",
        ),
    ),
    (
        "_$_18UFOAttackBehaviour",
        Ok(
            "UFOAttackBehaviour::~UFOAttackBehaviour(void)",
        ),
    ),
    (
        "Apply__18UFOAttackBehaviourP5ActorUi",
        Ok(
            "UFOAttackBehaviour::Apply(Actor *, unsigned int)",
        ),
    ),
    (
        "SetMaxFiringRange__18UFOAttackBehaviourf",
        Ok(
            "UFOAttackBehaviour::SetMaxFiringRange(float)",
        ),
    ),
    (
        "SetActorMoveSpeed__18UFOAttackBehaviourf",
        Ok(
            "UFOAttackBehaviour::SetActorMoveSpeed(float)",
        ),
    ),
    (
        "Activate__18UFOAttackBehaviour",
        Ok(
            "UFOAttackBehaviour::Activate(void)",
        ),
    ),
    (
        "Deactivate__18UFOAttackBehaviour",
        Ok(
            "UFOAttackBehaviour::Deactivate(void)",
        ),
    ),
    (
        "FindTarget__18UFOAttackBehaviourRCQ218RadicalMathLibrary6VectorPC8ActorDSG",
        Ok(
            "UFOAttackBehaviour::FindTarget(RadicalMathLibrary::Vector const &, ActorDSG const *)",
        ),
    ),
    (
        "__18ActorAnimationWasp",
        Ok(
            "ActorAnimationWasp::ActorAnimationWasp(void)",
        ),
    ),
    (
        "_$_18ActorAnimationWasp",
        Ok(
            "ActorAnimationWasp::~ActorAnimationWasp(void)",
        ),
    ),
    (
        "SetState__18ActorAnimationWaspi",
        Ok(
            "ActorAnimationWasp::SetState(int)",
        ),
    ),
    (
        "Update__18ActorAnimationWaspRCQ218RadicalMathLibrary6MatrixPQ218RadicalMathLibrary6MatrixfP18tCompositeDrawable",
        Ok(
            "ActorAnimationWasp::Update(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix *, float, tCompositeDrawable *)",
        ),
    ),
    (
        "__12WingAnimatorf",
        Ok(
            "WingAnimator::WingAnimator(float)",
        ),
    ),
    (
        "_$_12WingAnimator",
        Ok(
            "WingAnimator::~WingAnimator(void)",
        ),
    ),
    (
        "Advance__12WingAnimatorf",
        Ok(
            "WingAnimator::Advance(float)",
        ),
    ),
    (
        "UpdateForRender__12WingAnimatorP18tCompositeDrawable",
        Ok(
            "WingAnimator::UpdateForRender(tCompositeDrawable *)",
        ),
    ),
    (
        "__17ActorAnimationUFO",
        Ok(
            "ActorAnimationUFO::ActorAnimationUFO(void)",
        ),
    ),
    (
        "_$_17ActorAnimationUFO",
        Ok(
            "ActorAnimationUFO::~ActorAnimationUFO(void)",
        ),
    ),
    (
        "Update__17ActorAnimationUFORCQ218RadicalMathLibrary6MatrixPQ218RadicalMathLibrary6MatrixfP18tCompositeDrawable",
        Ok(
            "ActorAnimationUFO::Update(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix *, float, tCompositeDrawable *)",
        ),
    ),
    (
        "__19AttractionBehaviourfff",
        Ok(
            "AttractionBehaviour::AttractionBehaviour(float, float, float)",
        ),
    ),
    (
        "_$_19AttractionBehaviour",
        Ok(
            "AttractionBehaviour::~AttractionBehaviour(void)",
        ),
    ),
    (
        "Apply__19AttractionBehaviourP5ActorUi",
        Ok(
            "AttractionBehaviour::Apply(Actor *, unsigned int)",
        ),
    ),
    (
        "HandleEvent__19AttractionBehaviour9EventEnumPv",
        Ok(
            "AttractionBehaviour::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Activate__19AttractionBehaviour",
        Ok(
            "AttractionBehaviour::Activate(void)",
        ),
    ),
    (
        "Deactivate__19AttractionBehaviour",
        Ok(
            "AttractionBehaviour::Deactivate(void)",
        ),
    ),
    (
        "WithinSensoryRange__C19AttractionBehaviourRC5ActorRC6Avatar",
        Ok(
            "AttractionBehaviour::WithinSensoryRange(Actor const &, Avatar const &) const",
        ),
    ),
    (
        "FindNewWatchPosition__C19AttractionBehaviourRC5ActorRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "AttractionBehaviour::FindNewWatchPosition(Actor const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "__13ProjectileDSG",
        Ok(
            "ProjectileDSG::ProjectileDSG(void)",
        ),
    ),
    (
        "_$_13ProjectileDSG",
        Ok(
            "ProjectileDSG::~ProjectileDSG(void)",
        ),
    ),
    (
        "PreReactToCollision__13ProjectileDSGPQ23sim8SimStateRQ23sim9Collision",
        Ok(
            "ProjectileDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
        ),
    ),
    (
        "PostReactToCollision__13ProjectileDSGRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "ProjectileDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "__15UFOBeamAlwaysOn",
        Ok(
            "UFOBeamAlwaysOn::UFOBeamAlwaysOn(void)",
        ),
    ),
    (
        "_$_15UFOBeamAlwaysOn",
        Ok(
            "UFOBeamAlwaysOn::~UFOBeamAlwaysOn(void)",
        ),
    ),
    (
        "Apply__15UFOBeamAlwaysOnP5ActorUi",
        Ok(
            "UFOBeamAlwaysOn::Apply(Actor *, unsigned int)",
        ),
    ),
    (
        "__12UFOBehaviour",
        Ok(
            "UFOBehaviour::UFOBehaviour(void)",
        ),
    ),
    (
        "_$_12UFOBehaviour",
        Ok(
            "UFOBehaviour::~UFOBehaviour(void)",
        ),
    ),
    (
        "Apply__12UFOBehaviourP5ActorUi",
        Ok(
            "UFOBehaviour::Apply(Actor *, unsigned int)",
        ),
    ),
    (
        "SetCharacterRespawnPosition__12UFOBehaviourP12EventLocator",
        Ok(
            "UFOBehaviour::SetCharacterRespawnPosition(EventLocator *)",
        ),
    ),
    (
        "WithinTractorBeamRange__C12UFOBehaviourRCQ218RadicalMathLibrary6VectorP10IEntityDSG",
        Ok(
            "UFOBehaviour::WithinTractorBeamRange(RadicalMathLibrary::Vector const &, IEntityDSG *) const",
        ),
    ),
    (
        "SuckIntoUFO__12UFOBehaviourRCQ218RadicalMathLibrary6VectorP11DynaPhysDSGf",
        Ok(
            "UFOBehaviour::SuckIntoUFO(RadicalMathLibrary::Vector const &, DynaPhysDSG *, float)",
        ),
    ),
    (
        "ReachedTopOfTractorBeam__12UFOBehaviourRCQ218RadicalMathLibrary6VectorP11DynaPhysDSG",
        Ok(
            "UFOBehaviour::ReachedTopOfTractorBeam(RadicalMathLibrary::Vector const &, DynaPhysDSG *)",
        ),
    ),
    (
        "DestroyObject__12UFOBehaviourP11DynaPhysDSG",
        Ok(
            "UFOBehaviour::DestroyObject(DynaPhysDSG *)",
        ),
    ),
    (
        "GetTargetsInTractorRange__12UFOBehaviourRQ218RadicalMathLibrary6VectorfPt9SwapArray1ZP11DynaPhysDSG",
        Ok(
            "UFOBehaviour::GetTargetsInTractorRange(RadicalMathLibrary::Vector &, float, SwapArray<DynaPhysDSG *> *)",
        ),
    ),
    (
        "__16IntersectionList",
        Ok(
            "IntersectionList::IntersectionList(void)",
        ),
    ),
    (
        "_$_16IntersectionList",
        Ok(
            "IntersectionList::~IntersectionList(void)",
        ),
    ),
    (
        "Clear__16IntersectionList",
        Ok(
            "IntersectionList::Clear(void)",
        ),
    ),
    (
        "ClearDynamics__16IntersectionList",
        Ok(
            "IntersectionList::ClearDynamics(void)",
        ),
    ),
    (
        "ClearAnimPhys__16IntersectionList",
        Ok(
            "IntersectionList::ClearAnimPhys(void)",
        ),
    ),
    (
        "ClearStatics__16IntersectionList",
        Ok(
            "IntersectionList::ClearStatics(void)",
        ),
    ),
    (
        "ClearFencePieces__16IntersectionList",
        Ok(
            "IntersectionList::ClearFencePieces(void)",
        ),
    ),
    (
        "TestIntersectionStatics__16IntersectionListRCQ218RadicalMathLibrary6VectorT1PQ218RadicalMathLibrary6Vector",
        Ok(
            "IntersectionList::TestIntersectionStatics(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "TestIntersectionDynamics__16IntersectionListRCQ218RadicalMathLibrary6VectorT1PQ218RadicalMathLibrary6VectorPP11DynaPhysDSG",
        Ok(
            "IntersectionList::TestIntersectionDynamics(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *, DynaPhysDSG **)",
        ),
    ),
    (
        "TestIntersection__16IntersectionListRCQ218RadicalMathLibrary6VectorT1PQ218RadicalMathLibrary6Vector",
        Ok(
            "IntersectionList::TestIntersection(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "LineOfSight__16IntersectionListRCQ218RadicalMathLibrary6VectorT1fb",
        Ok(
            "IntersectionList::LineOfSight(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, bool)",
        ),
    ),
    (
        "AddStatic__16IntersectionListPQ23sim8SimState",
        Ok(
            "IntersectionList::AddStatic(sim::SimState *)",
        ),
    ),
    (
        "AddDynamic__16IntersectionListPQ23sim8SimStateP11DynaPhysDSG",
        Ok(
            "IntersectionList::AddDynamic(sim::SimState *, DynaPhysDSG *)",
        ),
    ),
    (
        "AddAnimPhys__16IntersectionListPQ23sim19SimStateArticulated",
        Ok(
            "IntersectionList::AddAnimPhys(sim::SimStateArticulated *)",
        ),
    ),
    (
        "AddFencePiece__16IntersectionListP14FenceEntityDSG",
        Ok(
            "IntersectionList::AddFencePiece(FenceEntityDSG *)",
        ),
    ),
    (
        "FillIntersectionListStatics__16IntersectionListRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "IntersectionList::FillIntersectionListStatics(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "FillIntersectionListFence__16IntersectionListRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "IntersectionList::FillIntersectionListFence(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "FillIntersectionListDynamics__16IntersectionListRCQ218RadicalMathLibrary6VectorfbP11DynaPhysDSG",
        Ok(
            "IntersectionList::FillIntersectionListDynamics(RadicalMathLibrary::Vector const &, float, bool, DynaPhysDSG *)",
        ),
    ),
    (
        "FillIntersectionListAnimPhys__16IntersectionListRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "IntersectionList::FillIntersectionListAnimPhys(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "LineSegmentIntersection__16IntersectionListRCQ216IntersectionList13LineSegment2DT1Pf",
        Ok(
            "IntersectionList::LineSegmentIntersection(IntersectionList::LineSegment2D const &, IntersectionList::LineSegment2D const &, float *)",
        ),
    ),
    (
        "_S_oom_malloc__t23__malloc_alloc_template1i0Ui",
        Ok(
            "__malloc_alloc_template<0>::_S_oom_malloc(unsigned int)",
        ),
    ),
    (
        "_S_chunk_alloc__t24__default_alloc_template2b0i0UiRi",
        Ok(
            "__default_alloc_template<false, 0>::_S_chunk_alloc(unsigned int, int &)",
        ),
    ),
    (
        "_S_refill__t24__default_alloc_template2b0i0Ui",
        Ok(
            "__default_alloc_template<false, 0>::_S_refill(unsigned int)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2ZP5ActorZt7s2alloc1ZP5ActorPP5ActorRCP5Actor",
        Ok(
            "vector<Actor *, s2alloc<Actor *> >::_M_insert_aux(Actor **, Actor *const &)",
        ),
    ),
    (
        "_M_destroy_nodes__t11_Deque_base3ZP9BehaviourZt9allocator1ZP9BehaviourUi0PPP9BehaviourT1",
        Ok(
            "_Deque_base<Behaviour *, allocator<Behaviour *>, 0>::_M_destroy_nodes(Behaviour ***, Behaviour ***)",
        ),
    ),
    (
        "_$_t11_Deque_base3ZP9BehaviourZt9allocator1ZP9BehaviourUi0",
        Ok(
            "_Deque_base<Behaviour *, allocator<Behaviour *>, 0>::~_Deque_base(void)",
        ),
    ),
    (
        "_M_create_nodes__t11_Deque_base3ZP9BehaviourZt9allocator1ZP9BehaviourUi0PPP9BehaviourT1",
        Ok(
            "_Deque_base<Behaviour *, allocator<Behaviour *>, 0>::_M_create_nodes(Behaviour ***, Behaviour ***)",
        ),
    ),
    (
        "_M_initialize_map__t11_Deque_base3ZP9BehaviourZt9allocator1ZP9BehaviourUi0Ui",
        Ok(
            "_Deque_base<Behaviour *, allocator<Behaviour *>, 0>::_M_initialize_map(unsigned int)",
        ),
    ),
    (
        "_M_reallocate_map__t5deque3ZP9BehaviourZt9allocator1ZP9BehaviourUi0Uib",
        Ok(
            "deque<Behaviour *, allocator<Behaviour *>, 0>::_M_reallocate_map(unsigned int, bool)",
        ),
    ),
    (
        "_M_push_back_aux__t5deque3ZP9BehaviourZt9allocator1ZP9BehaviourUi0RCP9Behaviour",
        Ok(
            "deque<Behaviour *, allocator<Behaviour *>, 0>::_M_push_back_aux(Behaviour *const &)",
        ),
    ),
    (
        "_M_pop_back_aux__t5deque3ZP9BehaviourZt9allocator1ZP9BehaviourUi0",
        Ok(
            "deque<Behaviour *, allocator<Behaviour *>, 0>::_M_pop_back_aux(void)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZPQ218RadicalMathLibrary6VectorZPQ218RadicalMathLibrary6Vector_X01X01X11G12__false_type_X11",
        Ok(
            "RadicalMathLibrary::Vector * __uninitialized_copy_aux<RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *>(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, __false_type)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2ZQ218RadicalMathLibrary6VectorZt7s2alloc1ZQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6Vector",
        Ok(
            "vector<RadicalMathLibrary::Vector, s2alloc<RadicalMathLibrary::Vector> >::_M_insert_aux(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "fill__H2ZPQ218RadicalMathLibrary6VectorZQ218RadicalMathLibrary6Vector_X01X01RCX11_v",
        Ok(
            "void fill<RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector>(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__uninitialized_fill_n_aux__H3ZPQ218RadicalMathLibrary6VectorZUiZQ218RadicalMathLibrary6Vector_X01X11RCX21G12__false_type_X01",
        Ok(
            "RadicalMathLibrary::Vector * __uninitialized_fill_n_aux<RadicalMathLibrary::Vector *, unsigned int, RadicalMathLibrary::Vector>(RadicalMathLibrary::Vector *, unsigned int, RadicalMathLibrary::Vector const &, __false_type)",
        ),
    ),
    (
        "insert__t6vector2ZQ218RadicalMathLibrary6VectorZt7s2alloc1ZQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6VectorUiRCQ218RadicalMathLibrary6Vector",
        Ok(
            "vector<RadicalMathLibrary::Vector, s2alloc<RadicalMathLibrary::Vector> >::insert(RadicalMathLibrary::Vector *, unsigned int, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__t3Map2ZPQ23sim15CollisionObjectZP11DynaPhysDSG",
        Ok(
            "Map<sim::CollisionObject *, DynaPhysDSG *>::Map(void)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG_X01X01X11G12__false_type_X11",
        Ok(
            "MapElement<sim::CollisionObject *, DynaPhysDSG *> * __uninitialized_copy_aux<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, __false_type)",
        ),
    ),
    (
        "reserve__t3Map2ZPQ23sim15CollisionObjectZP11DynaPhysDSGUi",
        Ok(
            "Map<sim::CollisionObject *, DynaPhysDSG *>::reserve(unsigned int)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZPQ216IntersectionList13LineSegment2DZPQ216IntersectionList13LineSegment2D_X01X01X11G12__false_type_X11",
        Ok(
            "IntersectionList::LineSegment2D * __uninitialized_copy_aux<IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D *>(IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D *, __false_type)",
        ),
    ),
    (
        "begin__t3Map2ZPQ23sim15CollisionObjectZP11DynaPhysDSG",
        Ok(
            "Map<sim::CollisionObject *, DynaPhysDSG *>::begin(void)",
        ),
    ),
    (
        "end__t3Map2ZPQ23sim15CollisionObjectZP11DynaPhysDSG",
        Ok(
            "Map<sim::CollisionObject *, DynaPhysDSG *>::end(void)",
        ),
    ),
    (
        "clear__t3Map2ZPQ23sim15CollisionObjectZP11DynaPhysDSG",
        Ok(
            "Map<sim::CollisionObject *, DynaPhysDSG *>::clear(void)",
        ),
    ),
    (
        "fill__H2ZPPQ23sim15CollisionObjectZPQ23sim15CollisionObject_X01X01RCX11_v",
        Ok(
            "void fill<sim::CollisionObject **, sim::CollisionObject *>(sim::CollisionObject **, sim::CollisionObject **, sim::CollisionObject * const &)",
        ),
    ),
    (
        "fill_n__H3ZPPQ23sim15CollisionObjectZUiZPQ23sim15CollisionObject_X01X11RCX21_X01",
        Ok(
            "sim::CollisionObject ** fill_n<sim::CollisionObject **, unsigned int, sim::CollisionObject *>(sim::CollisionObject **, unsigned int, sim::CollisionObject * const &)",
        ),
    ),
    (
        "insert__t6vector2ZPQ23sim15CollisionObjectZt7s2alloc1ZPQ23sim15CollisionObjectPPQ23sim15CollisionObjectUiRCPQ23sim15CollisionObject",
        Ok(
            "vector<sim::CollisionObject *, s2alloc<sim::CollisionObject *> >::insert(sim::CollisionObject **, unsigned int, sim::CollisionObject *const &)",
        ),
    ),
    (
        "fill__H2ZPQ216IntersectionList13LineSegment2DZQ216IntersectionList13LineSegment2D_X01X01RCX11_v",
        Ok(
            "void fill<IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D>(IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D const &)",
        ),
    ),
    (
        "__uninitialized_fill_n_aux__H3ZPQ216IntersectionList13LineSegment2DZUiZQ216IntersectionList13LineSegment2D_X01X11RCX21G12__false_type_X01",
        Ok(
            "IntersectionList::LineSegment2D * __uninitialized_fill_n_aux<IntersectionList::LineSegment2D *, unsigned int, IntersectionList::LineSegment2D>(IntersectionList::LineSegment2D *, unsigned int, IntersectionList::LineSegment2D const &, __false_type)",
        ),
    ),
    (
        "insert__t6vector2ZQ216IntersectionList13LineSegment2DZt7s2alloc1ZQ216IntersectionList13LineSegment2DPQ216IntersectionList13LineSegment2DUiRCQ216IntersectionList13LineSegment2D",
        Ok(
            "vector<IntersectionList::LineSegment2D, s2alloc<IntersectionList::LineSegment2D> >::insert(IntersectionList::LineSegment2D *, unsigned int, IntersectionList::LineSegment2D const &)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2ZPQ23sim15CollisionObjectZt7s2alloc1ZPQ23sim15CollisionObjectPPQ23sim15CollisionObjectRCPQ23sim15CollisionObject",
        Ok(
            "vector<sim::CollisionObject *, s2alloc<sim::CollisionObject *> >::_M_insert_aux(sim::CollisionObject **, sim::CollisionObject *const &)",
        ),
    ),
    (
        "size__Ct3Map2ZPQ23sim15CollisionObjectZP11DynaPhysDSG",
        Ok(
            "Map<sim::CollisionObject *, DynaPhysDSG *>::size(void) const",
        ),
    ),
    (
        "__push_heap__H3ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZiZt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG_X01X11X11X21_v",
        Ok(
            "void __push_heap<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int, int, MapElement<sim::CollisionObject *, DynaPhysDSG *>)",
        ),
    ),
    (
        "__adjust_heap__H3ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZiZt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG_X01X11X11X21_v",
        Ok(
            "void __adjust_heap<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int, int, MapElement<sim::CollisionObject *, DynaPhysDSG *>)",
        ),
    ),
    (
        "__make_heap__H3ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZi_X01X01PX11PX21_v",
        Ok(
            "void __make_heap<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *>, int>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int *)",
        ),
    ),
    (
        "sort_heap__H1ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG_X01X01_v",
        Ok(
            "void sort_heap<MapElement<sim::CollisionObject *, DynaPhysDSG *> *>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *)",
        ),
    ),
    (
        "__partial_sort__H2ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG_X01X01X01PX11_v",
        Ok(
            "void __partial_sort<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *)",
        ),
    ),
    (
        "__unguarded_partition__H2ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG_X01X01X11_X01",
        Ok(
            "MapElement<sim::CollisionObject *, DynaPhysDSG *> * __unguarded_partition<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *>)",
        ),
    ),
    (
        "__introsort_loop__H3ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZi_X01X01PX11X21_v",
        Ok(
            "void __introsort_loop<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *>, int>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, int)",
        ),
    ),
    (
        "__unguarded_linear_insert__H2ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG_X01X11_v",
        Ok(
            "void __unguarded_linear_insert<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *>)",
        ),
    ),
    (
        "__insertion_sort__H1ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG_X01X01_v",
        Ok(
            "void __insertion_sort<MapElement<sim::CollisionObject *, DynaPhysDSG *> *>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *)",
        ),
    ),
    (
        "__unguarded_insertion_sort_aux__H2ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG_X01X01PX11_v",
        Ok(
            "void __unguarded_insertion_sort_aux<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> >(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *)",
        ),
    ),
    (
        "__final_insertion_sort__H1ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG_X01X01_v",
        Ok(
            "void __final_insertion_sort<MapElement<sim::CollisionObject *, DynaPhysDSG *> *>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *)",
        ),
    ),
    (
        "RefreshIfDirty__Ct3Map2ZPQ23sim15CollisionObjectZP11DynaPhysDSG",
        Ok(
            "Map<sim::CollisionObject *, DynaPhysDSG *>::RefreshIfDirty(void) const",
        ),
    ),
    (
        "__lower_bound__H3ZPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZi_X01X01RCX11PX21_X01",
        Ok(
            "MapElement<sim::CollisionObject *, DynaPhysDSG *> * __lower_bound<MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *>, int>(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> const &, int *)",
        ),
    ),
    (
        "find__t3Map2ZPQ23sim15CollisionObjectZP11DynaPhysDSGRCPQ23sim15CollisionObject",
        Ok(
            "Map<sim::CollisionObject *, DynaPhysDSG *>::find(sim::CollisionObject *const &)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2Zt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZt7s2alloc1Zt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGPt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGRCt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG",
        Ok(
            "vector<MapElement<sim::CollisionObject *, DynaPhysDSG *>, s2alloc<MapElement<sim::CollisionObject *, DynaPhysDSG *> > >::_M_insert_aux(MapElement<sim::CollisionObject *, DynaPhysDSG *> *, MapElement<sim::CollisionObject *, DynaPhysDSG *> const &)",
        ),
    ),
    (
        "insert__t3Map2ZPQ23sim15CollisionObjectZP11DynaPhysDSGRCPQ23sim15CollisionObjectRCP11DynaPhysDSG",
        Ok(
            "Map<sim::CollisionObject *, DynaPhysDSG *>::insert(sim::CollisionObject *const &, DynaPhysDSG *const &)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2ZQ216IntersectionList13LineSegment2DZt7s2alloc1ZQ216IntersectionList13LineSegment2DPQ216IntersectionList13LineSegment2DRCQ216IntersectionList13LineSegment2D",
        Ok(
            "vector<IntersectionList::LineSegment2D, s2alloc<IntersectionList::LineSegment2D> >::_M_insert_aux(IntersectionList::LineSegment2D *, IntersectionList::LineSegment2D const &)",
        ),
    ),
    (
        "__tf10SpawnPoint",
        Ok(
            "SpawnPoint type_info function",
        ),
    ),
    (
        "__tf12ActorManager",
        Ok(
            "ActorManager type_info function",
        ),
    ),
    (
        "__tf16IntersectionList",
        Ok(
            "IntersectionList type_info function",
        ),
    ),
    (
        "__tf5Actor",
        Ok(
            "Actor type_info function",
        ),
    ),
    (
        "__tf9Behaviour",
        Ok(
            "Behaviour type_info function",
        ),
    ),
    (
        "__tf11FlyingActor",
        Ok(
            "FlyingActor type_info function",
        ),
    ),
    (
        "__tf10Projectile",
        Ok(
            "Projectile type_info function",
        ),
    ),
    (
        "__tf15AttackBehaviour",
        Ok(
            "AttackBehaviour type_info function",
        ),
    ),
    (
        "__tf16EvasionBehaviour",
        Ok(
            "EvasionBehaviour type_info function",
        ),
    ),
    (
        "__tf12UFOBehaviour",
        Ok(
            "UFOBehaviour type_info function",
        ),
    ),
    (
        "__tf18UFOAttackBehaviour",
        Ok(
            "UFOAttackBehaviour type_info function",
        ),
    ),
    (
        "__tf19AttractionBehaviour",
        Ok(
            "AttractionBehaviour type_info function",
        ),
    ),
    (
        "__tf15UFOBeamAlwaysOn",
        Ok(
            "UFOBeamAlwaysOn type_info function",
        ),
    ),
    (
        "__tf8ActorDSG",
        Ok(
            "ActorDSG type_info function",
        ),
    ),
    (
        "__tf14ActorAnimation",
        Ok(
            "ActorAnimation type_info function",
        ),
    ),
    (
        "__tf24StatePropDSGProcAnimator",
        Ok(
            "StatePropDSGProcAnimator type_info function",
        ),
    ),
    (
        "__tf18ActorAnimationWasp",
        Ok(
            "ActorAnimationWasp type_info function",
        ),
    ),
    (
        "__tf12WingAnimator",
        Ok(
            "WingAnimator type_info function",
        ),
    ),
    (
        "__tf17ActorAnimationUFO",
        Ok(
            "ActorAnimationUFO type_info function",
        ),
    ),
    (
        "__tf13ProjectileDSG",
        Ok(
            "ProjectileDSG type_info function",
        ),
    ),
    (
        "GetDataType__C10SpawnPoint",
        Ok(
            "SpawnPoint::GetDataType(void) const",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3ZPQ23sim15CollisionObjectZt7s2alloc1ZPQ23sim15CollisionObjectb0",
        Ok(
            "_Vector_alloc_base<sim::CollisionObject *, s2alloc<sim::CollisionObject *>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "_$_t3Map2ZPQ23sim15CollisionObjectZP11DynaPhysDSG",
        Ok(
            "Map<sim::CollisionObject *, DynaPhysDSG *>::~Map(void)",
        ),
    ),
    (
        "__Q216IntersectionList13LineSegment2D",
        Ok(
            "IntersectionList::LineSegment2D::LineSegment2D(void)",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3ZQ216IntersectionList13LineSegment2DZt7s2alloc1ZQ216IntersectionList13LineSegment2Db0",
        Ok(
            "_Vector_alloc_base<IntersectionList::LineSegment2D, s2alloc<IntersectionList::LineSegment2D>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "Activate__5Actor",
        Ok(
            "Actor::Activate(void)",
        ),
    ),
    (
        "DeactivateBehaviours__5Actor",
        Ok(
            "Actor::DeactivateBehaviours(void)",
        ),
    ),
    (
        "IsMoving__C5Actor",
        Ok(
            "Actor::IsMoving(void) const",
        ),
    ),
    (
        "_$_9Behaviour",
        Ok(
            "Behaviour::~Behaviour(void)",
        ),
    ),
    (
        "IsExclusive__C9Behaviour",
        Ok(
            "Behaviour::IsExclusive(void) const",
        ),
    ),
    (
        "Activate__9Behaviour",
        Ok(
            "Behaviour::Activate(void)",
        ),
    ),
    (
        "Deactivate__9Behaviour",
        Ok(
            "Behaviour::Deactivate(void)",
        ),
    ),
    (
        "SetExclusive__9Behaviourb",
        Ok(
            "Behaviour::SetExclusive(bool)",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3ZQ218RadicalMathLibrary6VectorZt7s2alloc1ZQ218RadicalMathLibrary6Vectorb0",
        Ok(
            "_Vector_alloc_base<RadicalMathLibrary::Vector, s2alloc<RadicalMathLibrary::Vector>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "IsMoving__C11FlyingActor",
        Ok(
            "FlyingActor::IsMoving(void) const",
        ),
    ),
    (
        "LookAt__10ProjectileRCQ218RadicalMathLibrary6VectorUi",
        Ok(
            "Projectile::LookAt(RadicalMathLibrary::Vector const &, unsigned int)",
        ),
    ),
    (
        "SetRotationSpeed__10Projectilef",
        Ok(
            "Projectile::SetRotationSpeed(float)",
        ),
    ),
    (
        "ReleaseBehaviours__10Projectile",
        Ok(
            "Projectile::ReleaseBehaviours(void)",
        ),
    ),
    (
        "MoveTo__10ProjectileRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "Projectile::MoveTo(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3ZP5ActorZt7s2alloc1ZP5Actorb0",
        Ok(
            "_Vector_alloc_base<Actor *, s2alloc<Actor *>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z7Locator",
        Ok(
            "radLoadInventory::SafeCast<Locator>::SafeCast(void)",
        ),
    ),
    (
        "_$_t5stack2ZP9BehaviourZt5deque3ZP9BehaviourZt9allocator1ZP9BehaviourUi0",
        Ok(
            "stack<Behaviour *, deque<Behaviour *, allocator<Behaviour *>, 0> >::~stack(void)",
        ),
    ),
    (
        "GetAIRef__8ActorDSG",
        Ok(
            "ActorDSG::GetAIRef(void)",
        ),
    ),
    (
        "DisplaySimpleShadow__8ActorDSG",
        Ok(
            "ActorDSG::DisplaySimpleShadow(void)",
        ),
    ),
    (
        "_$_14ActorAnimation",
        Ok(
            "ActorAnimation::~ActorAnimation(void)",
        ),
    ),
    (
        "_$_24StatePropDSGProcAnimator",
        Ok(
            "StatePropDSGProcAnimator::~StatePropDSGProcAnimator(void)",
        ),
    ),
    (
        "Advance__24StatePropDSGProcAnimatorf",
        Ok(
            "StatePropDSGProcAnimator::Advance(float)",
        ),
    ),
    (
        "UpdateForRender__24StatePropDSGProcAnimatorP18tCompositeDrawable",
        Ok(
            "StatePropDSGProcAnimator::UpdateForRender(tCompositeDrawable *)",
        ),
    ),
    (
        "SetState__17ActorAnimationUFOi",
        Ok(
            "ActorAnimationUFO::SetState(int)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z14CStatePropData",
        Ok(
            "radLoadInventory::SafeCast<CStatePropData>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z9tDrawable",
        Ok(
            "radLoadInventory::SafeCast<tDrawable>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z12EventLocator",
        Ok(
            "radLoadInventory::SafeCast<EventLocator>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z7Locator",
        Ok(
            "radLoadInventory::SafeCast<Locator> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z14CStatePropData",
        Ok(
            "radLoadInventory::SafeCast<CStatePropData> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z9tDrawable",
        Ok(
            "radLoadInventory::SafeCast<tDrawable> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z12EventLocator",
        Ok(
            "radLoadInventory::SafeCast<EventLocator> type_info function",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3Zt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZt7s2alloc1Zt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGb0",
        Ok(
            "_Vector_alloc_base<MapElement<sim::CollisionObject *, DynaPhysDSG *>, s2alloc<MapElement<sim::CollisionObject *, DynaPhysDSG *> >, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z12EventLocatorP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<EventLocator>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z9tDrawableP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tDrawable>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z14CStatePropDataP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<CStatePropData>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z7LocatorP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<Locator>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$_12ActorManager$ActorRemovalRangeSqr",
        Ok(
            "global constructors keyed to ActorManager::ActorRemovalRangeSqr",
        ),
    ),
    (
        "_GLOBAL_$D$_12ActorManager$ActorRemovalRangeSqr",
        Ok(
            "global destructors keyed to ActorManager::ActorRemovalRangeSqr",
        ),
    ),
    (
        "_$_6Action",
        Ok(
            "Action::~Action(void)",
        ),
    ),
    (
        "IsSlave__C6Action",
        Ok(
            "Action::IsSlave(void) const",
        ),
    ),
    (
        "WakeUp__6Actionf",
        Ok(
            "Action::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__6Actionf",
        Ok(
            "Action::DoSimulation(float)",
        ),
    ),
    (
        "Update__6Actionf",
        Ok(
            "Action::Update(float)",
        ),
    ),
    (
        "Clear__6Action",
        Ok(
            "Action::Clear(void)",
        ),
    ),
    (
        "IsSlave__C11SlaveAction",
        Ok(
            "SlaveAction::IsSlave(void) const",
        ),
    ),
    (
        "__22WalkerLocomotionActionP9Character",
        Ok(
            "WalkerLocomotionAction::WalkerLocomotionAction(Character *)",
        ),
    ),
    (
        "_$_22WalkerLocomotionAction",
        Ok(
            "WalkerLocomotionAction::~WalkerLocomotionAction(void)",
        ),
    ),
    (
        "PlayDriver__22WalkerLocomotionAction",
        Ok(
            "WalkerLocomotionAction::PlayDriver(void)",
        ),
    ),
    (
        "StopDriver__22WalkerLocomotionAction",
        Ok(
            "WalkerLocomotionAction::StopDriver(void)",
        ),
    ),
    (
        "SwitchLocomotion__22WalkerLocomotionAction",
        Ok(
            "WalkerLocomotionAction::SwitchLocomotion(void)",
        ),
    ),
    (
        "SolveActualDir__22WalkerLocomotionActionff",
        Ok(
            "WalkerLocomotionAction::SolveActualDir(float, float)",
        ),
    ),
    (
        "SolveActualSpeed__22WalkerLocomotionActionff",
        Ok(
            "WalkerLocomotionAction::SolveActualSpeed(float, float)",
        ),
    ),
    (
        "WakeUp__22WalkerLocomotionActionf",
        Ok(
            "WalkerLocomotionAction::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__22WalkerLocomotionActionf",
        Ok(
            "WalkerLocomotionAction::DoSimulation(float)",
        ),
    ),
    (
        "Update__22WalkerLocomotionActionf",
        Ok(
            "WalkerLocomotionAction::Update(float)",
        ),
    ),
    (
        "__11InCarActionP9Character",
        Ok(
            "InCarAction::InCarAction(Character *)",
        ),
    ),
    (
        "_$_11InCarAction",
        Ok(
            "InCarAction::~InCarAction(void)",
        ),
    ),
    (
        "WakeUp__11InCarActionf",
        Ok(
            "InCarAction::WakeUp(float)",
        ),
    ),
    (
        "IWannaRock__11InCarActionb",
        Ok(
            "InCarAction::IWannaRock(bool)",
        ),
    ),
    (
        "DoSimulation__11InCarActionf",
        Ok(
            "InCarAction::DoSimulation(float)",
        ),
    ),
    (
        "Update__11InCarActionf",
        Ok(
            "InCarAction::Update(float)",
        ),
    ),
    (
        "Clear__11InCarAction",
        Ok(
            "InCarAction::Clear(void)",
        ),
    ),
    (
        "__19HoldAnimationActionP9CharacterPCcf",
        Ok(
            "HoldAnimationAction::HoldAnimationAction(Character *, char const *, float)",
        ),
    ),
    (
        "_$_19HoldAnimationAction",
        Ok(
            "HoldAnimationAction::~HoldAnimationAction(void)",
        ),
    ),
    (
        "WakeUp__19HoldAnimationActionf",
        Ok(
            "HoldAnimationAction::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__19HoldAnimationActionf",
        Ok(
            "HoldAnimationAction::DoSimulation(float)",
        ),
    ),
    (
        "Update__19HoldAnimationActionf",
        Ok(
            "HoldAnimationAction::Update(float)",
        ),
    ),
    (
        "Clear__19HoldAnimationAction",
        Ok(
            "HoldAnimationAction::Clear(void)",
        ),
    ),
    (
        "__11SteerActionP9CharacterPCcf",
        Ok(
            "SteerAction::SteerAction(Character *, char const *, float)",
        ),
    ),
    (
        "ShouldRelease__11SteerAction",
        Ok(
            "SteerAction::ShouldRelease(void)",
        ),
    ),
    (
        "__13ReverseActionP9CharacterPCcf",
        Ok(
            "ReverseAction::ReverseAction(Character *, char const *, float)",
        ),
    ),
    (
        "ShouldRelease__13ReverseAction",
        Ok(
            "ReverseAction::ShouldRelease(void)",
        ),
    ),
    (
        "__11AccelActionP9CharacterPCcf",
        Ok(
            "AccelAction::AccelAction(Character *, char const *, float)",
        ),
    ),
    (
        "ShouldRelease__11AccelAction",
        Ok(
            "AccelAction::ShouldRelease(void)",
        ),
    ),
    (
        "__11DecelActionP9CharacterPCcf",
        Ok(
            "DecelAction::DecelAction(Character *, char const *, float)",
        ),
    ),
    (
        "ShouldRelease__11DecelAction",
        Ok(
            "DecelAction::ShouldRelease(void)",
        ),
    ),
    (
        "__6ArriveP9CharacterRQ218RadicalMathLibrary6Vectorb",
        Ok(
            "Arrive::Arrive(Character *, RadicalMathLibrary::Vector &, bool)",
        ),
    ),
    (
        "_$_6Arrive",
        Ok(
            "Arrive::~Arrive(void)",
        ),
    ),
    (
        "WakeUp__6Arrivef",
        Ok(
            "Arrive::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__6Arrivef",
        Ok(
            "Arrive::DoSimulation(float)",
        ),
    ),
    (
        "Update__6Arrivef",
        Ok(
            "Arrive::Update(float)",
        ),
    ),
    (
        "Clear__6Arrive",
        Ok(
            "Arrive::Clear(void)",
        ),
    ),
    (
        "__6OrientP9CharacterRQ218RadicalMathLibrary6Vector",
        Ok(
            "Orient::Orient(Character *, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "_$_6Orient",
        Ok(
            "Orient::~Orient(void)",
        ),
    ),
    (
        "WakeUp__6Orientf",
        Ok(
            "Orient::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__6Orientf",
        Ok(
            "Orient::DoSimulation(float)",
        ),
    ),
    (
        "Update__6Orientf",
        Ok(
            "Orient::Update(float)",
        ),
    ),
    (
        "__8PositionP9CharacterRQ218RadicalMathLibrary6Vectorfb",
        Ok(
            "Position::Position(Character *, RadicalMathLibrary::Vector &, float, bool)",
        ),
    ),
    (
        "_$_8Position",
        Ok(
            "Position::~Position(void)",
        ),
    ),
    (
        "WakeUp__8Positionf",
        Ok(
            "Position::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__8Positionf",
        Ok(
            "Position::DoSimulation(float)",
        ),
    ),
    (
        "Update__8Positionf",
        Ok(
            "Position::Update(float)",
        ),
    ),
    (
        "WakeUp__10GroundSnapf",
        Ok(
            "GroundSnap::WakeUp(float)",
        ),
    ),
    (
        "__19PlayAnimationActionP9CharacterPCcf",
        Ok(
            "PlayAnimationAction::PlayAnimationAction(Character *, char const *, float)",
        ),
    ),
    (
        "__19PlayAnimationActionP9CharacterRC5tNamef",
        Ok(
            "PlayAnimationAction::PlayAnimationAction(Character *, tName const &, float)",
        ),
    ),
    (
        "AbortWhenMovementOccurs__19PlayAnimationActionb",
        Ok(
            "PlayAnimationAction::AbortWhenMovementOccurs(bool)",
        ),
    ),
    (
        "WakeUp__19PlayAnimationActionf",
        Ok(
            "PlayAnimationAction::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__19PlayAnimationActionf",
        Ok(
            "PlayAnimationAction::DoSimulation(float)",
        ),
    ),
    (
        "Update__19PlayAnimationActionf",
        Ok(
            "PlayAnimationAction::Update(float)",
        ),
    ),
    (
        "ShouldAbort__19PlayAnimationAction",
        Ok(
            "PlayAnimationAction::ShouldAbort(void)",
        ),
    ),
    (
        "Clear__19PlayAnimationAction",
        Ok(
            "PlayAnimationAction::Clear(void)",
        ),
    ),
    (
        "__23PlayIdleAnimationActionP9CharacterPCcf",
        Ok(
            "PlayIdleAnimationAction::PlayIdleAnimationAction(Character *, char const *, float)",
        ),
    ),
    (
        "WakeUp__23PlayIdleAnimationActionf",
        Ok(
            "PlayIdleAnimationAction::WakeUp(float)",
        ),
    ),
    (
        "Clear__23PlayIdleAnimationAction",
        Ok(
            "PlayIdleAnimationAction::Clear(void)",
        ),
    ),
    (
        "Abort__23PlayIdleAnimationAction",
        Ok(
            "PlayIdleAnimationAction::Abort(void)",
        ),
    ),
    (
        "__13CarDoorActionP7VehicleQ27Vehicle10DoorActionQ27Vehicle4DoorffP9CharacterP9Sequencer",
        Ok(
            "CarDoorAction::CarDoorAction(Vehicle *, Vehicle::DoorAction, Vehicle::Door, float, float, Character *, Sequencer *)",
        ),
    ),
    (
        "WakeUp__13CarDoorActionf",
        Ok(
            "CarDoorAction::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__13CarDoorActionf",
        Ok(
            "CarDoorAction::DoSimulation(float)",
        ),
    ),
    (
        "Update__13CarDoorActionf",
        Ok(
            "CarDoorAction::Update(float)",
        ),
    ),
    (
        "Clear__13CarDoorAction",
        Ok(
            "CarDoorAction::Clear(void)",
        ),
    ),
    (
        "Update__18ReleaseDoorsActionf",
        Ok(
            "ReleaseDoorsAction::Update(float)",
        ),
    ),
    (
        "__10JumpActionP9CharacterPCcf",
        Ok(
            "JumpAction::JumpAction(Character *, char const *, float)",
        ),
    ),
    (
        "_$_10JumpAction",
        Ok(
            "JumpAction::~JumpAction(void)",
        ),
    ),
    (
        "SetRootTransform__10JumpAction",
        Ok(
            "JumpAction::SetRootTransform(void)",
        ),
    ),
    (
        "SetRootPosition__10JumpActionRCQ218RadicalMathLibrary6Vector",
        Ok(
            "JumpAction::SetRootPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Reset__10JumpActionRCQ218RadicalMathLibrary6Vectorb",
        Ok(
            "JumpAction::Reset(RadicalMathLibrary::Vector const &, bool)",
        ),
    ),
    (
        "Reset__10JumpActionfb",
        Ok(
            "JumpAction::Reset(float, bool)",
        ),
    ),
    (
        "WakeUp__10JumpActionf",
        Ok(
            "JumpAction::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__10JumpActionf",
        Ok(
            "JumpAction::DoSimulation(float)",
        ),
    ),
    (
        "SolveActualDir__10JumpActionff",
        Ok(
            "JumpAction::SolveActualDir(float, float)",
        ),
    ),
    (
        "Update__10JumpActionf",
        Ok(
            "JumpAction::Update(float)",
        ),
    ),
    (
        "TestForJumpAgain__10JumpActionRCQ218RadicalMathLibrary6VectorfRQ218RadicalMathLibrary6Vector",
        Ok(
            "JumpAction::TestForJumpAgain(RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "Clear__10JumpAction",
        Ok(
            "JumpAction::Clear(void)",
        ),
    ),
    (
        "__11DodgeActionP9Character",
        Ok(
            "DodgeAction::DodgeAction(Character *)",
        ),
    ),
    (
        "WakeUp__11DodgeActionf",
        Ok(
            "DodgeAction::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__11DodgeActionf",
        Ok(
            "DodgeAction::DoSimulation(float)",
        ),
    ),
    (
        "Update__11DodgeActionf",
        Ok(
            "DodgeAction::Update(float)",
        ),
    ),
    (
        "Clear__11DodgeAction",
        Ok(
            "DodgeAction::Clear(void)",
        ),
    ),
    (
        "SolveActualDir__11DodgeActionff",
        Ok(
            "DodgeAction::SolveActualDir(float, float)",
        ),
    ),
    (
        "__12CringeActionP9Character",
        Ok(
            "CringeAction::CringeAction(Character *)",
        ),
    ),
    (
        "WakeUp__12CringeActionf",
        Ok(
            "CringeAction::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__12CringeActionf",
        Ok(
            "CringeAction::DoSimulation(float)",
        ),
    ),
    (
        "Update__12CringeActionf",
        Ok(
            "CringeAction::Update(float)",
        ),
    ),
    (
        "Clear__12CringeAction",
        Ok(
            "CringeAction::Clear(void)",
        ),
    ),
    (
        "__11FlailActionP9Character",
        Ok(
            "FlailAction::FlailAction(Character *)",
        ),
    ),
    (
        "WakeUp__11FlailActionf",
        Ok(
            "FlailAction::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__11FlailActionf",
        Ok(
            "FlailAction::DoSimulation(float)",
        ),
    ),
    (
        "Update__11FlailActionf",
        Ok(
            "FlailAction::Update(float)",
        ),
    ),
    (
        "Clear__11FlailAction",
        Ok(
            "FlailAction::Clear(void)",
        ),
    ),
    (
        "__11GetUpActionP9Character",
        Ok(
            "GetUpAction::GetUpAction(Character *)",
        ),
    ),
    (
        "WakeUp__11GetUpActionf",
        Ok(
            "GetUpAction::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__11GetUpActionf",
        Ok(
            "GetUpAction::DoSimulation(float)",
        ),
    ),
    (
        "Update__11GetUpActionf",
        Ok(
            "GetUpAction::Update(float)",
        ),
    ),
    (
        "Clear__11GetUpAction",
        Ok(
            "GetUpAction::Clear(void)",
        ),
    ),
    (
        "Update__16ChangeLocomotionf",
        Ok(
            "ChangeLocomotion::Update(float)",
        ),
    ),
    (
        "Update__24ChangeNPCControllerStatef",
        Ok(
            "ChangeNPCControllerState::Update(float)",
        ),
    ),
    (
        "Abort__24ChangeNPCControllerState",
        Ok(
            "ChangeNPCControllerState::Abort(void)",
        ),
    ),
    (
        "Update__10KickActionf",
        Ok(
            "KickAction::Update(float)",
        ),
    ),
    (
        "__10SurfActionP9Character",
        Ok(
            "SurfAction::SurfAction(Character *)",
        ),
    ),
    (
        "ShouldAbort__10SurfAction",
        Ok(
            "SurfAction::ShouldAbort(void)",
        ),
    ),
    (
        "Update__10SurfActionf",
        Ok(
            "SurfAction::Update(float)",
        ),
    ),
    (
        "__16ActionController",
        Ok(
            "ActionController::ActionController(void)",
        ),
    ),
    (
        "_$_16ActionController",
        Ok(
            "ActionController::~ActionController(void)",
        ),
    ),
    (
        "Clear__16ActionController",
        Ok(
            "ActionController::Clear(void)",
        ),
    ),
    (
        "WakeUp__16ActionControllerf",
        Ok(
            "ActionController::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__16ActionControllerf",
        Ok(
            "ActionController::DoSimulation(float)",
        ),
    ),
    (
        "Update__16ActionControllerf",
        Ok(
            "ActionController::Update(float)",
        ),
    ),
    (
        "__9Sequencer",
        Ok(
            "Sequencer::Sequencer(void)",
        ),
    ),
    (
        "_$_9Sequencer",
        Ok(
            "Sequencer::~Sequencer(void)",
        ),
    ),
    (
        "ClearSequence__9SequencerPQ29Sequencer9sSequence",
        Ok(
            "Sequencer::ClearSequence(Sequencer::sSequence *)",
        ),
    ),
    (
        "Clear__9Sequencer",
        Ok(
            "Sequencer::Clear(void)",
        ),
    ),
    (
        "BeginSequence__9Sequencer",
        Ok(
            "Sequencer::BeginSequence(void)",
        ),
    ),
    (
        "EndSequence__9Sequencer",
        Ok(
            "Sequencer::EndSequence(void)",
        ),
    ),
    (
        "AddAction__9SequencerffP6Action",
        Ok(
            "Sequencer::AddAction(float, float, Action *)",
        ),
    ),
    (
        "AddActionToSequence__9SequencerffP6Action",
        Ok(
            "Sequencer::AddActionToSequence(float, float, Action *)",
        ),
    ),
    (
        "IsBusy__C9Sequencer",
        Ok(
            "Sequencer::IsBusy(void) const",
        ),
    ),
    (
        "WakeUp__9Sequencerf",
        Ok(
            "Sequencer::WakeUp(float)",
        ),
    ),
    (
        "DoSimulation__9Sequencerf",
        Ok(
            "Sequencer::DoSimulation(float)",
        ),
    ),
    (
        "Update__9Sequencerf",
        Ok(
            "Sequencer::Update(float)",
        ),
    ),
    (
        "__4Task",
        Ok(
            "Task::Task(void)",
        ),
    ),
    (
        "_$_4Task",
        Ok(
            "Task::~Task(void)",
        ),
    ),
    (
        "GetStatus__4Task",
        Ok(
            "Task::GetStatus(void)",
        ),
    ),
    (
        "SetStatus__4Task6Status",
        Ok(
            "Task::SetStatus(Status)",
        ),
    ),
    (
        "IsSleeping__4Task",
        Ok(
            "Task::IsSleeping(void)",
        ),
    ),
    (
        "Run__4Task",
        Ok(
            "Task::Run(void)",
        ),
    ),
    (
        "IsRunning__4Task",
        Ok(
            "Task::IsRunning(void)",
        ),
    ),
    (
        "Done__4Task",
        Ok(
            "Task::Done(void)",
        ),
    ),
    (
        "IsDone__4Task",
        Ok(
            "Task::IsDone(void)",
        ),
    ),
    (
        "__tf4Task",
        Ok(
            "Task type_info function",
        ),
    ),
    (
        "__tf6Action",
        Ok(
            "Action type_info function",
        ),
    ),
    (
        "__tf11SlaveAction",
        Ok(
            "SlaveAction type_info function",
        ),
    ),
    (
        "__tf22WalkerLocomotionAction",
        Ok(
            "WalkerLocomotionAction type_info function",
        ),
    ),
    (
        "__tf11InCarAction",
        Ok(
            "InCarAction type_info function",
        ),
    ),
    (
        "__tf19HoldAnimationAction",
        Ok(
            "HoldAnimationAction type_info function",
        ),
    ),
    (
        "_$_11SteerAction",
        Ok(
            "SteerAction::~SteerAction(void)",
        ),
    ),
    (
        "__tf11SteerAction",
        Ok(
            "SteerAction type_info function",
        ),
    ),
    (
        "_$_13ReverseAction",
        Ok(
            "ReverseAction::~ReverseAction(void)",
        ),
    ),
    (
        "__tf13ReverseAction",
        Ok(
            "ReverseAction type_info function",
        ),
    ),
    (
        "_$_11AccelAction",
        Ok(
            "AccelAction::~AccelAction(void)",
        ),
    ),
    (
        "__tf11AccelAction",
        Ok(
            "AccelAction type_info function",
        ),
    ),
    (
        "_$_11DecelAction",
        Ok(
            "DecelAction::~DecelAction(void)",
        ),
    ),
    (
        "__tf11DecelAction",
        Ok(
            "DecelAction type_info function",
        ),
    ),
    (
        "__tf10JumpAction",
        Ok(
            "JumpAction type_info function",
        ),
    ),
    (
        "_$_11DodgeAction",
        Ok(
            "DodgeAction::~DodgeAction(void)",
        ),
    ),
    (
        "__tf11DodgeAction",
        Ok(
            "DodgeAction type_info function",
        ),
    ),
    (
        "_$_12CringeAction",
        Ok(
            "CringeAction::~CringeAction(void)",
        ),
    ),
    (
        "__tf12CringeAction",
        Ok(
            "CringeAction type_info function",
        ),
    ),
    (
        "_$_11FlailAction",
        Ok(
            "FlailAction::~FlailAction(void)",
        ),
    ),
    (
        "__tf11FlailAction",
        Ok(
            "FlailAction type_info function",
        ),
    ),
    (
        "_$_11GetUpAction",
        Ok(
            "GetUpAction::~GetUpAction(void)",
        ),
    ),
    (
        "__tf11GetUpAction",
        Ok(
            "GetUpAction type_info function",
        ),
    ),
    (
        "__tf19PlayAnimationAction",
        Ok(
            "PlayAnimationAction type_info function",
        ),
    ),
    (
        "_$_23PlayIdleAnimationAction",
        Ok(
            "PlayIdleAnimationAction::~PlayIdleAnimationAction(void)",
        ),
    ),
    (
        "__tf23PlayIdleAnimationAction",
        Ok(
            "PlayIdleAnimationAction type_info function",
        ),
    ),
    (
        "_$_13CarDoorAction",
        Ok(
            "CarDoorAction::~CarDoorAction(void)",
        ),
    ),
    (
        "__tf13CarDoorAction",
        Ok(
            "CarDoorAction type_info function",
        ),
    ),
    (
        "_$_18ReleaseDoorsAction",
        Ok(
            "ReleaseDoorsAction::~ReleaseDoorsAction(void)",
        ),
    ),
    (
        "__tf18ReleaseDoorsAction",
        Ok(
            "ReleaseDoorsAction type_info function",
        ),
    ),
    (
        "__tf6Arrive",
        Ok(
            "Arrive type_info function",
        ),
    ),
    (
        "__tf6Orient",
        Ok(
            "Orient type_info function",
        ),
    ),
    (
        "__tf8Position",
        Ok(
            "Position type_info function",
        ),
    ),
    (
        "__tf10GroundSnap",
        Ok(
            "GroundSnap type_info function",
        ),
    ),
    (
        "_$_16ChangeLocomotion",
        Ok(
            "ChangeLocomotion::~ChangeLocomotion(void)",
        ),
    ),
    (
        "__tf16ChangeLocomotion",
        Ok(
            "ChangeLocomotion type_info function",
        ),
    ),
    (
        "_$_24ChangeNPCControllerState",
        Ok(
            "ChangeNPCControllerState::~ChangeNPCControllerState(void)",
        ),
    ),
    (
        "__tf24ChangeNPCControllerState",
        Ok(
            "ChangeNPCControllerState type_info function",
        ),
    ),
    (
        "_$_10KickAction",
        Ok(
            "KickAction::~KickAction(void)",
        ),
    ),
    (
        "__tf10KickAction",
        Ok(
            "KickAction type_info function",
        ),
    ),
    (
        "_$_10SurfAction",
        Ok(
            "SurfAction::~SurfAction(void)",
        ),
    ),
    (
        "__tf10SurfAction",
        Ok(
            "SurfAction type_info function",
        ),
    ),
    (
        "__tf9Sequencer",
        Ok(
            "Sequencer type_info function",
        ),
    ),
    (
        "__tf16ActionController",
        Ok(
            "ActionController type_info function",
        ),
    ),
    (
        "Abort__6Action",
        Ok(
            "Action::Abort(void)",
        ),
    ),
    (
        "_$_11SlaveAction",
        Ok(
            "SlaveAction::~SlaveAction(void)",
        ),
    ),
    (
        "_$_19PlayAnimationAction",
        Ok(
            "PlayAnimationAction::~PlayAnimationAction(void)",
        ),
    ),
    (
        "_$_10GroundSnap",
        Ok(
            "GroundSnap::~GroundSnap(void)",
        ),
    ),
    (
        "DoSimulation__10GroundSnapf",
        Ok(
            "GroundSnap::DoSimulation(float)",
        ),
    ),
    (
        "Update__10GroundSnapf",
        Ok(
            "GroundSnap::Update(float)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ26choreo9Animation",
        Ok(
            "radLoadInventory::SafeCast<choreo::Animation>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ26choreo10Locomotion",
        Ok(
            "radLoadInventory::SafeCast<choreo::Locomotion>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ26choreo9Animation",
        Ok(
            "radLoadInventory::SafeCast<choreo::Animation> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ26choreo10Locomotion",
        Ok(
            "radLoadInventory::SafeCast<choreo::Locomotion> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ26choreo10LocomotionP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<choreo::Locomotion>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ26choreo9AnimationP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<choreo::Animation>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$_6Action$sMemoryPool",
        Ok(
            "global constructors keyed to Action::sMemoryPool",
        ),
    ),
    (
        "_GLOBAL_$D$_6Action$sMemoryPool",
        Ok(
            "global destructors keyed to Action::sMemoryPool",
        ),
    ),
    (
        "__7ChaseAIP7Vehiclef",
        Ok(
            "ChaseAI::ChaseAI(Vehicle *, float)",
        ),
    ),
    (
        "_$_7ChaseAI",
        Ok(
            "ChaseAI::~ChaseAI(void)",
        ),
    ),
    (
        "Initialize__7ChaseAI",
        Ok(
            "ChaseAI::Initialize(void)",
        ),
    ),
    (
        "Reset__7ChaseAI",
        Ok(
            "ChaseAI::Reset(void)",
        ),
    ),
    (
        "Update__7ChaseAIf",
        Ok(
            "ChaseAI::Update(float)",
        ),
    ),
    (
        "DoCatchUp__7ChaseAIf",
        Ok(
            "ChaseAI::DoCatchUp(float)",
        ),
    ),
    (
        "MustRepopulateSegments__7ChaseAI",
        Ok(
            "ChaseAI::MustRepopulateSegments(void)",
        ),
    ),
    (
        "TestReachedTarget__7ChaseAIRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "ChaseAI::TestReachedTarget(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetClosestPathElementToTarget__7ChaseAIRQ218RadicalMathLibrary6VectorRQ211RoadManager11PathElementRP11RoadSegmentRfT4",
        Ok(
            "ChaseAI::GetClosestPathElementToTarget(RadicalMathLibrary::Vector &, RoadManager::PathElement &, RoadSegment *&, float &, float &)",
        ),
    ),
    (
        "UpdateTarget__7ChaseAI",
        Ok(
            "ChaseAI::UpdateTarget(void)",
        ),
    ),
    (
        "Beeline__7ChaseAIf",
        Ok(
            "ChaseAI::Beeline(float)",
        ),
    ),
    (
        "TestIntersectBBox__7ChaseAIGQ218RadicalMathLibrary6VectorT1PQ23sim15CollisionVolume",
        Ok(
            "ChaseAI::TestIntersectBBox(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, sim::CollisionVolume *)",
        ),
    ),
    (
        "RegisterHudMapIcon__7ChaseAI",
        Ok(
            "ChaseAI::RegisterHudMapIcon(void)",
        ),
    ),
    (
        "__14PotentialField",
        Ok(
            "PotentialField::PotentialField(void)",
        ),
    ),
    (
        "_$_14PotentialField",
        Ok(
            "PotentialField::~PotentialField(void)",
        ),
    ),
    (
        "__10Potentials",
        Ok(
            "Potentials::Potentials(void)",
        ),
    ),
    (
        "_$_10Potentials",
        Ok(
            "Potentials::~Potentials(void)",
        ),
    ),
    (
        "__9TrafficAIP7Vehicle",
        Ok(
            "TrafficAI::TrafficAI(Vehicle *)",
        ),
    ),
    (
        "_$_9TrafficAI",
        Ok(
            "TrafficAI::~TrafficAI(void)",
        ),
    ),
    (
        "Init__9TrafficAI",
        Ok(
            "TrafficAI::Init(void)",
        ),
    ),
    (
        "Update__9TrafficAIf",
        Ok(
            "TrafficAI::Update(float)",
        ),
    ),
    (
        "StartSwerving__9TrafficAIb",
        Ok(
            "TrafficAI::StartSwerving(bool)",
        ),
    ),
    (
        "StopSwerving__9TrafficAI",
        Ok(
            "TrafficAI::StopSwerving(void)",
        ),
    ),
    (
        "Swerve__9TrafficAI",
        Ok(
            "TrafficAI::Swerve(void)",
        ),
    ),
    (
        "PerhapsTriggerImpedence__9TrafficAIQ29TrafficAI12ObstacleTypefPv",
        Ok(
            "TrafficAI::PerhapsTriggerImpedence(TrafficAI::ObstacleType, float, void *)",
        ),
    ),
    (
        "DecideTurn__9TrafficAI",
        Ok(
            "TrafficAI::DecideTurn(void)",
        ),
    ),
    (
        "SetSegmentIndex__9TrafficAIUi",
        Ok(
            "TrafficAI::SetSegmentIndex(unsigned int)",
        ),
    ),
    (
        "RegisterDebugInfo__9TrafficAI",
        Ok(
            "TrafficAI::RegisterDebugInfo(void)",
        ),
    ),
    (
        "UnregisterDebugInfo__9TrafficAI",
        Ok(
            "TrafficAI::UnregisterDebugInfo(void)",
        ),
    ),
    (
        "GetGoSpeedMps__9TrafficAI",
        Ok(
            "TrafficAI::GetGoSpeedMps(void)",
        ),
    ),
    (
        "AttemptLaneChange__9TrafficAIQ29TrafficAI12ObstacleTypefPv",
        Ok(
            "TrafficAI::AttemptLaneChange(TrafficAI::ObstacleType, float, void *)",
        ),
    ),
    (
        "SetAISpeed__9TrafficAIf",
        Ok(
            "TrafficAI::SetAISpeed(float)",
        ),
    ),
    (
        "GetAISpeed__C9TrafficAI",
        Ok(
            "TrafficAI::GetAISpeed(void) const",
        ),
    ),
    (
        "MaintainSpeed__9TrafficAIf",
        Ok(
            "TrafficAI::MaintainSpeed(float)",
        ),
    ),
    (
        "StopForSomething__9TrafficAIfQ29TrafficAI12ObstacleTypefPv",
        Ok(
            "TrafficAI::StopForSomething(float, TrafficAI::ObstacleType, float, void *)",
        ),
    ),
    (
        "GetLookAheadDistance__9TrafficAI",
        Ok(
            "TrafficAI::GetLookAheadDistance(void)",
        ),
    ),
    (
        "CheckForObstacles__9TrafficAIRQ29TrafficAI12ObstacleTypeRfRPvRb",
        Ok(
            "TrafficAI::CheckForObstacles(TrafficAI::ObstacleType &, float &, void *&, bool &)",
        ),
    ),
    (
        "__9VehicleAIP7VehicleQ29VehicleAI17VehicleAITypeEnumbiiT3",
        Ok(
            "VehicleAI::VehicleAI(Vehicle *, VehicleAI::VehicleAITypeEnum, bool, int, int, bool)",
        ),
    ),
    (
        "_$_9VehicleAI",
        Ok(
            "VehicleAI::~VehicleAI(void)",
        ),
    ),
    (
        "SetRaceCatchupParams__9VehicleAIRCQ29VehicleAI17RaceCatchupParams",
        Ok(
            "VehicleAI::SetRaceCatchupParams(VehicleAI::RaceCatchupParams const &)",
        ),
    ),
    (
        "SetEvadeCatchupParams__9VehicleAIRCQ29VehicleAI18EvadeCatchupParams",
        Ok(
            "VehicleAI::SetEvadeCatchupParams(VehicleAI::EvadeCatchupParams const &)",
        ),
    ),
    (
        "SetTargetCatchupParams__9VehicleAIRCQ29VehicleAI19TargetCatchupParams",
        Ok(
            "VehicleAI::SetTargetCatchupParams(VehicleAI::TargetCatchupParams const &)",
        ),
    ),
    (
        "ResetControllerValues__9VehicleAI",
        Ok(
            "VehicleAI::ResetControllerValues(void)",
        ),
    ),
    (
        "Reset__9VehicleAI",
        Ok(
            "VehicleAI::Reset(void)",
        ),
    ),
    (
        "Initialize__9VehicleAI",
        Ok(
            "VehicleAI::Initialize(void)",
        ),
    ),
    (
        "Finalize__9VehicleAI",
        Ok(
            "VehicleAI::Finalize(void)",
        ),
    ),
    (
        "Update__9VehicleAIf",
        Ok(
            "VehicleAI::Update(float)",
        ),
    ),
    (
        "SetActive__9VehicleAIb",
        Ok(
            "VehicleAI::SetActive(bool)",
        ),
    ),
    (
        "GetPosition__9VehicleAIPQ218RadicalMathLibrary6Vector",
        Ok(
            "VehicleAI::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetHeading__9VehicleAIPQ218RadicalMathLibrary6Vector",
        Ok(
            "VehicleAI::GetHeading(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetMaxShortcutSkill__9VehicleAIi",
        Ok(
            "VehicleAI::SetMaxShortcutSkill(int)",
        ),
    ),
    (
        "SetMinShortcutSkill__9VehicleAIi",
        Ok(
            "VehicleAI::SetMinShortcutSkill(int)",
        ),
    ),
    (
        "EnterLimbo__9VehicleAI",
        Ok(
            "VehicleAI::EnterLimbo(void)",
        ),
    ),
    (
        "ExitLimbo__9VehicleAI",
        Ok(
            "VehicleAI::ExitLimbo(void)",
        ),
    ),
    (
        "DetermineShortcutSkill__9VehicleAI",
        Ok(
            "VehicleAI::DetermineShortcutSkill(void)",
        ),
    ),
    (
        "ResetCatchUpParams__9VehicleAI",
        Ok(
            "VehicleAI::ResetCatchUpParams(void)",
        ),
    ),
    (
        "FillPathElements__9VehicleAI",
        Ok(
            "VehicleAI::FillPathElements(void)",
        ),
    ),
    (
        "UpdateSelf__9VehicleAI",
        Ok(
            "VehicleAI::UpdateSelf(void)",
        ),
    ),
    (
        "FollowRoad__9VehicleAI",
        Ok(
            "VehicleAI::FollowRoad(void)",
        ),
    ),
    (
        "FindClosestSegment__9VehicleAIRCQ218RadicalMathLibrary6VectorRiRfRQ218RadicalMathLibrary6Vector",
        Ok(
            "VehicleAI::FindClosestSegment(RadicalMathLibrary::Vector const &, int &, float &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "ResetSegments__9VehicleAI",
        Ok(
            "VehicleAI::ResetSegments(void)",
        ),
    ),
    (
        "ShiftSegments__9VehicleAIii",
        Ok(
            "VehicleAI::ShiftSegments(int, int)",
        ),
    ),
    (
        "FillSegments__9VehicleAI",
        Ok(
            "VehicleAI::FillSegments(void)",
        ),
    ),
    (
        "MustRepopulateSegments__9VehicleAI",
        Ok(
            "VehicleAI::MustRepopulateSegments(void)",
        ),
    ),
    (
        "GetPosAheadAlongRoad__9VehicleAIffiPQ218RadicalMathLibrary6Vector",
        Ok(
            "VehicleAI::GetPosAheadAlongRoad(float, float, int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "UpdateSegments__9VehicleAI",
        Ok(
            "VehicleAI::UpdateSegments(void)",
        ),
    ),
    (
        "EvadeTraffic__9VehicleAIP7Vehicle",
        Ok(
            "VehicleAI::EvadeTraffic(Vehicle *)",
        ),
    ),
    (
        "DoCatchUp__9VehicleAIf",
        Ok(
            "VehicleAI::DoCatchUp(float)",
        ),
    ),
    (
        "DoSteering__9VehicleAI",
        Ok(
            "VehicleAI::DoSteering(void)",
        ),
    ),
    (
        "CheckState__9VehicleAIf",
        Ok(
            "VehicleAI::CheckState(float)",
        ),
    ),
    (
        "DriveTowards__9VehicleAIPQ218RadicalMathLibrary6VectorRfT2",
        Ok(
            "VehicleAI::DriveTowards(RadicalMathLibrary::Vector *, float &, float &)",
        ),
    ),
    (
        "SetDestination__9VehicleAIRQ218RadicalMathLibrary6Vector",
        Ok(
            "VehicleAI::SetDestination(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "SetNextDestination__9VehicleAIRQ218RadicalMathLibrary6Vector",
        Ok(
            "VehicleAI::SetNextDestination(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "FindClosestPathElement__9VehicleAIRQ218RadicalMathLibrary6VectorRQ211RoadManager11PathElementRP11RoadSegmentRfT4b",
        Ok(
            "VehicleAI::FindClosestPathElement(RadicalMathLibrary::Vector &, RoadManager::PathElement &, RoadSegment *&, float &, float &, bool)",
        ),
    ),
    (
        "GetRacePathInfo__9VehicleAIRQ211RoadManager11PathElementRP11RoadSegmentRfT3",
        Ok(
            "VehicleAI::GetRacePathInfo(RoadManager::PathElement &, RoadSegment *&, float &, float &)",
        ),
    ),
    (
        "__10WaypointAIP7VehiclebfT2",
        Ok(
            "WaypointAI::WaypointAI(Vehicle *, bool, float, bool)",
        ),
    ),
    (
        "_$_10WaypointAI",
        Ok(
            "WaypointAI::~WaypointAI(void)",
        ),
    ),
    (
        "Update__10WaypointAIf",
        Ok(
            "WaypointAI::Update(float)",
        ),
    ),
    (
        "Initialize__10WaypointAI",
        Ok(
            "WaypointAI::Initialize(void)",
        ),
    ),
    (
        "Reset__10WaypointAI",
        Ok(
            "WaypointAI::Reset(void)",
        ),
    ),
    (
        "UpdateNeedToWaitForPlayer__10WaypointAIf",
        Ok(
            "WaypointAI::UpdateNeedToWaitForPlayer(float)",
        ),
    ),
    (
        "PossiblyUseTurbo__10WaypointAI",
        Ok(
            "WaypointAI::PossiblyUseTurbo(void)",
        ),
    ),
    (
        "UseTurbo__10WaypointAI",
        Ok(
            "WaypointAI::UseTurbo(void)",
        ),
    ),
    (
        "DoCatchUp__10WaypointAIf",
        Ok(
            "WaypointAI::DoCatchUp(float)",
        ),
    ),
    (
        "UpdateNeedsResetOnSpot__10WaypointAIf",
        Ok(
            "WaypointAI::UpdateNeedsResetOnSpot(float)",
        ),
    ),
    (
        "ClearWaypoints__10WaypointAI",
        Ok(
            "WaypointAI::ClearWaypoints(void)",
        ),
    ),
    (
        "AddWaypoint__10WaypointAIP7Locator",
        Ok(
            "WaypointAI::AddWaypoint(Locator *)",
        ),
    ),
    (
        "MustRepopulateSegments__10WaypointAI",
        Ok(
            "WaypointAI::MustRepopulateSegments(void)",
        ),
    ),
    (
        "SetCurrentWayPoint__10WaypointAIi",
        Ok(
            "WaypointAI::SetCurrentWayPoint(int)",
        ),
    ),
    (
        "FollowWaypoints__10WaypointAI",
        Ok(
            "WaypointAI::FollowWaypoints(void)",
        ),
    ),
    (
        "TestReachedTarget__10WaypointAIRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "WaypointAI::TestReachedTarget(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetClosestPathElementToTarget__10WaypointAIRQ218RadicalMathLibrary6VectorRQ211RoadManager11PathElementRP11RoadSegmentRfT4",
        Ok(
            "WaypointAI::GetClosestPathElementToTarget(RadicalMathLibrary::Vector &, RoadManager::PathElement &, RoadSegment *&, float &, float &)",
        ),
    ),
    (
        "RegisterHudMapIcon__10WaypointAI",
        Ok(
            "WaypointAI::RegisterHudMapIcon(void)",
        ),
    ),
    (
        "TestWaypoint__10WaypointAIi",
        Ok(
            "WaypointAI::TestWaypoint(int)",
        ),
    ),
    (
        "_$_15VehicleAIRender",
        Ok(
            "VehicleAIRender::~VehicleAIRender(void)",
        ),
    ),
    (
        "UnregisterAI__15VehicleAIRenderi",
        Ok(
            "VehicleAIRender::UnregisterAI(int)",
        ),
    ),
    (
        "__tf10Potentials",
        Ok(
            "Potentials type_info function",
        ),
    ),
    (
        "__tf14PotentialField",
        Ok(
            "PotentialField type_info function",
        ),
    ),
    (
        "__tf9VehicleAI",
        Ok(
            "VehicleAI type_info function",
        ),
    ),
    (
        "__tf7ChaseAI",
        Ok(
            "ChaseAI type_info function",
        ),
    ),
    (
        "__tf10WaypointAI",
        Ok(
            "WaypointAI type_info function",
        ),
    ),
    (
        "__tf9TrafficAI",
        Ok(
            "TrafficAI type_info function",
        ),
    ),
    (
        "__tf15VehicleAIRender",
        Ok(
            "VehicleAIRender type_info function",
        ),
    ),
    (
        "__18IHudMapIconLocator",
        Ok(
            "IHudMapIconLocator::IHudMapIconLocator(void)",
        ),
    ),
    (
        "__tf18IHudMapIconLocator",
        Ok(
            "IHudMapIconLocator type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__7ChaseAIP7Vehiclef",
        Ok(
            "global constructors keyed to ChaseAI::ChaseAI(Vehicle *, float)",
        ),
    ),
    (
        "CreateInstance__10ATCManager",
        Ok(
            "ATCManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__10ATCManager",
        Ok(
            "ATCManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__10ATCManager",
        Ok(
            "ATCManager::DestroyInstance(void)",
        ),
    ),
    (
        "CreateCollisionAttributes__10ATCManagerUiUif",
        Ok(
            "ATCManager::CreateCollisionAttributes(unsigned int, unsigned int, float)",
        ),
    ),
    (
        "Init__10ATCManager",
        Ok(
            "ATCManager::Init(void)",
        ),
    ),
    (
        "SetATCTable__10ATCManagerP12AttributeRowUi",
        Ok(
            "ATCManager::SetATCTable(AttributeRow *, unsigned int)",
        ),
    ),
    (
        "__10ATCManager",
        Ok(
            "ATCManager::ATCManager(void)",
        ),
    ),
    (
        "_$_10ATCManager",
        Ok(
            "ATCManager::~ATCManager(void)",
        ),
    ),
    (
        "__9ATCLoader",
        Ok(
            "ATCLoader::ATCLoader(void)",
        ),
    ),
    (
        "_$_9ATCLoader",
        Ok(
            "ATCLoader::~ATCLoader(void)",
        ),
    ),
    (
        "LoadObject__9ATCLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "ATCLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf9ATCLoader",
        Ok(
            "ATCLoader type_info function",
        ),
    ),
    (
        "_$_17radLoadDataLoader",
        Ok(
            "radLoadDataLoader::~radLoadDataLoader(void)",
        ),
    ),
    (
        "__17radLoadDataLoader",
        Ok(
            "radLoadDataLoader::radLoadDataLoader(void)",
        ),
    ),
    (
        "__tf17radLoadDataLoader",
        Ok(
            "radLoadDataLoader type_info function",
        ),
    ),
    (
        "Abort__11AnimatedCam",
        Ok(
            "AnimatedCam::Abort(void)",
        ),
    ),
    (
        "__11AnimatedCam",
        Ok(
            "AnimatedCam::AnimatedCam(void)",
        ),
    ),
    (
        "_$_11AnimatedCam",
        Ok(
            "AnimatedCam::~AnimatedCam(void)",
        ),
    ),
    (
        "AllowSkipping__11AnimatedCamb",
        Ok(
            "AnimatedCam::AllowSkipping(bool)",
        ),
    ),
    (
        "CameraSwitchPending__11AnimatedCam",
        Ok(
            "AnimatedCam::CameraSwitchPending(void)",
        ),
    ),
    (
        "CheckPendingCameraSwitch__11AnimatedCam",
        Ok(
            "AnimatedCam::CheckPendingCameraSwitch(void)",
        ),
    ),
    (
        "ClearCamera__11AnimatedCam",
        Ok(
            "AnimatedCam::ClearCamera(void)",
        ),
    ),
    (
        "GetName__C11AnimatedCam",
        Ok(
            "AnimatedCam::GetName(void) const",
        ),
    ),
    (
        "GetType__11AnimatedCam",
        Ok(
            "AnimatedCam::GetType(void)",
        ),
    ),
    (
        "LetterBoxStart__11AnimatedCam",
        Ok(
            "AnimatedCam::LetterBoxStart(void)",
        ),
    ),
    (
        "LetterBoxStop__11AnimatedCam",
        Ok(
            "AnimatedCam::LetterBoxStop(void)",
        ),
    ),
    (
        "LookupCamera__11AnimatedCam",
        Ok(
            "AnimatedCam::LookupCamera(void)",
        ),
    ),
    (
        "LookupMulticontroller__11AnimatedCam",
        Ok(
            "AnimatedCam::LookupMulticontroller(void)",
        ),
    ),
    (
        "OnInit__11AnimatedCam",
        Ok(
            "AnimatedCam::OnInit(void)",
        ),
    ),
    (
        "OnShutdown__11AnimatedCam",
        Ok(
            "AnimatedCam::OnShutdown(void)",
        ),
    ),
    (
        "Reset__11AnimatedCam",
        Ok(
            "AnimatedCam::Reset(void)",
        ),
    ),
    (
        "SetCamera__11AnimatedCamG5tName",
        Ok(
            "AnimatedCam::SetCamera(tName)",
        ),
    ),
    (
        "SetMulticontroller__11AnimatedCamG5tName",
        Ok(
            "AnimatedCam::SetMulticontroller(tName)",
        ),
    ),
    (
        "SetMissionStartCamera__11AnimatedCamG5tName",
        Ok(
            "AnimatedCam::SetMissionStartCamera(tName)",
        ),
    ),
    (
        "SetMissionStartMulticontroller__11AnimatedCamG5tName",
        Ok(
            "AnimatedCam::SetMissionStartMulticontroller(tName)",
        ),
    ),
    (
        "SetNextCameraType__11AnimatedCamQ28SuperCam4Type",
        Ok(
            "AnimatedCam::SetNextCameraType(SuperCam::Type)",
        ),
    ),
    (
        "SetTarget__11AnimatedCamP15ISuperCamTarget",
        Ok(
            "AnimatedCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "Skip__11AnimatedCam",
        Ok(
            "AnimatedCam::Skip(void)",
        ),
    ),
    (
        "TriggerMissionStartCamera__11AnimatedCam",
        Ok(
            "AnimatedCam::TriggerMissionStartCamera(void)",
        ),
    ),
    (
        "SetCameraSwitchPending__11AnimatedCamb",
        Ok(
            "AnimatedCam::SetCameraSwitchPending(bool)",
        ),
    ),
    (
        "SetCameraTransitionFlags__11AnimatedCami",
        Ok(
            "AnimatedCam::SetCameraTransitionFlags(int)",
        ),
    ),
    (
        "SupressNextLetterbox__11AnimatedCam",
        Ok(
            "AnimatedCam::SupressNextLetterbox(void)",
        ),
    ),
    (
        "Update__11AnimatedCamUi",
        Ok(
            "AnimatedCam::Update(unsigned int)",
        ),
    ),
    (
        "__9BumperCam",
        Ok(
            "BumperCam::BumperCam(void)",
        ),
    ),
    (
        "_$_9BumperCam",
        Ok(
            "BumperCam::~BumperCam(void)",
        ),
    ),
    (
        "Update__9BumperCamUi",
        Ok(
            "BumperCam::Update(unsigned int)",
        ),
    ),
    (
        "UpdateForPhysics__9BumperCamUi",
        Ok(
            "BumperCam::UpdateForPhysics(unsigned int)",
        ),
    ),
    (
        "LoadSettings__9BumperCamPUc",
        Ok(
            "BumperCam::LoadSettings(unsigned char *)",
        ),
    ),
    (
        "SetCollisionOffset__9BumperCamPCQ218RadicalMathLibrary6VectorUiRCQ218RadicalMathLibrary6Vector",
        Ok(
            "BumperCam::SetCollisionOffset(RadicalMathLibrary::Vector const *, unsigned int, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "OnRegisterDebugControls__9BumperCam",
        Ok(
            "BumperCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__9BumperCam",
        Ok(
            "BumperCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "__8ChaseCam",
        Ok(
            "ChaseCam::ChaseCam(void)",
        ),
    ),
    (
        "_$_8ChaseCam",
        Ok(
            "ChaseCam::~ChaseCam(void)",
        ),
    ),
    (
        "Update__8ChaseCamUi",
        Ok(
            "ChaseCam::Update(unsigned int)",
        ),
    ),
    (
        "LoadSettings__8ChaseCamPUc",
        Ok(
            "ChaseCam::LoadSettings(unsigned char *)",
        ),
    ),
    (
        "OnRegisterDebugControls__8ChaseCam",
        Ok(
            "ChaseCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__8ChaseCam",
        Ok(
            "ChaseCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "DoCameraCut__8ChaseCam",
        Ok(
            "ChaseCam::DoCameraCut(void)",
        ),
    ),
    (
        "__15ConversationCam",
        Ok(
            "ConversationCam::ConversationCam(void)",
        ),
    ),
    (
        "_$_15ConversationCam",
        Ok(
            "ConversationCam::~ConversationCam(void)",
        ),
    ),
    (
        "Update__15ConversationCamUi",
        Ok(
            "ConversationCam::Update(unsigned int)",
        ),
    ),
    (
        "LoadSettings__15ConversationCamPUc",
        Ok(
            "ConversationCam::LoadSettings(unsigned char *)",
        ),
    ),
    (
        "LockCharacterPositions__15ConversationCam",
        Ok(
            "ConversationCam::LockCharacterPositions(void)",
        ),
    ),
    (
        "SetTarget__15ConversationCamP15ISuperCamTarget",
        Ok(
            "ConversationCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__15ConversationCamP15ISuperCamTarget",
        Ok(
            "ConversationCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "GetNumTargets__C15ConversationCam",
        Ok(
            "ConversationCam::GetNumTargets(void) const",
        ),
    ),
    (
        "OnRegisterDebugControls__15ConversationCam",
        Ok(
            "ConversationCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__15ConversationCam",
        Ok(
            "ConversationCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "SetCameraByIndex__15ConversationCamUi",
        Ok(
            "ConversationCam::SetCameraByIndex(unsigned int)",
        ),
    ),
    (
        "SetCameraByName__15ConversationCamRC5tName",
        Ok(
            "ConversationCam::SetCameraByName(tName const &)",
        ),
    ),
    (
        "SetCameraDistanceByName__15ConversationCamRC5tNamef",
        Ok(
            "ConversationCam::SetCameraDistanceByName(tName const &, float)",
        ),
    ),
    (
        "SetCamBestSide__15ConversationCamRC5tName",
        Ok(
            "ConversationCam::SetCamBestSide(tName const &)",
        ),
    ),
    (
        "SetCameraDistanceByIndex__15ConversationCamUif",
        Ok(
            "ConversationCam::SetCameraDistanceByIndex(unsigned int, float)",
        ),
    ),
    (
        "SetCharacter__15ConversationCamiP9Character",
        Ok(
            "ConversationCam::SetCharacter(int, Character *)",
        ),
    ),
    (
        "SetPcCameraByName__15ConversationCamRC5tName",
        Ok(
            "ConversationCam::SetPcCameraByName(tName const &)",
        ),
    ),
    (
        "SetNpcCameraByName__15ConversationCamRC5tName",
        Ok(
            "ConversationCam::SetNpcCameraByName(tName const &)",
        ),
    ),
    (
        "SetNpcIsChild__15ConversationCamb",
        Ok(
            "ConversationCam::SetNpcIsChild(bool)",
        ),
    ),
    (
        "SetPcIsChild__15ConversationCamb",
        Ok(
            "ConversationCam::SetPcIsChild(bool)",
        ),
    ),
    (
        "UsePcCam__15ConversationCam",
        Ok(
            "ConversationCam::UsePcCam(void)",
        ),
    ),
    (
        "UseNpcCam__15ConversationCam",
        Ok(
            "ConversationCam::UseNpcCam(void)",
        ),
    ),
    (
        "OnInit__15ConversationCam",
        Ok(
            "ConversationCam::OnInit(void)",
        ),
    ),
    (
        "OnShutdown__15ConversationCam",
        Ok(
            "ConversationCam::OnShutdown(void)",
        ),
    ),
    (
        "__8DebugCam",
        Ok(
            "DebugCam::DebugCam(void)",
        ),
    ),
    (
        "_$_8DebugCam",
        Ok(
            "DebugCam::~DebugCam(void)",
        ),
    ),
    (
        "Update__8DebugCamUi",
        Ok(
            "DebugCam::Update(unsigned int)",
        ),
    ),
    (
        "EnableShake__8DebugCam",
        Ok(
            "DebugCam::EnableShake(void)",
        ),
    ),
    (
        "DisableShake__8DebugCam",
        Ok(
            "DebugCam::DisableShake(void)",
        ),
    ),
    (
        "OnRegisterDebugControls__8DebugCam",
        Ok(
            "DebugCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__8DebugCam",
        Ok(
            "DebugCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "__9FollowCamQ29FollowCam10FollowType",
        Ok(
            "FollowCam::FollowCam(FollowCam::FollowType)",
        ),
    ),
    (
        "_$_9FollowCam",
        Ok(
            "FollowCam::~FollowCam(void)",
        ),
    ),
    (
        "Update__9FollowCamUi",
        Ok(
            "FollowCam::Update(unsigned int)",
        ),
    ),
    (
        "UpdateForPhysics__9FollowCamUi",
        Ok(
            "FollowCam::UpdateForPhysics(unsigned int)",
        ),
    ),
    (
        "LoadSettings__9FollowCamPUc",
        Ok(
            "FollowCam::LoadSettings(unsigned char *)",
        ),
    ),
    (
        "CopyToData__9FollowCam",
        Ok(
            "FollowCam::CopyToData(void)",
        ),
    ),
    (
        "SetTarget__9FollowCamP15ISuperCamTarget",
        Ok(
            "FollowCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__9FollowCamP15ISuperCamTarget",
        Ok(
            "FollowCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "EnableShake__9FollowCam",
        Ok(
            "FollowCam::EnableShake(void)",
        ),
    ),
    (
        "DisableShake__9FollowCam",
        Ok(
            "FollowCam::DisableShake(void)",
        ),
    ),
    (
        "ShouldReverse__C9FollowCam",
        Ok(
            "FollowCam::ShouldReverse(void) const",
        ),
    ),
    (
        "OnRegisterDebugControls__9FollowCam",
        Ok(
            "FollowCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__9FollowCam",
        Ok(
            "FollowCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "DoCameraCut__9FollowCam",
        Ok(
            "FollowCam::DoCameraCut(void)",
        ),
    ),
    (
        "InitUnstable__9FollowCam",
        Ok(
            "FollowCam::InitUnstable(void)",
        ),
    ),
    (
        "UpdateUnstable__9FollowCamUi",
        Ok(
            "FollowCam::UpdateUnstable(unsigned int)",
        ),
    ),
    (
        "InitQuickTurn__9FollowCam",
        Ok(
            "FollowCam::InitQuickTurn(void)",
        ),
    ),
    (
        "UpdateQuickTurn__9FollowCamUi",
        Ok(
            "FollowCam::UpdateQuickTurn(unsigned int)",
        ),
    ),
    (
        "GetTargetPosition__9FollowCamPQ218RadicalMathLibrary6Vectorb",
        Ok(
            "FollowCam::GetTargetPosition(RadicalMathLibrary::Vector *, bool)",
        ),
    ),
    (
        "CalculateRod__9FollowCamPQ218RadicalMathLibrary6VectorUif",
        Ok(
            "FollowCam::CalculateRod(RadicalMathLibrary::Vector *, unsigned int, float)",
        ),
    ),
    (
        "CalculateTarget__9FollowCamPQ218RadicalMathLibrary6VectorUif",
        Ok(
            "FollowCam::CalculateTarget(RadicalMathLibrary::Vector *, unsigned int, float)",
        ),
    ),
    (
        "GetDesiredRod__9FollowCamPQ218RadicalMathLibrary6Vector",
        Ok(
            "FollowCam::GetDesiredRod(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "IsPushingStick__9FollowCam",
        Ok(
            "FollowCam::IsPushingStick(void)",
        ),
    ),
    (
        "__7KullCam",
        Ok(
            "KullCam::KullCam(void)",
        ),
    ),
    (
        "_$_7KullCam",
        Ok(
            "KullCam::~KullCam(void)",
        ),
    ),
    (
        "Update__7KullCamUi",
        Ok(
            "KullCam::Update(unsigned int)",
        ),
    ),
    (
        "OnRegisterDebugControls__7KullCam",
        Ok(
            "KullCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__7KullCam",
        Ok(
            "KullCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "__19RelativeAnimatedCam",
        Ok(
            "RelativeAnimatedCam::RelativeAnimatedCam(void)",
        ),
    ),
    (
        "CheckPendingCameraSwitch__19RelativeAnimatedCam",
        Ok(
            "RelativeAnimatedCam::CheckPendingCameraSwitch(void)",
        ),
    ),
    (
        "GetName__C19RelativeAnimatedCam",
        Ok(
            "RelativeAnimatedCam::GetName(void) const",
        ),
    ),
    (
        "GetType__19RelativeAnimatedCam",
        Ok(
            "RelativeAnimatedCam::GetType(void)",
        ),
    ),
    (
        "LetterBoxStart__19RelativeAnimatedCam",
        Ok(
            "RelativeAnimatedCam::LetterBoxStart(void)",
        ),
    ),
    (
        "LetterBoxStop__19RelativeAnimatedCam",
        Ok(
            "RelativeAnimatedCam::LetterBoxStop(void)",
        ),
    ),
    (
        "SetCameraAnimationController__19RelativeAnimatedCamP26tCameraAnimationController",
        Ok(
            "RelativeAnimatedCam::SetCameraAnimationController(tCameraAnimationController *)",
        ),
    ),
    (
        "SetOffsetMatrix__19RelativeAnimatedCamRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "RelativeAnimatedCam::SetOffsetMatrix(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Update__19RelativeAnimatedCamUi",
        Ok(
            "RelativeAnimatedCam::Update(unsigned int)",
        ),
    ),
    (
        "__7RailCam",
        Ok(
            "RailCam::RailCam(void)",
        ),
    ),
    (
        "_$_7RailCam",
        Ok(
            "RailCam::~RailCam(void)",
        ),
    ),
    (
        "OnInit__7RailCam",
        Ok(
            "RailCam::OnInit(void)",
        ),
    ),
    (
        "OnShutdown__7RailCam",
        Ok(
            "RailCam::OnShutdown(void)",
        ),
    ),
    (
        "Update__7RailCamUi",
        Ok(
            "RailCam::Update(unsigned int)",
        ),
    ),
    (
        "InitController__7RailCam",
        Ok(
            "RailCam::InitController(void)",
        ),
    ),
    (
        "LoadSettings__7RailCamPUc",
        Ok(
            "RailCam::LoadSettings(unsigned char *)",
        ),
    ),
    (
        "OnRegisterDebugControls__7RailCam",
        Ok(
            "RailCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__7RailCam",
        Ok(
            "RailCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "GetTargetSpeedModifier__7RailCam",
        Ok(
            "RailCam::GetTargetSpeedModifier(void)",
        ),
    ),
    (
        "GetTargetPosition__7RailCamPQ218RadicalMathLibrary6Vectorb",
        Ok(
            "RailCam::GetTargetPosition(RadicalMathLibrary::Vector *, bool)",
        ),
    ),
    (
        "IntervalClamp__C7RailCamRf",
        Ok(
            "RailCam::IntervalClamp(float &) const",
        ),
    ),
    (
        "ProjectPointOnLine__C7RailCamRCQ218RadicalMathLibrary6VectorN21Rf",
        Ok(
            "RailCam::ProjectPointOnLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float &) const",
        ),
    ),
    (
        "IntersectLineCylinder__7RailCamiRCQ218RadicalMathLibrary6VectorfT2Rf",
        Ok(
            "RailCam::IntersectLineCylinder(int, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const &, float &)",
        ),
    ),
    (
        "FindCameraPosition_Distance__7RailCamRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "RailCam::FindCameraPosition_Distance(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "FindCameraPosition_Projection__7RailCamRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "RailCam::FindCameraPosition_Projection(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "FinalizeRailPosition__7RailCamQ27RailCam12SolutionType",
        Ok(
            "RailCam::FinalizeRailPosition(RailCam::SolutionType)",
        ),
    ),
    (
        "FindCameraLookAt__7RailCamRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "RailCam::FindCameraLookAt(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "TestEval__7RailCamf",
        Ok(
            "RailCam::TestEval(float)",
        ),
    ),
    (
        "DrawRail__7RailCamb",
        Ok(
            "RailCam::DrawRail(bool)",
        ),
    ),
    (
        "DrawHull__7RailCamb",
        Ok(
            "RailCam::DrawHull(bool)",
        ),
    ),
    (
        "DrawCylinder__7RailCamRCQ218RadicalMathLibrary6Vector",
        Ok(
            "RailCam::DrawCylinder(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__13SineCosShaker",
        Ok(
            "SineCosShaker::SineCosShaker(void)",
        ),
    ),
    (
        "_$_13SineCosShaker",
        Ok(
            "SineCosShaker::~SineCosShaker(void)",
        ),
    ),
    (
        "SetCamera__13SineCosShakerP12tPointCamera",
        Ok(
            "SineCosShaker::SetCamera(tPointCamera *)",
        ),
    ),
    (
        "ShakeCamera__13SineCosShakerPQ218RadicalMathLibrary6VectorT1Ui",
        Ok(
            "SineCosShaker::ShakeCamera(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, unsigned int)",
        ),
    ),
    (
        "RegisterDebugInfo__13SineCosShaker",
        Ok(
            "SineCosShaker::RegisterDebugInfo(void)",
        ),
    ),
    (
        "UnregisterDebugInfo__13SineCosShaker",
        Ok(
            "SineCosShaker::UnregisterDebugInfo(void)",
        ),
    ),
    (
        "SetShakeData__13SineCosShakerPC14ShakeEventData",
        Ok(
            "SineCosShaker::SetShakeData(ShakeEventData const *)",
        ),
    ),
    (
        "__8SuperCam",
        Ok(
            "SuperCam::SuperCam(void)",
        ),
    ),
    (
        "_$_8SuperCam",
        Ok(
            "SuperCam::~SuperCam(void)",
        ),
    ),
    (
        "RegisterDebugControls__8SuperCam",
        Ok(
            "SuperCam::RegisterDebugControls(void)",
        ),
    ),
    (
        "UnregisterDebugControls__8SuperCam",
        Ok(
            "SuperCam::UnregisterDebugControls(void)",
        ),
    ),
    (
        "GetPosition__C8SuperCamPQ218RadicalMathLibrary6Vector",
        Ok(
            "SuperCam::GetPosition(RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "GetTarget__C8SuperCamPQ218RadicalMathLibrary6Vector",
        Ok(
            "SuperCam::GetTarget(RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "GetHeading__C8SuperCamPQ218RadicalMathLibrary6Vector",
        Ok(
            "SuperCam::GetHeading(RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "GetHeadingNormalized__8SuperCamPQ218RadicalMathLibrary6Vector",
        Ok(
            "SuperCam::GetHeadingNormalized(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetCameraUp__C8SuperCamPQ218RadicalMathLibrary6Vector",
        Ok(
            "SuperCam::GetCameraUp(RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "SetFOV__8SuperCamf",
        Ok(
            "SuperCam::SetFOV(float)",
        ),
    ),
    (
        "GetFOV__C8SuperCam",
        Ok(
            "SuperCam::GetFOV(void) const",
        ),
    ),
    (
        "SetCameraValues__8SuperCamUiGQ218RadicalMathLibrary6VectorT2PCQ218RadicalMathLibrary6Vector",
        Ok(
            "SuperCam::SetCameraValues(unsigned int, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector const *)",
        ),
    ),
    (
        "OverrideFOV__8SuperCambff",
        Ok(
            "SuperCam::OverrideFOV(bool, float, float)",
        ),
    ),
    (
        "DisableOverride__8SuperCam",
        Ok(
            "SuperCam::DisableOverride(void)",
        ),
    ),
    (
        "SetFOVOverride__8SuperCamf",
        Ok(
            "SuperCam::SetFOVOverride(float)",
        ),
    ),
    (
        "SetCamera__8SuperCamP12tPointCamera",
        Ok(
            "SuperCam::SetCamera(tPointCamera *)",
        ),
    ),
    (
        "ClampAngle__C8SuperCamPf",
        Ok(
            "SuperCam::ClampAngle(float *) const",
        ),
    ),
    (
        "AdjustAngles__C8SuperCamPfN21",
        Ok(
            "SuperCam::AdjustAngles(float *, float *, float *) const",
        ),
    ),
    (
        "Shutdown__8SuperCam",
        Ok(
            "SuperCam::Shutdown(void)",
        ),
    ),
    (
        "CorrectDist__8SuperCamRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "SuperCam::CorrectDist(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "InitMyController__8SuperCami",
        Ok(
            "SuperCam::InitMyController(int)",
        ),
    ),
    (
        "ShutDownMyController__8SuperCam",
        Ok(
            "SuperCam::ShutDownMyController(void)",
        ),
    ),
    (
        "GetCameraNonConst__8SuperCam",
        Ok(
            "SuperCam::GetCameraNonConst(void)",
        ),
    ),
    (
        "SphericalMotion__C8SuperCamRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6VectorT1T2f",
        Ok(
            "SuperCam::SphericalMotion(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, float) const",
        ),
    ),
    (
        "UpdateVUP__8SuperCamGQ218RadicalMathLibrary6VectorT1",
        Ok(
            "SuperCam::UpdateVUP(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "EaseMotion__8SuperCamfff",
        Ok(
            "SuperCam::EaseMotion(float, float, float)",
        ),
    ),
    (
        "DoCameraTransition__8SuperCambUi",
        Ok(
            "SuperCam::DoCameraTransition(bool, unsigned int)",
        ),
    ),
    (
        "SetupShake__8SuperCam",
        Ok(
            "SuperCam::SetupShake(void)",
        ),
    ),
    (
        "EndShake__8SuperCam",
        Ok(
            "SuperCam::EndShake(void)",
        ),
    ),
    (
        "SetupTransition__8SuperCamb",
        Ok(
            "SuperCam::SetupTransition(bool)",
        ),
    ),
    (
        "EndTransition__8SuperCamb",
        Ok(
            "SuperCam::EndTransition(bool)",
        ),
    ),
    (
        "TransitionCamera__8SuperCamfPQ218RadicalMathLibrary6VectorT2PfUib",
        Ok(
            "SuperCam::TransitionCamera(float, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, float *, unsigned int, bool)",
        ),
    ),
    (
        "TransitionFOV__8SuperCamfPfUi",
        Ok(
            "SuperCam::TransitionFOV(float, float *, unsigned int)",
        ),
    ),
    (
        "EaseIn__8SuperCamfPQ218RadicalMathLibrary6VectorT2Ui",
        Ok(
            "SuperCam::EaseIn(float, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, unsigned int)",
        ),
    ),
    (
        "SetCameraShakerData__8SuperCamPC14ShakeEventData",
        Ok(
            "SuperCam::SetCameraShakerData(ShakeEventData const *)",
        ),
    ),
    (
        "__15SuperCamCentral",
        Ok(
            "SuperCamCentral::SuperCamCentral(void)",
        ),
    ),
    (
        "_$_15SuperCamCentral",
        Ok(
            "SuperCamCentral::~SuperCamCentral(void)",
        ),
    ),
    (
        "Init__15SuperCamCentralb",
        Ok(
            "SuperCamCentral::Init(bool)",
        ),
    ),
    (
        "IsInit__C15SuperCamCentral",
        Ok(
            "SuperCamCentral::IsInit(void) const",
        ),
    ),
    (
        "UpdateCameraCollisionSpherePosition__15SuperCamCentralRQ218RadicalMathLibrary6Vector",
        Ok(
            "SuperCamCentral::UpdateCameraCollisionSpherePosition(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "UpdateCameraCollisionSphereRadius__15SuperCamCentralf",
        Ok(
            "SuperCamCentral::UpdateCameraCollisionSphereRadius(float)",
        ),
    ),
    (
        "Update__15SuperCamCentralUib",
        Ok(
            "SuperCamCentral::Update(unsigned int, bool)",
        ),
    ),
    (
        "PreCollisionPrep__15SuperCamCentral",
        Ok(
            "SuperCamCentral::PreCollisionPrep(void)",
        ),
    ),
    (
        "AddCameraCollisionOffset__15SuperCamCentralRQ218RadicalMathLibrary6Vector",
        Ok(
            "SuperCamCentral::AddCameraCollisionOffset(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "RegisterSuperCam__15SuperCamCentralP8SuperCam",
        Ok(
            "SuperCamCentral::RegisterSuperCam(SuperCam *)",
        ),
    ),
    (
        "UnregisterSuperCam__15SuperCamCentralP8SuperCam",
        Ok(
            "SuperCamCentral::UnregisterSuperCam(SuperCam *)",
        ),
    ),
    (
        "UnregisterSuperCam__15SuperCamCentralUi",
        Ok(
            "SuperCamCentral::UnregisterSuperCam(unsigned int)",
        ),
    ),
    (
        "GetActiveSuperCamIndex__C15SuperCamCentral",
        Ok(
            "SuperCamCentral::GetActiveSuperCamIndex(void) const",
        ),
    ),
    (
        "GetSuperCam__C15SuperCamCentralQ28SuperCam4Type",
        Ok(
            "SuperCamCentral::GetSuperCam(SuperCam::Type) const",
        ),
    ),
    (
        "ToggleSuperCam__15SuperCamCentralbT1",
        Ok(
            "SuperCamCentral::ToggleSuperCam(bool, bool)",
        ),
    ),
    (
        "SelectSuperCam__15SuperCamCentralUiiUi",
        Ok(
            "SuperCamCentral::SelectSuperCam(unsigned int, int, unsigned int)",
        ),
    ),
    (
        "SelectSuperCam__15SuperCamCentralQ28SuperCam4TypeiUi",
        Ok(
            "SuperCamCentral::SelectSuperCam(SuperCam::Type, int, unsigned int)",
        ),
    ),
    (
        "SelectSuperCam__15SuperCamCentralP8SuperCamiUi",
        Ok(
            "SuperCamCentral::SelectSuperCam(SuperCam *, int, unsigned int)",
        ),
    ),
    (
        "SetCamera__15SuperCamCentralP12tPointCamera",
        Ok(
            "SuperCamCentral::SetCamera(tPointCamera *)",
        ),
    ),
    (
        "SetTarget__15SuperCamCentralP15ISuperCamTarget",
        Ok(
            "SuperCamCentral::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__15SuperCamCentralP15ISuperCamTarget",
        Ok(
            "SuperCamCentral::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "SetActiveSuperCam__15SuperCamCentralUiiUi",
        Ok(
            "SuperCamCentral::SetActiveSuperCam(unsigned int, int, unsigned int)",
        ),
    ),
    (
        "SubmitStatics__15SuperCamCentral",
        Ok(
            "SuperCamCentral::SubmitStatics(void)",
        ),
    ),
    (
        "UpdateForPhysics__15SuperCamCentralUi",
        Ok(
            "SuperCamCentral::UpdateForPhysics(unsigned int)",
        ),
    ),
    (
        "AllowCameraToggle__15SuperCamCentral",
        Ok(
            "SuperCamCentral::AllowCameraToggle(void)",
        ),
    ),
    (
        "AllowAutoCameraChange__15SuperCamCentral",
        Ok(
            "SuperCamCentral::AllowAutoCameraChange(void)",
        ),
    ),
    (
        "RegisterFOVLocator__15SuperCamCentralP10FOVLocator",
        Ok(
            "SuperCamCentral::RegisterFOVLocator(FOVLocator *)",
        ),
    ),
    (
        "UnregisterFOVLocator__15SuperCamCentral",
        Ok(
            "SuperCamCentral::UnregisterFOVLocator(void)",
        ),
    ),
    (
        "NoTransition__15SuperCamCentral",
        Ok(
            "SuperCamCentral::NoTransition(void)",
        ),
    ),
    (
        "HandleEvent__15SuperCamCentral9EventEnumPv",
        Ok(
            "SuperCamCentral::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "ToggleFirstPerson__15SuperCamCentrali",
        Ok(
            "SuperCamCentral::ToggleFirstPerson(int)",
        ),
    ),
    (
        "IsCutCam__15SuperCamCentral",
        Ok(
            "SuperCamCentral::IsCutCam(void)",
        ),
    ),
    (
        "LoadData__15SuperCamCentralPCUcUi",
        Ok(
            "SuperCamCentral::LoadData(unsigned char const *, unsigned int)",
        ),
    ),
    (
        "SaveData__15SuperCamCentralPUcUi",
        Ok(
            "SuperCamCentral::SaveData(unsigned char *, unsigned int)",
        ),
    ),
    (
        "ResetData__15SuperCamCentral",
        Ok(
            "SuperCamCentral::ResetData(void)",
        ),
    ),
    (
        "IsLegalType__15SuperCamCentralQ28SuperCam4Type",
        Ok(
            "SuperCamCentral::IsLegalType(SuperCam::Type)",
        ),
    ),
    (
        "GetNewFollowCamDataChunk__15SuperCamCentral",
        Ok(
            "SuperCamCentral::GetNewFollowCamDataChunk(void)",
        ),
    ),
    (
        "FindFCD__15SuperCamCentralUi",
        Ok(
            "SuperCamCentral::FindFCD(unsigned int)",
        ),
    ),
    (
        "__18SuperCamController",
        Ok(
            "SuperCamController::SuperCamController(void)",
        ),
    ),
    (
        "_$_18SuperCamController",
        Ok(
            "SuperCamController::~SuperCamController(void)",
        ),
    ),
    (
        "LoadControllerMappings__18SuperCamControllerUi",
        Ok(
            "SuperCamController::LoadControllerMappings(unsigned int)",
        ),
    ),
    (
        "OnButtonDown__18SuperCamControlleriiPC6Button",
        Ok(
            "SuperCamController::OnButtonDown(int, int, Button const *)",
        ),
    ),
    (
        "CreateInstance__15SuperCamManager",
        Ok(
            "SuperCamManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__15SuperCamManager",
        Ok(
            "SuperCamManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__15SuperCamManager",
        Ok(
            "SuperCamManager::DestroyInstance(void)",
        ),
    ),
    (
        "Init__15SuperCamManagerb",
        Ok(
            "SuperCamManager::Init(bool)",
        ),
    ),
    (
        "GetSCC__15SuperCamManageri",
        Ok(
            "SuperCamManager::GetSCC(int)",
        ),
    ),
    (
        "PreCollisionPrep__15SuperCamManager",
        Ok(
            "SuperCamManager::PreCollisionPrep(void)",
        ),
    ),
    (
        "Update__15SuperCamManagerUib",
        Ok(
            "SuperCamManager::Update(unsigned int, bool)",
        ),
    ),
    (
        "SubmitStatics__15SuperCamManager",
        Ok(
            "SuperCamManager::SubmitStatics(void)",
        ),
    ),
    (
        "ToggleFirstPerson__15SuperCamManageri",
        Ok(
            "SuperCamManager::ToggleFirstPerson(int)",
        ),
    ),
    (
        "__15SuperCamManager",
        Ok(
            "SuperCamManager::SuperCamManager(void)",
        ),
    ),
    (
        "_$_15SuperCamManager",
        Ok(
            "SuperCamManager::~SuperCamManager(void)",
        ),
    ),
    (
        "__10TrackerCam",
        Ok(
            "TrackerCam::TrackerCam(void)",
        ),
    ),
    (
        "_$_10TrackerCam",
        Ok(
            "TrackerCam::~TrackerCam(void)",
        ),
    ),
    (
        "Update__10TrackerCamUi",
        Ok(
            "TrackerCam::Update(unsigned int)",
        ),
    ),
    (
        "OnRegisterDebugControls__10TrackerCam",
        Ok(
            "TrackerCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__10TrackerCam",
        Ok(
            "TrackerCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "__9WalkerCam",
        Ok(
            "WalkerCam::WalkerCam(void)",
        ),
    ),
    (
        "_$_9WalkerCam",
        Ok(
            "WalkerCam::~WalkerCam(void)",
        ),
    ),
    (
        "Update__9WalkerCamUi",
        Ok(
            "WalkerCam::Update(unsigned int)",
        ),
    ),
    (
        "UpdateForPhysics__9WalkerCamUi",
        Ok(
            "WalkerCam::UpdateForPhysics(unsigned int)",
        ),
    ),
    (
        "LoadSettings__9WalkerCamPUc",
        Ok(
            "WalkerCam::LoadSettings(unsigned char *)",
        ),
    ),
    (
        "SetTarget__9WalkerCamP15ISuperCamTarget",
        Ok(
            "WalkerCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__9WalkerCamP15ISuperCamTarget",
        Ok(
            "WalkerCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "OnDisplay__C9WalkerCam",
        Ok(
            "WalkerCam::OnDisplay(void) const",
        ),
    ),
    (
        "UpdatePositionNormal__9WalkerCamUif",
        Ok(
            "WalkerCam::UpdatePositionNormal(unsigned int, float)",
        ),
    ),
    (
        "UpdatePositionInCollision__9WalkerCamUif",
        Ok(
            "WalkerCam::UpdatePositionInCollision(unsigned int, float)",
        ),
    ),
    (
        "UpdatePositionOneCollsion__9WalkerCamUifUi",
        Ok(
            "WalkerCam::UpdatePositionOneCollsion(unsigned int, float, unsigned int)",
        ),
    ),
    (
        "UpdatePositionMultipleCollision__9WalkerCamUif",
        Ok(
            "WalkerCam::UpdatePositionMultipleCollision(unsigned int, float)",
        ),
    ),
    (
        "OnRegisterDebugControls__9WalkerCam",
        Ok(
            "WalkerCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__9WalkerCam",
        Ok(
            "WalkerCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "IsPushingStick__9WalkerCam",
        Ok(
            "WalkerCam::IsPushingStick(void)",
        ),
    ),
    (
        "IsStickStill__9WalkerCam",
        Ok(
            "WalkerCam::IsStickStill(void)",
        ),
    ),
    (
        "GetTargetPosition__C9WalkerCamPQ218RadicalMathLibrary6Vectorb",
        Ok(
            "WalkerCam::GetTargetPosition(RadicalMathLibrary::Vector *, bool) const",
        ),
    ),
    (
        "IsTargetNearPed__9WalkerCamUi",
        Ok(
            "WalkerCam::IsTargetNearPed(unsigned int)",
        ),
    ),
    (
        "__12WrecklessCam",
        Ok(
            "WrecklessCam::WrecklessCam(void)",
        ),
    ),
    (
        "_$_12WrecklessCam",
        Ok(
            "WrecklessCam::~WrecklessCam(void)",
        ),
    ),
    (
        "Update__12WrecklessCamUi",
        Ok(
            "WrecklessCam::Update(unsigned int)",
        ),
    ),
    (
        "SetTarget__12WrecklessCamP15ISuperCamTarget",
        Ok(
            "WrecklessCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__12WrecklessCamP15ISuperCamTarget",
        Ok(
            "WrecklessCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "OnInit__12WrecklessCam",
        Ok(
            "WrecklessCam::OnInit(void)",
        ),
    ),
    (
        "OnShutdown__12WrecklessCam",
        Ok(
            "WrecklessCam::OnShutdown(void)",
        ),
    ),
    (
        "OnRegisterDebugControls__12WrecklessCam",
        Ok(
            "WrecklessCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__12WrecklessCam",
        Ok(
            "WrecklessCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "__22WrecklessEventListener",
        Ok(
            "WrecklessEventListener::WrecklessEventListener(void)",
        ),
    ),
    (
        "_$_22WrecklessEventListener",
        Ok(
            "WrecklessEventListener::~WrecklessEventListener(void)",
        ),
    ),
    (
        "HandleEvent__22WrecklessEventListener9EventEnumPv",
        Ok(
            "WrecklessEventListener::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__9StaticCam",
        Ok(
            "StaticCam::StaticCam(void)",
        ),
    ),
    (
        "_$_9StaticCam",
        Ok(
            "StaticCam::~StaticCam(void)",
        ),
    ),
    (
        "Update__9StaticCamUi",
        Ok(
            "StaticCam::Update(unsigned int)",
        ),
    ),
    (
        "OnRegisterDebugControls__9StaticCam",
        Ok(
            "StaticCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__9StaticCam",
        Ok(
            "StaticCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "GetTargetSpeedModifier__9StaticCam",
        Ok(
            "StaticCam::GetTargetSpeedModifier(void)",
        ),
    ),
    (
        "__10ReverseCam",
        Ok(
            "ReverseCam::ReverseCam(void)",
        ),
    ),
    (
        "_$_10ReverseCam",
        Ok(
            "ReverseCam::~ReverseCam(void)",
        ),
    ),
    (
        "Update__10ReverseCamUi",
        Ok(
            "ReverseCam::Update(unsigned int)",
        ),
    ),
    (
        "UpdateForPhysics__10ReverseCamUi",
        Ok(
            "ReverseCam::UpdateForPhysics(unsigned int)",
        ),
    ),
    (
        "EnableShake__10ReverseCam",
        Ok(
            "ReverseCam::EnableShake(void)",
        ),
    ),
    (
        "DisableShake__10ReverseCam",
        Ok(
            "ReverseCam::DisableShake(void)",
        ),
    ),
    (
        "OnRegisterDebugControls__10ReverseCam",
        Ok(
            "ReverseCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__10ReverseCam",
        Ok(
            "ReverseCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "CanSwitch__10ReverseCam",
        Ok(
            "ReverseCam::CanSwitch(void)",
        ),
    ),
    (
        "_$_15SurveillanceCam",
        Ok(
            "SurveillanceCam::~SurveillanceCam(void)",
        ),
    ),
    (
        "Update__15SurveillanceCamUi",
        Ok(
            "SurveillanceCam::Update(unsigned int)",
        ),
    ),
    (
        "GetName__C15SurveillanceCam",
        Ok(
            "SurveillanceCam::GetName(void) const",
        ),
    ),
    (
        "GetType__15SurveillanceCam",
        Ok(
            "SurveillanceCam::GetType(void)",
        ),
    ),
    (
        "SetTarget__15SurveillanceCamP15ISuperCamTarget",
        Ok(
            "SurveillanceCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "OnRegisterDebugControls__15SurveillanceCam",
        Ok(
            "SurveillanceCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__15SurveillanceCam",
        Ok(
            "SurveillanceCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "__14SuperSprintCam",
        Ok(
            "SuperSprintCam::SuperSprintCam(void)",
        ),
    ),
    (
        "_$_14SuperSprintCam",
        Ok(
            "SuperSprintCam::~SuperSprintCam(void)",
        ),
    ),
    (
        "Update__14SuperSprintCamUi",
        Ok(
            "SuperSprintCam::Update(unsigned int)",
        ),
    ),
    (
        "OnInit__14SuperSprintCam",
        Ok(
            "SuperSprintCam::OnInit(void)",
        ),
    ),
    (
        "OnShutdown__14SuperSprintCam",
        Ok(
            "SuperSprintCam::OnShutdown(void)",
        ),
    ),
    (
        "OnRegisterDebugControls__14SuperSprintCam",
        Ok(
            "SuperSprintCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__14SuperSprintCam",
        Ok(
            "SuperSprintCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "find__H2ZP5tNameZ5tName_X01X01RCX11G26random_access_iterator_tag_X01",
        Ok(
            "tName * find<tName *, tName>(tName *, tName *, tName const &, random_access_iterator_tag)",
        ),
    ),
    (
        "__tf13ICameraShaker",
        Ok(
            "ICameraShaker type_info function",
        ),
    ),
    (
        "__tf13SineCosShaker",
        Ok(
            "SineCosShaker type_info function",
        ),
    ),
    (
        "__tf8SuperCam",
        Ok(
            "SuperCam type_info function",
        ),
    ),
    (
        "__tf11AnimatedCam",
        Ok(
            "AnimatedCam type_info function",
        ),
    ),
    (
        "__tf15SuperCamCentral",
        Ok(
            "SuperCamCentral type_info function",
        ),
    ),
    (
        "__tf13BumperCamData",
        Ok(
            "BumperCamData type_info function",
        ),
    ),
    (
        "__tf9BumperCam",
        Ok(
            "BumperCam type_info function",
        ),
    ),
    (
        "__tf15ISuperCamTarget",
        Ok(
            "ISuperCamTarget type_info function",
        ),
    ),
    (
        "__tf12ChaseCamData",
        Ok(
            "ChaseCamData type_info function",
        ),
    ),
    (
        "__tf8ChaseCam",
        Ok(
            "ChaseCam type_info function",
        ),
    ),
    (
        "__tf19ConversationCamData",
        Ok(
            "ConversationCamData type_info function",
        ),
    ),
    (
        "__tf15ConversationCam",
        Ok(
            "ConversationCam type_info function",
        ),
    ),
    (
        "__tf8DebugCam",
        Ok(
            "DebugCam type_info function",
        ),
    ),
    (
        "__tf13FollowCamData",
        Ok(
            "FollowCamData type_info function",
        ),
    ),
    (
        "__tf9FollowCam",
        Ok(
            "FollowCam type_info function",
        ),
    ),
    (
        "__tf18SuperCamController",
        Ok(
            "SuperCamController type_info function",
        ),
    ),
    (
        "__tf7KullCam",
        Ok(
            "KullCam type_info function",
        ),
    ),
    (
        "_$_19RelativeAnimatedCam",
        Ok(
            "RelativeAnimatedCam::~RelativeAnimatedCam(void)",
        ),
    ),
    (
        "__tf19RelativeAnimatedCam",
        Ok(
            "RelativeAnimatedCam type_info function",
        ),
    ),
    (
        "__tf7RailCam",
        Ok(
            "RailCam type_info function",
        ),
    ),
    (
        "__tf22WrecklessEventListener",
        Ok(
            "WrecklessEventListener type_info function",
        ),
    ),
    (
        "__tf12WrecklessCam",
        Ok(
            "WrecklessCam type_info function",
        ),
    ),
    (
        "__tf14TrackerCamData",
        Ok(
            "TrackerCamData type_info function",
        ),
    ),
    (
        "__tf10TrackerCam",
        Ok(
            "TrackerCam type_info function",
        ),
    ),
    (
        "__tf13WalkerCamData",
        Ok(
            "WalkerCamData type_info function",
        ),
    ),
    (
        "__tf9WalkerCam",
        Ok(
            "WalkerCam type_info function",
        ),
    ),
    (
        "__tf18WalkerCamDataChunk",
        Ok(
            "WalkerCamDataChunk type_info function",
        ),
    ),
    (
        "__tf9StaticCam",
        Ok(
            "StaticCam type_info function",
        ),
    ),
    (
        "__tf10ReverseCam",
        Ok(
            "ReverseCam type_info function",
        ),
    ),
    (
        "__tf15SurveillanceCam",
        Ok(
            "SurveillanceCam type_info function",
        ),
    ),
    (
        "__tf14SuperSprintCam",
        Ok(
            "SuperSprintCam type_info function",
        ),
    ),
    (
        "_$_13ICameraShaker",
        Ok(
            "ICameraShaker::~ICameraShaker(void)",
        ),
    ),
    (
        "Reset__13SineCosShaker",
        Ok(
            "SineCosShaker::Reset(void)",
        ),
    ),
    (
        "SetSpeed__13SineCosShakerf",
        Ok(
            "SineCosShaker::SetSpeed(float)",
        ),
    ),
    (
        "SetTime__13SineCosShakerUi",
        Ok(
            "SineCosShaker::SetTime(unsigned int)",
        ),
    ),
    (
        "SetCameraRelative__13SineCosShakerb",
        Ok(
            "SineCosShaker::SetCameraRelative(bool)",
        ),
    ),
    (
        "SetDirection__13SineCosShakerRCQ218RadicalMathLibrary6Vector",
        Ok(
            "SineCosShaker::SetDirection(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetLooping__13SineCosShakerb",
        Ok(
            "SineCosShaker::SetLooping(bool)",
        ),
    ),
    (
        "DoneShaking__13SineCosShaker",
        Ok(
            "SineCosShaker::DoneShaking(void)",
        ),
    ),
    (
        "GetName__13SineCosShaker",
        Ok(
            "SineCosShaker::GetName(void)",
        ),
    ),
    (
        "UpdateForPhysics__8SuperCamUi",
        Ok(
            "SuperCam::UpdateForPhysics(unsigned int)",
        ),
    ),
    (
        "LoadSettings__8SuperCamPUc",
        Ok(
            "SuperCam::LoadSettings(unsigned char *)",
        ),
    ),
    (
        "SetTarget__8SuperCamP15ISuperCamTarget",
        Ok(
            "SuperCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__8SuperCamP15ISuperCamTarget",
        Ok(
            "SuperCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "GetNumTargets__C8SuperCam",
        Ok(
            "SuperCam::GetNumTargets(void) const",
        ),
    ),
    (
        "SetCollisionOffset__8SuperCamPCQ218RadicalMathLibrary6VectorUiRCQ218RadicalMathLibrary6Vector",
        Ok(
            "SuperCam::SetCollisionOffset(RadicalMathLibrary::Vector const *, unsigned int, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetCollisionRadius__C8SuperCam",
        Ok(
            "SuperCam::GetCollisionRadius(void) const",
        ),
    ),
    (
        "GetIntersectionRadius__C8SuperCam",
        Ok(
            "SuperCam::GetIntersectionRadius(void) const",
        ),
    ),
    (
        "OnInit__8SuperCam",
        Ok(
            "SuperCam::OnInit(void)",
        ),
    ),
    (
        "OnShutdown__8SuperCam",
        Ok(
            "SuperCam::OnShutdown(void)",
        ),
    ),
    (
        "GetTargetSpeedModifier__8SuperCam",
        Ok(
            "SuperCam::GetTargetSpeedModifier(void)",
        ),
    ),
    (
        "OnDisplay__C8SuperCam",
        Ok(
            "SuperCam::OnDisplay(void) const",
        ),
    ),
    (
        "OnRegisterDebugControls__8SuperCam",
        Ok(
            "SuperCam::OnRegisterDebugControls(void)",
        ),
    ),
    (
        "OnUnregisterDebugControls__8SuperCam",
        Ok(
            "SuperCam::OnUnregisterDebugControls(void)",
        ),
    ),
    (
        "CanSwitch__8SuperCam",
        Ok(
            "SuperCam::CanSwitch(void)",
        ),
    ),
    (
        "EnableShake__8SuperCam",
        Ok(
            "SuperCam::EnableShake(void)",
        ),
    ),
    (
        "DisableShake__8SuperCam",
        Ok(
            "SuperCam::DisableShake(void)",
        ),
    ),
    (
        "LookBack__8SuperCamb",
        Ok(
            "SuperCam::LookBack(bool)",
        ),
    ),
    (
        "DoFirstTime__8SuperCam",
        Ok(
            "SuperCam::DoFirstTime(void)",
        ),
    ),
    (
        "DoCameraCut__8SuperCam",
        Ok(
            "SuperCam::DoCameraCut(void)",
        ),
    ),
    (
        "__15GameDataHandler",
        Ok(
            "GameDataHandler::GameDataHandler(void)",
        ),
    ),
    (
        "_$_Q218radLoadHashedStore11RawIterator",
        Ok(
            "radLoadHashedStore::RawIterator::~RawIterator(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z7tCamera",
        Ok(
            "radLoadInventory::SafeCast<tCamera>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z16tMultiController",
        Ok(
            "radLoadInventory::SafeCast<tMultiController>::SafeCast(void)",
        ),
    ),
    (
        "_$_13BumperCamData",
        Ok(
            "BumperCamData::~BumperCamData(void)",
        ),
    ),
    (
        "GetCollisionRadius__C9BumperCam",
        Ok(
            "BumperCam::GetCollisionRadius(void) const",
        ),
    ),
    (
        "GetName__C9BumperCam",
        Ok(
            "BumperCam::GetName(void) const",
        ),
    ),
    (
        "GetType__9BumperCam",
        Ok(
            "BumperCam::GetType(void)",
        ),
    ),
    (
        "SetTarget__9BumperCamP15ISuperCamTarget",
        Ok(
            "BumperCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__9BumperCamP15ISuperCamTarget",
        Ok(
            "BumperCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "GetNumTargets__C9BumperCam",
        Ok(
            "BumperCam::GetNumTargets(void) const",
        ),
    ),
    (
        "_$_12ChaseCamData",
        Ok(
            "ChaseCamData::~ChaseCamData(void)",
        ),
    ),
    (
        "GetName__C8ChaseCam",
        Ok(
            "ChaseCam::GetName(void) const",
        ),
    ),
    (
        "GetType__8ChaseCam",
        Ok(
            "ChaseCam::GetType(void)",
        ),
    ),
    (
        "SetTarget__8ChaseCamP15ISuperCamTarget",
        Ok(
            "ChaseCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__8ChaseCamP15ISuperCamTarget",
        Ok(
            "ChaseCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "GetNumTargets__C8ChaseCam",
        Ok(
            "ChaseCam::GetNumTargets(void) const",
        ),
    ),
    (
        "_$_19ConversationCamData",
        Ok(
            "ConversationCamData::~ConversationCamData(void)",
        ),
    ),
    (
        "GetName__C15ConversationCam",
        Ok(
            "ConversationCam::GetName(void) const",
        ),
    ),
    (
        "GetType__15ConversationCam",
        Ok(
            "ConversationCam::GetType(void)",
        ),
    ),
    (
        "GetName__C8DebugCam",
        Ok(
            "DebugCam::GetName(void) const",
        ),
    ),
    (
        "GetType__8DebugCam",
        Ok(
            "DebugCam::GetType(void)",
        ),
    ),
    (
        "_$_13FollowCamData",
        Ok(
            "FollowCamData::~FollowCamData(void)",
        ),
    ),
    (
        "GetCollisionRadius__C9FollowCam",
        Ok(
            "FollowCam::GetCollisionRadius(void) const",
        ),
    ),
    (
        "GetIntersectionRadius__C9FollowCam",
        Ok(
            "FollowCam::GetIntersectionRadius(void) const",
        ),
    ),
    (
        "GetName__C9FollowCam",
        Ok(
            "FollowCam::GetName(void) const",
        ),
    ),
    (
        "GetNumTargets__C9FollowCam",
        Ok(
            "FollowCam::GetNumTargets(void) const",
        ),
    ),
    (
        "GetType__9FollowCam",
        Ok(
            "FollowCam::GetType(void)",
        ),
    ),
    (
        "SetCollisionOffset__9FollowCamPCQ218RadicalMathLibrary6VectorUiRCQ218RadicalMathLibrary6Vector",
        Ok(
            "FollowCam::SetCollisionOffset(RadicalMathLibrary::Vector const *, unsigned int, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "OnInit__9FollowCam",
        Ok(
            "FollowCam::OnInit(void)",
        ),
    ),
    (
        "OnButton__18SuperCamControlleriiPC6Button",
        Ok(
            "SuperCamController::OnButton(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonUp__18SuperCamControlleriiPC6Button",
        Ok(
            "SuperCamController::OnButtonUp(int, int, Button const *)",
        ),
    ),
    (
        "GetName__C7KullCam",
        Ok(
            "KullCam::GetName(void) const",
        ),
    ),
    (
        "GetType__7KullCam",
        Ok(
            "KullCam::GetType(void)",
        ),
    ),
    (
        "SetTarget__7KullCamP15ISuperCamTarget",
        Ok(
            "KullCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__7KullCamP15ISuperCamTarget",
        Ok(
            "KullCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "GetNumTargets__C7KullCam",
        Ok(
            "KullCam::GetNumTargets(void) const",
        ),
    ),
    (
        "GetName__C7RailCam",
        Ok(
            "RailCam::GetName(void) const",
        ),
    ),
    (
        "GetType__7RailCam",
        Ok(
            "RailCam::GetType(void)",
        ),
    ),
    (
        "SetTarget__7RailCamP15ISuperCamTarget",
        Ok(
            "RailCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__7RailCamP15ISuperCamTarget",
        Ok(
            "RailCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "GetNumTargets__C7RailCam",
        Ok(
            "RailCam::GetNumTargets(void) const",
        ),
    ),
    (
        "GetName__C12WrecklessCam",
        Ok(
            "WrecklessCam::GetName(void) const",
        ),
    ),
    (
        "GetType__12WrecklessCam",
        Ok(
            "WrecklessCam::GetType(void)",
        ),
    ),
    (
        "GetNumTargets__C12WrecklessCam",
        Ok(
            "WrecklessCam::GetNumTargets(void) const",
        ),
    ),
    (
        "_$_14TrackerCamData",
        Ok(
            "TrackerCamData::~TrackerCamData(void)",
        ),
    ),
    (
        "GetName__C10TrackerCam",
        Ok(
            "TrackerCam::GetName(void) const",
        ),
    ),
    (
        "GetType__10TrackerCam",
        Ok(
            "TrackerCam::GetType(void)",
        ),
    ),
    (
        "SetTarget__10TrackerCamP15ISuperCamTarget",
        Ok(
            "TrackerCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__10TrackerCamP15ISuperCamTarget",
        Ok(
            "TrackerCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "GetNumTargets__C10TrackerCam",
        Ok(
            "TrackerCam::GetNumTargets(void) const",
        ),
    ),
    (
        "_$_13WalkerCamData",
        Ok(
            "WalkerCamData::~WalkerCamData(void)",
        ),
    ),
    (
        "GetCollisionRadius__C9WalkerCam",
        Ok(
            "WalkerCam::GetCollisionRadius(void) const",
        ),
    ),
    (
        "GetIntersectionRadius__C9WalkerCam",
        Ok(
            "WalkerCam::GetIntersectionRadius(void) const",
        ),
    ),
    (
        "OnInit__9WalkerCam",
        Ok(
            "WalkerCam::OnInit(void)",
        ),
    ),
    (
        "GetName__C9WalkerCam",
        Ok(
            "WalkerCam::GetName(void) const",
        ),
    ),
    (
        "GetType__9WalkerCam",
        Ok(
            "WalkerCam::GetType(void)",
        ),
    ),
    (
        "GetNumTargets__C9WalkerCam",
        Ok(
            "WalkerCam::GetNumTargets(void) const",
        ),
    ),
    (
        "SetCollisionOffset__9WalkerCamPCQ218RadicalMathLibrary6VectorUiRCQ218RadicalMathLibrary6Vector",
        Ok(
            "WalkerCam::SetCollisionOffset(RadicalMathLibrary::Vector const *, unsigned int, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z18WalkerCamDataChunk",
        Ok(
            "radLoadInventory::SafeCast<WalkerCamDataChunk>::SafeCast(void)",
        ),
    ),
    (
        "__10OldCamData",
        Ok(
            "OldCamData::OldCamData(void)",
        ),
    ),
    (
        "OnInit__9StaticCam",
        Ok(
            "StaticCam::OnInit(void)",
        ),
    ),
    (
        "GetName__C9StaticCam",
        Ok(
            "StaticCam::GetName(void) const",
        ),
    ),
    (
        "GetType__9StaticCam",
        Ok(
            "StaticCam::GetType(void)",
        ),
    ),
    (
        "SetTarget__9StaticCamP15ISuperCamTarget",
        Ok(
            "StaticCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__9StaticCamP15ISuperCamTarget",
        Ok(
            "StaticCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "GetNumTargets__C9StaticCam",
        Ok(
            "StaticCam::GetNumTargets(void) const",
        ),
    ),
    (
        "LoadSettings__10ReverseCamPUc",
        Ok(
            "ReverseCam::LoadSettings(unsigned char *)",
        ),
    ),
    (
        "GetCollisionRadius__C10ReverseCam",
        Ok(
            "ReverseCam::GetCollisionRadius(void) const",
        ),
    ),
    (
        "OnInit__10ReverseCam",
        Ok(
            "ReverseCam::OnInit(void)",
        ),
    ),
    (
        "GetName__C10ReverseCam",
        Ok(
            "ReverseCam::GetName(void) const",
        ),
    ),
    (
        "GetType__10ReverseCam",
        Ok(
            "ReverseCam::GetType(void)",
        ),
    ),
    (
        "SetTarget__10ReverseCamP15ISuperCamTarget",
        Ok(
            "ReverseCam::SetTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "AddTarget__10ReverseCamP15ISuperCamTarget",
        Ok(
            "ReverseCam::AddTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "GetNumTargets__C10ReverseCam",
        Ok(
            "ReverseCam::GetNumTargets(void) const",
        ),
    ),
    (
        "SetCollisionOffset__10ReverseCamPCQ218RadicalMathLibrary6VectorUiRCQ218RadicalMathLibrary6Vector",
        Ok(
            "ReverseCam::SetCollisionOffset(RadicalMathLibrary::Vector const *, unsigned int, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetName__C14SuperSprintCam",
        Ok(
            "SuperSprintCam::GetName(void) const",
        ),
    ),
    (
        "GetType__14SuperSprintCam",
        Ok(
            "SuperSprintCam::GetType(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z13tVectorCamera",
        Ok(
            "radLoadInventory::SafeCast<tVectorCamera>::SafeCast(void)",
        ),
    ),
    (
        "__tf15GameDataHandler",
        Ok(
            "GameDataHandler type_info function",
        ),
    ),
    (
        "__tf18FollowCamDataChunk",
        Ok(
            "FollowCamDataChunk type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z7tCamera",
        Ok(
            "radLoadInventory::SafeCast<tCamera> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z16tMultiController",
        Ok(
            "radLoadInventory::SafeCast<tMultiController> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z18WalkerCamDataChunk",
        Ok(
            "radLoadInventory::SafeCast<WalkerCamDataChunk> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z13tVectorCamera",
        Ok(
            "radLoadInventory::SafeCast<tVectorCamera> type_info function",
        ),
    ),
    (
        "_$_18FollowCamDataChunk",
        Ok(
            "FollowCamDataChunk::~FollowCamDataChunk(void)",
        ),
    ),
    (
        "_$_Q2t9HashTable1Z9IRefCount11RawIterator",
        Ok(
            "HashTable<IRefCount>::RawIterator::~RawIterator(void)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z18WalkerCamDataChunkP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<WalkerCamDataChunk>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z13tVectorCameraP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tVectorCamera>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z16tMultiControllerP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tMultiController>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z7tCameraP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tCamera>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$Abort__11AnimatedCam",
        Ok(
            "global constructors keyed to AnimatedCam::Abort(void)",
        ),
    ),
    (
        "_GLOBAL_$D$Abort__11AnimatedCam",
        Ok(
            "global destructors keyed to AnimatedCam::Abort(void)",
        ),
    ),
    (
        "__9BonusCardUiUiUiG13tUidUnalignedPC8eQuoteIDi",
        Ok(
            "BonusCard::BonusCard(unsigned int, unsigned int, unsigned int, tUidUnaligned, eQuoteID const *, int)",
        ),
    ),
    (
        "_$_9BonusCard",
        Ok(
            "BonusCard::~BonusCard(void)",
        ),
    ),
    (
        "__4CardUiUiUiG13tUidUnalignedPC8eQuoteIDi",
        Ok(
            "Card::Card(unsigned int, unsigned int, unsigned int, tUidUnaligned, eQuoteID const *, int)",
        ),
    ),
    (
        "_$_4Card",
        Ok(
            "Card::~Card(void)",
        ),
    ),
    (
        "GetQuoteID__C4Cardi",
        Ok(
            "Card::GetQuoteID(int) const",
        ),
    ),
    (
        "__8CardList",
        Ok(
            "CardList::CardList(void)",
        ),
    ),
    (
        "Add__8CardListP4Card",
        Ok(
            "CardList::Add(Card *)",
        ),
    ),
    (
        "Empty__8CardList",
        Ok(
            "CardList::Empty(void)",
        ),
    ),
    (
        "CreateInstance__11CardGallery",
        Ok(
            "CardGallery::CreateInstance(void)",
        ),
    ),
    (
        "DestroyInstance__11CardGallery",
        Ok(
            "CardGallery::DestroyInstance(void)",
        ),
    ),
    (
        "GetInstance__11CardGallery",
        Ok(
            "CardGallery::GetInstance(void)",
        ),
    ),
    (
        "__11CardGallery",
        Ok(
            "CardGallery::CardGallery(void)",
        ),
    ),
    (
        "_$_11CardGallery",
        Ok(
            "CardGallery::~CardGallery(void)",
        ),
    ),
    (
        "Init__11CardGallery",
        Ok(
            "CardGallery::Init(void)",
        ),
    ),
    (
        "AddCollectedCardByID__11CardGalleryUi",
        Ok(
            "CardGallery::AddCollectedCardByID(unsigned int)",
        ),
    ),
    (
        "AddCollectedCardByName__11CardGalleryG13tUidUnaligned",
        Ok(
            "CardGallery::AddCollectedCardByName(tUidUnaligned)",
        ),
    ),
    (
        "AddAllCollectedCards__11CardGallery",
        Ok(
            "CardGallery::AddAllCollectedCards(void)",
        ),
    ),
    (
        "RemoveAllCollectedCards__11CardGallery",
        Ok(
            "CardGallery::RemoveAllCollectedCards(void)",
        ),
    ),
    (
        "GetCollectedCards__C11CardGalleryUi",
        Ok(
            "CardGallery::GetCollectedCards(unsigned int) const",
        ),
    ),
    (
        "IsCardCollected__C11CardGalleryG13tUidUnaligned",
        Ok(
            "CardGallery::IsCardCollected(tUidUnaligned) const",
        ),
    ),
    (
        "GetNumCardDecksCompleted__C11CardGallery",
        Ok(
            "CardGallery::GetNumCardDecksCompleted(void) const",
        ),
    ),
    (
        "IsCardDeckComplete__C11CardGalleryUi",
        Ok(
            "CardGallery::IsCardDeckComplete(unsigned int) const",
        ),
    ),
    (
        "LoadData__11CardGalleryPCUcUi",
        Ok(
            "CardGallery::LoadData(unsigned char const *, unsigned int)",
        ),
    ),
    (
        "SaveData__11CardGalleryPUcUi",
        Ok(
            "CardGallery::SaveData(unsigned char *, unsigned int)",
        ),
    ),
    (
        "OnCheatEntered__11CardGallery8eCheatIDb",
        Ok(
            "CardGallery::OnCheatEntered(eCheatID, bool)",
        ),
    ),
    (
        "AddCollectedCard__11CardGalleryP4Card",
        Ok(
            "CardGallery::AddCollectedCard(Card *)",
        ),
    ),
    (
        "__7CardsDB",
        Ok(
            "CardsDB::CardsDB(void)",
        ),
    ),
    (
        "_$_7CardsDB",
        Ok(
            "CardsDB::~CardsDB(void)",
        ),
    ),
    (
        "LoadCards__7CardsDB",
        Ok(
            "CardsDB::LoadCards(void)",
        ),
    ),
    (
        "GetCardByID__7CardsDBUi",
        Ok(
            "CardsDB::GetCardByID(unsigned int)",
        ),
    ),
    (
        "GetCardByName__7CardsDBG13tUidUnaligned",
        Ok(
            "CardsDB::GetCardByName(tUidUnaligned)",
        ),
    ),
    (
        "__13CollectorCardUiUiUiG13tUidUnalignedPC8eQuoteIDi",
        Ok(
            "CollectorCard::CollectorCard(unsigned int, unsigned int, unsigned int, tUidUnaligned, eQuoteID const *, int)",
        ),
    ),
    (
        "_$_13CollectorCard",
        Ok(
            "CollectorCard::~CollectorCard(void)",
        ),
    ),
    (
        "__tf4Card",
        Ok(
            "Card type_info function",
        ),
    ),
    (
        "__tf9BonusCard",
        Ok(
            "BonusCard type_info function",
        ),
    ),
    (
        "__tf11CardGallery",
        Ok(
            "CardGallery type_info function",
        ),
    ),
    (
        "__tf7CardsDB",
        Ok(
            "CardsDB type_info function",
        ),
    ),
    (
        "__tf13CollectorCard",
        Ok(
            "CollectorCard type_info function",
        ),
    ),
    (
        "GetType__C9BonusCard",
        Ok(
            "BonusCard::GetType(void) const",
        ),
    ),
    (
        "__21ICheatEnteredCallback",
        Ok(
            "ICheatEnteredCallback::ICheatEnteredCallback(void)",
        ),
    ),
    (
        "ResetData__11CardGallery",
        Ok(
            "CardGallery::ResetData(void)",
        ),
    ),
    (
        "GetType__C13CollectorCard",
        Ok(
            "CollectorCard::GetType(void) const",
        ),
    ),
    (
        "__tf21ICheatEnteredCallback",
        Ok(
            "ICheatEnteredCallback type_info function",
        ),
    ),
    (
        "CreateInstance__16CheatInputSystem",
        Ok(
            "CheatInputSystem::CreateInstance(void)",
        ),
    ),
    (
        "DestroyInstance__16CheatInputSystem",
        Ok(
            "CheatInputSystem::DestroyInstance(void)",
        ),
    ),
    (
        "GetInstance__16CheatInputSystem",
        Ok(
            "CheatInputSystem::GetInstance(void)",
        ),
    ),
    (
        "__16CheatInputSystem",
        Ok(
            "CheatInputSystem::CheatInputSystem(void)",
        ),
    ),
    (
        "_$_16CheatInputSystem",
        Ok(
            "CheatInputSystem::~CheatInputSystem(void)",
        ),
    ),
    (
        "Init__16CheatInputSystem",
        Ok(
            "CheatInputSystem::Init(void)",
        ),
    ),
    (
        "SetEnabled__16CheatInputSystemb",
        Ok(
            "CheatInputSystem::SetEnabled(bool)",
        ),
    ),
    (
        "SetActivated__16CheatInputSystemib",
        Ok(
            "CheatInputSystem::SetActivated(int, bool)",
        ),
    ),
    (
        "IsActivated__C16CheatInputSystemi",
        Ok(
            "CheatInputSystem::IsActivated(int) const",
        ),
    ),
    (
        "SetCheatEnabled__16CheatInputSystem8eCheatIDb",
        Ok(
            "CheatInputSystem::SetCheatEnabled(eCheatID, bool)",
        ),
    ),
    (
        "IsCheatEnabled__C16CheatInputSystem8eCheatID",
        Ok(
            "CheatInputSystem::IsCheatEnabled(eCheatID) const",
        ),
    ),
    (
        "ReceiveInputs__16CheatInputSystemP11eCheatInputi",
        Ok(
            "CheatInputSystem::ReceiveInputs(eCheatInput *, int)",
        ),
    ),
    (
        "RegisterCallback__16CheatInputSystemP21ICheatEnteredCallback",
        Ok(
            "CheatInputSystem::RegisterCallback(ICheatEnteredCallback *)",
        ),
    ),
    (
        "UnregisterCallback__16CheatInputSystemP21ICheatEnteredCallback",
        Ok(
            "CheatInputSystem::UnregisterCallback(ICheatEnteredCallback *)",
        ),
    ),
    (
        "__17CheatInputHandler",
        Ok(
            "CheatInputHandler::CheatInputHandler(void)",
        ),
    ),
    (
        "_$_17CheatInputHandler",
        Ok(
            "CheatInputHandler::~CheatInputHandler(void)",
        ),
    ),
    (
        "ResetInputSequence__17CheatInputHandler",
        Ok(
            "CheatInputHandler::ResetInputSequence(void)",
        ),
    ),
    (
        "GetInputName__17CheatInputHandler11eCheatInput",
        Ok(
            "CheatInputHandler::GetInputName(eCheatInput)",
        ),
    ),
    (
        "OnButton__17CheatInputHandleriiPC6Button",
        Ok(
            "CheatInputHandler::OnButton(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonDown__17CheatInputHandleriiPC6Button",
        Ok(
            "CheatInputHandler::OnButtonDown(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonUp__17CheatInputHandleriiPC6Button",
        Ok(
            "CheatInputHandler::OnButtonUp(int, int, Button const *)",
        ),
    ),
    (
        "LoadControllerMappings__17CheatInputHandlerUi",
        Ok(
            "CheatInputHandler::LoadControllerMappings(unsigned int)",
        ),
    ),
    (
        "__8CheatsDB",
        Ok(
            "CheatsDB::CheatsDB(void)",
        ),
    ),
    (
        "_$_8CheatsDB",
        Ok(
            "CheatsDB::~CheatsDB(void)",
        ),
    ),
    (
        "GetCheatID__C8CheatsDBUi",
        Ok(
            "CheatsDB::GetCheatID(unsigned int) const",
        ),
    ),
    (
        "GetCheat__C8CheatsDB8eCheatID",
        Ok(
            "CheatsDB::GetCheat(eCheatID) const",
        ),
    ),
    (
        "ConvertSequenceToIndex__8CheatsDBPC11eCheatInputi",
        Ok(
            "CheatsDB::ConvertSequenceToIndex(eCheatInput const *, int)",
        ),
    ),
    (
        "PrintCheatInfo__8CheatsDBPC5CheatPc",
        Ok(
            "CheatsDB::PrintCheatInfo(Cheat const *, char *)",
        ),
    ),
    (
        "__tf8CheatsDB",
        Ok(
            "CheatsDB type_info function",
        ),
    ),
    (
        "__tf16CheatInputSystem",
        Ok(
            "CheatInputSystem type_info function",
        ),
    ),
    (
        "__tf17CheatInputHandler",
        Ok(
            "CheatInputHandler type_info function",
        ),
    ),
    (
        "CreateInstance__7Console",
        Ok(
            "Console::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__7Console",
        Ok(
            "Console::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__7Console",
        Ok(
            "Console::DestroyInstance(void)",
        ),
    ),
    (
        "Initialize__7Console",
        Ok(
            "Console::Initialize(void)",
        ),
    ),
    (
        "__7Console",
        Ok(
            "Console::Console(void)",
        ),
    ),
    (
        "_$_7Console",
        Ok(
            "Console::~Console(void)",
        ),
    ),
    (
        "Printf__7ConsolePce",
        Ok(
            "Console::Printf(char *, ...)",
        ),
    ),
    (
        "FlushLogFile__7Console",
        Ok(
            "Console::FlushLogFile(void)",
        ),
    ),
    (
        "AddFunction__7ConsolePCcPFiPPc_vT1ii",
        Ok(
            "Console::AddFunction(char const *, void (*)(int, char **), char const *, int, int)",
        ),
    ),
    (
        "AddFunc__7ConsolePCcPFiPPc_vPFiPPc_bT1ii",
        Ok(
            "Console::AddFunc(char const *, void (*)(int, char **), bool (*)(int, char **), char const *, int, int)",
        ),
    ),
    (
        "SkipWhiteSpace__7ConsolePCc",
        Ok(
            "Console::SkipWhiteSpace(char const *)",
        ),
    ),
    (
        "FoundComment__7ConsolePPc",
        Ok(
            "Console::FoundComment(char **)",
        ),
    ),
    (
        "FindTokenEnd__7ConsolePCc",
        Ok(
            "Console::FindTokenEnd(char const *)",
        ),
    ),
    (
        "ReadToken__7ConsolePPcPCc",
        Ok(
            "Console::ReadToken(char **, char const *)",
        ),
    ),
    (
        "GetNextToken__7ConsolePPcPc",
        Ok(
            "Console::GetNextToken(char **, char *)",
        ),
    ),
    (
        "Evaluate__7ConsolePCcT1",
        Ok(
            "Console::Evaluate(char const *, char const *)",
        ),
    ),
    (
        "ExecuteScript__7ConsolePCcPQ27Console21ExecuteScriptCallbackPvb",
        Ok(
            "Console::ExecuteScript(char const *, Console::ExecuteScriptCallback *, void *, bool)",
        ),
    ),
    (
        "OnProcessRequestsComplete__7ConsolePv",
        Ok(
            "Console::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "__Q27Console18FunctionTableEntryPCcPFiPPc_vT1ii",
        Ok(
            "Console::FunctionTableEntry::FunctionTableEntry(char const *, void (*)(int, char **), char const *, int, int)",
        ),
    ),
    (
        "__Q27Console18FunctionTableEntryPCcPFiPPc_bT1ii",
        Ok(
            "Console::FunctionTableEntry::FunctionTableEntry(char const *, bool (*)(int, char **), char const *, int, int)",
        ),
    ),
    (
        "OnVKey__20DebugConsoleCallbackibN22",
        Ok(
            "DebugConsoleCallback::OnVKey(int, bool, bool, bool)",
        ),
    ),
    (
        "OnChar__20DebugConsoleCallbacki",
        Ok(
            "DebugConsoleCallback::OnChar(int)",
        ),
    ),
    (
        "OnButtonClick__20DebugConsoleCallbackiiiibN25",
        Ok(
            "DebugConsoleCallback::OnButtonClick(int, int, int, int, bool, bool, bool)",
        ),
    ),
    (
        "OnButtonDown__20DebugConsoleCallbackiiiibN25",
        Ok(
            "DebugConsoleCallback::OnButtonDown(int, int, int, int, bool, bool, bool)",
        ),
    ),
    (
        "OnButtonUp__20DebugConsoleCallbackiiiibN25",
        Ok(
            "DebugConsoleCallback::OnButtonUp(int, int, int, int, bool, bool, bool)",
        ),
    ),
    (
        "OnButtonMove__20DebugConsoleCallbackiiiibN35",
        Ok(
            "DebugConsoleCallback::OnButtonMove(int, int, int, int, bool, bool, bool, bool)",
        ),
    ),
    (
        "smStricmp__FPCcT0",
        Ok(
            "smStricmp(char const *, char const *)",
        ),
    ),
    (
        "__16tNameInsensitive",
        Ok(
            "tNameInsensitive::tNameInsensitive(void)",
        ),
    ),
    (
        "__as__16tNameInsensitivePCc",
        Ok(
            "tNameInsensitive::operator=(char const *)",
        ),
    ),
    (
        "SetText__16tNameInsensitivePCc",
        Ok(
            "tNameInsensitive::SetText(char const *)",
        ),
    ),
    (
        "Upcase__FPc",
        Ok(
            "Upcase(char *)",
        ),
    ),
    (
        "_M_erase__t8_Rb_tree5ZUiZt4pair2ZCUiZiZt10_Select1st1Zt4pair2ZCUiZiZt4less1ZUiZt9allocator1ZiPt13_Rb_tree_node1Zt4pair2ZCUiZi",
        Ok(
            "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::_M_erase(_Rb_tree_node<pair<unsigned int const, int> > *)",
        ),
    ),
    (
        "lower_bound__t8_Rb_tree5ZUiZt4pair2ZCUiZiZt10_Select1st1Zt4pair2ZCUiZiZt4less1ZUiZt9allocator1ZiRCUi",
        Ok(
            "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::lower_bound(unsigned int const &)",
        ),
    ),
    (
        "_M_insert__t8_Rb_tree5ZUiZt4pair2ZCUiZiZt10_Select1st1Zt4pair2ZCUiZiZt4less1ZUiZt9allocator1ZiP18_Rb_tree_node_baseT1RCt4pair2ZCUiZi",
        Ok(
            "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::_M_insert(_Rb_tree_node_base *, _Rb_tree_node_base *, pair<unsigned int const, int> const &)",
        ),
    ),
    (
        "insert_unique__t8_Rb_tree5ZUiZt4pair2ZCUiZiZt10_Select1st1Zt4pair2ZCUiZiZt4less1ZUiZt9allocator1ZiRCt4pair2ZCUiZi",
        Ok(
            "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::insert_unique(pair<unsigned int const, int> const &)",
        ),
    ),
    (
        "insert_unique__t8_Rb_tree5ZUiZt4pair2ZCUiZiZt10_Select1st1Zt4pair2ZCUiZiZt4less1ZUiZt9allocator1ZiGt17_Rb_tree_iterator3Zt4pair2ZCUiZiZRt4pair2ZCUiZiZPt4pair2ZCUiZiRCt4pair2ZCUiZi",
        Ok(
            "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::insert_unique(_Rb_tree_iterator<pair<unsigned int const, int>, pair<unsigned int const, int> &, pair<unsigned int const, int> *>, pair<unsigned int const, int> const &)",
        ),
    ),
    (
        "find__t8_Rb_tree5ZUiZt4pair2ZCUiZiZt10_Select1st1Zt4pair2ZCUiZiZt4less1ZUiZt9allocator1ZiRCUi",
        Ok(
            "_Rb_tree<unsigned int, pair<unsigned int const, int>, _Select1st<pair<unsigned int const, int> >, less<unsigned int>, allocator<int> >::find(unsigned int const &)",
        ),
    ),
    (
        "__tf7Console",
        Ok(
            "Console type_info function",
        ),
    ),
    (
        "__tf20DebugConsoleCallback",
        Ok(
            "DebugConsoleCallback type_info function",
        ),
    ),
    (
        "_$_16tNameInsensitive",
        Ok(
            "tNameInsensitive::~tNameInsensitive(void)",
        ),
    ),
    (
        "_$_Q27Console18FunctionTableEntry",
        Ok(
            "Console::FunctionTableEntry::~FunctionTableEntry(void)",
        ),
    ),
    (
        "_$_t3map4ZUiZiZt4less1ZUiZt9allocator1Zi",
        Ok(
            "map<unsigned int, int, less<unsigned int>, allocator<int> >::~map(void)",
        ),
    ),
    (
        "__tf36IRadDebugConsolePointerInputCallback",
        Ok(
            "IRadDebugConsolePointerInputCallback type_info function",
        ),
    ),
    (
        "__tf37IRadDebugConsoleKeyboardInputCallback",
        Ok(
            "IRadDebugConsoleKeyboardInputCallback type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$gErrFileName",
        Ok(
            "global constructors keyed to gErrFileName",
        ),
    ),
    (
        "_GLOBAL_$D$gErrFileName",
        Ok(
            "global destructors keyed to gErrFileName",
        ),
    ),
    (
        "GetInstance__13BootupContext",
        Ok(
            "BootupContext::GetInstance(void)",
        ),
    ),
    (
        "StartMovies__13BootupContext",
        Ok(
            "BootupContext::StartMovies(void)",
        ),
    ),
    (
        "StartLoadingSound__13BootupContext",
        Ok(
            "BootupContext::StartLoadingSound(void)",
        ),
    ),
    (
        "OnStart__13BootupContext11ContextEnum",
        Ok(
            "BootupContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__13BootupContext11ContextEnum",
        Ok(
            "BootupContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__13BootupContextUi",
        Ok(
            "BootupContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__13BootupContext",
        Ok(
            "BootupContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__13BootupContext",
        Ok(
            "BootupContext::OnResume(void)",
        ),
    ),
    (
        "OnHandleEvent__13BootupContext9EventEnumPv",
        Ok(
            "BootupContext::OnHandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnProcessRequestsComplete__13BootupContextPv",
        Ok(
            "BootupContext::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "OnPresentationEventBegin__13BootupContextP17PresentationEvent",
        Ok(
            "BootupContext::OnPresentationEventBegin(PresentationEvent *)",
        ),
    ),
    (
        "OnPresentationEventLoadComplete__13BootupContextP17PresentationEvent",
        Ok(
            "BootupContext::OnPresentationEventLoadComplete(PresentationEvent *)",
        ),
    ),
    (
        "OnPresentationEventEnd__13BootupContextP17PresentationEvent",
        Ok(
            "BootupContext::OnPresentationEventEnd(PresentationEvent *)",
        ),
    ),
    (
        "__13BootupContext",
        Ok(
            "BootupContext::BootupContext(void)",
        ),
    ),
    (
        "_$_13BootupContext",
        Ok(
            "BootupContext::~BootupContext(void)",
        ),
    ),
    (
        "DestroyInstance__7Context",
        Ok(
            "Context::DestroyInstance(void)",
        ),
    ),
    (
        "Start__7Context11ContextEnum",
        Ok(
            "Context::Start(ContextEnum)",
        ),
    ),
    (
        "Stop__7Context11ContextEnum",
        Ok(
            "Context::Stop(ContextEnum)",
        ),
    ),
    (
        "Update__7ContextUi",
        Ok(
            "Context::Update(unsigned int)",
        ),
    ),
    (
        "HandleEvent__7Context9EventEnumPv",
        Ok(
            "Context::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Suspend__7Context",
        Ok(
            "Context::Suspend(void)",
        ),
    ),
    (
        "Resume__7Context",
        Ok(
            "Context::Resume(void)",
        ),
    ),
    (
        "__7Context",
        Ok(
            "Context::Context(void)",
        ),
    ),
    (
        "_$_7Context",
        Ok(
            "Context::~Context(void)",
        ),
    ),
    (
        "GetInstance__12EntryContext",
        Ok(
            "EntryContext::GetInstance(void)",
        ),
    ),
    (
        "OnStart__12EntryContext11ContextEnum",
        Ok(
            "EntryContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__12EntryContext11ContextEnum",
        Ok(
            "EntryContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__12EntryContextUi",
        Ok(
            "EntryContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__12EntryContext",
        Ok(
            "EntryContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__12EntryContext",
        Ok(
            "EntryContext::OnResume(void)",
        ),
    ),
    (
        "OnHandleEvent__12EntryContext9EventEnumPv",
        Ok(
            "EntryContext::OnHandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__12EntryContext",
        Ok(
            "EntryContext::EntryContext(void)",
        ),
    ),
    (
        "_$_12EntryContext",
        Ok(
            "EntryContext::~EntryContext(void)",
        ),
    ),
    (
        "GetInstance__11ExitContext",
        Ok(
            "ExitContext::GetInstance(void)",
        ),
    ),
    (
        "OnStart__11ExitContext11ContextEnum",
        Ok(
            "ExitContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__11ExitContext11ContextEnum",
        Ok(
            "ExitContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__11ExitContextUi",
        Ok(
            "ExitContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__11ExitContext",
        Ok(
            "ExitContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__11ExitContext",
        Ok(
            "ExitContext::OnResume(void)",
        ),
    ),
    (
        "OnHandleEvent__11ExitContext9EventEnumPv",
        Ok(
            "ExitContext::OnHandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__11ExitContext",
        Ok(
            "ExitContext::ExitContext(void)",
        ),
    ),
    (
        "_$_11ExitContext",
        Ok(
            "ExitContext::~ExitContext(void)",
        ),
    ),
    (
        "GetInstance__15FrontEndContext",
        Ok(
            "FrontEndContext::GetInstance(void)",
        ),
    ),
    (
        "__15FrontEndContext",
        Ok(
            "FrontEndContext::FrontEndContext(void)",
        ),
    ),
    (
        "_$_15FrontEndContext",
        Ok(
            "FrontEndContext::~FrontEndContext(void)",
        ),
    ),
    (
        "OnStart__15FrontEndContext11ContextEnum",
        Ok(
            "FrontEndContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__15FrontEndContext11ContextEnum",
        Ok(
            "FrontEndContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__15FrontEndContextUi",
        Ok(
            "FrontEndContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__15FrontEndContext",
        Ok(
            "FrontEndContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__15FrontEndContext",
        Ok(
            "FrontEndContext::OnResume(void)",
        ),
    ),
    (
        "OnHandleEvent__15FrontEndContext9EventEnumPv",
        Ok(
            "FrontEndContext::OnHandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnProcessRequestsComplete__15FrontEndContextPv",
        Ok(
            "FrontEndContext::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "StartFrontEnd__15FrontEndContextUi",
        Ok(
            "FrontEndContext::StartFrontEnd(unsigned int)",
        ),
    ),
    (
        "__14PlayingContext",
        Ok(
            "PlayingContext::PlayingContext(void)",
        ),
    ),
    (
        "_$_14PlayingContext",
        Ok(
            "PlayingContext::~PlayingContext(void)",
        ),
    ),
    (
        "OnStart__14PlayingContext11ContextEnum",
        Ok(
            "PlayingContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__14PlayingContext11ContextEnum",
        Ok(
            "PlayingContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__14PlayingContextUi",
        Ok(
            "PlayingContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__14PlayingContext",
        Ok(
            "PlayingContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__14PlayingContext",
        Ok(
            "PlayingContext::OnResume(void)",
        ),
    ),
    (
        "OnHandleEvent__14PlayingContext9EventEnumPv",
        Ok(
            "PlayingContext::OnHandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__14LoadingContext",
        Ok(
            "LoadingContext::LoadingContext(void)",
        ),
    ),
    (
        "_$_14LoadingContext",
        Ok(
            "LoadingContext::~LoadingContext(void)",
        ),
    ),
    (
        "OnStart__14LoadingContext11ContextEnum",
        Ok(
            "LoadingContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__14LoadingContext11ContextEnum",
        Ok(
            "LoadingContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__14LoadingContextUi",
        Ok(
            "LoadingContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__14LoadingContext",
        Ok(
            "LoadingContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__14LoadingContext",
        Ok(
            "LoadingContext::OnResume(void)",
        ),
    ),
    (
        "OnHandleEvent__14LoadingContext9EventEnumPv",
        Ok(
            "LoadingContext::OnHandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnProcessRequestsComplete__14LoadingContextPv",
        Ok(
            "LoadingContext::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "GetInstance__12PauseContext",
        Ok(
            "PauseContext::GetInstance(void)",
        ),
    ),
    (
        "__12PauseContext",
        Ok(
            "PauseContext::PauseContext(void)",
        ),
    ),
    (
        "_$_12PauseContext",
        Ok(
            "PauseContext::~PauseContext(void)",
        ),
    ),
    (
        "OnStart__12PauseContext11ContextEnum",
        Ok(
            "PauseContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__12PauseContext11ContextEnum",
        Ok(
            "PauseContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__12PauseContextUi",
        Ok(
            "PauseContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__12PauseContext",
        Ok(
            "PauseContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__12PauseContext",
        Ok(
            "PauseContext::OnResume(void)",
        ),
    ),
    (
        "OnHandleEvent__12PauseContext9EventEnumPv",
        Ok(
            "PauseContext::OnHandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__tf7Context",
        Ok(
            "Context type_info function",
        ),
    ),
    (
        "__tf13BootupContext",
        Ok(
            "BootupContext type_info function",
        ),
    ),
    (
        "__tf12EntryContext",
        Ok(
            "EntryContext type_info function",
        ),
    ),
    (
        "__tf12PauseContext",
        Ok(
            "PauseContext type_info function",
        ),
    ),
    (
        "__tf11ExitContext",
        Ok(
            "ExitContext type_info function",
        ),
    ),
    (
        "__tf15FrontEndContext",
        Ok(
            "FrontEndContext type_info function",
        ),
    ),
    (
        "__tf14PlayingContext",
        Ok(
            "PlayingContext type_info function",
        ),
    ),
    (
        "__tf14LoadingContext",
        Ok(
            "LoadingContext type_info function",
        ),
    ),
    (
        "__Q217PresentationEvent25PresentationEventCallBack",
        Ok(
            "PresentationEvent::PresentationEventCallBack::PresentationEventCallBack(void)",
        ),
    ),
    (
        "__tfQ217PresentationEvent25PresentationEventCallBack",
        Ok(
            "PresentationEvent::PresentationEventCallBack type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$_13BootupContext$spInstance",
        Ok(
            "global constructors keyed to BootupContext::spInstance",
        ),
    ),
    (
        "GetInstance__22LoadingGameplayContext",
        Ok(
            "LoadingGameplayContext::GetInstance(void)",
        ),
    ),
    (
        "__22LoadingGameplayContext",
        Ok(
            "LoadingGameplayContext::LoadingGameplayContext(void)",
        ),
    ),
    (
        "_$_22LoadingGameplayContext",
        Ok(
            "LoadingGameplayContext::~LoadingGameplayContext(void)",
        ),
    ),
    (
        "OnStart__22LoadingGameplayContext11ContextEnum",
        Ok(
            "LoadingGameplayContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__22LoadingGameplayContext11ContextEnum",
        Ok(
            "LoadingGameplayContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__22LoadingGameplayContextUi",
        Ok(
            "LoadingGameplayContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__22LoadingGameplayContext",
        Ok(
            "LoadingGameplayContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__22LoadingGameplayContext",
        Ok(
            "LoadingGameplayContext::OnResume(void)",
        ),
    ),
    (
        "PrepareNewHeaps__22LoadingGameplayContext",
        Ok(
            "LoadingGameplayContext::PrepareNewHeaps(void)",
        ),
    ),
    (
        "OnProcessRequestsComplete__22LoadingGameplayContextPv",
        Ok(
            "LoadingGameplayContext::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "GetInstance__15GameplayContext",
        Ok(
            "GameplayContext::GetInstance(void)",
        ),
    ),
    (
        "__15GameplayContext",
        Ok(
            "GameplayContext::GameplayContext(void)",
        ),
    ),
    (
        "_$_15GameplayContext",
        Ok(
            "GameplayContext::~GameplayContext(void)",
        ),
    ),
    (
        "OnStart__15GameplayContext11ContextEnum",
        Ok(
            "GameplayContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__15GameplayContext11ContextEnum",
        Ok(
            "GameplayContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__15GameplayContextUi",
        Ok(
            "GameplayContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__15GameplayContext",
        Ok(
            "GameplayContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__15GameplayContext",
        Ok(
            "GameplayContext::OnResume(void)",
        ),
    ),
    (
        "PauseAllButPresentation__15GameplayContextb",
        Ok(
            "GameplayContext::PauseAllButPresentation(bool)",
        ),
    ),
    (
        "__tf22LoadingGameplayContext",
        Ok(
            "LoadingGameplayContext type_info function",
        ),
    ),
    (
        "__tf9ComedyCam",
        Ok(
            "ComedyCam type_info function",
        ),
    ),
    (
        "__tf15GameplayContext",
        Ok(
            "GameplayContext type_info function",
        ),
    ),
    (
        "_$_9ComedyCam",
        Ok(
            "ComedyCam::~ComedyCam(void)",
        ),
    ),
    (
        "GetName__C9ComedyCam",
        Ok(
            "ComedyCam::GetName(void) const",
        ),
    ),
    (
        "GetType__9ComedyCam",
        Ok(
            "ComedyCam::GetType(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z11tLightGroup",
        Ok(
            "radLoadInventory::SafeCast<tLightGroup>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z11tLightGroup",
        Ok(
            "radLoadInventory::SafeCast<tLightGroup> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z11tLightGroupP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tLightGroup>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$_22LoadingGameplayContext$spInstance",
        Ok(
            "global constructors keyed to LoadingGameplayContext::spInstance",
        ),
    ),
    (
        "GetInstance__18LoadingDemoContext",
        Ok(
            "LoadingDemoContext::GetInstance(void)",
        ),
    ),
    (
        "__18LoadingDemoContext",
        Ok(
            "LoadingDemoContext::LoadingDemoContext(void)",
        ),
    ),
    (
        "_$_18LoadingDemoContext",
        Ok(
            "LoadingDemoContext::~LoadingDemoContext(void)",
        ),
    ),
    (
        "OnStart__18LoadingDemoContext11ContextEnum",
        Ok(
            "LoadingDemoContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__18LoadingDemoContext11ContextEnum",
        Ok(
            "LoadingDemoContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__18LoadingDemoContextUi",
        Ok(
            "LoadingDemoContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__18LoadingDemoContext",
        Ok(
            "LoadingDemoContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__18LoadingDemoContext",
        Ok(
            "LoadingDemoContext::OnResume(void)",
        ),
    ),
    (
        "PrepareNewHeaps__18LoadingDemoContext",
        Ok(
            "LoadingDemoContext::PrepareNewHeaps(void)",
        ),
    ),
    (
        "OnProcessRequestsComplete__18LoadingDemoContextPv",
        Ok(
            "LoadingDemoContext::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "GetInstance__11DemoContext",
        Ok(
            "DemoContext::GetInstance(void)",
        ),
    ),
    (
        "__11DemoContext",
        Ok(
            "DemoContext::DemoContext(void)",
        ),
    ),
    (
        "_$_11DemoContext",
        Ok(
            "DemoContext::~DemoContext(void)",
        ),
    ),
    (
        "OnStart__11DemoContext11ContextEnum",
        Ok(
            "DemoContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__11DemoContext11ContextEnum",
        Ok(
            "DemoContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__11DemoContextUi",
        Ok(
            "DemoContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__11DemoContext",
        Ok(
            "DemoContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__11DemoContext",
        Ok(
            "DemoContext::OnResume(void)",
        ),
    ),
    (
        "__tf18LoadingDemoContext",
        Ok(
            "LoadingDemoContext type_info function",
        ),
    ),
    (
        "__tf11DemoContext",
        Ok(
            "DemoContext type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$_18LoadingDemoContext$spInstance",
        Ok(
            "global constructors keyed to LoadingDemoContext::spInstance",
        ),
    ),
    (
        "CreateInstance__15GameDataManager",
        Ok(
            "GameDataManager::CreateInstance(void)",
        ),
    ),
    (
        "DestroyInstance__15GameDataManager",
        Ok(
            "GameDataManager::DestroyInstance(void)",
        ),
    ),
    (
        "GetInstance__15GameDataManager",
        Ok(
            "GameDataManager::GetInstance(void)",
        ),
    ),
    (
        "__15GameDataManager",
        Ok(
            "GameDataManager::GameDataManager(void)",
        ),
    ),
    (
        "_$_15GameDataManager",
        Ok(
            "GameDataManager::~GameDataManager(void)",
        ),
    ),
    (
        "Init__15GameDataManager",
        Ok(
            "GameDataManager::Init(void)",
        ),
    ),
    (
        "Update__15GameDataManagerUi",
        Ok(
            "GameDataManager::Update(unsigned int)",
        ),
    ),
    (
        "RegisterGameData__15GameDataManagerP15GameDataHandlerUiPCc",
        Ok(
            "GameDataManager::RegisterGameData(GameDataHandler *, unsigned int, char const *)",
        ),
    ),
    (
        "LoadGame__15GameDataManagerUiP20GameDataLoadCallbackPCc",
        Ok(
            "GameDataManager::LoadGame(unsigned int, GameDataLoadCallback *, char const *)",
        ),
    ),
    (
        "DeleteGame__15GameDataManagerPCc",
        Ok(
            "GameDataManager::DeleteGame(char const *)",
        ),
    ),
    (
        "SaveGame__15GameDataManagerUiP20GameDataSaveCallback",
        Ok(
            "GameDataManager::SaveGame(unsigned int, GameDataSaveCallback *)",
        ),
    ),
    (
        "ResetGame__15GameDataManager",
        Ok(
            "GameDataManager::ResetGame(void)",
        ),
    ),
    (
        "EnableMinimumLoadSaveTime__15GameDataManagerb",
        Ok(
            "GameDataManager::EnableMinimumLoadSaveTime(bool)",
        ),
    ),
    (
        "GetSaveGameInfo__15GameDataManagerP9IRadDriveUiP12SaveGameInfoPb",
        Ok(
            "GameDataManager::GetSaveGameInfo(IRadDrive *, unsigned int, SaveGameInfo *, bool *)",
        ),
    ),
    (
        "DoesSaveGameExist__15GameDataManagerP9IRadDrivebT2",
        Ok(
            "GameDataManager::DoesSaveGameExist(IRadDrive *, bool, bool)",
        ),
    ),
    (
        "FindMostRecentSaveGame__15GameDataManagerP9IRadDriveRUiR7radDate",
        Ok(
            "GameDataManager::FindMostRecentSaveGame(IRadDrive *, unsigned int &, radDate &)",
        ),
    ),
    (
        "FormatSavedGameFilename__15GameDataManagerPcUiUi",
        Ok(
            "GameDataManager::FormatSavedGameFilename(char *, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnFileOperationsComplete__15GameDataManagerPv",
        Ok(
            "GameDataManager::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "OnDriveError__15GameDataManager12radFileErrorPCcPv",
        Ok(
            "GameDataManager::OnDriveError(radFileError, char const *, void *)",
        ),
    ),
    (
        "LoadAllData__15GameDataManager",
        Ok(
            "GameDataManager::LoadAllData(void)",
        ),
    ),
    (
        "SaveAllData__15GameDataManager",
        Ok(
            "GameDataManager::SaveAllData(void)",
        ),
    ),
    (
        "__12SaveGameInfo",
        Ok(
            "SaveGameInfo::SaveGameInfo(void)",
        ),
    ),
    (
        "_$_12SaveGameInfo",
        Ok(
            "SaveGameInfo::~SaveGameInfo(void)",
        ),
    ),
    (
        "LoadData__12SaveGameInfoPCUcUi",
        Ok(
            "SaveGameInfo::LoadData(unsigned char const *, unsigned int)",
        ),
    ),
    (
        "SaveData__12SaveGameInfoPUcUi",
        Ok(
            "SaveGameInfo::SaveData(unsigned char *, unsigned int)",
        ),
    ),
    (
        "ResetData__12SaveGameInfo",
        Ok(
            "SaveGameInfo::ResetData(void)",
        ),
    ),
    (
        "CheckData__12SaveGameInfo",
        Ok(
            "SaveGameInfo::CheckData(void)",
        ),
    ),
    (
        "CopyUnicodeToCharString__FPcPUsi",
        Ok(
            "CopyUnicodeToCharString(char *, unsigned short *, int)",
        ),
    ),
    (
        "FormatLevelMissionInfo__C12SaveGameInfoPc",
        Ok(
            "SaveGameInfo::FormatLevelMissionInfo(char *) const",
        ),
    ),
    (
        "FormatDisplay__C12SaveGameInfoPcUi",
        Ok(
            "SaveGameInfo::FormatDisplay(char *, unsigned int) const",
        ),
    ),
    (
        "CompareTimeStamps__12SaveGameInfoRC7radDateT1",
        Ok(
            "SaveGameInfo::CompareTimeStamps(radDate const &, radDate const &)",
        ),
    ),
    (
        "__22PersistentWorldManager",
        Ok(
            "PersistentWorldManager::PersistentWorldManager(void)",
        ),
    ),
    (
        "_$_22PersistentWorldManager",
        Ok(
            "PersistentWorldManager::~PersistentWorldManager(void)",
        ),
    ),
    (
        "CreateInstance__22PersistentWorldManager",
        Ok(
            "PersistentWorldManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__22PersistentWorldManager",
        Ok(
            "PersistentWorldManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__22PersistentWorldManager",
        Ok(
            "PersistentWorldManager::DestroyInstance(void)",
        ),
    ),
    (
        "OnSectorLoad__22PersistentWorldManagerG13tUidUnaligned",
        Ok(
            "PersistentWorldManager::OnSectorLoad(tUidUnaligned)",
        ),
    ),
    (
        "OnLevelLoad__22PersistentWorldManageri",
        Ok(
            "PersistentWorldManager::OnLevelLoad(int)",
        ),
    ),
    (
        "GetPersistentObjectID__22PersistentWorldManagerG13tUidUnalignedT1",
        Ok(
            "PersistentWorldManager::GetPersistentObjectID(tUidUnaligned, tUidUnaligned)",
        ),
    ),
    (
        "GetPersistentObjectID__22PersistentWorldManager",
        Ok(
            "PersistentWorldManager::GetPersistentObjectID(void)",
        ),
    ),
    (
        "OnObjectBreak__22PersistentWorldManagers",
        Ok(
            "PersistentWorldManager::OnObjectBreak(short)",
        ),
    ),
    (
        "CheckObject__C22PersistentWorldManagerUcUc",
        Ok(
            "PersistentWorldManager::CheckObject(unsigned char, unsigned char) const",
        ),
    ),
    (
        "__tf15GameDataManager",
        Ok(
            "GameDataManager type_info function",
        ),
    ),
    (
        "__tf12SaveGameInfo",
        Ok(
            "SaveGameInfo type_info function",
        ),
    ),
    (
        "__26IRadFileCompletionCallback",
        Ok(
            "IRadFileCompletionCallback::IRadFileCompletionCallback(void)",
        ),
    ),
    (
        "__22IRadDriveErrorCallback",
        Ok(
            "IRadDriveErrorCallback::IRadDriveErrorCallback(void)",
        ),
    ),
    (
        "AddRef__15GameDataManager",
        Ok(
            "GameDataManager::AddRef(void)",
        ),
    ),
    (
        "Release__15GameDataManager",
        Ok(
            "GameDataManager::Release(void)",
        ),
    ),
    (
        "__tf26IRadFileCompletionCallback",
        Ok(
            "IRadFileCompletionCallback type_info function",
        ),
    ),
    (
        "__tf22IRadDriveErrorCallback",
        Ok(
            "IRadDriveErrorCallback type_info function",
        ),
    ),
    (
        "__9IRefCount",
        Ok(
            "IRefCount::IRefCount(void)",
        ),
    ),
    (
        "CreateInstance__17MemoryCardManager",
        Ok(
            "MemoryCardManager::CreateInstance(void)",
        ),
    ),
    (
        "DestroyInstance__17MemoryCardManager",
        Ok(
            "MemoryCardManager::DestroyInstance(void)",
        ),
    ),
    (
        "GetInstance__17MemoryCardManager",
        Ok(
            "MemoryCardManager::GetInstance(void)",
        ),
    ),
    (
        "__17MemoryCardManager",
        Ok(
            "MemoryCardManager::MemoryCardManager(void)",
        ),
    ),
    (
        "_$_17MemoryCardManager",
        Ok(
            "MemoryCardManager::~MemoryCardManager(void)",
        ),
    ),
    (
        "Init__17MemoryCardManagerP22IRadDriveErrorCallback",
        Ok(
            "MemoryCardManager::Init(IRadDriveErrorCallback *)",
        ),
    ),
    (
        "Update__17MemoryCardManagerUi",
        Ok(
            "MemoryCardManager::Update(unsigned int)",
        ),
    ),
    (
        "StartMemoryCardCheck__17MemoryCardManagerP24IMemoryCardCheckCallback",
        Ok(
            "MemoryCardManager::StartMemoryCardCheck(IMemoryCardCheckCallback *)",
        ),
    ),
    (
        "UpdateMemoryCardCheck__17MemoryCardManagerUi",
        Ok(
            "MemoryCardManager::UpdateMemoryCardCheck(unsigned int)",
        ),
    ),
    (
        "LoadMemcardInfo__17MemoryCardManagerP27IMemoryCardInfoLoadCallback",
        Ok(
            "MemoryCardManager::LoadMemcardInfo(IMemoryCardInfoLoadCallback *)",
        ),
    ),
    (
        "UnloadMemcardInfo__17MemoryCardManager",
        Ok(
            "MemoryCardManager::UnloadMemcardInfo(void)",
        ),
    ),
    (
        "IsMemcardInfoLoaded__C17MemoryCardManager",
        Ok(
            "MemoryCardManager::IsMemcardInfoLoaded(void) const",
        ),
    ),
    (
        "SetMemcardIconData__17MemoryCardManagerPcUi",
        Ok(
            "MemoryCardManager::SetMemcardIconData(char *, unsigned int)",
        ),
    ),
    (
        "OnProcessRequestsComplete__17MemoryCardManagerPv",
        Ok(
            "MemoryCardManager::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "SetCurrentDrive__17MemoryCardManagerUi",
        Ok(
            "MemoryCardManager::SetCurrentDrive(unsigned int)",
        ),
    ),
    (
        "ClearCurrentDrive__17MemoryCardManager",
        Ok(
            "MemoryCardManager::ClearCurrentDrive(void)",
        ),
    ),
    (
        "GetCurrentDriveIndex__C17MemoryCardManager",
        Ok(
            "MemoryCardManager::GetCurrentDriveIndex(void) const",
        ),
    ),
    (
        "IsCurrentDrivePresent__17MemoryCardManagerUi",
        Ok(
            "MemoryCardManager::IsCurrentDrivePresent(unsigned int)",
        ),
    ),
    (
        "IsCurrentDriveReady__17MemoryCardManagerbPbPQ39IRadDrive9MediaInfo10MediaState",
        Ok(
            "MemoryCardManager::IsCurrentDriveReady(bool, bool *, IRadDrive::MediaInfo::MediaState *)",
        ),
    ),
    (
        "GetAvailableDrives__17MemoryCardManagerPP9IRadDrivePPQ29IRadDrive9MediaInfoT1",
        Ok(
            "MemoryCardManager::GetAvailableDrives(IRadDrive **, IRadDrive::MediaInfo **, IRadDrive **)",
        ),
    ),
    (
        "EnoughFreeSpace__C17MemoryCardManagerUi",
        Ok(
            "MemoryCardManager::EnoughFreeSpace(unsigned int) const",
        ),
    ),
    (
        "FormatDrive__17MemoryCardManagerUiP25IMemoryCardFormatCallback",
        Ok(
            "MemoryCardManager::FormatDrive(unsigned int, IMemoryCardFormatCallback *)",
        ),
    ),
    (
        "UpdateMemcardInfo__17MemoryCardManagerPCci",
        Ok(
            "MemoryCardManager::UpdateMemcardInfo(char const *, int)",
        ),
    ),
    (
        "OnDriveOperationsComplete__17MemoryCardManagerPv",
        Ok(
            "MemoryCardManager::OnDriveOperationsComplete(void *)",
        ),
    ),
    (
        "OnDriveError__17MemoryCardManager12radFileErrorPCcPv",
        Ok(
            "MemoryCardManager::OnDriveError(radFileError, char const *, void *)",
        ),
    ),
    (
        "GetDriveIndex__C17MemoryCardManagerP9IRadDrive",
        Ok(
            "MemoryCardManager::GetDriveIndex(IRadDrive *) const",
        ),
    ),
    (
        "DetermineSavedGameCreationSize__17MemoryCardManagerUi",
        Ok(
            "MemoryCardManager::DetermineSavedGameCreationSize(unsigned int)",
        ),
    ),
    (
        "OnMemoryCardCheckCompleted__17MemoryCardManager",
        Ok(
            "MemoryCardManager::OnMemoryCardCheckCompleted(void)",
        ),
    ),
    (
        "LoadMemcardInfo_PS2__17MemoryCardManager19GameMemoryAllocator",
        Ok(
            "MemoryCardManager::LoadMemcardInfo_PS2(GameMemoryAllocator)",
        ),
    ),
    (
        "UnloadMemcardInfo_PS2__17MemoryCardManager",
        Ok(
            "MemoryCardManager::UnloadMemcardInfo_PS2(void)",
        ),
    ),
    (
        "__tf17MemoryCardManager",
        Ok(
            "MemoryCardManager type_info function",
        ),
    ),
    (
        "__27IRadDriveCompletionCallback",
        Ok(
            "IRadDriveCompletionCallback::IRadDriveCompletionCallback(void)",
        ),
    ),
    (
        "AddRef__17MemoryCardManager",
        Ok(
            "MemoryCardManager::AddRef(void)",
        ),
    ),
    (
        "Release__17MemoryCardManager",
        Ok(
            "MemoryCardManager::Release(void)",
        ),
    ),
    (
        "__tf27IRadDriveCompletionCallback",
        Ok(
            "IRadDriveCompletionCallback type_info function",
        ),
    ),
    (
        "__13EventListener",
        Ok(
            "EventListener::EventListener(void)",
        ),
    ),
    (
        "_$_13EventListener",
        Ok(
            "EventListener::~EventListener(void)",
        ),
    ),
    (
        "CreateInstance__12EventManager",
        Ok(
            "EventManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__12EventManager",
        Ok(
            "EventManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__12EventManager",
        Ok(
            "EventManager::DestroyInstance(void)",
        ),
    ),
    (
        "AddListener__12EventManagerP13EventListener9EventEnum",
        Ok(
            "EventManager::AddListener(EventListener *, EventEnum)",
        ),
    ),
    (
        "RemoveListener__12EventManagerP13EventListener9EventEnum",
        Ok(
            "EventManager::RemoveListener(EventListener *, EventEnum)",
        ),
    ),
    (
        "RemoveAll__12EventManagerP13EventListener",
        Ok(
            "EventManager::RemoveAll(EventListener *)",
        ),
    ),
    (
        "TriggerEvent__C12EventManager9EventEnumPv",
        Ok(
            "EventManager::TriggerEvent(EventEnum, void *) const",
        ),
    ),
    (
        "__12EventManager",
        Ok(
            "EventManager::EventManager(void)",
        ),
    ),
    (
        "_$_12EventManager",
        Ok(
            "EventManager::~EventManager(void)",
        ),
    ),
    (
        "find__H2ZPP13EventListenerZP13EventListener_X01X01RCX11G26random_access_iterator_tag_X01",
        Ok(
            "EventListener ** find<EventListener **, EventListener *>(EventListener **, EventListener **, EventListener * const &, random_access_iterator_tag)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2ZP13EventListenerZt7s2alloc1ZP13EventListenerPP13EventListenerRCP13EventListener",
        Ok(
            "vector<EventListener *, s2alloc<EventListener *> >::_M_insert_aux(EventListener **, EventListener *const &)",
        ),
    ),
    (
        "__tf13EventListener",
        Ok(
            "EventListener type_info function",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3ZP13EventListenerZt7s2alloc1ZP13EventListenerb0",
        Ok(
            "_Vector_alloc_base<EventListener *, s2alloc<EventListener *>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "CreateInstance__8GameFlow",
        Ok(
            "GameFlow::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__8GameFlow",
        Ok(
            "GameFlow::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__8GameFlow",
        Ok(
            "GameFlow::DestroyInstance(void)",
        ),
    ),
    (
        "PushContext__8GameFlow11ContextEnum",
        Ok(
            "GameFlow::PushContext(ContextEnum)",
        ),
    ),
    (
        "SetContext__8GameFlow11ContextEnum",
        Ok(
            "GameFlow::SetContext(ContextEnum)",
        ),
    ),
    (
        "OnTimerDone__8GameFlowUiPv",
        Ok(
            "GameFlow::OnTimerDone(unsigned int, void *)",
        ),
    ),
    (
        "__8GameFlow",
        Ok(
            "GameFlow::GameFlow(void)",
        ),
    ),
    (
        "_$_8GameFlow",
        Ok(
            "GameFlow::~GameFlow(void)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZP11ContextEnumZP11ContextEnum_X01X01X11G12__false_type_X11",
        Ok(
            "ContextEnum * __uninitialized_copy_aux<ContextEnum *, ContextEnum *>(ContextEnum *, ContextEnum *, ContextEnum *, __false_type)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2Z11ContextEnumZt7s2alloc1Z11ContextEnumP11ContextEnumRC11ContextEnum",
        Ok(
            "vector<ContextEnum, s2alloc<ContextEnum> >::_M_insert_aux(ContextEnum *, ContextEnum const &)",
        ),
    ),
    (
        "__tf8GameFlow",
        Ok(
            "GameFlow type_info function",
        ),
    ),
    (
        "__17IRadTimerCallback",
        Ok(
            "IRadTimerCallback::IRadTimerCallback(void)",
        ),
    ),
    (
        "_$_t5stack2Z11ContextEnumZt6vector2Z11ContextEnumZt7s2alloc1Z11ContextEnum",
        Ok(
            "stack<ContextEnum, vector<ContextEnum, s2alloc<ContextEnum> > >::~stack(void)",
        ),
    ),
    (
        "__tf17IRadTimerCallback",
        Ok(
            "IRadTimerCallback type_info function",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3Z11ContextEnumZt7s2alloc1Z11ContextEnumb0",
        Ok(
            "_Vector_alloc_base<ContextEnum, s2alloc<ContextEnum>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "__6Button",
        Ok(
            "Button::Button(void)",
        ),
    ),
    (
        "_$_6Button",
        Ok(
            "Button::~Button(void)",
        ),
    ),
    (
        "CreateInstance__12InputManager",
        Ok(
            "InputManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__12InputManager",
        Ok(
            "InputManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__12InputManager",
        Ok(
            "InputManager::DestroyInstance(void)",
        ),
    ),
    (
        "Init__12InputManager",
        Ok(
            "InputManager::Init(void)",
        ),
    ),
    (
        "Update__12InputManagerUi",
        Ok(
            "InputManager::Update(unsigned int)",
        ),
    ),
    (
        "OnControllerConnectionStatusChange__12InputManagerP14IRadController",
        Ok(
            "InputManager::OnControllerConnectionStatusChange(IRadController *)",
        ),
    ),
    (
        "IsControllerInPort__C12InputManageri",
        Ok(
            "InputManager::IsControllerInPort(int) const",
        ),
    ),
    (
        "ToggleRumble__12InputManagerb",
        Ok(
            "InputManager::ToggleRumble(bool)",
        ),
    ),
    (
        "SetRumbleEnabled__12InputManagerb",
        Ok(
            "InputManager::SetRumbleEnabled(bool)",
        ),
    ),
    (
        "SetRumbleForDevice__12InputManagerib",
        Ok(
            "InputManager::SetRumbleForDevice(int, bool)",
        ),
    ),
    (
        "TriggerRumblePulse__12InputManageri",
        Ok(
            "InputManager::TriggerRumblePulse(int)",
        ),
    ),
    (
        "GetValue__C12InputManagerUiUi",
        Ok(
            "InputManager::GetValue(unsigned int, unsigned int) const",
        ),
    ),
    (
        "GetController__12InputManagerUi",
        Ok(
            "InputManager::GetController(unsigned int)",
        ),
    ),
    (
        "RegisterMappable__12InputManagerUiP8Mappable",
        Ok(
            "InputManager::RegisterMappable(unsigned int, Mappable *)",
        ),
    ),
    (
        "UnregisterMappable__12InputManagerUii",
        Ok(
            "InputManager::UnregisterMappable(unsigned int, int)",
        ),
    ),
    (
        "UnregisterMappable__12InputManagerUiP8Mappable",
        Ok(
            "InputManager::UnregisterMappable(unsigned int, Mappable *)",
        ),
    ),
    (
        "UnregisterMappable__12InputManagerP8Mappable",
        Ok(
            "InputManager::UnregisterMappable(Mappable *)",
        ),
    ),
    (
        "LoadData__12InputManagerPCUcUi",
        Ok(
            "InputManager::LoadData(unsigned char const *, unsigned int)",
        ),
    ),
    (
        "SaveData__12InputManagerPUcUi",
        Ok(
            "InputManager::SaveData(unsigned char *, unsigned int)",
        ),
    ),
    (
        "ResetData__12InputManager",
        Ok(
            "InputManager::ResetData(void)",
        ),
    ),
    (
        "__12InputManager",
        Ok(
            "InputManager::InputManager(void)",
        ),
    ),
    (
        "_$_12InputManager",
        Ok(
            "InputManager::~InputManager(void)",
        ),
    ),
    (
        "EnumerateControllers__12InputManager",
        Ok(
            "InputManager::EnumerateControllers(void)",
        ),
    ),
    (
        "ReleaseAllControllers__12InputManager",
        Ok(
            "InputManager::ReleaseAllControllers(void)",
        ),
    ),
    (
        "SetGameState__12InputManagerQ25Input11ActiveState",
        Ok(
            "InputManager::SetGameState(Input::ActiveState)",
        ),
    ),
    (
        "GetGameState__C12InputManager",
        Ok(
            "InputManager::GetGameState(void) const",
        ),
    ),
    (
        "RegisterControllerID__12InputManagerii",
        Ok(
            "InputManager::RegisterControllerID(int, int)",
        ),
    ),
    (
        "UnregisterControllerID__12InputManageri",
        Ok(
            "InputManager::UnregisterControllerID(int)",
        ),
    ),
    (
        "UnregisterAllControllerID__12InputManager",
        Ok(
            "InputManager::UnregisterAllControllerID(void)",
        ),
    ),
    (
        "__8MappableUi",
        Ok(
            "Mappable::Mappable(unsigned int)",
        ),
    ),
    (
        "_$_8Mappable",
        Ok(
            "Mappable::~Mappable(void)",
        ),
    ),
    (
        "DispatchOnButton__8MappableiiPC6Button",
        Ok(
            "Mappable::DispatchOnButton(int, int, Button const *)",
        ),
    ),
    (
        "InitButtons__8MappableiPC6Button",
        Ok(
            "Mappable::InitButtons(int, Button const *)",
        ),
    ),
    (
        "OnControllerDisconnect__8Mappablei",
        Ok(
            "Mappable::OnControllerDisconnect(int)",
        ),
    ),
    (
        "OnControllerConnect__8Mappablei",
        Ok(
            "Mappable::OnControllerConnect(int)",
        ),
    ),
    (
        "UpdateButtonState__8MappableiiPC6Button",
        Ok(
            "Mappable::UpdateButtonState(int, int, Button const *)",
        ),
    ),
    (
        "GetValue__C8MappableUi",
        Ok(
            "Mappable::GetValue(unsigned int) const",
        ),
    ),
    (
        "GetButton__8MappableUi",
        Ok(
            "Mappable::GetButton(unsigned int)",
        ),
    ),
    (
        "GetMapper__8MappableUi",
        Ok(
            "Mappable::GetMapper(unsigned int)",
        ),
    ),
    (
        "GetActiveMapper__8Mappable",
        Ok(
            "Mappable::GetActiveMapper(void)",
        ),
    ),
    (
        "SetGameState__8MappableUi",
        Ok(
            "Mappable::SetGameState(unsigned int)",
        ),
    ),
    (
        "IsActive__C8Mappable",
        Ok(
            "Mappable::IsActive(void) const",
        ),
    ),
    (
        "IsButtonDown__8MappableUi",
        Ok(
            "Mappable::IsButtonDown(unsigned int)",
        ),
    ),
    (
        "Map__8MappablePCciUiUi",
        Ok(
            "Mappable::Map(char const *, int, unsigned int, unsigned int)",
        ),
    ),
    (
        "ClearMap__8MappableUi",
        Ok(
            "Mappable::ClearMap(unsigned int)",
        ),
    ),
    (
        "Reset__8Mappable",
        Ok(
            "Mappable::Reset(void)",
        ),
    ),
    (
        "__6Mapper",
        Ok(
            "Mapper::Mapper(void)",
        ),
    ),
    (
        "SetAssociation__6Mapperii",
        Ok(
            "Mapper::SetAssociation(int, int)",
        ),
    ),
    (
        "GetLogicalIndex__C6Mapperi",
        Ok(
            "Mapper::GetLogicalIndex(int) const",
        ),
    ),
    (
        "ClearAssociations__6Mapper",
        Ok(
            "Mapper::ClearAssociations(void)",
        ),
    ),
    (
        "__14UserController",
        Ok(
            "UserController::UserController(void)",
        ),
    ),
    (
        "NotifyConnect__14UserController",
        Ok(
            "UserController::NotifyConnect(void)",
        ),
    ),
    (
        "NotifyDisconnect__14UserController",
        Ok(
            "UserController::NotifyDisconnect(void)",
        ),
    ),
    (
        "Create__14UserControlleri",
        Ok(
            "UserController::Create(int)",
        ),
    ),
    (
        "SetGameState__14UserControllerUi",
        Ok(
            "UserController::SetGameState(unsigned int)",
        ),
    ),
    (
        "OnControllerInputPointChange__14UserControllerUif",
        Ok(
            "UserController::OnControllerInputPointChange(unsigned int, float)",
        ),
    ),
    (
        "Initialize__14UserControllerP14IRadController",
        Ok(
            "UserController::Initialize(IRadController *)",
        ),
    ),
    (
        "ReleaseRadController__14UserController",
        Ok(
            "UserController::ReleaseRadController(void)",
        ),
    ),
    (
        "SetRumble__14UserControllerbT1",
        Ok(
            "UserController::SetRumble(bool, bool)",
        ),
    ),
    (
        "IsRumbleOn__C14UserController",
        Ok(
            "UserController::IsRumbleOn(void) const",
        ),
    ),
    (
        "PulseRumble__14UserController",
        Ok(
            "UserController::PulseRumble(void)",
        ),
    ),
    (
        "ApplyEffect__14UserControllerQ212RumbleEffect6EffectUi",
        Ok(
            "UserController::ApplyEffect(RumbleEffect::Effect, unsigned int)",
        ),
    ),
    (
        "ApplyDynaEffect__14UserControllerQ212RumbleEffect10DynaEffectUif",
        Ok(
            "UserController::ApplyDynaEffect(RumbleEffect::DynaEffect, unsigned int, float)",
        ),
    ),
    (
        "Update__14UserControllerUi",
        Ok(
            "UserController::Update(unsigned int)",
        ),
    ),
    (
        "GetInputValue__C14UserControllerUi",
        Ok(
            "UserController::GetInputValue(unsigned int) const",
        ),
    ),
    (
        "_$_14UserController",
        Ok(
            "UserController::~UserController(void)",
        ),
    ),
    (
        "RegisterMappable__14UserControllerP8Mappable",
        Ok(
            "UserController::RegisterMappable(Mappable *)",
        ),
    ),
    (
        "UnregisterMappable__14UserControlleri",
        Ok(
            "UserController::UnregisterMappable(int)",
        ),
    ),
    (
        "UnregisterMappable__14UserControllerP8Mappable",
        Ok(
            "UserController::UnregisterMappable(Mappable *)",
        ),
    ),
    (
        "LoadControllerMappings__14UserController",
        Ok(
            "UserController::LoadControllerMappings(void)",
        ),
    ),
    (
        "GetIdByName__C14UserControllerPCc",
        Ok(
            "UserController::GetIdByName(char const *) const",
        ),
    ),
    (
        "__12RumbleEffect",
        Ok(
            "RumbleEffect::RumbleEffect(void)",
        ),
    ),
    (
        "_$_12RumbleEffect",
        Ok(
            "RumbleEffect::~RumbleEffect(void)",
        ),
    ),
    (
        "SetMotor__12RumbleEffectUiP25IRadControllerOutputPoint",
        Ok(
            "RumbleEffect::SetMotor(unsigned int, IRadControllerOutputPoint *)",
        ),
    ),
    (
        "SetEffect__12RumbleEffectQ212RumbleEffect6EffectUi",
        Ok(
            "RumbleEffect::SetEffect(RumbleEffect::Effect, unsigned int)",
        ),
    ),
    (
        "SetDynaEffect__12RumbleEffectQ212RumbleEffect10DynaEffectUif",
        Ok(
            "RumbleEffect::SetDynaEffect(RumbleEffect::DynaEffect, unsigned int, float)",
        ),
    ),
    (
        "Update__12RumbleEffectUi",
        Ok(
            "RumbleEffect::Update(unsigned int)",
        ),
    ),
    (
        "ShutDownEffects__12RumbleEffect",
        Ok(
            "RumbleEffect::ShutDownEffects(void)",
        ),
    ),
    (
        "UpdateEffect__12RumbleEffectQ212RumbleEffect6EffectUi",
        Ok(
            "RumbleEffect::UpdateEffect(RumbleEffect::Effect, unsigned int)",
        ),
    ),
    (
        "UpdateDynaEffect__12RumbleEffectQ212RumbleEffect10DynaEffectUif",
        Ok(
            "RumbleEffect::UpdateDynaEffect(RumbleEffect::DynaEffect, unsigned int, float)",
        ),
    ),
    (
        "InitEffects__12RumbleEffect",
        Ok(
            "RumbleEffect::InitEffects(void)",
        ),
    ),
    (
        "OnShutDownEffects__12RumbleEffect",
        Ok(
            "RumbleEffect::OnShutDownEffects(void)",
        ),
    ),
    (
        "__14SteeringSpring",
        Ok(
            "SteeringSpring::SteeringSpring(void)",
        ),
    ),
    (
        "_$_14SteeringSpring",
        Ok(
            "SteeringSpring::~SteeringSpring(void)",
        ),
    ),
    (
        "OnInit__14SteeringSpring",
        Ok(
            "SteeringSpring::OnInit(void)",
        ),
    ),
    (
        "SetCenterPoint__14SteeringSpringcUc",
        Ok(
            "SteeringSpring::SetCenterPoint(char, unsigned char)",
        ),
    ),
    (
        "SetSpringStrength__14SteeringSpringUc",
        Ok(
            "SteeringSpring::SetSpringStrength(unsigned char)",
        ),
    ),
    (
        "SetSpringCoefficient__14SteeringSprings",
        Ok(
            "SteeringSpring::SetSpringCoefficient(short)",
        ),
    ),
    (
        "__10BaseDamper",
        Ok(
            "BaseDamper::BaseDamper(void)",
        ),
    ),
    (
        "_$_10BaseDamper",
        Ok(
            "BaseDamper::~BaseDamper(void)",
        ),
    ),
    (
        "OnInit__10BaseDamper",
        Ok(
            "BaseDamper::OnInit(void)",
        ),
    ),
    (
        "SetCenterPoint__10BaseDampercUc",
        Ok(
            "BaseDamper::SetCenterPoint(char, unsigned char)",
        ),
    ),
    (
        "SetDamperStrength__10BaseDamperUc",
        Ok(
            "BaseDamper::SetDamperStrength(unsigned char)",
        ),
    ),
    (
        "SetDamperCoefficient__10BaseDampers",
        Ok(
            "BaseDamper::SetDamperCoefficient(short)",
        ),
    ),
    (
        "__11ForceEffect",
        Ok(
            "ForceEffect::ForceEffect(void)",
        ),
    ),
    (
        "_$_11ForceEffect",
        Ok(
            "ForceEffect::~ForceEffect(void)",
        ),
    ),
    (
        "Init__11ForceEffectP25IRadControllerOutputPoint",
        Ok(
            "ForceEffect::Init(IRadControllerOutputPoint *)",
        ),
    ),
    (
        "Start__11ForceEffect",
        Ok(
            "ForceEffect::Start(void)",
        ),
    ),
    (
        "Stop__11ForceEffect",
        Ok(
            "ForceEffect::Stop(void)",
        ),
    ),
    (
        "Update__11ForceEffect",
        Ok(
            "ForceEffect::Update(void)",
        ),
    ),
    (
        "__14ConstantEffect",
        Ok(
            "ConstantEffect::ConstantEffect(void)",
        ),
    ),
    (
        "_$_14ConstantEffect",
        Ok(
            "ConstantEffect::~ConstantEffect(void)",
        ),
    ),
    (
        "OnInit__14ConstantEffect",
        Ok(
            "ConstantEffect::OnInit(void)",
        ),
    ),
    (
        "SetMagnitude__14ConstantEffects",
        Ok(
            "ConstantEffect::SetMagnitude(short)",
        ),
    ),
    (
        "SetDirection__14ConstantEffectUs",
        Ok(
            "ConstantEffect::SetDirection(unsigned short)",
        ),
    ),
    (
        "__11WheelRumble",
        Ok(
            "WheelRumble::WheelRumble(void)",
        ),
    ),
    (
        "_$_11WheelRumble",
        Ok(
            "WheelRumble::~WheelRumble(void)",
        ),
    ),
    (
        "OnInit__11WheelRumble",
        Ok(
            "WheelRumble::OnInit(void)",
        ),
    ),
    (
        "SetMagDir__11WheelRumbleUcUs",
        Ok(
            "WheelRumble::SetMagDir(unsigned char, unsigned short)",
        ),
    ),
    (
        "SetPPO__11WheelRumbleUsUss",
        Ok(
            "WheelRumble::SetPPO(unsigned short, unsigned short, short)",
        ),
    ),
    (
        "SetRumbleType__11WheelRumbleUc",
        Ok(
            "WheelRumble::SetRumbleType(unsigned char)",
        ),
    ),
    (
        "__tf12RumbleEffect",
        Ok(
            "RumbleEffect type_info function",
        ),
    ),
    (
        "__tf11ForceEffect",
        Ok(
            "ForceEffect type_info function",
        ),
    ),
    (
        "__tf14SteeringSpring",
        Ok(
            "SteeringSpring type_info function",
        ),
    ),
    (
        "__tf10BaseDamper",
        Ok(
            "BaseDamper type_info function",
        ),
    ),
    (
        "__tf14ConstantEffect",
        Ok(
            "ConstantEffect type_info function",
        ),
    ),
    (
        "__tf11WheelRumble",
        Ok(
            "WheelRumble type_info function",
        ),
    ),
    (
        "__tf14UserController",
        Ok(
            "UserController type_info function",
        ),
    ),
    (
        "__tf12InputManager",
        Ok(
            "InputManager type_info function",
        ),
    ),
    (
        "__tf8Mappable",
        Ok(
            "Mappable type_info function",
        ),
    ),
    (
        "__38IRadControllerConnectionChangeCallback",
        Ok(
            "IRadControllerConnectionChangeCallback::IRadControllerConnectionChangeCallback(void)",
        ),
    ),
    (
        "__32IRadControllerInputPointCallback",
        Ok(
            "IRadControllerInputPointCallback::IRadControllerInputPointCallback(void)",
        ),
    ),
    (
        "__tf38IRadControllerConnectionChangeCallback",
        Ok(
            "IRadControllerConnectionChangeCallback type_info function",
        ),
    ),
    (
        "__tf32IRadControllerInputPointCallback",
        Ok(
            "IRadControllerInputPointCallback type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$_6Button$mTickCount",
        Ok(
            "global constructors keyed to Button::mTickCount",
        ),
    ),
    (
        "__Q215InteriorManager10GagBinding",
        Ok(
            "InteriorManager::GagBinding::GagBinding(void)",
        ),
    ),
    (
        "Clear__Q215InteriorManager10GagBinding",
        Ok(
            "InteriorManager::GagBinding::Clear(void)",
        ),
    ),
    (
        "__11GagDrawableP3Gag",
        Ok(
            "GagDrawable::GagDrawable(Gag *)",
        ),
    ),
    (
        "Display__11GagDrawable",
        Ok(
            "GagDrawable::Display(void)",
        ),
    ),
    (
        "CreateInstance__15InteriorManager",
        Ok(
            "InteriorManager::CreateInstance(void)",
        ),
    ),
    (
        "ClassifyPoint__15InteriorManagerRCQ218RadicalMathLibrary6Vector",
        Ok(
            "InteriorManager::ClassifyPoint(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetInstance__15InteriorManager",
        Ok(
            "InteriorManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__15InteriorManager",
        Ok(
            "InteriorManager::DestroyInstance(void)",
        ),
    ),
    (
        "OnBootupStart__15InteriorManager",
        Ok(
            "InteriorManager::OnBootupStart(void)",
        ),
    ),
    (
        "OnGameplayStart__15InteriorManager",
        Ok(
            "InteriorManager::OnGameplayStart(void)",
        ),
    ),
    (
        "OnGameplayEnd__15InteriorManager",
        Ok(
            "InteriorManager::OnGameplayEnd(void)",
        ),
    ),
    (
        "UnloadGagSounds__15InteriorManager",
        Ok(
            "InteriorManager::UnloadGagSounds(void)",
        ),
    ),
    (
        "Enter__15InteriorManagerP23InteriorEntranceLocatorP9CharacterP9Sequencer",
        Ok(
            "InteriorManager::Enter(InteriorEntranceLocator *, Character *, Sequencer *)",
        ),
    ),
    (
        "Update__15InteriorManagerUi",
        Ok(
            "InteriorManager::Update(unsigned int)",
        ),
    ),
    (
        "HandleEvent__15InteriorManager9EventEnumPv",
        Ok(
            "InteriorManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "ConsoleClearGagBindings__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleClearGagBindings(int, char **)",
        ),
    ),
    (
        "ClearGagBindings__15InteriorManager",
        Ok(
            "InteriorManager::ClearGagBindings(void)",
        ),
    ),
    (
        "ConsoleAddGagBinding__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleAddGagBinding(int, char **)",
        ),
    ),
    (
        "AddGagBinding__15InteriorManagerG13tUidUnalignedPc12p3dCycleModeiT2",
        Ok(
            "InteriorManager::AddGagBinding(tUidUnaligned, char *, p3dCycleMode, int, char *)",
        ),
    ),
    (
        "GagBegin__15InteriorManagerPc",
        Ok(
            "InteriorManager::GagBegin(char *)",
        ),
    ),
    (
        "GetBuildBinding__15InteriorManager",
        Ok(
            "InteriorManager::GetBuildBinding(void)",
        ),
    ),
    (
        "GagEnd__15InteriorManager",
        Ok(
            "InteriorManager::GagEnd(void)",
        ),
    ),
    (
        "ConsoleGagBegin__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagBegin(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetInterior__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetInterior(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetCycle__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetCycle(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetWeight__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetWeight(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetSound__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetSound(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetIntro__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetIntro(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetOutro__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetOutro(int, char **)",
        ),
    ),
    (
        "ConsoleGagPlayFMV__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagPlayFMV(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetTrigger__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetTrigger(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetPosition__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetPosition(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetRandom__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetRandom(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetCameraShake__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetCameraShake(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetCoins__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetCoins(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetSparkle__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetSparkle(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetAnimCollision__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetAnimCollision(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetLoadDistances__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetLoadDistances(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetSoundLoadDistances__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetSoundLoadDistances(int, char **)",
        ),
    ),
    (
        "ConsoleGagSetPersist__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagSetPersist(int, char **)",
        ),
    ),
    (
        "ConsoleGagCheckCollCards__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagCheckCollCards(int, char **)",
        ),
    ),
    (
        "ConsoleGagCheckMovie__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagCheckMovie(int, char **)",
        ),
    ),
    (
        "ConsoleGagEnd__15InteriorManageriPPc",
        Ok(
            "InteriorManager::ConsoleGagEnd(int, char **)",
        ),
    ),
    (
        "LoadLevelGags__15InteriorManagerRCQ218RadicalMathLibrary6Vectorb",
        Ok(
            "InteriorManager::LoadLevelGags(RadicalMathLibrary::Vector const &, bool)",
        ),
    ),
    (
        "__15InteriorManager",
        Ok(
            "InteriorManager::InteriorManager(void)",
        ),
    ),
    (
        "_$_15InteriorManager",
        Ok(
            "InteriorManager::~InteriorManager(void)",
        ),
    ),
    (
        "SwitchToInterior__15InteriorManager",
        Ok(
            "InteriorManager::SwitchToInterior(void)",
        ),
    ),
    (
        "SetupLightsAndAnims__15InteriorManager",
        Ok(
            "InteriorManager::SetupLightsAndAnims(void)",
        ),
    ),
    (
        "AttemptEntry__15InteriorManager",
        Ok(
            "InteriorManager::AttemptEntry(void)",
        ),
    ),
    (
        "SwitchToExterior__15InteriorManager",
        Ok(
            "InteriorManager::SwitchToExterior(void)",
        ),
    ),
    (
        "ExitInterior__15InteriorManager",
        Ok(
            "InteriorManager::ExitInterior(void)",
        ),
    ),
    (
        "LoadGagNIS__15InteriorManagerG13tUidUnaligned",
        Ok(
            "InteriorManager::LoadGagNIS(tUidUnaligned)",
        ),
    ),
    (
        "ClearGags__15InteriorManager",
        Ok(
            "InteriorManager::ClearGags(void)",
        ),
    ),
    (
        "GetExitPos__15InteriorManager",
        Ok(
            "InteriorManager::GetExitPos(void)",
        ),
    ),
    (
        "CollectionEffect__15InteriorManagerPCcRCQ218RadicalMathLibrary6Vector",
        Ok(
            "InteriorManager::CollectionEffect(char const *, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__14InteriorCentre",
        Ok(
            "InteriorCentre::InteriorCentre(void)",
        ),
    ),
    (
        "_$_14InteriorCentre",
        Ok(
            "InteriorCentre::~InteriorCentre(void)",
        ),
    ),
    (
        "__tf15InteriorManager",
        Ok(
            "InteriorManager type_info function",
        ),
    ),
    (
        "__tf11GagDrawable",
        Ok(
            "GagDrawable type_info function",
        ),
    ),
    (
        "__tf3Gag",
        Ok(
            "Gag type_info function",
        ),
    ),
    (
        "__Q215AnimationPlayer16LoadDataCallBack",
        Ok(
            "AnimationPlayer::LoadDataCallBack::LoadDataCallBack(void)",
        ),
    ),
    (
        "_$_11GagDrawable",
        Ok(
            "GagDrawable::~GagDrawable(void)",
        ),
    ),
    (
        "GetBoundingBox__11GagDrawablePQ218RadicalMathLibrary5Box3D",
        Ok(
            "GagDrawable::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__11GagDrawablePQ218RadicalMathLibrary6Sphere",
        Ok(
            "GagDrawable::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "ApplyForce__11GagDrawableRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "GagDrawable::ApplyForce(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "HandleEvent__3Gag9EventEnumPv",
        Ok(
            "Gag::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "_$_3Gag",
        Ok(
            "Gag::~Gag(void)",
        ),
    ),
    (
        "OnLoadDataComplete__3Gag",
        Ok(
            "Gag::OnLoadDataComplete(void)",
        ),
    ),
    (
        "OnButtonPressed__3GagP9CharacterP9Sequencer",
        Ok(
            "Gag::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "__12InteriorExit",
        Ok(
            "InteriorExit::InteriorExit(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z16tFrameController",
        Ok(
            "radLoadInventory::SafeCast<tFrameController>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z18DirectionalLocator",
        Ok(
            "radLoadInventory::SafeCast<DirectionalLocator>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ215AnimationPlayer16LoadDataCallBack",
        Ok(
            "AnimationPlayer::LoadDataCallBack type_info function",
        ),
    ),
    (
        "_$_12InteriorExit",
        Ok(
            "InteriorExit::~InteriorExit(void)",
        ),
    ),
    (
        "__tf12InteriorExit",
        Ok(
            "InteriorExit type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z16tFrameController",
        Ok(
            "radLoadInventory::SafeCast<tFrameController> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z18DirectionalLocator",
        Ok(
            "radLoadInventory::SafeCast<DirectionalLocator> type_info function",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ23sim15CollisionObject",
        Ok(
            "radLoadInventory::SafeCast<sim::CollisionObject>::SafeCast(void)",
        ),
    ),
    (
        "OnButtonPressed__12InteriorExitP9CharacterP9Sequencer",
        Ok(
            "InteriorExit::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z18DirectionalLocatorP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<DirectionalLocator>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z16tFrameControllerP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tFrameController>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ23sim15CollisionObject",
        Ok(
            "radLoadInventory::SafeCast<sim::CollisionObject> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ23sim15CollisionObjectP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<sim::CollisionObject>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$_15InteriorManager$spInstance",
        Ok(
            "global constructors keyed to InteriorManager::spInstance",
        ),
    ),
    (
        "_GLOBAL_$D$_15InteriorManager$spInstance",
        Ok(
            "global destructors keyed to InteriorManager::spInstance",
        ),
    ),
    (
        "__16CameraDataLoader",
        Ok(
            "CameraDataLoader::CameraDataLoader(void)",
        ),
    ),
    (
        "_$_16CameraDataLoader",
        Ok(
            "CameraDataLoader::~CameraDataLoader(void)",
        ),
    ),
    (
        "Load__16CameraDataLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "CameraDataLoader::Load(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__17CementFileHandlerPQ214LoadingManager19CementLibraryStruct",
        Ok(
            "CementFileHandler::CementFileHandler(LoadingManager::CementLibraryStruct *)",
        ),
    ),
    (
        "_$_17CementFileHandler",
        Ok(
            "CementFileHandler::~CementFileHandler(void)",
        ),
    ),
    (
        "LoadFile__17CementFileHandlerPCcPQ211FileHandler16LoadFileCallbackPv19GameMemoryAllocator",
        Ok(
            "CementFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
        ),
    ),
    (
        "LoadFileSync__17CementFileHandlerPCc",
        Ok(
            "CementFileHandler::LoadFileSync(char const *)",
        ),
    ),
    (
        "OnCementLibraryRegistered__17CementFileHandlerPv",
        Ok(
            "CementFileHandler::OnCementLibraryRegistered(void *)",
        ),
    ),
    (
        "__17ChoreoFileHandler",
        Ok(
            "ChoreoFileHandler::ChoreoFileHandler(void)",
        ),
    ),
    (
        "_$_17ChoreoFileHandler",
        Ok(
            "ChoreoFileHandler::~ChoreoFileHandler(void)",
        ),
    ),
    (
        "LoadFile__17ChoreoFileHandlerPCcPQ211FileHandler16LoadFileCallbackPv19GameMemoryAllocator",
        Ok(
            "ChoreoFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
        ),
    ),
    (
        "OnFileOperationsComplete__17ChoreoFileHandlerPv",
        Ok(
            "ChoreoFileHandler::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "LoadFileSync__17ChoreoFileHandlerPCc",
        Ok(
            "ChoreoFileHandler::LoadFileSync(char const *)",
        ),
    ),
    (
        "SetSectionName__17ChoreoFileHandlerPCc",
        Ok(
            "ChoreoFileHandler::SetSectionName(char const *)",
        ),
    ),
    (
        "__18ConsoleFileHandler",
        Ok(
            "ConsoleFileHandler::ConsoleFileHandler(void)",
        ),
    ),
    (
        "_$_18ConsoleFileHandler",
        Ok(
            "ConsoleFileHandler::~ConsoleFileHandler(void)",
        ),
    ),
    (
        "LoadFile__18ConsoleFileHandlerPCcPQ211FileHandler16LoadFileCallbackPv19GameMemoryAllocator",
        Ok(
            "ConsoleFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
        ),
    ),
    (
        "OnFileOperationsComplete__18ConsoleFileHandlerPv",
        Ok(
            "ConsoleFileHandler::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "LoadFileSync__18ConsoleFileHandlerPCc",
        Ok(
            "ConsoleFileHandler::LoadFileSync(char const *)",
        ),
    ),
    (
        "CreateFileHandler__18FileHandlerFactory15FileHandlerEnumPCc",
        Ok(
            "FileHandlerFactory::CreateFileHandler(FileHandlerEnum, char const *)",
        ),
    ),
    (
        "__15IconFileHandler",
        Ok(
            "IconFileHandler::IconFileHandler(void)",
        ),
    ),
    (
        "_$_15IconFileHandler",
        Ok(
            "IconFileHandler::~IconFileHandler(void)",
        ),
    ),
    (
        "LoadFile__15IconFileHandlerPCcPQ211FileHandler16LoadFileCallbackPv19GameMemoryAllocator",
        Ok(
            "IconFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
        ),
    ),
    (
        "OnFileOperationsComplete__15IconFileHandlerPv",
        Ok(
            "IconFileHandler::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "LoadFileSync__15IconFileHandlerPCc",
        Ok(
            "IconFileHandler::LoadFileSync(char const *)",
        ),
    ),
    (
        "__18IntersectionLoader",
        Ok(
            "IntersectionLoader::IntersectionLoader(void)",
        ),
    ),
    (
        "_$_18IntersectionLoader",
        Ok(
            "IntersectionLoader::~IntersectionLoader(void)",
        ),
    ),
    (
        "Load__18IntersectionLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "IntersectionLoader::Load(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "CheckChunkID__18IntersectionLoaderUi",
        Ok(
            "IntersectionLoader::CheckChunkID(unsigned int)",
        ),
    ),
    (
        "GetChunkID__18IntersectionLoader",
        Ok(
            "IntersectionLoader::GetChunkID(void)",
        ),
    ),
    (
        "GetInstance__14LoadingManager",
        Ok(
            "LoadingManager::GetInstance(void)",
        ),
    ),
    (
        "CreateInstance__14LoadingManager",
        Ok(
            "LoadingManager::CreateInstance(void)",
        ),
    ),
    (
        "DestroyInstance__14LoadingManager",
        Ok(
            "LoadingManager::DestroyInstance(void)",
        ),
    ),
    (
        "AddCallback__14LoadingManagerPQ214LoadingManager23ProcessRequestsCallbackPv",
        Ok(
            "LoadingManager::AddCallback(LoadingManager::ProcessRequestsCallback *, void *)",
        ),
    ),
    (
        "AddRequest__14LoadingManager15FileHandlerEnumPCc19GameMemoryAllocatorT2T2PQ214LoadingManager23ProcessRequestsCallbackPv",
        Ok(
            "LoadingManager::AddRequest(FileHandlerEnum, char const *, GameMemoryAllocator, char const *, char const *, LoadingManager::ProcessRequestsCallback *, void *)",
        ),
    ),
    (
        "OnLoadFileComplete__14LoadingManagerPv",
        Ok(
            "LoadingManager::OnLoadFileComplete(void *)",
        ),
    ),
    (
        "CancelPendingRequests__14LoadingManager",
        Ok(
            "LoadingManager::CancelPendingRequests(void)",
        ),
    ),
    (
        "RegisterCementLibrary__14LoadingManagerPCc",
        Ok(
            "LoadingManager::RegisterCementLibrary(char const *)",
        ),
    ),
    (
        "UnregisterCementLibrary__14LoadingManageri",
        Ok(
            "LoadingManager::UnregisterCementLibrary(int)",
        ),
    ),
    (
        "__14LoadingManager",
        Ok(
            "LoadingManager::LoadingManager(void)",
        ),
    ),
    (
        "_$_14LoadingManager",
        Ok(
            "LoadingManager::~LoadingManager(void)",
        ),
    ),
    (
        "ProcessNextRequest__14LoadingManager",
        Ok(
            "LoadingManager::ProcessNextRequest(void)",
        ),
    ),
    (
        "__13LocatorLoader",
        Ok(
            "LocatorLoader::LocatorLoader(void)",
        ),
    ),
    (
        "_$_13LocatorLoader",
        Ok(
            "LocatorLoader::~LocatorLoader(void)",
        ),
    ),
    (
        "LoadObject__13LocatorLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "LocatorLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__13LocatorLoaderP21ChunkListenerCallbacki",
        Ok(
            "LocatorLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__13LocatorLoaderP21ChunkListenerCallbacki",
        Ok(
            "LocatorLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "LoadTriggerVolume__13LocatorLoaderP10tChunkFileP14TriggerLocatorb",
        Ok(
            "LocatorLoader::LoadTriggerVolume(tChunkFile *, TriggerLocator *, bool)",
        ),
    ),
    (
        "LoadSpline__13LocatorLoaderP10tChunkFileP13SplineLocator",
        Ok(
            "LocatorLoader::LoadSpline(tChunkFile *, SplineLocator *)",
        ),
    ),
    (
        "__14P3DFileHandler",
        Ok(
            "P3DFileHandler::P3DFileHandler(void)",
        ),
    ),
    (
        "_$_14P3DFileHandler",
        Ok(
            "P3DFileHandler::~P3DFileHandler(void)",
        ),
    ),
    (
        "LoadFile__14P3DFileHandlerPCcPQ211FileHandler16LoadFileCallbackPv19GameMemoryAllocator",
        Ok(
            "P3DFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
        ),
    ),
    (
        "Done__14P3DFileHandler11tLoadStatusP12tLoadRequest",
        Ok(
            "P3DFileHandler::Done(tLoadStatus, tLoadRequest *)",
        ),
    ),
    (
        "LoadFileSync__14P3DFileHandlerPCc",
        Ok(
            "P3DFileHandler::LoadFileSync(char const *)",
        ),
    ),
    (
        "SetSectionName__14P3DFileHandlerPCc",
        Ok(
            "P3DFileHandler::SetSectionName(char const *)",
        ),
    ),
    (
        "__21RoadDataSegmentLoader",
        Ok(
            "RoadDataSegmentLoader::RoadDataSegmentLoader(void)",
        ),
    ),
    (
        "_$_21RoadDataSegmentLoader",
        Ok(
            "RoadDataSegmentLoader::~RoadDataSegmentLoader(void)",
        ),
    ),
    (
        "Load__21RoadDataSegmentLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "RoadDataSegmentLoader::Load(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "CheckChunkID__21RoadDataSegmentLoaderUi",
        Ok(
            "RoadDataSegmentLoader::CheckChunkID(unsigned int)",
        ),
    ),
    (
        "GetChunkID__21RoadDataSegmentLoader",
        Ok(
            "RoadDataSegmentLoader::GetChunkID(void)",
        ),
    ),
    (
        "__10RoadLoader",
        Ok(
            "RoadLoader::RoadLoader(void)",
        ),
    ),
    (
        "_$_10RoadLoader",
        Ok(
            "RoadLoader::~RoadLoader(void)",
        ),
    ),
    (
        "Load__10RoadLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "RoadLoader::Load(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "CheckChunkID__10RoadLoaderUi",
        Ok(
            "RoadLoader::CheckChunkID(unsigned int)",
        ),
    ),
    (
        "LoadObject__10RoadLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "RoadLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__10RoadLoaderP21ChunkListenerCallbacki",
        Ok(
            "RoadLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__10RoadLoaderP21ChunkListenerCallbacki",
        Ok(
            "RoadLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "LoadRoadSegment__10RoadLoaderP10tChunkFileRUi",
        Ok(
            "RoadLoader::LoadRoadSegment(tChunkFile *, unsigned int &)",
        ),
    ),
    (
        "__18ScroobyFileHandler",
        Ok(
            "ScroobyFileHandler::ScroobyFileHandler(void)",
        ),
    ),
    (
        "_$_18ScroobyFileHandler",
        Ok(
            "ScroobyFileHandler::~ScroobyFileHandler(void)",
        ),
    ),
    (
        "LoadFile__18ScroobyFileHandlerPCcPQ211FileHandler16LoadFileCallbackPv19GameMemoryAllocator",
        Ok(
            "ScroobyFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
        ),
    ),
    (
        "OnProjectLoadComplete__18ScroobyFileHandlerPQ27Scrooby7Project",
        Ok(
            "ScroobyFileHandler::OnProjectLoadComplete(Scrooby::Project *)",
        ),
    ),
    (
        "LoadFileSync__18ScroobyFileHandlerPCc",
        Ok(
            "ScroobyFileHandler::LoadFileSync(char const *)",
        ),
    ),
    (
        "SetSectionName__18ScroobyFileHandlerPCc",
        Ok(
            "ScroobyFileHandler::SetSectionName(char const *)",
        ),
    ),
    (
        "__16SoundFileHandler",
        Ok(
            "SoundFileHandler::SoundFileHandler(void)",
        ),
    ),
    (
        "_$_16SoundFileHandler",
        Ok(
            "SoundFileHandler::~SoundFileHandler(void)",
        ),
    ),
    (
        "LoadFile__16SoundFileHandlerPCcPQ211FileHandler16LoadFileCallbackPv19GameMemoryAllocator",
        Ok(
            "SoundFileHandler::LoadFile(char const *, FileHandler::LoadFileCallback *, void *, GameMemoryAllocator)",
        ),
    ),
    (
        "LoadFileSync__16SoundFileHandlerPCc",
        Ok(
            "SoundFileHandler::LoadFileSync(char const *)",
        ),
    ),
    (
        "LoadCompleted__16SoundFileHandler",
        Ok(
            "SoundFileHandler::LoadCompleted(void)",
        ),
    ),
    (
        "__10PathLoader",
        Ok(
            "PathLoader::PathLoader(void)",
        ),
    ),
    (
        "_$_10PathLoader",
        Ok(
            "PathLoader::~PathLoader(void)",
        ),
    ),
    (
        "CheckChunkID__10PathLoaderUi",
        Ok(
            "PathLoader::CheckChunkID(unsigned int)",
        ),
    ),
    (
        "Load__10PathLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "PathLoader::Load(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadObject__10PathLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "PathLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__10PathLoaderP21ChunkListenerCallbacki",
        Ok(
            "PathLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__10PathLoaderP21ChunkListenerCallbacki",
        Ok(
            "PathLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "clear__t10_List_base2ZP11RoadSegmentZt7s2alloc1ZP11RoadSegment",
        Ok(
            "_List_base<RoadSegment *, s2alloc<RoadSegment *> >::clear(void)",
        ),
    ),
    (
        "__tfQ212tLoadRequest8Callback",
        Ok(
            "tLoadRequest::Callback type_info function",
        ),
    ),
    (
        "__tf16CameraDataLoader",
        Ok(
            "CameraDataLoader type_info function",
        ),
    ),
    (
        "__tf11FileHandler",
        Ok(
            "FileHandler type_info function",
        ),
    ),
    (
        "__tf14LoadingManager",
        Ok(
            "LoadingManager type_info function",
        ),
    ),
    (
        "__tf17CementFileHandler",
        Ok(
            "CementFileHandler type_info function",
        ),
    ),
    (
        "__tf17ChoreoFileHandler",
        Ok(
            "ChoreoFileHandler type_info function",
        ),
    ),
    (
        "__tf18ConsoleFileHandler",
        Ok(
            "ConsoleFileHandler type_info function",
        ),
    ),
    (
        "__tf14P3DFileHandler",
        Ok(
            "P3DFileHandler type_info function",
        ),
    ),
    (
        "__tf15IconFileHandler",
        Ok(
            "IconFileHandler type_info function",
        ),
    ),
    (
        "__tf18ScroobyFileHandler",
        Ok(
            "ScroobyFileHandler type_info function",
        ),
    ),
    (
        "__tf16SoundFileHandler",
        Ok(
            "SoundFileHandler type_info function",
        ),
    ),
    (
        "__tf18IntersectionLoader",
        Ok(
            "IntersectionLoader type_info function",
        ),
    ),
    (
        "__tf14IWrappedLoader",
        Ok(
            "IWrappedLoader type_info function",
        ),
    ),
    (
        "__tf13LocatorLoader",
        Ok(
            "LocatorLoader type_info function",
        ),
    ),
    (
        "__tf15PedGroupLocator",
        Ok(
            "PedGroupLocator type_info function",
        ),
    ),
    (
        "__tf21RoadDataSegmentLoader",
        Ok(
            "RoadDataSegmentLoader type_info function",
        ),
    ),
    (
        "__tf10RoadLoader",
        Ok(
            "RoadLoader type_info function",
        ),
    ),
    (
        "__tf10PathLoader",
        Ok(
            "PathLoader type_info function",
        ),
    ),
    (
        "__15radLoadCallback",
        Ok(
            "radLoadCallback::radLoadCallback(void)",
        ),
    ),
    (
        "_$_Q212tLoadRequest8Callback",
        Ok(
            "tLoadRequest::Callback::~Callback(void)",
        ),
    ),
    (
        "Done__Q212tLoadRequest8Callback",
        Ok(
            "tLoadRequest::Callback::Done(void)",
        ),
    ),
    (
        "CheckChunkID__16CameraDataLoaderUi",
        Ok(
            "CameraDataLoader::CheckChunkID(unsigned int)",
        ),
    ),
    (
        "GetChunkID__16CameraDataLoader",
        Ok(
            "CameraDataLoader::GetChunkID(void)",
        ),
    ),
    (
        "_$_18WalkerCamDataChunk",
        Ok(
            "WalkerCamDataChunk::~WalkerCamDataChunk(void)",
        ),
    ),
    (
        "__35IRadCementLibraryCompletionCallback",
        Ok(
            "IRadCementLibraryCompletionCallback::IRadCementLibraryCompletionCallback(void)",
        ),
    ),
    (
        "__Q211FileHandler16LoadFileCallback",
        Ok(
            "FileHandler::LoadFileCallback::LoadFileCallback(void)",
        ),
    ),
    (
        "_$_11FileHandler",
        Ok(
            "FileHandler::~FileHandler(void)",
        ),
    ),
    (
        "AddRef__11FileHandler",
        Ok(
            "FileHandler::AddRef(void)",
        ),
    ),
    (
        "Release__11FileHandler",
        Ok(
            "FileHandler::Release(void)",
        ),
    ),
    (
        "AddRef__17CementFileHandler",
        Ok(
            "CementFileHandler::AddRef(void)",
        ),
    ),
    (
        "Release__17CementFileHandler",
        Ok(
            "CementFileHandler::Release(void)",
        ),
    ),
    (
        "AddRef__17ChoreoFileHandler",
        Ok(
            "ChoreoFileHandler::AddRef(void)",
        ),
    ),
    (
        "Release__17ChoreoFileHandler",
        Ok(
            "ChoreoFileHandler::Release(void)",
        ),
    ),
    (
        "AddRef__18ConsoleFileHandler",
        Ok(
            "ConsoleFileHandler::AddRef(void)",
        ),
    ),
    (
        "Release__18ConsoleFileHandler",
        Ok(
            "ConsoleFileHandler::Release(void)",
        ),
    ),
    (
        "AddRef__14P3DFileHandler",
        Ok(
            "P3DFileHandler::AddRef(void)",
        ),
    ),
    (
        "Release__14P3DFileHandler",
        Ok(
            "P3DFileHandler::Release(void)",
        ),
    ),
    (
        "AddRef__15IconFileHandler",
        Ok(
            "IconFileHandler::AddRef(void)",
        ),
    ),
    (
        "Release__15IconFileHandler",
        Ok(
            "IconFileHandler::Release(void)",
        ),
    ),
    (
        "__Q27Scrooby19LoadProjectCallback",
        Ok(
            "Scrooby::LoadProjectCallback::LoadProjectCallback(void)",
        ),
    ),
    (
        "_$_14IWrappedLoader",
        Ok(
            "IWrappedLoader::~IWrappedLoader(void)",
        ),
    ),
    (
        "_$_15PedGroupLocator",
        Ok(
            "PedGroupLocator::~PedGroupLocator(void)",
        ),
    ),
    (
        "GetDataType__C15PedGroupLocator",
        Ok(
            "PedGroupLocator::GetDataType(void) const",
        ),
    ),
    (
        "_$_t16_List_alloc_base3ZP11RoadSegmentZt7s2alloc1ZP11RoadSegmentb0",
        Ok(
            "_List_alloc_base<RoadSegment *, s2alloc<RoadSegment *>, false>::~_List_alloc_base(void)",
        ),
    ),
    (
        "__tf15radLoadCallback",
        Ok(
            "radLoadCallback type_info function",
        ),
    ),
    (
        "__tf35IRadCementLibraryCompletionCallback",
        Ok(
            "IRadCementLibraryCompletionCallback type_info function",
        ),
    ),
    (
        "__tfQ211FileHandler16LoadFileCallback",
        Ok(
            "FileHandler::LoadFileCallback type_info function",
        ),
    ),
    (
        "__tfQ27Scrooby19LoadProjectCallback",
        Ok(
            "Scrooby::LoadProjectCallback type_info function",
        ),
    ),
    (
        "_$_15radLoadCallback",
        Ok(
            "radLoadCallback::~radLoadCallback(void)",
        ),
    ),
    (
        "InitDefaults__18CommandLineOptions",
        Ok(
            "CommandLineOptions::InitDefaults(void)",
        ),
    ),
    (
        "HandleOption__18CommandLineOptionsPCc",
        Ok(
            "CommandLineOptions::HandleOption(char const *)",
        ),
    ),
    (
        "Get__18CommandLineOptions17CmdLineOptionEnum",
        Ok(
            "CommandLineOptions::Get(CmdLineOptionEnum)",
        ),
    ),
    (
        "CreateInstance__4GameP8Platform",
        Ok(
            "Game::CreateInstance(Platform *)",
        ),
    ),
    (
        "DestroyInstance__4Game",
        Ok(
            "Game::DestroyInstance(void)",
        ),
    ),
    (
        "GetInstance__4Game",
        Ok(
            "Game::GetInstance(void)",
        ),
    ),
    (
        "GetPlatform__4Game",
        Ok(
            "Game::GetPlatform(void)",
        ),
    ),
    (
        "Initialize__4Game",
        Ok(
            "Game::Initialize(void)",
        ),
    ),
    (
        "Terminate__4Game",
        Ok(
            "Game::Terminate(void)",
        ),
    ),
    (
        "Run__4Game",
        Ok(
            "Game::Run(void)",
        ),
    ),
    (
        "Stop__4Game",
        Ok(
            "Game::Stop(void)",
        ),
    ),
    (
        "GetRandomSeed__4Game",
        Ok(
            "Game::GetRandomSeed(void)",
        ),
    ),
    (
        "__4GameP8Platform",
        Ok(
            "Game::Game(Platform *)",
        ),
    ),
    (
        "_$_4Game",
        Ok(
            "Game::~Game(void)",
        ),
    ),
    (
        "main",
        Err(
            NotMangled,
        ),
    ),
    (
        "LoadMemP3DFile__FPUcUiP12tEntityStore",
        Ok(
            "LoadMemP3DFile(unsigned char *, unsigned int, tEntityStore *)",
        ),
    ),
    (
        "CreateInstance__11PS2Platform",
        Ok(
            "PS2Platform::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__11PS2Platform",
        Ok(
            "PS2Platform::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__11PS2Platform",
        Ok(
            "PS2Platform::DestroyInstance(void)",
        ),
    ),
    (
        "InitializeFoundation__11PS2Platform",
        Ok(
            "PS2Platform::InitializeFoundation(void)",
        ),
    ),
    (
        "InitializeMemory__11PS2Platform",
        Ok(
            "PS2Platform::InitializeMemory(void)",
        ),
    ),
    (
        "InitializePlatform__11PS2Platform",
        Ok(
            "PS2Platform::InitializePlatform(void)",
        ),
    ),
    (
        "ShutdownPlatform__11PS2Platform",
        Ok(
            "PS2Platform::ShutdownPlatform(void)",
        ),
    ),
    (
        "ResetMachine__11PS2Platform",
        Ok(
            "PS2Platform::ResetMachine(void)",
        ),
    ),
    (
        "LaunchDashboard__11PS2Platform",
        Ok(
            "PS2Platform::LaunchDashboard(void)",
        ),
    ),
    (
        "DisplaySplashScreen__11PS2PlatformQ28Platform12SplashScreenPCcfffG10pddiColouri",
        Ok(
            "PS2Platform::DisplaySplashScreen(Platform::SplashScreen, char const *, float, float, float, pddiColour, int)",
        ),
    ),
    (
        "DisplaySplashScreen__11PS2PlatformPCcT1fffG10pddiColouri",
        Ok(
            "PS2Platform::DisplaySplashScreen(char const *, char const *, float, float, float, pddiColour, int)",
        ),
    ),
    (
        "InitializeFoundationDrive__11PS2Platform",
        Ok(
            "PS2Platform::InitializeFoundationDrive(void)",
        ),
    ),
    (
        "ShutdownFoundation__11PS2Platform",
        Ok(
            "PS2Platform::ShutdownFoundation(void)",
        ),
    ),
    (
        "InitializePure3D__11PS2Platform",
        Ok(
            "PS2Platform::InitializePure3D(void)",
        ),
    ),
    (
        "ShutdownPure3D__11PS2Platform",
        Ok(
            "PS2Platform::ShutdownPure3D(void)",
        ),
    ),
    (
        "SetProgressiveMode__11PS2Platformb",
        Ok(
            "PS2Platform::SetProgressiveMode(bool)",
        ),
    ),
    (
        "CheckForStartupButtons__11PS2Platform",
        Ok(
            "PS2Platform::CheckForStartupButtons(void)",
        ),
    ),
    (
        "OnControllerError__11PS2PlatformPCc",
        Ok(
            "PS2Platform::OnControllerError(char const *)",
        ),
    ),
    (
        "OnDriveError__11PS2Platform12radFileErrorPCcPv",
        Ok(
            "PS2Platform::OnDriveError(radFileError, char const *, void *)",
        ),
    ),
    (
        "__11PS2Platform",
        Ok(
            "PS2Platform::PS2Platform(void)",
        ),
    ),
    (
        "_$_11PS2Platform",
        Ok(
            "PS2Platform::~PS2Platform(void)",
        ),
    ),
    (
        "EnableSnProfiler__11PS2Platform",
        Ok(
            "PS2Platform::EnableSnProfiler(void)",
        ),
    ),
    (
        "CreateSingletons__Fv",
        Ok(
            "CreateSingletons(void)",
        ),
    ),
    (
        "DestroySingletons__Fv",
        Ok(
            "DestroySingletons(void)",
        ),
    ),
    (
        "__13tUidUnaligned",
        Ok(
            "tUidUnaligned::tUidUnaligned(void)",
        ),
    ),
    (
        "__13tUidUnalignedRC13tUidUnaligned",
        Ok(
            "tUidUnaligned::tUidUnaligned(tUidUnaligned const &)",
        ),
    ),
    (
        "__ne__C13tUidUnalignedG13tUidUnaligned",
        Ok(
            "tUidUnaligned::operator!=(tUidUnaligned) const",
        ),
    ),
    (
        "__eq__C13tUidUnalignedG13tUidUnaligned",
        Ok(
            "tUidUnaligned::operator==(tUidUnaligned) const",
        ),
    ),
    (
        "__lt__C13tUidUnalignedG13tUidUnaligned",
        Ok(
            "tUidUnaligned::operator<(tUidUnaligned) const",
        ),
    ),
    (
        "__er__C13tUidUnalignedG13tUidUnaligned",
        Ok(
            "tUidUnaligned::operator^(tUidUnaligned) const",
        ),
    ),
    (
        "__aml__13tUidUnalignedUl",
        Ok(
            "tUidUnaligned::operator*=(unsigned long)",
        ),
    ),
    (
        "__ad__C13tUidUnalignedG13tUidUnaligned",
        Ok(
            "tUidUnaligned::operator&(tUidUnaligned) const",
        ),
    ),
    (
        "__rs__C13tUidUnalignedi",
        Ok(
            "tUidUnaligned::operator>>(int) const",
        ),
    ),
    (
        "__tf4Game",
        Ok(
            "Game type_info function",
        ),
    ),
    (
        "__tf11PS2Platform",
        Ok(
            "PS2Platform type_info function",
        ),
    ),
    (
        "__11tBMPHandler",
        Ok(
            "tBMPHandler::tBMPHandler(void)",
        ),
    ),
    (
        "__11tPNGHandler",
        Ok(
            "tPNGHandler::tPNGHandler(void)",
        ),
    ),
    (
        "__13tTargaHandler",
        Ok(
            "tTargaHandler::tTargaHandler(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z12tTextureFont",
        Ok(
            "radLoadInventory::SafeCast<tTextureFont>::SafeCast(void)",
        ),
    ),
    (
        "__tf8Platform",
        Ok(
            "Platform type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z12tTextureFont",
        Ok(
            "radLoadInventory::SafeCast<tTextureFont> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z12tTextureFontP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tTextureFont>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$_18CommandLineOptions$sOptions",
        Ok(
            "global constructors keyed to CommandLineOptions::sOptions",
        ),
    ),
    (
        "CreateHeap__F19GameMemoryAllocatorUi",
        Ok(
            "CreateHeap(GameMemoryAllocator, unsigned int)",
        ),
    ),
    (
        "DestroyHeapA__F19GameMemoryAllocator",
        Ok(
            "DestroyHeapA(GameMemoryAllocator)",
        ),
    ),
    (
        "GetAllocator__F19GameMemoryAllocator",
        Ok(
            "GetAllocator(GameMemoryAllocator)",
        ),
    ),
    (
        "GetHeapReference__F19GameMemoryAllocator",
        Ok(
            "GetHeapReference(GameMemoryAllocator)",
        ),
    ),
    (
        "GetTotalMemoryFreeInAllHeaps__Fv",
        Ok(
            "GetTotalMemoryFreeInAllHeaps(void)",
        ),
    ),
    (
        "__12FBMemoryPoolUii19GameMemoryAllocator",
        Ok(
            "FBMemoryPool::FBMemoryPool(unsigned int, int, GameMemoryAllocator)",
        ),
    ),
    (
        "_$_12FBMemoryPool",
        Ok(
            "FBMemoryPool::~FBMemoryPool(void)",
        ),
    ),
    (
        "Allocate__12FBMemoryPoolUi",
        Ok(
            "FBMemoryPool::Allocate(unsigned int)",
        ),
    ),
    (
        "Free__12FBMemoryPoolPvUi",
        Ok(
            "FBMemoryPool::Free(void *, unsigned int)",
        ),
    ),
    (
        "AllocateLargestFreeBlock__6MemoryP19IRadMemoryAllocatorRPv",
        Ok(
            "Memory::AllocateLargestFreeBlock(IRadMemoryAllocator *, void *&)",
        ),
    ),
    (
        "InitializeMemoryUtilities__6Memoryv",
        Ok(
            "Memory::InitializeMemoryUtilities(void)",
        ),
    ),
    (
        "GetFreeMemoryProfile__6Memoryv",
        Ok(
            "Memory::GetFreeMemoryProfile(void)",
        ),
    ),
    (
        "GetLargestFreeBlock__6Memoryv",
        Ok(
            "Memory::GetLargestFreeBlock(void)",
        ),
    ),
    (
        "GetLargestFreeBlock__6MemoryP19IRadMemoryAllocator",
        Ok(
            "Memory::GetLargestFreeBlock(IRadMemoryAllocator *)",
        ),
    ),
    (
        "GetMaxFreeMemory__6Memoryv",
        Ok(
            "Memory::GetMaxFreeMemory(void)",
        ),
    ),
    (
        "GetTotalMemoryFree__6Memoryv",
        Ok(
            "Memory::GetTotalMemoryFree(void)",
        ),
    ),
    (
        "GetTotalMemoryFreeLowWaterMark__6Memoryv",
        Ok(
            "Memory::GetTotalMemoryFreeLowWaterMark(void)",
        ),
    ),
    (
        "GetTotalMemoryUnavailable__6Memoryv",
        Ok(
            "Memory::GetTotalMemoryUnavailable(void)",
        ),
    ),
    (
        "GetTotalMemoryUsed__6Memoryv",
        Ok(
            "Memory::GetTotalMemoryUsed(void)",
        ),
    ),
    (
        "PrintMemoryStatsToTty__6Memoryv",
        Ok(
            "Memory::PrintMemoryStatsToTty(void)",
        ),
    ),
    (
        "__builtin_new",
        Err(
            InvalidSpecialMethod(
                "builtin_new",
            ),
        ),
    ),
    (
        "__builtin_delete",
        Err(
            InvalidSpecialMethod(
                "builtin_delete",
            ),
        ),
    ),
    (
        "__builtin_vec_new",
        Err(
            InvalidSpecialMethod(
                "builtin_vec_new",
            ),
        ),
    ),
    (
        "__builtin_vec_delete",
        Err(
            InvalidSpecialMethod(
                "builtin_vec_delete",
            ),
        ),
    ),
    (
        "__nw__FUi19GameMemoryAllocator",
        Ok(
            "operator new(unsigned int, GameMemoryAllocator)",
        ),
    ),
    (
        "__dl__FPv19GameMemoryAllocator",
        Ok(
            "operator delete(void *, GameMemoryAllocator)",
        ),
    ),
    (
        "__vn__FUi19GameMemoryAllocator",
        Ok(
            "operator new [](unsigned int, GameMemoryAllocator)",
        ),
    ),
    (
        "FindFreeMemory__F19GameMemoryAllocatorUi",
        Ok(
            "FindFreeMemory(GameMemoryAllocator, unsigned int)",
        ),
    ),
    (
        "SetupAllocatorSearch__F19GameMemoryAllocator",
        Ok(
            "SetupAllocatorSearch(GameMemoryAllocator)",
        ),
    ),
    (
        "PrintOutOfMemoryMessage__FPviUi",
        Ok(
            "PrintOutOfMemoryMessage(void *, int, unsigned int)",
        ),
    ),
    (
        "__9HeapStack19GameMemoryAllocator",
        Ok(
            "HeapStack::HeapStack(GameMemoryAllocator)",
        ),
    ),
    (
        "_$_9HeapStack",
        Ok(
            "HeapStack::~HeapStack(void)",
        ),
    ),
    (
        "Push__9HeapStack19GameMemoryAllocator",
        Ok(
            "HeapStack::Push(GameMemoryAllocator)",
        ),
    ),
    (
        "Pop__9HeapStack19GameMemoryAllocator",
        Ok(
            "HeapStack::Pop(GameMemoryAllocator)",
        ),
    ),
    (
        "SetTop__9HeapStack19GameMemoryAllocator",
        Ok(
            "HeapStack::SetTop(GameMemoryAllocator)",
        ),
    ),
    (
        "Top__C9HeapStack",
        Ok(
            "HeapStack::Top(void) const",
        ),
    ),
    (
        "__19HeapActivityTracker",
        Ok(
            "HeapActivityTracker::HeapActivityTracker(void)",
        ),
    ),
    (
        "MemoryAllocated__19HeapActivityTrackeriPvUi",
        Ok(
            "HeapActivityTracker::MemoryAllocated(int, void *, unsigned int)",
        ),
    ),
    (
        "MemoryFreed__19HeapActivityTrackeriPv",
        Ok(
            "HeapActivityTracker::MemoryFreed(int, void *)",
        ),
    ),
    (
        "GetInstance__11HeapManager",
        Ok(
            "HeapManager::GetInstance(void)",
        ),
    ),
    (
        "__11HeapManager19GameMemoryAllocator",
        Ok(
            "HeapManager::HeapManager(GameMemoryAllocator)",
        ),
    ),
    (
        "_$_11HeapManager",
        Ok(
            "HeapManager::~HeapManager(void)",
        ),
    ),
    (
        "GetFudgeFactor__11HeapManager",
        Ok(
            "HeapManager::GetFudgeFactor(void)",
        ),
    ),
    (
        "PushHeap__11HeapManager19GameMemoryAllocator",
        Ok(
            "HeapManager::PushHeap(GameMemoryAllocator)",
        ),
    ),
    (
        "PopHeap__11HeapManager19GameMemoryAllocator",
        Ok(
            "HeapManager::PopHeap(GameMemoryAllocator)",
        ),
    ),
    (
        "GetCurrentHeap__C11HeapManager",
        Ok(
            "HeapManager::GetCurrentHeap(void) const",
        ),
    ),
    (
        "GetCurrentAllocator__11HeapManager",
        Ok(
            "HeapManager::GetCurrentAllocator(void)",
        ),
    ),
    (
        "SetCurrentAllocator__11HeapManageri",
        Ok(
            "HeapManager::SetCurrentAllocator(int)",
        ),
    ),
    (
        "DumpHeapStats__11HeapManagerb",
        Ok(
            "HeapManager::DumpHeapStats(bool)",
        ),
    ),
    (
        "ResetArtStats__11HeapManager",
        Ok(
            "HeapManager::ResetArtStats(void)",
        ),
    ),
    (
        "PrepareHeapsStartup__11HeapManager",
        Ok(
            "HeapManager::PrepareHeapsStartup(void)",
        ),
    ),
    (
        "PrepareHeapsFE__11HeapManager",
        Ok(
            "HeapManager::PrepareHeapsFE(void)",
        ),
    ),
    (
        "PrepareHeapsInGame__11HeapManager",
        Ok(
            "HeapManager::PrepareHeapsInGame(void)",
        ),
    ),
    (
        "PrepareHeapsSuperSprint__11HeapManager",
        Ok(
            "HeapManager::PrepareHeapsSuperSprint(void)",
        ),
    ),
    (
        "HeapMgr__Fv",
        Ok(
            "HeapMgr(void)",
        ),
    ),
    (
        "_M_erase__t8_Rb_tree5ZPvZt4pair2ZCPvZUiZt10_Select1st1Zt4pair2ZCPvZUiZt4less1ZPvZt7s2alloc1Zt4pair2ZCPvZUiPt13_Rb_tree_node1Zt4pair2ZCPvZUi",
        Ok(
            "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, s2alloc<pair<void *const, unsigned int> > >::_M_erase(_Rb_tree_node<pair<void *const, unsigned int> > *)",
        ),
    ),
    (
        "_$_t19_Rb_tree_alloc_base3Zt4pair2ZCPvZUiZt7s2alloc1Zt4pair2ZCPvZUib0",
        Ok(
            "_Rb_tree_alloc_base<pair<void *const, unsigned int>, s2alloc<pair<void *const, unsigned int> >, false>::~_Rb_tree_alloc_base(void)",
        ),
    ),
    (
        "_$_t3map4ZPvZUiZt4less1ZPvZt7s2alloc1Zt4pair2ZCPvZUi",
        Ok(
            "map<void *, unsigned int, less<void *>, s2alloc<pair<void *const, unsigned int> > >::~map(void)",
        ),
    ),
    (
        "__tf9HeapStack",
        Ok(
            "HeapStack type_info function",
        ),
    ),
    (
        "__tf19HeapActivityTracker",
        Ok(
            "HeapActivityTracker type_info function",
        ),
    ),
    (
        "__tf11HeapManager",
        Ok(
            "HeapManager type_info function",
        ),
    ),
    (
        "__30IRadMemorySetAllocatorCallback",
        Ok(
            "IRadMemorySetAllocatorCallback::IRadMemorySetAllocatorCallback(void)",
        ),
    ),
    (
        "__26IRadMemoryActivityCallback",
        Ok(
            "IRadMemoryActivityCallback::IRadMemoryActivityCallback(void)",
        ),
    ),
    (
        "__tf30IRadMemorySetAllocatorCallback",
        Ok(
            "IRadMemorySetAllocatorCallback type_info function",
        ),
    ),
    (
        "__tf26IRadMemoryActivityCallback",
        Ok(
            "IRadMemoryActivityCallback type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$g_HeapCreationData",
        Ok(
            "global constructors keyed to g_HeapCreationData",
        ),
    ),
    (
        "_GLOBAL_$D$g_HeapCreationData",
        Ok(
            "global destructors keyed to g_HeapCreationData",
        ),
    ),
    (
        "PrepareString__FPPcPUcUi",
        Ok(
            "PrepareString(char **, unsigned char *, unsigned int)",
        ),
    ),
    (
        "SetString__FPPcUiPCc",
        Ok(
            "SetString(char **, unsigned int, char const *)",
        ),
    ),
    (
        "__18ActionEventLocator",
        Ok(
            "ActionEventLocator::ActionEventLocator(void)",
        ),
    ),
    (
        "_$_18ActionEventLocator",
        Ok(
            "ActionEventLocator::~ActionEventLocator(void)",
        ),
    ),
    (
        "SetObjNameSize__18ActionEventLocatorUc",
        Ok(
            "ActionEventLocator::SetObjNameSize(unsigned char)",
        ),
    ),
    (
        "SetObjName__18ActionEventLocatorPCc",
        Ok(
            "ActionEventLocator::SetObjName(char const *)",
        ),
    ),
    (
        "SetJointNameSize__18ActionEventLocatorUc",
        Ok(
            "ActionEventLocator::SetJointNameSize(unsigned char)",
        ),
    ),
    (
        "SetJointName__18ActionEventLocatorPCc",
        Ok(
            "ActionEventLocator::SetJointName(char const *)",
        ),
    ),
    (
        "SetActionNameSize__18ActionEventLocatorUc",
        Ok(
            "ActionEventLocator::SetActionNameSize(unsigned char)",
        ),
    ),
    (
        "SetActionName__18ActionEventLocatorPCc",
        Ok(
            "ActionEventLocator::SetActionName(char const *)",
        ),
    ),
    (
        "AddToGame__18ActionEventLocatorP12tEntityStore",
        Ok(
            "ActionEventLocator::AddToGame(tEntityStore *)",
        ),
    ),
    (
        "Reset__18ActionEventLocator",
        Ok(
            "ActionEventLocator::Reset(void)",
        ),
    ),
    (
        "OnTrigger__18ActionEventLocatorUi",
        Ok(
            "ActionEventLocator::OnTrigger(unsigned int)",
        ),
    ),
    (
        "__15CarStartLocator",
        Ok(
            "CarStartLocator::CarStartLocator(void)",
        ),
    ),
    (
        "_$_15CarStartLocator",
        Ok(
            "CarStartLocator::~CarStartLocator(void)",
        ),
    ),
    (
        "__18DirectionalLocator",
        Ok(
            "DirectionalLocator::DirectionalLocator(void)",
        ),
    ),
    (
        "_$_18DirectionalLocator",
        Ok(
            "DirectionalLocator::~DirectionalLocator(void)",
        ),
    ),
    (
        "__12EventLocator",
        Ok(
            "EventLocator::EventLocator(void)",
        ),
    ),
    (
        "_$_12EventLocator",
        Ok(
            "EventLocator::~EventLocator(void)",
        ),
    ),
    (
        "OnTrigger__12EventLocatorUi",
        Ok(
            "EventLocator::OnTrigger(unsigned int)",
        ),
    ),
    (
        "__10FOVLocator",
        Ok(
            "FOVLocator::FOVLocator(void)",
        ),
    ),
    (
        "_$_10FOVLocator",
        Ok(
            "FOVLocator::~FOVLocator(void)",
        ),
    ),
    (
        "RegisterDebugData__10FOVLocator",
        Ok(
            "FOVLocator::RegisterDebugData(void)",
        ),
    ),
    (
        "UnRegisterDebugData__10FOVLocator",
        Ok(
            "FOVLocator::UnRegisterDebugData(void)",
        ),
    ),
    (
        "OnTrigger__10FOVLocatorUi",
        Ok(
            "FOVLocator::OnTrigger(unsigned int)",
        ),
    ),
    (
        "__23InteriorEntranceLocator",
        Ok(
            "InteriorEntranceLocator::InteriorEntranceLocator(void)",
        ),
    ),
    (
        "_$_23InteriorEntranceLocator",
        Ok(
            "InteriorEntranceLocator::~InteriorEntranceLocator(void)",
        ),
    ),
    (
        "SetInteriorFileName__23InteriorEntranceLocatorPCc",
        Ok(
            "InteriorEntranceLocator::SetInteriorFileName(char const *)",
        ),
    ),
    (
        "SetInteriorFileNameSize__23InteriorEntranceLocatorUi",
        Ok(
            "InteriorEntranceLocator::SetInteriorFileNameSize(unsigned int)",
        ),
    ),
    (
        "OnTrigger__23InteriorEntranceLocatorUi",
        Ok(
            "InteriorEntranceLocator::OnTrigger(unsigned int)",
        ),
    ),
    (
        "__7Locator",
        Ok(
            "Locator::Locator(void)",
        ),
    ),
    (
        "_$_7Locator",
        Ok(
            "Locator::~Locator(void)",
        ),
    ),
    (
        "GetPosition__7LocatorPQ218RadicalMathLibrary6Vector",
        Ok(
            "Locator::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetHeading__7LocatorPQ218RadicalMathLibrary6Vector",
        Ok(
            "Locator::GetHeading(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "__16OcclusionLocator",
        Ok(
            "OcclusionLocator::OcclusionLocator(void)",
        ),
    ),
    (
        "_$_16OcclusionLocator",
        Ok(
            "OcclusionLocator::~OcclusionLocator(void)",
        ),
    ),
    (
        "OnTrigger__16OcclusionLocatorUi",
        Ok(
            "OcclusionLocator::OnTrigger(unsigned int)",
        ),
    ),
    (
        "__17RectTriggerVolumeRCQ218RadicalMathLibrary6VectorN31fff",
        Ok(
            "RectTriggerVolume::RectTriggerVolume(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, float)",
        ),
    ),
    (
        "_$_17RectTriggerVolume",
        Ok(
            "RectTriggerVolume::~RectTriggerVolume(void)",
        ),
    ),
    (
        "Contains__C17RectTriggerVolumeRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "RectTriggerVolume::Contains(RadicalMathLibrary::Vector const &, float) const",
        ),
    ),
    (
        "IntersectsBox__C17RectTriggerVolumeRCQ218RadicalMathLibrary6VectorN31",
        Ok(
            "RectTriggerVolume::IntersectsBox(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
        ),
    ),
    (
        "IntersectsBox__17RectTriggerVolumeRCQ218RadicalMathLibrary5Box3D",
        Ok(
            "RectTriggerVolume::IntersectsBox(RadicalMathLibrary::Box3D const &)",
        ),
    ),
    (
        "IntersectsSphere__C17RectTriggerVolumeRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "RectTriggerVolume::IntersectsSphere(RadicalMathLibrary::Vector const &, float) const",
        ),
    ),
    (
        "IntersectLine__C17RectTriggerVolumeRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "RectTriggerVolume::IntersectLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
        ),
    ),
    (
        "GetBoundingBox__C17RectTriggerVolumeRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "RectTriggerVolume::GetBoundingBox(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetType__C17RectTriggerVolume",
        Ok(
            "RectTriggerVolume::GetType(void) const",
        ),
    ),
    (
        "GetBoundingBox__17RectTriggerVolumePQ218RadicalMathLibrary5Box3D",
        Ok(
            "RectTriggerVolume::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__17RectTriggerVolumePQ218RadicalMathLibrary6Sphere",
        Ok(
            "RectTriggerVolume::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "SetTransform__17RectTriggerVolumeRQ218RadicalMathLibrary6Matrix",
        Ok(
            "RectTriggerVolume::SetTransform(RadicalMathLibrary::Matrix &)",
        ),
    ),
    (
        "UpdateW2T__17RectTriggerVolume",
        Ok(
            "RectTriggerVolume::UpdateW2T(void)",
        ),
    ),
    (
        "InitPoints__17RectTriggerVolume",
        Ok(
            "RectTriggerVolume::InitPoints(void)",
        ),
    ),
    (
        "CalcPoints__17RectTriggerVolume",
        Ok(
            "RectTriggerVolume::CalcPoints(void)",
        ),
    ),
    (
        "__13ScriptLocator",
        Ok(
            "ScriptLocator::ScriptLocator(void)",
        ),
    ),
    (
        "_$_13ScriptLocator",
        Ok(
            "ScriptLocator::~ScriptLocator(void)",
        ),
    ),
    (
        "OnTrigger__13ScriptLocatorUi",
        Ok(
            "ScriptLocator::OnTrigger(unsigned int)",
        ),
    ),
    (
        "__19SphereTriggerVolume",
        Ok(
            "SphereTriggerVolume::SphereTriggerVolume(void)",
        ),
    ),
    (
        "__19SphereTriggerVolumeRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "SphereTriggerVolume::SphereTriggerVolume(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "_$_19SphereTriggerVolume",
        Ok(
            "SphereTriggerVolume::~SphereTriggerVolume(void)",
        ),
    ),
    (
        "Contains__C19SphereTriggerVolumeRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "SphereTriggerVolume::Contains(RadicalMathLibrary::Vector const &, float) const",
        ),
    ),
    (
        "IntersectsBox__C19SphereTriggerVolumeRCQ218RadicalMathLibrary6VectorN31",
        Ok(
            "SphereTriggerVolume::IntersectsBox(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
        ),
    ),
    (
        "IntersectsBox__19SphereTriggerVolumeRCQ218RadicalMathLibrary5Box3D",
        Ok(
            "SphereTriggerVolume::IntersectsBox(RadicalMathLibrary::Box3D const &)",
        ),
    ),
    (
        "IntersectLine__C19SphereTriggerVolumeRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "SphereTriggerVolume::IntersectLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
        ),
    ),
    (
        "IntersectsSphere__C19SphereTriggerVolumeRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "SphereTriggerVolume::IntersectsSphere(RadicalMathLibrary::Vector const &, float) const",
        ),
    ),
    (
        "GetBoundingBox__C19SphereTriggerVolumeRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "SphereTriggerVolume::GetBoundingBox(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetType__C19SphereTriggerVolume",
        Ok(
            "SphereTriggerVolume::GetType(void) const",
        ),
    ),
    (
        "GetBoundingBox__19SphereTriggerVolumePQ218RadicalMathLibrary5Box3D",
        Ok(
            "SphereTriggerVolume::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__19SphereTriggerVolumePQ218RadicalMathLibrary6Sphere",
        Ok(
            "SphereTriggerVolume::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "IntersectLineSphere__C19SphereTriggerVolumeRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "SphereTriggerVolume::IntersectLineSphere(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &) const",
        ),
    ),
    (
        "InitPoints__19SphereTriggerVolume",
        Ok(
            "SphereTriggerVolume::InitPoints(void)",
        ),
    ),
    (
        "CalcPoints__19SphereTriggerVolume",
        Ok(
            "SphereTriggerVolume::CalcPoints(void)",
        ),
    ),
    (
        "__13SplineLocator",
        Ok(
            "SplineLocator::SplineLocator(void)",
        ),
    ),
    (
        "_$_13SplineLocator",
        Ok(
            "SplineLocator::~SplineLocator(void)",
        ),
    ),
    (
        "SetRailCam__13SplineLocatorP7RailCam",
        Ok(
            "SplineLocator::SetRailCam(RailCam *)",
        ),
    ),
    (
        "TriggerAllowed__13SplineLocatori",
        Ok(
            "SplineLocator::TriggerAllowed(int)",
        ),
    ),
    (
        "OnTrigger__13SplineLocatorUi",
        Ok(
            "SplineLocator::OnTrigger(unsigned int)",
        ),
    ),
    (
        "__14TriggerLocator",
        Ok(
            "TriggerLocator::TriggerLocator(void)",
        ),
    ),
    (
        "_$_14TriggerLocator",
        Ok(
            "TriggerLocator::~TriggerLocator(void)",
        ),
    ),
    (
        "SetNumTriggers__14TriggerLocatorUii",
        Ok(
            "TriggerLocator::SetNumTriggers(unsigned int, int)",
        ),
    ),
    (
        "AddTriggerVolume__14TriggerLocatorP13TriggerVolume",
        Ok(
            "TriggerLocator::AddTriggerVolume(TriggerVolume *)",
        ),
    ),
    (
        "GetTriggerVolume__14TriggerLocatorUi",
        Ok(
            "TriggerLocator::GetTriggerVolume(unsigned int)",
        ),
    ),
    (
        "IsPlayerTracked__C14TriggerLocatori",
        Ok(
            "TriggerLocator::IsPlayerTracked(int) const",
        ),
    ),
    (
        "__13TriggerVolume",
        Ok(
            "TriggerVolume::TriggerVolume(void)",
        ),
    ),
    (
        "_$_13TriggerVolume",
        Ok(
            "TriggerVolume::~TriggerVolume(void)",
        ),
    ),
    (
        "Trigger__13TriggerVolumeUib",
        Ok(
            "TriggerVolume::Trigger(unsigned int, bool)",
        ),
    ),
    (
        "SetLocator__13TriggerVolumeP14TriggerLocator",
        Ok(
            "TriggerVolume::SetLocator(TriggerLocator *)",
        ),
    ),
    (
        "Render__13TriggerVolume",
        Ok(
            "TriggerVolume::Render(void)",
        ),
    ),
    (
        "GetBoundingBox__13TriggerVolumePQ218RadicalMathLibrary5Box3D",
        Ok(
            "TriggerVolume::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__13TriggerVolumePQ218RadicalMathLibrary6Sphere",
        Ok(
            "TriggerVolume::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "Display__13TriggerVolume",
        Ok(
            "TriggerVolume::Display(void)",
        ),
    ),
    (
        "TriggerAllowed__13TriggerVolumei",
        Ok(
            "TriggerVolume::TriggerAllowed(int)",
        ),
    ),
    (
        "ClearPoints__13TriggerVolume",
        Ok(
            "TriggerVolume::ClearPoints(void)",
        ),
    ),
    (
        "CreateInstance__20TriggerVolumeTracker",
        Ok(
            "TriggerVolumeTracker::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__20TriggerVolumeTracker",
        Ok(
            "TriggerVolumeTracker::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__20TriggerVolumeTracker",
        Ok(
            "TriggerVolumeTracker::DestroyInstance(void)",
        ),
    ),
    (
        "__20TriggerVolumeTracker",
        Ok(
            "TriggerVolumeTracker::TriggerVolumeTracker(void)",
        ),
    ),
    (
        "_$_20TriggerVolumeTracker",
        Ok(
            "TriggerVolumeTracker::~TriggerVolumeTracker(void)",
        ),
    ),
    (
        "Cleanup__20TriggerVolumeTracker",
        Ok(
            "TriggerVolumeTracker::Cleanup(void)",
        ),
    ),
    (
        "Update__20TriggerVolumeTrackeri",
        Ok(
            "TriggerVolumeTracker::Update(int)",
        ),
    ),
    (
        "AddTrigger__20TriggerVolumeTrackerP13TriggerVolume",
        Ok(
            "TriggerVolumeTracker::AddTrigger(TriggerVolume *)",
        ),
    ),
    (
        "RemoveTrigger__20TriggerVolumeTrackerP13TriggerVolume",
        Ok(
            "TriggerVolumeTracker::RemoveTrigger(TriggerVolume *)",
        ),
    ),
    (
        "HandleEvent__20TriggerVolumeTracker9EventEnumPv",
        Ok(
            "TriggerVolumeTracker::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Render__20TriggerVolumeTracker",
        Ok(
            "TriggerVolumeTracker::Render(void)",
        ),
    ),
    (
        "RegisterAI__20TriggerVolumeTrackerP7Vehiclei",
        Ok(
            "TriggerVolumeTracker::RegisterAI(Vehicle *, int)",
        ),
    ),
    (
        "UnregisterAI__20TriggerVolumeTrackerP7Vehicle",
        Ok(
            "TriggerVolumeTracker::UnregisterAI(Vehicle *)",
        ),
    ),
    (
        "GetAI__20TriggerVolumeTrackeri",
        Ok(
            "TriggerVolumeTracker::GetAI(int)",
        ),
    ),
    (
        "AddActive__20TriggerVolumeTrackeriP13TriggerVolume",
        Ok(
            "TriggerVolumeTracker::AddActive(int, TriggerVolume *)",
        ),
    ),
    (
        "CheckForActiveVolumes__20TriggerVolumeTrackeriRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "TriggerVolumeTracker::CheckForActiveVolumes(int, RadicalMathLibrary::Vector &, float)",
        ),
    ),
    (
        "RemoveActive__20TriggerVolumeTrackerii",
        Ok(
            "TriggerVolumeTracker::RemoveActive(int, int)",
        ),
    ),
    (
        "AddAIActive__20TriggerVolumeTrackeriP13TriggerVolume",
        Ok(
            "TriggerVolumeTracker::AddAIActive(int, TriggerVolume *)",
        ),
    ),
    (
        "RemoveAIActive__20TriggerVolumeTrackerii",
        Ok(
            "TriggerVolumeTracker::RemoveAIActive(int, int)",
        ),
    ),
    (
        "TestVolume__20TriggerVolumeTrackerP13TriggerVolumeRQ218RadicalMathLibrary6VectorfiUi",
        Ok(
            "TriggerVolumeTracker::TestVolume(TriggerVolume *, RadicalMathLibrary::Vector &, float, int, unsigned int)",
        ),
    ),
    (
        "__16ZoneEventLocator",
        Ok(
            "ZoneEventLocator::ZoneEventLocator(void)",
        ),
    ),
    (
        "_$_16ZoneEventLocator",
        Ok(
            "ZoneEventLocator::~ZoneEventLocator(void)",
        ),
    ),
    (
        "GetNumLoadZones__16ZoneEventLocator",
        Ok(
            "ZoneEventLocator::GetNumLoadZones(void)",
        ),
    ),
    (
        "GetNumDumpZones__16ZoneEventLocator",
        Ok(
            "ZoneEventLocator::GetNumDumpZones(void)",
        ),
    ),
    (
        "GetNumLWSActivates__16ZoneEventLocator",
        Ok(
            "ZoneEventLocator::GetNumLWSActivates(void)",
        ),
    ),
    (
        "GetNumLWSDeactivates__16ZoneEventLocator",
        Ok(
            "ZoneEventLocator::GetNumLWSDeactivates(void)",
        ),
    ),
    (
        "GetLoadZone__16ZoneEventLocatori",
        Ok(
            "ZoneEventLocator::GetLoadZone(int)",
        ),
    ),
    (
        "GetDumpZone__16ZoneEventLocatori",
        Ok(
            "ZoneEventLocator::GetDumpZone(int)",
        ),
    ),
    (
        "GetLWSActivates__16ZoneEventLocatori",
        Ok(
            "ZoneEventLocator::GetLWSActivates(int)",
        ),
    ),
    (
        "GetLWSDeactivates__16ZoneEventLocatori",
        Ok(
            "ZoneEventLocator::GetLWSDeactivates(int)",
        ),
    ),
    (
        "GetInteriorSection__16ZoneEventLocator",
        Ok(
            "ZoneEventLocator::GetInteriorSection(void)",
        ),
    ),
    (
        "SetZone__16ZoneEventLocatorPCc",
        Ok(
            "ZoneEventLocator::SetZone(char const *)",
        ),
    ),
    (
        "SetZoneSize__16ZoneEventLocatorUc",
        Ok(
            "ZoneEventLocator::SetZoneSize(unsigned char)",
        ),
    ),
    (
        "__16StaticCamLocator",
        Ok(
            "StaticCamLocator::StaticCamLocator(void)",
        ),
    ),
    (
        "_$_16StaticCamLocator",
        Ok(
            "StaticCamLocator::~StaticCamLocator(void)",
        ),
    ),
    (
        "SetStaticCam__16StaticCamLocatorP9StaticCam",
        Ok(
            "StaticCamLocator::SetStaticCam(StaticCam *)",
        ),
    ),
    (
        "TriggerAllowed__16StaticCamLocatori",
        Ok(
            "StaticCamLocator::TriggerAllowed(int)",
        ),
    ),
    (
        "OnTrigger__16StaticCamLocatorUi",
        Ok(
            "StaticCamLocator::OnTrigger(unsigned int)",
        ),
    ),
    (
        "__tf7Locator",
        Ok(
            "Locator type_info function",
        ),
    ),
    (
        "__tf14TriggerLocator",
        Ok(
            "TriggerLocator type_info function",
        ),
    ),
    (
        "__tf18ActionEventLocator",
        Ok(
            "ActionEventLocator type_info function",
        ),
    ),
    (
        "__tf15CarStartLocator",
        Ok(
            "CarStartLocator type_info function",
        ),
    ),
    (
        "__tf18DirectionalLocator",
        Ok(
            "DirectionalLocator type_info function",
        ),
    ),
    (
        "__tf12EventLocator",
        Ok(
            "EventLocator type_info function",
        ),
    ),
    (
        "__tf10FOVLocator",
        Ok(
            "FOVLocator type_info function",
        ),
    ),
    (
        "__tf23InteriorEntranceLocator",
        Ok(
            "InteriorEntranceLocator type_info function",
        ),
    ),
    (
        "__tf16OcclusionLocator",
        Ok(
            "OcclusionLocator type_info function",
        ),
    ),
    (
        "__tf13TriggerVolume",
        Ok(
            "TriggerVolume type_info function",
        ),
    ),
    (
        "__tf17RectTriggerVolume",
        Ok(
            "RectTriggerVolume type_info function",
        ),
    ),
    (
        "__tf13ScriptLocator",
        Ok(
            "ScriptLocator type_info function",
        ),
    ),
    (
        "__tf19SphereTriggerVolume",
        Ok(
            "SphereTriggerVolume type_info function",
        ),
    ),
    (
        "__tf13SplineLocator",
        Ok(
            "SplineLocator type_info function",
        ),
    ),
    (
        "__tf20TriggerVolumeTracker",
        Ok(
            "TriggerVolumeTracker type_info function",
        ),
    ),
    (
        "__tf16ZoneEventLocator",
        Ok(
            "ZoneEventLocator type_info function",
        ),
    ),
    (
        "__tf16StaticCamLocator",
        Ok(
            "StaticCamLocator type_info function",
        ),
    ),
    (
        "SetNumTriggers__7LocatorUii",
        Ok(
            "Locator::SetNumTriggers(unsigned int, int)",
        ),
    ),
    (
        "GetNumTriggers__7Locator",
        Ok(
            "Locator::GetNumTriggers(void)",
        ),
    ),
    (
        "SetMatrix__7LocatorRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "Locator::SetMatrix(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "TriggerAllowed__7Locatori",
        Ok(
            "Locator::TriggerAllowed(int)",
        ),
    ),
    (
        "GetDataType__C7Locator",
        Ok(
            "Locator::GetDataType(void) const",
        ),
    ),
    (
        "OnTrigger__14TriggerLocatorUi",
        Ok(
            "TriggerLocator::OnTrigger(unsigned int)",
        ),
    ),
    (
        "GetNumTriggers__14TriggerLocator",
        Ok(
            "TriggerLocator::GetNumTriggers(void)",
        ),
    ),
    (
        "GetDataType__C18ActionEventLocator",
        Ok(
            "ActionEventLocator::GetDataType(void) const",
        ),
    ),
    (
        "SetMatrix__18ActionEventLocatorRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "ActionEventLocator::SetMatrix(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "GetDataType__C15CarStartLocator",
        Ok(
            "CarStartLocator::GetDataType(void) const",
        ),
    ),
    (
        "GetDataType__C18DirectionalLocator",
        Ok(
            "DirectionalLocator::GetDataType(void) const",
        ),
    ),
    (
        "GetDataType__C12EventLocator",
        Ok(
            "EventLocator::GetDataType(void) const",
        ),
    ),
    (
        "SetMatrix__12EventLocatorRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "EventLocator::SetMatrix(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "GetDataType__C10FOVLocator",
        Ok(
            "FOVLocator::GetDataType(void) const",
        ),
    ),
    (
        "GetDataType__C23InteriorEntranceLocator",
        Ok(
            "InteriorEntranceLocator::GetDataType(void) const",
        ),
    ),
    (
        "GetDataType__C16OcclusionLocator",
        Ok(
            "OcclusionLocator::GetDataType(void) const",
        ),
    ),
    (
        "pPosition__13TriggerVolume",
        Ok(
            "TriggerVolume::pPosition(void)",
        ),
    ),
    (
        "rPosition__13TriggerVolume",
        Ok(
            "TriggerVolume::rPosition(void)",
        ),
    ),
    (
        "GetPosition__13TriggerVolumePQ218RadicalMathLibrary6Vector",
        Ok(
            "TriggerVolume::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetDataType__C13ScriptLocator",
        Ok(
            "ScriptLocator::GetDataType(void) const",
        ),
    ),
    (
        "GetDataType__C13SplineLocator",
        Ok(
            "SplineLocator::GetDataType(void) const",
        ),
    ),
    (
        "GetDataType__C16ZoneEventLocator",
        Ok(
            "ZoneEventLocator::GetDataType(void) const",
        ),
    ),
    (
        "GetDataType__C16StaticCamLocator",
        Ok(
            "StaticCamLocator::GetDataType(void) const",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z13TriggerVolume",
        Ok(
            "radLoadInventory::SafeCast<TriggerVolume> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z13TriggerVolumeP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<TriggerVolume>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$PrepareString__FPPcPUcUi",
        Ok(
            "global constructors keyed to PrepareString(char **, unsigned char *, unsigned int)",
        ),
    ),
    (
        "GetInstance__15GameplayManager",
        Ok(
            "GameplayManager::GetInstance(void)",
        ),
    ),
    (
        "SetInstance__15GameplayManagerP15GameplayManager",
        Ok(
            "GameplayManager::SetInstance(GameplayManager *)",
        ),
    ),
    (
        "__15GameplayManager",
        Ok(
            "GameplayManager::GameplayManager(void)",
        ),
    ),
    (
        "_$_15GameplayManager",
        Ok(
            "GameplayManager::~GameplayManager(void)",
        ),
    ),
    (
        "LevelLoaded__15GameplayManager",
        Ok(
            "GameplayManager::LevelLoaded(void)",
        ),
    ),
    (
        "SetLevelIndex__15GameplayManagerQ211RenderEnums9LevelEnum",
        Ok(
            "GameplayManager::SetLevelIndex(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "SetMissionIndex__15GameplayManagerQ211RenderEnums11MissionEnum",
        Ok(
            "GameplayManager::SetMissionIndex(RenderEnums::MissionEnum)",
        ),
    ),
    (
        "TestPosInFrustrumOfPlayer__15GameplayManagerRCQ218RadicalMathLibrary6Vectorif",
        Ok(
            "GameplayManager::TestPosInFrustrumOfPlayer(RadicalMathLibrary::Vector const &, int, float)",
        ),
    ),
    (
        "ContinueGameplay__15GameplayManager",
        Ok(
            "GameplayManager::ContinueGameplay(void)",
        ),
    ),
    (
        "Update__15GameplayManageri",
        Ok(
            "GameplayManager::Update(int)",
        ),
    ),
    (
        "PlaceCharacterAtLocator__15GameplayManagerP9CharacterP7Locator",
        Ok(
            "GameplayManager::PlaceCharacterAtLocator(Character *, Locator *)",
        ),
    ),
    (
        "PlaceVehicleAtLocator__15GameplayManagerP7VehicleP15CarStartLocator",
        Ok(
            "GameplayManager::PlaceVehicleAtLocator(Vehicle *, CarStartLocator *)",
        ),
    ),
    (
        "TestProximityToUsersCarAndNudgeUpIfNecessaryDamnUglyHack__15GameplayManagerRQ218RadicalMathLibrary6VectorP7Vehicle",
        Ok(
            "GameplayManager::TestProximityToUsersCarAndNudgeUpIfNecessaryDamnUglyHack(RadicalMathLibrary::Vector &, Vehicle *)",
        ),
    ),
    (
        "PlaceVehicleAtLocation__15GameplayManagerP7VehicleGQ218RadicalMathLibrary6Vectorf",
        Ok(
            "GameplayManager::PlaceVehicleAtLocation(Vehicle *, RadicalMathLibrary::Vector, float)",
        ),
    ),
    (
        "PlaceVehicleAtLocatorName__15GameplayManagerP7VehiclePCc",
        Ok(
            "GameplayManager::PlaceVehicleAtLocatorName(Vehicle *, char const *)",
        ),
    ),
    (
        "AddLevelVehicle__15GameplayManagerPcQ215GameplayManager9eCarSlotsT1",
        Ok(
            "GameplayManager::AddLevelVehicle(char *, GameplayManager::eCarSlots, char *)",
        ),
    ),
    (
        "RemoveLevelVehicleController__15GameplayManager",
        Ok(
            "GameplayManager::RemoveLevelVehicleController(void)",
        ),
    ),
    (
        "PauseForIrisClose__15GameplayManagerf",
        Ok(
            "GameplayManager::PauseForIrisClose(float)",
        ),
    ),
    (
        "PauseForIrisOpen__15GameplayManagerf",
        Ok(
            "GameplayManager::PauseForIrisOpen(float)",
        ),
    ),
    (
        "PauseForFadeToBlack__15GameplayManagerf",
        Ok(
            "GameplayManager::PauseForFadeToBlack(float)",
        ),
    ),
    (
        "PauseForFadeFromBlack__15GameplayManagerf",
        Ok(
            "GameplayManager::PauseForFadeFromBlack(float)",
        ),
    ),
    (
        "AddMissionVehicle__15GameplayManagerPcN21",
        Ok(
            "GameplayManager::AddMissionVehicle(char *, char *, char *)",
        ),
    ),
    (
        "EmptyMissionVehicleSlots__15GameplayManager",
        Ok(
            "GameplayManager::EmptyMissionVehicleSlots(void)",
        ),
    ),
    (
        "GetMissionVehicleByName__15GameplayManagerPCc",
        Ok(
            "GameplayManager::GetMissionVehicleByName(char const *)",
        ),
    ),
    (
        "GetUserVehicleByName__15GameplayManagerPCc",
        Ok(
            "GameplayManager::GetUserVehicleByName(char const *)",
        ),
    ),
    (
        "GetMissionVehicleIndex__15GameplayManagerP7Vehicle",
        Ok(
            "GameplayManager::GetMissionVehicleIndex(Vehicle *)",
        ),
    ),
    (
        "RepairVehicle__15GameplayManagerPQ215GameplayManager13CarDataStruct",
        Ok(
            "GameplayManager::RepairVehicle(GameplayManager::CarDataStruct *)",
        ),
    ),
    (
        "HandleEvent__15GameplayManager9EventEnumPv",
        Ok(
            "GameplayManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "GetCurrentVehicle__15GameplayManager",
        Ok(
            "GameplayManager::GetCurrentVehicle(void)",
        ),
    ),
    (
        "UnregisterVehicleHUDIcon__15GameplayManager",
        Ok(
            "GameplayManager::UnregisterVehicleHUDIcon(void)",
        ),
    ),
    (
        "SetCurrentVehicle__15GameplayManagerP7Vehicle",
        Ok(
            "GameplayManager::SetCurrentVehicle(Vehicle *)",
        ),
    ),
    (
        "DumpCurrentCar__15GameplayManager",
        Ok(
            "GameplayManager::DumpCurrentCar(void)",
        ),
    ),
    (
        "ClearVehicleSlotIfInSphere__15GameplayManagerQ215GameplayManager9eCarSlotsRCQ218RadicalMathLibrary6Sphere",
        Ok(
            "GameplayManager::ClearVehicleSlotIfInSphere(GameplayManager::eCarSlots, RadicalMathLibrary::Sphere const &)",
        ),
    ),
    (
        "DumpCurrentCarIfInSphere__15GameplayManagerRCQ218RadicalMathLibrary6Sphere",
        Ok(
            "GameplayManager::DumpCurrentCarIfInSphere(RadicalMathLibrary::Sphere const &)",
        ),
    ),
    (
        "MakeSureHusksAreReverted__15GameplayManagerP7Vehicle",
        Ok(
            "GameplayManager::MakeSureHusksAreReverted(Vehicle *)",
        ),
    ),
    (
        "ClearVehicleSlot__15GameplayManagerQ215GameplayManager9eCarSlots",
        Ok(
            "GameplayManager::ClearVehicleSlot(GameplayManager::eCarSlots)",
        ),
    ),
    (
        "CopyVehicleSlot__15GameplayManagerQ215GameplayManager9eCarSlotsT1",
        Ok(
            "GameplayManager::CopyVehicleSlot(GameplayManager::eCarSlots, GameplayManager::eCarSlots)",
        ),
    ),
    (
        "GetVehicleSlotFilename__15GameplayManagerQ215GameplayManager9eCarSlots",
        Ok(
            "GameplayManager::GetVehicleSlotFilename(GameplayManager::eCarSlots)",
        ),
    ),
    (
        "GetVehicleSlotVehicleName__15GameplayManagerQ215GameplayManager9eCarSlots",
        Ok(
            "GameplayManager::GetVehicleSlotVehicleName(GameplayManager::eCarSlots)",
        ),
    ),
    (
        "GetVehicleInSlot__15GameplayManagerQ215GameplayManager9eCarSlots",
        Ok(
            "GameplayManager::GetVehicleInSlot(GameplayManager::eCarSlots)",
        ),
    ),
    (
        "SetBonusMissionInfo__15GameplayManagerPCcN31bT1T5",
        Ok(
            "GameplayManager::SetBonusMissionInfo(char const *, char const *, char const *, char const *, bool, char const *, bool)",
        ),
    ),
    (
        "GetOverrideCharacterName__15GameplayManagerPc",
        Ok(
            "GameplayManager::GetOverrideCharacterName(char *)",
        ),
    ),
    (
        "Initialize__15GameplayManager",
        Ok(
            "GameplayManager::Initialize(void)",
        ),
    ),
    (
        "Finalize__15GameplayManager",
        Ok(
            "GameplayManager::Finalize(void)",
        ),
    ),
    (
        "SetCurrentMission__15GameplayManageri",
        Ok(
            "GameplayManager::SetCurrentMission(int)",
        ),
    ),
    (
        "NextMission__15GameplayManager",
        Ok(
            "GameplayManager::NextMission(void)",
        ),
    ),
    (
        "PrevMission__15GameplayManager",
        Ok(
            "GameplayManager::PrevMission(void)",
        ),
    ),
    (
        "DoNextMission__15GameplayManager",
        Ok(
            "GameplayManager::DoNextMission(void)",
        ),
    ),
    (
        "DoPrevMission__15GameplayManager",
        Ok(
            "GameplayManager::DoPrevMission(void)",
        ),
    ),
    (
        "GetCurrentMission__15GameplayManager",
        Ok(
            "GameplayManager::GetCurrentMission(void)",
        ),
    ),
    (
        "GetCurrentBonusMissionInfo__C15GameplayManager",
        Ok(
            "GameplayManager::GetCurrentBonusMissionInfo(void) const",
        ),
    ),
    (
        "GetBonusMissionInfo__15GameplayManageri",
        Ok(
            "GameplayManager::GetBonusMissionInfo(int)",
        ),
    ),
    (
        "GetMissionHeap__15GameplayManageri",
        Ok(
            "GameplayManager::GetMissionHeap(int)",
        ),
    ),
    (
        "GetCurrentMissionNum__C15GameplayManager",
        Ok(
            "GameplayManager::GetCurrentMissionNum(void) const",
        ),
    ),
    (
        "RestartCurrentMission__15GameplayManager",
        Ok(
            "GameplayManager::RestartCurrentMission(void)",
        ),
    ),
    (
        "RestartToMission__15GameplayManagerQ211RenderEnums11MissionEnum",
        Ok(
            "GameplayManager::RestartToMission(RenderEnums::MissionEnum)",
        ),
    ),
    (
        "AbortCurrentMission__15GameplayManager",
        Ok(
            "GameplayManager::AbortCurrentMission(void)",
        ),
    ),
    (
        "IsBonusMissionDesired__C15GameplayManager",
        Ok(
            "GameplayManager::IsBonusMissionDesired(void) const",
        ),
    ),
    (
        "CancelBonusMission__15GameplayManager",
        Ok(
            "GameplayManager::CancelBonusMission(void)",
        ),
    ),
    (
        "EnablePhoneBooths__15GameplayManager",
        Ok(
            "GameplayManager::EnablePhoneBooths(void)",
        ),
    ),
    (
        "DisablePhoneBooths__15GameplayManager",
        Ok(
            "GameplayManager::DisablePhoneBooths(void)",
        ),
    ),
    (
        "QueryPhoneBoothsEnabled__15GameplayManager",
        Ok(
            "GameplayManager::QueryPhoneBoothsEnabled(void)",
        ),
    ),
    (
        "CreateChaseManager__15GameplayManagerPcT1i",
        Ok(
            "GameplayManager::CreateChaseManager(char *, char *, int)",
        ),
    ),
    (
        "GetChaseManager__15GameplayManagerPc",
        Ok(
            "GameplayManager::GetChaseManager(char *)",
        ),
    ),
    (
        "GetChaseManager__15GameplayManageri",
        Ok(
            "GameplayManager::GetChaseManager(int)",
        ),
    ),
    (
        "GetMissionNumByName__15GameplayManagerPCc",
        Ok(
            "GameplayManager::GetMissionNumByName(char const *)",
        ),
    ),
    (
        "KillAllChaseManagers__15GameplayManager",
        Ok(
            "GameplayManager::KillAllChaseManagers(void)",
        ),
    ),
    (
        "EnableBonusMissions__15GameplayManager",
        Ok(
            "GameplayManager::EnableBonusMissions(void)",
        ),
    ),
    (
        "DisableBonusMissions__15GameplayManager",
        Ok(
            "GameplayManager::DisableBonusMissions(void)",
        ),
    ),
    (
        "DisableAllChaseAI__15GameplayManager",
        Ok(
            "GameplayManager::DisableAllChaseAI(void)",
        ),
    ),
    (
        "EnableAllChaseAI__15GameplayManager",
        Ok(
            "GameplayManager::EnableAllChaseAI(void)",
        ),
    ),
    (
        "GetGameType__15GameplayManager",
        Ok(
            "GameplayManager::GetGameType(void)",
        ),
    ),
    (
        "GetControllerColour__15GameplayManageri",
        Ok(
            "GameplayManager::GetControllerColour(int)",
        ),
    ),
    (
        "GetRespawnManager__15GameplayManager",
        Ok(
            "GameplayManager::GetRespawnManager(void)",
        ),
    ),
    (
        "SetPostLevelFMV__15GameplayManagerPCc",
        Ok(
            "GameplayManager::SetPostLevelFMV(char const *)",
        ),
    ),
    (
        "AddToVDU__15GameplayManagerP7Vehicle",
        Ok(
            "GameplayManager::AddToVDU(Vehicle *)",
        ),
    ),
    (
        "UpdateVDU__15GameplayManager",
        Ok(
            "GameplayManager::UpdateVDU(void)",
        ),
    ),
    (
        "MDKVDU__15GameplayManager",
        Ok(
            "GameplayManager::MDKVDU(void)",
        ),
    ),
    (
        "ReleaseFromVDU__15GameplayManagerPcPP7Vehicle",
        Ok(
            "GameplayManager::ReleaseFromVDU(char *, Vehicle **)",
        ),
    ),
    (
        "TestForContinuityErrorWithCar__15GameplayManagerP7Vehicleb",
        Ok(
            "GameplayManager::TestForContinuityErrorWithCar(Vehicle *, bool)",
        ),
    ),
    (
        "RemoveVehicleFromMissionVehicleSlots__15GameplayManagerP7Vehicle",
        Ok(
            "GameplayManager::RemoveVehicleFromMissionVehicleSlots(Vehicle *)",
        ),
    ),
    (
        "AbortFade__15GameplayManager",
        Ok(
            "GameplayManager::AbortFade(void)",
        ),
    ),
    (
        "__19HasPresentationInfo",
        Ok(
            "HasPresentationInfo::HasPresentationInfo(void)",
        ),
    ),
    (
        "_$_19HasPresentationInfo",
        Ok(
            "HasPresentationInfo::~HasPresentationInfo(void)",
        ),
    ),
    (
        "AddAmbientCharacterAnimation__19HasPresentationInfoUiRC5tName",
        Ok(
            "HasPresentationInfo::AddAmbientCharacterAnimation(unsigned int, tName const &)",
        ),
    ),
    (
        "AmbientCharacterAnimationSetRandom__19HasPresentationInfoUib",
        Ok(
            "HasPresentationInfo::AmbientCharacterAnimationSetRandom(unsigned int, bool)",
        ),
    ),
    (
        "ClearAmbientAnimations__19HasPresentationInfo",
        Ok(
            "HasPresentationInfo::ClearAmbientAnimations(void)",
        ),
    ),
    (
        "GoToPattyAndSelmaScreenWhenDone__19HasPresentationInfo",
        Ok(
            "HasPresentationInfo::GoToPattyAndSelmaScreenWhenDone(void)",
        ),
    ),
    (
        "OnStageCompleteSuccessful__C19HasPresentationInfo",
        Ok(
            "HasPresentationInfo::OnStageCompleteSuccessful(void) const",
        ),
    ),
    (
        "Reset__19HasPresentationInfo",
        Ok(
            "HasPresentationInfo::Reset(void)",
        ),
    ),
    (
        "SetCameraForDialogLine__19HasPresentationInfoUiRC5tName",
        Ok(
            "HasPresentationInfo::SetCameraForDialogLine(unsigned int, tName const &)",
        ),
    ),
    (
        "SetConversationCamName__19HasPresentationInfoRC5tName",
        Ok(
            "HasPresentationInfo::SetConversationCamName(tName const &)",
        ),
    ),
    (
        "SetConversationCamPcName__19HasPresentationInfoRC5tName",
        Ok(
            "HasPresentationInfo::SetConversationCamPcName(tName const &)",
        ),
    ),
    (
        "SetConversationCamNpcName__19HasPresentationInfoRC5tName",
        Ok(
            "HasPresentationInfo::SetConversationCamNpcName(tName const &)",
        ),
    ),
    (
        "SetBestSideLocator__19HasPresentationInfoRC5tName",
        Ok(
            "HasPresentationInfo::SetBestSideLocator(tName const &)",
        ),
    ),
    (
        "__7Mission",
        Ok(
            "Mission::Mission(void)",
        ),
    ),
    (
        "_$_7Mission",
        Ok(
            "Mission::~Mission(void)",
        ),
    ),
    (
        "Initialize__7Mission19GameMemoryAllocator",
        Ok(
            "Mission::Initialize(GameMemoryAllocator)",
        ),
    ),
    (
        "Finalize__7Mission",
        Ok(
            "Mission::Finalize(void)",
        ),
    ),
    (
        "SetToStage__7Missionib",
        Ok(
            "Mission::SetToStage(int, bool)",
        ),
    ),
    (
        "NextStage__7Mission",
        Ok(
            "Mission::NextStage(void)",
        ),
    ),
    (
        "PrevStage__7Mission",
        Ok(
            "Mission::PrevStage(void)",
        ),
    ),
    (
        "ResetStage__7Mission",
        Ok(
            "Mission::ResetStage(void)",
        ),
    ),
    (
        "HandleEvent__7Mission9EventEnumPv",
        Ok(
            "Mission::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Update__7MissionUi",
        Ok(
            "Mission::Update(unsigned int)",
        ),
    ),
    (
        "IsComplete__7Mission",
        Ok(
            "Mission::IsComplete(void)",
        ),
    ),
    (
        "SetRestartDynaload__7MissionPCcT1",
        Ok(
            "Mission::SetRestartDynaload(char const *, char const *)",
        ),
    ),
    (
        "AddBonusObjective__7MissionP14BonusObjective",
        Ok(
            "Mission::AddBonusObjective(BonusObjective *)",
        ),
    ),
    (
        "StartBonusObjectives__7Mission",
        Ok(
            "Mission::StartBonusObjectives(void)",
        ),
    ),
    (
        "SetForcedCar__7Missionb",
        Ok(
            "Mission::SetForcedCar(bool)",
        ),
    ),
    (
        "SetMissionTime__7Missioni",
        Ok(
            "Mission::SetMissionTime(int)",
        ),
    ),
    (
        "CreateStatePropCollectible__7MissionPCcT1i",
        Ok(
            "Mission::CreateStatePropCollectible(char const *, char const *, int)",
        ),
    ),
    (
        "AttachStatePropCollectible__7MissionPCcT1i",
        Ok(
            "Mission::AttachStatePropCollectible(char const *, char const *, int)",
        ),
    ),
    (
        "Reset__7Missionb",
        Ok(
            "Mission::Reset(bool)",
        ),
    ),
    (
        "ResetPlayer__7Mission",
        Ok(
            "Mission::ResetPlayer(void)",
        ),
    ),
    (
        "InitDynaLoad__7Mission",
        Ok(
            "Mission::InitDynaLoad(void)",
        ),
    ),
    (
        "SetInitPedGroup__7Missioni",
        Ok(
            "Mission::SetInitPedGroup(int)",
        ),
    ),
    (
        "DialogueCharactersTeleported__7Mission",
        Ok(
            "Mission::DialogueCharactersTeleported(void)",
        ),
    ),
    (
        "GetCurrentStage__7Mission",
        Ok(
            "Mission::GetCurrentStage(void)",
        ),
    ),
    (
        "GetMissionTimeLeftInSeconds__7Mission",
        Ok(
            "Mission::GetMissionTimeLeftInSeconds(void)",
        ),
    ),
    (
        "GetMissionTimeLeftInMilliSeconds__7Mission",
        Ok(
            "Mission::GetMissionTimeLeftInMilliSeconds(void)",
        ),
    ),
    (
        "DoUpdate__7Missioni",
        Ok(
            "Mission::DoUpdate(int)",
        ),
    ),
    (
        "SetBonusMission__7Mission",
        Ok(
            "Mission::SetBonusMission(void)",
        ),
    ),
    (
        "IsBonusMission__7Mission",
        Ok(
            "Mission::IsBonusMission(void)",
        ),
    ),
    (
        "IsRaceMission__7Mission",
        Ok(
            "Mission::IsRaceMission(void)",
        ),
    ),
    (
        "IsWagerMission__7Mission",
        Ok(
            "Mission::IsWagerMission(void)",
        ),
    ),
    (
        "UnlockStage__7MissionP12MissionStage",
        Ok(
            "Mission::UnlockStage(MissionStage *)",
        ),
    ),
    (
        "LoadStreetRaceProps__7MissionPCc",
        Ok(
            "Mission::LoadStreetRaceProps(char const *)",
        ),
    ),
    (
        "UnloadStreetRaceProps__7MissionPCc",
        Ok(
            "Mission::UnloadStreetRaceProps(char const *)",
        ),
    ),
    (
        "SetupStageChange__7Mission",
        Ok(
            "Mission::SetupStageChange(void)",
        ),
    ),
    (
        "DoStageChange__7Mission",
        Ok(
            "Mission::DoStageChange(void)",
        ),
    ),
    (
        "SetSwappedCarsFlag__7Missionb",
        Ok(
            "Mission::SetSwappedCarsFlag(bool)",
        ),
    ),
    (
        "GetSwappedCarsFlag__7Mission",
        Ok(
            "Mission::GetSwappedCarsFlag(void)",
        ),
    ),
    (
        "InitStreetRacePropLoad__7Mission",
        Ok(
            "Mission::InitStreetRacePropLoad(void)",
        ),
    ),
    (
        "InitStreetRacePropUnload__7Mission",
        Ok(
            "Mission::InitStreetRacePropUnload(void)",
        ),
    ),
    (
        "ShowHUD__7Missionb",
        Ok(
            "Mission::ShowHUD(bool)",
        ),
    ),
    (
        "CanMDKCar__7MissionP7VehicleP12MissionStage",
        Ok(
            "Mission::CanMDKCar(Vehicle *, MissionStage *)",
        ),
    ),
    (
        "GetInstance__14MissionManager",
        Ok(
            "MissionManager::GetInstance(void)",
        ),
    ),
    (
        "CreateInstance__14MissionManager",
        Ok(
            "MissionManager::CreateInstance(void)",
        ),
    ),
    (
        "DestroyInstance__14MissionManager",
        Ok(
            "MissionManager::DestroyInstance(void)",
        ),
    ),
    (
        "__14MissionManager",
        Ok(
            "MissionManager::MissionManager(void)",
        ),
    ),
    (
        "_$_14MissionManager",
        Ok(
            "MissionManager::~MissionManager(void)",
        ),
    ),
    (
        "Initialize__14MissionManager",
        Ok(
            "MissionManager::Initialize(void)",
        ),
    ),
    (
        "Finalize__14MissionManager",
        Ok(
            "MissionManager::Finalize(void)",
        ),
    ),
    (
        "Update__14MissionManageri",
        Ok(
            "MissionManager::Update(int)",
        ),
    ),
    (
        "Reset__14MissionManager",
        Ok(
            "MissionManager::Reset(void)",
        ),
    ),
    (
        "HandleEvent__14MissionManager9EventEnumPv",
        Ok(
            "MissionManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "PerformLoading__14MissionManager",
        Ok(
            "MissionManager::PerformLoading(void)",
        ),
    ),
    (
        "RestartCurrentMission__14MissionManager",
        Ok(
            "MissionManager::RestartCurrentMission(void)",
        ),
    ),
    (
        "RestartToMission__14MissionManagerQ211RenderEnums11MissionEnum",
        Ok(
            "MissionManager::RestartToMission(RenderEnums::MissionEnum)",
        ),
    ),
    (
        "AbortCurrentMission__14MissionManager",
        Ok(
            "MissionManager::AbortCurrentMission(void)",
        ),
    ),
    (
        "LoadLevelData__14MissionManager",
        Ok(
            "MissionManager::LoadLevelData(void)",
        ),
    ),
    (
        "InitLevelData__14MissionManager",
        Ok(
            "MissionManager::InitLevelData(void)",
        ),
    ),
    (
        "OnProcessRequestsComplete__14MissionManagerPv",
        Ok(
            "MissionManager::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "LoadMission__14MissionManager",
        Ok(
            "MissionManager::LoadMission(void)",
        ),
    ),
    (
        "CleanMissionData__14MissionManager",
        Ok(
            "MissionManager::CleanMissionData(void)",
        ),
    ),
    (
        "PutEffectHere__14MissionManagerRCQ218RadicalMathLibrary6Vector",
        Ok(
            "MissionManager::PutEffectHere(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "CreateInstance__19MissionScriptLoader",
        Ok(
            "MissionScriptLoader::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__19MissionScriptLoader",
        Ok(
            "MissionScriptLoader::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__19MissionScriptLoader",
        Ok(
            "MissionScriptLoader::DestroyInstance(void)",
        ),
    ),
    (
        "__19MissionScriptLoader",
        Ok(
            "MissionScriptLoader::MissionScriptLoader(void)",
        ),
    ),
    (
        "_$_19MissionScriptLoader",
        Ok(
            "MissionScriptLoader::~MissionScriptLoader(void)",
        ),
    ),
    (
        "Register__19MissionScriptLoader",
        Ok(
            "MissionScriptLoader::Register(void)",
        ),
    ),
    (
        "LoadScriptAsync__19MissionScriptLoaderPcPQ214LoadingManager23ProcessRequestsCallback",
        Ok(
            "MissionScriptLoader::LoadScriptAsync(char *, LoadingManager::ProcessRequestsCallback *)",
        ),
    ),
    (
        "OnExecuteScriptComplete__19MissionScriptLoaderPv",
        Ok(
            "MissionScriptLoader::OnExecuteScriptComplete(void *)",
        ),
    ),
    (
        "InitLevelPlayerVehicle__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::InitLevelPlayerVehicle(int, char **)",
        ),
    ),
    (
        "PlacePlayerCar__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::PlacePlayerCar(int, char **)",
        ),
    ),
    (
        "AddPurchaseCarReward__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddPurchaseCarReward(int, char **)",
        ),
    ),
    (
        "SetPostLevelFMV__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetPostLevelFMV(int, char **)",
        ),
    ),
    (
        "CreateChaseManager__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::CreateChaseManager(int, char **)",
        ),
    ),
    (
        "SetChaseSpawnRate__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetChaseSpawnRate(int, char **)",
        ),
    ),
    (
        "KillAllChaseAI__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::KillAllChaseAI(int, char **)",
        ),
    ),
    (
        "AddMission__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddMission(int, char **)",
        ),
    ),
    (
        "AddBonusMission__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddBonusMission(int, char **)",
        ),
    ),
    (
        "CloseMission__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::CloseMission(int, char **)",
        ),
    ),
    (
        "SetForcedCar__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetForcedCar(int, char **)",
        ),
    ),
    (
        "SetDemoLoopTime__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetDemoLoopTime(int, char **)",
        ),
    ),
    (
        "SelectMission__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SelectMission(int, char **)",
        ),
    ),
    (
        "SetMissionNameIndex__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetMissionNameIndex(int, char **)",
        ),
    ),
    (
        "SetMissionResetPlayerInCar__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetMissionResetPlayerInCar(int, char **)",
        ),
    ),
    (
        "SetMissionResetPlayerOutCar__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetMissionResetPlayerOutCar(int, char **)",
        ),
    ),
    (
        "SetDynaLoadData__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetDynaLoadData(int, char **)",
        ),
    ),
    (
        "AddBonusObjective__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddBonusObjective(int, char **)",
        ),
    ),
    (
        "AddObjective__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddObjective(int, char **)",
        ),
    ),
    (
        "AddNPC__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddNPC(int, char **)",
        ),
    ),
    (
        "AddDriver__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddDriver(int, char **)",
        ),
    ),
    (
        "RemoveNPC__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::RemoveNPC(int, char **)",
        ),
    ),
    (
        "RemoveDriver__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::RemoveDriver(int, char **)",
        ),
    ),
    (
        "SetTalkToTarget__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetTalkToTarget(int, char **)",
        ),
    ),
    (
        "SetDialogueInfo__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetDialogueInfo(int, char **)",
        ),
    ),
    (
        "SetDialoguePositions__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetDialoguePositions(int, char **)",
        ),
    ),
    (
        "SetRaceLaps__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetRaceLaps(int, char **)",
        ),
    ),
    (
        "BindCollectibleToWaypoint__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::BindCollectibleToWaypoint(int, char **)",
        ),
    ),
    (
        "AllowUserDump__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AllowUserDump(int, char **)",
        ),
    ),
    (
        "SetVehicleToLoad__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetVehicleToLoad(int, char **)",
        ),
    ),
    (
        "CloseObjective__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::CloseObjective(int, char **)",
        ),
    ),
    (
        "AddCollectible__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddCollectible(int, char **)",
        ),
    ),
    (
        "AddCollectibleStateProp__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddCollectibleStateProp(int, char **)",
        ),
    ),
    (
        "SetCollectibleEffect__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetCollectibleEffect(int, char **)",
        ),
    ),
    (
        "SetDestination__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetDestination(int, char **)",
        ),
    ),
    (
        "TurnGotoDialogOff__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::TurnGotoDialogOff(int, char **)",
        ),
    ),
    (
        "MustActionTrigger__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::MustActionTrigger(int, char **)",
        ),
    ),
    (
        "AddStageVehicle__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddStageVehicle(int, char **)",
        ),
    ),
    (
        "MoveStageVehicle__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::MoveStageVehicle(int, char **)",
        ),
    ),
    (
        "ActivateVehicle__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::ActivateVehicle(int, char **)",
        ),
    ),
    (
        "AddStageWaypoint__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddStageWaypoint(int, char **)",
        ),
    ),
    (
        "AddStageCharacter__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddStageCharacter(int, char **)",
        ),
    ),
    (
        "AddStageMusicChange__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddStageMusicChange(int, char **)",
        ),
    ),
    (
        "SetStageMusicAlwaysOn__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetStageMusicAlwaysOn(int, char **)",
        ),
    ),
    (
        "SetCompletionDialog__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetCompletionDialog(int, char **)",
        ),
    ),
    (
        "SetStageStartMusicEvent__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetStageStartMusicEvent(int, char **)",
        ),
    ),
    (
        "SetMusicState__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetMusicState(int, char **)",
        ),
    ),
    (
        "SetStageCamera__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetStageCamera(int, char **)",
        ),
    ),
    (
        "ResetToThisStage__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::ResetToThisStage(int, char **)",
        ),
    ),
    (
        "SetTrafficDensity__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetTrafficDensity(int, char **)",
        ),
    ),
    (
        "AddCondition__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddCondition(int, char **)",
        ),
    ),
    (
        "CloseCondition__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::CloseCondition(int, char **)",
        ),
    ),
    (
        "AmbientAnimationRandomize__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AmbientAnimationRandomize(int, char **)",
        ),
    ),
    (
        "ClearAmbientAnimations__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::ClearAmbientAnimations(int, char **)",
        ),
    ),
    (
        "AddAmbientNpcAnimation__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddAmbientNpcAnimation(int, char **)",
        ),
    ),
    (
        "AddAmbientPcAnimation__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddAmbientPcAnimation(int, char **)",
        ),
    ),
    (
        "SetCamBestSide__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetCamBestSide(int, char **)",
        ),
    ),
    (
        "SetConversationCamName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetConversationCamName(int, char **)",
        ),
    ),
    (
        "SetConversationCamPcName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetConversationCamPcName(int, char **)",
        ),
    ),
    (
        "SetConversationCamNpcName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetConversationCamNpcName(int, char **)",
        ),
    ),
    (
        "SetConversationCam__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetConversationCam(int, char **)",
        ),
    ),
    (
        "SetConversationCamDistance__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetConversationCamDistance(int, char **)",
        ),
    ),
    (
        "SetPresentationBitmap__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetPresentationBitmap(int, char **)",
        ),
    ),
    (
        "SetAnimatedCameraMulticontrollerName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetAnimatedCameraMulticontrollerName(int, char **)",
        ),
    ),
    (
        "SetAnimatedCameraName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetAnimatedCameraName(int, char **)",
        ),
    ),
    (
        "SetMissionStartMulticontrollerName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetMissionStartMulticontrollerName(int, char **)",
        ),
    ),
    (
        "SetMissionStartCameraName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetMissionStartCameraName(int, char **)",
        ),
    ),
    (
        "SetPlayerCarName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetPlayerCarName(int, char **)",
        ),
    ),
    (
        "SetFMVInfo__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetFMVInfo(int, char **)",
        ),
    ),
    (
        "CharacterIsChild__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::CharacterIsChild(int, char **)",
        ),
    ),
    (
        "SetFollowDistances__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetFollowDistances(int, char **)",
        ),
    ),
    (
        "SetCondMinHealth__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetCondMinHealth(int, char **)",
        ),
    ),
    (
        "SetConditionPosition__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetConditionPosition(int, char **)",
        ),
    ),
    (
        "SetCondTime__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetCondTime(int, char **)",
        ),
    ),
    (
        "SetHitNRun__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetHitNRun(int, char **)",
        ),
    ),
    (
        "SetObjTargetVehicle__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetObjTargetVehicle(int, char **)",
        ),
    ),
    (
        "SetObjTargetBoss__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetObjTargetBoss(int, char **)",
        ),
    ),
    (
        "SetPickupTarget__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetPickupTarget(int, char **)",
        ),
    ),
    (
        "AllowRockOut__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AllowRockOut(int, char **)",
        ),
    ),
    (
        "SetObjDistance__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetObjDistance(int, char **)",
        ),
    ),
    (
        "SetCondTargetVehicle__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetCondTargetVehicle(int, char **)",
        ),
    ),
    (
        "AddStage__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddStage(int, char **)",
        ),
    ),
    (
        "SetStageMessageIndex__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetStageMessageIndex(int, char **)",
        ),
    ),
    (
        "SetStageTime__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetStageTime(int, char **)",
        ),
    ),
    (
        "AddStageTime__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddStageTime(int, char **)",
        ),
    ),
    (
        "ShowStageComplete__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::ShowStageComplete(int, char **)",
        ),
    ),
    (
        "SetHUDIcon__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetHUDIcon(int, char **)",
        ),
    ),
    (
        "SetIrisWipe__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetIrisWipe(int, char **)",
        ),
    ),
    (
        "SetFadeOut__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetFadeOut(int, char **)",
        ),
    ),
    (
        "CloseStage__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::CloseStage(int, char **)",
        ),
    ),
    (
        "SetVehicleAIParams__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetVehicleAIParams(int, char **)",
        ),
    ),
    (
        "SetBonusMissionStart__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetBonusMissionStart(int, char **)",
        ),
    ),
    (
        "GetVehicleByName__19MissionScriptLoaderPCc",
        Ok(
            "MissionScriptLoader::GetVehicleByName(char const *)",
        ),
    ),
    (
        "GetDirectionalArrowType__19MissionScriptLoaderPCcPQ220DirectionalArrowEnum4TYPE",
        Ok(
            "MissionScriptLoader::GetDirectionalArrowType(char const *, DirectionalArrowEnum::TYPE *)",
        ),
    ),
    (
        "LoadP3DFile__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::LoadP3DFile(int, char **)",
        ),
    ),
    (
        "LoadDisposableCar__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::LoadDisposableCar(int, char **)",
        ),
    ),
    (
        "AddCharacter__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddCharacter(int, char **)",
        ),
    ),
    (
        "AddNPCCharacterBonusMission__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddNPCCharacterBonusMission(int, char **)",
        ),
    ),
    (
        "SetBonusMissionDialoguePositions__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetBonusMissionDialoguePositions(int, char **)",
        ),
    ),
    (
        "AddAmbientCharacter__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddAmbientCharacter(int, char **)",
        ),
    ),
    (
        "AddBonusMissionNPCWaypoint__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddBonusMissionNPCWaypoint(int, char **)",
        ),
    ),
    (
        "AddObjectiveNPCWaypoint__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddObjectiveNPCWaypoint(int, char **)",
        ),
    ),
    (
        "AddNPCWaypoint__19MissionScriptLoaderPCcT1",
        Ok(
            "MissionScriptLoader::AddNPCWaypoint(char const *, char const *)",
        ),
    ),
    (
        "AddPurchaseCarNPCWaypoint__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddPurchaseCarNPCWaypoint(int, char **)",
        ),
    ),
    (
        "AddAmbientNPCWaypoint__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddAmbientNPCWaypoint(int, char **)",
        ),
    ),
    (
        "ActivateTrigger__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::ActivateTrigger(int, char **)",
        ),
    ),
    (
        "DeactivateTrigger__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::DeactivateTrigger(int, char **)",
        ),
    ),
    (
        "CreateAnimPhysObject__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::CreateAnimPhysObject(int, char **)",
        ),
    ),
    (
        "CreateActionEventTrigger__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::CreateActionEventTrigger(int, char **)",
        ),
    ),
    (
        "LinkActionToObjectJoint__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::LinkActionToObjectJoint(int, char **)",
        ),
    ),
    (
        "LinkActionToObject__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::LinkActionToObject(int, char **)",
        ),
    ),
    (
        "SetCoinDrawable__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetCoinDrawable(int, char **)",
        ),
    ),
    (
        "SetParticleTexture__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetParticleTexture(int, char **)",
        ),
    ),
    (
        "AddSafeZone__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddSafeZone(int, char **)",
        ),
    ),
    (
        "CreatePedGroup__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::CreatePedGroup(int, char **)",
        ),
    ),
    (
        "AddPed__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddPed(int, char **)",
        ),
    ),
    (
        "ClosePedGroup__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::ClosePedGroup(int, char **)",
        ),
    ),
    (
        "UsePedGroup__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::UsePedGroup(int, char **)",
        ),
    ),
    (
        "BindReward__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::BindReward(int, char **)",
        ),
    ),
    (
        "SetCarAttributes__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetCarAttributes(int, char **)",
        ),
    ),
    (
        "SetTotalGags__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetTotalGags(int, char **)",
        ),
    ),
    (
        "SetTotalWasps__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetTotalWasps(int, char **)",
        ),
    ),
    (
        "CreateTrafficGroup__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::CreateTrafficGroup(int, char **)",
        ),
    ),
    (
        "AddTrafficModel__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddTrafficModel(int, char **)",
        ),
    ),
    (
        "CloseTrafficGroup__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::CloseTrafficGroup(int, char **)",
        ),
    ),
    (
        "SetRespawnRate__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetRespawnRate(int, char **)",
        ),
    ),
    (
        "EnableTutorialMode__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::EnableTutorialMode(int, char **)",
        ),
    ),
    (
        "StartCountdown__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::StartCountdown(int, char **)",
        ),
    ),
    (
        "AddToCountdownSequence__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddToCountdownSequence(int, char **)",
        ),
    ),
    (
        "SetCarStartCamera__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetCarStartCamera(int, char **)",
        ),
    ),
    (
        "GoToPattyAndSelmaScreenWhenDone__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::GoToPattyAndSelmaScreenWhenDone(int, char **)",
        ),
    ),
    (
        "StreetRacePropsLoad__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::StreetRacePropsLoad(int, char **)",
        ),
    ),
    (
        "StreetRacePropsUnload__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::StreetRacePropsUnload(int, char **)",
        ),
    ),
    (
        "UseElapsedTime__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::UseElapsedTime(int, char **)",
        ),
    ),
    (
        "AttachStatePropCollectible__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AttachStatePropCollectible(int, char **)",
        ),
    ),
    (
        "ShowHUD__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::ShowHUD(int, char **)",
        ),
    ),
    (
        "SetNumValidFailureHints__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetNumValidFailureHints(int, char **)",
        ),
    ),
    (
        "SetParTime__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetParTime(int, char **)",
        ),
    ),
    (
        "SetRaceEnteryFee__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetRaceEnteryFee(int, char **)",
        ),
    ),
    (
        "SetCoinFee__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetCoinFee(int, char **)",
        ),
    ),
    (
        "PutMFPlayerInCar__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::PutMFPlayerInCar(int, char **)",
        ),
    ),
    (
        "SetStatepropShadow__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetStatepropShadow(int, char **)",
        ),
    ),
    (
        "TreeOfWoeErrorMsg__19MissionScriptLoaderPCc",
        Ok(
            "MissionScriptLoader::TreeOfWoeErrorMsg(char const *)",
        ),
    ),
    (
        "DisableHitAndRun__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::DisableHitAndRun(int, char **)",
        ),
    ),
    (
        "EnableHitAndRun__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::EnableHitAndRun(int, char **)",
        ),
    ),
    (
        "ResetHitAndRun__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::ResetHitAndRun(int, char **)",
        ),
    ),
    (
        "SetNumChaseCars__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetNumChaseCars(int, char **)",
        ),
    ),
    (
        "SetHitAndRunDecay__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetHitAndRunDecay(int, char **)",
        ),
    ),
    (
        "SetHitAndRunMeter__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetHitAndRunMeter(int, char **)",
        ),
    ),
    (
        "SwapInDefaultCar__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SwapInDefaultCar(int, char **)",
        ),
    ),
    (
        "SetSwapDefaultCarRespawnLocatorName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetSwapDefaultCarRespawnLocatorName(int, char **)",
        ),
    ),
    (
        "SetSwapForcedCarRespawnLocatorName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetSwapForcedCarRespawnLocatorName(int, char **)",
        ),
    ),
    (
        "SetSwapPlayerRespawnLocatorName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetSwapPlayerRespawnLocatorName(int, char **)",
        ),
    ),
    (
        "NoTrafficForStage__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::NoTrafficForStage(int, char **)",
        ),
    ),
    (
        "ClearTrafficForStage__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::ClearTrafficForStage(int, char **)",
        ),
    ),
    (
        "AddGlobalProp__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AddGlobalProp(int, char **)",
        ),
    ),
    (
        "PlacePlayerAtLocatorName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::PlacePlayerAtLocatorName(int, char **)",
        ),
    ),
    (
        "msPlacePlayerCarAtLocatorName__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::msPlacePlayerCarAtLocatorName(int, char **)",
        ),
    ),
    (
        "SetStageAIRaceCatchupParams__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetStageAIRaceCatchupParams(int, char **)",
        ),
    ),
    (
        "SetStageAIEvadeCatchupParams__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetStageAIEvadeCatchupParams(int, char **)",
        ),
    ),
    (
        "SetStageAITargetCatchupParams__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetStageAITargetCatchupParams(int, char **)",
        ),
    ),
    (
        "SetPauseDuration__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetPauseDuration(int, char **)",
        ),
    ),
    (
        "SetCharacterToHide__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetCharacterToHide(int, char **)",
        ),
    ),
    (
        "SetLevelOver__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetLevelOver(int, char **)",
        ),
    ),
    (
        "SetGameOver__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::SetGameOver(int, char **)",
        ),
    ),
    (
        "StayInBlack__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::StayInBlack(int, char **)",
        ),
    ),
    (
        "AllowMissionAbort__19MissionScriptLoaderiPPc",
        Ok(
            "MissionScriptLoader::AllowMissionAbort(int, char **)",
        ),
    ),
    (
        "__12MissionStage",
        Ok(
            "MissionStage::MissionStage(void)",
        ),
    ),
    (
        "_$_12MissionStage",
        Ok(
            "MissionStage::~MissionStage(void)",
        ),
    ),
    (
        "DestroyStageVehicleAI__12MissionStage",
        Ok(
            "MissionStage::DestroyStageVehicleAI(void)",
        ),
    ),
    (
        "AddVehicle__12MissionStageP7VehicleiP15CarStartLocatorPc",
        Ok(
            "MissionStage::AddVehicle(Vehicle *, int, CarStartLocator *, char *)",
        ),
    ),
    (
        "SetAIParams__12MissionStageP7VehicleRCQ212MissionStage8AIParams",
        Ok(
            "MissionStage::SetAIParams(Vehicle *, MissionStage::AIParams const &)",
        ),
    ),
    (
        "SetAIRaceCatchupParams__12MissionStageP7VehicleRCQ29VehicleAI17RaceCatchupParams",
        Ok(
            "MissionStage::SetAIRaceCatchupParams(Vehicle *, VehicleAI::RaceCatchupParams const &)",
        ),
    ),
    (
        "SetAIEvadeCatchupParams__12MissionStageP7VehicleRCQ29VehicleAI18EvadeCatchupParams",
        Ok(
            "MissionStage::SetAIEvadeCatchupParams(Vehicle *, VehicleAI::EvadeCatchupParams const &)",
        ),
    ),
    (
        "SetAITargetCatchupParams__12MissionStageP7VehicleRCQ29VehicleAI19TargetCatchupParams",
        Ok(
            "MissionStage::SetAITargetCatchupParams(Vehicle *, VehicleAI::TargetCatchupParams const &)",
        ),
    ),
    (
        "AddWaypoint__12MissionStageP7Locator",
        Ok(
            "MissionStage::AddWaypoint(Locator *)",
        ),
    ),
    (
        "AddCharacter__12MissionStagePcP15CarStartLocatorT2PCcP7Vehicle",
        Ok(
            "MissionStage::AddCharacter(char *, CarStartLocator *, CarStartLocator *, char const *, Vehicle *)",
        ),
    ),
    (
        "AddCharacter__12MissionStagePcP15CarStartLocatorT2PCcT1",
        Ok(
            "MissionStage::AddCharacter(char *, CarStartLocator *, CarStartLocator *, char const *, char *)",
        ),
    ),
    (
        "GetFailureCondition__C12MissionStage",
        Ok(
            "MissionStage::GetFailureCondition(void) const",
        ),
    ),
    (
        "Initialize__12MissionStage",
        Ok(
            "MissionStage::Initialize(void)",
        ),
    ),
    (
        "Finalize__12MissionStage",
        Ok(
            "MissionStage::Finalize(void)",
        ),
    ),
    (
        "VehicleFinalize__12MissionStage",
        Ok(
            "MissionStage::VehicleFinalize(void)",
        ),
    ),
    (
        "Reset__12MissionStage",
        Ok(
            "MissionStage::Reset(void)",
        ),
    ),
    (
        "VehicleInfoInitialize__12MissionStage",
        Ok(
            "MissionStage::VehicleInfoInitialize(void)",
        ),
    ),
    (
        "Start__12MissionStage",
        Ok(
            "MissionStage::Start(void)",
        ),
    ),
    (
        "Update__12MissionStageUi",
        Ok(
            "MissionStage::Update(unsigned int)",
        ),
    ),
    (
        "HandleEvent__12MissionStage9EventEnumPv",
        Ok(
            "MissionStage::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "SetStageTime__12MissionStageQ212MissionStage13StageTimeTypeUi",
        Ok(
            "MissionStage::SetStageTime(MissionStage::StageTimeType, unsigned int)",
        ),
    ),
    (
        "GetStageTime__12MissionStageRQ212MissionStage13StageTimeTypeRUi",
        Ok(
            "MissionStage::GetStageTime(MissionStage::StageTimeType &, unsigned int &)",
        ),
    ),
    (
        "SetCameraInfo__12MissionStageQ28SuperCam4TypebT2",
        Ok(
            "MissionStage::SetCameraInfo(SuperCam::Type, bool, bool)",
        ),
    ),
    (
        "GetVehicle__12MissionStagei",
        Ok(
            "MissionStage::GetVehicle(int)",
        ),
    ),
    (
        "SetChaseSpawnRate__12MissionStagePcUi",
        Ok(
            "MissionStage::SetChaseSpawnRate(char *, unsigned int)",
        ),
    ),
    (
        "AddSafeZone__12MissionStageP15CarStartLocatorUi",
        Ok(
            "MissionStage::AddSafeZone(CarStartLocator *, unsigned int)",
        ),
    ),
    (
        "DestroyAllSafeZones__12MissionStage",
        Ok(
            "MissionStage::DestroyAllSafeZones(void)",
        ),
    ),
    (
        "triggerStageDialog__12MissionStage",
        Ok(
            "MissionStage::triggerStageDialog(void)",
        ),
    ),
    (
        "SetLockRequirement__12MissionStageUiQ312MissionStage15LockRequirement4TypePCc",
        Ok(
            "MissionStage::SetLockRequirement(unsigned int, MissionStage::LockRequirement::Type, char const *)",
        ),
    ),
    (
        "GetLockRequirement__12MissionStageUi",
        Ok(
            "MissionStage::GetLockRequirement(unsigned int)",
        ),
    ),
    (
        "DisplayMissionStageIndexMessage__12MissionStage",
        Ok(
            "MissionStage::DisplayMissionStageIndexMessage(void)",
        ),
    ),
    (
        "SetCountdownEnabled__12MissionStageUiG13tUidUnaligned",
        Ok(
            "MissionStage::SetCountdownEnabled(unsigned int, tUidUnaligned)",
        ),
    ),
    (
        "AddCountdownSequenceUnit__12MissionStagePCci",
        Ok(
            "MissionStage::AddCountdownSequenceUnit(char const *, int)",
        ),
    ),
    (
        "GetCountdownSequenceUnit__C12MissionStagei",
        Ok(
            "MissionStage::GetCountdownSequenceUnit(int) const",
        ),
    ),
    (
        "PutAllAisInLimbo__12MissionStageb",
        Ok(
            "MissionStage::PutAllAisInLimbo(bool)",
        ),
    ),
    (
        "DoTransition__12MissionStage",
        Ok(
            "MissionStage::DoTransition(void)",
        ),
    ),
    (
        "UseElapsedTime__12MissionStage",
        Ok(
            "MissionStage::UseElapsedTime(void)",
        ),
    ),
    (
        "QueryUseElapsedTime__12MissionStage",
        Ok(
            "MissionStage::QueryUseElapsedTime(void)",
        ),
    ),
    (
        "SetRaceEnteryFee__12MissionStagei",
        Ok(
            "MissionStage::SetRaceEnteryFee(int)",
        ),
    ),
    (
        "PutMFPlayerInCar__12MissionStage",
        Ok(
            "MissionStage::PutMFPlayerInCar(void)",
        ),
    ),
    (
        "DisableHitAndRun__12MissionStage",
        Ok(
            "MissionStage::DisableHitAndRun(void)",
        ),
    ),
    (
        "SwapInDefaultCar__12MissionStage",
        Ok(
            "MissionStage::SwapInDefaultCar(void)",
        ),
    ),
    (
        "SwapInDefaultCarStart__12MissionStage",
        Ok(
            "MissionStage::SwapInDefaultCarStart(void)",
        ),
    ),
    (
        "OnProcessRequestsComplete__12MissionStagePv",
        Ok(
            "MissionStage::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "SetSwapDefaultCarRespawnLocatorName__12MissionStagePc",
        Ok(
            "MissionStage::SetSwapDefaultCarRespawnLocatorName(char *)",
        ),
    ),
    (
        "SetSwapPlayerRespawnLocatorName__12MissionStagePc",
        Ok(
            "MissionStage::SetSwapPlayerRespawnLocatorName(char *)",
        ),
    ),
    (
        "SetSwapForcedCarRespawnLocatorName__12MissionStagePc",
        Ok(
            "MissionStage::SetSwapForcedCarRespawnLocatorName(char *)",
        ),
    ),
    (
        "DisableTraffic__12MissionStage",
        Ok(
            "MissionStage::DisableTraffic(void)",
        ),
    ),
    (
        "ClearTrafficForStage__12MissionStage",
        Ok(
            "MissionStage::ClearTrafficForStage(void)",
        ),
    ),
    (
        "SetPlayerRespawnLocatorName__12MissionStagePc",
        Ok(
            "MissionStage::SetPlayerRespawnLocatorName(char *)",
        ),
    ),
    (
        "SetmsPlayerCarRespawnLocatorName__12MissionStagePc",
        Ok(
            "MissionStage::SetmsPlayerCarRespawnLocatorName(char *)",
        ),
    ),
    (
        "OnStageCompleteSuccessful__12MissionStage",
        Ok(
            "MissionStage::OnStageCompleteSuccessful(void)",
        ),
    ),
    (
        "SetCharacterToHide__12MissionStagePc",
        Ok(
            "MissionStage::SetCharacterToHide(char *)",
        ),
    ),
    (
        "SetLevelOver__12MissionStage",
        Ok(
            "MissionStage::SetLevelOver(void)",
        ),
    ),
    (
        "SetStageMusicState__12MissionStageUiUi",
        Ok(
            "MissionStage::SetStageMusicState(unsigned int, unsigned int)",
        ),
    ),
    (
        "GetStageMusicState__12MissionStageRUiT1",
        Ok(
            "MissionStage::GetStageMusicState(unsigned int &, unsigned int &)",
        ),
    ),
    (
        "GetMainAIVehicleForThisStage__12MissionStage",
        Ok(
            "MissionStage::GetMainAIVehicleForThisStage(void)",
        ),
    ),
    (
        "__12AnimatedIcon",
        Ok(
            "AnimatedIcon::AnimatedIcon(void)",
        ),
    ),
    (
        "_$_12AnimatedIcon",
        Ok(
            "AnimatedIcon::~AnimatedIcon(void)",
        ),
    ),
    (
        "Init__12AnimatedIconPCcRCQ218RadicalMathLibrary6MatrixbT3",
        Ok(
            "AnimatedIcon::Init(char const *, RadicalMathLibrary::Matrix const &, bool, bool)",
        ),
    ),
    (
        "Init__12AnimatedIconPCcRCQ218RadicalMathLibrary6VectorbT3",
        Ok(
            "AnimatedIcon::Init(char const *, RadicalMathLibrary::Vector const &, bool, bool)",
        ),
    ),
    (
        "ScaleByCameraDistance__12AnimatedIconffff",
        Ok(
            "AnimatedIcon::ScaleByCameraDistance(float, float, float, float)",
        ),
    ),
    (
        "Move__12AnimatedIconRCQ218RadicalMathLibrary6Vector",
        Ok(
            "AnimatedIcon::Move(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Update__12AnimatedIconUi",
        Ok(
            "AnimatedIcon::Update(unsigned int)",
        ),
    ),
    (
        "Reset__12AnimatedIcon",
        Ok(
            "AnimatedIcon::Reset(void)",
        ),
    ),
    (
        "ShouldRender__12AnimatedIconb",
        Ok(
            "AnimatedIcon::ShouldRender(bool)",
        ),
    ),
    (
        "__nw__12AnimatedIconUi",
        Ok(
            "AnimatedIcon::operator new(unsigned int)",
        ),
    ),
    (
        "__nw__12AnimatedIconUi19GameMemoryAllocator",
        Ok(
            "AnimatedIcon::operator new(unsigned int, GameMemoryAllocator)",
        ),
    ),
    (
        "__dl__12AnimatedIconPv",
        Ok(
            "AnimatedIcon::operator delete(void *)",
        ),
    ),
    (
        "InitAnimatedIcons__12AnimatedIcon19GameMemoryAllocator",
        Ok(
            "AnimatedIcon::InitAnimatedIcons(GameMemoryAllocator)",
        ),
    ),
    (
        "ShutdownAnimatedIcons__12AnimatedIcon",
        Ok(
            "AnimatedIcon::ShutdownAnimatedIcons(void)",
        ),
    ),
    (
        "SetFlag__12AnimatedIconQ212AnimatedIcon4Flagb",
        Ok(
            "AnimatedIcon::SetFlag(AnimatedIcon::Flag, bool)",
        ),
    ),
    (
        "GetFlag__C12AnimatedIconQ212AnimatedIcon4Flag",
        Ok(
            "AnimatedIcon::GetFlag(AnimatedIcon::Flag) const",
        ),
    ),
    (
        "Deallocate__12AnimatedIcon",
        Ok(
            "AnimatedIcon::Deallocate(void)",
        ),
    ),
    (
        "SetUpContents__12AnimatedIconPCc",
        Ok(
            "AnimatedIcon::SetUpContents(char const *)",
        ),
    ),
    (
        "SetUpEffects__12AnimatedIcon",
        Ok(
            "AnimatedIcon::SetUpEffects(void)",
        ),
    ),
    (
        "__Q212AnimatedIcon11AnimIconDSG",
        Ok(
            "AnimatedIcon::AnimIconDSG::AnimIconDSG(void)",
        ),
    ),
    (
        "_$_Q212AnimatedIcon11AnimIconDSG",
        Ok(
            "AnimatedIcon::AnimIconDSG::~AnimIconDSG(void)",
        ),
    ),
    (
        "CalcScale__Q212AnimatedIcon11AnimIconDSG",
        Ok(
            "AnimatedIcon::AnimIconDSG::CalcScale(void)",
        ),
    ),
    (
        "SetScaleParameters__Q212AnimatedIcon11AnimIconDSGffff",
        Ok(
            "AnimatedIcon::AnimIconDSG::SetScaleParameters(float, float, float, float)",
        ),
    ),
    (
        "Display__Q212AnimatedIcon11AnimIconDSG",
        Ok(
            "AnimatedIcon::AnimIconDSG::Display(void)",
        ),
    ),
    (
        "__16BonusMissionInfo",
        Ok(
            "BonusMissionInfo::BonusMissionInfo(void)",
        ),
    ),
    (
        "_$_16BonusMissionInfo",
        Ok(
            "BonusMissionInfo::~BonusMissionInfo(void)",
        ),
    ),
    (
        "HandleEvent__16BonusMissionInfo9EventEnumPv",
        Ok(
            "BonusMissionInfo::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "SetUpIcon__16BonusMissionInfoPCcGQ218RadicalMathLibrary6Vector",
        Ok(
            "BonusMissionInfo::SetUpIcon(char const *, RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "SetUpAlternateIcon__16BonusMissionInfoPCcGQ218RadicalMathLibrary6Vector",
        Ok(
            "BonusMissionInfo::SetUpAlternateIcon(char const *, RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "SetEventLocator__16BonusMissionInfoP12EventLocator",
        Ok(
            "BonusMissionInfo::SetEventLocator(EventLocator *)",
        ),
    ),
    (
        "SetPositions__16BonusMissionInfoP15CarStartLocatorN21",
        Ok(
            "BonusMissionInfo::SetPositions(CarStartLocator *, CarStartLocator *, CarStartLocator *)",
        ),
    ),
    (
        "CleanUp__16BonusMissionInfo",
        Ok(
            "BonusMissionInfo::CleanUp(void)",
        ),
    ),
    (
        "Update__16BonusMissionInfoUi",
        Ok(
            "BonusMissionInfo::Update(unsigned int)",
        ),
    ),
    (
        "Enable__16BonusMissionInfo",
        Ok(
            "BonusMissionInfo::Enable(void)",
        ),
    ),
    (
        "Disable__16BonusMissionInfo",
        Ok(
            "BonusMissionInfo::Disable(void)",
        ),
    ),
    (
        "SetCompleted__16BonusMissionInfob",
        Ok(
            "BonusMissionInfo::SetCompleted(bool)",
        ),
    ),
    (
        "TriggerDialogue__16BonusMissionInfo",
        Ok(
            "BonusMissionInfo::TriggerDialogue(void)",
        ),
    ),
    (
        "SetNPC__16BonusMissionInfoP9Character",
        Ok(
            "BonusMissionInfo::SetNPC(Character *)",
        ),
    ),
    (
        "ResetCharacterPositions__16BonusMissionInfo",
        Ok(
            "BonusMissionInfo::ResetCharacterPositions(void)",
        ),
    ),
    (
        "ResetMissionBitmap__16BonusMissionInfo",
        Ok(
            "BonusMissionInfo::ResetMissionBitmap(void)",
        ),
    ),
    (
        "__19NoCopBonusObjective",
        Ok(
            "NoCopBonusObjective::NoCopBonusObjective(void)",
        ),
    ),
    (
        "_$_19NoCopBonusObjective",
        Ok(
            "NoCopBonusObjective::~NoCopBonusObjective(void)",
        ),
    ),
    (
        "Initialize__19NoCopBonusObjective",
        Ok(
            "NoCopBonusObjective::Initialize(void)",
        ),
    ),
    (
        "Finalize__19NoCopBonusObjective",
        Ok(
            "NoCopBonusObjective::Finalize(void)",
        ),
    ),
    (
        "HandleEvent__19NoCopBonusObjective9EventEnumPv",
        Ok(
            "NoCopBonusObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnReset__19NoCopBonusObjective",
        Ok(
            "NoCopBonusObjective::OnReset(void)",
        ),
    ),
    (
        "OnStart__19NoCopBonusObjective",
        Ok(
            "NoCopBonusObjective::OnStart(void)",
        ),
    ),
    (
        "OnUpdate__19NoCopBonusObjectiveUi",
        Ok(
            "NoCopBonusObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "__22NoDamageBonusObjective",
        Ok(
            "NoDamageBonusObjective::NoDamageBonusObjective(void)",
        ),
    ),
    (
        "_$_22NoDamageBonusObjective",
        Ok(
            "NoDamageBonusObjective::~NoDamageBonusObjective(void)",
        ),
    ),
    (
        "Initialize__22NoDamageBonusObjective",
        Ok(
            "NoDamageBonusObjective::Initialize(void)",
        ),
    ),
    (
        "Finalize__22NoDamageBonusObjective",
        Ok(
            "NoDamageBonusObjective::Finalize(void)",
        ),
    ),
    (
        "HandleEvent__22NoDamageBonusObjective9EventEnumPv",
        Ok(
            "NoDamageBonusObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnReset__22NoDamageBonusObjective",
        Ok(
            "NoDamageBonusObjective::OnReset(void)",
        ),
    ),
    (
        "OnStart__22NoDamageBonusObjective",
        Ok(
            "NoDamageBonusObjective::OnStart(void)",
        ),
    ),
    (
        "OnUpdate__22NoDamageBonusObjectiveUi",
        Ok(
            "NoDamageBonusObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "__24TimeRemainBonusObjective",
        Ok(
            "TimeRemainBonusObjective::TimeRemainBonusObjective(void)",
        ),
    ),
    (
        "_$_24TimeRemainBonusObjective",
        Ok(
            "TimeRemainBonusObjective::~TimeRemainBonusObjective(void)",
        ),
    ),
    (
        "Initialize__24TimeRemainBonusObjective",
        Ok(
            "TimeRemainBonusObjective::Initialize(void)",
        ),
    ),
    (
        "Finalize__24TimeRemainBonusObjective",
        Ok(
            "TimeRemainBonusObjective::Finalize(void)",
        ),
    ),
    (
        "GetNumericData__24TimeRemainBonusObjective",
        Ok(
            "TimeRemainBonusObjective::GetNumericData(void)",
        ),
    ),
    (
        "OnReset__24TimeRemainBonusObjective",
        Ok(
            "TimeRemainBonusObjective::OnReset(void)",
        ),
    ),
    (
        "OnStart__24TimeRemainBonusObjective",
        Ok(
            "TimeRemainBonusObjective::OnStart(void)",
        ),
    ),
    (
        "OnUpdate__24TimeRemainBonusObjectiveUi",
        Ok(
            "TimeRemainBonusObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "__26RacePositionBonusObjective",
        Ok(
            "RacePositionBonusObjective::RacePositionBonusObjective(void)",
        ),
    ),
    (
        "_$_26RacePositionBonusObjective",
        Ok(
            "RacePositionBonusObjective::~RacePositionBonusObjective(void)",
        ),
    ),
    (
        "Initialize__26RacePositionBonusObjective",
        Ok(
            "RacePositionBonusObjective::Initialize(void)",
        ),
    ),
    (
        "Finalize__26RacePositionBonusObjective",
        Ok(
            "RacePositionBonusObjective::Finalize(void)",
        ),
    ),
    (
        "HandleEvent__26RacePositionBonusObjective9EventEnumPv",
        Ok(
            "RacePositionBonusObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnReset__26RacePositionBonusObjective",
        Ok(
            "RacePositionBonusObjective::OnReset(void)",
        ),
    ),
    (
        "OnStart__26RacePositionBonusObjective",
        Ok(
            "RacePositionBonusObjective::OnStart(void)",
        ),
    ),
    (
        "OnUpdate__26RacePositionBonusObjectiveUi",
        Ok(
            "RacePositionBonusObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "__20StatePropCollectible",
        Ok(
            "StatePropCollectible::StatePropCollectible(void)",
        ),
    ),
    (
        "_$_20StatePropCollectible",
        Ok(
            "StatePropCollectible::~StatePropCollectible(void)",
        ),
    ),
    (
        "PreReactToCollision__20StatePropCollectiblePQ23sim8SimStateRQ23sim9Collision",
        Ok(
            "StatePropCollectible::PreReactToCollision(sim::SimState *, sim::Collision &)",
        ),
    ),
    (
        "AdvanceAnimation__20StatePropCollectiblef",
        Ok(
            "StatePropCollectible::AdvanceAnimation(float)",
        ),
    ),
    (
        "SetTransform__20StatePropCollectibleRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "StatePropCollectible::SetTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "SetPosition__20StatePropCollectibleRCQ218RadicalMathLibrary6Vector",
        Ok(
            "StatePropCollectible::SetPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "LoadSetup__20StatePropCollectibleP14CStatePropDataiRCQ218RadicalMathLibrary6MatrixP19CollisionAttributesbP12tEntityStoreT5PQ23sim15CollisionObjectPQ23sim13PhysicsObject",
        Ok(
            "StatePropCollectible::LoadSetup(CStatePropData *, int, RadicalMathLibrary::Matrix const &, CollisionAttributes *, bool, tEntityStore *, bool, sim::CollisionObject *, sim::PhysicsObject *)",
        ),
    ),
    (
        "AddToDSG__20StatePropCollectible",
        Ok(
            "StatePropCollectible::AddToDSG(void)",
        ),
    ),
    (
        "RemoveFromDSG__20StatePropCollectible",
        Ok(
            "StatePropCollectible::RemoveFromDSG(void)",
        ),
    ),
    (
        "Update__20StatePropCollectiblef",
        Ok(
            "StatePropCollectible::Update(float)",
        ),
    ),
    (
        "RecieveEvent__20StatePropCollectibleiP10CStateProp",
        Ok(
            "StatePropCollectible::RecieveEvent(int, CStateProp *)",
        ),
    ),
    (
        "Explode__20StatePropCollectible",
        Ok(
            "StatePropCollectible::Explode(void)",
        ),
    ),
    (
        "GetPosition__20StatePropCollectiblePQ218RadicalMathLibrary6Vector",
        Ok(
            "StatePropCollectible::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetHeading__20StatePropCollectiblePQ218RadicalMathLibrary6Vector",
        Ok(
            "StatePropCollectible::GetHeading(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "EnableHudIcon__20StatePropCollectibleb",
        Ok(
            "StatePropCollectible::EnableHudIcon(bool)",
        ),
    ),
    (
        "DoCollisionTesting__20StatePropCollectible",
        Ok(
            "StatePropCollectible::DoCollisionTesting(void)",
        ),
    ),
    (
        "CameraShake__20StatePropCollectible",
        Ok(
            "StatePropCollectible::CameraShake(void)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZP5tNameZP5tName_X01X01X11G12__false_type_X11",
        Ok(
            "tName * __uninitialized_copy_aux<tName *, tName *>(tName *, tName *, tName *, __false_type)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2Z5tNameZt7s2alloc1Z5tNameP5tNameRC5tName",
        Ok(
            "vector<tName, s2alloc<tName> >::_M_insert_aux(tName *, tName const &)",
        ),
    ),
    (
        "fill__H2ZP5tNameZ5tName_X01X01RCX11_v",
        Ok(
            "void fill<tName *, tName>(tName *, tName *, tName const &)",
        ),
    ),
    (
        "__uninitialized_fill_n_aux__H3ZP5tNameZUiZ5tName_X01X11RCX21G12__false_type_X01",
        Ok(
            "tName * __uninitialized_fill_n_aux<tName *, unsigned int, tName>(tName *, unsigned int, tName const &, __false_type)",
        ),
    ),
    (
        "insert__t6vector2Z5tNameZt7s2alloc1Z5tNameP5tNameUiRC5tName",
        Ok(
            "vector<tName, s2alloc<tName> >::insert(tName *, unsigned int, tName const &)",
        ),
    ),
    (
        "__tf12MissionStage",
        Ok(
            "MissionStage type_info function",
        ),
    ),
    (
        "__tf7Mission",
        Ok(
            "Mission type_info function",
        ),
    ),
    (
        "__tf16BonusMissionInfo",
        Ok(
            "BonusMissionInfo type_info function",
        ),
    ),
    (
        "__tf15GameplayManager",
        Ok(
            "GameplayManager type_info function",
        ),
    ),
    (
        "__tf14MissionManager",
        Ok(
            "MissionManager type_info function",
        ),
    ),
    (
        "__tf19MissionScriptLoader",
        Ok(
            "MissionScriptLoader type_info function",
        ),
    ),
    (
        "__tfQ212AnimatedIcon11AnimIconDSG",
        Ok(
            "AnimatedIcon::AnimIconDSG type_info function",
        ),
    ),
    (
        "__tf12AnimatedIcon",
        Ok(
            "AnimatedIcon type_info function",
        ),
    ),
    (
        "__tfQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tCompositeDrawable::DrawableElement type_info function",
        ),
    ),
    (
        "__tf14BonusObjective",
        Ok(
            "BonusObjective type_info function",
        ),
    ),
    (
        "__tf20StatePropCollectible",
        Ok(
            "StatePropCollectible type_info function",
        ),
    ),
    (
        "__tf22NoDamageBonusObjective",
        Ok(
            "NoDamageBonusObjective type_info function",
        ),
    ),
    (
        "__tf19NoCopBonusObjective",
        Ok(
            "NoCopBonusObjective type_info function",
        ),
    ),
    (
        "__tf24TimeRemainBonusObjective",
        Ok(
            "TimeRemainBonusObjective type_info function",
        ),
    ),
    (
        "__tf26RacePositionBonusObjective",
        Ok(
            "RacePositionBonusObjective type_info function",
        ),
    ),
    (
        "__tf19HasPresentationInfo",
        Ok(
            "HasPresentationInfo type_info function",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3Z5tNameZt7s2alloc1Z5tNameb0",
        Ok(
            "_Vector_alloc_base<tName, s2alloc<tName>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "__Q215GameplayManager16PlayerAndCarInfo",
        Ok(
            "GameplayManager::PlayerAndCarInfo::PlayerAndCarInfo(void)",
        ),
    ),
    (
        "__Q215GameplayManager13CarDataStruct",
        Ok(
            "GameplayManager::CarDataStruct::CarDataStruct(void)",
        ),
    ),
    (
        "OnPresentationEventBegin__15GameplayManagerP17PresentationEvent",
        Ok(
            "GameplayManager::OnPresentationEventBegin(PresentationEvent *)",
        ),
    ),
    (
        "OnPresentationEventLoadComplete__15GameplayManagerP17PresentationEvent",
        Ok(
            "GameplayManager::OnPresentationEventLoadComplete(PresentationEvent *)",
        ),
    ),
    (
        "OnPresentationEventEnd__15GameplayManagerP17PresentationEvent",
        Ok(
            "GameplayManager::OnPresentationEventEnd(PresentationEvent *)",
        ),
    ),
    (
        "IsSundayDrive__15GameplayManager",
        Ok(
            "GameplayManager::IsSundayDrive(void)",
        ),
    ),
    (
        "IsSuperSprint__15GameplayManager",
        Ok(
            "GameplayManager::IsSuperSprint(void)",
        ),
    ),
    (
        "IsSundayDrive__14MissionManager",
        Ok(
            "MissionManager::IsSundayDrive(void)",
        ),
    ),
    (
        "__Q27Console21ExecuteScriptCallback",
        Ok(
            "Console::ExecuteScriptCallback::ExecuteScriptCallback(void)",
        ),
    ),
    (
        "_$_14BonusObjective",
        Ok(
            "BonusObjective::~BonusObjective(void)",
        ),
    ),
    (
        "OnReset__14BonusObjective",
        Ok(
            "BonusObjective::OnReset(void)",
        ),
    ),
    (
        "OnStart__14BonusObjective",
        Ok(
            "BonusObjective::OnStart(void)",
        ),
    ),
    (
        "OnUpdate__14BonusObjectiveUi",
        Ok(
            "BonusObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "GetNumericData__22NoDamageBonusObjective",
        Ok(
            "NoDamageBonusObjective::GetNumericData(void)",
        ),
    ),
    (
        "GetNumericData__19NoCopBonusObjective",
        Ok(
            "NoCopBonusObjective::GetNumericData(void)",
        ),
    ),
    (
        "GetNumericData__26RacePositionBonusObjective",
        Ok(
            "RacePositionBonusObjective::GetNumericData(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z8tTexture",
        Ok(
            "radLoadInventory::SafeCast<tTexture>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ27Console21ExecuteScriptCallback",
        Ok(
            "Console::ExecuteScriptCallback type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z8tTexture",
        Ok(
            "radLoadInventory::SafeCast<tTexture> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z8tTextureP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tTexture>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$_15GameplayManager$spInstance",
        Ok(
            "global constructors keyed to GameplayManager::spInstance",
        ),
    ),
    (
        "_$_8SafeZone",
        Ok(
            "SafeZone::~SafeZone(void)",
        ),
    ),
    (
        "__8SafeZoneP15CarStartLocatorUi",
        Ok(
            "SafeZone::SafeZone(CarStartLocator *, unsigned int)",
        ),
    ),
    (
        "InsideZone__8SafeZoneGQ218RadicalMathLibrary6Vector",
        Ok(
            "SafeZone::InsideZone(RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "__tf8SafeZone",
        Ok(
            "SafeZone type_info function",
        ),
    ),
    (
        "CreateInstance__21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::DestroyInstance(void)",
        ),
    ),
    (
        "SetMissionComplete__21CharacterSheetManagerQ211RenderEnums9LevelEnumPcbi",
        Ok(
            "CharacterSheetManager::SetMissionComplete(RenderEnums::LevelEnum, char *, bool, int)",
        ),
    ),
    (
        "IncrementMissionAttempt__21CharacterSheetManagerQ211RenderEnums9LevelEnumPc",
        Ok(
            "CharacterSheetManager::IncrementMissionAttempt(RenderEnums::LevelEnum, char *)",
        ),
    ),
    (
        "SetMissionSkipped__21CharacterSheetManagerQ211RenderEnums9LevelEnumQ211RenderEnums11MissionEnum",
        Ok(
            "CharacterSheetManager::SetMissionSkipped(RenderEnums::LevelEnum, RenderEnums::MissionEnum)",
        ),
    ),
    (
        "QueryNumberOfAttempts__21CharacterSheetManagerQ211RenderEnums9LevelEnumi",
        Ok(
            "CharacterSheetManager::QueryNumberOfAttempts(RenderEnums::LevelEnum, int)",
        ),
    ),
    (
        "QueryMissionStatus__21CharacterSheetManagerQ211RenderEnums9LevelEnumi",
        Ok(
            "CharacterSheetManager::QueryMissionStatus(RenderEnums::LevelEnum, int)",
        ),
    ),
    (
        "QueryStreetRaceStatus__21CharacterSheetManagerQ211RenderEnums9LevelEnumPc",
        Ok(
            "CharacterSheetManager::QueryStreetRaceStatus(RenderEnums::LevelEnum, char *)",
        ),
    ),
    (
        "QueryBonusMissionStatus__21CharacterSheetManagerQ211RenderEnums9LevelEnumPc",
        Ok(
            "CharacterSheetManager::QueryBonusMissionStatus(RenderEnums::LevelEnum, char *)",
        ),
    ),
    (
        "QueryAllCardsCollected__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryAllCardsCollected(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryBonusMissionCompleted__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryBonusMissionCompleted(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryAllStreetRacesCompleted__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryAllStreetRacesCompleted(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "InitCharacterSheet__21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::InitCharacterSheet(void)",
        ),
    ),
    (
        "AddMission__21CharacterSheetManagerQ211RenderEnums9LevelEnumPc",
        Ok(
            "CharacterSheetManager::AddMission(RenderEnums::LevelEnum, char *)",
        ),
    ),
    (
        "AddStreetRace__21CharacterSheetManagerQ211RenderEnums9LevelEnumPc",
        Ok(
            "CharacterSheetManager::AddStreetRace(RenderEnums::LevelEnum, char *)",
        ),
    ),
    (
        "AddBonusMission__21CharacterSheetManagerQ211RenderEnums9LevelEnumPc",
        Ok(
            "CharacterSheetManager::AddBonusMission(RenderEnums::LevelEnum, char *)",
        ),
    ),
    (
        "AddCard__21CharacterSheetManagerQ211RenderEnums9LevelEnumi",
        Ok(
            "CharacterSheetManager::AddCard(RenderEnums::LevelEnum, int)",
        ),
    ),
    (
        "LoadData__21CharacterSheetManagerPCUcUi",
        Ok(
            "CharacterSheetManager::LoadData(unsigned char const *, unsigned int)",
        ),
    ),
    (
        "SaveData__21CharacterSheetManagerPUcUi",
        Ok(
            "CharacterSheetManager::SaveData(unsigned char *, unsigned int)",
        ),
    ),
    (
        "SetCurrentMission__21CharacterSheetManagerQ211RenderEnums9LevelEnumQ211RenderEnums11MissionEnum",
        Ok(
            "CharacterSheetManager::SetCurrentMission(RenderEnums::LevelEnum, RenderEnums::MissionEnum)",
        ),
    ),
    (
        "GetNumberOfTokens__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::GetNumberOfTokens(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "AddTokens__21CharacterSheetManagerQ211RenderEnums9LevelEnumi",
        Ok(
            "CharacterSheetManager::AddTokens(RenderEnums::LevelEnum, int)",
        ),
    ),
    (
        "SubtractTokens__21CharacterSheetManagerQ211RenderEnums9LevelEnumi",
        Ok(
            "CharacterSheetManager::SubtractTokens(RenderEnums::LevelEnum, int)",
        ),
    ),
    (
        "QueryCurrentMission__21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::QueryCurrentMission(void)",
        ),
    ),
    (
        "QueryHighestMission__21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::QueryHighestMission(void)",
        ),
    ),
    (
        "QueryNavSystemSetting__21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::QueryNavSystemSetting(void)",
        ),
    ),
    (
        "SetNavSystemOn__21CharacterSheetManagerb",
        Ok(
            "CharacterSheetManager::SetNavSystemOn(bool)",
        ),
    ),
    (
        "SetPurchasedRewards__21CharacterSheetManagerQ211RenderEnums9LevelEnumi",
        Ok(
            "CharacterSheetManager::SetPurchasedRewards(RenderEnums::LevelEnum, int)",
        ),
    ),
    (
        "AddCarToInventory__21CharacterSheetManagerPCc",
        Ok(
            "CharacterSheetManager::AddCarToInventory(char const *)",
        ),
    ),
    (
        "GetCarIndex__21CharacterSheetManagerPCc",
        Ok(
            "CharacterSheetManager::GetCarIndex(char const *)",
        ),
    ),
    (
        "GetCarDamageState__21CharacterSheetManageri",
        Ok(
            "CharacterSheetManager::GetCarDamageState(int)",
        ),
    ),
    (
        "GetCarHealth__21CharacterSheetManageri",
        Ok(
            "CharacterSheetManager::GetCarHealth(int)",
        ),
    ),
    (
        "UpdateCarHealth__21CharacterSheetManagerif",
        Ok(
            "CharacterSheetManager::UpdateCarHealth(int, float)",
        ),
    ),
    (
        "__21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::CharacterSheetManager(void)",
        ),
    ),
    (
        "_$_21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::~CharacterSheetManager(void)",
        ),
    ),
    (
        "GetMissionRecord__21CharacterSheetManagerQ211RenderEnums9LevelEnumPc",
        Ok(
            "CharacterSheetManager::GetMissionRecord(RenderEnums::LevelEnum, char *)",
        ),
    ),
    (
        "GetMissionRecord__21CharacterSheetManagerQ211RenderEnums9LevelEnumi",
        Ok(
            "CharacterSheetManager::GetMissionRecord(RenderEnums::LevelEnum, int)",
        ),
    ),
    (
        "GetStreetRaceRecord__21CharacterSheetManagerQ211RenderEnums9LevelEnumPc",
        Ok(
            "CharacterSheetManager::GetStreetRaceRecord(RenderEnums::LevelEnum, char *)",
        ),
    ),
    (
        "GetBonusMissionRecord__21CharacterSheetManagerQ211RenderEnums9LevelEnumPc",
        Ok(
            "CharacterSheetManager::GetBonusMissionRecord(RenderEnums::LevelEnum, char *)",
        ),
    ),
    (
        "GetCollectableRecord__21CharacterSheetManagerQ211RenderEnums9LevelEnumQ221CharacterSheetManager16eCollectableTypei",
        Ok(
            "CharacterSheetManager::GetCollectableRecord(RenderEnums::LevelEnum, CharacterSheetManager::eCollectableType, int)",
        ),
    ),
    (
        "QueryFMVUnlocked__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryFMVUnlocked(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "SetFMVUnlocked__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::SetFMVUnlocked(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryNumMissionsCompleted__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryNumMissionsCompleted(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryNumWaspsDestroyed__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryNumWaspsDestroyed(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryNumGagsViewed__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryNumGagsViewed(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryGagViewed__21CharacterSheetManagerQ211RenderEnums9LevelEnumUi",
        Ok(
            "CharacterSheetManager::QueryGagViewed(RenderEnums::LevelEnum, unsigned int)",
        ),
    ),
    (
        "IncNumWaspsDestroyed__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::IncNumWaspsDestroyed(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "AddGagViewed__21CharacterSheetManagerQ211RenderEnums9LevelEnumUi",
        Ok(
            "CharacterSheetManager::AddGagViewed(RenderEnums::LevelEnum, unsigned int)",
        ),
    ),
    (
        "QueryNumCarUnlocked__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryNumCarUnlocked(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryNumSkinsUnlocked__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryNumSkinsUnlocked(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryNumBonusMissionsCompleted__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryNumBonusMissionsCompleted(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryNumStreetRacesCompleted__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryNumStreetRacesCompleted(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryNumCardsCollected__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryNumCardsCollected(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryPercentLevelCompleted__C21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryPercentLevelCompleted(RenderEnums::LevelEnum) const",
        ),
    ),
    (
        "QueryPercentGameCompleted__C21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::QueryPercentGameCompleted(void) const",
        ),
    ),
    (
        "IsAllStoryMissionsCompleted__21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::IsAllStoryMissionsCompleted(void)",
        ),
    ),
    (
        "UpdateRewardsManager__21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::UpdateRewardsManager(void)",
        ),
    ),
    (
        "IsMiniGameUnlocked__C21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::IsMiniGameUnlocked(void) const",
        ),
    ),
    (
        "IsState__21CharacterSheetManageri",
        Ok(
            "CharacterSheetManager::IsState(int)",
        ),
    ),
    (
        "SetState__21CharacterSheetManagerib",
        Ok(
            "CharacterSheetManager::SetState(int, bool)",
        ),
    ),
    (
        "AddGambleRace__21CharacterSheetManagerQ211RenderEnums9LevelEnumPc",
        Ok(
            "CharacterSheetManager::AddGambleRace(RenderEnums::LevelEnum, char *)",
        ),
    ),
    (
        "SetGambleRaceBestTime__21CharacterSheetManagerQ211RenderEnums9LevelEnumi",
        Ok(
            "CharacterSheetManager::SetGambleRaceBestTime(RenderEnums::LevelEnum, int)",
        ),
    ),
    (
        "GetGambleRaceBestTime__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::GetGambleRaceBestTime(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "QueryCurrentSkin__21CharacterSheetManagerQ211RenderEnums9LevelEnum",
        Ok(
            "CharacterSheetManager::QueryCurrentSkin(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "SetCurrentSkin__21CharacterSheetManagerQ211RenderEnums9LevelEnumPc",
        Ok(
            "CharacterSheetManager::SetCurrentSkin(RenderEnums::LevelEnum, char *)",
        ),
    ),
    (
        "__tf21CharacterSheetManager",
        Ok(
            "CharacterSheetManager type_info function",
        ),
    ),
    (
        "ResetData__21CharacterSheetManager",
        Ok(
            "CharacterSheetManager::ResetData(void)",
        ),
    ),
    (
        "_GLOBAL_$I$_21CharacterSheetManager$spInstance",
        Ok(
            "global constructors keyed to CharacterSheetManager::spInstance",
        ),
    ),
    (
        "__6Reward",
        Ok(
            "Reward::Reward(void)",
        ),
    ),
    (
        "_$_6Reward",
        Ok(
            "Reward::~Reward(void)",
        ),
    ),
    (
        "SetName__6RewardPc",
        Ok(
            "Reward::SetName(char *)",
        ),
    ),
    (
        "SetRewardType__6RewardQ26Reward11eRewardType",
        Ok(
            "Reward::SetRewardType(Reward::eRewardType)",
        ),
    ),
    (
        "SetQuestType__6RewardQ26Reward10eQuestType",
        Ok(
            "Reward::SetQuestType(Reward::eQuestType)",
        ),
    ),
    (
        "SetFilename__6RewardPc",
        Ok(
            "Reward::SetFilename(char *)",
        ),
    ),
    (
        "UnlockReward__6Reward",
        Ok(
            "Reward::UnlockReward(void)",
        ),
    ),
    (
        "CreateInstance__14RewardsManager",
        Ok(
            "RewardsManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__14RewardsManager",
        Ok(
            "RewardsManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__14RewardsManager",
        Ok(
            "RewardsManager::DestroyInstance(void)",
        ),
    ),
    (
        "InitRewards__14RewardsManager",
        Ok(
            "RewardsManager::InitRewards(void)",
        ),
    ),
    (
        "ClearRewards__14RewardsManager",
        Ok(
            "RewardsManager::ClearRewards(void)",
        ),
    ),
    (
        "OnProcessRequestsComplete__14RewardsManagerPv",
        Ok(
            "RewardsManager::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "LoadScript__14RewardsManager",
        Ok(
            "RewardsManager::LoadScript(void)",
        ),
    ),
    (
        "BindReward__14RewardsManagerPcT1Q26Reward11eRewardTypeQ26Reward10eQuestTypei",
        Ok(
            "RewardsManager::BindReward(char *, char *, Reward::eRewardType, Reward::eQuestType, int)",
        ),
    ),
    (
        "GetReward__14RewardsManageriQ26Reward10eQuestType",
        Ok(
            "RewardsManager::GetReward(int, Reward::eQuestType)",
        ),
    ),
    (
        "SetCarAttributes__14RewardsManagerPcffff",
        Ok(
            "RewardsManager::SetCarAttributes(char *, float, float, float, float)",
        ),
    ),
    (
        "InitCarAttributeRecords__14RewardsManager",
        Ok(
            "RewardsManager::InitCarAttributeRecords(void)",
        ),
    ),
    (
        "GetCarAttributeRecord__14RewardsManagerPc",
        Ok(
            "RewardsManager::GetCarAttributeRecord(char *)",
        ),
    ),
    (
        "ComputeOverallCarRating__14RewardsManagerP18CarAttributeRecord",
        Ok(
            "RewardsManager::ComputeOverallCarRating(CarAttributeRecord *)",
        ),
    ),
    (
        "InitTokenStore__14RewardsManager",
        Ok(
            "RewardsManager::InitTokenStore(void)",
        ),
    ),
    (
        "AddMerchandise__14RewardsManagerPcT1Q26Reward11eRewardTypeiiQ211Merchandise11eSellerType",
        Ok(
            "RewardsManager::AddMerchandise(char *, char *, Reward::eRewardType, int, int, Merchandise::eSellerType)",
        ),
    ),
    (
        "GetMerchandise__14RewardsManageriPCc",
        Ok(
            "RewardsManager::GetMerchandise(int, char const *)",
        ),
    ),
    (
        "GetMerchandise__14RewardsManagerii",
        Ok(
            "RewardsManager::GetMerchandise(int, int)",
        ),
    ),
    (
        "GetMerchandiseIndex__14RewardsManageriPCc",
        Ok(
            "RewardsManager::GetMerchandiseIndex(int, char const *)",
        ),
    ),
    (
        "FindFirstMerchandise__14RewardsManageriQ211Merchandise11eSellerType",
        Ok(
            "RewardsManager::FindFirstMerchandise(int, Merchandise::eSellerType)",
        ),
    ),
    (
        "FindNextMerchandise__14RewardsManageriQ211Merchandise11eSellerType",
        Ok(
            "RewardsManager::FindNextMerchandise(int, Merchandise::eSellerType)",
        ),
    ),
    (
        "BuyMerchandise__14RewardsManageriPCc",
        Ok(
            "RewardsManager::BuyMerchandise(int, char const *)",
        ),
    ),
    (
        "__14RewardsManager",
        Ok(
            "RewardsManager::RewardsManager(void)",
        ),
    ),
    (
        "_$_14RewardsManager",
        Ok(
            "RewardsManager::~RewardsManager(void)",
        ),
    ),
    (
        "NameCheck__14RewardsManagerPc",
        Ok(
            "RewardsManager::NameCheck(char *)",
        ),
    ),
    (
        "FileNameCheck__14RewardsManagerPc",
        Ok(
            "RewardsManager::FileNameCheck(char *)",
        ),
    ),
    (
        "LevelCheck__14RewardsManageri",
        Ok(
            "RewardsManager::LevelCheck(int)",
        ),
    ),
    (
        "IncUpdateQue__14RewardsManager",
        Ok(
            "RewardsManager::IncUpdateQue(void)",
        ),
    ),
    (
        "SynchWithCharacterSheet__14RewardsManager",
        Ok(
            "RewardsManager::SynchWithCharacterSheet(void)",
        ),
    ),
    (
        "SetTotalGags__14RewardsManagerii",
        Ok(
            "RewardsManager::SetTotalGags(int, int)",
        ),
    ),
    (
        "GetTotalGags__C14RewardsManageri",
        Ok(
            "RewardsManager::GetTotalGags(int) const",
        ),
    ),
    (
        "SetTotalWasps__14RewardsManagerii",
        Ok(
            "RewardsManager::SetTotalWasps(int, int)",
        ),
    ),
    (
        "GetTotalWasps__C14RewardsManageri",
        Ok(
            "RewardsManager::GetTotalWasps(int) const",
        ),
    ),
    (
        "__11Merchandise",
        Ok(
            "Merchandise::Merchandise(void)",
        ),
    ),
    (
        "_$_11Merchandise",
        Ok(
            "Merchandise::~Merchandise(void)",
        ),
    ),
    (
        "__tf6Reward",
        Ok(
            "Reward type_info function",
        ),
    ),
    (
        "__tf11Merchandise",
        Ok(
            "Merchandise type_info function",
        ),
    ),
    (
        "__tf14RewardsManager",
        Ok(
            "RewardsManager type_info function",
        ),
    ),
    (
        "__15DamageCondition",
        Ok(
            "DamageCondition::DamageCondition(void)",
        ),
    ),
    (
        "_$_15DamageCondition",
        Ok(
            "DamageCondition::~DamageCondition(void)",
        ),
    ),
    (
        "OnInitialize__15DamageCondition",
        Ok(
            "DamageCondition::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__15DamageCondition",
        Ok(
            "DamageCondition::OnFinalize(void)",
        ),
    ),
    (
        "HandleEvent__15DamageCondition9EventEnumPv",
        Ok(
            "DamageCondition::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "IsClose__15DamageCondition",
        Ok(
            "DamageCondition::IsClose(void)",
        ),
    ),
    (
        "__15FollowCondition",
        Ok(
            "FollowCondition::FollowCondition(void)",
        ),
    ),
    (
        "_$_15FollowCondition",
        Ok(
            "FollowCondition::~FollowCondition(void)",
        ),
    ),
    (
        "Update__15FollowConditionUi",
        Ok(
            "FollowCondition::Update(unsigned int)",
        ),
    ),
    (
        "IsChaseCondition__15FollowCondition",
        Ok(
            "FollowCondition::IsChaseCondition(void)",
        ),
    ),
    (
        "IsClose__15FollowCondition",
        Ok(
            "FollowCondition::IsClose(void)",
        ),
    ),
    (
        "OnInitialize__15FollowCondition",
        Ok(
            "FollowCondition::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__15FollowCondition",
        Ok(
            "FollowCondition::OnFinalize(void)",
        ),
    ),
    (
        "CalculateDistanceToTarget__15FollowCondition",
        Ok(
            "FollowCondition::CalculateDistanceToTarget(void)",
        ),
    ),
    (
        "__22LeaveInteriorCondition",
        Ok(
            "LeaveInteriorCondition::LeaveInteriorCondition(void)",
        ),
    ),
    (
        "_$_22LeaveInteriorCondition",
        Ok(
            "LeaveInteriorCondition::~LeaveInteriorCondition(void)",
        ),
    ),
    (
        "HandleEvent__22LeaveInteriorCondition9EventEnumPv",
        Ok(
            "LeaveInteriorCondition::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "IsClose__22LeaveInteriorCondition",
        Ok(
            "LeaveInteriorCondition::IsClose(void)",
        ),
    ),
    (
        "OnInitialize__22LeaveInteriorCondition",
        Ok(
            "LeaveInteriorCondition::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__22LeaveInteriorCondition",
        Ok(
            "LeaveInteriorCondition::OnFinalize(void)",
        ),
    ),
    (
        "__16MissionCondition",
        Ok(
            "MissionCondition::MissionCondition(void)",
        ),
    ),
    (
        "_$_16MissionCondition",
        Ok(
            "MissionCondition::~MissionCondition(void)",
        ),
    ),
    (
        "Initialize__16MissionCondition",
        Ok(
            "MissionCondition::Initialize(void)",
        ),
    ),
    (
        "Finalize__16MissionCondition",
        Ok(
            "MissionCondition::Finalize(void)",
        ),
    ),
    (
        "HandleEvent__16MissionCondition9EventEnumPv",
        Ok(
            "MissionCondition::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "IsChaseCondition__16MissionCondition",
        Ok(
            "MissionCondition::IsChaseCondition(void)",
        ),
    ),
    (
        "IsClose__16MissionCondition",
        Ok(
            "MissionCondition::IsClose(void)",
        ),
    ),
    (
        "__20OutOfBoundsCondition",
        Ok(
            "OutOfBoundsCondition::OutOfBoundsCondition(void)",
        ),
    ),
    (
        "_$_20OutOfBoundsCondition",
        Ok(
            "OutOfBoundsCondition::~OutOfBoundsCondition(void)",
        ),
    ),
    (
        "OnInitialize__20OutOfBoundsCondition",
        Ok(
            "OutOfBoundsCondition::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__20OutOfBoundsCondition",
        Ok(
            "OutOfBoundsCondition::OnFinalize(void)",
        ),
    ),
    (
        "HandleEvent__20OutOfBoundsCondition9EventEnumPv",
        Ok(
            "OutOfBoundsCondition::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "IsClose__20OutOfBoundsCondition",
        Ok(
            "OutOfBoundsCondition::IsClose(void)",
        ),
    ),
    (
        "__13RaceCondition",
        Ok(
            "RaceCondition::RaceCondition(void)",
        ),
    ),
    (
        "_$_13RaceCondition",
        Ok(
            "RaceCondition::~RaceCondition(void)",
        ),
    ),
    (
        "OnInitialize__13RaceCondition",
        Ok(
            "RaceCondition::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__13RaceCondition",
        Ok(
            "RaceCondition::OnFinalize(void)",
        ),
    ),
    (
        "HandleEvent__13RaceCondition9EventEnumPv",
        Ok(
            "RaceCondition::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "IsChaseCondition__13RaceCondition",
        Ok(
            "RaceCondition::IsChaseCondition(void)",
        ),
    ),
    (
        "IsClose__13RaceCondition",
        Ok(
            "RaceCondition::IsClose(void)",
        ),
    ),
    (
        "__16TimeOutCondition",
        Ok(
            "TimeOutCondition::TimeOutCondition(void)",
        ),
    ),
    (
        "_$_16TimeOutCondition",
        Ok(
            "TimeOutCondition::~TimeOutCondition(void)",
        ),
    ),
    (
        "Update__16TimeOutConditionUi",
        Ok(
            "TimeOutCondition::Update(unsigned int)",
        ),
    ),
    (
        "IsClose__16TimeOutCondition",
        Ok(
            "TimeOutCondition::IsClose(void)",
        ),
    ),
    (
        "SetViolated__16TimeOutConditionb",
        Ok(
            "TimeOutCondition::SetViolated(bool)",
        ),
    ),
    (
        "__16VehicleCondition",
        Ok(
            "VehicleCondition::VehicleCondition(void)",
        ),
    ),
    (
        "_$_16VehicleCondition",
        Ok(
            "VehicleCondition::~VehicleCondition(void)",
        ),
    ),
    (
        "__17PositionCondition",
        Ok(
            "PositionCondition::PositionCondition(void)",
        ),
    ),
    (
        "_$_17PositionCondition",
        Ok(
            "PositionCondition::~PositionCondition(void)",
        ),
    ),
    (
        "HandleEvent__17PositionCondition9EventEnumPv",
        Ok(
            "PositionCondition::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnInitialize__17PositionCondition",
        Ok(
            "PositionCondition::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__17PositionCondition",
        Ok(
            "PositionCondition::OnFinalize(void)",
        ),
    ),
    (
        "__24VehicleCarryingStateProp",
        Ok(
            "VehicleCarryingStateProp::VehicleCarryingStateProp(void)",
        ),
    ),
    (
        "_$_24VehicleCarryingStateProp",
        Ok(
            "VehicleCarryingStateProp::~VehicleCarryingStateProp(void)",
        ),
    ),
    (
        "Update__24VehicleCarryingStatePropUi",
        Ok(
            "VehicleCarryingStateProp::Update(unsigned int)",
        ),
    ),
    (
        "HandleEvent__24VehicleCarryingStateProp9EventEnumPv",
        Ok(
            "VehicleCarryingStateProp::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnInitialize__24VehicleCarryingStateProp",
        Ok(
            "VehicleCarryingStateProp::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__24VehicleCarryingStateProp",
        Ok(
            "VehicleCarryingStateProp::OnFinalize(void)",
        ),
    ),
    (
        "__20GetOutOfCarCondition",
        Ok(
            "GetOutOfCarCondition::GetOutOfCarCondition(void)",
        ),
    ),
    (
        "_$_20GetOutOfCarCondition",
        Ok(
            "GetOutOfCarCondition::~GetOutOfCarCondition(void)",
        ),
    ),
    (
        "Update__20GetOutOfCarConditionUi",
        Ok(
            "GetOutOfCarCondition::Update(unsigned int)",
        ),
    ),
    (
        "HandleEvent__20GetOutOfCarCondition9EventEnumPv",
        Ok(
            "GetOutOfCarCondition::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "GetTimeRemainingTilFailuremilliseconds__20GetOutOfCarCondition",
        Ok(
            "GetOutOfCarCondition::GetTimeRemainingTilFailuremilliseconds(void)",
        ),
    ),
    (
        "IsClose__20GetOutOfCarCondition",
        Ok(
            "GetOutOfCarCondition::IsClose(void)",
        ),
    ),
    (
        "OnInitialize__20GetOutOfCarCondition",
        Ok(
            "GetOutOfCarCondition::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__20GetOutOfCarCondition",
        Ok(
            "GetOutOfCarCondition::OnFinalize(void)",
        ),
    ),
    (
        "__20NotAbductedCondition",
        Ok(
            "NotAbductedCondition::NotAbductedCondition(void)",
        ),
    ),
    (
        "_$_20NotAbductedCondition",
        Ok(
            "NotAbductedCondition::~NotAbductedCondition(void)",
        ),
    ),
    (
        "HandleEvent__20NotAbductedCondition9EventEnumPv",
        Ok(
            "NotAbductedCondition::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnInitialize__20NotAbductedCondition",
        Ok(
            "NotAbductedCondition::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__20NotAbductedCondition",
        Ok(
            "NotAbductedCondition::OnFinalize(void)",
        ),
    ),
    (
        "__19KeepBarrelCondition",
        Ok(
            "KeepBarrelCondition::KeepBarrelCondition(void)",
        ),
    ),
    (
        "_$_19KeepBarrelCondition",
        Ok(
            "KeepBarrelCondition::~KeepBarrelCondition(void)",
        ),
    ),
    (
        "HandleEvent__19KeepBarrelCondition9EventEnumPv",
        Ok(
            "KeepBarrelCondition::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnInitialize__19KeepBarrelCondition",
        Ok(
            "KeepBarrelCondition::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__19KeepBarrelCondition",
        Ok(
            "KeepBarrelCondition::OnFinalize(void)",
        ),
    ),
    (
        "__tf16MissionCondition",
        Ok(
            "MissionCondition type_info function",
        ),
    ),
    (
        "__tf16VehicleCondition",
        Ok(
            "VehicleCondition type_info function",
        ),
    ),
    (
        "__tf15DamageCondition",
        Ok(
            "DamageCondition type_info function",
        ),
    ),
    (
        "__tf15FollowCondition",
        Ok(
            "FollowCondition type_info function",
        ),
    ),
    (
        "__tf22LeaveInteriorCondition",
        Ok(
            "LeaveInteriorCondition type_info function",
        ),
    ),
    (
        "__tf20OutOfBoundsCondition",
        Ok(
            "OutOfBoundsCondition type_info function",
        ),
    ),
    (
        "__tf13RaceCondition",
        Ok(
            "RaceCondition type_info function",
        ),
    ),
    (
        "__tf16TimeOutCondition",
        Ok(
            "TimeOutCondition type_info function",
        ),
    ),
    (
        "__tf17PositionCondition",
        Ok(
            "PositionCondition type_info function",
        ),
    ),
    (
        "__tf24VehicleCarryingStateProp",
        Ok(
            "VehicleCarryingStateProp type_info function",
        ),
    ),
    (
        "__tf20GetOutOfCarCondition",
        Ok(
            "GetOutOfCarCondition type_info function",
        ),
    ),
    (
        "__tf20NotAbductedCondition",
        Ok(
            "NotAbductedCondition type_info function",
        ),
    ),
    (
        "__tf19KeepBarrelCondition",
        Ok(
            "KeepBarrelCondition type_info function",
        ),
    ),
    (
        "Update__16MissionConditionUi",
        Ok(
            "MissionCondition::Update(unsigned int)",
        ),
    ),
    (
        "OnInitialize__16MissionCondition",
        Ok(
            "MissionCondition::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__16MissionCondition",
        Ok(
            "MissionCondition::OnFinalize(void)",
        ),
    ),
    (
        "OnInitialize__16VehicleCondition",
        Ok(
            "VehicleCondition::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__16VehicleCondition",
        Ok(
            "VehicleCondition::OnFinalize(void)",
        ),
    ),
    (
        "__17DeliveryObjective",
        Ok(
            "DeliveryObjective::DeliveryObjective(void)",
        ),
    ),
    (
        "_$_17DeliveryObjective",
        Ok(
            "DeliveryObjective::~DeliveryObjective(void)",
        ),
    ),
    (
        "HandleEvent__17DeliveryObjective9EventEnumPv",
        Ok(
            "DeliveryObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnInitCollectibles__17DeliveryObjective",
        Ok(
            "DeliveryObjective::OnInitCollectibles(void)",
        ),
    ),
    (
        "OnInitCollectibleObjective__17DeliveryObjective",
        Ok(
            "DeliveryObjective::OnInitCollectibleObjective(void)",
        ),
    ),
    (
        "OnFinalizeCollectibleObjective__17DeliveryObjective",
        Ok(
            "DeliveryObjective::OnFinalizeCollectibleObjective(void)",
        ),
    ),
    (
        "OnCollection__17DeliveryObjectiveUiRb",
        Ok(
            "DeliveryObjective::OnCollection(unsigned int, bool &)",
        ),
    ),
    (
        "OnUpdateCollectibleObjective__17DeliveryObjectiveUi",
        Ok(
            "DeliveryObjective::OnUpdateCollectibleObjective(unsigned int)",
        ),
    ),
    (
        "FindStateProps__17DeliveryObjective",
        Ok(
            "DeliveryObjective::FindStateProps(void)",
        ),
    ),
    (
        "ReleaseAllStateProps__17DeliveryObjective",
        Ok(
            "DeliveryObjective::ReleaseAllStateProps(void)",
        ),
    ),
    (
        "SetButtonHandlersEnabled__17DeliveryObjectiveb",
        Ok(
            "DeliveryObjective::SetButtonHandlersEnabled(bool)",
        ),
    ),
    (
        "SetStatePropState__17DeliveryObjectivei",
        Ok(
            "DeliveryObjective::SetStatePropState(int)",
        ),
    ),
    (
        "SetStatePropHUDIconEnable__17DeliveryObjectiveb",
        Ok(
            "DeliveryObjective::SetStatePropHUDIconEnable(bool)",
        ),
    ),
    (
        "__16DestroyObjective",
        Ok(
            "DestroyObjective::DestroyObjective(void)",
        ),
    ),
    (
        "_$_16DestroyObjective",
        Ok(
            "DestroyObjective::~DestroyObjective(void)",
        ),
    ),
    (
        "OnInitialize__16DestroyObjective",
        Ok(
            "DestroyObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__16DestroyObjective",
        Ok(
            "DestroyObjective::OnFinalize(void)",
        ),
    ),
    (
        "OnUpdate__16DestroyObjectiveUi",
        Ok(
            "DestroyObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "HandleEvent__16DestroyObjective9EventEnumPv",
        Ok(
            "DestroyObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "SetTargetVehicle__16DestroyObjectiveP7Vehicle",
        Ok(
            "DestroyObjective::SetTargetVehicle(Vehicle *)",
        ),
    ),
    (
        "__20DestroyBossObjective",
        Ok(
            "DestroyBossObjective::DestroyBossObjective(void)",
        ),
    ),
    (
        "_$_20DestroyBossObjective",
        Ok(
            "DestroyBossObjective::~DestroyBossObjective(void)",
        ),
    ),
    (
        "SetTarget__20DestroyBossObjectiveP5Actor",
        Ok(
            "DestroyBossObjective::SetTarget(Actor *)",
        ),
    ),
    (
        "OnInitialize__20DestroyBossObjective",
        Ok(
            "DestroyBossObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__20DestroyBossObjective",
        Ok(
            "DestroyBossObjective::OnFinalize(void)",
        ),
    ),
    (
        "OnUpdate__20DestroyBossObjectiveUi",
        Ok(
            "DestroyBossObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "HandleEvent__20DestroyBossObjective9EventEnumPv",
        Ok(
            "DestroyBossObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__17DialogueObjective",
        Ok(
            "DialogueObjective::DialogueObjective(void)",
        ),
    ),
    (
        "_$_17DialogueObjective",
        Ok(
            "DialogueObjective::~DialogueObjective(void)",
        ),
    ),
    (
        "HandleEvent__17DialogueObjective9EventEnumPv",
        Ok(
            "DialogueObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "SetPositions__17DialogueObjectiveP15CarStartLocatorN21b",
        Ok(
            "DialogueObjective::SetPositions(CarStartLocator *, CarStartLocator *, CarStartLocator *, bool)",
        ),
    ),
    (
        "CharactersReset__17DialogueObjective",
        Ok(
            "DialogueObjective::CharactersReset(void)",
        ),
    ),
    (
        "SetChar1Name__17DialogueObjectivePCc",
        Ok(
            "DialogueObjective::SetChar1Name(char const *)",
        ),
    ),
    (
        "SetChar2Name__17DialogueObjectivePCc",
        Ok(
            "DialogueObjective::SetChar2Name(char const *)",
        ),
    ),
    (
        "SetDialogueName__17DialogueObjectivePCc",
        Ok(
            "DialogueObjective::SetDialogueName(char const *)",
        ),
    ),
    (
        "OnInitialize__17DialogueObjective",
        Ok(
            "DialogueObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__17DialogueObjective",
        Ok(
            "DialogueObjective::OnFinalize(void)",
        ),
    ),
    (
        "ResetCharacterPositions__17DialogueObjective",
        Ok(
            "DialogueObjective::ResetCharacterPositions(void)",
        ),
    ),
    (
        "__15FollowObjective",
        Ok(
            "FollowObjective::FollowObjective(void)",
        ),
    ),
    (
        "_$_15FollowObjective",
        Ok(
            "FollowObjective::~FollowObjective(void)",
        ),
    ),
    (
        "OnInitialize__15FollowObjective",
        Ok(
            "FollowObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__15FollowObjective",
        Ok(
            "FollowObjective::OnFinalize(void)",
        ),
    ),
    (
        "OnUpdate__15FollowObjectiveUi",
        Ok(
            "FollowObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "HandleEvent__15FollowObjective9EventEnumPv",
        Ok(
            "FollowObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__14GetInObjective",
        Ok(
            "GetInObjective::GetInObjective(void)",
        ),
    ),
    (
        "_$_14GetInObjective",
        Ok(
            "GetInObjective::~GetInObjective(void)",
        ),
    ),
    (
        "OnInitialize__14GetInObjective",
        Ok(
            "GetInObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__14GetInObjective",
        Ok(
            "GetInObjective::OnFinalize(void)",
        ),
    ),
    (
        "OnUpdate__14GetInObjectiveUi",
        Ok(
            "GetInObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "SetStrict__14GetInObjectivePCc",
        Ok(
            "GetInObjective::SetStrict(char const *)",
        ),
    ),
    (
        "GetPosition__14GetInObjectivePQ218RadicalMathLibrary6Vector",
        Ok(
            "GetInObjective::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetHeading__14GetInObjectivePQ218RadicalMathLibrary6Vector",
        Ok(
            "GetInObjective::GetHeading(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "__13GoToObjective",
        Ok(
            "GoToObjective::GoToObjective(void)",
        ),
    ),
    (
        "_$_13GoToObjective",
        Ok(
            "GoToObjective::~GoToObjective(void)",
        ),
    ),
    (
        "OnInitialize__13GoToObjective",
        Ok(
            "GoToObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__13GoToObjective",
        Ok(
            "GoToObjective::OnFinalize(void)",
        ),
    ),
    (
        "OnUpdate__13GoToObjectiveUi",
        Ok(
            "GoToObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "HandleEvent__13GoToObjective9EventEnumPv",
        Ok(
            "GoToObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "SetDestinationNames__13GoToObjectivePcT1f",
        Ok(
            "GoToObjective::SetDestinationNames(char *, char *, float)",
        ),
    ),
    (
        "SetCollectEffectName__13GoToObjectivePc",
        Ok(
            "GoToObjective::SetCollectEffectName(char *)",
        ),
    ),
    (
        "__13LoseObjective",
        Ok(
            "LoseObjective::LoseObjective(void)",
        ),
    ),
    (
        "_$_13LoseObjective",
        Ok(
            "LoseObjective::~LoseObjective(void)",
        ),
    ),
    (
        "OnInitialize__13LoseObjective",
        Ok(
            "LoseObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__13LoseObjective",
        Ok(
            "LoseObjective::OnFinalize(void)",
        ),
    ),
    (
        "OnUpdate__13LoseObjectiveUi",
        Ok(
            "LoseObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "__16MissionObjective",
        Ok(
            "MissionObjective::MissionObjective(void)",
        ),
    ),
    (
        "_$_16MissionObjective",
        Ok(
            "MissionObjective::~MissionObjective(void)",
        ),
    ),
    (
        "AddNPCWaypoint__16MissionObjectivePCcT1",
        Ok(
            "MissionObjective::AddNPCWaypoint(char const *, char const *)",
        ),
    ),
    (
        "Initialize__16MissionObjective",
        Ok(
            "MissionObjective::Initialize(void)",
        ),
    ),
    (
        "Finalize__16MissionObjective",
        Ok(
            "MissionObjective::Finalize(void)",
        ),
    ),
    (
        "Update__16MissionObjectiveUi",
        Ok(
            "MissionObjective::Update(unsigned int)",
        ),
    ),
    (
        "HandleEvent__16MissionObjective9EventEnumPv",
        Ok(
            "MissionObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "AddNPC__16MissionObjectivePCcT1b",
        Ok(
            "MissionObjective::AddNPC(char const *, char const *, bool)",
        ),
    ),
    (
        "RemoveNPC__16MissionObjectivePCcb",
        Ok(
            "MissionObjective::RemoveNPC(char const *, bool)",
        ),
    ),
    (
        "RegisterLocator__16MissionObjectiveP7LocatorRibQ210HudMapIcon9eIconType",
        Ok(
            "MissionObjective::RegisterLocator(Locator *, int &, bool, HudMapIcon::eIconType)",
        ),
    ),
    (
        "RegisterPosition__16MissionObjectiveRCQ218RadicalMathLibrary6VectorRibQ210HudMapIcon9eIconTypeP18IHudMapIconLocator",
        Ok(
            "MissionObjective::RegisterPosition(RadicalMathLibrary::Vector const &, int &, bool, HudMapIcon::eIconType, IHudMapIconLocator *)",
        ),
    ),
    (
        "UnregisterLocator__16MissionObjectiveRi",
        Ok(
            "MissionObjective::UnregisterLocator(int &)",
        ),
    ),
    (
        "UnregisterPosition__16MissionObjectiveRi",
        Ok(
            "MissionObjective::UnregisterPosition(int &)",
        ),
    ),
    (
        "GetObjectiveType__C16MissionObjective",
        Ok(
            "MissionObjective::GetObjectiveType(void) const",
        ),
    ),
    (
        "SetObjectiveType__16MissionObjectiveQ216MissionObjective17ObjectiveTypeEnum",
        Ok(
            "MissionObjective::SetObjectiveType(MissionObjective::ObjectiveTypeEnum)",
        ),
    ),
    (
        "UnlightPath__16MissionObjectiveRt9SwapArray1ZQ211RoadManager11PathElement",
        Ok(
            "MissionObjective::UnlightPath(SwapArray<RoadManager::PathElement> &)",
        ),
    ),
    (
        "UnlightCurrentPath__16MissionObjectiveRt9SwapArray1ZQ211RoadManager11PathElement",
        Ok(
            "MissionObjective::UnlightCurrentPath(SwapArray<RoadManager::PathElement> &)",
        ),
    ),
    (
        "LightPathRightWay__16MissionObjectiveRt9SwapArray1ZQ211RoadManager11PathElementii",
        Ok(
            "MissionObjective::LightPathRightWay(SwapArray<RoadManager::PathElement> &, int, int)",
        ),
    ),
    (
        "LightPathWrongWay__16MissionObjectiveRt9SwapArray1ZQ211RoadManager11PathElementii",
        Ok(
            "MissionObjective::LightPathWrongWay(SwapArray<RoadManager::PathElement> &, int, int)",
        ),
    ),
    (
        "UpdateLightPath__16MissionObjectiveRQ216MissionObjective10PathStruct",
        Ok(
            "MissionObjective::UpdateLightPath(MissionObjective::PathStruct &)",
        ),
    ),
    (
        "FindIntersectionInPath__16MissionObjectiveRt9SwapArray1ZQ211RoadManager11PathElementP12Intersection",
        Ok(
            "MissionObjective::FindIntersectionInPath(SwapArray<RoadManager::PathElement> &, Intersection *)",
        ),
    ),
    (
        "FindRoadInPath__16MissionObjectiveRt9SwapArray1ZQ211RoadManager11PathElementP4Road",
        Ok(
            "MissionObjective::FindRoadInPath(SwapArray<RoadManager::PathElement> &, Road *)",
        ),
    ),
    (
        "UpdateGroundHeights__16MissionObjectiveRt9SwapArray1ZQ211RoadManager11PathElement",
        Ok(
            "MissionObjective::UpdateGroundHeights(SwapArray<RoadManager::PathElement> &)",
        ),
    ),
    (
        "UpdateLongRoadArrows__16MissionObjectiveRQ216MissionObjective10PathStruct",
        Ok(
            "MissionObjective::UpdateLongRoadArrows(MissionObjective::PathStruct &)",
        ),
    ),
    (
        "LightPath__16MissionObjectiveRQ218RadicalMathLibrary6VectorRQ216MissionObjective10PathStruct",
        Ok(
            "MissionObjective::LightPath(RadicalMathLibrary::Vector &, MissionObjective::PathStruct &)",
        ),
    ),
    (
        "GetHeadingAlongPath__16MissionObjectiveRt9SwapArray1ZQ211RoadManager11PathElementiP11RoadSegmentRQ218RadicalMathLibrary6Vector",
        Ok(
            "MissionObjective::GetHeadingAlongPath(SwapArray<RoadManager::PathElement> &, int, RoadSegment *, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "UpdateAnimPosition__16MissionObjectiveP13AnimEntityDSGRQ218RadicalMathLibrary6Vector",
        Ok(
            "MissionObjective::UpdateAnimPosition(AnimEntityDSG *, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "IsPattyAndSelmaDialog__C16MissionObjective",
        Ok(
            "MissionObjective::IsPattyAndSelmaDialog(void) const",
        ),
    ),
    (
        "IsRaceDialog__C16MissionObjective",
        Ok(
            "MissionObjective::IsRaceDialog(void) const",
        ),
    ),
    (
        "__13RaceObjective",
        Ok(
            "RaceObjective::RaceObjective(void)",
        ),
    ),
    (
        "_$_13RaceObjective",
        Ok(
            "RaceObjective::~RaceObjective(void)",
        ),
    ),
    (
        "OnInitialize__13RaceObjective",
        Ok(
            "RaceObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnInitCollectibles__13RaceObjective",
        Ok(
            "RaceObjective::OnInitCollectibles(void)",
        ),
    ),
    (
        "OnInitCollectibleObjective__13RaceObjective",
        Ok(
            "RaceObjective::OnInitCollectibleObjective(void)",
        ),
    ),
    (
        "OnFinalizeCollectibleObjective__13RaceObjective",
        Ok(
            "RaceObjective::OnFinalizeCollectibleObjective(void)",
        ),
    ),
    (
        "OnCollection__13RaceObjectiveUiRb",
        Ok(
            "RaceObjective::OnCollection(unsigned int, bool &)",
        ),
    ),
    (
        "OnUpdateCollectibleObjective__13RaceObjectiveUi",
        Ok(
            "RaceObjective::OnUpdateCollectibleObjective(unsigned int)",
        ),
    ),
    (
        "QueryIsGambleRace__13RaceObjective",
        Ok(
            "RaceObjective::QueryIsGambleRace(void)",
        ),
    ),
    (
        "SetGambleRace__13RaceObjectiveb",
        Ok(
            "RaceObjective::SetGambleRace(bool)",
        ),
    ),
    (
        "SetParTime__13RaceObjectivei",
        Ok(
            "RaceObjective::SetParTime(int)",
        ),
    ),
    (
        "GetParTime__13RaceObjective",
        Ok(
            "RaceObjective::GetParTime(void)",
        ),
    ),
    (
        "CalculatePosition__13RaceObjective",
        Ok(
            "RaceObjective::CalculatePosition(void)",
        ),
    ),
    (
        "__15TalkToObjective",
        Ok(
            "TalkToObjective::TalkToObjective(void)",
        ),
    ),
    (
        "_$_15TalkToObjective",
        Ok(
            "TalkToObjective::~TalkToObjective(void)",
        ),
    ),
    (
        "SetTalkToTarget__15TalkToObjectivePCcQ215TalkToObjective8IconTypeff",
        Ok(
            "TalkToObjective::SetTalkToTarget(char const *, TalkToObjective::IconType, float, float)",
        ),
    ),
    (
        "GetPosition__15TalkToObjectivePQ218RadicalMathLibrary6Vector",
        Ok(
            "TalkToObjective::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetHeading__15TalkToObjectivePQ218RadicalMathLibrary6Vector",
        Ok(
            "TalkToObjective::GetHeading(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "OnInitialize__15TalkToObjective",
        Ok(
            "TalkToObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__15TalkToObjective",
        Ok(
            "TalkToObjective::OnFinalize(void)",
        ),
    ),
    (
        "HandleEvent__15TalkToObjective9EventEnumPv",
        Ok(
            "TalkToObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnUpdate__15TalkToObjectiveUi",
        Ok(
            "TalkToObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "__20CollectibleObjective",
        Ok(
            "CollectibleObjective::CollectibleObjective(void)",
        ),
    ),
    (
        "_$_20CollectibleObjective",
        Ok(
            "CollectibleObjective::~CollectibleObjective(void)",
        ),
    ),
    (
        "MoveCollectible__20CollectibleObjectiveUiRCQ218RadicalMathLibrary6Vector",
        Ok(
            "CollectibleObjective::MoveCollectible(unsigned int, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "AddCollectibleLocatorName__20CollectibleObjectivePcT1UiG13tUidUnalignedf",
        Ok(
            "CollectibleObjective::AddCollectibleLocatorName(char *, char *, unsigned int, tUidUnaligned, float)",
        ),
    ),
    (
        "SetCollectEffectName__20CollectibleObjectivePc",
        Ok(
            "CollectibleObjective::SetCollectEffectName(char *)",
        ),
    ),
    (
        "HandleEvent__20CollectibleObjective9EventEnumPv",
        Ok(
            "CollectibleObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnUpdate__20CollectibleObjectiveUi",
        Ok(
            "CollectibleObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnInitialize__20CollectibleObjective",
        Ok(
            "CollectibleObjective::OnInitialize(void)",
        ),
    ),
    (
        "GetCollectiblePathInfo__20CollectibleObjectiveUiRQ211RoadManager11PathElementRf",
        Ok(
            "CollectibleObjective::GetCollectiblePathInfo(unsigned int, RoadManager::PathElement &, float &)",
        ),
    ),
    (
        "OnFinalize__20CollectibleObjective",
        Ok(
            "CollectibleObjective::OnFinalize(void)",
        ),
    ),
    (
        "CheckCollectibleLocators__20CollectibleObjectiveP7Locator",
        Ok(
            "CollectibleObjective::CheckCollectibleLocators(Locator *)",
        ),
    ),
    (
        "Collect__20CollectibleObjectiveUib",
        Ok(
            "CollectibleObjective::Collect(unsigned int, bool)",
        ),
    ),
    (
        "Activate__20CollectibleObjectiveUibT2Q210HudMapIcon9eIconTypeT2",
        Ok(
            "CollectibleObjective::Activate(unsigned int, bool, bool, HudMapIcon::eIconType, bool)",
        ),
    ),
    (
        "SetFocus__20CollectibleObjectiveUi",
        Ok(
            "CollectibleObjective::SetFocus(unsigned int)",
        ),
    ),
    (
        "ResetCollectibles__20CollectibleObjective",
        Ok(
            "CollectibleObjective::ResetCollectibles(void)",
        ),
    ),
    (
        "DumpCollectible__20CollectibleObjectiveiP7VehicleT2bT4",
        Ok(
            "CollectibleObjective::DumpCollectible(int, Vehicle *, Vehicle *, bool, bool)",
        ),
    ),
    (
        "GetAnyCollectedID__C20CollectibleObjective",
        Ok(
            "CollectibleObjective::GetAnyCollectedID(void) const",
        ),
    ),
    (
        "Uncollect__20CollectibleObjectivei",
        Ok(
            "CollectibleObjective::Uncollect(int)",
        ),
    ),
    (
        "__22CollectDumpedObjective",
        Ok(
            "CollectDumpedObjective::CollectDumpedObjective(void)",
        ),
    ),
    (
        "_$_22CollectDumpedObjective",
        Ok(
            "CollectDumpedObjective::~CollectDumpedObjective(void)",
        ),
    ),
    (
        "BindCollectibleToWaypoint__22CollectDumpedObjectiveiUi",
        Ok(
            "CollectDumpedObjective::BindCollectibleToWaypoint(int, unsigned int)",
        ),
    ),
    (
        "SetDumpVehicle__22CollectDumpedObjectiveP7Vehicle",
        Ok(
            "CollectDumpedObjective::SetDumpVehicle(Vehicle *)",
        ),
    ),
    (
        "HandleEvent__22CollectDumpedObjective9EventEnumPv",
        Ok(
            "CollectDumpedObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnInitCollectibles__22CollectDumpedObjective",
        Ok(
            "CollectDumpedObjective::OnInitCollectibles(void)",
        ),
    ),
    (
        "OnInitCollectibleObjective__22CollectDumpedObjective",
        Ok(
            "CollectDumpedObjective::OnInitCollectibleObjective(void)",
        ),
    ),
    (
        "OnFinalizeCollectibleObjective__22CollectDumpedObjective",
        Ok(
            "CollectDumpedObjective::OnFinalizeCollectibleObjective(void)",
        ),
    ),
    (
        "OnCollection__22CollectDumpedObjectiveUiRb",
        Ok(
            "CollectDumpedObjective::OnCollection(unsigned int, bool &)",
        ),
    ),
    (
        "OnUpdateCollectibleObjective__22CollectDumpedObjectiveUi",
        Ok(
            "CollectDumpedObjective::OnUpdateCollectibleObjective(unsigned int)",
        ),
    ),
    (
        "FindFreeSlot__22CollectDumpedObjective",
        Ok(
            "CollectDumpedObjective::FindFreeSlot(void)",
        ),
    ),
    (
        "__12FMVObjective",
        Ok(
            "FMVObjective::FMVObjective(void)",
        ),
    ),
    (
        "_$_12FMVObjective",
        Ok(
            "FMVObjective::~FMVObjective(void)",
        ),
    ),
    (
        "OnPresentationEventEnd__12FMVObjectiveP17PresentationEvent",
        Ok(
            "FMVObjective::OnPresentationEventEnd(PresentationEvent *)",
        ),
    ),
    (
        "OnInitialize__12FMVObjective",
        Ok(
            "FMVObjective::OnInitialize(void)",
        ),
    ),
    (
        "SetFileName__12FMVObjectivePCc",
        Ok(
            "FMVObjective::SetFileName(char const *)",
        ),
    ),
    (
        "__17InteriorObjective",
        Ok(
            "InteriorObjective::InteriorObjective(void)",
        ),
    ),
    (
        "_$_17InteriorObjective",
        Ok(
            "InteriorObjective::~InteriorObjective(void)",
        ),
    ),
    (
        "OnInitialize__17InteriorObjective",
        Ok(
            "InteriorObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__17InteriorObjective",
        Ok(
            "InteriorObjective::OnFinalize(void)",
        ),
    ),
    (
        "OnUpdate__17InteriorObjectiveUi",
        Ok(
            "InteriorObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "HandleEvent__17InteriorObjective9EventEnumPv",
        Ok(
            "InteriorObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "GetPosition__17InteriorObjectivePQ218RadicalMathLibrary6Vector",
        Ok(
            "InteriorObjective::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetHeading__17InteriorObjectivePQ218RadicalMathLibrary6Vector",
        Ok(
            "InteriorObjective::GetHeading(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetDestination__17InteriorObjectivePCc",
        Ok(
            "InteriorObjective::SetDestination(char const *)",
        ),
    ),
    (
        "SetIcon__17InteriorObjectivePCc",
        Ok(
            "InteriorObjective::SetIcon(char const *)",
        ),
    ),
    (
        "__13CoinObjective",
        Ok(
            "CoinObjective::CoinObjective(void)",
        ),
    ),
    (
        "_$_13CoinObjective",
        Ok(
            "CoinObjective::~CoinObjective(void)",
        ),
    ),
    (
        "HandleEvent__13CoinObjective9EventEnumPv",
        Ok(
            "CoinObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnInitialize__13CoinObjective",
        Ok(
            "CoinObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__13CoinObjective",
        Ok(
            "CoinObjective::OnFinalize(void)",
        ),
    ),
    (
        "Update__13CoinObjectiveUi",
        Ok(
            "CoinObjective::Update(unsigned int)",
        ),
    ),
    (
        "OnUpdate__13CoinObjectiveUi",
        Ok(
            "CoinObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "SetCoinFee__13CoinObjectivei",
        Ok(
            "CoinObjective::SetCoinFee(int)",
        ),
    ),
    (
        "GetCoinAmount__13CoinObjective",
        Ok(
            "CoinObjective::GetCoinAmount(void)",
        ),
    ),
    (
        "__20LoadVehicleObjective",
        Ok(
            "LoadVehicleObjective::LoadVehicleObjective(void)",
        ),
    ),
    (
        "_$_20LoadVehicleObjective",
        Ok(
            "LoadVehicleObjective::~LoadVehicleObjective(void)",
        ),
    ),
    (
        "OnInitialize__20LoadVehicleObjective",
        Ok(
            "LoadVehicleObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__20LoadVehicleObjective",
        Ok(
            "LoadVehicleObjective::OnFinalize(void)",
        ),
    ),
    (
        "OnProcessRequestsComplete__Q220LoadVehicleObjective30LoadDisposableCarAsyncCallbackPv",
        Ok(
            "LoadVehicleObjective::LoadDisposableCarAsyncCallback::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "__19PickupItemObjective",
        Ok(
            "PickupItemObjective::PickupItemObjective(void)",
        ),
    ),
    (
        "_$_19PickupItemObjective",
        Ok(
            "PickupItemObjective::~PickupItemObjective(void)",
        ),
    ),
    (
        "SetTarget__19PickupItemObjectivePCc",
        Ok(
            "PickupItemObjective::SetTarget(char const *)",
        ),
    ),
    (
        "OnInitialize__19PickupItemObjective",
        Ok(
            "PickupItemObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__19PickupItemObjective",
        Ok(
            "PickupItemObjective::OnFinalize(void)",
        ),
    ),
    (
        "OnUpdate__19PickupItemObjectiveUi",
        Ok(
            "PickupItemObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "HandleEvent__19PickupItemObjective9EventEnumPv",
        Ok(
            "PickupItemObjective::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "MoveObjectToStartPosition__19PickupItemObjective",
        Ok(
            "PickupItemObjective::MoveObjectToStartPosition(void)",
        ),
    ),
    (
        "__14TimerObjective",
        Ok(
            "TimerObjective::TimerObjective(void)",
        ),
    ),
    (
        "_$_14TimerObjective",
        Ok(
            "TimerObjective::~TimerObjective(void)",
        ),
    ),
    (
        "SetTimer__14TimerObjectiveUi",
        Ok(
            "TimerObjective::SetTimer(unsigned int)",
        ),
    ),
    (
        "OnInitialize__14TimerObjective",
        Ok(
            "TimerObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__14TimerObjective",
        Ok(
            "TimerObjective::OnFinalize(void)",
        ),
    ),
    (
        "Update__14TimerObjectiveUi",
        Ok(
            "TimerObjective::Update(unsigned int)",
        ),
    ),
    (
        "OnUpdate__14TimerObjectiveUi",
        Ok(
            "TimerObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "__15BuyCarObjective",
        Ok(
            "BuyCarObjective::BuyCarObjective(void)",
        ),
    ),
    (
        "_$_15BuyCarObjective",
        Ok(
            "BuyCarObjective::~BuyCarObjective(void)",
        ),
    ),
    (
        "SetVehicleName__15BuyCarObjectivePCc",
        Ok(
            "BuyCarObjective::SetVehicleName(char const *)",
        ),
    ),
    (
        "OnUpdate__15BuyCarObjectiveUi",
        Ok(
            "BuyCarObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "__16BuySkinObjective",
        Ok(
            "BuySkinObjective::BuySkinObjective(void)",
        ),
    ),
    (
        "_$_16BuySkinObjective",
        Ok(
            "BuySkinObjective::~BuySkinObjective(void)",
        ),
    ),
    (
        "SetSkinName__16BuySkinObjectivePCc",
        Ok(
            "BuySkinObjective::SetSkinName(char const *)",
        ),
    ),
    (
        "OnUpdate__16BuySkinObjectiveUi",
        Ok(
            "BuySkinObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "__18GoOutsideObjective",
        Ok(
            "GoOutsideObjective::GoOutsideObjective(void)",
        ),
    ),
    (
        "_$_18GoOutsideObjective",
        Ok(
            "GoOutsideObjective::~GoOutsideObjective(void)",
        ),
    ),
    (
        "OnInitialize__18GoOutsideObjective",
        Ok(
            "GoOutsideObjective::OnInitialize(void)",
        ),
    ),
    (
        "__tf16MissionObjective",
        Ok(
            "MissionObjective type_info function",
        ),
    ),
    (
        "__tf20CollectibleObjective",
        Ok(
            "CollectibleObjective type_info function",
        ),
    ),
    (
        "__tf17DeliveryObjective",
        Ok(
            "DeliveryObjective type_info function",
        ),
    ),
    (
        "__tf16DestroyObjective",
        Ok(
            "DestroyObjective type_info function",
        ),
    ),
    (
        "__tf20DestroyBossObjective",
        Ok(
            "DestroyBossObjective type_info function",
        ),
    ),
    (
        "__tf17DialogueObjective",
        Ok(
            "DialogueObjective type_info function",
        ),
    ),
    (
        "__tf15FollowObjective",
        Ok(
            "FollowObjective type_info function",
        ),
    ),
    (
        "__tf14GetInObjective",
        Ok(
            "GetInObjective type_info function",
        ),
    ),
    (
        "__tf13GoToObjective",
        Ok(
            "GoToObjective type_info function",
        ),
    ),
    (
        "__tf13LoseObjective",
        Ok(
            "LoseObjective type_info function",
        ),
    ),
    (
        "__tf13RaceObjective",
        Ok(
            "RaceObjective type_info function",
        ),
    ),
    (
        "__tf15TalkToObjective",
        Ok(
            "TalkToObjective type_info function",
        ),
    ),
    (
        "__tf22CollectDumpedObjective",
        Ok(
            "CollectDumpedObjective type_info function",
        ),
    ),
    (
        "__tf19CollectionCondition",
        Ok(
            "CollectionCondition type_info function",
        ),
    ),
    (
        "__tf12FMVObjective",
        Ok(
            "FMVObjective type_info function",
        ),
    ),
    (
        "__tf17InteriorObjective",
        Ok(
            "InteriorObjective type_info function",
        ),
    ),
    (
        "__tf13CoinObjective",
        Ok(
            "CoinObjective type_info function",
        ),
    ),
    (
        "__tfQ220LoadVehicleObjective30LoadDisposableCarAsyncCallback",
        Ok(
            "LoadVehicleObjective::LoadDisposableCarAsyncCallback type_info function",
        ),
    ),
    (
        "__tf20LoadVehicleObjective",
        Ok(
            "LoadVehicleObjective type_info function",
        ),
    ),
    (
        "__tf19PickupItemObjective",
        Ok(
            "PickupItemObjective type_info function",
        ),
    ),
    (
        "__tf14TimerObjective",
        Ok(
            "TimerObjective type_info function",
        ),
    ),
    (
        "__tf15BuyCarObjective",
        Ok(
            "BuyCarObjective type_info function",
        ),
    ),
    (
        "__tf16BuySkinObjective",
        Ok(
            "BuySkinObjective type_info function",
        ),
    ),
    (
        "__tf18GoOutsideObjective",
        Ok(
            "GoOutsideObjective type_info function",
        ),
    ),
    (
        "_$_Q216MissionObjective10PathStruct",
        Ok(
            "MissionObjective::PathStruct::~PathStruct(void)",
        ),
    ),
    (
        "_$_Q216MissionObjective9NPCStruct",
        Ok(
            "MissionObjective::NPCStruct::~NPCStruct(void)",
        ),
    ),
    (
        "OnInitialize__16MissionObjective",
        Ok(
            "MissionObjective::OnInitialize(void)",
        ),
    ),
    (
        "OnFinalize__16MissionObjective",
        Ok(
            "MissionObjective::OnFinalize(void)",
        ),
    ),
    (
        "OnUpdate__16MissionObjectiveUi",
        Ok(
            "MissionObjective::OnUpdate(unsigned int)",
        ),
    ),
    (
        "_$_Q220CollectibleObjective22CollectibleLocatorData",
        Ok(
            "CollectibleObjective::CollectibleLocatorData::~CollectibleLocatorData(void)",
        ),
    ),
    (
        "OnUpdateCollectibleObjective__20CollectibleObjectiveUi",
        Ok(
            "CollectibleObjective::OnUpdateCollectibleObjective(unsigned int)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z16ZoneEventLocator",
        Ok(
            "radLoadInventory::SafeCast<ZoneEventLocator>::SafeCast(void)",
        ),
    ),
    (
        "_$_19CollectionCondition",
        Ok(
            "CollectionCondition::~CollectionCondition(void)",
        ),
    ),
    (
        "Update__19CollectionConditionUi",
        Ok(
            "CollectionCondition::Update(unsigned int)",
        ),
    ),
    (
        "IsClose__19CollectionCondition",
        Ok(
            "CollectionCondition::IsClose(void)",
        ),
    ),
    (
        "OnFinalize__12FMVObjective",
        Ok(
            "FMVObjective::OnFinalize(void)",
        ),
    ),
    (
        "OnPresentationEventBegin__12FMVObjectiveP17PresentationEvent",
        Ok(
            "FMVObjective::OnPresentationEventBegin(PresentationEvent *)",
        ),
    ),
    (
        "OnPresentationEventLoadComplete__12FMVObjectiveP17PresentationEvent",
        Ok(
            "FMVObjective::OnPresentationEventLoadComplete(PresentationEvent *)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z20StatePropCollectible",
        Ok(
            "radLoadInventory::SafeCast<StatePropCollectible>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z16ZoneEventLocator",
        Ok(
            "radLoadInventory::SafeCast<ZoneEventLocator> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z20StatePropCollectible",
        Ok(
            "radLoadInventory::SafeCast<StatePropCollectible> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z20StatePropCollectibleP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<StatePropCollectible>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z16ZoneEventLocatorP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<ZoneEventLocator>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$__17DeliveryObjective",
        Ok(
            "global constructors keyed to DeliveryObjective::DeliveryObjective(void)",
        ),
    ),
    (
        "__15AnimationPlayer",
        Ok(
            "AnimationPlayer::AnimationPlayer(void)",
        ),
    ),
    (
        "_$_15AnimationPlayer",
        Ok(
            "AnimationPlayer::~AnimationPlayer(void)",
        ),
    ),
    (
        "LoadData__15AnimationPlayerPCcbPv",
        Ok(
            "AnimationPlayer::LoadData(char const *, bool, void *)",
        ),
    ),
    (
        "LoadData__15AnimationPlayerPCcPQ215AnimationPlayer16LoadDataCallBackbPv",
        Ok(
            "AnimationPlayer::LoadData(char const *, AnimationPlayer::LoadDataCallBack *, bool, void *)",
        ),
    ),
    (
        "OnProcessRequestsComplete__15AnimationPlayerPv",
        Ok(
            "AnimationPlayer::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "Play__15AnimationPlayer",
        Ok(
            "AnimationPlayer::Play(void)",
        ),
    ),
    (
        "Render__15AnimationPlayer",
        Ok(
            "AnimationPlayer::Render(void)",
        ),
    ),
    (
        "Stop__15AnimationPlayer",
        Ok(
            "AnimationPlayer::Stop(void)",
        ),
    ),
    (
        "ClearData__15AnimationPlayer",
        Ok(
            "AnimationPlayer::ClearData(void)",
        ),
    ),
    (
        "EnterExclusive__15AnimationPlayer",
        Ok(
            "AnimationPlayer::EnterExclusive(void)",
        ),
    ),
    (
        "LeaveExclusive__15AnimationPlayer",
        Ok(
            "AnimationPlayer::LeaveExclusive(void)",
        ),
    ),
    (
        "__7Blinker",
        Ok(
            "Blinker::Blinker(void)",
        ),
    ),
    (
        "_$_7Blinker",
        Ok(
            "Blinker::~Blinker(void)",
        ),
    ),
    (
        "SetCharacter__7BlinkerP9Character",
        Ok(
            "Blinker::SetCharacter(Character *)",
        ),
    ),
    (
        "Update__7Blinkeri",
        Ok(
            "Blinker::Update(int)",
        ),
    ),
    (
        "__12CameraPlayer",
        Ok(
            "CameraPlayer::CameraPlayer(void)",
        ),
    ),
    (
        "_$_12CameraPlayer",
        Ok(
            "CameraPlayer::~CameraPlayer(void)",
        ),
    ),
    (
        "ClearData__12CameraPlayer",
        Ok(
            "CameraPlayer::ClearData(void)",
        ),
    ),
    (
        "DoLoaded__12CameraPlayer",
        Ok(
            "CameraPlayer::DoLoaded(void)",
        ),
    ),
    (
        "GetHardwareLanguage__8Languagev",
        Ok(
            "Language::GetHardwareLanguage(void)",
        ),
    ),
    (
        "__12MouthFlapper",
        Ok(
            "MouthFlapper::MouthFlapper(void)",
        ),
    ),
    (
        "_$_12MouthFlapper",
        Ok(
            "MouthFlapper::~MouthFlapper(void)",
        ),
    ),
    (
        "GetDefaultSettings__12MouthFlapperRC5tName",
        Ok(
            "MouthFlapper::GetDefaultSettings(tName const &)",
        ),
    ),
    (
        "GetNumberOfDefaultSettings__12MouthFlapper",
        Ok(
            "MouthFlapper::GetNumberOfDefaultSettings(void)",
        ),
    ),
    (
        "SetCharacter__12MouthFlapperP9Character",
        Ok(
            "MouthFlapper::SetCharacter(Character *)",
        ),
    ),
    (
        "Advance__12MouthFlapperf",
        Ok(
            "MouthFlapper::Advance(float)",
        ),
    ),
    (
        "Update__12MouthFlapperPQ25poser4Pose",
        Ok(
            "MouthFlapper::Update(poser::Pose *)",
        ),
    ),
    (
        "NeuSpeed__12MouthFlapper",
        Ok(
            "MouthFlapper::NeuSpeed(void)",
        ),
    ),
    (
        "__26MouthFlapperDefaultSettingRC5tNamefffff",
        Ok(
            "MouthFlapperDefaultSetting::MouthFlapperDefaultSetting(tName const &, float, float, float, float, float)",
        ),
    ),
    (
        "__26MouthFlapperDefaultSettingRC26MouthFlapperDefaultSetting",
        Ok(
            "MouthFlapperDefaultSetting::MouthFlapperDefaultSetting(MouthFlapperDefaultSetting const &)",
        ),
    ),
    (
        "GetMaxDeviation__C26MouthFlapperDefaultSetting",
        Ok(
            "MouthFlapperDefaultSetting::GetMaxDeviation(void) const",
        ),
    ),
    (
        "GetMaxOpen__C26MouthFlapperDefaultSetting",
        Ok(
            "MouthFlapperDefaultSetting::GetMaxOpen(void) const",
        ),
    ),
    (
        "GetMaxSpeed__C26MouthFlapperDefaultSetting",
        Ok(
            "MouthFlapperDefaultSetting::GetMaxSpeed(void) const",
        ),
    ),
    (
        "GetMinOpen__C26MouthFlapperDefaultSetting",
        Ok(
            "MouthFlapperDefaultSetting::GetMinOpen(void) const",
        ),
    ),
    (
        "GetMinSpeed__C26MouthFlapperDefaultSetting",
        Ok(
            "MouthFlapperDefaultSetting::GetMinSpeed(void) const",
        ),
    ),
    (
        "GetName__C26MouthFlapperDefaultSetting",
        Ok(
            "MouthFlapperDefaultSetting::GetName(void) const",
        ),
    ),
    (
        "__as__26MouthFlapperDefaultSettingRC26MouthFlapperDefaultSetting",
        Ok(
            "MouthFlapperDefaultSetting::operator=(MouthFlapperDefaultSetting const &)",
        ),
    ),
    (
        "__9NISPlayer",
        Ok(
            "NISPlayer::NISPlayer(void)",
        ),
    ),
    (
        "_$_9NISPlayer",
        Ok(
            "NISPlayer::~NISPlayer(void)",
        ),
    ),
    (
        "ClearData__9NISPlayer",
        Ok(
            "NISPlayer::ClearData(void)",
        ),
    ),
    (
        "DoLoaded__9NISPlayer",
        Ok(
            "NISPlayer::DoLoaded(void)",
        ),
    ),
    (
        "DoRender__9NISPlayer",
        Ok(
            "NISPlayer::DoRender(void)",
        ),
    ),
    (
        "__14PlayerDrawable",
        Ok(
            "PlayerDrawable::PlayerDrawable(void)",
        ),
    ),
    (
        "_$_14PlayerDrawable",
        Ok(
            "PlayerDrawable::~PlayerDrawable(void)",
        ),
    ),
    (
        "Display__14PlayerDrawable",
        Ok(
            "PlayerDrawable::Display(void)",
        ),
    ),
    (
        "CreateInstance__19PresentationManager",
        Ok(
            "PresentationManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__19PresentationManager",
        Ok(
            "PresentationManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__19PresentationManager",
        Ok(
            "PresentationManager::DestroyInstance(void)",
        ),
    ),
    (
        "__19PresentationManager",
        Ok(
            "PresentationManager::PresentationManager(void)",
        ),
    ),
    (
        "_$_19PresentationManager",
        Ok(
            "PresentationManager::~PresentationManager(void)",
        ),
    ),
    (
        "Initialize__19PresentationManager",
        Ok(
            "PresentationManager::Initialize(void)",
        ),
    ),
    (
        "Finalize__19PresentationManager",
        Ok(
            "PresentationManager::Finalize(void)",
        ),
    ),
    (
        "InitializePlayerDrawable__19PresentationManager",
        Ok(
            "PresentationManager::InitializePlayerDrawable(void)",
        ),
    ),
    (
        "FinalizePlayerDrawable__19PresentationManager",
        Ok(
            "PresentationManager::FinalizePlayerDrawable(void)",
        ),
    ),
    (
        "GetAnimatorNpc__19PresentationManager",
        Ok(
            "PresentationManager::GetAnimatorNpc(void)",
        ),
    ),
    (
        "GetAnimatorPc__19PresentationManager",
        Ok(
            "PresentationManager::GetAnimatorPc(void)",
        ),
    ),
    (
        "PlayFMV__19PresentationManagerPCcPQ217PresentationEvent25PresentationEventCallBackbT3",
        Ok(
            "PresentationManager::PlayFMV(char const *, PresentationEvent::PresentationEventCallBack *, bool, bool)",
        ),
    ),
    (
        "OnPresentationEventBegin__19PresentationManagerP17PresentationEvent",
        Ok(
            "PresentationManager::OnPresentationEventBegin(PresentationEvent *)",
        ),
    ),
    (
        "OnPresentationEventLoadComplete__19PresentationManagerP17PresentationEvent",
        Ok(
            "PresentationManager::OnPresentationEventLoadComplete(PresentationEvent *)",
        ),
    ),
    (
        "OnPresentationEventEnd__19PresentationManagerP17PresentationEvent",
        Ok(
            "PresentationManager::OnPresentationEventEnd(PresentationEvent *)",
        ),
    ),
    (
        "OnProcessRequestsComplete__19PresentationManagerPv",
        Ok(
            "PresentationManager::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "QueueFMV__19PresentationManagerPP8FMVEventPQ217PresentationEvent25PresentationEventCallBack",
        Ok(
            "PresentationManager::QueueFMV(FMVEvent **, PresentationEvent::PresentationEventCallBack *)",
        ),
    ),
    (
        "IsBusy__C19PresentationManager",
        Ok(
            "PresentationManager::IsBusy(void) const",
        ),
    ),
    (
        "Update__19PresentationManagerUi",
        Ok(
            "PresentationManager::Update(unsigned int)",
        ),
    ),
    (
        "GetCameraTargetForLineOfDialog__C19PresentationManagerUi",
        Ok(
            "PresentationManager::GetCameraTargetForLineOfDialog(unsigned int) const",
        ),
    ),
    (
        "HandleEvent__19PresentationManager9EventEnumPv",
        Ok(
            "PresentationManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "AddToQueue__19PresentationManagerP17PresentationEvent",
        Ok(
            "PresentationManager::AddToQueue(PresentationEvent *)",
        ),
    ),
    (
        "ReturnToPool__19PresentationManagerP17PresentationEvent",
        Ok(
            "PresentationManager::ReturnToPool(PresentationEvent *)",
        ),
    ),
    (
        "GetFirst__19PresentationManager",
        Ok(
            "PresentationManager::GetFirst(void)",
        ),
    ),
    (
        "OnGameplayStart__19PresentationManager",
        Ok(
            "PresentationManager::OnGameplayStart(void)",
        ),
    ),
    (
        "OnGameplayStop__19PresentationManager",
        Ok(
            "PresentationManager::OnGameplayStop(void)",
        ),
    ),
    (
        "SetCamerasForLineOfDialog__19PresentationManagerRCt6vector2Z5tNameZt7s2alloc1Z5tName",
        Ok(
            "PresentationManager::SetCamerasForLineOfDialog(vector<tName, s2alloc<tName> > const &)",
        ),
    ),
    (
        "InConversation__C19PresentationManager",
        Ok(
            "PresentationManager::InConversation(void) const",
        ),
    ),
    (
        "StopAll__19PresentationManager",
        Ok(
            "PresentationManager::StopAll(void)",
        ),
    ),
    (
        "__19PresentationOverlay",
        Ok(
            "PresentationOverlay::PresentationOverlay(void)",
        ),
    ),
    (
        "Update__19PresentationOverlayUi",
        Ok(
            "PresentationOverlay::Update(unsigned int)",
        ),
    ),
    (
        "Display__19PresentationOverlay",
        Ok(
            "PresentationOverlay::Display(void)",
        ),
    ),
    (
        "ReplaceMissionBriefingBitmap__19PresentationManagerRC5tName",
        Ok(
            "PresentationManager::ReplaceMissionBriefingBitmap(tName const &)",
        ),
    ),
    (
        "MakeCharactersFaceEachOther__19PresentationManagerP9CharacterT1",
        Ok(
            "PresentationManager::MakeCharactersFaceEachOther(Character *, Character *)",
        ),
    ),
    (
        "__20PresentationAnimator",
        Ok(
            "PresentationAnimator::PresentationAnimator(void)",
        ),
    ),
    (
        "_$_20PresentationAnimator",
        Ok(
            "PresentationAnimator::~PresentationAnimator(void)",
        ),
    ),
    (
        "AddAmbientAnimations__20PresentationAnimatorRCt6vector2Z5tNameZt7s2alloc1Z5tName",
        Ok(
            "PresentationAnimator::AddAmbientAnimations(vector<tName, s2alloc<tName> > const &)",
        ),
    ),
    (
        "ClearAmbientAnimations__20PresentationAnimator",
        Ok(
            "PresentationAnimator::ClearAmbientAnimations(void)",
        ),
    ),
    (
        "ChooseNextAnimation__20PresentationAnimator",
        Ok(
            "PresentationAnimator::ChooseNextAnimation(void)",
        ),
    ),
    (
        "ChooseRandomAnimation__C20PresentationAnimator",
        Ok(
            "PresentationAnimator::ChooseRandomAnimation(void) const",
        ),
    ),
    (
        "SetCharacter__20PresentationAnimatorP9Character",
        Ok(
            "PresentationAnimator::SetCharacter(Character *)",
        ),
    ),
    (
        "GetCharacter__20PresentationAnimator",
        Ok(
            "PresentationAnimator::GetCharacter(void)",
        ),
    ),
    (
        "PlaySpecialAmbientAnimation__20PresentationAnimator",
        Ok(
            "PresentationAnimator::PlaySpecialAmbientAnimation(void)",
        ),
    ),
    (
        "SetRandomSelection__20PresentationAnimatorb",
        Ok(
            "PresentationAnimator::SetRandomSelection(bool)",
        ),
    ),
    (
        "StartTalking__20PresentationAnimator",
        Ok(
            "PresentationAnimator::StartTalking(void)",
        ),
    ),
    (
        "StopTalking__20PresentationAnimator",
        Ok(
            "PresentationAnimator::StopTalking(void)",
        ),
    ),
    (
        "Update__20PresentationAnimatori",
        Ok(
            "PresentationAnimator::Update(int)",
        ),
    ),
    (
        "__21SimpleAnimationPlayer",
        Ok(
            "SimpleAnimationPlayer::SimpleAnimationPlayer(void)",
        ),
    ),
    (
        "_$_21SimpleAnimationPlayer",
        Ok(
            "SimpleAnimationPlayer::~SimpleAnimationPlayer(void)",
        ),
    ),
    (
        "Update__21SimpleAnimationPlayerUi",
        Ok(
            "SimpleAnimationPlayer::Update(unsigned int)",
        ),
    ),
    (
        "Rewind__21SimpleAnimationPlayer",
        Ok(
            "SimpleAnimationPlayer::Rewind(void)",
        ),
    ),
    (
        "ClearData__21SimpleAnimationPlayer",
        Ok(
            "SimpleAnimationPlayer::ClearData(void)",
        ),
    ),
    (
        "SetNameData__21SimpleAnimationPlayerPcN21",
        Ok(
            "SimpleAnimationPlayer::SetNameData(char *, char *, char *)",
        ),
    ),
    (
        "DoLoaded__21SimpleAnimationPlayer",
        Ok(
            "SimpleAnimationPlayer::DoLoaded(void)",
        ),
    ),
    (
        "DoRender__21SimpleAnimationPlayer",
        Ok(
            "SimpleAnimationPlayer::DoRender(void)",
        ),
    ),
    (
        "SetIntroLoop__21SimpleAnimationPlayerUi",
        Ok(
            "SimpleAnimationPlayer::SetIntroLoop(unsigned int)",
        ),
    ),
    (
        "SetOutroLoop__21SimpleAnimationPlayerUi",
        Ok(
            "SimpleAnimationPlayer::SetOutroLoop(unsigned int)",
        ),
    ),
    (
        "Play__21SimpleAnimationPlayer",
        Ok(
            "SimpleAnimationPlayer::Play(void)",
        ),
    ),
    (
        "DoneIntro__21SimpleAnimationPlayer",
        Ok(
            "SimpleAnimationPlayer::DoneIntro(void)",
        ),
    ),
    (
        "__16TransitionPlayer",
        Ok(
            "TransitionPlayer::TransitionPlayer(void)",
        ),
    ),
    (
        "_$_16TransitionPlayer",
        Ok(
            "TransitionPlayer::~TransitionPlayer(void)",
        ),
    ),
    (
        "SetTransition__16TransitionPlayerPQ216TransitionPlayer14TransitionInfo",
        Ok(
            "TransitionPlayer::SetTransition(TransitionPlayer::TransitionInfo *)",
        ),
    ),
    (
        "Update__16TransitionPlayerUi",
        Ok(
            "TransitionPlayer::Update(unsigned int)",
        ),
    ),
    (
        "DoUpdate__16TransitionPlayerUi",
        Ok(
            "TransitionPlayer::DoUpdate(unsigned int)",
        ),
    ),
    (
        "DoRender__16TransitionPlayer",
        Ok(
            "TransitionPlayer::DoRender(void)",
        ),
    ),
    (
        "CreateInstance__15TutorialManager",
        Ok(
            "TutorialManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__15TutorialManager",
        Ok(
            "TutorialManager::GetInstance(void)",
        ),
    ),
    (
        "AddToQueue__15TutorialManager12TutorialMode",
        Ok(
            "TutorialManager::AddToQueue(TutorialMode)",
        ),
    ),
    (
        "DestroyInstance__15TutorialManager",
        Ok(
            "TutorialManager::DestroyInstance(void)",
        ),
    ),
    (
        "__15TutorialManager",
        Ok(
            "TutorialManager::TutorialManager(void)",
        ),
    ),
    (
        "_$_15TutorialManager",
        Ok(
            "TutorialManager::~TutorialManager(void)",
        ),
    ),
    (
        "HandleEvent__15TutorialManager9EventEnumPv",
        Ok(
            "TutorialManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Initialize__15TutorialManager",
        Ok(
            "TutorialManager::Initialize(void)",
        ),
    ),
    (
        "MarkDialogFinished__15TutorialManager",
        Ok(
            "TutorialManager::MarkDialogFinished(void)",
        ),
    ),
    (
        "ProcessQueue__15TutorialManager",
        Ok(
            "TutorialManager::ProcessQueue(void)",
        ),
    ),
    (
        "Update__15TutorialManagerf",
        Ok(
            "TutorialManager::Update(float)",
        ),
    ),
    (
        "LoadData__15TutorialManagerPCUcUi",
        Ok(
            "TutorialManager::LoadData(unsigned char const *, unsigned int)",
        ),
    ),
    (
        "SaveData__15TutorialManagerPUcUi",
        Ok(
            "TutorialManager::SaveData(unsigned char *, unsigned int)",
        ),
    ),
    (
        "ResetData__15TutorialManager",
        Ok(
            "TutorialManager::ResetData(void)",
        ),
    ),
    (
        "QueryTutorialSeen__15TutorialManager12TutorialMode",
        Ok(
            "TutorialManager::QueryTutorialSeen(TutorialMode)",
        ),
    ),
    (
        "SetTutorialSeen__15TutorialManager12TutorialModeb",
        Ok(
            "TutorialManager::SetTutorialSeen(TutorialMode, bool)",
        ),
    ),
    (
        "Initialize__t9AllocPool1Z8FMVEvent",
        Ok(
            "AllocPool<FMVEvent>::Initialize(void)",
        ),
    ),
    (
        "__t9AllocPool1Z8FMVEvent19GameMemoryAllocatorUi",
        Ok(
            "AllocPool<FMVEvent>::AllocPool(GameMemoryAllocator, unsigned int)",
        ),
    ),
    (
        "Initialize__t9AllocPool1Z8NISEvent",
        Ok(
            "AllocPool<NISEvent>::Initialize(void)",
        ),
    ),
    (
        "__t9AllocPool1Z8NISEvent19GameMemoryAllocatorUi",
        Ok(
            "AllocPool<NISEvent>::AllocPool(GameMemoryAllocator, unsigned int)",
        ),
    ),
    (
        "__15TransitionEvent",
        Ok(
            "TransitionEvent::TransitionEvent(void)",
        ),
    ),
    (
        "Initialize__t9AllocPool1Z15TransitionEvent",
        Ok(
            "AllocPool<TransitionEvent>::Initialize(void)",
        ),
    ),
    (
        "__t9AllocPool1Z15TransitionEvent19GameMemoryAllocatorUi",
        Ok(
            "AllocPool<TransitionEvent>::AllocPool(GameMemoryAllocator, unsigned int)",
        ),
    ),
    (
        "Finalize__t9AllocPool1Z8FMVEvent",
        Ok(
            "AllocPool<FMVEvent>::Finalize(void)",
        ),
    ),
    (
        "_$_t9AllocPool1Z8FMVEvent",
        Ok(
            "AllocPool<FMVEvent>::~AllocPool(void)",
        ),
    ),
    (
        "Finalize__t9AllocPool1Z8NISEvent",
        Ok(
            "AllocPool<NISEvent>::Finalize(void)",
        ),
    ),
    (
        "_$_t9AllocPool1Z8NISEvent",
        Ok(
            "AllocPool<NISEvent>::~AllocPool(void)",
        ),
    ),
    (
        "Finalize__t9AllocPool1Z15TransitionEvent",
        Ok(
            "AllocPool<TransitionEvent>::Finalize(void)",
        ),
    ),
    (
        "_$_t9AllocPool1Z15TransitionEvent",
        Ok(
            "AllocPool<TransitionEvent>::~AllocPool(void)",
        ),
    ),
    (
        "AllocateFromPool__t9AllocPool1Z8FMVEvent",
        Ok(
            "AllocPool<FMVEvent>::AllocateFromPool(void)",
        ),
    ),
    (
        "ReturnToPool__t9AllocPool1Z8FMVEventUi",
        Ok(
            "AllocPool<FMVEvent>::ReturnToPool(unsigned int)",
        ),
    ),
    (
        "ReturnToPool__t9AllocPool1Z8NISEventUi",
        Ok(
            "AllocPool<NISEvent>::ReturnToPool(unsigned int)",
        ),
    ),
    (
        "ReturnToPool__t9AllocPool1Z15TransitionEventUi",
        Ok(
            "AllocPool<TransitionEvent>::ReturnToPool(unsigned int)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZPC5tNameZP5tName_X01X01X11G12__false_type_X11",
        Ok(
            "tName * __uninitialized_copy_aux<tName const *, tName *>(tName const *, tName const *, tName *, __false_type)",
        ),
    ),
    (
        "_M_range_insert__H1ZPC5tName_t6vector2Z5tNameZt7s2alloc1Z5tNameP5tNameX00X00G20forward_iterator_tag_v",
        Ok(
            "void vector<tName, s2alloc<tName> >::_M_range_insert<tName const *>(tName *, tName const *, tName const *, forward_iterator_tag)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2Z12TutorialModeZt7s2alloc1Z12TutorialModeP12TutorialModeRC12TutorialMode",
        Ok(
            "vector<TutorialMode, s2alloc<TutorialMode> >::_M_insert_aux(TutorialMode *, TutorialMode const &)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZP12TutorialModeZP12TutorialMode_X01X01X11G12__false_type_X11",
        Ok(
            "TutorialMode * __uninitialized_copy_aux<TutorialMode *, TutorialMode *>(TutorialMode *, TutorialMode *, TutorialMode *, __false_type)",
        ),
    ),
    (
        "__tf15AnimationPlayer",
        Ok(
            "AnimationPlayer type_info function",
        ),
    ),
    (
        "__tf7Blinker",
        Ok(
            "Blinker type_info function",
        ),
    ),
    (
        "__tf21SimpleAnimationPlayer",
        Ok(
            "SimpleAnimationPlayer type_info function",
        ),
    ),
    (
        "__tf12CameraPlayer",
        Ok(
            "CameraPlayer type_info function",
        ),
    ),
    (
        "__tf12MouthFlapper",
        Ok(
            "MouthFlapper type_info function",
        ),
    ),
    (
        "__tf9NISPlayer",
        Ok(
            "NISPlayer type_info function",
        ),
    ),
    (
        "__tf14PlayerDrawable",
        Ok(
            "PlayerDrawable type_info function",
        ),
    ),
    (
        "__tf16TransitionPlayer",
        Ok(
            "TransitionPlayer type_info function",
        ),
    ),
    (
        "_$_19PresentationOverlay",
        Ok(
            "PresentationOverlay::~PresentationOverlay(void)",
        ),
    ),
    (
        "__tf19PresentationOverlay",
        Ok(
            "PresentationOverlay type_info function",
        ),
    ),
    (
        "__tf19PresentationManager",
        Ok(
            "PresentationManager type_info function",
        ),
    ),
    (
        "__tf20PresentationAnimator",
        Ok(
            "PresentationAnimator type_info function",
        ),
    ),
    (
        "__tf15TutorialManager",
        Ok(
            "TutorialManager type_info function",
        ),
    ),
    (
        "__tft9AllocPool1Z8FMVEvent",
        Ok(
            "AllocPool<FMVEvent> type_info function",
        ),
    ),
    (
        "__tft9AllocPool1Z8NISEvent",
        Ok(
            "AllocPool<NISEvent> type_info function",
        ),
    ),
    (
        "__tft9AllocPool1Z15TransitionEvent",
        Ok(
            "AllocPool<TransitionEvent> type_info function",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z10tAnimation",
        Ok(
            "radLoadInventory::SafeCast<tAnimation>::SafeCast(void)",
        ),
    ),
    (
        "_$_26MouthFlapperDefaultSetting",
        Ok(
            "MouthFlapperDefaultSetting::~MouthFlapperDefaultSetting(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ210Scenegraph10Scenegraph",
        Ok(
            "radLoadInventory::SafeCast<Scenegraph::Scenegraph>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z18tCompositeDrawable",
        Ok(
            "radLoadInventory::SafeCast<tCompositeDrawable>::SafeCast(void)",
        ),
    ),
    (
        "DoLoaded__16TransitionPlayer",
        Ok(
            "TransitionPlayer::DoLoaded(void)",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3Z12TutorialModeZt7s2alloc1Z12TutorialModeb0",
        Ok(
            "_Vector_alloc_base<TutorialMode, s2alloc<TutorialMode>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z10tAnimation",
        Ok(
            "radLoadInventory::SafeCast<tAnimation> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ210Scenegraph10Scenegraph",
        Ok(
            "radLoadInventory::SafeCast<Scenegraph::Scenegraph> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z18tCompositeDrawable",
        Ok(
            "radLoadInventory::SafeCast<tCompositeDrawable> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z18tCompositeDrawableP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tCompositeDrawable>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ210Scenegraph10ScenegraphP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<Scenegraph::Scenegraph>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z10tAnimationP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tAnimation>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$__15AnimationPlayer",
        Ok(
            "global constructors keyed to AnimationPlayer::AnimationPlayer(void)",
        ),
    ),
    (
        "_GLOBAL_$D$__15AnimationPlayer",
        Ok(
            "global destructors keyed to AnimationPlayer::AnimationPlayer(void)",
        ),
    ),
    (
        "__14RespawnManager",
        Ok(
            "RespawnManager::RespawnManager(void)",
        ),
    ),
    (
        "_$_14RespawnManager",
        Ok(
            "RespawnManager::~RespawnManager(void)",
        ),
    ),
    (
        "SetNitroRespawnTime__14RespawnManageri",
        Ok(
            "RespawnManager::SetNitroRespawnTime(int)",
        ),
    ),
    (
        "SetWrenchRespawnTime__14RespawnManageri",
        Ok(
            "RespawnManager::SetWrenchRespawnTime(int)",
        ),
    ),
    (
        "SetWaspRespawnTime__14RespawnManageri",
        Ok(
            "RespawnManager::SetWaspRespawnTime(int)",
        ),
    ),
    (
        "GetWrenchRespawnTime__14RespawnManager",
        Ok(
            "RespawnManager::GetWrenchRespawnTime(void)",
        ),
    ),
    (
        "GetNitroRespawnTime__14RespawnManager",
        Ok(
            "RespawnManager::GetNitroRespawnTime(void)",
        ),
    ),
    (
        "GetWaspRespawnTime__14RespawnManager",
        Ok(
            "RespawnManager::GetWaspRespawnTime(void)",
        ),
    ),
    (
        "GetRespawnTime__14RespawnManagerQ213RespawnEntity14eRespawnEntity",
        Ok(
            "RespawnManager::GetRespawnTime(RespawnEntity::eRespawnEntity)",
        ),
    ),
    (
        "__13RespawnEntityQ213RespawnEntity14eRespawnEntity",
        Ok(
            "RespawnEntity::RespawnEntity(RespawnEntity::eRespawnEntity)",
        ),
    ),
    (
        "_$_13RespawnEntity",
        Ok(
            "RespawnEntity::~RespawnEntity(void)",
        ),
    ),
    (
        "Update__13RespawnEntityUi",
        Ok(
            "RespawnEntity::Update(unsigned int)",
        ),
    ),
    (
        "EntityCollected__13RespawnEntity",
        Ok(
            "RespawnEntity::EntityCollected(void)",
        ),
    ),
    (
        "ShouldEntityRespawn__13RespawnEntity",
        Ok(
            "RespawnEntity::ShouldEntityRespawn(void)",
        ),
    ),
    (
        "__tf13RespawnEntity",
        Ok(
            "RespawnEntity type_info function",
        ),
    ),
    (
        "__9FMVPlayer",
        Ok(
            "FMVPlayer::FMVPlayer(void)",
        ),
    ),
    (
        "_$_9FMVPlayer",
        Ok(
            "FMVPlayer::~FMVPlayer(void)",
        ),
    ),
    (
        "LoadData__9FMVPlayerPCcbPv",
        Ok(
            "FMVPlayer::LoadData(char const *, bool, void *)",
        ),
    ),
    (
        "Play__9FMVPlayer",
        Ok(
            "FMVPlayer::Play(void)",
        ),
    ),
    (
        "Abort__9FMVPlayer",
        Ok(
            "FMVPlayer::Abort(void)",
        ),
    ),
    (
        "Stop__9FMVPlayer",
        Ok(
            "FMVPlayer::Stop(void)",
        ),
    ),
    (
        "Pause__9FMVPlayer",
        Ok(
            "FMVPlayer::Pause(void)",
        ),
    ),
    (
        "UnPause__9FMVPlayer",
        Ok(
            "FMVPlayer::UnPause(void)",
        ),
    ),
    (
        "Initialize__9FMVPlayeri",
        Ok(
            "FMVPlayer::Initialize(int)",
        ),
    ),
    (
        "DoRender__9FMVPlayer",
        Ok(
            "FMVPlayer::DoRender(void)",
        ),
    ),
    (
        "IterateLoop__9FMVPlayerP16IRadMoviePlayer2",
        Ok(
            "FMVPlayer::IterateLoop(IRadMoviePlayer2 *)",
        ),
    ),
    (
        "ClearData__9FMVPlayer",
        Ok(
            "FMVPlayer::ClearData(void)",
        ),
    ),
    (
        "OnDriveOperationsComplete__9FMVPlayerPv",
        Ok(
            "FMVPlayer::OnDriveOperationsComplete(void *)",
        ),
    ),
    (
        "FadeScreen__9FMVPlayerf",
        Ok(
            "FMVPlayer::FadeScreen(float)",
        ),
    ),
    (
        "__19FMVUserInputHandler",
        Ok(
            "FMVUserInputHandler::FMVUserInputHandler(void)",
        ),
    ),
    (
        "_$_19FMVUserInputHandler",
        Ok(
            "FMVUserInputHandler::~FMVUserInputHandler(void)",
        ),
    ),
    (
        "OnButton__19FMVUserInputHandleriiPC6Button",
        Ok(
            "FMVUserInputHandler::OnButton(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonUp__19FMVUserInputHandleriiPC6Button",
        Ok(
            "FMVUserInputHandler::OnButtonUp(int, int, Button const *)",
        ),
    ),
    (
        "OnControllerDisconnect__19FMVUserInputHandleri",
        Ok(
            "FMVUserInputHandler::OnControllerDisconnect(int)",
        ),
    ),
    (
        "OnControllerConnect__19FMVUserInputHandleri",
        Ok(
            "FMVUserInputHandler::OnControllerConnect(int)",
        ),
    ),
    (
        "OnButtonDown__19FMVUserInputHandleriiPC6Button",
        Ok(
            "FMVUserInputHandler::OnButtonDown(int, int, Button const *)",
        ),
    ),
    (
        "LoadControllerMappings__19FMVUserInputHandlerUi",
        Ok(
            "FMVUserInputHandler::LoadControllerMappings(unsigned int)",
        ),
    ),
    (
        "__tf13radBaseObject",
        Ok(
            "radBaseObject type_info function",
        ),
    ),
    (
        "__tf9radObject",
        Ok(
            "radObject type_info function",
        ),
    ),
    (
        "__tf11radRefCount",
        Ok(
            "radRefCount type_info function",
        ),
    ),
    (
        "__tf9FMVPlayer",
        Ok(
            "FMVPlayer type_info function",
        ),
    ),
    (
        "__tf19FMVUserInputHandler",
        Ok(
            "FMVUserInputHandler type_info function",
        ),
    ),
    (
        "_$_13radBaseObject",
        Ok(
            "radBaseObject::~radBaseObject(void)",
        ),
    ),
    (
        "_$_9radObject",
        Ok(
            "radObject::~radObject(void)",
        ),
    ),
    (
        "_$_11radRefCount",
        Ok(
            "radRefCount::~radRefCount(void)",
        ),
    ),
    (
        "__19IRadMovieRenderLoop",
        Ok(
            "IRadMovieRenderLoop::IRadMovieRenderLoop(void)",
        ),
    ),
    (
        "AddRef__9FMVPlayer",
        Ok(
            "FMVPlayer::AddRef(void)",
        ),
    ),
    (
        "Release__9FMVPlayer",
        Ok(
            "FMVPlayer::Release(void)",
        ),
    ),
    (
        "PreLoad__9FMVPlayer",
        Ok(
            "FMVPlayer::PreLoad(void)",
        ),
    ),
    (
        "Update__9FMVPlayerUi",
        Ok(
            "FMVPlayer::Update(unsigned int)",
        ),
    ),
    (
        "DoLoaded__9FMVPlayer",
        Ok(
            "FMVPlayer::DoLoaded(void)",
        ),
    ),
    (
        "__tf19IRadMovieRenderLoop",
        Ok(
            "IRadMovieRenderLoop type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__9FMVPlayer",
        Ok(
            "global constructors keyed to FMVPlayer::FMVPlayer(void)",
        ),
    ),
    (
        "__10CGuiEntityP10CGuiEntity",
        Ok(
            "CGuiEntity::CGuiEntity(CGuiEntity *)",
        ),
    ),
    (
        "_$_10CGuiEntity",
        Ok(
            "CGuiEntity::~CGuiEntity(void)",
        ),
    ),
    (
        "__11CGuiManagerPQ27Scrooby7ProjectP10CGuiEntity",
        Ok(
            "CGuiManager::CGuiManager(Scrooby::Project *, CGuiEntity *)",
        ),
    ),
    (
        "_$_11CGuiManager",
        Ok(
            "CGuiManager::~CGuiManager(void)",
        ),
    ),
    (
        "HandleMessage__11CGuiManager11eGuiMessageUiUi",
        Ok(
            "CGuiManager::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnGotoScreenComplete__11CGuiManager",
        Ok(
            "CGuiManager::OnGotoScreenComplete(void)",
        ),
    ),
    (
        "FindWindowByID__11CGuiManagerQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiManager::FindWindowByID(CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "GetCurrentWindow__11CGuiManager",
        Ok(
            "CGuiManager::GetCurrentWindow(void)",
        ),
    ),
    (
        "DisplayMessage__11CGuiManageriP10CGuiEntity",
        Ok(
            "CGuiManager::DisplayMessage(int, CGuiEntity *)",
        ),
    ),
    (
        "DisplayPrompt__11CGuiManageriP10CGuiEntity18eGenericPromptTypeb",
        Ok(
            "CGuiManager::DisplayPrompt(int, CGuiEntity *, eGenericPromptType, bool)",
        ),
    ),
    (
        "DisplayErrorPrompt__11CGuiManageriP10CGuiEntityi",
        Ok(
            "CGuiManager::DisplayErrorPrompt(int, CGuiEntity *, int)",
        ),
    ),
    (
        "GetPreviousScreen__C11CGuiManageri",
        Ok(
            "CGuiManager::GetPreviousScreen(int) const",
        ),
    ),
    (
        "GetCurrentScreen__C11CGuiManager",
        Ok(
            "CGuiManager::GetCurrentScreen(void) const",
        ),
    ),
    (
        "AddWindow__11CGuiManagerQ210CGuiWindow12eGuiWindowIDP10CGuiWindow",
        Ok(
            "CGuiManager::AddWindow(CGuiWindow::eGuiWindowID, CGuiWindow *)",
        ),
    ),
    (
        "RemoveAllWindows__11CGuiManager",
        Ok(
            "CGuiManager::RemoveAllWindows(void)",
        ),
    ),
    (
        "PushScreenHistory__11CGuiManagerQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiManager::PushScreenHistory(CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "PopScreenHistory__11CGuiManager",
        Ok(
            "CGuiManager::PopScreenHistory(void)",
        ),
    ),
    (
        "__8CGuiMenuP10CGuiEntityi9eMenuTypei",
        Ok(
            "CGuiMenu::CGuiMenu(CGuiEntity *, int, eMenuType, int)",
        ),
    ),
    (
        "_$_8CGuiMenu",
        Ok(
            "CGuiMenu::~CGuiMenu(void)",
        ),
    ),
    (
        "HandleMessage__8CGuiMenu11eGuiMessageUiUi",
        Ok(
            "CGuiMenu::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "AddMenuItem__8CGuiMenuPQ27Scrooby15BoundedDrawableT1PQ27Scrooby7PolygonPQ27Scrooby6SpriteN24i",
        Ok(
            "CGuiMenu::AddMenuItem(Scrooby::BoundedDrawable *, Scrooby::BoundedDrawable *, Scrooby::Polygon *, Scrooby::Sprite *, Scrooby::Sprite *, Scrooby::Sprite *, int)",
        ),
    ),
    (
        "SetMenuItemEnabled__8CGuiMenuibT2",
        Ok(
            "CGuiMenu::SetMenuItemEnabled(int, bool, bool)",
        ),
    ),
    (
        "Reset__8CGuiMenui",
        Ok(
            "CGuiMenu::Reset(int)",
        ),
    ),
    (
        "SetHighlightColour__8CGuiMenubG10pddiColour",
        Ok(
            "CGuiMenu::SetHighlightColour(bool, pddiColour)",
        ),
    ),
    (
        "SetSelectionValue__8CGuiMenuii",
        Ok(
            "CGuiMenu::SetSelectionValue(int, int)",
        ),
    ),
    (
        "SetSelectionValueCount__8CGuiMenuii",
        Ok(
            "CGuiMenu::SetSelectionValueCount(int, int)",
        ),
    ),
    (
        "MakeSelection__8CGuiMenub",
        Ok(
            "CGuiMenu::MakeSelection(bool)",
        ),
    ),
    (
        "SelectItem__8CGuiMenui",
        Ok(
            "CGuiMenu::SelectItem(int)",
        ),
    ),
    (
        "UnselectItem__8CGuiMenui",
        Ok(
            "CGuiMenu::UnselectItem(int)",
        ),
    ),
    (
        "ChangeSelection__8CGuiMenuib",
        Ok(
            "CGuiMenu::ChangeSelection(int, bool)",
        ),
    ),
    (
        "IncrementSelectionValue__8CGuiMenub",
        Ok(
            "CGuiMenu::IncrementSelectionValue(bool)",
        ),
    ),
    (
        "DecrementSelectionValue__8CGuiMenub",
        Ok(
            "CGuiMenu::DecrementSelectionValue(bool)",
        ),
    ),
    (
        "UpdateCurrentSelection__8CGuiMenui",
        Ok(
            "CGuiMenu::UpdateCurrentSelection(int)",
        ),
    ),
    (
        "MoveCursor__8CGuiMenuii",
        Ok(
            "CGuiMenu::MoveCursor(int, int)",
        ),
    ),
    (
        "__10CGuiMenu2DP10CGuiEntityii9eMenuTypei",
        Ok(
            "CGuiMenu2D::CGuiMenu2D(CGuiEntity *, int, int, eMenuType, int)",
        ),
    ),
    (
        "_$_10CGuiMenu2D",
        Ok(
            "CGuiMenu2D::~CGuiMenu2D(void)",
        ),
    ),
    (
        "HandleMessage__10CGuiMenu2D11eGuiMessageUiUi",
        Ok(
            "CGuiMenu2D::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "__14CGuiMenuPromptP10CGuiEntityPQ27Scrooby4Pageii",
        Ok(
            "CGuiMenuPrompt::CGuiMenuPrompt(CGuiEntity *, Scrooby::Page *, int, int)",
        ),
    ),
    (
        "_$_14CGuiMenuPrompt",
        Ok(
            "CGuiMenuPrompt::~CGuiMenuPrompt(void)",
        ),
    ),
    (
        "SetNumResponses__14CGuiMenuPrompti",
        Ok(
            "CGuiMenuPrompt::SetNumResponses(int)",
        ),
    ),
    (
        "SetResponse__14CGuiMenuPromptiQ214CGuiMenuPrompt15ePromptResponse",
        Ok(
            "CGuiMenuPrompt::SetResponse(int, CGuiMenuPrompt::ePromptResponse)",
        ),
    ),
    (
        "GetResponse__C14CGuiMenuPrompti",
        Ok(
            "CGuiMenuPrompt::GetResponse(int) const",
        ),
    ),
    (
        "__11GuiMenuItem",
        Ok(
            "GuiMenuItem::GuiMenuItem(void)",
        ),
    ),
    (
        "_$_11GuiMenuItem",
        Ok(
            "GuiMenuItem::~GuiMenuItem(void)",
        ),
    ),
    (
        "__15GuiMenuItemText",
        Ok(
            "GuiMenuItemText::GuiMenuItemText(void)",
        ),
    ),
    (
        "SetItem__15GuiMenuItemTextPQ27Scrooby15BoundedDrawable",
        Ok(
            "GuiMenuItemText::SetItem(Scrooby::BoundedDrawable *)",
        ),
    ),
    (
        "SetItemValue__15GuiMenuItemTextPQ27Scrooby15BoundedDrawable",
        Ok(
            "GuiMenuItemText::SetItemValue(Scrooby::BoundedDrawable *)",
        ),
    ),
    (
        "SetItemValueIndex__15GuiMenuItemTexti",
        Ok(
            "GuiMenuItemText::SetItemValueIndex(int)",
        ),
    ),
    (
        "GetItemValueIndex__C15GuiMenuItemText",
        Ok(
            "GuiMenuItemText::GetItemValueIndex(void) const",
        ),
    ),
    (
        "SetDisplayOutline__15GuiMenuItemTextb",
        Ok(
            "GuiMenuItemText::SetDisplayOutline(bool)",
        ),
    ),
    (
        "SetOutlineColour__15GuiMenuItemTextG10pddiColour",
        Ok(
            "GuiMenuItemText::SetOutlineColour(pddiColour)",
        ),
    ),
    (
        "GetOutlineColour__C15GuiMenuItemText",
        Ok(
            "GuiMenuItemText::GetOutlineColour(void) const",
        ),
    ),
    (
        "__17GuiMenuItemSprite",
        Ok(
            "GuiMenuItemSprite::GuiMenuItemSprite(void)",
        ),
    ),
    (
        "SetItem__17GuiMenuItemSpritePQ27Scrooby15BoundedDrawable",
        Ok(
            "GuiMenuItemSprite::SetItem(Scrooby::BoundedDrawable *)",
        ),
    ),
    (
        "SetItemValue__17GuiMenuItemSpritePQ27Scrooby15BoundedDrawable",
        Ok(
            "GuiMenuItemSprite::SetItemValue(Scrooby::BoundedDrawable *)",
        ),
    ),
    (
        "SetItemValueIndex__17GuiMenuItemSpritei",
        Ok(
            "GuiMenuItemSprite::SetItemValueIndex(int)",
        ),
    ),
    (
        "GetItemValueIndex__C17GuiMenuItemSprite",
        Ok(
            "GuiMenuItemSprite::GetItemValueIndex(void) const",
        ),
    ),
    (
        "SetDisplayOutline__17GuiMenuItemSpriteb",
        Ok(
            "GuiMenuItemSprite::SetDisplayOutline(bool)",
        ),
    ),
    (
        "SetOutlineColour__17GuiMenuItemSpriteG10pddiColour",
        Ok(
            "GuiMenuItemSprite::SetOutlineColour(pddiColour)",
        ),
    ),
    (
        "GetOutlineColour__C17GuiMenuItemSprite",
        Ok(
            "GuiMenuItemSprite::GetOutlineColour(void) const",
        ),
    ),
    (
        "__10CGuiScreenPQ27Scrooby6ScreenP10CGuiEntityQ210CGuiWindow12eGuiWindowIDUi",
        Ok(
            "CGuiScreen::CGuiScreen(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID, unsigned int)",
        ),
    ),
    (
        "_$_10CGuiScreen",
        Ok(
            "CGuiScreen::~CGuiScreen(void)",
        ),
    ),
    (
        "HandleMessage__10CGuiScreen11eGuiMessageUiUi",
        Ok(
            "CGuiScreen::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "SetFadingEnabled__10CGuiScreenb",
        Ok(
            "CGuiScreen::SetFadingEnabled(bool)",
        ),
    ),
    (
        "SetZoomingEnabled__10CGuiScreenb",
        Ok(
            "CGuiScreen::SetZoomingEnabled(bool)",
        ),
    ),
    (
        "SetSlidingEnabled__10CGuiScreen13eScreenEffectb",
        Ok(
            "CGuiScreen::SetSlidingEnabled(eScreenEffect, bool)",
        ),
    ),
    (
        "SetIrisWipeEnabled__10CGuiScreenbT1",
        Ok(
            "CGuiScreen::SetIrisWipeEnabled(bool, bool)",
        ),
    ),
    (
        "Reset3dFEMultiController__10CGuiScreen",
        Ok(
            "CGuiScreen::Reset3dFEMultiController(void)",
        ),
    ),
    (
        "SetButtonVisible__10CGuiScreen11eButtonIconb",
        Ok(
            "CGuiScreen::SetButtonVisible(eButtonIcon, bool)",
        ),
    ),
    (
        "IsButtonVisible__C10CGuiScreen11eButtonIcon",
        Ok(
            "CGuiScreen::IsButtonVisible(eButtonIcon) const",
        ),
    ),
    (
        "StartTransitionAnimation__10CGuiScreeniib",
        Ok(
            "CGuiScreen::StartTransitionAnimation(int, int, bool)",
        ),
    ),
    (
        "ReloadScreen__10CGuiScreen",
        Ok(
            "CGuiScreen::ReloadScreen(void)",
        ),
    ),
    (
        "RestoreScreenCover__10CGuiScreen",
        Ok(
            "CGuiScreen::RestoreScreenCover(void)",
        ),
    ),
    (
        "RestoreButtons__10CGuiScreen",
        Ok(
            "CGuiScreen::RestoreButtons(void)",
        ),
    ),
    (
        "IsWideScreenDisplay__10CGuiScreen",
        Ok(
            "CGuiScreen::IsWideScreenDisplay(void)",
        ),
    ),
    (
        "ApplyWideScreenCorrectionScale__10CGuiScreenPQ27Scrooby8Drawable",
        Ok(
            "CGuiScreen::ApplyWideScreenCorrectionScale(Scrooby::Drawable *)",
        ),
    ),
    (
        "RestoreDefaultFadeTime__10CGuiScreen",
        Ok(
            "CGuiScreen::RestoreDefaultFadeTime(void)",
        ),
    ),
    (
        "IrisWipeOpen__10CGuiScreen",
        Ok(
            "CGuiScreen::IrisWipeOpen(void)",
        ),
    ),
    (
        "SetAlphaForLayers__10CGuiScreenfPPQ27Scrooby5Layeri",
        Ok(
            "CGuiScreen::SetAlphaForLayers(float, Scrooby::Layer **, int)",
        ),
    ),
    (
        "AutoScaleFrame__10CGuiScreenPQ27Scrooby4Page",
        Ok(
            "CGuiScreen::AutoScaleFrame(Scrooby::Page *)",
        ),
    ),
    (
        "FadeIn__10CGuiScreenf",
        Ok(
            "CGuiScreen::FadeIn(float)",
        ),
    ),
    (
        "FadeOut__10CGuiScreenf",
        Ok(
            "CGuiScreen::FadeOut(float)",
        ),
    ),
    (
        "ZoomIn__10CGuiScreenf",
        Ok(
            "CGuiScreen::ZoomIn(float)",
        ),
    ),
    (
        "ZoomOut__10CGuiScreenf",
        Ok(
            "CGuiScreen::ZoomOut(float)",
        ),
    ),
    (
        "SlideIn__10CGuiScreenf",
        Ok(
            "CGuiScreen::SlideIn(float)",
        ),
    ),
    (
        "SlideOut__10CGuiScreenf",
        Ok(
            "CGuiScreen::SlideOut(float)",
        ),
    ),
    (
        "OnIrisWipeClosed__10CGuiScreen",
        Ok(
            "CGuiScreen::OnIrisWipeClosed(void)",
        ),
    ),
    (
        "__22CGuiScreenMemCardCheckPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMemCardCheck::CGuiScreenMemCardCheck(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_22CGuiScreenMemCardCheck",
        Ok(
            "CGuiScreenMemCardCheck::~CGuiScreenMemCardCheck(void)",
        ),
    ),
    (
        "HandleMessage__22CGuiScreenMemCardCheck11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMemCardCheck::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnFormatOperationComplete__22CGuiScreenMemCardCheck12radFileError",
        Ok(
            "CGuiScreenMemCardCheck::OnFormatOperationComplete(radFileError)",
        ),
    ),
    (
        "OnMemoryCardCheckDone__22CGuiScreenMemCardCheck12radFileErrorQ39IRadDrive9MediaInfo10MediaStateiii",
        Ok(
            "CGuiScreenMemCardCheck::OnMemoryCardCheckDone(radFileError, IRadDrive::MediaInfo::MediaState, int, int, int)",
        ),
    ),
    (
        "InitIntro__22CGuiScreenMemCardCheck",
        Ok(
            "CGuiScreenMemCardCheck::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__22CGuiScreenMemCardCheck",
        Ok(
            "CGuiScreenMemCardCheck::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__22CGuiScreenMemCardCheck",
        Ok(
            "CGuiScreenMemCardCheck::InitOutro(void)",
        ),
    ),
    (
        "OnContinue__22CGuiScreenMemCardCheck",
        Ok(
            "CGuiScreenMemCardCheck::OnContinue(void)",
        ),
    ),
    (
        "__18CGuiScreenLoadSavePQ27Scrooby6Screen",
        Ok(
            "CGuiScreenLoadSave::CGuiScreenLoadSave(Scrooby::Screen *)",
        ),
    ),
    (
        "_$_18CGuiScreenLoadSave",
        Ok(
            "CGuiScreenLoadSave::~CGuiScreenLoadSave(void)",
        ),
    ),
    (
        "HandleMessage__18CGuiScreenLoadSave11eGuiMessageUiUi",
        Ok(
            "CGuiScreenLoadSave::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "FormatCurrentDrive__18CGuiScreenLoadSave",
        Ok(
            "CGuiScreenLoadSave::FormatCurrentDrive(void)",
        ),
    ),
    (
        "OnFormatOperationComplete__18CGuiScreenLoadSave12radFileError",
        Ok(
            "CGuiScreenLoadSave::OnFormatOperationComplete(radFileError)",
        ),
    ),
    (
        "UpdateCurrentMemoryDevice__18CGuiScreenLoadSave",
        Ok(
            "CGuiScreenLoadSave::UpdateCurrentMemoryDevice(void)",
        ),
    ),
    (
        "HandleErrorResponse__18CGuiScreenLoadSaveQ214CGuiMenuPrompt15ePromptResponse",
        Ok(
            "CGuiScreenLoadSave::HandleErrorResponse(CGuiMenuPrompt::ePromptResponse)",
        ),
    ),
    (
        "__20CGuiScreenMemoryCardPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMemoryCard::CGuiScreenMemoryCard(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_20CGuiScreenMemoryCard",
        Ok(
            "CGuiScreenMemoryCard::~CGuiScreenMemoryCard(void)",
        ),
    ),
    (
        "HandleMessage__20CGuiScreenMemoryCard11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMemoryCard::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__20CGuiScreenMemoryCard",
        Ok(
            "CGuiScreenMemoryCard::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__20CGuiScreenMemoryCard",
        Ok(
            "CGuiScreenMemoryCard::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__20CGuiScreenMemoryCard",
        Ok(
            "CGuiScreenMemoryCard::InitOutro(void)",
        ),
    ),
    (
        "UpdateDeviceList__20CGuiScreenMemoryCardb",
        Ok(
            "CGuiScreenMemoryCard::UpdateDeviceList(bool)",
        ),
    ),
    (
        "UpdateFreeSpace__20CGuiScreenMemoryCardUi",
        Ok(
            "CGuiScreenMemoryCard::UpdateFreeSpace(unsigned int)",
        ),
    ),
    (
        "__17CGuiScreenMessagePQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMessage::CGuiScreenMessage(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_17CGuiScreenMessage",
        Ok(
            "CGuiScreenMessage::~CGuiScreenMessage(void)",
        ),
    ),
    (
        "HandleMessage__17CGuiScreenMessage11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMessage::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "Display__17CGuiScreenMessageiP10CGuiEntity",
        Ok(
            "CGuiScreenMessage::Display(int, CGuiEntity *)",
        ),
    ),
    (
        "GetControllerDisconnectedMessage__17CGuiScreenMessageiPci",
        Ok(
            "CGuiScreenMessage::GetControllerDisconnectedMessage(int, char *, int)",
        ),
    ),
    (
        "ConvertUnicodeToChar__17CGuiScreenMessagePcPUsi",
        Ok(
            "CGuiScreenMessage::ConvertUnicodeToChar(char *, unsigned short *, int)",
        ),
    ),
    (
        "FormatMessage__17CGuiScreenMessagePQ27Scrooby4TextPUsi",
        Ok(
            "CGuiScreenMessage::FormatMessage(Scrooby::Text *, unsigned short *, int)",
        ),
    ),
    (
        "InitIntro__17CGuiScreenMessage",
        Ok(
            "CGuiScreenMessage::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__17CGuiScreenMessage",
        Ok(
            "CGuiScreenMessage::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__17CGuiScreenMessage",
        Ok(
            "CGuiScreenMessage::InitOutro(void)",
        ),
    ),
    (
        "__16CGuiScreenPromptPQ27Scrooby6ScreenP10CGuiEntityQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiScreenPrompt::CGuiScreenPrompt(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "_$_16CGuiScreenPrompt",
        Ok(
            "CGuiScreenPrompt::~CGuiScreenPrompt(void)",
        ),
    ),
    (
        "HandleMessage__16CGuiScreenPrompt11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPrompt::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "Display__16CGuiScreenPromptiP10CGuiEntityiPQ214CGuiMenuPrompt15ePromptResponse",
        Ok(
            "CGuiScreenPrompt::Display(int, CGuiEntity *, int, CGuiMenuPrompt::ePromptResponse *)",
        ),
    ),
    (
        "InitIntro__16CGuiScreenPrompt",
        Ok(
            "CGuiScreenPrompt::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__16CGuiScreenPrompt",
        Ok(
            "CGuiScreenPrompt::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__16CGuiScreenPrompt",
        Ok(
            "CGuiScreenPrompt::InitOutro(void)",
        ),
    ),
    (
        "CreateInstance__10CGuiSystem",
        Ok(
            "CGuiSystem::CreateInstance(void)",
        ),
    ),
    (
        "DestroyInstance__10CGuiSystem",
        Ok(
            "CGuiSystem::DestroyInstance(void)",
        ),
    ),
    (
        "GetInstance__10CGuiSystem",
        Ok(
            "CGuiSystem::GetInstance(void)",
        ),
    ),
    (
        "__10CGuiSystem",
        Ok(
            "CGuiSystem::CGuiSystem(void)",
        ),
    ),
    (
        "_$_10CGuiSystem",
        Ok(
            "CGuiSystem::~CGuiSystem(void)",
        ),
    ),
    (
        "Init__10CGuiSystem",
        Ok(
            "CGuiSystem::Init(void)",
        ),
    ),
    (
        "Update__10CGuiSystemUi",
        Ok(
            "CGuiSystem::Update(unsigned int)",
        ),
    ),
    (
        "HandleMessage__10CGuiSystem11eGuiMessageUiUi",
        Ok(
            "CGuiSystem::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnProjectLoadComplete__10CGuiSystemPQ27Scrooby7Project",
        Ok(
            "CGuiSystem::OnProjectLoadComplete(Scrooby::Project *)",
        ),
    ),
    (
        "GotoScreen__10CGuiSystemUiUiUiUi",
        Ok(
            "CGuiSystem::GotoScreen(unsigned int, unsigned int, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetCurrentManager__C10CGuiSystem",
        Ok(
            "CGuiSystem::GetCurrentManager(void) const",
        ),
    ),
    (
        "RegisterUserInputHandlers__10CGuiSystemi",
        Ok(
            "CGuiSystem::RegisterUserInputHandlers(int)",
        ),
    ),
    (
        "UnregisterUserInputHandlers__10CGuiSystemi",
        Ok(
            "CGuiSystem::UnregisterUserInputHandlers(int)",
        ),
    ),
    (
        "GetUserInputHandler__C10CGuiSystemi",
        Ok(
            "CGuiSystem::GetUserInputHandler(int) const",
        ),
    ),
    (
        "LoadData__10CGuiSystemPCUcUi",
        Ok(
            "CGuiSystem::LoadData(unsigned char const *, unsigned int)",
        ),
    ),
    (
        "SaveData__10CGuiSystemPUcUi",
        Ok(
            "CGuiSystem::SaveData(unsigned char *, unsigned int)",
        ),
    ),
    (
        "ResetData__10CGuiSystem",
        Ok(
            "CGuiSystem::ResetData(void)",
        ),
    ),
    (
        "OnInitBootUp__10CGuiSystem",
        Ok(
            "CGuiSystem::OnInitBootUp(void)",
        ),
    ),
    (
        "OnReleaseBootUp__10CGuiSystem",
        Ok(
            "CGuiSystem::OnReleaseBootUp(void)",
        ),
    ),
    (
        "OnInitFrontEnd__10CGuiSystem",
        Ok(
            "CGuiSystem::OnInitFrontEnd(void)",
        ),
    ),
    (
        "OnReleaseFrontEnd__10CGuiSystem",
        Ok(
            "CGuiSystem::OnReleaseFrontEnd(void)",
        ),
    ),
    (
        "OnInitMiniGame__10CGuiSystem",
        Ok(
            "CGuiSystem::OnInitMiniGame(void)",
        ),
    ),
    (
        "OnReleaseMiniGame__10CGuiSystem",
        Ok(
            "CGuiSystem::OnReleaseMiniGame(void)",
        ),
    ),
    (
        "OnInitInGame__10CGuiSystem",
        Ok(
            "CGuiSystem::OnInitInGame(void)",
        ),
    ),
    (
        "OnReleaseInGame__10CGuiSystem",
        Ok(
            "CGuiSystem::OnReleaseInGame(void)",
        ),
    ),
    (
        "GetPrimaryController__C10CGuiSystem",
        Ok(
            "CGuiSystem::GetPrimaryController(void) const",
        ),
    ),
    (
        "SetPrimaryController__10CGuiSystemi",
        Ok(
            "CGuiSystem::SetPrimaryController(int)",
        ),
    ),
    (
        "__13CGuiTextBible",
        Ok(
            "CGuiTextBible::CGuiTextBible(void)",
        ),
    ),
    (
        "_$_13CGuiTextBible",
        Ok(
            "CGuiTextBible::~CGuiTextBible(void)",
        ),
    ),
    (
        "SetTextBible__13CGuiTextBiblePCc",
        Ok(
            "CGuiTextBible::SetTextBible(char const *)",
        ),
    ),
    (
        "GetLocalizedText__13CGuiTextBiblePCc",
        Ok(
            "CGuiTextBible::GetLocalizedText(char const *)",
        ),
    ),
    (
        "SetCurrentLanguage__13CGuiTextBibleQ27Scrooby10XLLanguage",
        Ok(
            "CGuiTextBible::SetCurrentLanguage(Scrooby::XLLanguage)",
        ),
    ),
    (
        "__20CGuiUserInputHandler",
        Ok(
            "CGuiUserInputHandler::CGuiUserInputHandler(void)",
        ),
    ),
    (
        "_$_20CGuiUserInputHandler",
        Ok(
            "CGuiUserInputHandler::~CGuiUserInputHandler(void)",
        ),
    ),
    (
        "Left__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::Left(int)",
        ),
    ),
    (
        "Right__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::Right(int)",
        ),
    ),
    (
        "Up__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::Up(int)",
        ),
    ),
    (
        "Down__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::Down(int)",
        ),
    ),
    (
        "Start__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::Start(int)",
        ),
    ),
    (
        "Select__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::Select(int)",
        ),
    ),
    (
        "Back__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::Back(int)",
        ),
    ),
    (
        "AuxX__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::AuxX(int)",
        ),
    ),
    (
        "AuxY__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::AuxY(int)",
        ),
    ),
    (
        "L1__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::L1(int)",
        ),
    ),
    (
        "R1__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::R1(int)",
        ),
    ),
    (
        "OnControllerDisconnect__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::OnControllerDisconnect(int)",
        ),
    ),
    (
        "OnControllerConnect__20CGuiUserInputHandleri",
        Ok(
            "CGuiUserInputHandler::OnControllerConnect(int)",
        ),
    ),
    (
        "OnButton__20CGuiUserInputHandleriiPC6Button",
        Ok(
            "CGuiUserInputHandler::OnButton(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonUp__20CGuiUserInputHandleriiPC6Button",
        Ok(
            "CGuiUserInputHandler::OnButtonUp(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonDown__20CGuiUserInputHandleriiPC6Button",
        Ok(
            "CGuiUserInputHandler::OnButtonDown(int, int, Button const *)",
        ),
    ),
    (
        "LoadControllerMappings__20CGuiUserInputHandlerUi",
        Ok(
            "CGuiUserInputHandler::LoadControllerMappings(unsigned int)",
        ),
    ),
    (
        "Update__20CGuiUserInputHandlerUiUi",
        Ok(
            "CGuiUserInputHandler::Update(unsigned int, unsigned int)",
        ),
    ),
    (
        "IsXAxisOnLeft__C20CGuiUserInputHandler",
        Ok(
            "CGuiUserInputHandler::IsXAxisOnLeft(void) const",
        ),
    ),
    (
        "IsXAxisOnRight__C20CGuiUserInputHandler",
        Ok(
            "CGuiUserInputHandler::IsXAxisOnRight(void) const",
        ),
    ),
    (
        "IsYAxisOnUp__C20CGuiUserInputHandler",
        Ok(
            "CGuiUserInputHandler::IsYAxisOnUp(void) const",
        ),
    ),
    (
        "IsYAxisOnDown__C20CGuiUserInputHandler",
        Ok(
            "CGuiUserInputHandler::IsYAxisOnDown(void) const",
        ),
    ),
    (
        "ResetRepeatableButtons__20CGuiUserInputHandler",
        Ok(
            "CGuiUserInputHandler::ResetRepeatableButtons(void)",
        ),
    ),
    (
        "__10CGuiWindowQ210CGuiWindow12eGuiWindowIDP10CGuiEntity",
        Ok(
            "CGuiWindow::CGuiWindow(CGuiWindow::eGuiWindowID, CGuiEntity *)",
        ),
    ),
    (
        "_$_10CGuiWindow",
        Ok(
            "CGuiWindow::~CGuiWindow(void)",
        ),
    ),
    (
        "HandleMessage__10CGuiWindow11eGuiMessageUiUi",
        Ok(
            "CGuiWindow::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "CleanUp__10CGuiWindow",
        Ok(
            "CGuiWindow::CleanUp(void)",
        ),
    ),
    (
        "ForceClearTransitions__10CGuiWindow",
        Ok(
            "CGuiWindow::ForceClearTransitions(void)",
        ),
    ),
    (
        "__tf10CGuiEntity",
        Ok(
            "CGuiEntity type_info function",
        ),
    ),
    (
        "__tf14IRadMemoryHeap",
        Ok(
            "IRadMemoryHeap type_info function",
        ),
    ),
    (
        "__tfQ27Scrooby15BoundedDrawable",
        Ok(
            "Scrooby::BoundedDrawable type_info function",
        ),
    ),
    (
        "__tfQ27Scrooby4Text",
        Ok(
            "Scrooby::Text type_info function",
        ),
    ),
    (
        "__tfQ27Scrooby6Sprite",
        Ok(
            "Scrooby::Sprite type_info function",
        ),
    ),
    (
        "__tf11GuiMenuItem",
        Ok(
            "GuiMenuItem type_info function",
        ),
    ),
    (
        "_$_15GuiMenuItemText",
        Ok(
            "GuiMenuItemText::~GuiMenuItemText(void)",
        ),
    ),
    (
        "__tf15GuiMenuItemText",
        Ok(
            "GuiMenuItemText type_info function",
        ),
    ),
    (
        "_$_17GuiMenuItemSprite",
        Ok(
            "GuiMenuItemSprite::~GuiMenuItemSprite(void)",
        ),
    ),
    (
        "__tf17GuiMenuItemSprite",
        Ok(
            "GuiMenuItemSprite type_info function",
        ),
    ),
    (
        "__tf8CGuiMenu",
        Ok(
            "CGuiMenu type_info function",
        ),
    ),
    (
        "__tf10CGuiMenu2D",
        Ok(
            "CGuiMenu2D type_info function",
        ),
    ),
    (
        "__tf14CGuiMenuPrompt",
        Ok(
            "CGuiMenuPrompt type_info function",
        ),
    ),
    (
        "__tf10CGuiWindow",
        Ok(
            "CGuiWindow type_info function",
        ),
    ),
    (
        "__tfQ27Scrooby18GotoScreenCallback",
        Ok(
            "Scrooby::GotoScreenCallback type_info function",
        ),
    ),
    (
        "__tf11CGuiManager",
        Ok(
            "CGuiManager type_info function",
        ),
    ),
    (
        "__tf10CGuiSystem",
        Ok(
            "CGuiSystem type_info function",
        ),
    ),
    (
        "__tf10CGuiScreen",
        Ok(
            "CGuiScreen type_info function",
        ),
    ),
    (
        "__tf17CGuiScreenMessage",
        Ok(
            "CGuiScreenMessage type_info function",
        ),
    ),
    (
        "__tf16CGuiScreenPrompt",
        Ok(
            "CGuiScreenPrompt type_info function",
        ),
    ),
    (
        "__tf20CGuiUserInputHandler",
        Ok(
            "CGuiUserInputHandler type_info function",
        ),
    ),
    (
        "__tf22CGuiScreenMemCardCheck",
        Ok(
            "CGuiScreenMemCardCheck type_info function",
        ),
    ),
    (
        "__tf18CGuiScreenLoadSave",
        Ok(
            "CGuiScreenLoadSave type_info function",
        ),
    ),
    (
        "__tf20CGuiScreenMemoryCard",
        Ok(
            "CGuiScreenMemoryCard type_info function",
        ),
    ),
    (
        "__tf13CGuiTextBible",
        Ok(
            "CGuiTextBible type_info function",
        ),
    ),
    (
        "GetItem__C15GuiMenuItemText",
        Ok(
            "GuiMenuItemText::GetItem(void) const",
        ),
    ),
    (
        "GetItemValue__C15GuiMenuItemText",
        Ok(
            "GuiMenuItemText::GetItemValue(void) const",
        ),
    ),
    (
        "GetItem__C17GuiMenuItemSprite",
        Ok(
            "GuiMenuItemSprite::GetItem(void) const",
        ),
    ),
    (
        "GetItemValue__C17GuiMenuItemSprite",
        Ok(
            "GuiMenuItemSprite::GetItemValue(void) const",
        ),
    ),
    (
        "HasMenu__10CGuiWindow",
        Ok(
            "CGuiWindow::HasMenu(void)",
        ),
    ),
    (
        "HandleEvent__11CGuiManager9EventEnumPv",
        Ok(
            "CGuiManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "HasMenu__10CGuiScreen",
        Ok(
            "CGuiScreen::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__17CGuiScreenMessage",
        Ok(
            "CGuiScreenMessage::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__16CGuiScreenPrompt",
        Ok(
            "CGuiScreenPrompt::HasMenu(void)",
        ),
    ),
    (
        "__25IMemoryCardFormatCallback",
        Ok(
            "IMemoryCardFormatCallback::IMemoryCardFormatCallback(void)",
        ),
    ),
    (
        "__24IMemoryCardCheckCallback",
        Ok(
            "IMemoryCardCheckCallback::IMemoryCardCheckCallback(void)",
        ),
    ),
    (
        "HasMenu__20CGuiScreenMemoryCard",
        Ok(
            "CGuiScreenMemoryCard::HasMenu(void)",
        ),
    ),
    (
        "__tfQ27Scrooby14HasBoundingBox",
        Ok(
            "Scrooby::HasBoundingBox type_info function",
        ),
    ),
    (
        "__tf25IMemoryCardFormatCallback",
        Ok(
            "IMemoryCardFormatCallback type_info function",
        ),
    ),
    (
        "__tf24IMemoryCardCheckCallback",
        Ok(
            "IMemoryCardCheckCallback type_info function",
        ),
    ),
    (
        "__tfQ27Scrooby8Drawable",
        Ok(
            "Scrooby::Drawable type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__10CGuiEntityP10CGuiEntity",
        Ok(
            "global constructors keyed to CGuiEntity::CGuiEntity(CGuiEntity *)",
        ),
    ),
    (
        "__17CGuiManagerBootUpPQ27Scrooby7ProjectP10CGuiEntity",
        Ok(
            "CGuiManagerBootUp::CGuiManagerBootUp(Scrooby::Project *, CGuiEntity *)",
        ),
    ),
    (
        "_$_17CGuiManagerBootUp",
        Ok(
            "CGuiManagerBootUp::~CGuiManagerBootUp(void)",
        ),
    ),
    (
        "Populate__17CGuiManagerBootUp",
        Ok(
            "CGuiManagerBootUp::Populate(void)",
        ),
    ),
    (
        "Start__17CGuiManagerBootUpQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiManagerBootUp::Start(CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "HandleMessage__17CGuiManagerBootUp11eGuiMessageUiUi",
        Ok(
            "CGuiManagerBootUp::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "PopNextScreenInQueue__17CGuiManagerBootUp",
        Ok(
            "CGuiManagerBootUp::PopNextScreenInQueue(void)",
        ),
    ),
    (
        "CheckLanguage__17CGuiManagerBootUp",
        Ok(
            "CGuiManagerBootUp::CheckLanguage(void)",
        ),
    ),
    (
        "__19CGuiManagerLanguagePQ27Scrooby7ProjectP10CGuiEntity",
        Ok(
            "CGuiManagerLanguage::CGuiManagerLanguage(Scrooby::Project *, CGuiEntity *)",
        ),
    ),
    (
        "_$_19CGuiManagerLanguage",
        Ok(
            "CGuiManagerLanguage::~CGuiManagerLanguage(void)",
        ),
    ),
    (
        "Populate__19CGuiManagerLanguage",
        Ok(
            "CGuiManagerLanguage::Populate(void)",
        ),
    ),
    (
        "Start__19CGuiManagerLanguageQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiManagerLanguage::Start(CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "HandleMessage__19CGuiManagerLanguage11eGuiMessageUiUi",
        Ok(
            "CGuiManagerLanguage::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "__20CGuiScreenBootupLoadPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenBootupLoad::CGuiScreenBootupLoad(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_20CGuiScreenBootupLoad",
        Ok(
            "CGuiScreenBootupLoad::~CGuiScreenBootupLoad(void)",
        ),
    ),
    (
        "HandleMessage__20CGuiScreenBootupLoad11eGuiMessageUiUi",
        Ok(
            "CGuiScreenBootupLoad::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__20CGuiScreenBootupLoad",
        Ok(
            "CGuiScreenBootupLoad::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__20CGuiScreenBootupLoad",
        Ok(
            "CGuiScreenBootupLoad::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__20CGuiScreenBootupLoad",
        Ok(
            "CGuiScreenBootupLoad::InitOutro(void)",
        ),
    ),
    (
        "__17CGuiScreenLicensePQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenLicense::CGuiScreenLicense(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_17CGuiScreenLicense",
        Ok(
            "CGuiScreenLicense::~CGuiScreenLicense(void)",
        ),
    ),
    (
        "HandleMessage__17CGuiScreenLicense11eGuiMessageUiUi",
        Ok(
            "CGuiScreenLicense::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__17CGuiScreenLicense",
        Ok(
            "CGuiScreenLicense::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__17CGuiScreenLicense",
        Ok(
            "CGuiScreenLicense::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__17CGuiScreenLicense",
        Ok(
            "CGuiScreenLicense::InitOutro(void)",
        ),
    ),
    (
        "__18CGuiScreenLanguagePQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenLanguage::CGuiScreenLanguage(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_18CGuiScreenLanguage",
        Ok(
            "CGuiScreenLanguage::~CGuiScreenLanguage(void)",
        ),
    ),
    (
        "HandleMessage__18CGuiScreenLanguage11eGuiMessageUiUi",
        Ok(
            "CGuiScreenLanguage::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__18CGuiScreenLanguage",
        Ok(
            "CGuiScreenLanguage::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__18CGuiScreenLanguage",
        Ok(
            "CGuiScreenLanguage::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__18CGuiScreenLanguage",
        Ok(
            "CGuiScreenLanguage::InitOutro(void)",
        ),
    ),
    (
        "_M_create_nodes__t11_Deque_base3ZQ210CGuiWindow12eGuiWindowIDZt7s2alloc1ZQ210CGuiWindow12eGuiWindowIDUi0PPQ210CGuiWindow12eGuiWindowIDT1",
        Ok(
            "_Deque_base<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_create_nodes(CGuiWindow::eGuiWindowID **, CGuiWindow::eGuiWindowID **)",
        ),
    ),
    (
        "_M_initialize_map__t11_Deque_base3ZQ210CGuiWindow12eGuiWindowIDZt7s2alloc1ZQ210CGuiWindow12eGuiWindowIDUi0Ui",
        Ok(
            "_Deque_base<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_initialize_map(unsigned int)",
        ),
    ),
    (
        "_M_destroy_nodes__t11_Deque_base3ZQ210CGuiWindow12eGuiWindowIDZt7s2alloc1ZQ210CGuiWindow12eGuiWindowIDUi0PPQ210CGuiWindow12eGuiWindowIDT1",
        Ok(
            "_Deque_base<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_destroy_nodes(CGuiWindow::eGuiWindowID **, CGuiWindow::eGuiWindowID **)",
        ),
    ),
    (
        "_$_t11_Deque_base3ZQ210CGuiWindow12eGuiWindowIDZt7s2alloc1ZQ210CGuiWindow12eGuiWindowIDUi0",
        Ok(
            "_Deque_base<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::~_Deque_base(void)",
        ),
    ),
    (
        "_M_reallocate_map__t5deque3ZQ210CGuiWindow12eGuiWindowIDZt7s2alloc1ZQ210CGuiWindow12eGuiWindowIDUi0Uib",
        Ok(
            "deque<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_reallocate_map(unsigned int, bool)",
        ),
    ),
    (
        "_M_push_back_aux__t5deque3ZQ210CGuiWindow12eGuiWindowIDZt7s2alloc1ZQ210CGuiWindow12eGuiWindowIDUi0RCQ210CGuiWindow12eGuiWindowID",
        Ok(
            "deque<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_push_back_aux(CGuiWindow::eGuiWindowID const &)",
        ),
    ),
    (
        "_M_pop_front_aux__t5deque3ZQ210CGuiWindow12eGuiWindowIDZt7s2alloc1ZQ210CGuiWindow12eGuiWindowIDUi0",
        Ok(
            "deque<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0>::_M_pop_front_aux(void)",
        ),
    ),
    (
        "__tf17CGuiManagerBootUp",
        Ok(
            "CGuiManagerBootUp type_info function",
        ),
    ),
    (
        "__tf20CGuiScreenBootupLoad",
        Ok(
            "CGuiScreenBootupLoad type_info function",
        ),
    ),
    (
        "__tf17CGuiScreenLicense",
        Ok(
            "CGuiScreenLicense type_info function",
        ),
    ),
    (
        "__tf18CGuiScreenLanguage",
        Ok(
            "CGuiScreenLanguage type_info function",
        ),
    ),
    (
        "__tf19CGuiManagerLanguage",
        Ok(
            "CGuiManagerLanguage type_info function",
        ),
    ),
    (
        "_$_t17_Deque_alloc_base4ZQ210CGuiWindow12eGuiWindowIDZt7s2alloc1ZQ210CGuiWindow12eGuiWindowIDUi0b0",
        Ok(
            "_Deque_alloc_base<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0, false>::~_Deque_alloc_base(void)",
        ),
    ),
    (
        "_$_t5queue2ZQ210CGuiWindow12eGuiWindowIDZt5deque3ZQ210CGuiWindow12eGuiWindowIDZt7s2alloc1ZQ210CGuiWindow12eGuiWindowIDUi0",
        Ok(
            "queue<CGuiWindow::eGuiWindowID, deque<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID>, 0> >::~queue(void)",
        ),
    ),
    (
        "HasMenu__18CGuiScreenLanguage",
        Ok(
            "CGuiScreenLanguage::HasMenu(void)",
        ),
    ),
    (
        "__18CGuiManagerBackEndPQ27Scrooby7ProjectP10CGuiEntity",
        Ok(
            "CGuiManagerBackEnd::CGuiManagerBackEnd(Scrooby::Project *, CGuiEntity *)",
        ),
    ),
    (
        "_$_18CGuiManagerBackEnd",
        Ok(
            "CGuiManagerBackEnd::~CGuiManagerBackEnd(void)",
        ),
    ),
    (
        "Populate__18CGuiManagerBackEnd",
        Ok(
            "CGuiManagerBackEnd::Populate(void)",
        ),
    ),
    (
        "Start__18CGuiManagerBackEndQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiManagerBackEnd::Start(CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "HandleMessage__18CGuiManagerBackEnd11eGuiMessageUiUi",
        Ok(
            "CGuiManagerBackEnd::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "GotoLoadingScreen__18CGuiManagerBackEndUi",
        Ok(
            "CGuiManagerBackEnd::GotoLoadingScreen(unsigned int)",
        ),
    ),
    (
        "__17CGuiScreenLoadingPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenLoading::CGuiScreenLoading(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_17CGuiScreenLoading",
        Ok(
            "CGuiScreenLoading::~CGuiScreenLoading(void)",
        ),
    ),
    (
        "HandleMessage__17CGuiScreenLoading11eGuiMessageUiUi",
        Ok(
            "CGuiScreenLoading::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "LoadResources__17CGuiScreenLoading",
        Ok(
            "CGuiScreenLoading::LoadResources(void)",
        ),
    ),
    (
        "OnProcessRequestsComplete__17CGuiScreenLoadingPv",
        Ok(
            "CGuiScreenLoading::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "InitIntro__17CGuiScreenLoading",
        Ok(
            "CGuiScreenLoading::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__17CGuiScreenLoading",
        Ok(
            "CGuiScreenLoading::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__17CGuiScreenLoading",
        Ok(
            "CGuiScreenLoading::InitOutro(void)",
        ),
    ),
    (
        "__19CGuiScreenLoadingFEPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenLoadingFE::CGuiScreenLoadingFE(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_19CGuiScreenLoadingFE",
        Ok(
            "CGuiScreenLoadingFE::~CGuiScreenLoadingFE(void)",
        ),
    ),
    (
        "HandleMessage__19CGuiScreenLoadingFE11eGuiMessageUiUi",
        Ok(
            "CGuiScreenLoadingFE::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "LoadResources__19CGuiScreenLoadingFE",
        Ok(
            "CGuiScreenLoadingFE::LoadResources(void)",
        ),
    ),
    (
        "OnProcessRequestsComplete__19CGuiScreenLoadingFEPv",
        Ok(
            "CGuiScreenLoadingFE::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "InitIntro__19CGuiScreenLoadingFE",
        Ok(
            "CGuiScreenLoadingFE::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__19CGuiScreenLoadingFE",
        Ok(
            "CGuiScreenLoadingFE::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__19CGuiScreenLoadingFE",
        Ok(
            "CGuiScreenLoadingFE::InitOutro(void)",
        ),
    ),
    (
        "GetCurrentMemoryUsage__C19CGuiScreenLoadingFE11ContextEnum",
        Ok(
            "CGuiScreenLoadingFE::GetCurrentMemoryUsage(ContextEnum) const",
        ),
    ),
    (
        "__14CGuiScreenDemoPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenDemo::CGuiScreenDemo(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_14CGuiScreenDemo",
        Ok(
            "CGuiScreenDemo::~CGuiScreenDemo(void)",
        ),
    ),
    (
        "HandleMessage__14CGuiScreenDemo11eGuiMessageUiUi",
        Ok(
            "CGuiScreenDemo::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__14CGuiScreenDemo",
        Ok(
            "CGuiScreenDemo::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__14CGuiScreenDemo",
        Ok(
            "CGuiScreenDemo::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__14CGuiScreenDemo",
        Ok(
            "CGuiScreenDemo::InitOutro(void)",
        ),
    ),
    (
        "__tf18CGuiManagerBackEnd",
        Ok(
            "CGuiManagerBackEnd type_info function",
        ),
    ),
    (
        "__tf17CGuiScreenLoading",
        Ok(
            "CGuiScreenLoading type_info function",
        ),
    ),
    (
        "__tf19CGuiScreenLoadingFE",
        Ok(
            "CGuiScreenLoadingFE type_info function",
        ),
    ),
    (
        "__tf14CGuiScreenDemo",
        Ok(
            "CGuiScreenDemo type_info function",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z7tSprite",
        Ok(
            "radLoadInventory::SafeCast<tSprite>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z7tSprite",
        Ok(
            "radLoadInventory::SafeCast<tSprite> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z7tSpriteP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tSprite>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "__19CGuiManagerFrontEndPQ27Scrooby7ProjectP10CGuiEntity",
        Ok(
            "CGuiManagerFrontEnd::CGuiManagerFrontEnd(Scrooby::Project *, CGuiEntity *)",
        ),
    ),
    (
        "_$_19CGuiManagerFrontEnd",
        Ok(
            "CGuiManagerFrontEnd::~CGuiManagerFrontEnd(void)",
        ),
    ),
    (
        "Populate__19CGuiManagerFrontEnd",
        Ok(
            "CGuiManagerFrontEnd::Populate(void)",
        ),
    ),
    (
        "Start__19CGuiManagerFrontEndQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiManagerFrontEnd::Start(CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "OnControllerConnected__19CGuiManagerFrontEndi",
        Ok(
            "CGuiManagerFrontEnd::OnControllerConnected(int)",
        ),
    ),
    (
        "OnControllerDisconnected__19CGuiManagerFrontEndi",
        Ok(
            "CGuiManagerFrontEnd::OnControllerDisconnected(int)",
        ),
    ),
    (
        "HandleMessage__19CGuiManagerFrontEnd11eGuiMessageUiUi",
        Ok(
            "CGuiManagerFrontEnd::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "StartIntroMovie__19CGuiManagerFrontEnd",
        Ok(
            "CGuiManagerFrontEnd::StartIntroMovie(void)",
        ),
    ),
    (
        "__21CGuiScreenCardGalleryPQ27Scrooby6ScreenP10CGuiEntityQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiScreenCardGallery::CGuiScreenCardGallery(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "_$_21CGuiScreenCardGallery",
        Ok(
            "CGuiScreenCardGallery::~CGuiScreenCardGallery(void)",
        ),
    ),
    (
        "HandleMessage__21CGuiScreenCardGallery11eGuiMessageUiUi",
        Ok(
            "CGuiScreenCardGallery::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__21CGuiScreenCardGallery",
        Ok(
            "CGuiScreenCardGallery::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__21CGuiScreenCardGallery",
        Ok(
            "CGuiScreenCardGallery::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__21CGuiScreenCardGallery",
        Ok(
            "CGuiScreenCardGallery::InitOutro(void)",
        ),
    ),
    (
        "UpdateCards__21CGuiScreenCardGalleryUi",
        Ok(
            "CGuiScreenCardGallery::UpdateCards(unsigned int)",
        ),
    ),
    (
        "UpdateCardTransition__21CGuiScreenCardGalleryUib",
        Ok(
            "CGuiScreenCardGallery::UpdateCardTransition(unsigned int, bool)",
        ),
    ),
    (
        "UpdateViewCard__21CGuiScreenCardGalleryUi",
        Ok(
            "CGuiScreenCardGallery::UpdateViewCard(unsigned int)",
        ),
    ),
    (
        "SetCurrentViewCard__21CGuiScreenCardGalleryUi",
        Ok(
            "CGuiScreenCardGallery::SetCurrentViewCard(unsigned int)",
        ),
    ),
    (
        "__20CGuiScreenControllerPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenController::CGuiScreenController(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_20CGuiScreenController",
        Ok(
            "CGuiScreenController::~CGuiScreenController(void)",
        ),
    ),
    (
        "HandleMessage__20CGuiScreenController11eGuiMessageUiUi",
        Ok(
            "CGuiScreenController::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__20CGuiScreenController",
        Ok(
            "CGuiScreenController::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__20CGuiScreenController",
        Ok(
            "CGuiScreenController::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__20CGuiScreenController",
        Ok(
            "CGuiScreenController::InitOutro(void)",
        ),
    ),
    (
        "UpdateLabels__20CGuiScreenController",
        Ok(
            "CGuiScreenController::UpdateLabels(void)",
        ),
    ),
    (
        "__18CGuiScreenLoadGamePQ27Scrooby6ScreenP10CGuiEntityQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiScreenLoadGame::CGuiScreenLoadGame(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "_$_18CGuiScreenLoadGame",
        Ok(
            "CGuiScreenLoadGame::~CGuiScreenLoadGame(void)",
        ),
    ),
    (
        "HandleMessage__18CGuiScreenLoadGame11eGuiMessageUiUi",
        Ok(
            "CGuiScreenLoadGame::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnLoadGameComplete__18CGuiScreenLoadGame12radFileError",
        Ok(
            "CGuiScreenLoadGame::OnLoadGameComplete(radFileError)",
        ),
    ),
    (
        "HandleErrorResponse__18CGuiScreenLoadGameQ214CGuiMenuPrompt15ePromptResponse",
        Ok(
            "CGuiScreenLoadGame::HandleErrorResponse(CGuiMenuPrompt::ePromptResponse)",
        ),
    ),
    (
        "InitIntro__18CGuiScreenLoadGame",
        Ok(
            "CGuiScreenLoadGame::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__18CGuiScreenLoadGame",
        Ok(
            "CGuiScreenLoadGame::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__18CGuiScreenLoadGame",
        Ok(
            "CGuiScreenLoadGame::InitOutro(void)",
        ),
    ),
    (
        "GotoMemoryCardScreen__18CGuiScreenLoadGameb",
        Ok(
            "CGuiScreenLoadGame::GotoMemoryCardScreen(bool)",
        ),
    ),
    (
        "LoadGame__18CGuiScreenLoadGame",
        Ok(
            "CGuiScreenLoadGame::LoadGame(void)",
        ),
    ),
    (
        "__18CGuiScreenAutoLoadPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenAutoLoad::CGuiScreenAutoLoad(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_18CGuiScreenAutoLoad",
        Ok(
            "CGuiScreenAutoLoad::~CGuiScreenAutoLoad(void)",
        ),
    ),
    (
        "OnLoadGameComplete__18CGuiScreenAutoLoad12radFileError",
        Ok(
            "CGuiScreenAutoLoad::OnLoadGameComplete(radFileError)",
        ),
    ),
    (
        "InitIntro__18CGuiScreenAutoLoad",
        Ok(
            "CGuiScreenAutoLoad::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__18CGuiScreenAutoLoad",
        Ok(
            "CGuiScreenAutoLoad::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__18CGuiScreenAutoLoad",
        Ok(
            "CGuiScreenAutoLoad::InitOutro(void)",
        ),
    ),
    (
        "HandleErrorResponse__18CGuiScreenAutoLoadQ214CGuiMenuPrompt15ePromptResponse",
        Ok(
            "CGuiScreenAutoLoad::HandleErrorResponse(CGuiMenuPrompt::ePromptResponse)",
        ),
    ),
    (
        "LoadGame__18CGuiScreenAutoLoad",
        Ok(
            "CGuiScreenAutoLoad::LoadGame(void)",
        ),
    ),
    (
        "__18CGuiScreenMainMenuPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMainMenu::CGuiScreenMainMenu(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu::~CGuiScreenMainMenu(void)",
        ),
    ),
    (
        "HandleMessage__18CGuiScreenMainMenu11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMainMenu::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitMenu__18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu::InitMenu(void)",
        ),
    ),
    (
        "InitIntro__18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu::InitOutro(void)",
        ),
    ),
    (
        "UpdateIntro__18CGuiScreenMainMenuUi",
        Ok(
            "CGuiScreenMainMenu::UpdateIntro(unsigned int)",
        ),
    ),
    (
        "UpdateRunning__18CGuiScreenMainMenuUi",
        Ok(
            "CGuiScreenMainMenu::UpdateRunning(unsigned int)",
        ),
    ),
    (
        "UpdateOutro__18CGuiScreenMainMenuUi",
        Ok(
            "CGuiScreenMainMenu::UpdateOutro(unsigned int)",
        ),
    ),
    (
        "UpdateGags__18CGuiScreenMainMenuUi",
        Ok(
            "CGuiScreenMainMenu::UpdateGags(unsigned int)",
        ),
    ),
    (
        "StopHomerIdleAnimation__18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu::StopHomerIdleAnimation(void)",
        ),
    ),
    (
        "TurnOnGlowItems__18CGuiScreenMainMenuUi",
        Ok(
            "CGuiScreenMainMenu::TurnOnGlowItems(unsigned int)",
        ),
    ),
    (
        "OnNewGameSelected__18CGuiScreenMainMenuQ211RenderEnums9LevelEnumQ211RenderEnums11MissionEnum",
        Ok(
            "CGuiScreenMainMenu::OnNewGameSelected(RenderEnums::LevelEnum, RenderEnums::MissionEnum)",
        ),
    ),
    (
        "OnResumeGameSelected__18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu::OnResumeGameSelected(void)",
        ),
    ),
    (
        "OnMiniGameSelected__18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu::OnMiniGameSelected(void)",
        ),
    ),
    (
        "__25CGuiScreenIntroTransitionPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenIntroTransition::CGuiScreenIntroTransition(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_25CGuiScreenIntroTransition",
        Ok(
            "CGuiScreenIntroTransition::~CGuiScreenIntroTransition(void)",
        ),
    ),
    (
        "HandleMessage__25CGuiScreenIntroTransition11eGuiMessageUiUi",
        Ok(
            "CGuiScreenIntroTransition::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__25CGuiScreenIntroTransition",
        Ok(
            "CGuiScreenIntroTransition::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__25CGuiScreenIntroTransition",
        Ok(
            "CGuiScreenIntroTransition::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__25CGuiScreenIntroTransition",
        Ok(
            "CGuiScreenIntroTransition::InitOutro(void)",
        ),
    ),
    (
        "__24CGuiScreenMissionGalleryPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMissionGallery::CGuiScreenMissionGallery(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_24CGuiScreenMissionGallery",
        Ok(
            "CGuiScreenMissionGallery::~CGuiScreenMissionGallery(void)",
        ),
    ),
    (
        "HandleMessage__24CGuiScreenMissionGallery11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMissionGallery::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnProcessRequestsComplete__24CGuiScreenMissionGalleryPv",
        Ok(
            "CGuiScreenMissionGallery::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "InitIntro__24CGuiScreenMissionGallery",
        Ok(
            "CGuiScreenMissionGallery::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__24CGuiScreenMissionGallery",
        Ok(
            "CGuiScreenMissionGallery::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__24CGuiScreenMissionGallery",
        Ok(
            "CGuiScreenMissionGallery::InitOutro(void)",
        ),
    ),
    (
        "OnUpdate__24CGuiScreenMissionGalleryUi",
        Ok(
            "CGuiScreenMissionGallery::OnUpdate(unsigned int)",
        ),
    ),
    (
        "SetMenuAlpha__24CGuiScreenMissionGalleryf",
        Ok(
            "CGuiScreenMissionGallery::SetMenuAlpha(float)",
        ),
    ),
    (
        "OnMenuSelectionMade__24CGuiScreenMissionGalleryi",
        Ok(
            "CGuiScreenMissionGallery::OnMenuSelectionMade(int)",
        ),
    ),
    (
        "OnStartMission__24CGuiScreenMissionGallery",
        Ok(
            "CGuiScreenMissionGallery::OnStartMission(void)",
        ),
    ),
    (
        "LoadMissionImages__24CGuiScreenMissionGallery",
        Ok(
            "CGuiScreenMissionGallery::LoadMissionImages(void)",
        ),
    ),
    (
        "UnloadMissionImages__24CGuiScreenMissionGallery",
        Ok(
            "CGuiScreenMissionGallery::UnloadMissionImages(void)",
        ),
    ),
    (
        "__21CGuiScreenSkinGalleryPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenSkinGallery::CGuiScreenSkinGallery(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_21CGuiScreenSkinGallery",
        Ok(
            "CGuiScreenSkinGallery::~CGuiScreenSkinGallery(void)",
        ),
    ),
    (
        "HandleMessage__21CGuiScreenSkinGallery11eGuiMessageUiUi",
        Ok(
            "CGuiScreenSkinGallery::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnProcessRequestsComplete__21CGuiScreenSkinGalleryPv",
        Ok(
            "CGuiScreenSkinGallery::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "InitIntro__21CGuiScreenSkinGallery",
        Ok(
            "CGuiScreenSkinGallery::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__21CGuiScreenSkinGallery",
        Ok(
            "CGuiScreenSkinGallery::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__21CGuiScreenSkinGallery",
        Ok(
            "CGuiScreenSkinGallery::InitOutro(void)",
        ),
    ),
    (
        "OnUpdate__21CGuiScreenSkinGalleryUi",
        Ok(
            "CGuiScreenSkinGallery::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnMenuSelectionChange__21CGuiScreenSkinGalleryi",
        Ok(
            "CGuiScreenSkinGallery::OnMenuSelectionChange(int)",
        ),
    ),
    (
        "OnMenuSelectionMade__21CGuiScreenSkinGalleryi",
        Ok(
            "CGuiScreenSkinGallery::OnMenuSelectionMade(int)",
        ),
    ),
    (
        "SetMenuAlpha__21CGuiScreenSkinGalleryf",
        Ok(
            "CGuiScreenSkinGallery::SetMenuAlpha(float)",
        ),
    ),
    (
        "Load2DImages__21CGuiScreenSkinGallery",
        Ok(
            "CGuiScreenSkinGallery::Load2DImages(void)",
        ),
    ),
    (
        "Unload2DImages__21CGuiScreenSkinGallery",
        Ok(
            "CGuiScreenSkinGallery::Unload2DImages(void)",
        ),
    ),
    (
        "__24CGuiScreenVehicleGalleryPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenVehicleGallery::CGuiScreenVehicleGallery(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_24CGuiScreenVehicleGallery",
        Ok(
            "CGuiScreenVehicleGallery::~CGuiScreenVehicleGallery(void)",
        ),
    ),
    (
        "HandleMessage__24CGuiScreenVehicleGallery11eGuiMessageUiUi",
        Ok(
            "CGuiScreenVehicleGallery::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnProcessRequestsComplete__24CGuiScreenVehicleGalleryPv",
        Ok(
            "CGuiScreenVehicleGallery::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "InitIntro__24CGuiScreenVehicleGallery",
        Ok(
            "CGuiScreenVehicleGallery::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__24CGuiScreenVehicleGallery",
        Ok(
            "CGuiScreenVehicleGallery::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__24CGuiScreenVehicleGallery",
        Ok(
            "CGuiScreenVehicleGallery::InitOutro(void)",
        ),
    ),
    (
        "OnUpdate__24CGuiScreenVehicleGalleryUi",
        Ok(
            "CGuiScreenVehicleGallery::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnMenuSelectionChange__24CGuiScreenVehicleGalleryi",
        Ok(
            "CGuiScreenVehicleGallery::OnMenuSelectionChange(int)",
        ),
    ),
    (
        "OnMenuSelectionMade__24CGuiScreenVehicleGalleryi",
        Ok(
            "CGuiScreenVehicleGallery::OnMenuSelectionMade(int)",
        ),
    ),
    (
        "SetMenuAlpha__24CGuiScreenVehicleGalleryf",
        Ok(
            "CGuiScreenVehicleGallery::SetMenuAlpha(float)",
        ),
    ),
    (
        "Load2DImages__24CGuiScreenVehicleGallery",
        Ok(
            "CGuiScreenVehicleGallery::Load2DImages(void)",
        ),
    ),
    (
        "Unload2DImages__24CGuiScreenVehicleGallery",
        Ok(
            "CGuiScreenVehicleGallery::Unload2DImages(void)",
        ),
    ),
    (
        "__17CGuiScreenOptionsPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenOptions::CGuiScreenOptions(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_17CGuiScreenOptions",
        Ok(
            "CGuiScreenOptions::~CGuiScreenOptions(void)",
        ),
    ),
    (
        "HandleMessage__17CGuiScreenOptions11eGuiMessageUiUi",
        Ok(
            "CGuiScreenOptions::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnCheatEntered__17CGuiScreenOptions8eCheatIDb",
        Ok(
            "CGuiScreenOptions::OnCheatEntered(eCheatID, bool)",
        ),
    ),
    (
        "InitIntro__17CGuiScreenOptions",
        Ok(
            "CGuiScreenOptions::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__17CGuiScreenOptions",
        Ok(
            "CGuiScreenOptions::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__17CGuiScreenOptions",
        Ok(
            "CGuiScreenOptions::InitOutro(void)",
        ),
    ),
    (
        "UpdateCheatsDisplay__17CGuiScreenOptionsi",
        Ok(
            "CGuiScreenOptions::UpdateCheatsDisplay(int)",
        ),
    ),
    (
        "ProgressiveModeTestBegin__17CGuiScreenOptions",
        Ok(
            "CGuiScreenOptions::ProgressiveModeTestBegin(void)",
        ),
    ),
    (
        "OnProgressiveModeTestEnd__17CGuiScreenOptions",
        Ok(
            "CGuiScreenOptions::OnProgressiveModeTestEnd(void)",
        ),
    ),
    (
        "__19CGuiScreenPlayMoviePQ27Scrooby6ScreenP10CGuiEntityQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiScreenPlayMovie::CGuiScreenPlayMovie(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "_$_19CGuiScreenPlayMovie",
        Ok(
            "CGuiScreenPlayMovie::~CGuiScreenPlayMovie(void)",
        ),
    ),
    (
        "HandleMessage__19CGuiScreenPlayMovie11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPlayMovie::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "SetMovieToPlay__19CGuiScreenPlayMoviePCcbT2",
        Ok(
            "CGuiScreenPlayMovie::SetMovieToPlay(char const *, bool, bool)",
        ),
    ),
    (
        "OnPresentationEventBegin__19CGuiScreenPlayMovieP17PresentationEvent",
        Ok(
            "CGuiScreenPlayMovie::OnPresentationEventBegin(PresentationEvent *)",
        ),
    ),
    (
        "OnPresentationEventLoadComplete__19CGuiScreenPlayMovieP17PresentationEvent",
        Ok(
            "CGuiScreenPlayMovie::OnPresentationEventLoadComplete(PresentationEvent *)",
        ),
    ),
    (
        "OnPresentationEventEnd__19CGuiScreenPlayMovieP17PresentationEvent",
        Ok(
            "CGuiScreenPlayMovie::OnPresentationEventEnd(PresentationEvent *)",
        ),
    ),
    (
        "InitIntro__19CGuiScreenPlayMovie",
        Ok(
            "CGuiScreenPlayMovie::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__19CGuiScreenPlayMovie",
        Ok(
            "CGuiScreenPlayMovie::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__19CGuiScreenPlayMovie",
        Ok(
            "CGuiScreenPlayMovie::InitOutro(void)",
        ),
    ),
    (
        "__19CGuiScreenScrapBookPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenScrapBook::CGuiScreenScrapBook(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_19CGuiScreenScrapBook",
        Ok(
            "CGuiScreenScrapBook::~CGuiScreenScrapBook(void)",
        ),
    ),
    (
        "HandleMessage__19CGuiScreenScrapBook11eGuiMessageUiUi",
        Ok(
            "CGuiScreenScrapBook::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__19CGuiScreenScrapBook",
        Ok(
            "CGuiScreenScrapBook::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__19CGuiScreenScrapBook",
        Ok(
            "CGuiScreenScrapBook::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__19CGuiScreenScrapBook",
        Ok(
            "CGuiScreenScrapBook::InitOutro(void)",
        ),
    ),
    (
        "OnMenuSelectionMade__19CGuiScreenScrapBookQ219CGuiScreenScrapBook9eMenuItem",
        Ok(
            "CGuiScreenScrapBook::OnMenuSelectionMade(CGuiScreenScrapBook::eMenuItem)",
        ),
    ),
    (
        "__27CGuiScreenScrapBookContentsPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenScrapBookContents::CGuiScreenScrapBookContents(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_27CGuiScreenScrapBookContents",
        Ok(
            "CGuiScreenScrapBookContents::~CGuiScreenScrapBookContents(void)",
        ),
    ),
    (
        "HandleMessage__27CGuiScreenScrapBookContents11eGuiMessageUiUi",
        Ok(
            "CGuiScreenScrapBookContents::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "SetLevelBarVisible__27CGuiScreenScrapBookContentsb",
        Ok(
            "CGuiScreenScrapBookContents::SetLevelBarVisible(bool)",
        ),
    ),
    (
        "InitIntro__27CGuiScreenScrapBookContents",
        Ok(
            "CGuiScreenScrapBookContents::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__27CGuiScreenScrapBookContents",
        Ok(
            "CGuiScreenScrapBookContents::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__27CGuiScreenScrapBookContents",
        Ok(
            "CGuiScreenScrapBookContents::InitOutro(void)",
        ),
    ),
    (
        "OnLevelSelectionChange__27CGuiScreenScrapBookContentsi",
        Ok(
            "CGuiScreenScrapBookContents::OnLevelSelectionChange(int)",
        ),
    ),
    (
        "OnMenuSelectionMade__27CGuiScreenScrapBookContentsQ227CGuiScreenScrapBookContents9eMenuItem",
        Ok(
            "CGuiScreenScrapBookContents::OnMenuSelectionMade(CGuiScreenScrapBookContents::eMenuItem)",
        ),
    ),
    (
        "__24CGuiScreenScrapBookStatsPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenScrapBookStats::CGuiScreenScrapBookStats(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_24CGuiScreenScrapBookStats",
        Ok(
            "CGuiScreenScrapBookStats::~CGuiScreenScrapBookStats(void)",
        ),
    ),
    (
        "HandleMessage__24CGuiScreenScrapBookStats11eGuiMessageUiUi",
        Ok(
            "CGuiScreenScrapBookStats::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__24CGuiScreenScrapBookStats",
        Ok(
            "CGuiScreenScrapBookStats::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__24CGuiScreenScrapBookStats",
        Ok(
            "CGuiScreenScrapBookStats::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__24CGuiScreenScrapBookStats",
        Ok(
            "CGuiScreenScrapBookStats::InitOutro(void)",
        ),
    ),
    (
        "__15CGuiScreenSoundPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenSound::CGuiScreenSound(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_15CGuiScreenSound",
        Ok(
            "CGuiScreenSound::~CGuiScreenSound(void)",
        ),
    ),
    (
        "HandleMessage__15CGuiScreenSound11eGuiMessageUiUi",
        Ok(
            "CGuiScreenSound::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__15CGuiScreenSound",
        Ok(
            "CGuiScreenSound::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__15CGuiScreenSound",
        Ok(
            "CGuiScreenSound::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__15CGuiScreenSound",
        Ok(
            "CGuiScreenSound::InitOutro(void)",
        ),
    ),
    (
        "__16CGuiScreenSplashPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenSplash::CGuiScreenSplash(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_16CGuiScreenSplash",
        Ok(
            "CGuiScreenSplash::~CGuiScreenSplash(void)",
        ),
    ),
    (
        "HandleMessage__16CGuiScreenSplash11eGuiMessageUiUi",
        Ok(
            "CGuiScreenSplash::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__16CGuiScreenSplash",
        Ok(
            "CGuiScreenSplash::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__16CGuiScreenSplash",
        Ok(
            "CGuiScreenSplash::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__16CGuiScreenSplash",
        Ok(
            "CGuiScreenSplash::InitOutro(void)",
        ),
    ),
    (
        "StartDemoInRuntime__16CGuiScreenSplash",
        Ok(
            "CGuiScreenSplash::StartDemoInRuntime(void)",
        ),
    ),
    (
        "StartDemoAsMovie__16CGuiScreenSplash",
        Ok(
            "CGuiScreenSplash::StartDemoAsMovie(void)",
        ),
    ),
    (
        "__21CGuiScreenViewCreditsPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenViewCredits::CGuiScreenViewCredits(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_21CGuiScreenViewCredits",
        Ok(
            "CGuiScreenViewCredits::~CGuiScreenViewCredits(void)",
        ),
    ),
    (
        "HandleMessage__21CGuiScreenViewCredits11eGuiMessageUiUi",
        Ok(
            "CGuiScreenViewCredits::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__21CGuiScreenViewCredits",
        Ok(
            "CGuiScreenViewCredits::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__21CGuiScreenViewCredits",
        Ok(
            "CGuiScreenViewCredits::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__21CGuiScreenViewCredits",
        Ok(
            "CGuiScreenViewCredits::InitOutro(void)",
        ),
    ),
    (
        "ResetScrolling__21CGuiScreenViewCredits",
        Ok(
            "CGuiScreenViewCredits::ResetScrolling(void)",
        ),
    ),
    (
        "FormatTextWithLineBreaks__21CGuiScreenViewCreditsPQ27Scrooby4Text",
        Ok(
            "CGuiScreenViewCredits::FormatTextWithLineBreaks(Scrooby::Text *)",
        ),
    ),
    (
        "ScrollCredits__21CGuiScreenViewCreditsf",
        Ok(
            "CGuiScreenViewCredits::ScrollCredits(float)",
        ),
    ),
    (
        "OnScrollingDone__21CGuiScreenViewCredits",
        Ok(
            "CGuiScreenViewCredits::OnScrollingDone(void)",
        ),
    ),
    (
        "OnNewLineDisplayed__21CGuiScreenViewCreditsi",
        Ok(
            "CGuiScreenViewCredits::OnNewLineDisplayed(int)",
        ),
    ),
    (
        "__20CGuiScreenViewMoviesPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenViewMovies::CGuiScreenViewMovies(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_20CGuiScreenViewMovies",
        Ok(
            "CGuiScreenViewMovies::~CGuiScreenViewMovies(void)",
        ),
    ),
    (
        "HandleMessage__20CGuiScreenViewMovies11eGuiMessageUiUi",
        Ok(
            "CGuiScreenViewMovies::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__20CGuiScreenViewMovies",
        Ok(
            "CGuiScreenViewMovies::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__20CGuiScreenViewMovies",
        Ok(
            "CGuiScreenViewMovies::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__20CGuiScreenViewMovies",
        Ok(
            "CGuiScreenViewMovies::InitOutro(void)",
        ),
    ),
    (
        "__tf19CGuiManagerFrontEnd",
        Ok(
            "CGuiManagerFrontEnd type_info function",
        ),
    ),
    (
        "__tf16CGuiScreenSplash",
        Ok(
            "CGuiScreenSplash type_info function",
        ),
    ),
    (
        "__tf18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu type_info function",
        ),
    ),
    (
        "__tf25CGuiScreenIntroTransition",
        Ok(
            "CGuiScreenIntroTransition type_info function",
        ),
    ),
    (
        "__tf18CGuiScreenLoadGame",
        Ok(
            "CGuiScreenLoadGame type_info function",
        ),
    ),
    (
        "__tf18CGuiScreenAutoLoad",
        Ok(
            "CGuiScreenAutoLoad type_info function",
        ),
    ),
    (
        "__tf19CGuiScreenScrapBook",
        Ok(
            "CGuiScreenScrapBook type_info function",
        ),
    ),
    (
        "__tf27CGuiScreenScrapBookContents",
        Ok(
            "CGuiScreenScrapBookContents type_info function",
        ),
    ),
    (
        "__tf24CGuiScreenScrapBookStats",
        Ok(
            "CGuiScreenScrapBookStats type_info function",
        ),
    ),
    (
        "__tf21CGuiScreenCardGallery",
        Ok(
            "CGuiScreenCardGallery type_info function",
        ),
    ),
    (
        "__tf24CGuiScreenMissionGallery",
        Ok(
            "CGuiScreenMissionGallery type_info function",
        ),
    ),
    (
        "__tf21CGuiScreenSkinGallery",
        Ok(
            "CGuiScreenSkinGallery type_info function",
        ),
    ),
    (
        "__tf24CGuiScreenVehicleGallery",
        Ok(
            "CGuiScreenVehicleGallery type_info function",
        ),
    ),
    (
        "__tf17CGuiScreenOptions",
        Ok(
            "CGuiScreenOptions type_info function",
        ),
    ),
    (
        "__tf20CGuiScreenController",
        Ok(
            "CGuiScreenController type_info function",
        ),
    ),
    (
        "__tf15CGuiScreenSound",
        Ok(
            "CGuiScreenSound type_info function",
        ),
    ),
    (
        "__tf21CGuiScreenViewCredits",
        Ok(
            "CGuiScreenViewCredits type_info function",
        ),
    ),
    (
        "__tf20CGuiScreenViewMovies",
        Ok(
            "CGuiScreenViewMovies type_info function",
        ),
    ),
    (
        "__tf19CGuiScreenPlayMovie",
        Ok(
            "CGuiScreenPlayMovie type_info function",
        ),
    ),
    (
        "HasMenu__16CGuiScreenSplash",
        Ok(
            "CGuiScreenSplash::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu::HasMenu(void)",
        ),
    ),
    (
        "__20GameDataLoadCallback",
        Ok(
            "GameDataLoadCallback::GameDataLoadCallback(void)",
        ),
    ),
    (
        "HasMenu__18CGuiScreenLoadGame",
        Ok(
            "CGuiScreenLoadGame::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__19CGuiScreenScrapBook",
        Ok(
            "CGuiScreenScrapBook::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__27CGuiScreenScrapBookContents",
        Ok(
            "CGuiScreenScrapBookContents::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__21CGuiScreenCardGallery",
        Ok(
            "CGuiScreenCardGallery::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__24CGuiScreenMissionGallery",
        Ok(
            "CGuiScreenMissionGallery::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__21CGuiScreenSkinGallery",
        Ok(
            "CGuiScreenSkinGallery::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__24CGuiScreenVehicleGallery",
        Ok(
            "CGuiScreenVehicleGallery::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__17CGuiScreenOptions",
        Ok(
            "CGuiScreenOptions::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__20CGuiScreenController",
        Ok(
            "CGuiScreenController::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__15CGuiScreenSound",
        Ok(
            "CGuiScreenSound::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__20CGuiScreenViewMovies",
        Ok(
            "CGuiScreenViewMovies::HasMenu(void)",
        ),
    ),
    (
        "__tf20GameDataLoadCallback",
        Ok(
            "GameDataLoadCallback type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__19CGuiManagerFrontEndPQ27Scrooby7ProjectP10CGuiEntity",
        Ok(
            "global constructors keyed to CGuiManagerFrontEnd::CGuiManagerFrontEnd(Scrooby::Project *, CGuiEntity *)",
        ),
    ),
    (
        "__19CGuiManagerMiniGamePQ27Scrooby7ProjectP10CGuiEntity",
        Ok(
            "CGuiManagerMiniGame::CGuiManagerMiniGame(Scrooby::Project *, CGuiEntity *)",
        ),
    ),
    (
        "_$_19CGuiManagerMiniGame",
        Ok(
            "CGuiManagerMiniGame::~CGuiManagerMiniGame(void)",
        ),
    ),
    (
        "Populate__19CGuiManagerMiniGame",
        Ok(
            "CGuiManagerMiniGame::Populate(void)",
        ),
    ),
    (
        "Start__19CGuiManagerMiniGameQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiManagerMiniGame::Start(CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "HandleMessage__19CGuiManagerMiniGame11eGuiMessageUiUi",
        Ok(
            "CGuiManagerMiniGame::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnControllerDisconnected__19CGuiManagerMiniGameib",
        Ok(
            "CGuiManagerMiniGame::OnControllerDisconnected(int, bool)",
        ),
    ),
    (
        "PollControllers__19CGuiManagerMiniGame",
        Ok(
            "CGuiManagerMiniGame::PollControllers(void)",
        ),
    ),
    (
        "OnControllerConnected__19CGuiManagerMiniGamei",
        Ok(
            "CGuiManagerMiniGame::OnControllerConnected(int)",
        ),
    ),
    (
        "__10PlayerMenu",
        Ok(
            "PlayerMenu::PlayerMenu(void)",
        ),
    ),
    (
        "HandleMessage__10PlayerMenu11eGuiMessageUiUi",
        Ok(
            "PlayerMenu::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetCurrentSubMenu__C10PlayerMenu",
        Ok(
            "PlayerMenu::GetCurrentSubMenu(void) const",
        ),
    ),
    (
        "SetActive__10PlayerMenubi",
        Ok(
            "PlayerMenu::SetActive(bool, int)",
        ),
    ),
    (
        "__18CGuiScreenMiniMenuPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMiniMenu::CGuiScreenMiniMenu(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_18CGuiScreenMiniMenu",
        Ok(
            "CGuiScreenMiniMenu::~CGuiScreenMiniMenu(void)",
        ),
    ),
    (
        "HandleMessage__18CGuiScreenMiniMenu11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMiniMenu::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__18CGuiScreenMiniMenu",
        Ok(
            "CGuiScreenMiniMenu::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__18CGuiScreenMiniMenu",
        Ok(
            "CGuiScreenMiniMenu::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__18CGuiScreenMiniMenu",
        Ok(
            "CGuiScreenMiniMenu::InitOutro(void)",
        ),
    ),
    (
        "UpdateCharacterSlots__18CGuiScreenMiniMenu",
        Ok(
            "CGuiScreenMiniMenu::UpdateCharacterSlots(void)",
        ),
    ),
    (
        "SetTrackSelectionEnabled__18CGuiScreenMiniMenub",
        Ok(
            "CGuiScreenMiniMenu::SetTrackSelectionEnabled(bool)",
        ),
    ),
    (
        "MoveTrackCursor__18CGuiScreenMiniMenuii",
        Ok(
            "CGuiScreenMiniMenu::MoveTrackCursor(int, int)",
        ),
    ),
    (
        "OnTrackSelected__18CGuiScreenMiniMenu",
        Ok(
            "CGuiScreenMiniMenu::OnTrackSelected(void)",
        ),
    ),
    (
        "ActivateNewPlayer__18CGuiScreenMiniMenui",
        Ok(
            "CGuiScreenMiniMenu::ActivateNewPlayer(int)",
        ),
    ),
    (
        "OnCharacterSelected__18CGuiScreenMiniMenuib",
        Ok(
            "CGuiScreenMiniMenu::OnCharacterSelected(int, bool)",
        ),
    ),
    (
        "OnVehicleSelected__18CGuiScreenMiniMenuib",
        Ok(
            "CGuiScreenMiniMenu::OnVehicleSelected(int, bool)",
        ),
    ),
    (
        "AddRewardVehicle__18CGuiScreenMiniMenuP6Reward",
        Ok(
            "CGuiScreenMiniMenu::AddRewardVehicle(Reward *)",
        ),
    ),
    (
        "PrepareVehicleSelections__18CGuiScreenMiniMenu",
        Ok(
            "CGuiScreenMiniMenu::PrepareVehicleSelections(void)",
        ),
    ),
    (
        "UpdateVehicleDisplayImages__18CGuiScreenMiniMenuiPQ27Scrooby6Sprite",
        Ok(
            "CGuiScreenMiniMenu::UpdateVehicleDisplayImages(int, Scrooby::Sprite *)",
        ),
    ),
    (
        "UpdateVehicleRating__18CGuiScreenMiniMenui",
        Ok(
            "CGuiScreenMiniMenu::UpdateVehicleRating(int)",
        ),
    ),
    (
        "SetTimerEnabled__18CGuiScreenMiniMenub",
        Ok(
            "CGuiScreenMiniMenu::SetTimerEnabled(bool)",
        ),
    ),
    (
        "GetPlayerMenuID__C18CGuiScreenMiniMenui",
        Ok(
            "CGuiScreenMiniMenu::GetPlayerMenuID(int) const",
        ),
    ),
    (
        "__17CGuiScreenMiniHudPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMiniHud::CGuiScreenMiniHud(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_17CGuiScreenMiniHud",
        Ok(
            "CGuiScreenMiniHud::~CGuiScreenMiniHud(void)",
        ),
    ),
    (
        "HandleMessage__17CGuiScreenMiniHud11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMiniHud::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__17CGuiScreenMiniHud",
        Ok(
            "CGuiScreenMiniHud::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__17CGuiScreenMiniHud",
        Ok(
            "CGuiScreenMiniHud::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__17CGuiScreenMiniHud",
        Ok(
            "CGuiScreenMiniHud::InitOutro(void)",
        ),
    ),
    (
        "__19CGuiScreenMiniPausePQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMiniPause::CGuiScreenMiniPause(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_19CGuiScreenMiniPause",
        Ok(
            "CGuiScreenMiniPause::~CGuiScreenMiniPause(void)",
        ),
    ),
    (
        "HandleMessage__19CGuiScreenMiniPause11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMiniPause::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__19CGuiScreenMiniPause",
        Ok(
            "CGuiScreenMiniPause::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__19CGuiScreenMiniPause",
        Ok(
            "CGuiScreenMiniPause::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__19CGuiScreenMiniPause",
        Ok(
            "CGuiScreenMiniPause::InitOutro(void)",
        ),
    ),
    (
        "ResumeGame__19CGuiScreenMiniPause",
        Ok(
            "CGuiScreenMiniPause::ResumeGame(void)",
        ),
    ),
    (
        "QuitGame__19CGuiScreenMiniPause",
        Ok(
            "CGuiScreenMiniPause::QuitGame(void)",
        ),
    ),
    (
        "SetVisible__Q221CGuiScreenMiniSummary17PlayerDisplayInfob",
        Ok(
            "CGuiScreenMiniSummary::PlayerDisplayInfo::SetVisible(bool)",
        ),
    ),
    (
        "CompareScores__Q221CGuiScreenMiniSummary13PlayerRankingiiii",
        Ok(
            "CGuiScreenMiniSummary::PlayerRanking::CompareScores(int, int, int, int)",
        ),
    ),
    (
        "__21CGuiScreenMiniSummaryPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMiniSummary::CGuiScreenMiniSummary(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_21CGuiScreenMiniSummary",
        Ok(
            "CGuiScreenMiniSummary::~CGuiScreenMiniSummary(void)",
        ),
    ),
    (
        "HandleMessage__21CGuiScreenMiniSummary11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMiniSummary::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__21CGuiScreenMiniSummary",
        Ok(
            "CGuiScreenMiniSummary::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__21CGuiScreenMiniSummary",
        Ok(
            "CGuiScreenMiniSummary::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__21CGuiScreenMiniSummary",
        Ok(
            "CGuiScreenMiniSummary::InitOutro(void)",
        ),
    ),
    (
        "UpdateDisplayInfo__21CGuiScreenMiniSummaryii",
        Ok(
            "CGuiScreenMiniSummary::UpdateDisplayInfo(int, int)",
        ),
    ),
    (
        "ResetCurrentRankings__21CGuiScreenMiniSummary",
        Ok(
            "CGuiScreenMiniSummary::ResetCurrentRankings(void)",
        ),
    ),
    (
        "InsertPlayerRanking__21CGuiScreenMiniSummaryi",
        Ok(
            "CGuiScreenMiniSummary::InsertPlayerRanking(int)",
        ),
    ),
    (
        "__tf19CGuiManagerMiniGame",
        Ok(
            "CGuiManagerMiniGame type_info function",
        ),
    ),
    (
        "__tf18CGuiScreenMiniMenu",
        Ok(
            "CGuiScreenMiniMenu type_info function",
        ),
    ),
    (
        "__tf17CGuiScreenMiniHud",
        Ok(
            "CGuiScreenMiniHud type_info function",
        ),
    ),
    (
        "__tf19CGuiScreenMiniPause",
        Ok(
            "CGuiScreenMiniPause type_info function",
        ),
    ),
    (
        "__tf21CGuiScreenMiniSummary",
        Ok(
            "CGuiScreenMiniSummary type_info function",
        ),
    ),
    (
        "HasMenu__19CGuiScreenMiniPause",
        Ok(
            "CGuiScreenMiniPause::HasMenu(void)",
        ),
    ),
    (
        "_GLOBAL_$I$MINIGAME_CHARACTERS_INVENTORY",
        Ok(
            "global constructors keyed to MINIGAME_CHARACTERS_INVENTORY",
        ),
    ),
    (
        "__17CGuiManagerInGamePQ27Scrooby7ProjectP10CGuiEntity",
        Ok(
            "CGuiManagerInGame::CGuiManagerInGame(Scrooby::Project *, CGuiEntity *)",
        ),
    ),
    (
        "_$_17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame::~CGuiManagerInGame(void)",
        ),
    ),
    (
        "Populate__17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame::Populate(void)",
        ),
    ),
    (
        "Start__17CGuiManagerInGameQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiManagerInGame::Start(CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "HandleMessage__17CGuiManagerInGame11eGuiMessageUiUi",
        Ok(
            "CGuiManagerInGame::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "HandleEvent__17CGuiManagerInGame9EventEnumPv",
        Ok(
            "CGuiManagerInGame::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnProjectLoadComplete__17CGuiManagerInGamePQ27Scrooby7Project",
        Ok(
            "CGuiManagerInGame::OnProjectLoadComplete(Scrooby::Project *)",
        ),
    ),
    (
        "OnMemcardInfoLoadComplete__17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame::OnMemcardInfoLoadComplete(void)",
        ),
    ),
    (
        "UpdateDuringMissionLoading__17CGuiManagerInGameUi",
        Ok(
            "CGuiManagerInGame::UpdateDuringMissionLoading(unsigned int)",
        ),
    ),
    (
        "UpdateWhileLoadingNotDone__17CGuiManagerInGameUi",
        Ok(
            "CGuiManagerInGame::UpdateWhileLoadingNotDone(unsigned int)",
        ),
    ),
    (
        "GotoPauseScreen__17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame::GotoPauseScreen(void)",
        ),
    ),
    (
        "GotoHUDScreen__17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame::GotoHUDScreen(void)",
        ),
    ),
    (
        "QuitGame__17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame::QuitGame(void)",
        ),
    ),
    (
        "OnControllerDisconnected__17CGuiManagerInGamei",
        Ok(
            "CGuiManagerInGame::OnControllerDisconnected(int)",
        ),
    ),
    (
        "OnControllerConnected__17CGuiManagerInGamei",
        Ok(
            "CGuiManagerInGame::OnControllerConnected(int)",
        ),
    ),
    (
        "OnNewMissionLoadBegin__17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame::OnNewMissionLoadBegin(void)",
        ),
    ),
    (
        "OnNewMissionLoadEnd__17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame::OnNewMissionLoadEnd(void)",
        ),
    ),
    (
        "IsPausingAllowed__C17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame::IsPausingAllowed(void) const",
        ),
    ),
    (
        "Activate__Q26GuiSFX19AbortCurrentMission",
        Ok(
            "GuiSFX::AbortCurrentMission::Activate(void)",
        ),
    ),
    (
        "Activate__Q26GuiSFX8OpenIris",
        Ok(
            "GuiSFX::OpenIris::Activate(void)",
        ),
    ),
    (
        "Activate__Q26GuiSFX21RestartCurrentMission",
        Ok(
            "GuiSFX::RestartCurrentMission::Activate(void)",
        ),
    ),
    (
        "__24CGuiScreenHasTransitions",
        Ok(
            "CGuiScreenHasTransitions::CGuiScreenHasTransitions(void)",
        ),
    ),
    (
        "AddTransition__24CGuiScreenHasTransitionsRQ26GuiSFX10Transition",
        Ok(
            "CGuiScreenHasTransitions::AddTransition(GuiSFX::Transition &)",
        ),
    ),
    (
        "DoneAddingTransitions__24CGuiScreenHasTransitions",
        Ok(
            "CGuiScreenHasTransitions::DoneAddingTransitions(void)",
        ),
    ),
    (
        "ResetMovableObjects__24CGuiScreenHasTransitions",
        Ok(
            "CGuiScreenHasTransitions::ResetMovableObjects(void)",
        ),
    ),
    (
        "ResetTransitions__24CGuiScreenHasTransitions",
        Ok(
            "CGuiScreenHasTransitions::ResetTransitions(void)",
        ),
    ),
    (
        "UpdateTransitions__24CGuiScreenHasTransitionsf",
        Ok(
            "CGuiScreenHasTransitions::UpdateTransitions(float)",
        ),
    ),
    (
        "__12MessageQueue",
        Ok(
            "MessageQueue::MessageQueue(void)",
        ),
    ),
    (
        "_$_12MessageQueue",
        Ok(
            "MessageQueue::~MessageQueue(void)",
        ),
    ),
    (
        "Enqueue__12MessageQueueUi",
        Ok(
            "MessageQueue::Enqueue(unsigned int)",
        ),
    ),
    (
        "Dequeue__12MessageQueue",
        Ok(
            "MessageQueue::Dequeue(void)",
        ),
    ),
    (
        "__13CGuiScreenHudPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenHud::CGuiScreenHud(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_13CGuiScreenHud",
        Ok(
            "CGuiScreenHud::~CGuiScreenHud(void)",
        ),
    ),
    (
        "HandleMessage__13CGuiScreenHud11eGuiMessageUiUi",
        Ok(
            "CGuiScreenHud::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "Update__13CGuiScreenHudUi",
        Ok(
            "CGuiScreenHud::Update(unsigned int)",
        ),
    ),
    (
        "SetVisible__13CGuiScreenHudb",
        Ok(
            "CGuiScreenHud::SetVisible(bool)",
        ),
    ),
    (
        "SetTimerBlinkingInterval__13CGuiScreenHudii",
        Ok(
            "CGuiScreenHud::SetTimerBlinkingInterval(int, int)",
        ),
    ),
    (
        "SetParTime__13CGuiScreenHudi",
        Ok(
            "CGuiScreenHud::SetParTime(int)",
        ),
    ),
    (
        "SetCollectibles__13CGuiScreenHudii",
        Ok(
            "CGuiScreenHud::SetCollectibles(int, int)",
        ),
    ),
    (
        "SetRacePosition__13CGuiScreenHudii",
        Ok(
            "CGuiScreenHud::SetRacePosition(int, int)",
        ),
    ),
    (
        "SetLap__13CGuiScreenHudii",
        Ok(
            "CGuiScreenHud::SetLap(int, int)",
        ),
    ),
    (
        "SetDamageMeter__13CGuiScreenHudf",
        Ok(
            "CGuiScreenHud::SetDamageMeter(float)",
        ),
    ),
    (
        "SetProximityMeter__13CGuiScreenHudf",
        Ok(
            "CGuiScreenHud::SetProximityMeter(float)",
        ),
    ),
    (
        "SetHitAndRunMeter__13CGuiScreenHudf",
        Ok(
            "CGuiScreenHud::SetHitAndRunMeter(float)",
        ),
    ),
    (
        "DisplayMessage__13CGuiScreenHudbi",
        Ok(
            "CGuiScreenHud::DisplayMessage(bool, int)",
        ),
    ),
    (
        "HandleEvent__13CGuiScreenHud9EventEnumPv",
        Ok(
            "CGuiScreenHud::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "SetNumCoinsDisplay__13CGuiScreenHudPQ27Scrooby6Sprite",
        Ok(
            "CGuiScreenHud::SetNumCoinsDisplay(Scrooby::Sprite *)",
        ),
    ),
    (
        "UpdateNumCoinsDisplay__13CGuiScreenHudib",
        Ok(
            "CGuiScreenHud::UpdateNumCoinsDisplay(int, bool)",
        ),
    ),
    (
        "InitIntro__13CGuiScreenHud",
        Ok(
            "CGuiScreenHud::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__13CGuiScreenHud",
        Ok(
            "CGuiScreenHud::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__13CGuiScreenHud",
        Ok(
            "CGuiScreenHud::InitOutro(void)",
        ),
    ),
    (
        "UpdateOverlays__13CGuiScreenHudUi",
        Ok(
            "CGuiScreenHud::UpdateOverlays(unsigned int)",
        ),
    ),
    (
        "UpdateEventHandlers__13CGuiScreenHudUi",
        Ok(
            "CGuiScreenHud::UpdateEventHandlers(unsigned int)",
        ),
    ),
    (
        "UpdateTimer__13CGuiScreenHudUi",
        Ok(
            "CGuiScreenHud::UpdateTimer(unsigned int)",
        ),
    ),
    (
        "AbortFade__13CGuiScreenHud",
        Ok(
            "CGuiScreenHud::AbortFade(void)",
        ),
    ),
    (
        "__18CGuiScreenIrisWipePQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenIrisWipe::CGuiScreenIrisWipe(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_18CGuiScreenIrisWipe",
        Ok(
            "CGuiScreenIrisWipe::~CGuiScreenIrisWipe(void)",
        ),
    ),
    (
        "DoNotOpenOnNextOutro__18CGuiScreenIrisWipe",
        Ok(
            "CGuiScreenIrisWipe::DoNotOpenOnNextOutro(void)",
        ),
    ),
    (
        "HandleMessage__18CGuiScreenIrisWipe11eGuiMessageUiUi",
        Ok(
            "CGuiScreenIrisWipe::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__18CGuiScreenIrisWipe",
        Ok(
            "CGuiScreenIrisWipe::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__18CGuiScreenIrisWipe",
        Ok(
            "CGuiScreenIrisWipe::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__18CGuiScreenIrisWipe",
        Ok(
            "CGuiScreenIrisWipe::InitOutro(void)",
        ),
    ),
    (
        "IsIrisClosed__18CGuiScreenIrisWipe",
        Ok(
            "CGuiScreenIrisWipe::IsIrisClosed(void)",
        ),
    ),
    (
        "__20CGuiScreenLevelStatsPQ27Scrooby6ScreenP10CGuiEntityQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiScreenLevelStats::CGuiScreenLevelStats(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "_$_20CGuiScreenLevelStats",
        Ok(
            "CGuiScreenLevelStats::~CGuiScreenLevelStats(void)",
        ),
    ),
    (
        "HandleMessage__20CGuiScreenLevelStats11eGuiMessageUiUi",
        Ok(
            "CGuiScreenLevelStats::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__20CGuiScreenLevelStats",
        Ok(
            "CGuiScreenLevelStats::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__20CGuiScreenLevelStats",
        Ok(
            "CGuiScreenLevelStats::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__20CGuiScreenLevelStats",
        Ok(
            "CGuiScreenLevelStats::InitOutro(void)",
        ),
    ),
    (
        "UpdateLevelStats__20CGuiScreenLevelStats",
        Ok(
            "CGuiScreenLevelStats::UpdateLevelStats(void)",
        ),
    ),
    (
        "__18CGuiScreenLevelEndPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenLevelEnd::CGuiScreenLevelEnd(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_18CGuiScreenLevelEnd",
        Ok(
            "CGuiScreenLevelEnd::~CGuiScreenLevelEnd(void)",
        ),
    ),
    (
        "HandleMessage__18CGuiScreenLevelEnd11eGuiMessageUiUi",
        Ok(
            "CGuiScreenLevelEnd::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__18CGuiScreenLevelEnd",
        Ok(
            "CGuiScreenLevelEnd::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__18CGuiScreenLevelEnd",
        Ok(
            "CGuiScreenLevelEnd::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__18CGuiScreenLevelEnd",
        Ok(
            "CGuiScreenLevelEnd::InitOutro(void)",
        ),
    ),
    (
        "__19CGuiScreenLetterBoxPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenLetterBox::CGuiScreenLetterBox(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::~CGuiScreenLetterBox(void)",
        ),
    ),
    (
        "CheckIfScreenShouldBeBlank__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::CheckIfScreenShouldBeBlank(void)",
        ),
    ),
    (
        "ForceOpen__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::ForceOpen(void)",
        ),
    ),
    (
        "HandleMessage__19CGuiScreenLetterBox11eGuiMessageUiUi",
        Ok(
            "CGuiScreenLetterBox::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "HandleEvent__19CGuiScreenLetterBox9EventEnumPv",
        Ok(
            "CGuiScreenLetterBox::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "InitIntro__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::InitOutro(void)",
        ),
    ),
    (
        "SurpressSkipButton__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::SurpressSkipButton(void)",
        ),
    ),
    (
        "UnSurpressSkipButton__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::UnSurpressSkipButton(void)",
        ),
    ),
    (
        "OnAccept__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::OnAccept(void)",
        ),
    ),
    (
        "OnCancel__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::OnCancel(void)",
        ),
    ),
    (
        "OnSkip__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::OnSkip(void)",
        ),
    ),
    (
        "SetIntroFromClosed__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::SetIntroFromClosed(void)",
        ),
    ),
    (
        "SetIntroFromOpen__19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox::SetIntroFromOpen(void)",
        ),
    ),
    (
        "__21CGuiScreenMissionBasePQ27Scrooby6ScreenP10CGuiEntityQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiScreenMissionBase::CGuiScreenMissionBase(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "_$_21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::~CGuiScreenMissionBase(void)",
        ),
    ),
    (
        "ClearBitmap__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::ClearBitmap(void)",
        ),
    ),
    (
        "GetAbortBitmap__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::GetAbortBitmap(void)",
        ),
    ),
    (
        "GetBitmapName__21CGuiScreenMissionBasePc",
        Ok(
            "CGuiScreenMissionBase::GetBitmapName(char *)",
        ),
    ),
    (
        "GetFlag__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::GetFlag(void)",
        ),
    ),
    (
        "GetLoadCompletedGroup__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::GetLoadCompletedGroup(void)",
        ),
    ),
    (
        "GetMissionInfoText__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::GetMissionInfoText(void)",
        ),
    ),
    (
        "GetMissionStartBitmap__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::GetMissionStartBitmap(void)",
        ),
    ),
    (
        "GetTitleText__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::GetTitleText(void)",
        ),
    ),
    (
        "GetWatcherName__C21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::GetWatcherName(void) const",
        ),
    ),
    (
        "HandleMessage__21CGuiScreenMissionBase11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMissionBase::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::InitIntro(void)",
        ),
    ),
    (
        "InitIntroWagerMission__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::InitIntroWagerMission(void)",
        ),
    ),
    (
        "InitOutro__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::InitOutro(void)",
        ),
    ),
    (
        "InitRunning__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::InitRunning(void)",
        ),
    ),
    (
        "IsCurrentBitmap__21CGuiScreenMissionBasePCc",
        Ok(
            "CGuiScreenMissionBase::IsCurrentBitmap(char const *)",
        ),
    ),
    (
        "OutroDone__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::OutroDone(void)",
        ),
    ),
    (
        "RemoveAnimatedBitmap__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::RemoveAnimatedBitmap(void)",
        ),
    ),
    (
        "ReplaceBitmap__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::ReplaceBitmap(void)",
        ),
    ),
    (
        "SetBitmapName__21CGuiScreenMissionBasePCc",
        Ok(
            "CGuiScreenMissionBase::SetBitmapName(char const *)",
        ),
    ),
    (
        "SetPlayAnimatedCamera__21CGuiScreenMissionBaseb",
        Ok(
            "CGuiScreenMissionBase::SetPlayAnimatedCamera(bool)",
        ),
    ),
    (
        "UnloadBitmap__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::UnloadBitmap(void)",
        ),
    ),
    (
        "UpdateAnimatedBitmap__21CGuiScreenMissionBasef",
        Ok(
            "CGuiScreenMissionBase::UpdateAnimatedBitmap(float)",
        ),
    ),
    (
        "UpdateGamblingInfo__21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase::UpdateGamblingInfo(void)",
        ),
    ),
    (
        "__21CGuiScreenMissionLoadPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMissionLoad::CGuiScreenMissionLoad(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad::~CGuiScreenMissionLoad(void)",
        ),
    ),
    (
        "AddListeners__21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad::AddListeners(void)",
        ),
    ),
    (
        "ExtractNormalPositions__21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad::ExtractNormalPositions(void)",
        ),
    ),
    (
        "HandleEvent__21CGuiScreenMissionLoad9EventEnumPv",
        Ok(
            "CGuiScreenMissionLoad::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "HandleMessage__21CGuiScreenMissionLoad11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMissionLoad::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitializePermanentVariables__21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad::InitializePermanentVariables(void)",
        ),
    ),
    (
        "InitIntro__21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad::InitIntro(void)",
        ),
    ),
    (
        "InitOutro__21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad::InitOutro(void)",
        ),
    ),
    (
        "InitPositionsNormal__21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad::InitPositionsNormal(void)",
        ),
    ),
    (
        "InitPositionsWager__21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad::InitPositionsWager(void)",
        ),
    ),
    (
        "RemoveListeners__21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad::RemoveListeners(void)",
        ),
    ),
    (
        "__21CGuiScreenMissionOverPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMissionOver::CGuiScreenMissionOver(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_21CGuiScreenMissionOver",
        Ok(
            "CGuiScreenMissionOver::~CGuiScreenMissionOver(void)",
        ),
    ),
    (
        "HandleMessage__21CGuiScreenMissionOver11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMissionOver::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "HandleEvent__21CGuiScreenMissionOver9EventEnumPv",
        Ok(
            "CGuiScreenMissionOver::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "InitIntro__21CGuiScreenMissionOver",
        Ok(
            "CGuiScreenMissionOver::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__21CGuiScreenMissionOver",
        Ok(
            "CGuiScreenMissionOver::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__21CGuiScreenMissionOver",
        Ok(
            "CGuiScreenMissionOver::InitOutro(void)",
        ),
    ),
    (
        "SetFailureMessage__21CGuiScreenMissionOverQ216MissionCondition17ConditionTypeEnum",
        Ok(
            "CGuiScreenMissionOver::SetFailureMessage(MissionCondition::ConditionTypeEnum)",
        ),
    ),
    (
        "__24CGuiScreenMissionSuccessPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMissionSuccess::CGuiScreenMissionSuccess(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "HandleMessage__24CGuiScreenMissionSuccess11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMissionSuccess::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__24CGuiScreenMissionSuccess",
        Ok(
            "CGuiScreenMissionSuccess::InitIntro(void)",
        ),
    ),
    (
        "OutroDone__24CGuiScreenMissionSuccess",
        Ok(
            "CGuiScreenMissionSuccess::OutroDone(void)",
        ),
    ),
    (
        "__18CGuiScreenMultiHudPQ27Scrooby6ScreenP10CGuiEntityQ210CGuiWindow12eGuiWindowIDi",
        Ok(
            "CGuiScreenMultiHud::CGuiScreenMultiHud(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID, int)",
        ),
    ),
    (
        "_$_18CGuiScreenMultiHud",
        Ok(
            "CGuiScreenMultiHud::~CGuiScreenMultiHud(void)",
        ),
    ),
    (
        "HandleMessage__18CGuiScreenMultiHud11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMultiHud::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetHudMap__C18CGuiScreenMultiHudUi",
        Ok(
            "CGuiScreenMultiHud::GetHudMap(unsigned int) const",
        ),
    ),
    (
        "InitIntro__18CGuiScreenMultiHud",
        Ok(
            "CGuiScreenMultiHud::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__18CGuiScreenMultiHud",
        Ok(
            "CGuiScreenMultiHud::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__18CGuiScreenMultiHud",
        Ok(
            "CGuiScreenMultiHud::InitOutro(void)",
        ),
    ),
    (
        "RetrieveElements__18CGuiScreenMultiHudPQ27Scrooby4Page",
        Ok(
            "CGuiScreenMultiHud::RetrieveElements(Scrooby::Page *)",
        ),
    ),
    (
        "UpdateElements__18CGuiScreenMultiHudUi",
        Ok(
            "CGuiScreenMultiHud::UpdateElements(unsigned int)",
        ),
    ),
    (
        "TutorialBitmapHide__18CGuiScreenMultiHud",
        Ok(
            "CGuiScreenMultiHud::TutorialBitmapHide(void)",
        ),
    ),
    (
        "UpdateTutorialMode__18CGuiScreenMultiHudf",
        Ok(
            "CGuiScreenMultiHud::UpdateTutorialMode(float)",
        ),
    ),
    (
        "ShowLetterBox__18CGuiScreenMultiHud",
        Ok(
            "CGuiScreenMultiHud::ShowLetterBox(void)",
        ),
    ),
    (
        "__8ResetCar",
        Ok(
            "ResetCar::ResetCar(void)",
        ),
    ),
    (
        "Activate__8ResetCar",
        Ok(
            "ResetCar::Activate(void)",
        ),
    ),
    (
        "SetVehicle__8ResetCarP7Vehicle",
        Ok(
            "ResetCar::SetVehicle(Vehicle *)",
        ),
    ),
    (
        "__15CGuiScreenPausePQ27Scrooby6ScreenP10CGuiEntityQ210CGuiWindow12eGuiWindowID",
        Ok(
            "CGuiScreenPause::CGuiScreenPause(Scrooby::Screen *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "_$_15CGuiScreenPause",
        Ok(
            "CGuiScreenPause::~CGuiScreenPause(void)",
        ),
    ),
    (
        "HandleMessage__15CGuiScreenPause11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPause::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__15CGuiScreenPause",
        Ok(
            "CGuiScreenPause::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__15CGuiScreenPause",
        Ok(
            "CGuiScreenPause::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__15CGuiScreenPause",
        Ok(
            "CGuiScreenPause::InitOutro(void)",
        ),
    ),
    (
        "HandleResumeGame__15CGuiScreenPauseUiUi",
        Ok(
            "CGuiScreenPause::HandleResumeGame(unsigned int, unsigned int)",
        ),
    ),
    (
        "HandleQuitGame__15CGuiScreenPause",
        Ok(
            "CGuiScreenPause::HandleQuitGame(void)",
        ),
    ),
    (
        "__22CGuiScreenPauseMissionPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenPauseMission::CGuiScreenPauseMission(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_22CGuiScreenPauseMission",
        Ok(
            "CGuiScreenPauseMission::~CGuiScreenPauseMission(void)",
        ),
    ),
    (
        "HandleMessage__22CGuiScreenPauseMission11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPauseMission::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__22CGuiScreenPauseMission",
        Ok(
            "CGuiScreenPauseMission::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__22CGuiScreenPauseMission",
        Ok(
            "CGuiScreenPauseMission::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__22CGuiScreenPauseMission",
        Ok(
            "CGuiScreenPauseMission::InitOutro(void)",
        ),
    ),
    (
        "__22CGuiScreenPauseOptionsPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenPauseOptions::CGuiScreenPauseOptions(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_22CGuiScreenPauseOptions",
        Ok(
            "CGuiScreenPauseOptions::~CGuiScreenPauseOptions(void)",
        ),
    ),
    (
        "HandleMessage__22CGuiScreenPauseOptions11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPauseOptions::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__22CGuiScreenPauseOptions",
        Ok(
            "CGuiScreenPauseOptions::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__22CGuiScreenPauseOptions",
        Ok(
            "CGuiScreenPauseOptions::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__22CGuiScreenPauseOptions",
        Ok(
            "CGuiScreenPauseOptions::InitOutro(void)",
        ),
    ),
    (
        "__25CGuiScreenPauseControllerPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenPauseController::CGuiScreenPauseController(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_25CGuiScreenPauseController",
        Ok(
            "CGuiScreenPauseController::~CGuiScreenPauseController(void)",
        ),
    ),
    (
        "HandleMessage__25CGuiScreenPauseController11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPauseController::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__25CGuiScreenPauseController",
        Ok(
            "CGuiScreenPauseController::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__25CGuiScreenPauseController",
        Ok(
            "CGuiScreenPauseController::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__25CGuiScreenPauseController",
        Ok(
            "CGuiScreenPauseController::InitOutro(void)",
        ),
    ),
    (
        "__20CGuiScreenPauseSoundPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenPauseSound::CGuiScreenPauseSound(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_20CGuiScreenPauseSound",
        Ok(
            "CGuiScreenPauseSound::~CGuiScreenPauseSound(void)",
        ),
    ),
    (
        "HandleMessage__20CGuiScreenPauseSound11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPauseSound::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__20CGuiScreenPauseSound",
        Ok(
            "CGuiScreenPauseSound::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__20CGuiScreenPauseSound",
        Ok(
            "CGuiScreenPauseSound::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__20CGuiScreenPauseSound",
        Ok(
            "CGuiScreenPauseSound::InitOutro(void)",
        ),
    ),
    (
        "__23CGuiScreenPauseSettingsPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenPauseSettings::CGuiScreenPauseSettings(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_23CGuiScreenPauseSettings",
        Ok(
            "CGuiScreenPauseSettings::~CGuiScreenPauseSettings(void)",
        ),
    ),
    (
        "HandleMessage__23CGuiScreenPauseSettings11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPauseSettings::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnCheatEntered__23CGuiScreenPauseSettings8eCheatIDb",
        Ok(
            "CGuiScreenPauseSettings::OnCheatEntered(eCheatID, bool)",
        ),
    ),
    (
        "InitIntro__23CGuiScreenPauseSettings",
        Ok(
            "CGuiScreenPauseSettings::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__23CGuiScreenPauseSettings",
        Ok(
            "CGuiScreenPauseSettings::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__23CGuiScreenPauseSettings",
        Ok(
            "CGuiScreenPauseSettings::InitOutro(void)",
        ),
    ),
    (
        "UpdateCameraSelections__23CGuiScreenPauseSettings",
        Ok(
            "CGuiScreenPauseSettings::UpdateCameraSelections(void)",
        ),
    ),
    (
        "__21CGuiScreenPauseSundayPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenPauseSunday::CGuiScreenPauseSunday(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_21CGuiScreenPauseSunday",
        Ok(
            "CGuiScreenPauseSunday::~CGuiScreenPauseSunday(void)",
        ),
    ),
    (
        "HandleMessage__21CGuiScreenPauseSunday11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPauseSunday::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__21CGuiScreenPauseSunday",
        Ok(
            "CGuiScreenPauseSunday::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__21CGuiScreenPauseSunday",
        Ok(
            "CGuiScreenPauseSunday::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__21CGuiScreenPauseSunday",
        Ok(
            "CGuiScreenPauseSunday::InitOutro(void)",
        ),
    ),
    (
        "__15PhoneBoothStarsPQ27Scrooby4PagePCc",
        Ok(
            "PhoneBoothStars::PhoneBoothStars(Scrooby::Page *, char const *)",
        ),
    ),
    (
        "SetNumStars__15PhoneBoothStarsf",
        Ok(
            "PhoneBoothStars::SetNumStars(float)",
        ),
    ),
    (
        "__17IGuiScreenRewardsPQ27Scrooby6ScreenPQ27Scrooby4PageP10CGuiEntityQ210CGuiWindow12eGuiWindowID",
        Ok(
            "IGuiScreenRewards::IGuiScreenRewards(Scrooby::Screen *, Scrooby::Page *, CGuiEntity *, CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "_$_17IGuiScreenRewards",
        Ok(
            "IGuiScreenRewards::~IGuiScreenRewards(void)",
        ),
    ),
    (
        "HandleMessage__17IGuiScreenRewards11eGuiMessageUiUi",
        Ok(
            "IGuiScreenRewards::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnProcessRequestsComplete__17IGuiScreenRewardsPv",
        Ok(
            "IGuiScreenRewards::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "InitIntro__17IGuiScreenRewards",
        Ok(
            "IGuiScreenRewards::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__17IGuiScreenRewards",
        Ok(
            "IGuiScreenRewards::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__17IGuiScreenRewards",
        Ok(
            "IGuiScreenRewards::InitOutro(void)",
        ),
    ),
    (
        "InsertPreviewObject__17IGuiScreenRewardsP13PreviewObjectiP6Rewardb",
        Ok(
            "IGuiScreenRewards::InsertPreviewObject(PreviewObject *, int, Reward *, bool)",
        ),
    ),
    (
        "OnUpdate__17IGuiScreenRewardsUi",
        Ok(
            "IGuiScreenRewards::OnUpdate(unsigned int)",
        ),
    ),
    (
        "SetLightOpening__17IGuiScreenRewardsf",
        Ok(
            "IGuiScreenRewards::SetLightOpening(float)",
        ),
    ),
    (
        "On3DModelSelectionChange__17IGuiScreenRewardsPC13PreviewObject",
        Ok(
            "IGuiScreenRewards::On3DModelSelectionChange(PreviewObject const *)",
        ),
    ),
    (
        "Load3DModel__17IGuiScreenRewardsPC13PreviewObject",
        Ok(
            "IGuiScreenRewards::Load3DModel(PreviewObject const *)",
        ),
    ),
    (
        "Unload3DModel__17IGuiScreenRewards",
        Ok(
            "IGuiScreenRewards::Unload3DModel(void)",
        ),
    ),
    (
        "SetVehicleStatsVisible__17IGuiScreenRewardsb",
        Ok(
            "IGuiScreenRewards::SetVehicleStatsVisible(bool)",
        ),
    ),
    (
        "UpdateVehicleStats__17IGuiScreenRewards",
        Ok(
            "IGuiScreenRewards::UpdateVehicleStats(void)",
        ),
    ),
    (
        "__20CGuiScreenPhoneBoothPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenPhoneBooth::CGuiScreenPhoneBooth(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth::~CGuiScreenPhoneBooth(void)",
        ),
    ),
    (
        "HandleMessage__20CGuiScreenPhoneBooth11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPhoneBooth::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth::InitOutro(void)",
        ),
    ),
    (
        "On3DModelLoaded__20CGuiScreenPhoneBoothPC13PreviewObject",
        Ok(
            "CGuiScreenPhoneBooth::On3DModelLoaded(PreviewObject const *)",
        ),
    ),
    (
        "GetCurrentPreviewObject__C20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth::GetCurrentPreviewObject(void) const",
        ),
    ),
    (
        "InitMenu__20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth::InitMenu(void)",
        ),
    ),
    (
        "OnUpdate__20CGuiScreenPhoneBoothUi",
        Ok(
            "CGuiScreenPhoneBooth::OnUpdate(unsigned int)",
        ),
    ),
    (
        "LoadSelectedReward__20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth::LoadSelectedReward(void)",
        ),
    ),
    (
        "UpdateDamagedInfo__20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth::UpdateDamagedInfo(void)",
        ),
    ),
    (
        "HandleMessageForCar__20CGuiScreenPhoneBooth11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPhoneBooth::HandleMessageForCar(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "__25CGuiScreenPurchaseRewardsPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenPurchaseRewards::CGuiScreenPurchaseRewards(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards::~CGuiScreenPurchaseRewards(void)",
        ),
    ),
    (
        "HandleMessage__25CGuiScreenPurchaseRewards11eGuiMessageUiUi",
        Ok(
            "CGuiScreenPurchaseRewards::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnProcessRequestsComplete__25CGuiScreenPurchaseRewardsPv",
        Ok(
            "CGuiScreenPurchaseRewards::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "InitIntro__25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards::InitOutro(void)",
        ),
    ),
    (
        "On3DModelLoaded__25CGuiScreenPurchaseRewardsPC13PreviewObject",
        Ok(
            "CGuiScreenPurchaseRewards::On3DModelLoaded(PreviewObject const *)",
        ),
    ),
    (
        "GetCurrentPreviewObject__C25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards::GetCurrentPreviewObject(void) const",
        ),
    ),
    (
        "InitMenu__25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards::InitMenu(void)",
        ),
    ),
    (
        "OnUpdate__25CGuiScreenPurchaseRewardsUi",
        Ok(
            "CGuiScreenPurchaseRewards::OnUpdate(unsigned int)",
        ),
    ),
    (
        "UpdateRewardPrice__25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards::UpdateRewardPrice(void)",
        ),
    ),
    (
        "PurchaseReward__25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards::PurchaseReward(void)",
        ),
    ),
    (
        "LoadSelectedReward__25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards::LoadSelectedReward(void)",
        ),
    ),
    (
        "__23CGuiScreenMissionSelectPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenMissionSelect::CGuiScreenMissionSelect(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_23CGuiScreenMissionSelect",
        Ok(
            "CGuiScreenMissionSelect::~CGuiScreenMissionSelect(void)",
        ),
    ),
    (
        "HandleMessage__23CGuiScreenMissionSelect11eGuiMessageUiUi",
        Ok(
            "CGuiScreenMissionSelect::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__23CGuiScreenMissionSelect",
        Ok(
            "CGuiScreenMissionSelect::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__23CGuiScreenMissionSelect",
        Ok(
            "CGuiScreenMissionSelect::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__23CGuiScreenMissionSelect",
        Ok(
            "CGuiScreenMissionSelect::InitOutro(void)",
        ),
    ),
    (
        "OnLevelSelectionChange__23CGuiScreenMissionSelecti",
        Ok(
            "CGuiScreenMissionSelect::OnLevelSelectionChange(int)",
        ),
    ),
    (
        "UpdateMissionStatus__23CGuiScreenMissionSelectiP13MissionRecord",
        Ok(
            "CGuiScreenMissionSelect::UpdateMissionStatus(int, MissionRecord *)",
        ),
    ),
    (
        "__18CGuiScreenSaveGamePQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenSaveGame::CGuiScreenSaveGame(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_18CGuiScreenSaveGame",
        Ok(
            "CGuiScreenSaveGame::~CGuiScreenSaveGame(void)",
        ),
    ),
    (
        "HandleMessage__18CGuiScreenSaveGame11eGuiMessageUiUi",
        Ok(
            "CGuiScreenSaveGame::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "OnSaveGameComplete__18CGuiScreenSaveGame12radFileError",
        Ok(
            "CGuiScreenSaveGame::OnSaveGameComplete(radFileError)",
        ),
    ),
    (
        "HandleErrorResponse__18CGuiScreenSaveGameQ214CGuiMenuPrompt15ePromptResponse",
        Ok(
            "CGuiScreenSaveGame::HandleErrorResponse(CGuiMenuPrompt::ePromptResponse)",
        ),
    ),
    (
        "InitIntro__18CGuiScreenSaveGame",
        Ok(
            "CGuiScreenSaveGame::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__18CGuiScreenSaveGame",
        Ok(
            "CGuiScreenSaveGame::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__18CGuiScreenSaveGame",
        Ok(
            "CGuiScreenSaveGame::InitOutro(void)",
        ),
    ),
    (
        "GotoMemoryCardScreen__18CGuiScreenSaveGameb",
        Ok(
            "CGuiScreenSaveGame::GotoMemoryCardScreen(bool)",
        ),
    ),
    (
        "SaveGame__18CGuiScreenSaveGame",
        Ok(
            "CGuiScreenSaveGame::SaveGame(void)",
        ),
    ),
    (
        "__19CGuiScreenViewCardsPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenViewCards::CGuiScreenViewCards(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_19CGuiScreenViewCards",
        Ok(
            "CGuiScreenViewCards::~CGuiScreenViewCards(void)",
        ),
    ),
    (
        "HandleMessage__19CGuiScreenViewCards11eGuiMessageUiUi",
        Ok(
            "CGuiScreenViewCards::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__19CGuiScreenViewCards",
        Ok(
            "CGuiScreenViewCards::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__19CGuiScreenViewCards",
        Ok(
            "CGuiScreenViewCards::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__19CGuiScreenViewCards",
        Ok(
            "CGuiScreenViewCards::InitOutro(void)",
        ),
    ),
    (
        "__18CGuiScreenTutorialPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenTutorial::CGuiScreenTutorial(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_18CGuiScreenTutorial",
        Ok(
            "CGuiScreenTutorial::~CGuiScreenTutorial(void)",
        ),
    ),
    (
        "HandleMessage__18CGuiScreenTutorial11eGuiMessageUiUi",
        Ok(
            "CGuiScreenTutorial::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__18CGuiScreenTutorial",
        Ok(
            "CGuiScreenTutorial::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__18CGuiScreenTutorial",
        Ok(
            "CGuiScreenTutorial::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__18CGuiScreenTutorial",
        Ok(
            "CGuiScreenTutorial::InitOutro(void)",
        ),
    ),
    (
        "__24CGuiScreenCreditsPostFMVPQ27Scrooby6ScreenP10CGuiEntity",
        Ok(
            "CGuiScreenCreditsPostFMV::CGuiScreenCreditsPostFMV(Scrooby::Screen *, CGuiEntity *)",
        ),
    ),
    (
        "_$_24CGuiScreenCreditsPostFMV",
        Ok(
            "CGuiScreenCreditsPostFMV::~CGuiScreenCreditsPostFMV(void)",
        ),
    ),
    (
        "HandleMessage__24CGuiScreenCreditsPostFMV11eGuiMessageUiUi",
        Ok(
            "CGuiScreenCreditsPostFMV::HandleMessage(eGuiMessage, unsigned int, unsigned int)",
        ),
    ),
    (
        "InitIntro__24CGuiScreenCreditsPostFMV",
        Ok(
            "CGuiScreenCreditsPostFMV::InitIntro(void)",
        ),
    ),
    (
        "InitRunning__24CGuiScreenCreditsPostFMV",
        Ok(
            "CGuiScreenCreditsPostFMV::InitRunning(void)",
        ),
    ),
    (
        "InitOutro__24CGuiScreenCreditsPostFMV",
        Ok(
            "CGuiScreenCreditsPostFMV::InitOutro(void)",
        ),
    ),
    (
        "OnScrollingDone__24CGuiScreenCreditsPostFMV",
        Ok(
            "CGuiScreenCreditsPostFMV::OnScrollingDone(void)",
        ),
    ),
    (
        "__Q26GuiSFX9Junction3",
        Ok(
            "GuiSFX::Junction3::Junction3(void)",
        ),
    ),
    (
        "__tf27IMemoryCardInfoLoadCallback",
        Ok(
            "IMemoryCardInfoLoadCallback type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX19AbortCurrentMission",
        Ok(
            "GuiSFX::AbortCurrentMission type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX8OpenIris",
        Ok(
            "GuiSFX::OpenIris type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX21RestartCurrentMission",
        Ok(
            "GuiSFX::RestartCurrentMission type_info function",
        ),
    ),
    (
        "__tf17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame type_info function",
        ),
    ),
    (
        "__tf18CGuiScreenMultiHud",
        Ok(
            "CGuiScreenMultiHud type_info function",
        ),
    ),
    (
        "__tf12MessageQueue",
        Ok(
            "MessageQueue type_info function",
        ),
    ),
    (
        "__tf13CGuiScreenHud",
        Ok(
            "CGuiScreenHud type_info function",
        ),
    ),
    (
        "__tf15CGuiScreenPause",
        Ok(
            "CGuiScreenPause type_info function",
        ),
    ),
    (
        "__tf21CGuiScreenPauseSunday",
        Ok(
            "CGuiScreenPauseSunday type_info function",
        ),
    ),
    (
        "__tf22CGuiScreenPauseMission",
        Ok(
            "CGuiScreenPauseMission type_info function",
        ),
    ),
    (
        "__tf23CGuiScreenMissionSelect",
        Ok(
            "CGuiScreenMissionSelect type_info function",
        ),
    ),
    (
        "__tf22CGuiScreenPauseOptions",
        Ok(
            "CGuiScreenPauseOptions type_info function",
        ),
    ),
    (
        "__tf25CGuiScreenPauseController",
        Ok(
            "CGuiScreenPauseController type_info function",
        ),
    ),
    (
        "__tf20CGuiScreenPauseSound",
        Ok(
            "CGuiScreenPauseSound type_info function",
        ),
    ),
    (
        "__tf23CGuiScreenPauseSettings",
        Ok(
            "CGuiScreenPauseSettings type_info function",
        ),
    ),
    (
        "__tf21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase type_info function",
        ),
    ),
    (
        "__tf21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad type_info function",
        ),
    ),
    (
        "__tf21CGuiScreenMissionOver",
        Ok(
            "CGuiScreenMissionOver type_info function",
        ),
    ),
    (
        "_$_24CGuiScreenMissionSuccess",
        Ok(
            "CGuiScreenMissionSuccess::~CGuiScreenMissionSuccess(void)",
        ),
    ),
    (
        "__tf24CGuiScreenMissionSuccess",
        Ok(
            "CGuiScreenMissionSuccess type_info function",
        ),
    ),
    (
        "__tf20CGuiScreenLevelStats",
        Ok(
            "CGuiScreenLevelStats type_info function",
        ),
    ),
    (
        "__tf18CGuiScreenLevelEnd",
        Ok(
            "CGuiScreenLevelEnd type_info function",
        ),
    ),
    (
        "__tf19CGuiScreenViewCards",
        Ok(
            "CGuiScreenViewCards type_info function",
        ),
    ),
    (
        "__tf19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox type_info function",
        ),
    ),
    (
        "__tf18CGuiScreenIrisWipe",
        Ok(
            "CGuiScreenIrisWipe type_info function",
        ),
    ),
    (
        "__tf17IGuiScreenRewards",
        Ok(
            "IGuiScreenRewards type_info function",
        ),
    ),
    (
        "__tf20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth type_info function",
        ),
    ),
    (
        "__tf25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards type_info function",
        ),
    ),
    (
        "__tf18CGuiScreenSaveGame",
        Ok(
            "CGuiScreenSaveGame type_info function",
        ),
    ),
    (
        "__tf18CGuiScreenTutorial",
        Ok(
            "CGuiScreenTutorial type_info function",
        ),
    ),
    (
        "__tf24CGuiScreenCreditsPostFMV",
        Ok(
            "CGuiScreenCreditsPostFMV type_info function",
        ),
    ),
    (
        "__tf8ResetCar",
        Ok(
            "ResetCar type_info function",
        ),
    ),
    (
        "__tf24CGuiScreenHasTransitions",
        Ok(
            "CGuiScreenHasTransitions type_info function",
        ),
    ),
    (
        "_$_Q26GuiSFX21UnderdampedTranslator",
        Ok(
            "GuiSFX::UnderdampedTranslator::~UnderdampedTranslator(void)",
        ),
    ),
    (
        "__27IMemoryCardInfoLoadCallback",
        Ok(
            "IMemoryCardInfoLoadCallback::IMemoryCardInfoLoadCallback(void)",
        ),
    ),
    (
        "__Q26GuiSFX19AbortCurrentMission",
        Ok(
            "GuiSFX::AbortCurrentMission::AbortCurrentMission(void)",
        ),
    ),
    (
        "__Q26GuiSFX21RestartCurrentMission",
        Ok(
            "GuiSFX::RestartCurrentMission::RestartCurrentMission(void)",
        ),
    ),
    (
        "HasMenu__15CGuiScreenPause",
        Ok(
            "CGuiScreenPause::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__23CGuiScreenMissionSelect",
        Ok(
            "CGuiScreenMissionSelect::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__22CGuiScreenPauseOptions",
        Ok(
            "CGuiScreenPauseOptions::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__23CGuiScreenPauseSettings",
        Ok(
            "CGuiScreenPauseSettings::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__21CGuiScreenMissionOver",
        Ok(
            "CGuiScreenMissionOver::HasMenu(void)",
        ),
    ),
    (
        "HasMenu__20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth::HasMenu(void)",
        ),
    ),
    (
        "__20GameDataSaveCallback",
        Ok(
            "GameDataSaveCallback::GameDataSaveCallback(void)",
        ),
    ),
    (
        "HasMenu__18CGuiScreenSaveGame",
        Ok(
            "CGuiScreenSaveGame::HasMenu(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z7tEntity",
        Ok(
            "radLoadInventory::SafeCast<tEntity>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z26tCameraAnimationController",
        Ok(
            "radLoadInventory::SafeCast<tCameraAnimationController>::SafeCast(void)",
        ),
    ),
    (
        "__tf20GameDataSaveCallback",
        Ok(
            "GameDataSaveCallback type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z7tEntity",
        Ok(
            "radLoadInventory::SafeCast<tEntity> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z26tCameraAnimationController",
        Ok(
            "radLoadInventory::SafeCast<tCameraAnimationController> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z7tEntityP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tEntity>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z26tCameraAnimationControllerP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tCameraAnimationController>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$INGAME_PROJECT_FILES",
        Ok(
            "global constructors keyed to INGAME_PROJECT_FILES",
        ),
    ),
    (
        "_GLOBAL_$D$INGAME_PROJECT_FILES",
        Ok(
            "global destructors keyed to INGAME_PROJECT_FILES",
        ),
    ),
    (
        "__15HudEventHandlerPQ27Scrooby5Group",
        Ok(
            "HudEventHandler::HudEventHandler(Scrooby::Group *)",
        ),
    ),
    (
        "_$_15HudEventHandler",
        Ok(
            "HudEventHandler::~HudEventHandler(void)",
        ),
    ),
    (
        "OnStart__15HudEventHandler",
        Ok(
            "HudEventHandler::OnStart(void)",
        ),
    ),
    (
        "OnStop__15HudEventHandler",
        Ok(
            "HudEventHandler::OnStop(void)",
        ),
    ),
    (
        "__16HudCardCollectedPQ27Scrooby4Page",
        Ok(
            "HudCardCollected::HudCardCollected(Scrooby::Page *)",
        ),
    ),
    (
        "_$_16HudCardCollected",
        Ok(
            "HudCardCollected::~HudCardCollected(void)",
        ),
    ),
    (
        "Start__16HudCardCollected",
        Ok(
            "HudCardCollected::Start(void)",
        ),
    ),
    (
        "Stop__16HudCardCollected",
        Ok(
            "HudCardCollected::Stop(void)",
        ),
    ),
    (
        "Update__16HudCardCollectedf",
        Ok(
            "HudCardCollected::Update(float)",
        ),
    ),
    (
        "SetCurrentCard__16HudCardCollectedUi",
        Ok(
            "HudCardCollected::SetCurrentCard(unsigned int)",
        ),
    ),
    (
        "SetCardCount__16HudCardCollectedUiUi",
        Ok(
            "HudCardCollected::SetCardCount(unsigned int, unsigned int)",
        ),
    ),
    (
        "__16HudCoinCollectedPQ27Scrooby4Page",
        Ok(
            "HudCoinCollected::HudCoinCollected(Scrooby::Page *)",
        ),
    ),
    (
        "_$_16HudCoinCollected",
        Ok(
            "HudCoinCollected::~HudCoinCollected(void)",
        ),
    ),
    (
        "Start__16HudCoinCollected",
        Ok(
            "HudCoinCollected::Start(void)",
        ),
    ),
    (
        "Stop__16HudCoinCollected",
        Ok(
            "HudCoinCollected::Stop(void)",
        ),
    ),
    (
        "Update__16HudCoinCollectedf",
        Ok(
            "HudCoinCollected::Update(float)",
        ),
    ),
    (
        "SetItemCount__16HudCoinCollectedUiUi",
        Ok(
            "HudCoinCollected::SetItemCount(unsigned int, unsigned int)",
        ),
    ),
    (
        "__18HudMissionProgressPQ27Scrooby4Page",
        Ok(
            "HudMissionProgress::HudMissionProgress(Scrooby::Page *)",
        ),
    ),
    (
        "_$_18HudMissionProgress",
        Ok(
            "HudMissionProgress::~HudMissionProgress(void)",
        ),
    ),
    (
        "Start__18HudMissionProgress",
        Ok(
            "HudMissionProgress::Start(void)",
        ),
    ),
    (
        "Stop__18HudMissionProgress",
        Ok(
            "HudMissionProgress::Stop(void)",
        ),
    ),
    (
        "Update__18HudMissionProgressf",
        Ok(
            "HudMissionProgress::Update(float)",
        ),
    ),
    (
        "__19HudMissionObjectivePQ27Scrooby4Page",
        Ok(
            "HudMissionObjective::HudMissionObjective(Scrooby::Page *)",
        ),
    ),
    (
        "_$_19HudMissionObjective",
        Ok(
            "HudMissionObjective::~HudMissionObjective(void)",
        ),
    ),
    (
        "Start__19HudMissionObjective",
        Ok(
            "HudMissionObjective::Start(void)",
        ),
    ),
    (
        "Stop__19HudMissionObjective",
        Ok(
            "HudMissionObjective::Stop(void)",
        ),
    ),
    (
        "Update__19HudMissionObjectivef",
        Ok(
            "HudMissionObjective::Update(float)",
        ),
    ),
    (
        "UpdateIcon__19HudMissionObjective",
        Ok(
            "HudMissionObjective::UpdateIcon(void)",
        ),
    ),
    (
        "__12HudCountDownPQ27Scrooby4Page",
        Ok(
            "HudCountDown::HudCountDown(Scrooby::Page *)",
        ),
    ),
    (
        "_$_12HudCountDown",
        Ok(
            "HudCountDown::~HudCountDown(void)",
        ),
    ),
    (
        "OnStart__12HudCountDown",
        Ok(
            "HudCountDown::OnStart(void)",
        ),
    ),
    (
        "QueueDisableInput__12HudCountDown",
        Ok(
            "HudCountDown::QueueDisableInput(void)",
        ),
    ),
    (
        "Start__12HudCountDown",
        Ok(
            "HudCountDown::Start(void)",
        ),
    ),
    (
        "Stop__12HudCountDown",
        Ok(
            "HudCountDown::Stop(void)",
        ),
    ),
    (
        "Update__12HudCountDownf",
        Ok(
            "HudCountDown::Update(float)",
        ),
    ),
    (
        "GetNextSequenceUnit__12HudCountDown",
        Ok(
            "HudCountDown::GetNextSequenceUnit(void)",
        ),
    ),
    (
        "__10HudHitNRunPQ27Scrooby4Page",
        Ok(
            "HudHitNRun::HudHitNRun(Scrooby::Page *)",
        ),
    ),
    (
        "_$_10HudHitNRun",
        Ok(
            "HudHitNRun::~HudHitNRun(void)",
        ),
    ),
    (
        "Start__10HudHitNRun",
        Ok(
            "HudHitNRun::Start(void)",
        ),
    ),
    (
        "Stop__10HudHitNRun",
        Ok(
            "HudHitNRun::Stop(void)",
        ),
    ),
    (
        "Update__10HudHitNRunf",
        Ok(
            "HudHitNRun::Update(float)",
        ),
    ),
    (
        "SetMessage__10HudHitNRunQ210HudHitNRun8eMessage",
        Ok(
            "HudHitNRun::SetMessage(HudHitNRun::eMessage)",
        ),
    ),
    (
        "__16HudWaspDestroyedPQ27Scrooby4Page",
        Ok(
            "HudWaspDestroyed::HudWaspDestroyed(Scrooby::Page *)",
        ),
    ),
    (
        "_$_16HudWaspDestroyed",
        Ok(
            "HudWaspDestroyed::~HudWaspDestroyed(void)",
        ),
    ),
    (
        "Start__16HudWaspDestroyed",
        Ok(
            "HudWaspDestroyed::Start(void)",
        ),
    ),
    (
        "Stop__16HudWaspDestroyed",
        Ok(
            "HudWaspDestroyed::Stop(void)",
        ),
    ),
    (
        "Update__16HudWaspDestroyedf",
        Ok(
            "HudWaspDestroyed::Update(float)",
        ),
    ),
    (
        "__14HudItemDroppedPQ27Scrooby4Page",
        Ok(
            "HudItemDropped::HudItemDropped(Scrooby::Page *)",
        ),
    ),
    (
        "_$_14HudItemDropped",
        Ok(
            "HudItemDropped::~HudItemDropped(void)",
        ),
    ),
    (
        "Start__14HudItemDropped",
        Ok(
            "HudItemDropped::Start(void)",
        ),
    ),
    (
        "Stop__14HudItemDropped",
        Ok(
            "HudItemDropped::Stop(void)",
        ),
    ),
    (
        "Update__14HudItemDroppedf",
        Ok(
            "HudItemDropped::Update(float)",
        ),
    ),
    (
        "__tf15HudEventHandler",
        Ok(
            "HudEventHandler type_info function",
        ),
    ),
    (
        "__tf16HudCardCollected",
        Ok(
            "HudCardCollected type_info function",
        ),
    ),
    (
        "__tf16HudCoinCollected",
        Ok(
            "HudCoinCollected type_info function",
        ),
    ),
    (
        "__tf18HudMissionProgress",
        Ok(
            "HudMissionProgress type_info function",
        ),
    ),
    (
        "__tf19HudMissionObjective",
        Ok(
            "HudMissionObjective type_info function",
        ),
    ),
    (
        "__tf12HudCountDown",
        Ok(
            "HudCountDown type_info function",
        ),
    ),
    (
        "__tf10HudHitNRun",
        Ok(
            "HudHitNRun type_info function",
        ),
    ),
    (
        "__tf16HudWaspDestroyed",
        Ok(
            "HudWaspDestroyed type_info function",
        ),
    ),
    (
        "__tf14HudItemDropped",
        Ok(
            "HudItemDropped type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__15HudEventHandlerPQ27Scrooby5Group",
        Ok(
            "global constructors keyed to HudEventHandler::HudEventHandler(Scrooby::Group *)",
        ),
    ),
    (
        "__9HudMapCami",
        Ok(
            "HudMapCam::HudMapCam(int)",
        ),
    ),
    (
        "_$_9HudMapCam",
        Ok(
            "HudMapCam::~HudMapCam(void)",
        ),
    ),
    (
        "Update__9HudMapCamUi",
        Ok(
            "HudMapCam::Update(unsigned int)",
        ),
    ),
    (
        "SetHeight__9HudMapCamf",
        Ok(
            "HudMapCam::SetHeight(float)",
        ),
    ),
    (
        "ApplyAICarIconColour__10HudMapIcon",
        Ok(
            "HudMapIcon::ApplyAICarIconColour(void)",
        ),
    ),
    (
        "__7CHudMapPQ27Scrooby4PageiPCc",
        Ok(
            "CHudMap::CHudMap(Scrooby::Page *, int, char const *)",
        ),
    ),
    (
        "_$_7CHudMap",
        Ok(
            "CHudMap::~CHudMap(void)",
        ),
    ),
    (
        "SetCameraTarget__7CHudMapP15ISuperCamTarget",
        Ok(
            "CHudMap::SetCameraTarget(ISuperCamTarget *)",
        ),
    ),
    (
        "Update__7CHudMapUi",
        Ok(
            "CHudMap::Update(unsigned int)",
        ),
    ),
    (
        "AddIconToInventory__7CHudMapQ210HudMapIcon9eIconTypePQ27Scrooby6Sprite",
        Ok(
            "CHudMap::AddIconToInventory(HudMapIcon::eIconType, Scrooby::Sprite *)",
        ),
    ),
    (
        "RemoveIconFromInventory__7CHudMapQ210HudMapIcon9eIconType",
        Ok(
            "CHudMap::RemoveIconFromInventory(HudMapIcon::eIconType)",
        ),
    ),
    (
        "RegisterIcon__7CHudMapQ210HudMapIcon9eIconTypeGQ218RadicalMathLibrary6VectorP18IHudMapIconLocatorb",
        Ok(
            "CHudMap::RegisterIcon(HudMapIcon::eIconType, RadicalMathLibrary::Vector, IHudMapIconLocator *, bool)",
        ),
    ),
    (
        "UnregisterIcon__7CHudMapi",
        Ok(
            "CHudMap::UnregisterIcon(int)",
        ),
    ),
    (
        "SetFocalPointIcon__7CHudMapi",
        Ok(
            "CHudMap::SetFocalPointIcon(int)",
        ),
    ),
    (
        "Reset__7CHudMap",
        Ok(
            "CHudMap::Reset(void)",
        ),
    ),
    (
        "SetVisible__7CHudMapb",
        Ok(
            "CHudMap::SetVisible(bool)",
        ),
    ),
    (
        "RestoreAllRegisteredIcons__7CHudMap",
        Ok(
            "CHudMap::RestoreAllRegisteredIcons(void)",
        ),
    ),
    (
        "ClearAllRegisteredIcons__7CHudMap",
        Ok(
            "CHudMap::ClearAllRegisteredIcons(void)",
        ),
    ),
    (
        "CalculateDistanceBetweenPoints__7CHudMapRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "CHudMap::CalculateDistanceBetweenPoints(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "UpdateIconHeading__7CHudMapPQ27Scrooby6SpritePQ218RadicalMathLibrary6Vector",
        Ok(
            "CHudMap::UpdateIconHeading(Scrooby::Sprite *, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "CalculateCameraHeight__C7CHudMapRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "CHudMap::CalculateCameraHeight(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "CalculateCameraHeight__C7CHudMapf",
        Ok(
            "CHudMap::CalculateCameraHeight(float) const",
        ),
    ),
    (
        "CalculatRadarConeAngle__C7CHudMapRQ218RadicalMathLibrary6Vector",
        Ok(
            "CHudMap::CalculatRadarConeAngle(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "DetermineOnRoadLocation__7CHudMapRQ218RadicalMathLibrary6VectorT1f",
        Ok(
            "CHudMap::DetermineOnRoadLocation(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, float)",
        ),
    ),
    (
        "__6SliderQ26Slider11eSliderType",
        Ok(
            "Slider::Slider(Slider::eSliderType)",
        ),
    ),
    (
        "SetScroobyPolygon__6SliderPQ27Scrooby7PolygonPQ27Scrooby6Sprite",
        Ok(
            "Slider::SetScroobyPolygon(Scrooby::Polygon *, Scrooby::Sprite *)",
        ),
    ),
    (
        "SetValue__6Sliderf",
        Ok(
            "Slider::SetValue(float)",
        ),
    ),
    (
        "__11ImageSliderQ26Slider11eSliderType",
        Ok(
            "ImageSlider::ImageSlider(Slider::eSliderType)",
        ),
    ),
    (
        "SetScroobyImage__11ImageSliderPQ27Scrooby6Sprite",
        Ok(
            "ImageSlider::SetScroobyImage(Scrooby::Sprite *)",
        ),
    ),
    (
        "SetValue__11ImageSliderfb",
        Ok(
            "ImageSlider::SetValue(float, bool)",
        ),
    ),
    (
        "Flash__6GuiSFXPQ27Scrooby15BoundedDrawableffiff",
        Ok(
            "GuiSFX::Flash(Scrooby::BoundedDrawable *, float, float, int, float, float)",
        ),
    ),
    (
        "Blink__6GuiSFXPQ27Scrooby8Drawableffb",
        Ok(
            "GuiSFX::Blink(Scrooby::Drawable *, float, float, bool)",
        ),
    ),
    (
        "Pulse__6GuiSFXfffff",
        Ok(
            "GuiSFX::Pulse(float, float, float, float, float)",
        ),
    ),
    (
        "ModulateColour__6GuiSFXP10pddiColourffG10pddiColourT4f",
        Ok(
            "GuiSFX::ModulateColour(pddiColour *, float, float, pddiColour, pddiColour, float)",
        ),
    ),
    (
        "Spiral__6GuiSFXPQ27Scrooby15BoundedDrawablefffffb",
        Ok(
            "GuiSFX::Spiral(Scrooby::BoundedDrawable *, float, float, float, float, float, bool)",
        ),
    ),
    (
        "SlideX__6GuiSFXPQ27Scrooby8Drawableffbii",
        Ok(
            "GuiSFX::SlideX(Scrooby::Drawable *, float, float, bool, int, int)",
        ),
    ),
    (
        "SlideY__6GuiSFXPQ27Scrooby8Drawableffbii",
        Ok(
            "GuiSFX::SlideY(Scrooby::Drawable *, float, float, bool, int, int)",
        ),
    ),
    (
        "Projectile__6GuiSFXPQ27Scrooby8DrawableffGQ218RadicalMathLibrary6Vectorbf",
        Ok(
            "GuiSFX::Projectile(Scrooby::Drawable *, float, float, RadicalMathLibrary::Vector, bool, float)",
        ),
    ),
    (
        "Projectile__6GuiSFXPQ27Scrooby8DrawableffGQ218RadicalMathLibrary6VectorT4bf",
        Ok(
            "GuiSFX::Projectile(Scrooby::Drawable *, float, float, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, bool, float)",
        ),
    ),
    (
        "_$_13CTeleTypeText",
        Ok(
            "CTeleTypeText::~CTeleTypeText(void)",
        ),
    ),
    (
        "__Q26GuiSFX9Chainable",
        Ok(
            "GuiSFX::Chainable::Chainable(void)",
        ),
    ),
    (
        "__Q26GuiSFX9ChainableRC5tName",
        Ok(
            "GuiSFX::Chainable::Chainable(tName const &)",
        ),
    ),
    (
        "__Q26GuiSFX10Chainable1",
        Ok(
            "GuiSFX::Chainable1::Chainable1(void)",
        ),
    ),
    (
        "__Q26GuiSFX10Chainable1RC5tName",
        Ok(
            "GuiSFX::Chainable1::Chainable1(tName const &)",
        ),
    ),
    (
        "ContinueChain__Q26GuiSFX10Chainable1",
        Ok(
            "GuiSFX::Chainable1::ContinueChain(void)",
        ),
    ),
    (
        "DeactivateChain__Q26GuiSFX10Chainable1",
        Ok(
            "GuiSFX::Chainable1::DeactivateChain(void)",
        ),
    ),
    (
        "IsChainDone__CQ26GuiSFX10Chainable1",
        Ok(
            "GuiSFX::Chainable1::IsChainDone(void) const",
        ),
    ),
    (
        "ResetChain__Q26GuiSFX10Chainable1",
        Ok(
            "GuiSFX::Chainable1::ResetChain(void)",
        ),
    ),
    (
        "SetNextTransition__Q26GuiSFX10Chainable1PQ26GuiSFX9Chainable",
        Ok(
            "GuiSFX::Chainable1::SetNextTransition(GuiSFX::Chainable *)",
        ),
    ),
    (
        "SetNextTransition__Q26GuiSFX10Chainable1RQ26GuiSFX9Chainable",
        Ok(
            "GuiSFX::Chainable1::SetNextTransition(GuiSFX::Chainable &)",
        ),
    ),
    (
        "ContinueChain__Q26GuiSFX10Chainable2",
        Ok(
            "GuiSFX::Chainable2::ContinueChain(void)",
        ),
    ),
    (
        "DeactivateChain__Q26GuiSFX10Chainable2",
        Ok(
            "GuiSFX::Chainable2::DeactivateChain(void)",
        ),
    ),
    (
        "IsChainDone__CQ26GuiSFX10Chainable2",
        Ok(
            "GuiSFX::Chainable2::IsChainDone(void) const",
        ),
    ),
    (
        "ResetChain__Q26GuiSFX10Chainable2",
        Ok(
            "GuiSFX::Chainable2::ResetChain(void)",
        ),
    ),
    (
        "__Q26GuiSFX10Chainable3",
        Ok(
            "GuiSFX::Chainable3::Chainable3(void)",
        ),
    ),
    (
        "ContinueChain__Q26GuiSFX10Chainable3",
        Ok(
            "GuiSFX::Chainable3::ContinueChain(void)",
        ),
    ),
    (
        "DeactivateChain__Q26GuiSFX10Chainable3",
        Ok(
            "GuiSFX::Chainable3::DeactivateChain(void)",
        ),
    ),
    (
        "IsChainDone__CQ26GuiSFX10Chainable3",
        Ok(
            "GuiSFX::Chainable3::IsChainDone(void) const",
        ),
    ),
    (
        "ResetChain__Q26GuiSFX10Chainable3",
        Ok(
            "GuiSFX::Chainable3::ResetChain(void)",
        ),
    ),
    (
        "SetNextTransition__Q26GuiSFX10Chainable3UiPQ26GuiSFX9Chainable",
        Ok(
            "GuiSFX::Chainable3::SetNextTransition(unsigned int, GuiSFX::Chainable *)",
        ),
    ),
    (
        "SetNextTransition__Q26GuiSFX10Chainable3UiRQ26GuiSFX9Chainable",
        Ok(
            "GuiSFX::Chainable3::SetNextTransition(unsigned int, GuiSFX::Chainable &)",
        ),
    ),
    (
        "__Q26GuiSFX11ColorChangeRC5tName",
        Ok(
            "GuiSFX::ColorChange::ColorChange(tName const &)",
        ),
    ),
    (
        "SetStartColour__Q26GuiSFX11ColorChangeG10pddiColour",
        Ok(
            "GuiSFX::ColorChange::SetStartColour(pddiColour)",
        ),
    ),
    (
        "SetEndColour__Q26GuiSFX11ColorChangeG10pddiColour",
        Ok(
            "GuiSFX::ColorChange::SetEndColour(pddiColour)",
        ),
    ),
    (
        "Update__Q26GuiSFX11ColorChangef",
        Ok(
            "GuiSFX::ColorChange::Update(float)",
        ),
    ),
    (
        "__Q26GuiSFX5Dummy",
        Ok(
            "GuiSFX::Dummy::Dummy(void)",
        ),
    ),
    (
        "__Q26GuiSFX5DummyRC5tName",
        Ok(
            "GuiSFX::Dummy::Dummy(tName const &)",
        ),
    ),
    (
        "Activate__Q26GuiSFX5Dummy",
        Ok(
            "GuiSFX::Dummy::Activate(void)",
        ),
    ),
    (
        "__Q26GuiSFX10GotoScreen",
        Ok(
            "GuiSFX::GotoScreen::GotoScreen(void)",
        ),
    ),
    (
        "Activate__Q26GuiSFX10GotoScreen",
        Ok(
            "GuiSFX::GotoScreen::Activate(void)",
        ),
    ),
    (
        "SetParam1__Q26GuiSFX10GotoScreenUi",
        Ok(
            "GuiSFX::GotoScreen::SetParam1(unsigned int)",
        ),
    ),
    (
        "SetScreen__Q26GuiSFX10GotoScreenQ210CGuiWindow12eGuiWindowID",
        Ok(
            "GuiSFX::GotoScreen::SetScreen(CGuiWindow::eGuiWindowID)",
        ),
    ),
    (
        "SetWindowOptions__Q26GuiSFX10GotoScreenUi",
        Ok(
            "GuiSFX::GotoScreen::SetWindowOptions(unsigned int)",
        ),
    ),
    (
        "ResetMultiControllerFrames__Q26GuiSFX18HasMulticontroller",
        Ok(
            "GuiSFX::HasMulticontroller::ResetMultiControllerFrames(void)",
        ),
    ),
    (
        "SetMultiController__Q26GuiSFX18HasMulticontrollerP16tMultiController",
        Ok(
            "GuiSFX::HasMulticontroller::SetMultiController(tMultiController *)",
        ),
    ),
    (
        "__Q26GuiSFX15HasTimeInterval",
        Ok(
            "GuiSFX::HasTimeInterval::HasTimeInterval(void)",
        ),
    ),
    (
        "SetTimeInterval__Q26GuiSFX15HasTimeIntervalf",
        Ok(
            "GuiSFX::HasTimeInterval::SetTimeInterval(float)",
        ),
    ),
    (
        "__Q26GuiSFX4Hide",
        Ok(
            "GuiSFX::Hide::Hide(void)",
        ),
    ),
    (
        "__Q26GuiSFX4HideRC5tName",
        Ok(
            "GuiSFX::Hide::Hide(tName const &)",
        ),
    ),
    (
        "Activate__Q26GuiSFX4Hide",
        Ok(
            "GuiSFX::Hide::Activate(void)",
        ),
    ),
    (
        "SetDrawable__Q26GuiSFX11ImageCyclerPQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::ImageCycler::SetDrawable(Scrooby::Drawable *)",
        ),
    ),
    (
        "SetDrawable__Q26GuiSFX11ImageCyclerRQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::ImageCycler::SetDrawable(Scrooby::Drawable &)",
        ),
    ),
    (
        "__Q26GuiSFX16InputStateChange",
        Ok(
            "GuiSFX::InputStateChange::InputStateChange(void)",
        ),
    ),
    (
        "Activate__Q26GuiSFX16InputStateChange",
        Ok(
            "GuiSFX::InputStateChange::Activate(void)",
        ),
    ),
    (
        "SetState__Q26GuiSFX16InputStateChangeQ25Input11ActiveState",
        Ok(
            "GuiSFX::InputStateChange::SetState(Input::ActiveState)",
        ),
    ),
    (
        "Activate__Q26GuiSFX13IrisWipeClose",
        Ok(
            "GuiSFX::IrisWipeClose::Activate(void)",
        ),
    ),
    (
        "Deactivate__Q26GuiSFX13IrisWipeClose",
        Ok(
            "GuiSFX::IrisWipeClose::Deactivate(void)",
        ),
    ),
    (
        "Update__Q26GuiSFX13IrisWipeClosef",
        Ok(
            "GuiSFX::IrisWipeClose::Update(float)",
        ),
    ),
    (
        "__Q26GuiSFX12IrisWipeOpen",
        Ok(
            "GuiSFX::IrisWipeOpen::IrisWipeOpen(void)",
        ),
    ),
    (
        "__Q26GuiSFX12IrisWipeOpenRC5tName",
        Ok(
            "GuiSFX::IrisWipeOpen::IrisWipeOpen(tName const &)",
        ),
    ),
    (
        "Activate__Q26GuiSFX12IrisWipeOpen",
        Ok(
            "GuiSFX::IrisWipeOpen::Activate(void)",
        ),
    ),
    (
        "Update__Q26GuiSFX12IrisWipeOpenf",
        Ok(
            "GuiSFX::IrisWipeOpen::Update(float)",
        ),
    ),
    (
        "Update__Q26GuiSFX11ImageCyclerf",
        Ok(
            "GuiSFX::ImageCycler::Update(float)",
        ),
    ),
    (
        "Activate__Q26GuiSFX9Junction2",
        Ok(
            "GuiSFX::Junction2::Activate(void)",
        ),
    ),
    (
        "Activate__Q26GuiSFX9Junction3",
        Ok(
            "GuiSFX::Junction3::Activate(void)",
        ),
    ),
    (
        "__Q26GuiSFX5Pause",
        Ok(
            "GuiSFX::Pause::Pause(void)",
        ),
    ),
    (
        "__Q26GuiSFX5PauseRC5tName",
        Ok(
            "GuiSFX::Pause::Pause(tName const &)",
        ),
    ),
    (
        "Update__Q26GuiSFX5Pausef",
        Ok(
            "GuiSFX::Pause::Update(float)",
        ),
    ),
    (
        "__Q26GuiSFX13PauseInFramesRC5tName",
        Ok(
            "GuiSFX::PauseInFrames::PauseInFrames(tName const &)",
        ),
    ),
    (
        "Reset__Q26GuiSFX13PauseInFrames",
        Ok(
            "GuiSFX::PauseInFrames::Reset(void)",
        ),
    ),
    (
        "SetNumberOfFrames__Q26GuiSFX13PauseInFramesUi",
        Ok(
            "GuiSFX::PauseInFrames::SetNumberOfFrames(unsigned int)",
        ),
    ),
    (
        "Update__Q26GuiSFX13PauseInFramesf",
        Ok(
            "GuiSFX::PauseInFrames::Update(float)",
        ),
    ),
    (
        "Activate__Q26GuiSFX9PauseGame",
        Ok(
            "GuiSFX::PauseGame::Activate(void)",
        ),
    ),
    (
        "__Q26GuiSFX10PulseScaleRC5tName",
        Ok(
            "GuiSFX::PulseScale::PulseScale(tName const &)",
        ),
    ),
    (
        "MovesDrawable__CQ26GuiSFX10PulseScale",
        Ok(
            "GuiSFX::PulseScale::MovesDrawable(void) const",
        ),
    ),
    (
        "SetAmplitude__Q26GuiSFX10PulseScalef",
        Ok(
            "GuiSFX::PulseScale::SetAmplitude(float)",
        ),
    ),
    (
        "SetDrawable__Q26GuiSFX10PulseScaleRQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::PulseScale::SetDrawable(Scrooby::Drawable &)",
        ),
    ),
    (
        "SetDrawable__Q26GuiSFX10PulseScalePQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::PulseScale::SetDrawable(Scrooby::Drawable *)",
        ),
    ),
    (
        "SetFrequency__Q26GuiSFX10PulseScalef",
        Ok(
            "GuiSFX::PulseScale::SetFrequency(float)",
        ),
    ),
    (
        "Update__Q26GuiSFX10PulseScalef",
        Ok(
            "GuiSFX::PulseScale::Update(float)",
        ),
    ),
    (
        "__Q26GuiSFX12RecieveEvent",
        Ok(
            "GuiSFX::RecieveEvent::RecieveEvent(void)",
        ),
    ),
    (
        "__Q26GuiSFX12RecieveEventRC5tName",
        Ok(
            "GuiSFX::RecieveEvent::RecieveEvent(tName const &)",
        ),
    ),
    (
        "Activate__Q26GuiSFX12RecieveEvent",
        Ok(
            "GuiSFX::RecieveEvent::Activate(void)",
        ),
    ),
    (
        "HandleEvent__Q26GuiSFX12RecieveEvent9EventEnumPv",
        Ok(
            "GuiSFX::RecieveEvent::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "SetEvent__Q26GuiSFX12RecieveEvent9EventEnum",
        Ok(
            "GuiSFX::RecieveEvent::SetEvent(EventEnum)",
        ),
    ),
    (
        "__Q26GuiSFX10ResumeGameRC5tName",
        Ok(
            "GuiSFX::ResumeGame::ResumeGame(tName const &)",
        ),
    ),
    (
        "Activate__Q26GuiSFX10ResumeGame",
        Ok(
            "GuiSFX::ResumeGame::Activate(void)",
        ),
    ),
    (
        "__Q26GuiSFX9SendEvent",
        Ok(
            "GuiSFX::SendEvent::SendEvent(void)",
        ),
    ),
    (
        "__Q26GuiSFX9SendEventRC5tName",
        Ok(
            "GuiSFX::SendEvent::SendEvent(tName const &)",
        ),
    ),
    (
        "Activate__Q26GuiSFX9SendEvent",
        Ok(
            "GuiSFX::SendEvent::Activate(void)",
        ),
    ),
    (
        "SetEvent__Q26GuiSFX9SendEvent9EventEnum",
        Ok(
            "GuiSFX::SendEvent::SetEvent(EventEnum)",
        ),
    ),
    (
        "SetEventData__Q26GuiSFX9SendEventPv",
        Ok(
            "GuiSFX::SendEvent::SetEventData(void *)",
        ),
    ),
    (
        "__Q26GuiSFX13SwitchContext",
        Ok(
            "GuiSFX::SwitchContext::SwitchContext(void)",
        ),
    ),
    (
        "Activate__Q26GuiSFX13SwitchContext",
        Ok(
            "GuiSFX::SwitchContext::Activate(void)",
        ),
    ),
    (
        "SetContext__Q26GuiSFX13SwitchContext11ContextEnum",
        Ok(
            "GuiSFX::SwitchContext::SetContext(ContextEnum)",
        ),
    ),
    (
        "__Q26GuiSFX4Show",
        Ok(
            "GuiSFX::Show::Show(void)",
        ),
    ),
    (
        "__Q26GuiSFX4ShowRC5tName",
        Ok(
            "GuiSFX::Show::Show(tName const &)",
        ),
    ),
    (
        "Activate__Q26GuiSFX4Show",
        Ok(
            "GuiSFX::Show::Activate(void)",
        ),
    ),
    (
        "MovesDrawable__CQ26GuiSFX4Spin",
        Ok(
            "GuiSFX::Spin::MovesDrawable(void) const",
        ),
    ),
    (
        "SetDrawable__Q26GuiSFX4SpinPQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::Spin::SetDrawable(Scrooby::Drawable *)",
        ),
    ),
    (
        "Update__Q26GuiSFX4Spinf",
        Ok(
            "GuiSFX::Spin::Update(float)",
        ),
    ),
    (
        "__Q26GuiSFX10Transition",
        Ok(
            "GuiSFX::Transition::Transition(void)",
        ),
    ),
    (
        "__Q26GuiSFX10TransitionRC5tName",
        Ok(
            "GuiSFX::Transition::Transition(tName const &)",
        ),
    ),
    (
        "Activate__Q26GuiSFX10Transition",
        Ok(
            "GuiSFX::Transition::Activate(void)",
        ),
    ),
    (
        "Deactivate__Q26GuiSFX10Transition",
        Ok(
            "GuiSFX::Transition::Deactivate(void)",
        ),
    ),
    (
        "GetDrawable__Q26GuiSFX10Transition",
        Ok(
            "GuiSFX::Transition::GetDrawable(void)",
        ),
    ),
    (
        "IsActive__CQ26GuiSFX10Transition",
        Ok(
            "GuiSFX::Transition::IsActive(void) const",
        ),
    ),
    (
        "IsDone__CQ26GuiSFX10Transition",
        Ok(
            "GuiSFX::Transition::IsDone(void) const",
        ),
    ),
    (
        "MovesDrawable__CQ26GuiSFX10Transition",
        Ok(
            "GuiSFX::Transition::MovesDrawable(void) const",
        ),
    ),
    (
        "Reset__Q26GuiSFX10Transition",
        Ok(
            "GuiSFX::Transition::Reset(void)",
        ),
    ),
    (
        "SetDrawable__Q26GuiSFX10TransitionPQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::Transition::SetDrawable(Scrooby::Drawable *)",
        ),
    ),
    (
        "SetDrawable__Q26GuiSFX10TransitionRQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::Transition::SetDrawable(Scrooby::Drawable &)",
        ),
    ),
    (
        "Update__Q26GuiSFX10Transitionf",
        Ok(
            "GuiSFX::Transition::Update(float)",
        ),
    ),
    (
        "__Q26GuiSFX10Translator",
        Ok(
            "GuiSFX::Translator::Translator(void)",
        ),
    ),
    (
        "__Q26GuiSFX10TranslatorRC5tName",
        Ok(
            "GuiSFX::Translator::Translator(tName const &)",
        ),
    ),
    (
        "_$_Q26GuiSFX10Translator",
        Ok(
            "GuiSFX::Translator::~Translator(void)",
        ),
    ),
    (
        "MovesDrawable__CQ26GuiSFX10Translator",
        Ok(
            "GuiSFX::Translator::MovesDrawable(void) const",
        ),
    ),
    (
        "SetCoordsEnd__Q26GuiSFX10Translatorii",
        Ok(
            "GuiSFX::Translator::SetCoordsEnd(int, int)",
        ),
    ),
    (
        "SetCoordsStart__Q26GuiSFX10Translatorii",
        Ok(
            "GuiSFX::Translator::SetCoordsStart(int, int)",
        ),
    ),
    (
        "SetEndOffscreenBottom__Q26GuiSFX10TranslatorPCQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::Translator::SetEndOffscreenBottom(Scrooby::Drawable const *)",
        ),
    ),
    (
        "SetEndOffscreenLeft__Q26GuiSFX10TranslatorPCQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::Translator::SetEndOffscreenLeft(Scrooby::Drawable const *)",
        ),
    ),
    (
        "SetEndOffscreenRight__Q26GuiSFX10TranslatorPCQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::Translator::SetEndOffscreenRight(Scrooby::Drawable const *)",
        ),
    ),
    (
        "SetEndOffscreenTop__Q26GuiSFX10TranslatorPCQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::Translator::SetEndOffscreenTop(Scrooby::Drawable const *)",
        ),
    ),
    (
        "SetStartOffscreenBottom__Q26GuiSFX10TranslatorPCQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::Translator::SetStartOffscreenBottom(Scrooby::Drawable const *)",
        ),
    ),
    (
        "SetStartOffscreenLeft__Q26GuiSFX10TranslatorPCQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::Translator::SetStartOffscreenLeft(Scrooby::Drawable const *)",
        ),
    ),
    (
        "SetStartOffscreenRight__Q26GuiSFX10TranslatorPCQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::Translator::SetStartOffscreenRight(Scrooby::Drawable const *)",
        ),
    ),
    (
        "SetStartOffscreenTop__Q26GuiSFX10TranslatorPCQ27Scrooby8Drawable",
        Ok(
            "GuiSFX::Translator::SetStartOffscreenTop(Scrooby::Drawable const *)",
        ),
    ),
    (
        "Update__Q26GuiSFX10Translatorf",
        Ok(
            "GuiSFX::Translator::Update(float)",
        ),
    ),
    (
        "__Q26GuiSFX21UnderdampedTranslator",
        Ok(
            "GuiSFX::UnderdampedTranslator::UnderdampedTranslator(void)",
        ),
    ),
    (
        "MovesDrawable__CQ26GuiSFX21UnderdampedTranslator",
        Ok(
            "GuiSFX::UnderdampedTranslator::MovesDrawable(void) const",
        ),
    ),
    (
        "SetFrequency__Q26GuiSFX21UnderdampedTranslatorf",
        Ok(
            "GuiSFX::UnderdampedTranslator::SetFrequency(float)",
        ),
    ),
    (
        "Update__Q26GuiSFX21UnderdampedTranslatorf",
        Ok(
            "GuiSFX::UnderdampedTranslator::Update(float)",
        ),
    ),
    (
        "__13ScrollingTextPQ27Scrooby4Text",
        Ok(
            "ScrollingText::ScrollingText(Scrooby::Text *)",
        ),
    ),
    (
        "_$_13ScrollingText",
        Ok(
            "ScrollingText::~ScrollingText(void)",
        ),
    ),
    (
        "SetTextIndex__13ScrollingTexti",
        Ok(
            "ScrollingText::SetTextIndex(int)",
        ),
    ),
    (
        "Start__13ScrollingText",
        Ok(
            "ScrollingText::Start(void)",
        ),
    ),
    (
        "Stop__13ScrollingText",
        Ok(
            "ScrollingText::Stop(void)",
        ),
    ),
    (
        "Update__13ScrollingTextUi",
        Ok(
            "ScrollingText::Update(unsigned int)",
        ),
    ),
    (
        "ClipText__13ScrollingTextii",
        Ok(
            "ScrollingText::ClipText(int, int)",
        ),
    ),
    (
        "__tf9HudMapCam",
        Ok(
            "HudMapCam type_info function",
        ),
    ),
    (
        "__tf7CHudMap",
        Ok(
            "CHudMap type_info function",
        ),
    ),
    (
        "__tf6Slider",
        Ok(
            "Slider type_info function",
        ),
    ),
    (
        "__tf11ImageSlider",
        Ok(
            "ImageSlider type_info function",
        ),
    ),
    (
        "__tf13CTeleTypeText",
        Ok(
            "CTeleTypeText type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX10Transition",
        Ok(
            "GuiSFX::Transition type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX9Chainable",
        Ok(
            "GuiSFX::Chainable type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX10Chainable1",
        Ok(
            "GuiSFX::Chainable1 type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX10Chainable2",
        Ok(
            "GuiSFX::Chainable2 type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX10Chainable3",
        Ok(
            "GuiSFX::Chainable3 type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX9Junction2",
        Ok(
            "GuiSFX::Junction2 type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX9Junction3",
        Ok(
            "GuiSFX::Junction3 type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX5Dummy",
        Ok(
            "GuiSFX::Dummy type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX10GotoScreen",
        Ok(
            "GuiSFX::GotoScreen type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX4Hide",
        Ok(
            "GuiSFX::Hide type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX16InputStateChange",
        Ok(
            "GuiSFX::InputStateChange type_info function",
        ),
    ),
    (
        "_$_Q26GuiSFX12RecieveEvent",
        Ok(
            "GuiSFX::RecieveEvent::~RecieveEvent(void)",
        ),
    ),
    (
        "__tfQ26GuiSFX12RecieveEvent",
        Ok(
            "GuiSFX::RecieveEvent type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX9SendEvent",
        Ok(
            "GuiSFX::SendEvent type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX13SwitchContext",
        Ok(
            "GuiSFX::SwitchContext type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX11ColorChange",
        Ok(
            "GuiSFX::ColorChange type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX12IrisWipeOpen",
        Ok(
            "GuiSFX::IrisWipeOpen type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX13IrisWipeClose",
        Ok(
            "GuiSFX::IrisWipeClose type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX4Show",
        Ok(
            "GuiSFX::Show type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX5Pause",
        Ok(
            "GuiSFX::Pause type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX13PauseInFrames",
        Ok(
            "GuiSFX::PauseInFrames type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX9PauseGame",
        Ok(
            "GuiSFX::PauseGame type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX10ResumeGame",
        Ok(
            "GuiSFX::ResumeGame type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX11ImageCycler",
        Ok(
            "GuiSFX::ImageCycler type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX10PulseScale",
        Ok(
            "GuiSFX::PulseScale type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX4Spin",
        Ok(
            "GuiSFX::Spin type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX10Translator",
        Ok(
            "GuiSFX::Translator type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX21UnderdampedTranslator",
        Ok(
            "GuiSFX::UnderdampedTranslator type_info function",
        ),
    ),
    (
        "__tf13ScrollingText",
        Ok(
            "ScrollingText type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX15HasTimeInterval",
        Ok(
            "GuiSFX::HasTimeInterval type_info function",
        ),
    ),
    (
        "__tfQ26GuiSFX18HasMulticontroller",
        Ok(
            "GuiSFX::HasMulticontroller type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__9HudMapCami",
        Ok(
            "global constructors keyed to HudMapCam::HudMapCam(int)",
        ),
    ),
    (
        "__8FMVEvent",
        Ok(
            "FMVEvent::FMVEvent(void)",
        ),
    ),
    (
        "_$_8FMVEvent",
        Ok(
            "FMVEvent::~FMVEvent(void)",
        ),
    ),
    (
        "GetPlayer__8FMVEvent",
        Ok(
            "FMVEvent::GetPlayer(void)",
        ),
    ),
    (
        "__Q28FMVEvent12FMVEventData",
        Ok(
            "FMVEvent::FMVEventData::FMVEventData(void)",
        ),
    ),
    (
        "__8NISEvent",
        Ok(
            "NISEvent::NISEvent(void)",
        ),
    ),
    (
        "_$_8NISEvent",
        Ok(
            "NISEvent::~NISEvent(void)",
        ),
    ),
    (
        "Init__8NISEvent",
        Ok(
            "NISEvent::Init(void)",
        ),
    ),
    (
        "Start__8NISEvent",
        Ok(
            "NISEvent::Start(void)",
        ),
    ),
    (
        "GetPlayer__8NISEvent",
        Ok(
            "NISEvent::GetPlayer(void)",
        ),
    ),
    (
        "SetNames__8NISEvent",
        Ok(
            "NISEvent::SetNames(void)",
        ),
    ),
    (
        "__17PresentationEvent",
        Ok(
            "PresentationEvent::PresentationEvent(void)",
        ),
    ),
    (
        "_$_17PresentationEvent",
        Ok(
            "PresentationEvent::~PresentationEvent(void)",
        ),
    ),
    (
        "OnLoadDataComplete__17PresentationEvent",
        Ok(
            "PresentationEvent::OnLoadDataComplete(void)",
        ),
    ),
    (
        "Update__17PresentationEventUi",
        Ok(
            "PresentationEvent::Update(unsigned int)",
        ),
    ),
    (
        "Start__17PresentationEvent",
        Ok(
            "PresentationEvent::Start(void)",
        ),
    ),
    (
        "Stop__17PresentationEvent",
        Ok(
            "PresentationEvent::Stop(void)",
        ),
    ),
    (
        "Init__17PresentationEvent",
        Ok(
            "PresentationEvent::Init(void)",
        ),
    ),
    (
        "GetPlayer__15TransitionEvent",
        Ok(
            "TransitionEvent::GetPlayer(void)",
        ),
    ),
    (
        "Start__15TransitionEvent",
        Ok(
            "TransitionEvent::Start(void)",
        ),
    ),
    (
        "__tf17PresentationEvent",
        Ok(
            "PresentationEvent type_info function",
        ),
    ),
    (
        "__tf8FMVEvent",
        Ok(
            "FMVEvent type_info function",
        ),
    ),
    (
        "__tf8NISEvent",
        Ok(
            "NISEvent type_info function",
        ),
    ),
    (
        "_$_15TransitionEvent",
        Ok(
            "TransitionEvent::~TransitionEvent(void)",
        ),
    ),
    (
        "__tf15TransitionEvent",
        Ok(
            "TransitionEvent type_info function",
        ),
    ),
    (
        "GetUserData__17PresentationEvent",
        Ok(
            "PresentationEvent::GetUserData(void)",
        ),
    ),
    (
        "GetUserData__8FMVEvent",
        Ok(
            "FMVEvent::GetUserData(void)",
        ),
    ),
    (
        "_GLOBAL_$I$__8FMVEvent",
        Ok(
            "global constructors keyed to FMVEvent::FMVEvent(void)",
        ),
    ),
    (
        "CompareTo__6BoxPtsR9AAPlane3f",
        Ok(
            "BoxPts::CompareTo(AAPlane3f &)",
        ),
    ),
    (
        "DoesIntersect__6BoxPtsR9AAPlane3f",
        Ok(
            "BoxPts::DoesIntersect(AAPlane3f &)",
        ),
    ),
    (
        "DoesntIntersect__6BoxPtsR9AAPlane3f",
        Ok(
            "BoxPts::DoesntIntersect(AAPlane3f &)",
        ),
    ),
    (
        "TestNotOutsideMinX__6BoxPtsR15ISpatialProxyAA",
        Ok(
            "BoxPts::TestNotOutsideMinX(ISpatialProxyAA &)",
        ),
    ),
    (
        "TestNotOutsideMinY__6BoxPtsR15ISpatialProxyAA",
        Ok(
            "BoxPts::TestNotOutsideMinY(ISpatialProxyAA &)",
        ),
    ),
    (
        "TestNotOutsideMinZ__6BoxPtsR15ISpatialProxyAA",
        Ok(
            "BoxPts::TestNotOutsideMinZ(ISpatialProxyAA &)",
        ),
    ),
    (
        "TestNotOutsideMaxX__6BoxPtsR15ISpatialProxyAA",
        Ok(
            "BoxPts::TestNotOutsideMaxX(ISpatialProxyAA &)",
        ),
    ),
    (
        "TestNotOutsideMaxY__6BoxPtsR15ISpatialProxyAA",
        Ok(
            "BoxPts::TestNotOutsideMaxY(ISpatialProxyAA &)",
        ),
    ),
    (
        "TestNotOutsideMaxZ__6BoxPtsR15ISpatialProxyAA",
        Ok(
            "BoxPts::TestNotOutsideMaxZ(ISpatialProxyAA &)",
        ),
    ),
    (
        "nPts__6BoxPts",
        Ok(
            "BoxPts::nPts(void)",
        ),
    ),
    (
        "mPt__6BoxPtsi",
        Ok(
            "BoxPts::mPt(int)",
        ),
    ),
    (
        "GetPoint__6BoxPts",
        Ok(
            "BoxPts::GetPoint(void)",
        ),
    ),
    (
        "CutOffGT__6BoxPtsR9AAPlane3f",
        Ok(
            "BoxPts::CutOffGT(AAPlane3f &)",
        ),
    ),
    (
        "CutOffLT__6BoxPtsR9AAPlane3f",
        Ok(
            "BoxPts::CutOffLT(AAPlane3f &)",
        ),
    ),
    (
        "CompareTo__6BoxPtsRC8Vector3f",
        Ok(
            "BoxPts::CompareTo(Vector3f const &)",
        ),
    ),
    (
        "CompareToXZ__6BoxPtsRC8Vector3f",
        Ok(
            "BoxPts::CompareToXZ(Vector3f const &)",
        ),
    ),
    (
        "SetTo__6BoxPtsR8Bounds3f",
        Ok(
            "BoxPts::SetTo(Bounds3f &)",
        ),
    ),
    (
        "TestNotOutside__6BoxPtsR15ISpatialProxyAA",
        Ok(
            "BoxPts::TestNotOutside(ISpatialProxyAA &)",
        ),
    ),
    (
        "_$_11HexahedronP",
        Ok(
            "HexahedronP::~HexahedronP(void)",
        ),
    ),
    (
        "CompareTo__11HexahedronPR9AAPlane3f",
        Ok(
            "HexahedronP::CompareTo(AAPlane3f &)",
        ),
    ),
    (
        "DoesIntersect__11HexahedronPR9AAPlane3f",
        Ok(
            "HexahedronP::DoesIntersect(AAPlane3f &)",
        ),
    ),
    (
        "DoesntIntersect__11HexahedronPR9AAPlane3f",
        Ok(
            "HexahedronP::DoesntIntersect(AAPlane3f &)",
        ),
    ),
    (
        "CompareTo__11HexahedronPRC8Vector3f",
        Ok(
            "HexahedronP::CompareTo(Vector3f const &)",
        ),
    ),
    (
        "TestNotOutside__11HexahedronPR15ISpatialProxyAA",
        Ok(
            "HexahedronP::TestNotOutside(ISpatialProxyAA &)",
        ),
    ),
    (
        "nPts__11HexahedronP",
        Ok(
            "HexahedronP::nPts(void)",
        ),
    ),
    (
        "mPt__11HexahedronPi",
        Ok(
            "HexahedronP::mPt(int)",
        ),
    ),
    (
        "GetPoint__11HexahedronP",
        Ok(
            "HexahedronP::GetPoint(void)",
        ),
    ),
    (
        "rSeekNode__15SpatialTreeIterR15ISpatialProxyAAi",
        Ok(
            "SpatialTreeIter::rSeekNode(ISpatialProxyAA &, int)",
        ),
    ),
    (
        "rSeekLeaf__15SpatialTreeIteriR8Vector3f",
        Ok(
            "SpatialTreeIter::rSeekLeaf(int, Vector3f &)",
        ),
    ),
    (
        "MarkAll__15SpatialTreeIteriR6BoxPtsR8SphereSPi",
        Ok(
            "SpatialTreeIter::MarkAll(int, BoxPts &, SphereSP &, int)",
        ),
    ),
    (
        "MarkAllSphere__15SpatialTreeIteriR6BoxPtsR8SphereSPi",
        Ok(
            "SpatialTreeIter::MarkAllSphere(int, BoxPts &, SphereSP &, int)",
        ),
    ),
    (
        "MarkAllSphereIntersect__15SpatialTreeIteriR6BoxPtsR8SphereSPi",
        Ok(
            "SpatialTreeIter::MarkAllSphereIntersect(int, BoxPts &, SphereSP &, int)",
        ),
    ),
    (
        "MarkSubTrees__15SpatialTreeIteriR6BoxPtsR15ISpatialProxyAAi",
        Ok(
            "SpatialTreeIter::MarkSubTrees(int, BoxPts &, ISpatialProxyAA &, int)",
        ),
    ),
    (
        "BuildBBoxes__15SpatialTreeIterG6BoxPtsi",
        Ok(
            "SpatialTreeIter::BuildBBoxes(BoxPts, int)",
        ),
    ),
    (
        "__8SphereSP",
        Ok(
            "SphereSP::SphereSP(void)",
        ),
    ),
    (
        "_$_8SphereSP",
        Ok(
            "SphereSP::~SphereSP(void)",
        ),
    ),
    (
        "CompareTo__8SphereSPRC8Vector3f",
        Ok(
            "SphereSP::CompareTo(Vector3f const &)",
        ),
    ),
    (
        "CompareToXZ__8SphereSPRC8Vector3f",
        Ok(
            "SphereSP::CompareToXZ(Vector3f const &)",
        ),
    ),
    (
        "CompareTo__8SphereSPR9AAPlane3f",
        Ok(
            "SphereSP::CompareTo(AAPlane3f &)",
        ),
    ),
    (
        "TestNotOutside__8SphereSPR15ISpatialProxyAA",
        Ok(
            "SphereSP::TestNotOutside(ISpatialProxyAA &)",
        ),
    ),
    (
        "SetTo__8SphereSPR8Bounds3f",
        Ok(
            "SphereSP::SetTo(Bounds3f &)",
        ),
    ),
    (
        "SetTo__8SphereSPGQ218RadicalMathLibrary6Vectorf",
        Ok(
            "SphereSP::SetTo(RadicalMathLibrary::Vector, float)",
        ),
    ),
    (
        "__10WorldScene",
        Ok(
            "WorldScene::WorldScene(void)",
        ),
    ),
    (
        "_$_10WorldScene",
        Ok(
            "WorldScene::~WorldScene(void)",
        ),
    ),
    (
        "SetVisCone__10WorldSceneRQ218RadicalMathLibrary6VectorT1f",
        Ok(
            "WorldScene::SetVisCone(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, float)",
        ),
    ),
    (
        "IsSphereInCone__10WorldSceneRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "WorldScene::IsSphereInCone(RadicalMathLibrary::Vector &, float)",
        ),
    ),
    (
        "HandleEvent__10WorldScene9EventEnumPv",
        Ok(
            "WorldScene::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "SetTree__10WorldSceneP11SpatialTree",
        Ok(
            "WorldScene::SetTree(SpatialTree *)",
        ),
    ),
    (
        "Init__10WorldScenei",
        Ok(
            "WorldScene::Init(int)",
        ),
    ),
    (
        "Add__10WorldSceneP12IntersectDSG",
        Ok(
            "WorldScene::Add(IntersectDSG *)",
        ),
    ),
    (
        "Add__10WorldSceneP13StaticPhysDSG",
        Ok(
            "WorldScene::Add(StaticPhysDSG *)",
        ),
    ),
    (
        "Add__10WorldSceneP15StaticEntityDSG",
        Ok(
            "WorldScene::Add(StaticEntityDSG *)",
        ),
    ),
    (
        "Add__10WorldSceneP14FenceEntityDSG",
        Ok(
            "WorldScene::Add(FenceEntityDSG *)",
        ),
    ),
    (
        "Add__10WorldSceneP22AnimCollisionEntityDSG",
        Ok(
            "WorldScene::Add(AnimCollisionEntityDSG *)",
        ),
    ),
    (
        "Add__10WorldSceneP13AnimEntityDSG",
        Ok(
            "WorldScene::Add(AnimEntityDSG *)",
        ),
    ),
    (
        "Add__10WorldSceneP11DynaPhysDSG",
        Ok(
            "WorldScene::Add(DynaPhysDSG *)",
        ),
    ),
    (
        "Add__10WorldSceneP13TriggerVolume",
        Ok(
            "WorldScene::Add(TriggerVolume *)",
        ),
    ),
    (
        "Add__10WorldSceneP11RoadSegment",
        Ok(
            "WorldScene::Add(RoadSegment *)",
        ),
    ),
    (
        "Add__10WorldSceneP11PathSegment",
        Ok(
            "WorldScene::Add(PathSegment *)",
        ),
    ),
    (
        "GenerateSpatialReps__10WorldScene",
        Ok(
            "WorldScene::GenerateSpatialReps(void)",
        ),
    ),
    (
        "Move__10WorldSceneRQ218RadicalMathLibrary5Box3DP10IEntityDSG",
        Ok(
            "WorldScene::Move(RadicalMathLibrary::Box3D &, IEntityDSG *)",
        ),
    ),
    (
        "RemovePlace__10WorldSceneP10IEntityDSGR11SpatialNode",
        Ok(
            "WorldScene::RemovePlace(IEntityDSG *, SpatialNode &)",
        ),
    ),
    (
        "Remove__10WorldSceneP10IEntityDSG",
        Ok(
            "WorldScene::Remove(IEntityDSG *)",
        ),
    ),
    (
        "RemoveFromLeaf__10WorldSceneP10IEntityDSG",
        Ok(
            "WorldScene::RemoveFromLeaf(IEntityDSG *)",
        ),
    ),
    (
        "RemoveQuietFail__10WorldSceneP10IEntityDSG",
        Ok(
            "WorldScene::RemoveQuietFail(IEntityDSG *)",
        ),
    ),
    (
        "RenderScene__10WorldSceneUiP12tPointCamera",
        Ok(
            "WorldScene::RenderScene(unsigned int, tPointCamera *)",
        ),
    ),
    (
        "RenderSimpleShadows__10WorldScene",
        Ok(
            "WorldScene::RenderSimpleShadows(void)",
        ),
    ),
    (
        "RenderOpaque__10WorldScene",
        Ok(
            "WorldScene::RenderOpaque(void)",
        ),
    ),
    (
        "RenderTranslucent__10WorldScene",
        Ok(
            "WorldScene::RenderTranslucent(void)",
        ),
    ),
    (
        "Render__10WorldSceneUi",
        Ok(
            "WorldScene::Render(unsigned int)",
        ),
    ),
    (
        "GenerateStaticTree__10WorldScene",
        Ok(
            "WorldScene::GenerateStaticTree(void)",
        ),
    ),
    (
        "PopulateStaticTree__10WorldScene",
        Ok(
            "WorldScene::PopulateStaticTree(void)",
        ),
    ),
    (
        "Place__10WorldSceneP12IntersectDSG",
        Ok(
            "WorldScene::Place(IntersectDSG *)",
        ),
    ),
    (
        "Place__10WorldSceneP15StaticEntityDSG",
        Ok(
            "WorldScene::Place(StaticEntityDSG *)",
        ),
    ),
    (
        "Place__10WorldSceneP13StaticPhysDSG",
        Ok(
            "WorldScene::Place(StaticPhysDSG *)",
        ),
    ),
    (
        "Place__10WorldSceneP11DynaPhysDSG",
        Ok(
            "WorldScene::Place(DynaPhysDSG *)",
        ),
    ),
    (
        "Place__10WorldSceneP14FenceEntityDSG",
        Ok(
            "WorldScene::Place(FenceEntityDSG *)",
        ),
    ),
    (
        "Place__10WorldSceneP22AnimCollisionEntityDSG",
        Ok(
            "WorldScene::Place(AnimCollisionEntityDSG *)",
        ),
    ),
    (
        "Place__10WorldSceneP13AnimEntityDSG",
        Ok(
            "WorldScene::Place(AnimEntityDSG *)",
        ),
    ),
    (
        "Place__10WorldSceneP13TriggerVolume",
        Ok(
            "WorldScene::Place(TriggerVolume *)",
        ),
    ),
    (
        "Place__10WorldSceneP11RoadSegment",
        Ok(
            "WorldScene::Place(RoadSegment *)",
        ),
    ),
    (
        "Place__10WorldSceneP11PathSegment",
        Ok(
            "WorldScene::Place(PathSegment *)",
        ),
    ),
    (
        "IsPreTreeGen__10WorldScene",
        Ok(
            "WorldScene::IsPreTreeGen(void)",
        ),
    ),
    (
        "IsPostTreeGen__10WorldScene",
        Ok(
            "WorldScene::IsPostTreeGen(void)",
        ),
    ),
    (
        "MarkCameraVisible__10WorldSceneP12tPointCameraUi",
        Ok(
            "WorldScene::MarkCameraVisible(tPointCamera *, unsigned int)",
        ),
    ),
    (
        "LinkParent__t17ContiguousBinNode1Z11SpatialNodei",
        Ok(
            "ContiguousBinNode<SpatialNode>::LinkParent(int)",
        ),
    ),
    (
        "SetSubTreeSize__t17ContiguousBinNode1Z11SpatialNodei",
        Ok(
            "ContiguousBinNode<SpatialNode>::SetSubTreeSize(int)",
        ),
    ),
    (
        "LChildOffset__t17ContiguousBinNode1Z11SpatialNode",
        Ok(
            "ContiguousBinNode<SpatialNode>::LChildOffset(void)",
        ),
    ),
    (
        "LChild__t17ContiguousBinNode1Z11SpatialNode",
        Ok(
            "ContiguousBinNode<SpatialNode>::LChild(void)",
        ),
    ),
    (
        "RSiblingOffset__t17ContiguousBinNode1Z11SpatialNode",
        Ok(
            "ContiguousBinNode<SpatialNode>::RSiblingOffset(void)",
        ),
    ),
    (
        "RChildOffset__t17ContiguousBinNode1Z11SpatialNode",
        Ok(
            "ContiguousBinNode<SpatialNode>::RChildOffset(void)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZPQ210WorldScene9zSortBlahZPQ210WorldScene9zSortBlah_X01X01X11G12__false_type_X11",
        Ok(
            "WorldScene::zSortBlah * __uninitialized_copy_aux<WorldScene::zSortBlah *, WorldScene::zSortBlah *>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah *, __false_type)",
        ),
    ),
    (
        "fill__H2ZPQ210WorldScene9zSortBlahZQ210WorldScene9zSortBlah_X01X01RCX11_v",
        Ok(
            "void fill<WorldScene::zSortBlah *, WorldScene::zSortBlah>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah const &)",
        ),
    ),
    (
        "__uninitialized_fill_n_aux__H3ZPQ210WorldScene9zSortBlahZUiZQ210WorldScene9zSortBlah_X01X11RCX21G12__false_type_X01",
        Ok(
            "WorldScene::zSortBlah * __uninitialized_fill_n_aux<WorldScene::zSortBlah *, unsigned int, WorldScene::zSortBlah>(WorldScene::zSortBlah *, unsigned int, WorldScene::zSortBlah const &, __false_type)",
        ),
    ),
    (
        "insert__t6vector2ZQ210WorldScene9zSortBlahZt7s2alloc1ZQ210WorldScene9zSortBlahPQ210WorldScene9zSortBlahUiRCQ210WorldScene9zSortBlah",
        Ok(
            "vector<WorldScene::zSortBlah, s2alloc<WorldScene::zSortBlah> >::insert(WorldScene::zSortBlah *, unsigned int, WorldScene::zSortBlah const &)",
        ),
    ),
    (
        "fill__H2ZPP10IEntityDSGZP10IEntityDSG_X01X01RCX11_v",
        Ok(
            "void fill<IEntityDSG **, IEntityDSG *>(IEntityDSG **, IEntityDSG **, IEntityDSG * const &)",
        ),
    ),
    (
        "fill_n__H3ZPP10IEntityDSGZUiZP10IEntityDSG_X01X11RCX21_X01",
        Ok(
            "IEntityDSG ** fill_n<IEntityDSG **, unsigned int, IEntityDSG *>(IEntityDSG **, unsigned int, IEntityDSG * const &)",
        ),
    ),
    (
        "insert__t6vector2ZP10IEntityDSGZt7s2alloc1ZP10IEntityDSGPP10IEntityDSGUiRCP10IEntityDSG",
        Ok(
            "vector<IEntityDSG *, s2alloc<IEntityDSG *> >::insert(IEntityDSG **, unsigned int, IEntityDSG *const &)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2ZP10IEntityDSGZt7s2alloc1ZP10IEntityDSGPP10IEntityDSGRCP10IEntityDSG",
        Ok(
            "vector<IEntityDSG *, s2alloc<IEntityDSG *> >::_M_insert_aux(IEntityDSG **, IEntityDSG *const &)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2ZQ210WorldScene9zSortBlahZt7s2alloc1ZQ210WorldScene9zSortBlahPQ210WorldScene9zSortBlahRCQ210WorldScene9zSortBlah",
        Ok(
            "vector<WorldScene::zSortBlah, s2alloc<WorldScene::zSortBlah> >::_M_insert_aux(WorldScene::zSortBlah *, WorldScene::zSortBlah const &)",
        ),
    ),
    (
        "__push_heap__H4ZPQ210WorldScene9zSortBlahZiZQ210WorldScene9zSortBlahZ14gShaderCompare_X01X11X11X21X31_v",
        Ok(
            "void __push_heap<WorldScene::zSortBlah *, int, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, int, int, WorldScene::zSortBlah, gShaderCompare)",
        ),
    ),
    (
        "__adjust_heap__H4ZPQ210WorldScene9zSortBlahZiZQ210WorldScene9zSortBlahZ14gShaderCompare_X01X11X11X21X31_v",
        Ok(
            "void __adjust_heap<WorldScene::zSortBlah *, int, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, int, int, WorldScene::zSortBlah, gShaderCompare)",
        ),
    ),
    (
        "__make_heap__H4ZPQ210WorldScene9zSortBlahZ14gShaderCompareZQ210WorldScene9zSortBlahZi_X01X01X11PX21PX31_v",
        Ok(
            "void __make_heap<WorldScene::zSortBlah *, gShaderCompare, WorldScene::zSortBlah, int>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare, WorldScene::zSortBlah *, int *)",
        ),
    ),
    (
        "sort_heap__H2ZPQ210WorldScene9zSortBlahZ14gShaderCompare_X01X01X11_v",
        Ok(
            "void sort_heap<WorldScene::zSortBlah *, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare)",
        ),
    ),
    (
        "__partial_sort__H3ZPQ210WorldScene9zSortBlahZQ210WorldScene9zSortBlahZ14gShaderCompare_X01X01X01PX11X21_v",
        Ok(
            "void __partial_sort<WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare)",
        ),
    ),
    (
        "__unguarded_partition__H3ZPQ210WorldScene9zSortBlahZQ210WorldScene9zSortBlahZ14gShaderCompare_X01X01X11X21_X01",
        Ok(
            "WorldScene::zSortBlah * __unguarded_partition<WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare)",
        ),
    ),
    (
        "__introsort_loop__H4ZPQ210WorldScene9zSortBlahZQ210WorldScene9zSortBlahZiZ14gShaderCompare_X01X01PX11X21X31_v",
        Ok(
            "void __introsort_loop<WorldScene::zSortBlah *, WorldScene::zSortBlah, int, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah *, int, gShaderCompare)",
        ),
    ),
    (
        "__unguarded_linear_insert__H3ZPQ210WorldScene9zSortBlahZQ210WorldScene9zSortBlahZ14gShaderCompare_X01X11X21_v",
        Ok(
            "void __unguarded_linear_insert<WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare)",
        ),
    ),
    (
        "__insertion_sort__H2ZPQ210WorldScene9zSortBlahZ14gShaderCompare_X01X01X11_v",
        Ok(
            "void __insertion_sort<WorldScene::zSortBlah *, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare)",
        ),
    ),
    (
        "__unguarded_insertion_sort_aux__H3ZPQ210WorldScene9zSortBlahZQ210WorldScene9zSortBlahZ14gShaderCompare_X01X01PX11X21_v",
        Ok(
            "void __unguarded_insertion_sort_aux<WorldScene::zSortBlah *, WorldScene::zSortBlah, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare)",
        ),
    ),
    (
        "__final_insertion_sort__H2ZPQ210WorldScene9zSortBlahZ14gShaderCompare_X01X01X11_v",
        Ok(
            "void __final_insertion_sort<WorldScene::zSortBlah *, gShaderCompare>(WorldScene::zSortBlah *, WorldScene::zSortBlah *, gShaderCompare)",
        ),
    ),
    (
        "__push_heap__H4ZPP10IEntityDSGZiZP10IEntityDSGZ13gZSortCompare_X01X11X11X21X31_v",
        Ok(
            "void __push_heap<IEntityDSG **, int, IEntityDSG *, gZSortCompare>(IEntityDSG **, int, int, IEntityDSG *, gZSortCompare)",
        ),
    ),
    (
        "__adjust_heap__H4ZPP10IEntityDSGZiZP10IEntityDSGZ13gZSortCompare_X01X11X11X21X31_v",
        Ok(
            "void __adjust_heap<IEntityDSG **, int, IEntityDSG *, gZSortCompare>(IEntityDSG **, int, int, IEntityDSG *, gZSortCompare)",
        ),
    ),
    (
        "__make_heap__H4ZPP10IEntityDSGZ13gZSortCompareZP10IEntityDSGZi_X01X01X11PX21PX31_v",
        Ok(
            "void __make_heap<IEntityDSG **, gZSortCompare, IEntityDSG *, int>(IEntityDSG **, IEntityDSG **, gZSortCompare, IEntityDSG * *, int *)",
        ),
    ),
    (
        "sort_heap__H2ZPP10IEntityDSGZ13gZSortCompare_X01X01X11_v",
        Ok(
            "void sort_heap<IEntityDSG **, gZSortCompare>(IEntityDSG **, IEntityDSG **, gZSortCompare)",
        ),
    ),
    (
        "__partial_sort__H3ZPP10IEntityDSGZP10IEntityDSGZ13gZSortCompare_X01X01X01PX11X21_v",
        Ok(
            "void __partial_sort<IEntityDSG **, IEntityDSG *, gZSortCompare>(IEntityDSG **, IEntityDSG **, IEntityDSG **, IEntityDSG * *, gZSortCompare)",
        ),
    ),
    (
        "__unguarded_partition__H3ZPP10IEntityDSGZP10IEntityDSGZ13gZSortCompare_X01X01X11X21_X01",
        Ok(
            "IEntityDSG ** __unguarded_partition<IEntityDSG **, IEntityDSG *, gZSortCompare>(IEntityDSG **, IEntityDSG **, IEntityDSG *, gZSortCompare)",
        ),
    ),
    (
        "__introsort_loop__H4ZPP10IEntityDSGZP10IEntityDSGZiZ13gZSortCompare_X01X01PX11X21X31_v",
        Ok(
            "void __introsort_loop<IEntityDSG **, IEntityDSG *, int, gZSortCompare>(IEntityDSG **, IEntityDSG **, IEntityDSG * *, int, gZSortCompare)",
        ),
    ),
    (
        "__unguarded_linear_insert__H3ZPP10IEntityDSGZP10IEntityDSGZ13gZSortCompare_X01X11X21_v",
        Ok(
            "void __unguarded_linear_insert<IEntityDSG **, IEntityDSG *, gZSortCompare>(IEntityDSG **, IEntityDSG *, gZSortCompare)",
        ),
    ),
    (
        "__insertion_sort__H2ZPP10IEntityDSGZ13gZSortCompare_X01X01X11_v",
        Ok(
            "void __insertion_sort<IEntityDSG **, gZSortCompare>(IEntityDSG **, IEntityDSG **, gZSortCompare)",
        ),
    ),
    (
        "__unguarded_insertion_sort_aux__H3ZPP10IEntityDSGZP10IEntityDSGZ13gZSortCompare_X01X01PX11X21_v",
        Ok(
            "void __unguarded_insertion_sort_aux<IEntityDSG **, IEntityDSG *, gZSortCompare>(IEntityDSG **, IEntityDSG **, IEntityDSG * *, gZSortCompare)",
        ),
    ),
    (
        "__final_insertion_sort__H2ZPP10IEntityDSGZ13gZSortCompare_X01X01X11_v",
        Ok(
            "void __final_insertion_sort<IEntityDSG **, gZSortCompare>(IEntityDSG **, IEntityDSG **, gZSortCompare)",
        ),
    ),
    (
        "__tf6BoxPts",
        Ok(
            "BoxPts type_info function",
        ),
    ),
    (
        "__tf11HexahedronP",
        Ok(
            "HexahedronP type_info function",
        ),
    ),
    (
        "__tf11SpatialTree",
        Ok(
            "SpatialTree type_info function",
        ),
    ),
    (
        "__tf8SphereSP",
        Ok(
            "SphereSP type_info function",
        ),
    ),
    (
        "__tf10WorldScene",
        Ok(
            "WorldScene type_info function",
        ),
    ),
    (
        "__6BoxPtsRC6BoxPts",
        Ok(
            "BoxPts::BoxPts(BoxPts const &)",
        ),
    ),
    (
        "_$_6BoxPts",
        Ok(
            "BoxPts::~BoxPts(void)",
        ),
    ),
    (
        "_$_11SpatialTree",
        Ok(
            "SpatialTree::~SpatialTree(void)",
        ),
    ),
    (
        "__Q210WorldScene9zSortBlah",
        Ok(
            "WorldScene::zSortBlah::zSortBlah(void)",
        ),
    ),
    (
        "__Q210WorldScene9zSortBlahRCQ210WorldScene9zSortBlah",
        Ok(
            "WorldScene::zSortBlah::zSortBlah(WorldScene::zSortBlah const &)",
        ),
    ),
    (
        "__as__Q210WorldScene9zSortBlahRCQ210WorldScene9zSortBlah",
        Ok(
            "WorldScene::zSortBlah::operator=(WorldScene::zSortBlah const &)",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3ZP10IEntityDSGZt7s2alloc1ZP10IEntityDSGb0",
        Ok(
            "_Vector_alloc_base<IEntityDSG *, s2alloc<IEntityDSG *>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3ZQ210WorldScene9zSortBlahZt7s2alloc1ZQ210WorldScene9zSortBlahb0",
        Ok(
            "_Vector_alloc_base<WorldScene::zSortBlah, s2alloc<WorldScene::zSortBlah>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "__15ISpatialProxyAARC15ISpatialProxyAA",
        Ok(
            "ISpatialProxyAA::ISpatialProxyAA(ISpatialProxyAA const &)",
        ),
    ),
    (
        "_GLOBAL_$I$CompareTo__6BoxPtsR9AAPlane3f",
        Ok(
            "global constructors keyed to BoxPts::CompareTo(AAPlane3f &)",
        ),
    ),
    (
        "__22AnimCollisionEntityDSG",
        Ok(
            "AnimCollisionEntityDSG::AnimCollisionEntityDSG(void)",
        ),
    ),
    (
        "_$_22AnimCollisionEntityDSG",
        Ok(
            "AnimCollisionEntityDSG::~AnimCollisionEntityDSG(void)",
        ),
    ),
    (
        "LoadSetUp__22AnimCollisionEntityDSGP18tCompositeDrawableP16tMultiControllerPQ23sim15CollisionObjectP12tEntityStore",
        Ok(
            "AnimCollisionEntityDSG::LoadSetUp(tCompositeDrawable *, tMultiController *, sim::CollisionObject *, tEntityStore *)",
        ),
    ),
    (
        "SetAction__22AnimCollisionEntityDSGPQ212ActionButton10AnimSwitch",
        Ok(
            "AnimCollisionEntityDSG::SetAction(ActionButton::AnimSwitch *)",
        ),
    ),
    (
        "GetBoundingBox__22AnimCollisionEntityDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "AnimCollisionEntityDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__22AnimCollisionEntityDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "AnimCollisionEntityDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "Display__22AnimCollisionEntityDSG",
        Ok(
            "AnimCollisionEntityDSG::Display(void)",
        ),
    ),
    (
        "pPosition__22AnimCollisionEntityDSG",
        Ok(
            "AnimCollisionEntityDSG::pPosition(void)",
        ),
    ),
    (
        "rPosition__22AnimCollisionEntityDSG",
        Ok(
            "AnimCollisionEntityDSG::rPosition(void)",
        ),
    ),
    (
        "GetPosition__22AnimCollisionEntityDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "AnimCollisionEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "AdvanceAnimation__22AnimCollisionEntityDSGf",
        Ok(
            "AnimCollisionEntityDSG::AdvanceAnimation(float)",
        ),
    ),
    (
        "Update__22AnimCollisionEntityDSGf",
        Ok(
            "AnimCollisionEntityDSG::Update(float)",
        ),
    ),
    (
        "UpdatePose__22AnimCollisionEntityDSGf",
        Ok(
            "AnimCollisionEntityDSG::UpdatePose(float)",
        ),
    ),
    (
        "UpdateBBox__22AnimCollisionEntityDSGPQ23sim15CollisionVolume",
        Ok(
            "AnimCollisionEntityDSG::UpdateBBox(sim::CollisionVolume *)",
        ),
    ),
    (
        "UpdateVisibility__22AnimCollisionEntityDSG",
        Ok(
            "AnimCollisionEntityDSG::UpdateVisibility(void)",
        ),
    ),
    (
        "PreReactToCollision__22AnimCollisionEntityDSGPQ23sim8SimStateRQ23sim9Collision",
        Ok(
            "AnimCollisionEntityDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
        ),
    ),
    (
        "PostReactToCollision__22AnimCollisionEntityDSGRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "AnimCollisionEntityDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "GetPoseJoint__22AnimCollisionEntityDSGib",
        Ok(
            "AnimCollisionEntityDSG::GetPoseJoint(int, bool)",
        ),
    ),
    (
        "OnSetSimState__22AnimCollisionEntityDSGPQ23sim8SimState",
        Ok(
            "AnimCollisionEntityDSG::OnSetSimState(sim::SimState *)",
        ),
    ),
    (
        "findSoundName__22AnimCollisionEntityDSG",
        Ok(
            "AnimCollisionEntityDSG::findSoundName(void)",
        ),
    ),
    (
        "__13AnimEntityDSG",
        Ok(
            "AnimEntityDSG::AnimEntityDSG(void)",
        ),
    ),
    (
        "_$_13AnimEntityDSG",
        Ok(
            "AnimEntityDSG::~AnimEntityDSG(void)",
        ),
    ),
    (
        "Display__13AnimEntityDSG",
        Ok(
            "AnimEntityDSG::Display(void)",
        ),
    ),
    (
        "Reset__13AnimEntityDSG",
        Ok(
            "AnimEntityDSG::Reset(void)",
        ),
    ),
    (
        "pPosition__13AnimEntityDSG",
        Ok(
            "AnimEntityDSG::pPosition(void)",
        ),
    ),
    (
        "rPosition__13AnimEntityDSG",
        Ok(
            "AnimEntityDSG::rPosition(void)",
        ),
    ),
    (
        "GetPosition__13AnimEntityDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "AnimEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetAnimRootHeadingYUp__13AnimEntityDSGRQ218RadicalMathLibrary6Vector",
        Ok(
            "AnimEntityDSG::SetAnimRootHeadingYUp(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "SetPosition__13AnimEntityDSGRQ218RadicalMathLibrary6Vector",
        Ok(
            "AnimEntityDSG::SetPosition(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "Update__13AnimEntityDSGf",
        Ok(
            "AnimEntityDSG::Update(float)",
        ),
    ),
    (
        "LoadSetUp__13AnimEntityDSGP18tCompositeDrawableP16tMultiControllerP12tEntityStoreRQ218RadicalMathLibrary6Vector",
        Ok(
            "AnimEntityDSG::LoadSetUp(tCompositeDrawable *, tMultiController *, tEntityStore *, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "GetBoundingBox__13AnimEntityDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "AnimEntityDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__13AnimEntityDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "AnimEntityDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "PlaceOnGround__13AnimEntityDSGfb",
        Ok(
            "AnimEntityDSG::PlaceOnGround(float, bool)",
        ),
    ),
    (
        "FindEffectElements__13AnimEntityDSGP18tCompositeDrawable",
        Ok(
            "AnimEntityDSG::FindEffectElements(tCompositeDrawable *)",
        ),
    ),
    (
        "GetParticleSystemBoundingBox__13AnimEntityDSGP18tCompositeDrawablePQ218RadicalMathLibrary5Box3D",
        Ok(
            "AnimEntityDSG::GetParticleSystemBoundingBox(tCompositeDrawable *, RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "__18CollisionEntityDSG",
        Ok(
            "CollisionEntityDSG::CollisionEntityDSG(void)",
        ),
    ),
    (
        "_$_18CollisionEntityDSG",
        Ok(
            "CollisionEntityDSG::~CollisionEntityDSG(void)",
        ),
    ),
    (
        "SetSimState__18CollisionEntityDSGPQ23sim8SimState",
        Ok(
            "CollisionEntityDSG::SetSimState(sim::SimState *)",
        ),
    ),
    (
        "SetCollisionAttributes__18CollisionEntityDSGP19CollisionAttributes",
        Ok(
            "CollisionEntityDSG::SetCollisionAttributes(CollisionAttributes *)",
        ),
    ),
    (
        "SetRenderLayer__18CollisionEntityDSGQ211RenderEnums9LayerEnum",
        Ok(
            "CollisionEntityDSG::SetRenderLayer(RenderEnums::LayerEnum)",
        ),
    ),
    (
        "PostReactToCollision__18CollisionEntityDSGRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "CollisionEntityDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "GetCollisionAttributes__C18CollisionEntityDSG",
        Ok(
            "CollisionEntityDSG::GetCollisionAttributes(void) const",
        ),
    ),
    (
        "__19CollisionAttributesPcN21fffUif",
        Ok(
            "CollisionAttributes::CollisionAttributes(char *, char *, char *, float, float, float, unsigned int, float)",
        ),
    ),
    (
        "_$_19CollisionAttributes",
        Ok(
            "CollisionAttributes::~CollisionAttributes(void)",
        ),
    ),
    (
        "GetBreakable__19CollisionAttributes",
        Ok(
            "CollisionAttributes::GetBreakable(void)",
        ),
    ),
    (
        "GetParticle__19CollisionAttributes",
        Ok(
            "CollisionAttributes::GetParticle(void)",
        ),
    ),
    (
        "GetSound__19CollisionAttributes",
        Ok(
            "CollisionAttributes::GetSound(void)",
        ),
    ),
    (
        "GetMass__19CollisionAttributes",
        Ok(
            "CollisionAttributes::GetMass(void)",
        ),
    ),
    (
        "GetClasstypeid__19CollisionAttributes",
        Ok(
            "CollisionAttributes::GetClasstypeid(void)",
        ),
    ),
    (
        "SetSound__19CollisionAttributesPc",
        Ok(
            "CollisionAttributes::SetSound(char *)",
        ),
    ),
    (
        "SetClasstypeid__19CollisionAttributesUi",
        Ok(
            "CollisionAttributes::SetClasstypeid(unsigned int)",
        ),
    ),
    (
        "CreateInstance__10DSGFactory",
        Ok(
            "DSGFactory::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__10DSGFactory",
        Ok(
            "DSGFactory::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__10DSGFactory",
        Ok(
            "DSGFactory::DestroyInstance(void)",
        ),
    ),
    (
        "CreateIntersectDSG__10DSGFactoryP9tGeometry",
        Ok(
            "DSGFactory::CreateIntersectDSG(tGeometry *)",
        ),
    ),
    (
        "__10DSGFactory",
        Ok(
            "DSGFactory::DSGFactory(void)",
        ),
    ),
    (
        "_$_10DSGFactory",
        Ok(
            "DSGFactory::~DSGFactory(void)",
        ),
    ),
    (
        "__11DynaPhysDSG",
        Ok(
            "DynaPhysDSG::DynaPhysDSG(void)",
        ),
    ),
    (
        "_$_11DynaPhysDSG",
        Ok(
            "DynaPhysDSG::~DynaPhysDSG(void)",
        ),
    ),
    (
        "Update__11DynaPhysDSGf",
        Ok(
            "DynaPhysDSG::Update(float)",
        ),
    ),
    (
        "FetchGroundPlane__11DynaPhysDSG",
        Ok(
            "DynaPhysDSG::FetchGroundPlane(void)",
        ),
    ),
    (
        "FreeGroundPlane__11DynaPhysDSG",
        Ok(
            "DynaPhysDSG::FreeGroundPlane(void)",
        ),
    ),
    (
        "IsAtRest__11DynaPhysDSG",
        Ok(
            "DynaPhysDSG::IsAtRest(void)",
        ),
    ),
    (
        "RestTest__11DynaPhysDSG",
        Ok(
            "DynaPhysDSG::RestTest(void)",
        ),
    ),
    (
        "AddToSimulation__11DynaPhysDSG",
        Ok(
            "DynaPhysDSG::AddToSimulation(void)",
        ),
    ),
    (
        "ApplyForce__11DynaPhysDSGRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "DynaPhysDSG::ApplyForce(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "IsCollisionEnabled__C11DynaPhysDSG",
        Ok(
            "DynaPhysDSG::IsCollisionEnabled(void) const",
        ),
    ),
    (
        "__14FenceEntityDSG",
        Ok(
            "FenceEntityDSG::FenceEntityDSG(void)",
        ),
    ),
    (
        "_$_14FenceEntityDSG",
        Ok(
            "FenceEntityDSG::~FenceEntityDSG(void)",
        ),
    ),
    (
        "Display__14FenceEntityDSG",
        Ok(
            "FenceEntityDSG::Display(void)",
        ),
    ),
    (
        "GetBoundingBox__14FenceEntityDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "FenceEntityDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__14FenceEntityDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "FenceEntityDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "pPosition__14FenceEntityDSG",
        Ok(
            "FenceEntityDSG::pPosition(void)",
        ),
    ),
    (
        "rPosition__14FenceEntityDSG",
        Ok(
            "FenceEntityDSG::rPosition(void)",
        ),
    ),
    (
        "GetPosition__14FenceEntityDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "FenceEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "PreReactToCollision__14FenceEntityDSGPQ23sim8SimStateRQ23sim9Collision",
        Ok(
            "FenceEntityDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
        ),
    ),
    (
        "PostReactToCollision__14FenceEntityDSGRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "FenceEntityDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "__10IEntityDSG",
        Ok(
            "IEntityDSG::IEntityDSG(void)",
        ),
    ),
    (
        "Process__10IEntityDSGP7tShader",
        Ok(
            "IEntityDSG::Process(tShader *)",
        ),
    ),
    (
        "_$_10IEntityDSG",
        Ok(
            "IEntityDSG::~IEntityDSG(void)",
        ),
    ),
    (
        "RenderUpdate__10IEntityDSG",
        Ok(
            "IEntityDSG::RenderUpdate(void)",
        ),
    ),
    (
        "SetRank__10IEntityDSGRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "IEntityDSG::SetRank(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "__15InstDynaPhysDSG",
        Ok(
            "InstDynaPhysDSG::InstDynaPhysDSG(void)",
        ),
    ),
    (
        "_$_15InstDynaPhysDSG",
        Ok(
            "InstDynaPhysDSG::~InstDynaPhysDSG(void)",
        ),
    ),
    (
        "Display__15InstDynaPhysDSG",
        Ok(
            "InstDynaPhysDSG::Display(void)",
        ),
    ),
    (
        "GetBoundingBox__15InstDynaPhysDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "InstDynaPhysDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__15InstDynaPhysDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "InstDynaPhysDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "Update__15InstDynaPhysDSGf",
        Ok(
            "InstDynaPhysDSG::Update(float)",
        ),
    ),
    (
        "PreReactToCollision__15InstDynaPhysDSGPQ23sim8SimStateRQ23sim9Collision",
        Ok(
            "InstDynaPhysDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
        ),
    ),
    (
        "AddToSimulation__15InstDynaPhysDSG",
        Ok(
            "InstDynaPhysDSG::AddToSimulation(void)",
        ),
    ),
    (
        "PostReactToCollision__15InstDynaPhysDSGRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "InstDynaPhysDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "Break__15InstDynaPhysDSG",
        Ok(
            "InstDynaPhysDSG::Break(void)",
        ),
    ),
    (
        "OnSetSimState__15InstDynaPhysDSGPQ23sim8SimState",
        Ok(
            "InstDynaPhysDSG::OnSetSimState(sim::SimState *)",
        ),
    ),
    (
        "LoadSetUp__15InstDynaPhysDSGPQ23sim8SimStateP19CollisionAttributesRCQ218RadicalMathLibrary6MatrixP9tDrawableT4",
        Ok(
            "InstDynaPhysDSG::LoadSetUp(sim::SimState *, CollisionAttributes *, RadicalMathLibrary::Matrix const &, tDrawable *, tDrawable *)",
        ),
    ),
    (
        "Clone__15InstDynaPhysDSGPCcRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "InstDynaPhysDSG::Clone(char const *, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "SetRank__15InstDynaPhysDSGRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "InstDynaPhysDSG::SetRank(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "__17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG::InstStatEntityDSG(void)",
        ),
    ),
    (
        "_$_17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG::~InstStatEntityDSG(void)",
        ),
    ),
    (
        "Display__17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG::Display(void)",
        ),
    ),
    (
        "DisplaySimpleShadow__17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG::DisplaySimpleShadow(void)",
        ),
    ),
    (
        "RecomputeShadowPosition__17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG::RecomputeShadowPosition(void)",
        ),
    ),
    (
        "GetBoundingBox__17InstStatEntityDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "InstStatEntityDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__17InstStatEntityDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "InstStatEntityDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "pMatrix__17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG::pMatrix(void)",
        ),
    ),
    (
        "LoadSetUp__17InstStatEntityDSGPQ218RadicalMathLibrary6MatrixP9tGeometryP9tDrawable",
        Ok(
            "InstStatEntityDSG::LoadSetUp(RadicalMathLibrary::Matrix *, tGeometry *, tDrawable *)",
        ),
    ),
    (
        "LoadSetUp__17InstStatEntityDSGPQ218RadicalMathLibrary6MatrixP9tDrawableT2",
        Ok(
            "InstStatEntityDSG::LoadSetUp(RadicalMathLibrary::Matrix *, tDrawable *, tDrawable *)",
        ),
    ),
    (
        "pPosition__17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG::pPosition(void)",
        ),
    ),
    (
        "rPosition__17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG::rPosition(void)",
        ),
    ),
    (
        "GetPosition__17InstStatEntityDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "InstStatEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "CreateShadowMatrix__17InstStatEntityDSGRCQ218RadicalMathLibrary6Vector",
        Ok(
            "InstStatEntityDSG::CreateShadowMatrix(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "ComputeShadowMatrix__17InstStatEntityDSGRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Matrix",
        Ok(
            "InstStatEntityDSG::ComputeShadowMatrix(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "__15InstStatPhysDSG",
        Ok(
            "InstStatPhysDSG::InstStatPhysDSG(void)",
        ),
    ),
    (
        "_$_15InstStatPhysDSG",
        Ok(
            "InstStatPhysDSG::~InstStatPhysDSG(void)",
        ),
    ),
    (
        "Display__15InstStatPhysDSG",
        Ok(
            "InstStatPhysDSG::Display(void)",
        ),
    ),
    (
        "GetBoundingBox__15InstStatPhysDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "InstStatPhysDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__15InstStatPhysDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "InstStatPhysDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "OnSetSimState__15InstStatPhysDSGPQ23sim8SimState",
        Ok(
            "InstStatPhysDSG::OnSetSimState(sim::SimState *)",
        ),
    ),
    (
        "SetInternalState__15InstStatPhysDSG",
        Ok(
            "InstStatPhysDSG::SetInternalState(void)",
        ),
    ),
    (
        "LoadSetUp__15InstStatPhysDSGPQ23sim8SimStateP19CollisionAttributesRCQ218RadicalMathLibrary6MatrixP9tGeometry",
        Ok(
            "InstStatPhysDSG::LoadSetUp(sim::SimState *, CollisionAttributes *, RadicalMathLibrary::Matrix const &, tGeometry *)",
        ),
    ),
    (
        "Clone__C15InstStatPhysDSGPCcRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "InstStatPhysDSG::Clone(char const *, RadicalMathLibrary::Matrix const &) const",
        ),
    ),
    (
        "__12IntersectDSGP9tGeometry",
        Ok(
            "IntersectDSG::IntersectDSG(tGeometry *)",
        ),
    ),
    (
        "__12IntersectDSG",
        Ok(
            "IntersectDSG::IntersectDSG(void)",
        ),
    ),
    (
        "_$_12IntersectDSG",
        Ok(
            "IntersectDSG::~IntersectDSG(void)",
        ),
    ),
    (
        "Display__12IntersectDSG",
        Ok(
            "IntersectDSG::Display(void)",
        ),
    ),
    (
        "rPosition__12IntersectDSG",
        Ok(
            "IntersectDSG::rPosition(void)",
        ),
    ),
    (
        "pPosition__12IntersectDSG",
        Ok(
            "IntersectDSG::pPosition(void)",
        ),
    ),
    (
        "GetPosition__12IntersectDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "IntersectDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "IntoTheVoid_WithGoFastaStripes__12IntersectDSG",
        Ok(
            "IntersectDSG::IntoTheVoid_WithGoFastaStripes(void)",
        ),
    ),
    (
        "OutOfTheVoid_WithGoFastaStripes__12IntersectDSG",
        Ok(
            "IntersectDSG::OutOfTheVoid_WithGoFastaStripes(void)",
        ),
    ),
    (
        "mTri__12IntersectDSGiPQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "IntersectDSG::mTri(int, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "nTris__12IntersectDSG",
        Ok(
            "IntersectDSG::nTris(void)",
        ),
    ),
    (
        "GetBoundingBox__12IntersectDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "IntersectDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__12IntersectDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "IntersectDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "SetBoundingBox__12IntersectDSGffffff",
        Ok(
            "IntersectDSG::SetBoundingBox(float, float, float, float, float, float)",
        ),
    ),
    (
        "SetBoundingSphere__12IntersectDSGffff",
        Ok(
            "IntersectDSG::SetBoundingSphere(float, float, float, float)",
        ),
    ),
    (
        "GetNumPrimGroup__12IntersectDSG",
        Ok(
            "IntersectDSG::GetNumPrimGroup(void)",
        ),
    ),
    (
        "GenIDSG__12IntersectDSGP9tGeometry",
        Ok(
            "IntersectDSG::GenIDSG(tGeometry *)",
        ),
    ),
    (
        "PreParseTris__12IntersectDSGP18tPrimGroupStreamed",
        Ok(
            "IntersectDSG::PreParseTris(tPrimGroupStreamed *)",
        ),
    ),
    (
        "PreParseTriStrips__12IntersectDSGP18tPrimGroupStreamed",
        Ok(
            "IntersectDSG::PreParseTriStrips(tPrimGroupStreamed *)",
        ),
    ),
    (
        "DoAllAllocs__12IntersectDSG",
        Ok(
            "IntersectDSG::DoAllAllocs(void)",
        ),
    ),
    (
        "ParseTris__12IntersectDSGP18tPrimGroupStreamed",
        Ok(
            "IntersectDSG::ParseTris(tPrimGroupStreamed *)",
        ),
    ),
    (
        "ParseTriStrips__12IntersectDSGP18tPrimGroupStreamed",
        Ok(
            "IntersectDSG::ParseTriStrips(tPrimGroupStreamed *)",
        ),
    ),
    (
        "CalcAllFields__12IntersectDSG",
        Ok(
            "IntersectDSG::CalcAllFields(void)",
        ),
    ),
    (
        "__15StaticEntityDSG",
        Ok(
            "StaticEntityDSG::StaticEntityDSG(void)",
        ),
    ),
    (
        "_$_15StaticEntityDSG",
        Ok(
            "StaticEntityDSG::~StaticEntityDSG(void)",
        ),
    ),
    (
        "SetRank__15StaticEntityDSGRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "StaticEntityDSG::SetRank(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "SetGeometry__15StaticEntityDSGP9tGeometry",
        Ok(
            "StaticEntityDSG::SetGeometry(tGeometry *)",
        ),
    ),
    (
        "SetDrawable__15StaticEntityDSGP9tDrawable",
        Ok(
            "StaticEntityDSG::SetDrawable(tDrawable *)",
        ),
    ),
    (
        "Display__15StaticEntityDSG",
        Ok(
            "StaticEntityDSG::Display(void)",
        ),
    ),
    (
        "GetBoundingBox__15StaticEntityDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "StaticEntityDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__15StaticEntityDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "StaticEntityDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "pPosition__15StaticEntityDSG",
        Ok(
            "StaticEntityDSG::pPosition(void)",
        ),
    ),
    (
        "rPosition__15StaticEntityDSG",
        Ok(
            "StaticEntityDSG::rPosition(void)",
        ),
    ),
    (
        "GetPosition__15StaticEntityDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "StaticEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "RenderUpdate__15StaticEntityDSG",
        Ok(
            "StaticEntityDSG::RenderUpdate(void)",
        ),
    ),
    (
        "SetInternalState__15StaticEntityDSG",
        Ok(
            "StaticEntityDSG::SetInternalState(void)",
        ),
    ),
    (
        "__13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::StaticPhysDSG(void)",
        ),
    ),
    (
        "_$_13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::~StaticPhysDSG(void)",
        ),
    ),
    (
        "OnSetSimState__13StaticPhysDSGPQ23sim8SimState",
        Ok(
            "StaticPhysDSG::OnSetSimState(sim::SimState *)",
        ),
    ),
    (
        "GetSimState__C13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::GetSimState(void) const",
        ),
    ),
    (
        "Display__13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::Display(void)",
        ),
    ),
    (
        "GetBoundingBox__13StaticPhysDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "StaticPhysDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__13StaticPhysDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "StaticPhysDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "pPosition__13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::pPosition(void)",
        ),
    ),
    (
        "rPosition__13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::rPosition(void)",
        ),
    ),
    (
        "GetPosition__13StaticPhysDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "StaticPhysDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "RenderUpdate__13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::RenderUpdate(void)",
        ),
    ),
    (
        "SetInternalState__13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::SetInternalState(void)",
        ),
    ),
    (
        "PreReactToCollision__13StaticPhysDSGPQ23sim8SimStateRQ23sim9Collision",
        Ok(
            "StaticPhysDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
        ),
    ),
    (
        "PostReactToCollision__13StaticPhysDSGRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "StaticPhysDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "SetShadow__13StaticPhysDSGP9tDrawable",
        Ok(
            "StaticPhysDSG::SetShadow(tDrawable *)",
        ),
    ),
    (
        "CreateShadowMatrix__13StaticPhysDSGRCQ218RadicalMathLibrary6Vector",
        Ok(
            "StaticPhysDSG::CreateShadowMatrix(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "RecomputeShadowPosition__13StaticPhysDSGf",
        Ok(
            "StaticPhysDSG::RecomputeShadowPosition(float)",
        ),
    ),
    (
        "RecomputeShadowPositionNoIntersect__13StaticPhysDSGfRCQ218RadicalMathLibrary6Vectorff",
        Ok(
            "StaticPhysDSG::RecomputeShadowPositionNoIntersect(float, RadicalMathLibrary::Vector const &, float, float)",
        ),
    ),
    (
        "DisplaySimpleShadow__13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::DisplaySimpleShadow(void)",
        ),
    ),
    (
        "ComputeShadowMatrix__13StaticPhysDSGRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Matrix",
        Ok(
            "StaticPhysDSG::ComputeShadowMatrix(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "__14WorldSphereDSG",
        Ok(
            "WorldSphereDSG::WorldSphereDSG(void)",
        ),
    ),
    (
        "_$_14WorldSphereDSG",
        Ok(
            "WorldSphereDSG::~WorldSphereDSG(void)",
        ),
    ),
    (
        "Activate__14WorldSphereDSG",
        Ok(
            "WorldSphereDSG::Activate(void)",
        ),
    ),
    (
        "Deactivate__14WorldSphereDSG",
        Ok(
            "WorldSphereDSG::Deactivate(void)",
        ),
    ),
    (
        "SetNumMeshes__14WorldSphereDSGi",
        Ok(
            "WorldSphereDSG::SetNumMeshes(int)",
        ),
    ),
    (
        "SetNumBillBoardQuadGroups__14WorldSphereDSGi",
        Ok(
            "WorldSphereDSG::SetNumBillBoardQuadGroups(int)",
        ),
    ),
    (
        "SetFlare__14WorldSphereDSGP12LensFlareDSG",
        Ok(
            "WorldSphereDSG::SetFlare(LensFlareDSG *)",
        ),
    ),
    (
        "AddMesh__14WorldSphereDSGP9tGeometry",
        Ok(
            "WorldSphereDSG::AddMesh(tGeometry *)",
        ),
    ),
    (
        "AddBillBoardQuadGroup__14WorldSphereDSGP19tBillboardQuadGroup",
        Ok(
            "WorldSphereDSG::AddBillBoardQuadGroup(tBillboardQuadGroup *)",
        ),
    ),
    (
        "SetCompositeDrawable__14WorldSphereDSGP18tCompositeDrawable",
        Ok(
            "WorldSphereDSG::SetCompositeDrawable(tCompositeDrawable *)",
        ),
    ),
    (
        "SetMultiController__14WorldSphereDSGP16tMultiController",
        Ok(
            "WorldSphereDSG::SetMultiController(tMultiController *)",
        ),
    ),
    (
        "Display__14WorldSphereDSG",
        Ok(
            "WorldSphereDSG::Display(void)",
        ),
    ),
    (
        "GetBoundingBox__14WorldSphereDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "WorldSphereDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__14WorldSphereDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "WorldSphereDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "pPosition__14WorldSphereDSG",
        Ok(
            "WorldSphereDSG::pPosition(void)",
        ),
    ),
    (
        "rPosition__14WorldSphereDSG",
        Ok(
            "WorldSphereDSG::rPosition(void)",
        ),
    ),
    (
        "GetPosition__14WorldSphereDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "WorldSphereDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "RenderUpdate__14WorldSphereDSG",
        Ok(
            "WorldSphereDSG::RenderUpdate(void)",
        ),
    ),
    (
        "SetInternalState__14WorldSphereDSG",
        Ok(
            "WorldSphereDSG::SetInternalState(void)",
        ),
    ),
    (
        "__18BreakableObjectDSG",
        Ok(
            "BreakableObjectDSG::BreakableObjectDSG(void)",
        ),
    ),
    (
        "_$_18BreakableObjectDSG",
        Ok(
            "BreakableObjectDSG::~BreakableObjectDSG(void)",
        ),
    ),
    (
        "Init__18BreakableObjectDSGP22tAnimatedObjectFactoryP30tAnimatedObjectFrameController",
        Ok(
            "BreakableObjectDSG::Init(tAnimatedObjectFactory *, tAnimatedObjectFrameController *)",
        ),
    ),
    (
        "Display__18BreakableObjectDSG",
        Ok(
            "BreakableObjectDSG::Display(void)",
        ),
    ),
    (
        "GetBoundingBox__18BreakableObjectDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "BreakableObjectDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__18BreakableObjectDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "BreakableObjectDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "Update__18BreakableObjectDSGf",
        Ok(
            "BreakableObjectDSG::Update(float)",
        ),
    ),
    (
        "pPosition__18BreakableObjectDSG",
        Ok(
            "BreakableObjectDSG::pPosition(void)",
        ),
    ),
    (
        "rPosition__18BreakableObjectDSG",
        Ok(
            "BreakableObjectDSG::rPosition(void)",
        ),
    ),
    (
        "GetPosition__18BreakableObjectDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "BreakableObjectDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetTransform__18BreakableObjectDSGRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "BreakableObjectDSG::SetTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Reset__18BreakableObjectDSG",
        Ok(
            "BreakableObjectDSG::Reset(void)",
        ),
    ),
    (
        "LastFrameReached__18BreakableObjectDSG",
        Ok(
            "BreakableObjectDSG::LastFrameReached(void)",
        ),
    ),
    (
        "ClearAllFlares__12LensFlareDSG",
        Ok(
            "LensFlareDSG::ClearAllFlares(void)",
        ),
    ),
    (
        "DisplayAllFlares__12LensFlareDSG",
        Ok(
            "LensFlareDSG::DisplayAllFlares(void)",
        ),
    ),
    (
        "PostDisplayFlare__12LensFlareDSGP12LensFlareDSG",
        Ok(
            "LensFlareDSG::PostDisplayFlare(LensFlareDSG *)",
        ),
    ),
    (
        "ReadFrameBufferIntensities__12LensFlareDSG",
        Ok(
            "LensFlareDSG::ReadFrameBufferIntensities(void)",
        ),
    ),
    (
        "__12LensFlareDSG",
        Ok(
            "LensFlareDSG::LensFlareDSG(void)",
        ),
    ),
    (
        "_$_12LensFlareDSG",
        Ok(
            "LensFlareDSG::~LensFlareDSG(void)",
        ),
    ),
    (
        "SetNumBillBoardQuadGroups__12LensFlareDSGi",
        Ok(
            "LensFlareDSG::SetNumBillBoardQuadGroups(int)",
        ),
    ),
    (
        "AddBillBoardQuadGroup__12LensFlareDSGP19tBillboardQuadGroup",
        Ok(
            "LensFlareDSG::AddBillBoardQuadGroup(tBillboardQuadGroup *)",
        ),
    ),
    (
        "SetCompositeDrawable__12LensFlareDSGP18tCompositeDrawable",
        Ok(
            "LensFlareDSG::SetCompositeDrawable(tCompositeDrawable *)",
        ),
    ),
    (
        "Display__12LensFlareDSG",
        Ok(
            "LensFlareDSG::Display(void)",
        ),
    ),
    (
        "DisplayImmediate__12LensFlareDSG",
        Ok(
            "LensFlareDSG::DisplayImmediate(void)",
        ),
    ),
    (
        "GetBoundingBox__12LensFlareDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "LensFlareDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__12LensFlareDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "LensFlareDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "pPosition__12LensFlareDSG",
        Ok(
            "LensFlareDSG::pPosition(void)",
        ),
    ),
    (
        "rPosition__12LensFlareDSG",
        Ok(
            "LensFlareDSG::rPosition(void)",
        ),
    ),
    (
        "GetPosition__12LensFlareDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "LensFlareDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "RenderUpdate__12LensFlareDSG",
        Ok(
            "LensFlareDSG::RenderUpdate(void)",
        ),
    ),
    (
        "DrawVisibilityChecker__12LensFlareDSG",
        Ok(
            "LensFlareDSG::DrawVisibilityChecker(void)",
        ),
    ),
    (
        "SetBillBoardIntensity__12LensFlareDSGf",
        Ok(
            "LensFlareDSG::SetBillBoardIntensity(float)",
        ),
    ),
    (
        "__19InstAnimDynaPhysDSG",
        Ok(
            "InstAnimDynaPhysDSG::InstAnimDynaPhysDSG(void)",
        ),
    ),
    (
        "_$_19InstAnimDynaPhysDSG",
        Ok(
            "InstAnimDynaPhysDSG::~InstAnimDynaPhysDSG(void)",
        ),
    ),
    (
        "Display__19InstAnimDynaPhysDSG",
        Ok(
            "InstAnimDynaPhysDSG::Display(void)",
        ),
    ),
    (
        "DisplayBoundingBox__19InstAnimDynaPhysDSGG10pddiColour",
        Ok(
            "InstAnimDynaPhysDSG::DisplayBoundingBox(pddiColour)",
        ),
    ),
    (
        "LoadSetUp__19InstAnimDynaPhysDSGP19CollisionAttributesRCQ218RadicalMathLibrary6MatrixP18tCompositeDrawableP16tMultiControllerP12tEntityStore",
        Ok(
            "InstAnimDynaPhysDSG::LoadSetUp(CollisionAttributes *, RadicalMathLibrary::Matrix const &, tCompositeDrawable *, tMultiController *, tEntityStore *)",
        ),
    ),
    (
        "Break__19InstAnimDynaPhysDSG",
        Ok(
            "InstAnimDynaPhysDSG::Break(void)",
        ),
    ),
    (
        "Update__19InstAnimDynaPhysDSGf",
        Ok(
            "InstAnimDynaPhysDSG::Update(float)",
        ),
    ),
    (
        "SetTransform__19InstAnimDynaPhysDSGRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "InstAnimDynaPhysDSG::SetTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "__19AnimDynaPhysWrapper",
        Ok(
            "AnimDynaPhysWrapper::AnimDynaPhysWrapper(void)",
        ),
    ),
    (
        "_$_19AnimDynaPhysWrapper",
        Ok(
            "AnimDynaPhysWrapper::~AnimDynaPhysWrapper(void)",
        ),
    ),
    (
        "GetVolume__C19AnimDynaPhysWrapper",
        Ok(
            "AnimDynaPhysWrapper::GetVolume(void) const",
        ),
    ),
    (
        "GetDrawable__C19AnimDynaPhysWrapper",
        Ok(
            "AnimDynaPhysWrapper::GetDrawable(void) const",
        ),
    ),
    (
        "GetController__C19AnimDynaPhysWrapper",
        Ok(
            "AnimDynaPhysWrapper::GetController(void) const",
        ),
    ),
    (
        "GetStatePropData__C19AnimDynaPhysWrapper",
        Ok(
            "AnimDynaPhysWrapper::GetStatePropData(void) const",
        ),
    ),
    (
        "HasAlpha__C19AnimDynaPhysWrapper",
        Ok(
            "AnimDynaPhysWrapper::HasAlpha(void) const",
        ),
    ),
    (
        "__12StatePropDSG",
        Ok(
            "StatePropDSG::StatePropDSG(void)",
        ),
    ),
    (
        "_$_12StatePropDSG",
        Ok(
            "StatePropDSG::~StatePropDSG(void)",
        ),
    ),
    (
        "LoadSetup__12StatePropDSGP14CStatePropDataiRCQ218RadicalMathLibrary6MatrixP19CollisionAttributesbP12tEntityStoreT5PQ23sim15CollisionObjectPQ23sim13PhysicsObject",
        Ok(
            "StatePropDSG::LoadSetup(CStatePropData *, int, RadicalMathLibrary::Matrix const &, CollisionAttributes *, bool, tEntityStore *, bool, sim::CollisionObject *, sim::PhysicsObject *)",
        ),
    ),
    (
        "Clone__C12StatePropDSGPCcRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "StatePropDSG::Clone(char const *, RadicalMathLibrary::Matrix const &) const",
        ),
    ),
    (
        "OnSetSimState__12StatePropDSGPQ23sim8SimState",
        Ok(
            "StatePropDSG::OnSetSimState(sim::SimState *)",
        ),
    ),
    (
        "Display__12StatePropDSG",
        Ok(
            "StatePropDSG::Display(void)",
        ),
    ),
    (
        "AdvanceAnimation__12StatePropDSGf",
        Ok(
            "StatePropDSG::AdvanceAnimation(float)",
        ),
    ),
    (
        "Update__12StatePropDSGf",
        Ok(
            "StatePropDSG::Update(float)",
        ),
    ),
    (
        "GetBoundingBox__12StatePropDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "StatePropDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__12StatePropDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "StatePropDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "pPosition__12StatePropDSG",
        Ok(
            "StatePropDSG::pPosition(void)",
        ),
    ),
    (
        "rPosition__12StatePropDSG",
        Ok(
            "StatePropDSG::rPosition(void)",
        ),
    ),
    (
        "GetPosition__12StatePropDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "StatePropDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetPosition__12StatePropDSGRCQ218RadicalMathLibrary6Vector",
        Ok(
            "StatePropDSG::SetPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetTransform__12StatePropDSGPQ218RadicalMathLibrary6Matrix",
        Ok(
            "StatePropDSG::GetTransform(RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "SetTransform__12StatePropDSGRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "StatePropDSG::SetTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "PreReactToCollision__12StatePropDSGPQ23sim8SimStateRQ23sim9Collision",
        Ok(
            "StatePropDSG::PreReactToCollision(sim::SimState *, sim::Collision &)",
        ),
    ),
    (
        "PostReactToCollision__12StatePropDSGRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "StatePropDSG::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "GenerateCoins__12StatePropDSGi",
        Ok(
            "StatePropDSG::GenerateCoins(int)",
        ),
    ),
    (
        "RecieveEvent__12StatePropDSGiP10CStateProp",
        Ok(
            "StatePropDSG::RecieveEvent(int, CStateProp *)",
        ),
    ),
    (
        "AddToSimulation__12StatePropDSG",
        Ok(
            "StatePropDSG::AddToSimulation(void)",
        ),
    ),
    (
        "ApplyForce__12StatePropDSGRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "StatePropDSG::ApplyForce(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "CastsShadow__12StatePropDSG",
        Ok(
            "StatePropDSG::CastsShadow(void)",
        ),
    ),
    (
        "DisplaySimpleShadow__12StatePropDSG",
        Ok(
            "StatePropDSG::DisplaySimpleShadow(void)",
        ),
    ),
    (
        "SetRank__12StatePropDSGRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "StatePropDSG::SetRank(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "SetShadowElement__12StatePropDSGG13tUidUnaligned",
        Ok(
            "StatePropDSG::SetShadowElement(tUidUnaligned)",
        ),
    ),
    (
        "EnableCollisionVolume__12StatePropDSGb",
        Ok(
            "StatePropDSG::EnableCollisionVolume(bool)",
        ),
    ),
    (
        "RemoveSubCollisionVolume__12StatePropDSGi",
        Ok(
            "StatePropDSG::RemoveSubCollisionVolume(int)",
        ),
    ),
    (
        "GetAIRef__12StatePropDSG",
        Ok(
            "StatePropDSG::GetAIRef(void)",
        ),
    ),
    (
        "SetState__12StatePropDSGi",
        Ok(
            "StatePropDSG::SetState(int)",
        ),
    ),
    (
        "HandleEvent__12StatePropDSGQ212StatePropDSG5Event",
        Ok(
            "StatePropDSG::HandleEvent(StatePropDSG::Event)",
        ),
    ),
    (
        "GetState__C12StatePropDSG",
        Ok(
            "StatePropDSG::GetState(void) const",
        ),
    ),
    (
        "AddStatePropListener__12StatePropDSGP18CStatePropListener",
        Ok(
            "StatePropDSG::AddStatePropListener(CStatePropListener *)",
        ),
    ),
    (
        "RemoveStatePropListener__12StatePropDSGP18CStatePropListener",
        Ok(
            "StatePropDSG::RemoveStatePropListener(CStatePropListener *)",
        ),
    ),
    (
        "SetSimJoint__12StatePropDSGi",
        Ok(
            "StatePropDSG::SetSimJoint(int)",
        ),
    ),
    (
        "GetType__C12StatePropDSG",
        Ok(
            "StatePropDSG::GetType(void) const",
        ),
    ),
    (
        "RemoveAllSharedtPoses__12StatePropDSG",
        Ok(
            "StatePropDSG::RemoveAllSharedtPoses(void)",
        ),
    ),
    (
        "AnimateCollisionVolume__12StatePropDSG",
        Ok(
            "StatePropDSG::AnimateCollisionVolume(void)",
        ),
    ),
    (
        "GetSharedtPose__12StatePropDSGG13tUidUnaligned",
        Ok(
            "StatePropDSG::GetSharedtPose(tUidUnaligned)",
        ),
    ),
    (
        "AddNewSharedtPose__12StatePropDSGG13tUidUnalignedP5tPose",
        Ok(
            "StatePropDSG::AddNewSharedtPose(tUidUnaligned, tPose *)",
        ),
    ),
    (
        "__t3Map2Z13tUidUnalignedZP5tPose",
        Ok(
            "Map<tUidUnaligned, tPose *>::Map(void)",
        ),
    ),
    (
        "__t10MapElement2Z13tUidUnalignedZP5tPoseRCt10MapElement2Z13tUidUnalignedZP5tPose",
        Ok(
            "MapElement<tUidUnaligned, tPose *>::MapElement(MapElement<tUidUnaligned, tPose *> const &)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZPt10MapElement2Z13tUidUnalignedZP5tPoseZPt10MapElement2Z13tUidUnalignedZP5tPose_X01X01X11G12__false_type_X11",
        Ok(
            "MapElement<tUidUnaligned, tPose *> * __uninitialized_copy_aux<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, __false_type)",
        ),
    ),
    (
        "reserve__t3Map2Z13tUidUnalignedZP5tPoseUi",
        Ok(
            "Map<tUidUnaligned, tPose *>::reserve(unsigned int)",
        ),
    ),
    (
        "begin__t3Map2Z13tUidUnalignedZP5tPose",
        Ok(
            "Map<tUidUnaligned, tPose *>::begin(void)",
        ),
    ),
    (
        "end__t3Map2Z13tUidUnalignedZP5tPose",
        Ok(
            "Map<tUidUnaligned, tPose *>::end(void)",
        ),
    ),
    (
        "__as__t10MapElement2Z13tUidUnalignedZP5tPoseRCt10MapElement2Z13tUidUnalignedZP5tPose",
        Ok(
            "MapElement<tUidUnaligned, tPose *>::operator=(MapElement<tUidUnaligned, tPose *> const &)",
        ),
    ),
    (
        "__push_heap__H3ZPt10MapElement2Z13tUidUnalignedZP5tPoseZiZt10MapElement2Z13tUidUnalignedZP5tPose_X01X11X11X21_v",
        Ok(
            "void __push_heap<MapElement<tUidUnaligned, tPose *> *, int, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, int, int, MapElement<tUidUnaligned, tPose *>)",
        ),
    ),
    (
        "__adjust_heap__H3ZPt10MapElement2Z13tUidUnalignedZP5tPoseZiZt10MapElement2Z13tUidUnalignedZP5tPose_X01X11X11X21_v",
        Ok(
            "void __adjust_heap<MapElement<tUidUnaligned, tPose *> *, int, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, int, int, MapElement<tUidUnaligned, tPose *>)",
        ),
    ),
    (
        "__make_heap__H3ZPt10MapElement2Z13tUidUnalignedZP5tPoseZt10MapElement2Z13tUidUnalignedZP5tPoseZi_X01X01PX11PX21_v",
        Ok(
            "void __make_heap<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *>, int>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, int *)",
        ),
    ),
    (
        "sort_heap__H1ZPt10MapElement2Z13tUidUnalignedZP5tPose_X01X01_v",
        Ok(
            "void sort_heap<MapElement<tUidUnaligned, tPose *> *>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *)",
        ),
    ),
    (
        "__partial_sort__H2ZPt10MapElement2Z13tUidUnalignedZP5tPoseZt10MapElement2Z13tUidUnalignedZP5tPose_X01X01X01PX11_v",
        Ok(
            "void __partial_sort<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *)",
        ),
    ),
    (
        "__unguarded_partition__H2ZPt10MapElement2Z13tUidUnalignedZP5tPoseZt10MapElement2Z13tUidUnalignedZP5tPose_X01X01X11_X01",
        Ok(
            "MapElement<tUidUnaligned, tPose *> * __unguarded_partition<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *>)",
        ),
    ),
    (
        "__introsort_loop__H3ZPt10MapElement2Z13tUidUnalignedZP5tPoseZt10MapElement2Z13tUidUnalignedZP5tPoseZi_X01X01PX11X21_v",
        Ok(
            "void __introsort_loop<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *>, int>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, int)",
        ),
    ),
    (
        "__unguarded_linear_insert__H2ZPt10MapElement2Z13tUidUnalignedZP5tPoseZt10MapElement2Z13tUidUnalignedZP5tPose_X01X11_v",
        Ok(
            "void __unguarded_linear_insert<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *>)",
        ),
    ),
    (
        "__insertion_sort__H1ZPt10MapElement2Z13tUidUnalignedZP5tPose_X01X01_v",
        Ok(
            "void __insertion_sort<MapElement<tUidUnaligned, tPose *> *>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *)",
        ),
    ),
    (
        "__unguarded_insertion_sort_aux__H2ZPt10MapElement2Z13tUidUnalignedZP5tPoseZt10MapElement2Z13tUidUnalignedZP5tPose_X01X01PX11_v",
        Ok(
            "void __unguarded_insertion_sort_aux<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> >(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *)",
        ),
    ),
    (
        "__final_insertion_sort__H1ZPt10MapElement2Z13tUidUnalignedZP5tPose_X01X01_v",
        Ok(
            "void __final_insertion_sort<MapElement<tUidUnaligned, tPose *> *>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *)",
        ),
    ),
    (
        "RefreshIfDirty__Ct3Map2Z13tUidUnalignedZP5tPose",
        Ok(
            "Map<tUidUnaligned, tPose *>::RefreshIfDirty(void) const",
        ),
    ),
    (
        "__t10MapElement2Z13tUidUnalignedZP5tPose",
        Ok(
            "MapElement<tUidUnaligned, tPose *>::MapElement(void)",
        ),
    ),
    (
        "__lower_bound__H3ZPt10MapElement2Z13tUidUnalignedZP5tPoseZt10MapElement2Z13tUidUnalignedZP5tPoseZi_X01X01RCX11PX21_X01",
        Ok(
            "MapElement<tUidUnaligned, tPose *> * __lower_bound<MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *>, int>(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> const &, int *)",
        ),
    ),
    (
        "find__t3Map2Z13tUidUnalignedZP5tPoseRC13tUidUnaligned",
        Ok(
            "Map<tUidUnaligned, tPose *>::find(tUidUnaligned const &)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2Zt10MapElement2Z13tUidUnalignedZP5tPoseZt7s2alloc1Zt10MapElement2Z13tUidUnalignedZP5tPosePt10MapElement2Z13tUidUnalignedZP5tPoseRCt10MapElement2Z13tUidUnalignedZP5tPose",
        Ok(
            "vector<MapElement<tUidUnaligned, tPose *>, s2alloc<MapElement<tUidUnaligned, tPose *> > >::_M_insert_aux(MapElement<tUidUnaligned, tPose *> *, MapElement<tUidUnaligned, tPose *> const &)",
        ),
    ),
    (
        "insert__t3Map2Z13tUidUnalignedZP5tPoseRC13tUidUnalignedRCP5tPose",
        Ok(
            "Map<tUidUnaligned, tPose *>::insert(tUidUnaligned const &, tPose *const &)",
        ),
    ),
    (
        "__tf10IEntityDSG",
        Ok(
            "IEntityDSG type_info function",
        ),
    ),
    (
        "__tf19CollisionAttributes",
        Ok(
            "CollisionAttributes type_info function",
        ),
    ),
    (
        "__tf18CollisionEntityDSG",
        Ok(
            "CollisionEntityDSG type_info function",
        ),
    ),
    (
        "__tf22AnimCollisionEntityDSG",
        Ok(
            "AnimCollisionEntityDSG type_info function",
        ),
    ),
    (
        "__tf13StaticPhysDSG",
        Ok(
            "StaticPhysDSG type_info function",
        ),
    ),
    (
        "__tf11DynaPhysDSG",
        Ok(
            "DynaPhysDSG type_info function",
        ),
    ),
    (
        "__tf15InstDynaPhysDSG",
        Ok(
            "InstDynaPhysDSG type_info function",
        ),
    ),
    (
        "__tf15StaticEntityDSG",
        Ok(
            "StaticEntityDSG type_info function",
        ),
    ),
    (
        "__tf17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG type_info function",
        ),
    ),
    (
        "__tf13AnimEntityDSG",
        Ok(
            "AnimEntityDSG type_info function",
        ),
    ),
    (
        "__tf12IntersectDSG",
        Ok(
            "IntersectDSG type_info function",
        ),
    ),
    (
        "__tf14FenceEntityDSG",
        Ok(
            "FenceEntityDSG type_info function",
        ),
    ),
    (
        "__tf18BreakableObjectDSG",
        Ok(
            "BreakableObjectDSG type_info function",
        ),
    ),
    (
        "__tf15InstStatPhysDSG",
        Ok(
            "InstStatPhysDSG type_info function",
        ),
    ),
    (
        "__tf12LensFlareDSG",
        Ok(
            "LensFlareDSG type_info function",
        ),
    ),
    (
        "__tf14WorldSphereDSG",
        Ok(
            "WorldSphereDSG type_info function",
        ),
    ),
    (
        "__tf19InstAnimDynaPhysDSG",
        Ok(
            "InstAnimDynaPhysDSG type_info function",
        ),
    ),
    (
        "__tf19AnimDynaPhysWrapper",
        Ok(
            "AnimDynaPhysWrapper type_info function",
        ),
    ),
    (
        "__tf12StatePropDSG",
        Ok(
            "StatePropDSG type_info function",
        ),
    ),
    (
        "__Q29tDrawable14ShaderCallback",
        Ok(
            "tDrawable::ShaderCallback::ShaderCallback(void)",
        ),
    ),
    (
        "SetShadow__10IEntityDSGP11tShadowSkin",
        Ok(
            "IEntityDSG::SetShadow(tShadowSkin *)",
        ),
    ),
    (
        "SetShadow__10IEntityDSGP11tShadowMesh",
        Ok(
            "IEntityDSG::SetShadow(tShadowMesh *)",
        ),
    ),
    (
        "CastsShadow__10IEntityDSG",
        Ok(
            "IEntityDSG::CastsShadow(void)",
        ),
    ),
    (
        "DisplayShadow__10IEntityDSG",
        Ok(
            "IEntityDSG::DisplayShadow(void)",
        ),
    ),
    (
        "DisplaySimpleShadow__10IEntityDSG",
        Ok(
            "IEntityDSG::DisplaySimpleShadow(void)",
        ),
    ),
    (
        "SetShader__10IEntityDSGP7tShaderi",
        Ok(
            "IEntityDSG::SetShader(tShader *, int)",
        ),
    ),
    (
        "GetPosition__10IEntityDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "IEntityDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "OnSetSimState__18CollisionEntityDSGPQ23sim8SimState",
        Ok(
            "CollisionEntityDSG::OnSetSimState(sim::SimState *)",
        ),
    ),
    (
        "GetAIRef__22AnimCollisionEntityDSG",
        Ok(
            "AnimCollisionEntityDSG::GetAIRef(void)",
        ),
    ),
    (
        "mpSimState__C13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::mpSimState(void) const",
        ),
    ),
    (
        "CastsShadow__13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::CastsShadow(void)",
        ),
    ),
    (
        "GetAIRef__13StaticPhysDSG",
        Ok(
            "StaticPhysDSG::GetAIRef(void)",
        ),
    ),
    (
        "OnTransitToAICtrl__11DynaPhysDSG",
        Ok(
            "DynaPhysDSG::OnTransitToAICtrl(void)",
        ),
    ),
    (
        "GetGroundPlaneIndex__11DynaPhysDSG",
        Ok(
            "DynaPhysDSG::GetGroundPlaneIndex(void)",
        ),
    ),
    (
        "GetAIRef__15InstDynaPhysDSG",
        Ok(
            "InstDynaPhysDSG::GetAIRef(void)",
        ),
    ),
    (
        "SetShader__15StaticEntityDSGP7tShaderi",
        Ok(
            "StaticEntityDSG::SetShader(tShader *, int)",
        ),
    ),
    (
        "SetShader__17InstStatEntityDSGP7tShaderi",
        Ok(
            "InstStatEntityDSG::SetShader(tShader *, int)",
        ),
    ),
    (
        "CastsShadow__17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG::CastsShadow(void)",
        ),
    ),
    (
        "SetVisibility__13AnimEntityDSGb",
        Ok(
            "AnimEntityDSG::SetVisibility(bool)",
        ),
    ),
    (
        "GetVisibility__C13AnimEntityDSG",
        Ok(
            "AnimEntityDSG::GetVisibility(void) const",
        ),
    ),
    (
        "PlayAnimation__13AnimEntityDSGb",
        Ok(
            "AnimEntityDSG::PlayAnimation(bool)",
        ),
    ),
    (
        "RenderUpdate__13AnimEntityDSG",
        Ok(
            "AnimEntityDSG::RenderUpdate(void)",
        ),
    ),
    (
        "GetAIRef__14FenceEntityDSG",
        Ok(
            "FenceEntityDSG::GetAIRef(void)",
        ),
    ),
    (
        "SetShader__12LensFlareDSGP7tShaderi",
        Ok(
            "LensFlareDSG::SetShader(tShader *, int)",
        ),
    ),
    (
        "_$_t3Map2Z13tUidUnalignedZP5tPose",
        Ok(
            "Map<tUidUnaligned, tPose *>::~Map(void)",
        ),
    ),
    (
        "HasAlpha__C12StatePropDSG",
        Ok(
            "StatePropDSG::HasAlpha(void) const",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ23sim13PhysicsObject",
        Ok(
            "radLoadInventory::SafeCast<sim::PhysicsObject>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ29tDrawable14ShaderCallback",
        Ok(
            "tDrawable::ShaderCallback type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ23sim13PhysicsObject",
        Ok(
            "radLoadInventory::SafeCast<sim::PhysicsObject> type_info function",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3Zt10MapElement2Z13tUidUnalignedZP5tPoseZt7s2alloc1Zt10MapElement2Z13tUidUnalignedZP5tPoseb0",
        Ok(
            "_Vector_alloc_base<MapElement<tUidUnaligned, tPose *>, s2alloc<MapElement<tUidUnaligned, tPose *> >, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ23sim13PhysicsObjectP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<sim::PhysicsObject>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$__22AnimCollisionEntityDSG",
        Ok(
            "global constructors keyed to AnimCollisionEntityDSG::AnimCollisionEntityDSG(void)",
        ),
    ),
    (
        "_GLOBAL_$D$__22AnimCollisionEntityDSG",
        Ok(
            "global destructors keyed to AnimCollisionEntityDSG::AnimCollisionEntityDSG(void)",
        ),
    ),
    (
        "CreateInstance__17BreakablesManager",
        Ok(
            "BreakablesManager::CreateInstance(void)",
        ),
    ),
    (
        "DestroyInstance__17BreakablesManager",
        Ok(
            "BreakablesManager::DestroyInstance(void)",
        ),
    ),
    (
        "GetInstance__17BreakablesManager",
        Ok(
            "BreakablesManager::GetInstance(void)",
        ),
    ),
    (
        "__17BreakablesManager",
        Ok(
            "BreakablesManager::BreakablesManager(void)",
        ),
    ),
    (
        "_$_17BreakablesManager",
        Ok(
            "BreakablesManager::~BreakablesManager(void)",
        ),
    ),
    (
        "__Q217BreakablesManager16ManagedBreakable",
        Ok(
            "BreakablesManager::ManagedBreakable::ManagedBreakable(void)",
        ),
    ),
    (
        "_$_Q217BreakablesManager16ManagedBreakable",
        Ok(
            "BreakablesManager::ManagedBreakable::~ManagedBreakable(void)",
        ),
    ),
    (
        "AddToDSG__Q217BreakablesManager16ManagedBreakable",
        Ok(
            "BreakablesManager::ManagedBreakable::AddToDSG(void)",
        ),
    ),
    (
        "RemoveFromDSG__Q217BreakablesManager16ManagedBreakable",
        Ok(
            "BreakablesManager::ManagedBreakable::RemoveFromDSG(void)",
        ),
    ),
    (
        "Update__17BreakablesManagerUi",
        Ok(
            "BreakablesManager::Update(unsigned int)",
        ),
    ),
    (
        "AllocateBreakables__17BreakablesManagerQ214BreakablesEnum11BreakableIDP22tAnimatedObjectFactoryP30tAnimatedObjectFrameControlleri",
        Ok(
            "BreakablesManager::AllocateBreakables(BreakablesEnum::BreakableID, tAnimatedObjectFactory *, tAnimatedObjectFrameController *, int)",
        ),
    ),
    (
        "FreeBreakables__17BreakablesManagerQ214BreakablesEnum11BreakableID",
        Ok(
            "BreakablesManager::FreeBreakables(BreakablesEnum::BreakableID)",
        ),
    ),
    (
        "RemoveFromDSG__17BreakablesManagerQ214BreakablesEnum11BreakableID",
        Ok(
            "BreakablesManager::RemoveFromDSG(BreakablesEnum::BreakableID)",
        ),
    ),
    (
        "FreeAllBreakables__17BreakablesManager",
        Ok(
            "BreakablesManager::FreeAllBreakables(void)",
        ),
    ),
    (
        "RemoveBrokenObjectFromWorld__17BreakablesManagerP10IEntityDSGQ211RenderEnums9LayerEnumb",
        Ok(
            "BreakablesManager::RemoveBrokenObjectFromWorld(IEntityDSG *, RenderEnums::LayerEnum, bool)",
        ),
    ),
    (
        "Play__17BreakablesManagerQ214BreakablesEnum11BreakableIDRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "BreakablesManager::Play(BreakablesEnum::BreakableID, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "HandleEvent__17BreakablesManager9EventEnumPv",
        Ok(
            "BreakablesManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Next__Q217BreakablesManager18BreakableInstances",
        Ok(
            "BreakablesManager::BreakableInstances::Next(void)",
        ),
    ),
    (
        "IsLoaded__17BreakablesManagerQ214BreakablesEnum11BreakableID",
        Ok(
            "BreakablesManager::IsLoaded(BreakablesEnum::BreakableID)",
        ),
    ),
    (
        "AddToZoneList__17BreakablesManagerQ214BreakablesEnum11BreakableID",
        Ok(
            "BreakablesManager::AddToZoneList(BreakablesEnum::BreakableID)",
        ),
    ),
    (
        "__uninitialized_fill_n_aux__H3ZPQ217BreakablesManager18BreakableInstancesZUiZQ217BreakablesManager18BreakableInstances_X01X11RCX21G12__false_type_X01",
        Ok(
            "BreakablesManager::BreakableInstances * __uninitialized_fill_n_aux<BreakablesManager::BreakableInstances *, unsigned int, BreakablesManager::BreakableInstances>(BreakablesManager::BreakableInstances *, unsigned int, BreakablesManager::BreakableInstances const &, __false_type)",
        ),
    ),
    (
        "__tf17BreakablesManager",
        Ok(
            "BreakablesManager type_info function",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3ZQ217BreakablesManager18BreakableInstancesZt7s2alloc1ZQ217BreakablesManager18BreakableInstancesb0",
        Ok(
            "_Vector_alloc_base<BreakablesManager::BreakableInstances, s2alloc<BreakablesManager::BreakableInstances>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "__17SkidMarkGenerator",
        Ok(
            "SkidMarkGenerator::SkidMarkGenerator(void)",
        ),
    ),
    (
        "_$_17SkidMarkGenerator",
        Ok(
            "SkidMarkGenerator::~SkidMarkGenerator(void)",
        ),
    ),
    (
        "InitShaders__17SkidMarkGenerator",
        Ok(
            "SkidMarkGenerator::InitShaders(void)",
        ),
    ),
    (
        "GetShader__17SkidMarkGenerator12eTerrainType",
        Ok(
            "SkidMarkGenerator::GetShader(eTerrainType)",
        ),
    ),
    (
        "ReleaseShaders__17SkidMarkGenerator",
        Ok(
            "SkidMarkGenerator::ReleaseShaders(void)",
        ),
    ),
    (
        "GenerateSkid__17SkidMarkGeneratoriRCQ217SkidMarkGenerator8SkidData",
        Ok(
            "SkidMarkGenerator::GenerateSkid(int, SkidMarkGenerator::SkidData const &)",
        ),
    ),
    (
        "Update__17SkidMarkGenerator",
        Ok(
            "SkidMarkGenerator::Update(void)",
        ),
    ),
    (
        "__Q215SkidmarkManager15ManagedSkidmark",
        Ok(
            "SkidmarkManager::ManagedSkidmark::ManagedSkidmark(void)",
        ),
    ),
    (
        "_$_Q215SkidmarkManager15ManagedSkidmark",
        Ok(
            "SkidmarkManager::ManagedSkidmark::~ManagedSkidmark(void)",
        ),
    ),
    (
        "__15SkidmarkManager",
        Ok(
            "SkidmarkManager::SkidmarkManager(void)",
        ),
    ),
    (
        "_$_15SkidmarkManager",
        Ok(
            "SkidmarkManager::~SkidmarkManager(void)",
        ),
    ),
    (
        "CreateInstance__15SkidmarkManager",
        Ok(
            "SkidmarkManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__15SkidmarkManager",
        Ok(
            "SkidmarkManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__15SkidmarkManager",
        Ok(
            "SkidmarkManager::DestroyInstance(void)",
        ),
    ),
    (
        "Update__15SkidmarkManagerUi",
        Ok(
            "SkidmarkManager::Update(unsigned int)",
        ),
    ),
    (
        "GetUnusedSkidmark__15SkidmarkManager",
        Ok(
            "SkidmarkManager::GetUnusedSkidmark(void)",
        ),
    ),
    (
        "ReturnUsedSkidmark__15SkidmarkManagerP8Skidmark",
        Ok(
            "SkidmarkManager::ReturnUsedSkidmark(Skidmark *)",
        ),
    ),
    (
        "Init__15SkidmarkManageri",
        Ok(
            "SkidmarkManager::Init(int)",
        ),
    ),
    (
        "Destroy__15SkidmarkManager",
        Ok(
            "SkidmarkManager::Destroy(void)",
        ),
    ),
    (
        "__8Skidmark",
        Ok(
            "Skidmark::Skidmark(void)",
        ),
    ),
    (
        "_$_8Skidmark",
        Ok(
            "Skidmark::~Skidmark(void)",
        ),
    ),
    (
        "IsVisible__C8Skidmark",
        Ok(
            "Skidmark::IsVisible(void) const",
        ),
    ),
    (
        "Display__8Skidmark",
        Ok(
            "Skidmark::Display(void)",
        ),
    ),
    (
        "Extend__8SkidmarkRCQ218RadicalMathLibrary6VectorT1GQ218RadicalMathLibrary6Vectorff",
        Ok(
            "Skidmark::Extend(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector, float, float)",
        ),
    ),
    (
        "ClearVertices__8Skidmark",
        Ok(
            "Skidmark::ClearVertices(void)",
        ),
    ),
    (
        "ContinueSkidmark__8SkidmarkP8Skidmark",
        Ok(
            "Skidmark::ContinueSkidmark(Skidmark *)",
        ),
    ),
    (
        "FadeInVertices__8Skidmark",
        Ok(
            "Skidmark::FadeInVertices(void)",
        ),
    ),
    (
        "FadeOutTrailingVertices__8Skidmark",
        Ok(
            "Skidmark::FadeOutTrailingVertices(void)",
        ),
    ),
    (
        "FadeOut__8Skidmarkf",
        Ok(
            "Skidmark::FadeOut(float)",
        ),
    ),
    (
        "AddToDSG__8SkidmarkQ211RenderEnums9LayerEnum",
        Ok(
            "Skidmark::AddToDSG(RenderEnums::LayerEnum)",
        ),
    ),
    (
        "RemoveFromDSG__8Skidmark",
        Ok(
            "Skidmark::RemoveFromDSG(void)",
        ),
    ),
    (
        "SetShader__8SkidmarkP7tShader",
        Ok(
            "Skidmark::SetShader(tShader *)",
        ),
    ),
    (
        "WriteVertices__8SkidmarkRCQ218RadicalMathLibrary6VectorT1fUcff",
        Ok(
            "Skidmark::WriteVertices(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, unsigned char, float, float)",
        ),
    ),
    (
        "ExtendVertices__8SkidmarkRCQ218RadicalMathLibrary6VectorT1fUcff",
        Ok(
            "Skidmark::ExtendVertices(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, unsigned char, float, float)",
        ),
    ),
    (
        "FindTextureBreakPosition__8SkidmarkRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6VectorPfN23",
        Ok(
            "Skidmark::FindTextureBreakPosition(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *, float *, float *, float *)",
        ),
    ),
    (
        "MoveInDSG__8SkidmarkRQ218RadicalMathLibrary5Box3D",
        Ok(
            "Skidmark::MoveInDSG(RadicalMathLibrary::Box3D &)",
        ),
    ),
    (
        "__tf8Skidmark",
        Ok(
            "Skidmark type_info function",
        ),
    ),
    (
        "__Q28Skidmark7Segment",
        Ok(
            "Skidmark::Segment::Segment(void)",
        ),
    ),
    (
        "GetBoundingBox__8SkidmarkPQ218RadicalMathLibrary5Box3D",
        Ok(
            "Skidmark::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__8SkidmarkPQ218RadicalMathLibrary6Sphere",
        Ok(
            "Skidmark::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z7tShader",
        Ok(
            "radLoadInventory::SafeCast<tShader>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z7tShader",
        Ok(
            "radLoadInventory::SafeCast<tShader> type_info function",
        ),
    ),
    (
        "__Q28Skidmark6Vertex",
        Ok(
            "Skidmark::Vertex::Vertex(void)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z7tShaderP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tShader>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "CreateInstance__16IntersectManager",
        Ok(
            "IntersectManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__16IntersectManager",
        Ok(
            "IntersectManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__16IntersectManager",
        Ok(
            "IntersectManager::DestroyInstance(void)",
        ),
    ),
    (
        "IntersectWithPlane__16IntersectManagerGQ218RadicalMathLibrary6VectorN31Rf",
        Ok(
            "IntersectManager::IntersectWithPlane(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, float &)",
        ),
    ),
    (
        "ResetCache__16IntersectManagerRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "IntersectManager::ResetCache(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "FindClosestRoad__16IntersectManagerRCQ218RadicalMathLibrary6VectorfRP11RoadSegmentRf",
        Ok(
            "IntersectManager::FindClosestRoad(RadicalMathLibrary::Vector const &, float, RoadSegment *&, float &)",
        ),
    ),
    (
        "FindClosestAnyRoad__16IntersectManagerRCQ218RadicalMathLibrary6VectorfRP11RoadSegmentRf",
        Ok(
            "IntersectManager::FindClosestAnyRoad(RadicalMathLibrary::Vector const &, float, RoadSegment *&, float &)",
        ),
    ),
    (
        "FindFenceElems__16IntersectManagerRQ218RadicalMathLibrary6VectorfRt12ReserveArray1ZP14FenceEntityDSG",
        Ok(
            "IntersectManager::FindFenceElems(RadicalMathLibrary::Vector &, float, ReserveArray<FenceEntityDSG *> &)",
        ),
    ),
    (
        "FindStaticPhysElems__16IntersectManagerRQ218RadicalMathLibrary6VectorfRt12ReserveArray1ZP13StaticPhysDSG",
        Ok(
            "IntersectManager::FindStaticPhysElems(RadicalMathLibrary::Vector &, float, ReserveArray<StaticPhysDSG *> &)",
        ),
    ),
    (
        "FindDynaPhysElems__16IntersectManagerRQ218RadicalMathLibrary6VectorfRt12ReserveArray1ZP11DynaPhysDSG",
        Ok(
            "IntersectManager::FindDynaPhysElems(RadicalMathLibrary::Vector &, float, ReserveArray<DynaPhysDSG *> &)",
        ),
    ),
    (
        "FindAnimPhysElems__16IntersectManagerRQ218RadicalMathLibrary6VectorfRt12ReserveArray1ZP22AnimCollisionEntityDSG",
        Ok(
            "IntersectManager::FindAnimPhysElems(RadicalMathLibrary::Vector &, float, ReserveArray<AnimCollisionEntityDSG *> &)",
        ),
    ),
    (
        "FindRoadSegmentElems__16IntersectManagerRQ218RadicalMathLibrary6VectorfRt12ReserveArray1ZP11RoadSegment",
        Ok(
            "IntersectManager::FindRoadSegmentElems(RadicalMathLibrary::Vector &, float, ReserveArray<RoadSegment *> &)",
        ),
    ),
    (
        "FindPathSegmentElems__16IntersectManagerRQ218RadicalMathLibrary6VectorfRt12ReserveArray1ZP11PathSegment",
        Ok(
            "IntersectManager::FindPathSegmentElems(RadicalMathLibrary::Vector &, float, ReserveArray<PathSegment *> &)",
        ),
    ),
    (
        "FindIntersection__16IntersectManagerRQ218RadicalMathLibrary6VectorRbT1T1",
        Ok(
            "IntersectManager::FindIntersection(RadicalMathLibrary::Vector &, bool &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "__16IntersectManager",
        Ok(
            "IntersectManager::IntersectManager(void)",
        ),
    ),
    (
        "_$_16IntersectManager",
        Ok(
            "IntersectManager::~IntersectManager(void)",
        ),
    ),
    (
        "CreateInstance__11AllWrappers",
        Ok(
            "AllWrappers::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__11AllWrappers",
        Ok(
            "AllWrappers::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__11AllWrappers",
        Ok(
            "AllWrappers::DestroyInstance(void)",
        ),
    ),
    (
        "mLoader__11AllWrappersi",
        Ok(
            "AllWrappers::mLoader(int)",
        ),
    ),
    (
        "mpLoader__11AllWrappersi",
        Ok(
            "AllWrappers::mpLoader(int)",
        ),
    ),
    (
        "CoupleAllLoaders__11AllWrappers",
        Ok(
            "AllWrappers::CoupleAllLoaders(void)",
        ),
    ),
    (
        "AddGlobalEntity__11AllWrappersP9tDrawable",
        Ok(
            "AllWrappers::AddGlobalEntity(tDrawable *)",
        ),
    ),
    (
        "GetGlobalEntity__C11AllWrappersG13tUidUnaligned",
        Ok(
            "AllWrappers::GetGlobalEntity(tUidUnaligned) const",
        ),
    ),
    (
        "ClearGlobalEntities__11AllWrappers",
        Ok(
            "AllWrappers::ClearGlobalEntities(void)",
        ),
    ),
    (
        "__11AllWrappers",
        Ok(
            "AllWrappers::AllWrappers(void)",
        ),
    ),
    (
        "_$_11AllWrappers",
        Ok(
            "AllWrappers::~AllWrappers(void)",
        ),
    ),
    (
        "__14AnimCollLoader",
        Ok(
            "AnimCollLoader::AnimCollLoader(void)",
        ),
    ),
    (
        "_$_14AnimCollLoader",
        Ok(
            "AnimCollLoader::~AnimCollLoader(void)",
        ),
    ),
    (
        "LoadObject__14AnimCollLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "AnimCollLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__14AnimCollLoaderP21ChunkListenerCallbacki",
        Ok(
            "AnimCollLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__14AnimCollLoaderP21ChunkListenerCallbacki",
        Ok(
            "AnimCollLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__13AnimDSGLoader",
        Ok(
            "AnimDSGLoader::AnimDSGLoader(void)",
        ),
    ),
    (
        "_$_13AnimDSGLoader",
        Ok(
            "AnimDSGLoader::~AnimDSGLoader(void)",
        ),
    ),
    (
        "LoadObject__13AnimDSGLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "AnimDSGLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadAnimAtIntersections__13AnimDSGLoaderP18tCompositeDrawableP16tMultiControllerP12tEntityStorebPci",
        Ok(
            "AnimDSGLoader::LoadAnimAtIntersections(tCompositeDrawable *, tMultiController *, tEntityStore *, bool, char *, int)",
        ),
    ),
    (
        "SetRegdListener__13AnimDSGLoaderP21ChunkListenerCallbacki",
        Ok(
            "AnimDSGLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__13AnimDSGLoaderP21ChunkListenerCallbacki",
        Ok(
            "AnimDSGLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__22BillboardWrappedLoader",
        Ok(
            "BillboardWrappedLoader::BillboardWrappedLoader(void)",
        ),
    ),
    (
        "SetRegdListener__22BillboardWrappedLoaderP21ChunkListenerCallbacki",
        Ok(
            "BillboardWrappedLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__22BillboardWrappedLoaderP21ChunkListenerCallbacki",
        Ok(
            "BillboardWrappedLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "LoadObject__22BillboardWrappedLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "BillboardWrappedLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__21BreakableObjectLoader",
        Ok(
            "BreakableObjectLoader::BreakableObjectLoader(void)",
        ),
    ),
    (
        "_$_21BreakableObjectLoader",
        Ok(
            "BreakableObjectLoader::~BreakableObjectLoader(void)",
        ),
    ),
    (
        "SetRegdListener__21BreakableObjectLoaderP21ChunkListenerCallbacki",
        Ok(
            "BreakableObjectLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__21BreakableObjectLoaderP21ChunkListenerCallbacki",
        Ok(
            "BreakableObjectLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "LoadObject__21BreakableObjectLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "BreakableObjectLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__14DynaPhysLoader",
        Ok(
            "DynaPhysLoader::DynaPhysLoader(void)",
        ),
    ),
    (
        "_$_14DynaPhysLoader",
        Ok(
            "DynaPhysLoader::~DynaPhysLoader(void)",
        ),
    ),
    (
        "LoadObject__14DynaPhysLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "DynaPhysLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__14DynaPhysLoaderP21ChunkListenerCallbacki",
        Ok(
            "DynaPhysLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__14DynaPhysLoaderP21ChunkListenerCallbacki",
        Ok(
            "DynaPhysLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__11FenceLoader",
        Ok(
            "FenceLoader::FenceLoader(void)",
        ),
    ),
    (
        "LoadObject__11FenceLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "FenceLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__11FenceLoaderP21ChunkListenerCallbacki",
        Ok(
            "FenceLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__11FenceLoaderP21ChunkListenerCallbacki",
        Ok(
            "FenceLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__21GeometryWrappedLoader",
        Ok(
            "GeometryWrappedLoader::GeometryWrappedLoader(void)",
        ),
    ),
    (
        "SetRegdListener__21GeometryWrappedLoaderP21ChunkListenerCallbacki",
        Ok(
            "GeometryWrappedLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__21GeometryWrappedLoaderP21ChunkListenerCallbacki",
        Ok(
            "GeometryWrappedLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "LoadObject__21GeometryWrappedLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "GeometryWrappedLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__24InstParticleSystemLoader",
        Ok(
            "InstParticleSystemLoader::InstParticleSystemLoader(void)",
        ),
    ),
    (
        "_$_24InstParticleSystemLoader",
        Ok(
            "InstParticleSystemLoader::~InstParticleSystemLoader(void)",
        ),
    ),
    (
        "SetRegdListener__24InstParticleSystemLoaderP21ChunkListenerCallbacki",
        Ok(
            "InstParticleSystemLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__24InstParticleSystemLoaderP21ChunkListenerCallbacki",
        Ok(
            "InstParticleSystemLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "LoadObject__24InstParticleSystemLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "InstParticleSystemLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__20InstStatEntityLoader",
        Ok(
            "InstStatEntityLoader::InstStatEntityLoader(void)",
        ),
    ),
    (
        "LoadObject__20InstStatEntityLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "InstStatEntityLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__20InstStatEntityLoaderP21ChunkListenerCallbacki",
        Ok(
            "InstStatEntityLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__20InstStatEntityLoaderP21ChunkListenerCallbacki",
        Ok(
            "InstStatEntityLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__18InstStatPhysLoader",
        Ok(
            "InstStatPhysLoader::InstStatPhysLoader(void)",
        ),
    ),
    (
        "_$_18InstStatPhysLoader",
        Ok(
            "InstStatPhysLoader::~InstStatPhysLoader(void)",
        ),
    ),
    (
        "LoadObject__18InstStatPhysLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "InstStatPhysLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__18InstStatPhysLoaderP21ChunkListenerCallbacki",
        Ok(
            "InstStatPhysLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__18InstStatPhysLoaderP21ChunkListenerCallbacki",
        Ok(
            "InstStatPhysLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__15IntersectLoader",
        Ok(
            "IntersectLoader::IntersectLoader(void)",
        ),
    ),
    (
        "LoadObject__15IntersectLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "IntersectLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__15IntersectLoaderP21ChunkListenerCallbacki",
        Ok(
            "IntersectLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__15IntersectLoaderP21ChunkListenerCallbacki",
        Ok(
            "IntersectLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__18StaticEntityLoader",
        Ok(
            "StaticEntityLoader::StaticEntityLoader(void)",
        ),
    ),
    (
        "LoadObject__18StaticEntityLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "StaticEntityLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__18StaticEntityLoaderP21ChunkListenerCallbacki",
        Ok(
            "StaticEntityLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__18StaticEntityLoaderP21ChunkListenerCallbacki",
        Ok(
            "StaticEntityLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__16StaticPhysLoader",
        Ok(
            "StaticPhysLoader::StaticPhysLoader(void)",
        ),
    ),
    (
        "_$_16StaticPhysLoader",
        Ok(
            "StaticPhysLoader::~StaticPhysLoader(void)",
        ),
    ),
    (
        "LoadObject__16StaticPhysLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "StaticPhysLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__16StaticPhysLoaderP21ChunkListenerCallbacki",
        Ok(
            "StaticPhysLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__16StaticPhysLoaderP21ChunkListenerCallbacki",
        Ok(
            "StaticPhysLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__13TreeDSGLoader",
        Ok(
            "TreeDSGLoader::TreeDSGLoader(void)",
        ),
    ),
    (
        "LoadObject__13TreeDSGLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "TreeDSGLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__13TreeDSGLoaderP21ChunkListenerCallbacki",
        Ok(
            "TreeDSGLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__13TreeDSGLoaderP21ChunkListenerCallbacki",
        Ok(
            "TreeDSGLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__17WorldSphereLoader",
        Ok(
            "WorldSphereLoader::WorldSphereLoader(void)",
        ),
    ),
    (
        "_$_17WorldSphereLoader",
        Ok(
            "WorldSphereLoader::~WorldSphereLoader(void)",
        ),
    ),
    (
        "LoadObject__17WorldSphereLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "WorldSphereLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__17WorldSphereLoaderP21ChunkListenerCallbacki",
        Ok(
            "WorldSphereLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__17WorldSphereLoaderP21ChunkListenerCallbacki",
        Ok(
            "WorldSphereLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__15LensFlareLoader",
        Ok(
            "LensFlareLoader::LensFlareLoader(void)",
        ),
    ),
    (
        "_$_15LensFlareLoader",
        Ok(
            "LensFlareLoader::~LensFlareLoader(void)",
        ),
    ),
    (
        "LoadObject__15LensFlareLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "LensFlareLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__15LensFlareLoaderP21ChunkListenerCallbacki",
        Ok(
            "LensFlareLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__15LensFlareLoaderP21ChunkListenerCallbacki",
        Ok(
            "LensFlareLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "SetOcclusionFlags__15LensFlareLoaderP18tCompositeDrawable",
        Ok(
            "LensFlareLoader::SetOcclusionFlags(tCompositeDrawable *)",
        ),
    ),
    (
        "__18AnimDynaPhysLoader",
        Ok(
            "AnimDynaPhysLoader::AnimDynaPhysLoader(void)",
        ),
    ),
    (
        "_$_18AnimDynaPhysLoader",
        Ok(
            "AnimDynaPhysLoader::~AnimDynaPhysLoader(void)",
        ),
    ),
    (
        "LoadObject__18AnimDynaPhysLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "AnimDynaPhysLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__18AnimDynaPhysLoaderP21ChunkListenerCallbacki",
        Ok(
            "AnimDynaPhysLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__18AnimDynaPhysLoaderP21ChunkListenerCallbacki",
        Ok(
            "AnimDynaPhysLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "SetShadowElement__18AnimDynaPhysLoaderPCcT1",
        Ok(
            "AnimDynaPhysLoader::SetShadowElement(char const *, char const *)",
        ),
    ),
    (
        "ClearShadowList__18AnimDynaPhysLoader",
        Ok(
            "AnimDynaPhysLoader::ClearShadowList(void)",
        ),
    ),
    (
        "GetShadowElement__18AnimDynaPhysLoaderG13tUidUnaligned",
        Ok(
            "AnimDynaPhysLoader::GetShadowElement(tUidUnaligned)",
        ),
    ),
    (
        "__25AnimDynaPhysWrapperLoader",
        Ok(
            "AnimDynaPhysWrapperLoader::AnimDynaPhysWrapperLoader(void)",
        ),
    ),
    (
        "_$_25AnimDynaPhysWrapperLoader",
        Ok(
            "AnimDynaPhysWrapperLoader::~AnimDynaPhysWrapperLoader(void)",
        ),
    ),
    (
        "LoadObject__25AnimDynaPhysWrapperLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "AnimDynaPhysWrapperLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__25AnimDynaPhysWrapperLoaderP21ChunkListenerCallbacki",
        Ok(
            "AnimDynaPhysWrapperLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__25AnimDynaPhysWrapperLoaderP21ChunkListenerCallbacki",
        Ok(
            "AnimDynaPhysWrapperLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "__23AnimObjDSGWrapperLoader",
        Ok(
            "AnimObjDSGWrapperLoader::AnimObjDSGWrapperLoader(void)",
        ),
    ),
    (
        "_$_23AnimObjDSGWrapperLoader",
        Ok(
            "AnimObjDSGWrapperLoader::~AnimObjDSGWrapperLoader(void)",
        ),
    ),
    (
        "LoadObject__23AnimObjDSGWrapperLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "AnimObjDSGWrapperLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "SetRegdListener__23AnimObjDSGWrapperLoaderP21ChunkListenerCallbacki",
        Ok(
            "AnimObjDSGWrapperLoader::SetRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "ModRegdListener__23AnimObjDSGWrapperLoaderP21ChunkListenerCallbacki",
        Ok(
            "AnimObjDSGWrapperLoader::ModRegdListener(ChunkListenerCallback *, int)",
        ),
    ),
    (
        "IsMissionProp__C18AnimDynaPhysLoaderPCc",
        Ok(
            "AnimDynaPhysLoader::IsMissionProp(char const *) const",
        ),
    ),
    (
        "IsRoot__t17ContiguousBinNode1Z11SpatialNode",
        Ok(
            "ContiguousBinNode<SpatialNode>::IsRoot(void)",
        ),
    ),
    (
        "capacity__Ct3Map2Z13tUidUnalignedZ13tUidUnaligned",
        Ok(
            "Map<tUidUnaligned, tUidUnaligned>::capacity(void) const",
        ),
    ),
    (
        "__t10MapElement2Z13tUidUnalignedZ13tUidUnalignedRCt10MapElement2Z13tUidUnalignedZ13tUidUnaligned",
        Ok(
            "MapElement<tUidUnaligned, tUidUnaligned>::MapElement(MapElement<tUidUnaligned, tUidUnaligned> const &)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZPt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZPt10MapElement2Z13tUidUnalignedZ13tUidUnaligned_X01X01X11G12__false_type_X11",
        Ok(
            "MapElement<tUidUnaligned, tUidUnaligned> * __uninitialized_copy_aux<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, __false_type)",
        ),
    ),
    (
        "reserve__t3Map2Z13tUidUnalignedZ13tUidUnalignedUi",
        Ok(
            "Map<tUidUnaligned, tUidUnaligned>::reserve(unsigned int)",
        ),
    ),
    (
        "__as__t10MapElement2Z13tUidUnalignedZ13tUidUnalignedRCt10MapElement2Z13tUidUnalignedZ13tUidUnaligned",
        Ok(
            "MapElement<tUidUnaligned, tUidUnaligned>::operator=(MapElement<tUidUnaligned, tUidUnaligned> const &)",
        ),
    ),
    (
        "__push_heap__H3ZPt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZiZt10MapElement2Z13tUidUnalignedZ13tUidUnaligned_X01X11X11X21_v",
        Ok(
            "void __push_heap<MapElement<tUidUnaligned, tUidUnaligned> *, int, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, int, int, MapElement<tUidUnaligned, tUidUnaligned>)",
        ),
    ),
    (
        "__adjust_heap__H3ZPt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZiZt10MapElement2Z13tUidUnalignedZ13tUidUnaligned_X01X11X11X21_v",
        Ok(
            "void __adjust_heap<MapElement<tUidUnaligned, tUidUnaligned> *, int, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, int, int, MapElement<tUidUnaligned, tUidUnaligned>)",
        ),
    ),
    (
        "__make_heap__H3ZPt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZi_X01X01PX11PX21_v",
        Ok(
            "void __make_heap<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned>, int>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, int *)",
        ),
    ),
    (
        "sort_heap__H1ZPt10MapElement2Z13tUidUnalignedZ13tUidUnaligned_X01X01_v",
        Ok(
            "void sort_heap<MapElement<tUidUnaligned, tUidUnaligned> *>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *)",
        ),
    ),
    (
        "__partial_sort__H2ZPt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZt10MapElement2Z13tUidUnalignedZ13tUidUnaligned_X01X01X01PX11_v",
        Ok(
            "void __partial_sort<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *)",
        ),
    ),
    (
        "__unguarded_partition__H2ZPt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZt10MapElement2Z13tUidUnalignedZ13tUidUnaligned_X01X01X11_X01",
        Ok(
            "MapElement<tUidUnaligned, tUidUnaligned> * __unguarded_partition<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned>)",
        ),
    ),
    (
        "__introsort_loop__H3ZPt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZi_X01X01PX11X21_v",
        Ok(
            "void __introsort_loop<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned>, int>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, int)",
        ),
    ),
    (
        "__unguarded_linear_insert__H2ZPt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZt10MapElement2Z13tUidUnalignedZ13tUidUnaligned_X01X11_v",
        Ok(
            "void __unguarded_linear_insert<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned>)",
        ),
    ),
    (
        "__insertion_sort__H1ZPt10MapElement2Z13tUidUnalignedZ13tUidUnaligned_X01X01_v",
        Ok(
            "void __insertion_sort<MapElement<tUidUnaligned, tUidUnaligned> *>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *)",
        ),
    ),
    (
        "__unguarded_insertion_sort_aux__H2ZPt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZt10MapElement2Z13tUidUnalignedZ13tUidUnaligned_X01X01PX11_v",
        Ok(
            "void __unguarded_insertion_sort_aux<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> >(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *)",
        ),
    ),
    (
        "__final_insertion_sort__H1ZPt10MapElement2Z13tUidUnalignedZ13tUidUnaligned_X01X01_v",
        Ok(
            "void __final_insertion_sort<MapElement<tUidUnaligned, tUidUnaligned> *>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *)",
        ),
    ),
    (
        "RefreshIfDirty__Ct3Map2Z13tUidUnalignedZ13tUidUnaligned",
        Ok(
            "Map<tUidUnaligned, tUidUnaligned>::RefreshIfDirty(void) const",
        ),
    ),
    (
        "__t10MapElement2Z13tUidUnalignedZ13tUidUnaligned",
        Ok(
            "MapElement<tUidUnaligned, tUidUnaligned>::MapElement(void)",
        ),
    ),
    (
        "__lower_bound__H3ZPt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZi_X01X01RCX11PX21_X01",
        Ok(
            "MapElement<tUidUnaligned, tUidUnaligned> * __lower_bound<MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned>, int>(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> const &, int *)",
        ),
    ),
    (
        "find__t3Map2Z13tUidUnalignedZ13tUidUnalignedRC13tUidUnaligned",
        Ok(
            "Map<tUidUnaligned, tUidUnaligned>::find(tUidUnaligned const &)",
        ),
    ),
    (
        "end__t3Map2Z13tUidUnalignedZ13tUidUnaligned",
        Ok(
            "Map<tUidUnaligned, tUidUnaligned>::end(void)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2Zt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZt7s2alloc1Zt10MapElement2Z13tUidUnalignedZ13tUidUnalignedPt10MapElement2Z13tUidUnalignedZ13tUidUnalignedRCt10MapElement2Z13tUidUnalignedZ13tUidUnaligned",
        Ok(
            "vector<MapElement<tUidUnaligned, tUidUnaligned>, s2alloc<MapElement<tUidUnaligned, tUidUnaligned> > >::_M_insert_aux(MapElement<tUidUnaligned, tUidUnaligned> *, MapElement<tUidUnaligned, tUidUnaligned> const &)",
        ),
    ),
    (
        "insert__t3Map2Z13tUidUnalignedZ13tUidUnalignedRC13tUidUnalignedT1",
        Ok(
            "Map<tUidUnaligned, tUidUnaligned>::insert(tUidUnaligned const &, tUidUnaligned const &)",
        ),
    ),
    (
        "clear__t3Map2Z13tUidUnalignedZ13tUidUnaligned",
        Ok(
            "Map<tUidUnaligned, tUidUnaligned>::clear(void)",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3Zt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZt7s2alloc1Zt10MapElement2Z13tUidUnalignedZ13tUidUnalignedb0",
        Ok(
            "_Vector_alloc_base<MapElement<tUidUnaligned, tUidUnaligned>, s2alloc<MapElement<tUidUnaligned, tUidUnaligned> >, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "__t3Map2Z13tUidUnalignedZ13tUidUnaligned",
        Ok(
            "Map<tUidUnaligned, tUidUnaligned>::Map(void)",
        ),
    ),
    (
        "_$_t3Map2Z13tUidUnalignedZ13tUidUnaligned",
        Ok(
            "Map<tUidUnaligned, tUidUnaligned>::~Map(void)",
        ),
    ),
    (
        "_$_21GeometryWrappedLoader",
        Ok(
            "GeometryWrappedLoader::~GeometryWrappedLoader(void)",
        ),
    ),
    (
        "__tf21GeometryWrappedLoader",
        Ok(
            "GeometryWrappedLoader type_info function",
        ),
    ),
    (
        "_$_18StaticEntityLoader",
        Ok(
            "StaticEntityLoader::~StaticEntityLoader(void)",
        ),
    ),
    (
        "__tf18StaticEntityLoader",
        Ok(
            "StaticEntityLoader type_info function",
        ),
    ),
    (
        "__tf16StaticPhysLoader",
        Ok(
            "StaticPhysLoader type_info function",
        ),
    ),
    (
        "_$_13TreeDSGLoader",
        Ok(
            "TreeDSGLoader::~TreeDSGLoader(void)",
        ),
    ),
    (
        "__tf13TreeDSGLoader",
        Ok(
            "TreeDSGLoader type_info function",
        ),
    ),
    (
        "_$_11FenceLoader",
        Ok(
            "FenceLoader::~FenceLoader(void)",
        ),
    ),
    (
        "__tf11FenceLoader",
        Ok(
            "FenceLoader type_info function",
        ),
    ),
    (
        "_$_15IntersectLoader",
        Ok(
            "IntersectLoader::~IntersectLoader(void)",
        ),
    ),
    (
        "__tf15IntersectLoader",
        Ok(
            "IntersectLoader type_info function",
        ),
    ),
    (
        "__tf14AnimCollLoader",
        Ok(
            "AnimCollLoader type_info function",
        ),
    ),
    (
        "__tf13AnimDSGLoader",
        Ok(
            "AnimDSGLoader type_info function",
        ),
    ),
    (
        "__tf14DynaPhysLoader",
        Ok(
            "DynaPhysLoader type_info function",
        ),
    ),
    (
        "__tf18InstStatPhysLoader",
        Ok(
            "InstStatPhysLoader type_info function",
        ),
    ),
    (
        "_$_20InstStatEntityLoader",
        Ok(
            "InstStatEntityLoader::~InstStatEntityLoader(void)",
        ),
    ),
    (
        "__tf20InstStatEntityLoader",
        Ok(
            "InstStatEntityLoader type_info function",
        ),
    ),
    (
        "__tf17WorldSphereLoader",
        Ok(
            "WorldSphereLoader type_info function",
        ),
    ),
    (
        "__tf18AnimDynaPhysLoader",
        Ok(
            "AnimDynaPhysLoader type_info function",
        ),
    ),
    (
        "__tf25AnimDynaPhysWrapperLoader",
        Ok(
            "AnimDynaPhysWrapperLoader type_info function",
        ),
    ),
    (
        "__tf23AnimObjDSGWrapperLoader",
        Ok(
            "AnimObjDSGWrapperLoader type_info function",
        ),
    ),
    (
        "_$_22BillboardWrappedLoader",
        Ok(
            "BillboardWrappedLoader::~BillboardWrappedLoader(void)",
        ),
    ),
    (
        "__tf22BillboardWrappedLoader",
        Ok(
            "BillboardWrappedLoader type_info function",
        ),
    ),
    (
        "__tf24InstParticleSystemLoader",
        Ok(
            "InstParticleSystemLoader type_info function",
        ),
    ),
    (
        "__tf21BreakableObjectLoader",
        Ok(
            "BreakableObjectLoader type_info function",
        ),
    ),
    (
        "__tf15LensFlareLoader",
        Ok(
            "LensFlareLoader type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$_11AllWrappers$mspInstance",
        Ok(
            "global constructors keyed to AllWrappers::mspInstance",
        ),
    ),
    (
        "_GLOBAL_$D$_11AllWrappers$mspInstance",
        Ok(
            "global destructors keyed to AllWrappers::mspInstance",
        ),
    ),
    (
        "__Q215ParticleManager21ManagedParticleSystemP22tParticleSystemFactoryP17tEffectController",
        Ok(
            "ParticleManager::ManagedParticleSystem::ManagedParticleSystem(tParticleSystemFactory *, tEffectController *)",
        ),
    ),
    (
        "_$_Q215ParticleManager21ManagedParticleSystem",
        Ok(
            "ParticleManager::ManagedParticleSystem::~ManagedParticleSystem(void)",
        ),
    ),
    (
        "Update__Q215ParticleManager21ManagedParticleSystemf",
        Ok(
            "ParticleManager::ManagedParticleSystem::Update(float)",
        ),
    ),
    (
        "Reset__Q215ParticleManager21ManagedParticleSystem",
        Ok(
            "ParticleManager::ManagedParticleSystem::Reset(void)",
        ),
    ),
    (
        "SetTransform__Q215ParticleManager21ManagedParticleSystemRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "ParticleManager::ManagedParticleSystem::SetTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "LastFrameReached__CQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "ParticleManager::ManagedParticleSystem::LastFrameReached(void) const",
        ),
    ),
    (
        "CreateInstance__15ParticleManager",
        Ok(
            "ParticleManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__15ParticleManager",
        Ok(
            "ParticleManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__15ParticleManager",
        Ok(
            "ParticleManager::DestroyInstance(void)",
        ),
    ),
    (
        "DeactiveateAll__15ParticleManager",
        Ok(
            "ParticleManager::DeactiveateAll(void)",
        ),
    ),
    (
        "__15ParticleManager",
        Ok(
            "ParticleManager::ParticleManager(void)",
        ),
    ),
    (
        "_$_15ParticleManager",
        Ok(
            "ParticleManager::~ParticleManager(void)",
        ),
    ),
    (
        "ClearSystems__15ParticleManager",
        Ok(
            "ParticleManager::ClearSystems(void)",
        ),
    ),
    (
        "InitializeSystem__15ParticleManagerQ212ParticleEnum10ParticleIDP22tParticleSystemFactoryP17tEffectControllerib",
        Ok(
            "ParticleManager::InitializeSystem(ParticleEnum::ParticleID, tParticleSystemFactory *, tEffectController *, int, bool)",
        ),
    ),
    (
        "DeleteSystem__15ParticleManagerQ212ParticleEnum10ParticleID",
        Ok(
            "ParticleManager::DeleteSystem(ParticleEnum::ParticleID)",
        ),
    ),
    (
        "GetUniqueID__C15ParticleManager",
        Ok(
            "ParticleManager::GetUniqueID(void) const",
        ),
    ),
    (
        "PlayCyclic__15ParticleManageriRC18ParticleAttributesRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "ParticleManager::PlayCyclic(int, ParticleAttributes const &, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Add__15ParticleManagerRC18ParticleAttributesRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "ParticleManager::Add(ParticleAttributes const &, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Add__15ParticleManagerRC18ParticleAttributesRCQ218RadicalMathLibrary6Vector",
        Ok(
            "ParticleManager::Add(ParticleAttributes const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Update__15ParticleManagerUi",
        Ok(
            "ParticleManager::Update(unsigned int)",
        ),
    ),
    (
        "SetActive__Q215ParticleManager21ManagedParticleSystemb",
        Ok(
            "ParticleManager::ManagedParticleSystem::SetActive(bool)",
        ),
    ),
    (
        "ReorientUpAxis__15ParticleManagerRCQ218RadicalMathLibrary6MatrixPQ218RadicalMathLibrary6Matrix",
        Ok(
            "ParticleManager::ReorientUpAxis(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "__17ParticleSystemDSG",
        Ok(
            "ParticleSystemDSG::ParticleSystemDSG(void)",
        ),
    ),
    (
        "_$_17ParticleSystemDSG",
        Ok(
            "ParticleSystemDSG::~ParticleSystemDSG(void)",
        ),
    ),
    (
        "Init__17ParticleSystemDSGP22tParticleSystemFactoryP17tEffectController",
        Ok(
            "ParticleSystemDSG::Init(tParticleSystemFactory *, tEffectController *)",
        ),
    ),
    (
        "SetBias__17ParticleSystemDSGUif",
        Ok(
            "ParticleSystemDSG::SetBias(unsigned int, float)",
        ),
    ),
    (
        "GetNumLiveParticles__C17ParticleSystemDSG",
        Ok(
            "ParticleSystemDSG::GetNumLiveParticles(void) const",
        ),
    ),
    (
        "LastFrameReached__C17ParticleSystemDSG",
        Ok(
            "ParticleSystemDSG::LastFrameReached(void) const",
        ),
    ),
    (
        "Display__17ParticleSystemDSG",
        Ok(
            "ParticleSystemDSG::Display(void)",
        ),
    ),
    (
        "DisplayBoundingBox__17ParticleSystemDSGG10pddiColour",
        Ok(
            "ParticleSystemDSG::DisplayBoundingBox(pddiColour)",
        ),
    ),
    (
        "Update__17ParticleSystemDSGf",
        Ok(
            "ParticleSystemDSG::Update(float)",
        ),
    ),
    (
        "SetTransform__17ParticleSystemDSGRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "ParticleSystemDSG::SetTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Reset__17ParticleSystemDSG",
        Ok(
            "ParticleSystemDSG::Reset(void)",
        ),
    ),
    (
        "GetPosition__17ParticleSystemDSGPQ218RadicalMathLibrary6Vector",
        Ok(
            "ParticleSystemDSG::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "rPosition__17ParticleSystemDSG",
        Ok(
            "ParticleSystemDSG::rPosition(void)",
        ),
    ),
    (
        "GetBoundingBox__17ParticleSystemDSGPQ218RadicalMathLibrary5Box3D",
        Ok(
            "ParticleSystemDSG::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__17ParticleSystemDSGPQ218RadicalMathLibrary6Sphere",
        Ok(
            "ParticleSystemDSG::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "SetVelocity__17ParticleSystemDSGRCQ218RadicalMathLibrary6Vector",
        Ok(
            "ParticleSystemDSG::SetVelocity(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__Q222VehicleParticleEmitter11PartEmitterRCQ218RadicalMathLibrary6Vector",
        Ok(
            "VehicleParticleEmitter::PartEmitter::PartEmitter(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "_$_Q222VehicleParticleEmitter11PartEmitter",
        Ok(
            "VehicleParticleEmitter::PartEmitter::~PartEmitter(void)",
        ),
    ),
    (
        "AddParticleType__Q222VehicleParticleEmitter11PartEmitterQ212ParticleEnum10ParticleID",
        Ok(
            "VehicleParticleEmitter::PartEmitter::AddParticleType(ParticleEnum::ParticleID)",
        ),
    ),
    (
        "SetPartLocation__22VehicleParticleEmitterQ222VehicleParticleEmitter15VehiclePartEnumRCQ218RadicalMathLibrary6Vector",
        Ok(
            "VehicleParticleEmitter::SetPartLocation(VehicleParticleEmitter::VehiclePartEnum, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetLocation__Q222VehicleParticleEmitter11PartEmitterRCQ218RadicalMathLibrary6Vector",
        Ok(
            "VehicleParticleEmitter::PartEmitter::SetLocation(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Generate__Q222VehicleParticleEmitter11PartEmitterRC18ParticleAttributesRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "VehicleParticleEmitter::PartEmitter::Generate(ParticleAttributes const &, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "__22VehicleParticleEmitter",
        Ok(
            "VehicleParticleEmitter::VehicleParticleEmitter(void)",
        ),
    ),
    (
        "_$_22VehicleParticleEmitter",
        Ok(
            "VehicleParticleEmitter::~VehicleParticleEmitter(void)",
        ),
    ),
    (
        "Generate__22VehicleParticleEmitterQ222VehicleParticleEmitter15VehiclePartEnumRC18ParticleAttributesRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "VehicleParticleEmitter::Generate(VehicleParticleEmitter::VehiclePartEnum, ParticleAttributes const &, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "fill__H2Z13_Bit_iteratorZb_X01X01RCX11_v",
        Ok(
            "void fill<_Bit_iterator, bool>(_Bit_iterator, _Bit_iterator, bool const &)",
        ),
    ),
    (
        "fill_n__H3Z13_Bit_iteratorZUiZb_X01X11RCX21_X01",
        Ok(
            "_Bit_iterator fill_n<_Bit_iterator, unsigned int, bool>(_Bit_iterator, unsigned int, bool const &)",
        ),
    ),
    (
        "__t3Map2ZQ212ParticleEnum10ParticleIDZi",
        Ok(
            "Map<ParticleEnum::ParticleID, int>::Map(void)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZiZPt10MapElement2ZQ212ParticleEnum10ParticleIDZi_X01X01X11G12__false_type_X11",
        Ok(
            "MapElement<ParticleEnum::ParticleID, int> * __uninitialized_copy_aux<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, __false_type)",
        ),
    ),
    (
        "reserve__t3Map2ZQ212ParticleEnum10ParticleIDZiUi",
        Ok(
            "Map<ParticleEnum::ParticleID, int>::reserve(unsigned int)",
        ),
    ),
    (
        "__push_heap__H3ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZiZiZt10MapElement2ZQ212ParticleEnum10ParticleIDZi_X01X11X11X21_v",
        Ok(
            "void __push_heap<MapElement<ParticleEnum::ParticleID, int> *, int, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, int, int, MapElement<ParticleEnum::ParticleID, int>)",
        ),
    ),
    (
        "__adjust_heap__H3ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZiZiZt10MapElement2ZQ212ParticleEnum10ParticleIDZi_X01X11X11X21_v",
        Ok(
            "void __adjust_heap<MapElement<ParticleEnum::ParticleID, int> *, int, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, int, int, MapElement<ParticleEnum::ParticleID, int>)",
        ),
    ),
    (
        "__make_heap__H3ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZiZt10MapElement2ZQ212ParticleEnum10ParticleIDZiZi_X01X01PX11PX21_v",
        Ok(
            "void __make_heap<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int>, int>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, int *)",
        ),
    ),
    (
        "sort_heap__H1ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZi_X01X01_v",
        Ok(
            "void sort_heap<MapElement<ParticleEnum::ParticleID, int> *>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *)",
        ),
    ),
    (
        "__partial_sort__H2ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZiZt10MapElement2ZQ212ParticleEnum10ParticleIDZi_X01X01X01PX11_v",
        Ok(
            "void __partial_sort<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *)",
        ),
    ),
    (
        "__unguarded_partition__H2ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZiZt10MapElement2ZQ212ParticleEnum10ParticleIDZi_X01X01X11_X01",
        Ok(
            "MapElement<ParticleEnum::ParticleID, int> * __unguarded_partition<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int>)",
        ),
    ),
    (
        "__introsort_loop__H3ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZiZt10MapElement2ZQ212ParticleEnum10ParticleIDZiZi_X01X01PX11X21_v",
        Ok(
            "void __introsort_loop<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int>, int>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, int)",
        ),
    ),
    (
        "__unguarded_linear_insert__H2ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZiZt10MapElement2ZQ212ParticleEnum10ParticleIDZi_X01X11_v",
        Ok(
            "void __unguarded_linear_insert<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int>)",
        ),
    ),
    (
        "__insertion_sort__H1ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZi_X01X01_v",
        Ok(
            "void __insertion_sort<MapElement<ParticleEnum::ParticleID, int> *>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *)",
        ),
    ),
    (
        "__unguarded_insertion_sort_aux__H2ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZiZt10MapElement2ZQ212ParticleEnum10ParticleIDZi_X01X01PX11_v",
        Ok(
            "void __unguarded_insertion_sort_aux<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> >(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *)",
        ),
    ),
    (
        "__final_insertion_sort__H1ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZi_X01X01_v",
        Ok(
            "void __final_insertion_sort<MapElement<ParticleEnum::ParticleID, int> *>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *)",
        ),
    ),
    (
        "RefreshIfDirty__Ct3Map2ZQ212ParticleEnum10ParticleIDZi",
        Ok(
            "Map<ParticleEnum::ParticleID, int>::RefreshIfDirty(void) const",
        ),
    ),
    (
        "__lower_bound__H3ZPt10MapElement2ZQ212ParticleEnum10ParticleIDZiZt10MapElement2ZQ212ParticleEnum10ParticleIDZiZi_X01X01RCX11PX21_X01",
        Ok(
            "MapElement<ParticleEnum::ParticleID, int> * __lower_bound<MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int>, int>(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> const &, int *)",
        ),
    ),
    (
        "find__t3Map2ZQ212ParticleEnum10ParticleIDZiRCQ212ParticleEnum10ParticleID",
        Ok(
            "Map<ParticleEnum::ParticleID, int>::find(ParticleEnum::ParticleID const &)",
        ),
    ),
    (
        "end__t3Map2ZQ212ParticleEnum10ParticleIDZi",
        Ok(
            "Map<ParticleEnum::ParticleID, int>::end(void)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2Zt10MapElement2ZQ212ParticleEnum10ParticleIDZiZt7s2alloc1Zt10MapElement2ZQ212ParticleEnum10ParticleIDZiPt10MapElement2ZQ212ParticleEnum10ParticleIDZiRCt10MapElement2ZQ212ParticleEnum10ParticleIDZi",
        Ok(
            "vector<MapElement<ParticleEnum::ParticleID, int>, s2alloc<MapElement<ParticleEnum::ParticleID, int> > >::_M_insert_aux(MapElement<ParticleEnum::ParticleID, int> *, MapElement<ParticleEnum::ParticleID, int> const &)",
        ),
    ),
    (
        "insert__t3Map2ZQ212ParticleEnum10ParticleIDZiRCQ212ParticleEnum10ParticleIDRCi",
        Ok(
            "Map<ParticleEnum::ParticleID, int>::insert(ParticleEnum::ParticleID const &, int const &)",
        ),
    ),
    (
        "__tf17ParticleSystemDSG",
        Ok(
            "ParticleSystemDSG type_info function",
        ),
    ),
    (
        "__tft16tPtrDynamicArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrDynamicArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info function",
        ),
    ),
    (
        "__tft9tPtrArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrArray<ParticleManager::ManagedParticleSystem *> type_info function",
        ),
    ),
    (
        "__tft16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> type_info function",
        ),
    ),
    (
        "pPosition__17ParticleSystemDSG",
        Ok(
            "ParticleSystemDSG::pPosition(void)",
        ),
    ),
    (
        "_$_t16tPtrDynamicArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrDynamicArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> >::~tPtrDynamicArray(void)",
        ),
    ),
    (
        "_$_t19_Bvector_alloc_base2Zt7s2alloc1Zbb0",
        Ok(
            "_Bvector_alloc_base<s2alloc<bool>, false>::~_Bvector_alloc_base(void)",
        ),
    ),
    (
        "_$_t9tPtrArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrArray<ParticleManager::ManagedParticleSystem *>::~tPtrArray(void)",
        ),
    ),
    (
        "_$_t16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrDynamicArray<ParticleManager::ManagedParticleSystem *>::~tPtrDynamicArray(void)",
        ),
    ),
    (
        "_$_t3Map2ZQ212ParticleEnum10ParticleIDZi",
        Ok(
            "Map<ParticleEnum::ParticleID, int>::~Map(void)",
        ),
    ),
    (
        "SetSize__t9tPtrArray1ZPQ215ParticleManager21ManagedParticleSystemi",
        Ok(
            "tPtrArray<ParticleManager::ManagedParticleSystem *>::SetSize(int)",
        ),
    ),
    (
        "SetSize__t9tPtrArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystemi",
        Ok(
            "tPtrArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> >::SetSize(int)",
        ),
    ),
    (
        "__tft9tPtrArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info function",
        ),
    ),
    (
        "__tft6tArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tArray<ParticleManager::ManagedParticleSystem *> type_info function",
        ),
    ),
    (
        "_$_t9tPtrArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> >::~tPtrArray(void)",
        ),
    ),
    (
        "_$_t6tArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tArray<ParticleManager::ManagedParticleSystem *>::~tArray(void)",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3Zt10MapElement2ZQ212ParticleEnum10ParticleIDZiZt7s2alloc1Zt10MapElement2ZQ212ParticleEnum10ParticleIDZib0",
        Ok(
            "_Vector_alloc_base<MapElement<ParticleEnum::ParticleID, int>, s2alloc<MapElement<ParticleEnum::ParticleID, int> >, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "SetSize__t6tArray1ZPQ215ParticleManager21ManagedParticleSystemi",
        Ok(
            "tArray<ParticleManager::ManagedParticleSystem *>::SetSize(int)",
        ),
    ),
    (
        "__tft6tArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info function",
        ),
    ),
    (
        "_$_t6tArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> >::~tArray(void)",
        ),
    ),
    (
        "SetSize__t6tArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystemi",
        Ok(
            "tArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> >::SetSize(int)",
        ),
    ),
    (
        "_GLOBAL_$I$_15ParticleManager$spInstance",
        Ok(
            "global constructors keyed to ParticleManager::spInstance",
        ),
    ),
    (
        "CreateInstance__20AnimEntityDSGManager",
        Ok(
            "AnimEntityDSGManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__20AnimEntityDSGManager",
        Ok(
            "AnimEntityDSGManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__20AnimEntityDSGManager",
        Ok(
            "AnimEntityDSGManager::DestroyInstance(void)",
        ),
    ),
    (
        "__20AnimEntityDSGManager",
        Ok(
            "AnimEntityDSGManager::AnimEntityDSGManager(void)",
        ),
    ),
    (
        "_$_20AnimEntityDSGManager",
        Ok(
            "AnimEntityDSGManager::~AnimEntityDSGManager(void)",
        ),
    ),
    (
        "Add__20AnimEntityDSGManagerP22AnimCollisionEntityDSG",
        Ok(
            "AnimEntityDSGManager::Add(AnimCollisionEntityDSG *)",
        ),
    ),
    (
        "Add__20AnimEntityDSGManagerP13AnimEntityDSG",
        Ok(
            "AnimEntityDSGManager::Add(AnimEntityDSG *)",
        ),
    ),
    (
        "Add__20AnimEntityDSGManagerP12StatePropDSG",
        Ok(
            "AnimEntityDSGManager::Add(StatePropDSG *)",
        ),
    ),
    (
        "Remove__20AnimEntityDSGManagerP13AnimEntityDSG",
        Ok(
            "AnimEntityDSGManager::Remove(AnimEntityDSG *)",
        ),
    ),
    (
        "Remove__20AnimEntityDSGManagerP22AnimCollisionEntityDSG",
        Ok(
            "AnimEntityDSGManager::Remove(AnimCollisionEntityDSG *)",
        ),
    ),
    (
        "Remove__20AnimEntityDSGManagerP12StatePropDSG",
        Ok(
            "AnimEntityDSGManager::Remove(StatePropDSG *)",
        ),
    ),
    (
        "RemoveAll__20AnimEntityDSGManager",
        Ok(
            "AnimEntityDSGManager::RemoveAll(void)",
        ),
    ),
    (
        "Update__20AnimEntityDSGManagerUi",
        Ok(
            "AnimEntityDSGManager::Update(unsigned int)",
        ),
    ),
    (
        "Add__20AnimEntityDSGManagerP16tMultiController",
        Ok(
            "AnimEntityDSGManager::Add(tMultiController *)",
        ),
    ),
    (
        "Remove__20AnimEntityDSGManagerP16tMultiController",
        Ok(
            "AnimEntityDSGManager::Remove(tMultiController *)",
        ),
    ),
    (
        "HandleEvent__20AnimEntityDSGManager9EventEnumPv",
        Ok(
            "AnimEntityDSGManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__tf20AnimEntityDSGManager",
        Ok(
            "AnimEntityDSGManager type_info function",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z13AnimEntityDSG",
        Ok(
            "radLoadInventory::SafeCast<AnimEntityDSG>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z13AnimEntityDSG",
        Ok(
            "radLoadInventory::SafeCast<AnimEntityDSG> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z13AnimEntityDSGP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<AnimEntityDSG>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "CreateInstance__10RenderFlow",
        Ok(
            "RenderFlow::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__10RenderFlow",
        Ok(
            "RenderFlow::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__10RenderFlow",
        Ok(
            "RenderFlow::DestroyInstance(void)",
        ),
    ),
    (
        "DoAllRegistration__10RenderFlow",
        Ok(
            "RenderFlow::DoAllRegistration(void)",
        ),
    ),
    (
        "OnTimerDone__10RenderFlowUiPv",
        Ok(
            "RenderFlow::OnTimerDone(unsigned int, void *)",
        ),
    ),
    (
        "__10RenderFlow",
        Ok(
            "RenderFlow::RenderFlow(void)",
        ),
    ),
    (
        "_$_10RenderFlow",
        Ok(
            "RenderFlow::~RenderFlow(void)",
        ),
    ),
    (
        "__tf10RenderFlow",
        Ok(
            "RenderFlow type_info function",
        ),
    ),
    (
        "__19FrontEndRenderLayer",
        Ok(
            "FrontEndRenderLayer::FrontEndRenderLayer(void)",
        ),
    ),
    (
        "DrawCoinObject__19FrontEndRenderLayer",
        Ok(
            "FrontEndRenderLayer::DrawCoinObject(void)",
        ),
    ),
    (
        "Render__19FrontEndRenderLayer",
        Ok(
            "FrontEndRenderLayer::Render(void)",
        ),
    ),
    (
        "AddGuts__19FrontEndRenderLayerP9tDrawable",
        Ok(
            "FrontEndRenderLayer::AddGuts(tDrawable *)",
        ),
    ),
    (
        "AddGuts__19FrontEndRenderLayerP9tGeometry",
        Ok(
            "FrontEndRenderLayer::AddGuts(tGeometry *)",
        ),
    ),
    (
        "AddGuts__19FrontEndRenderLayerP12IntersectDSG",
        Ok(
            "FrontEndRenderLayer::AddGuts(IntersectDSG *)",
        ),
    ),
    (
        "AddGuts__19FrontEndRenderLayerP15StaticEntityDSG",
        Ok(
            "FrontEndRenderLayer::AddGuts(StaticEntityDSG *)",
        ),
    ),
    (
        "AddGuts__19FrontEndRenderLayerP13StaticPhysDSG",
        Ok(
            "FrontEndRenderLayer::AddGuts(StaticPhysDSG *)",
        ),
    ),
    (
        "AddGuts__19FrontEndRenderLayerPQ27Scrooby3App",
        Ok(
            "FrontEndRenderLayer::AddGuts(Scrooby::App *)",
        ),
    ),
    (
        "SetUpGuts__19FrontEndRenderLayer",
        Ok(
            "FrontEndRenderLayer::SetUpGuts(void)",
        ),
    ),
    (
        "NullifyGuts__19FrontEndRenderLayer",
        Ok(
            "FrontEndRenderLayer::NullifyGuts(void)",
        ),
    ),
    (
        "__11RenderLayer",
        Ok(
            "RenderLayer::RenderLayer(void)",
        ),
    ),
    (
        "Render__11RenderLayer",
        Ok(
            "RenderLayer::Render(void)",
        ),
    ),
    (
        "Kill__11RenderLayer",
        Ok(
            "RenderLayer::Kill(void)",
        ),
    ),
    (
        "Resurrect__11RenderLayer",
        Ok(
            "RenderLayer::Resurrect(void)",
        ),
    ),
    (
        "FreezeCorpse__11RenderLayer",
        Ok(
            "RenderLayer::FreezeCorpse(void)",
        ),
    ),
    (
        "Freeze__11RenderLayer",
        Ok(
            "RenderLayer::Freeze(void)",
        ),
    ),
    (
        "Chill__11RenderLayer",
        Ok(
            "RenderLayer::Chill(void)",
        ),
    ),
    (
        "Warm__11RenderLayer",
        Ok(
            "RenderLayer::Warm(void)",
        ),
    ),
    (
        "Thaw__11RenderLayer",
        Ok(
            "RenderLayer::Thaw(void)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP9tDrawable",
        Ok(
            "RenderLayer::AddGuts(tDrawable *)",
        ),
    ),
    (
        "RemoveGuts__11RenderLayerP9tDrawable",
        Ok(
            "RenderLayer::RemoveGuts(tDrawable *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP9tGeometry",
        Ok(
            "RenderLayer::AddGuts(tGeometry *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP12IntersectDSG",
        Ok(
            "RenderLayer::AddGuts(IntersectDSG *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP15StaticEntityDSG",
        Ok(
            "RenderLayer::AddGuts(StaticEntityDSG *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP13StaticPhysDSG",
        Ok(
            "RenderLayer::AddGuts(StaticPhysDSG *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerPQ27Scrooby3App",
        Ok(
            "RenderLayer::AddGuts(Scrooby::App *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP11SpatialTree",
        Ok(
            "RenderLayer::AddGuts(SpatialTree *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP14FenceEntityDSG",
        Ok(
            "RenderLayer::AddGuts(FenceEntityDSG *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP22AnimCollisionEntityDSG",
        Ok(
            "RenderLayer::AddGuts(AnimCollisionEntityDSG *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP13AnimEntityDSG",
        Ok(
            "RenderLayer::AddGuts(AnimEntityDSG *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP11DynaPhysDSG",
        Ok(
            "RenderLayer::AddGuts(DynaPhysDSG *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP13TriggerVolume",
        Ok(
            "RenderLayer::AddGuts(TriggerVolume *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP14WorldSphereDSG",
        Ok(
            "RenderLayer::AddGuts(WorldSphereDSG *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP11RoadSegment",
        Ok(
            "RenderLayer::AddGuts(RoadSegment *)",
        ),
    ),
    (
        "AddGuts__11RenderLayerP11PathSegment",
        Ok(
            "RenderLayer::AddGuts(PathSegment *)",
        ),
    ),
    (
        "RemoveGuts__11RenderLayerP10IEntityDSG",
        Ok(
            "RenderLayer::RemoveGuts(IEntityDSG *)",
        ),
    ),
    (
        "RemoveGuts__11RenderLayerP16tMultiController",
        Ok(
            "RenderLayer::RemoveGuts(tMultiController *)",
        ),
    ),
    (
        "pCam__11RenderLayerUi",
        Ok(
            "RenderLayer::pCam(unsigned int)",
        ),
    ),
    (
        "pView__11RenderLayerUi",
        Ok(
            "RenderLayer::pView(unsigned int)",
        ),
    ),
    (
        "DoAllSetups__11RenderLayer",
        Ok(
            "RenderLayer::DoAllSetups(void)",
        ),
    ),
    (
        "SetUpViewCam__11RenderLayer",
        Ok(
            "RenderLayer::SetUpViewCam(void)",
        ),
    ),
    (
        "NullifyViewCam__11RenderLayer",
        Ok(
            "RenderLayer::NullifyViewCam(void)",
        ),
    ),
    (
        "SetUpGuts__11RenderLayer",
        Ok(
            "RenderLayer::SetUpGuts(void)",
        ),
    ),
    (
        "NullifyGuts__11RenderLayer",
        Ok(
            "RenderLayer::NullifyGuts(void)",
        ),
    ),
    (
        "DoPreStaticLoad__11RenderLayer",
        Ok(
            "RenderLayer::DoPreStaticLoad(void)",
        ),
    ),
    (
        "DoPostStaticLoad__11RenderLayer",
        Ok(
            "RenderLayer::DoPostStaticLoad(void)",
        ),
    ),
    (
        "DumpAllDynaLoads__11RenderLayerUiRt9SwapArray1ZP11tRefCounted",
        Ok(
            "RenderLayer::DumpAllDynaLoads(unsigned int, SwapArray<tRefCounted *> &)",
        ),
    ),
    (
        "DumpDynaLoad__11RenderLayerR5tNameRt9SwapArray1ZP11tRefCounted",
        Ok(
            "RenderLayer::DumpDynaLoad(tName &, SwapArray<tRefCounted *> &)",
        ),
    ),
    (
        "DoPreDynaLoad__11RenderLayerR5tName",
        Ok(
            "RenderLayer::DoPreDynaLoad(tName &)",
        ),
    ),
    (
        "DoPostDynaLoad__11RenderLayer",
        Ok(
            "RenderLayer::DoPostDynaLoad(void)",
        ),
    ),
    (
        "IsDead__11RenderLayer",
        Ok(
            "RenderLayer::IsDead(void)",
        ),
    ),
    (
        "IsFrozen__11RenderLayer",
        Ok(
            "RenderLayer::IsFrozen(void)",
        ),
    ),
    (
        "IsRenderReady__11RenderLayer",
        Ok(
            "RenderLayer::IsRenderReady(void)",
        ),
    ),
    (
        "IsGutsSetup__11RenderLayer",
        Ok(
            "RenderLayer::IsGutsSetup(void)",
        ),
    ),
    (
        "IsViewCamSetup__11RenderLayerUi",
        Ok(
            "RenderLayer::IsViewCamSetup(unsigned int)",
        ),
    ),
    (
        "OnRenderLayerInit__11RenderLayer",
        Ok(
            "RenderLayer::OnRenderLayerInit(void)",
        ),
    ),
    (
        "DumpAllLoadedData__13RenderManager",
        Ok(
            "RenderManager::DumpAllLoadedData(void)",
        ),
    ),
    (
        "SetLoadData__13RenderManagerQ211RenderEnums9LayerEnumQ211RenderEnums9LevelEnumQ211RenderEnums11MissionEnum",
        Ok(
            "RenderManager::SetLoadData(RenderEnums::LayerEnum, RenderEnums::LevelEnum, RenderEnums::MissionEnum)",
        ),
    ),
    (
        "RedirectChunks__13RenderManageri",
        Ok(
            "RenderManager::RedirectChunks(int)",
        ),
    ),
    (
        "FlushDelList__13RenderManager",
        Ok(
            "RenderManager::FlushDelList(void)",
        ),
    ),
    (
        "MunchDelList__13RenderManageri",
        Ok(
            "RenderManager::MunchDelList(int)",
        ),
    ),
    (
        "LoadAllNeededData__13RenderManager",
        Ok(
            "RenderManager::LoadAllNeededData(void)",
        ),
    ),
    (
        "ContextUpdate__13RenderManagerUi",
        Ok(
            "RenderManager::ContextUpdate(unsigned int)",
        ),
    ),
    (
        "CreateInstance__13RenderManager",
        Ok(
            "RenderManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__13RenderManager",
        Ok(
            "RenderManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__13RenderManager",
        Ok(
            "RenderManager::DestroyInstance(void)",
        ),
    ),
    (
        "pWorldScene__13RenderManager",
        Ok(
            "RenderManager::pWorldScene(void)",
        ),
    ),
    (
        "pWorldRenderLayer__13RenderManager",
        Ok(
            "RenderManager::pWorldRenderLayer(void)",
        ),
    ),
    (
        "OnChunkLoaded__13RenderManagerP7tEntityiUi",
        Ok(
            "RenderManager::OnChunkLoaded(tEntity *, int, unsigned int)",
        ),
    ),
    (
        "OnProcessRequestsComplete__13RenderManagerPv",
        Ok(
            "RenderManager::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "DoPostLevelLoad__13RenderManager",
        Ok(
            "RenderManager::DoPostLevelLoad(void)",
        ),
    ),
    (
        "mpLayer__13RenderManagerQ211RenderEnums9LayerEnum",
        Ok(
            "RenderManager::mpLayer(RenderEnums::LayerEnum)",
        ),
    ),
    (
        "FreezeForPresentation__13RenderManager",
        Ok(
            "RenderManager::FreezeForPresentation(void)",
        ),
    ),
    (
        "ThawFromPresentation__13RenderManager",
        Ok(
            "RenderManager::ThawFromPresentation(void)",
        ),
    ),
    (
        "HandleEvent__13RenderManager9EventEnumPv",
        Ok(
            "RenderManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "InitLayers__13RenderManager",
        Ok(
            "RenderManager::InitLayers(void)",
        ),
    ),
    (
        "SetLevelLayerLights__13RenderManagerP11tLightGroup",
        Ok(
            "RenderManager::SetLevelLayerLights(tLightGroup *)",
        ),
    ),
    (
        "ClearLevelLayerLights__13RenderManager",
        Ok(
            "RenderManager::ClearLevelLayerLights(void)",
        ),
    ),
    (
        "__13RenderManager",
        Ok(
            "RenderManager::RenderManager(void)",
        ),
    ),
    (
        "_$_13RenderManager",
        Ok(
            "RenderManager::~RenderManager(void)",
        ),
    ),
    (
        "__Q213RenderManager12MoodLighting",
        Ok(
            "RenderManager::MoodLighting::MoodLighting(void)",
        ),
    ),
    (
        "_$_Q213RenderManager12MoodLighting",
        Ok(
            "RenderManager::MoodLighting::~MoodLighting(void)",
        ),
    ),
    (
        "CalculateModulus__Q213RenderManager12MoodLighting",
        Ok(
            "RenderManager::MoodLighting::CalculateModulus(void)",
        ),
    ),
    (
        "SetLightMod__13RenderManagerRC10pddiColour",
        Ok(
            "RenderManager::SetLightMod(pddiColour const &)",
        ),
    ),
    (
        "TransitionMoodLighting__13RenderManagerUi",
        Ok(
            "RenderManager::TransitionMoodLighting(unsigned int)",
        ),
    ),
    (
        "ResetMoodLighting__13RenderManagerb",
        Ok(
            "RenderManager::ResetMoodLighting(bool)",
        ),
    ),
    (
        "ApplyPS2Blur__13RenderManager",
        Ok(
            "RenderManager::ApplyPS2Blur(void)",
        ),
    ),
    (
        "__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::WorldRenderLayer(void)",
        ),
    ),
    (
        "Render__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::Render(void)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP12IntersectDSG",
        Ok(
            "WorldRenderLayer::AddGuts(IntersectDSG *)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP15StaticEntityDSG",
        Ok(
            "WorldRenderLayer::AddGuts(StaticEntityDSG *)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP13StaticPhysDSG",
        Ok(
            "WorldRenderLayer::AddGuts(StaticPhysDSG *)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP14FenceEntityDSG",
        Ok(
            "WorldRenderLayer::AddGuts(FenceEntityDSG *)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP22AnimCollisionEntityDSG",
        Ok(
            "WorldRenderLayer::AddGuts(AnimCollisionEntityDSG *)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP13AnimEntityDSG",
        Ok(
            "WorldRenderLayer::AddGuts(AnimEntityDSG *)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP11DynaPhysDSG",
        Ok(
            "WorldRenderLayer::AddGuts(DynaPhysDSG *)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP13TriggerVolume",
        Ok(
            "WorldRenderLayer::AddGuts(TriggerVolume *)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP11RoadSegment",
        Ok(
            "WorldRenderLayer::AddGuts(RoadSegment *)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP11PathSegment",
        Ok(
            "WorldRenderLayer::AddGuts(PathSegment *)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP14WorldSphereDSG",
        Ok(
            "WorldRenderLayer::AddGuts(WorldSphereDSG *)",
        ),
    ),
    (
        "GetCurSectionName__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::GetCurSectionName(void)",
        ),
    ),
    (
        "RemoveGuts__16WorldRenderLayerP10IEntityDSG",
        Ok(
            "WorldRenderLayer::RemoveGuts(IEntityDSG *)",
        ),
    ),
    (
        "AddGuts__16WorldRenderLayerP11SpatialTree",
        Ok(
            "WorldRenderLayer::AddGuts(SpatialTree *)",
        ),
    ),
    (
        "ActivateWS__16WorldRenderLayerG13tUidUnaligned",
        Ok(
            "WorldRenderLayer::ActivateWS(tUidUnaligned)",
        ),
    ),
    (
        "DeactivateWS__16WorldRenderLayerG13tUidUnaligned",
        Ok(
            "WorldRenderLayer::DeactivateWS(tUidUnaligned)",
        ),
    ),
    (
        "NullifyGuts__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::NullifyGuts(void)",
        ),
    ),
    (
        "SetUpGuts__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::SetUpGuts(void)",
        ),
    ),
    (
        "DoPreStaticLoad__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::DoPreStaticLoad(void)",
        ),
    ),
    (
        "DoPostStaticLoad__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::DoPostStaticLoad(void)",
        ),
    ),
    (
        "DumpAllDynaLoads__16WorldRenderLayerUiRt9SwapArray1ZP11tRefCounted",
        Ok(
            "WorldRenderLayer::DumpAllDynaLoads(unsigned int, SwapArray<tRefCounted *> &)",
        ),
    ),
    (
        "DumpDynaLoad__16WorldRenderLayerR5tNameRt9SwapArray1ZP11tRefCounted",
        Ok(
            "WorldRenderLayer::DumpDynaLoad(tName &, SwapArray<tRefCounted *> &)",
        ),
    ),
    (
        "DoPreDynaLoad__16WorldRenderLayerR5tName",
        Ok(
            "WorldRenderLayer::DoPreDynaLoad(tName &)",
        ),
    ),
    (
        "DoPostDynaLoad__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::DoPostDynaLoad(void)",
        ),
    ),
    (
        "pWorldScene__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::pWorldScene(void)",
        ),
    ),
    (
        "IsGutsSetup__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::IsGutsSetup(void)",
        ),
    ),
    (
        "OnWorldRenderLayerInit__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::OnWorldRenderLayerInit(void)",
        ),
    ),
    (
        "DumpAllDynaLoads__16WorldRenderLayer",
        Ok(
            "WorldRenderLayer::DumpAllDynaLoads(void)",
        ),
    ),
    (
        "DumpDynaLoad__16WorldRenderLayerR5tName",
        Ok(
            "WorldRenderLayer::DumpDynaLoad(tName &)",
        ),
    ),
    (
        "__tf11RenderLayer",
        Ok(
            "RenderLayer type_info function",
        ),
    ),
    (
        "__tf19FrontEndRenderLayer",
        Ok(
            "FrontEndRenderLayer type_info function",
        ),
    ),
    (
        "__tf13RenderManager",
        Ok(
            "RenderManager type_info function",
        ),
    ),
    (
        "__tf16WorldRenderLayer",
        Ok(
            "WorldRenderLayer type_info function",
        ),
    ),
    (
        "__21ChunkListenerCallback",
        Ok(
            "ChunkListenerCallback::ChunkListenerCallback(void)",
        ),
    ),
    (
        "_$_23InteriorLoadedEventData",
        Ok(
            "InteriorLoadedEventData::~InteriorLoadedEventData(void)",
        ),
    ),
    (
        "__23InteriorLoadedEventData",
        Ok(
            "InteriorLoadedEventData::InteriorLoadedEventData(void)",
        ),
    ),
    (
        "__tf21ChunkListenerCallback",
        Ok(
            "ChunkListenerCallback type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__19FrontEndRenderLayer",
        Ok(
            "global constructors keyed to FrontEndRenderLayer::FrontEndRenderLayer(void)",
        ),
    ),
    (
        "InitOnceLUTs__11CubicBezier",
        Ok(
            "CubicBezier::InitOnceLUTs(void)",
        ),
    ),
    (
        "__11CubicBezier",
        Ok(
            "CubicBezier::CubicBezier(void)",
        ),
    ),
    (
        "_$_11CubicBezier",
        Ok(
            "CubicBezier::~CubicBezier(void)",
        ),
    ),
    (
        "GetCubicBezierCurve__11CubicBezierRPQ218RadicalMathLibrary6VectorRi",
        Ok(
            "CubicBezier::GetCubicBezierCurve(RadicalMathLibrary::Vector *&, int &)",
        ),
    ),
    (
        "SetControlPoint__11CubicBezierRCQ218RadicalMathLibrary6Vectori",
        Ok(
            "CubicBezier::SetControlPoint(RadicalMathLibrary::Vector const &, int)",
        ),
    ),
    (
        "AddControlPoint__11CubicBezierRCQ218RadicalMathLibrary6Vector",
        Ok(
            "CubicBezier::AddControlPoint(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "CreateCubicBezierCurve__11CubicBezier",
        Ok(
            "CubicBezier::CreateCubicBezierCurve(void)",
        ),
    ),
    (
        "__10DListArray",
        Ok(
            "DListArray::DListArray(void)",
        ),
    ),
    (
        "Clear__10DListArray",
        Ok(
            "DListArray::Clear(void)",
        ),
    ),
    (
        "AddLast__10DListArrayPv",
        Ok(
            "DListArray::AddLast(void *)",
        ),
    ),
    (
        "Remove__10DListArrayi",
        Ok(
            "DListArray::Remove(int)",
        ),
    ),
    (
        "IntersectLineSphere__FRCQ218RadicalMathLibrary6VectorT0RCQ218RadicalMathLibrary6SpherePQ218RadicalMathLibrary6Vector",
        Ok(
            "IntersectLineSphere(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Sphere const &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "WillCollide__FRCQ218RadicalMathLibrary6VectorN20ffT0Rb",
        Ok(
            "WillCollide(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, RadicalMathLibrary::Vector const &, bool &)",
        ),
    ),
    (
        "UpdateVUP__FRCQ218RadicalMathLibrary6VectorT0",
        Ok(
            "UpdateVUP(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "PointsOnSameSideOfLine__FRCQ218RadicalMathLibrary6VectorN30",
        Ok(
            "PointsOnSameSideOfLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Get90DegreeRightTurn__FRCQ218RadicalMathLibrary6Vector",
        Ok(
            "Get90DegreeRightTurn(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetRotationAboutY__Fff",
        Ok(
            "GetRotationAboutY(float, float)",
        ),
    ),
    (
        "FindClosestPointOnLine__FRCQ218RadicalMathLibrary6VectorN20RQ218RadicalMathLibrary6Vector",
        Ok(
            "FindClosestPointOnLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "GetLineSegmentT__FRCQ218RadicalMathLibrary6VectorN20",
        Ok(
            "GetLineSegmentT(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__12Intersection",
        Ok(
            "Intersection::Intersection(void)",
        ),
    ),
    (
        "_$_12Intersection",
        Ok(
            "Intersection::~Intersection(void)",
        ),
    ),
    (
        "Update__12IntersectionUi",
        Ok(
            "Intersection::Update(unsigned int)",
        ),
    ),
    (
        "AdvanceTraffic__C12IntersectionUiUi",
        Ok(
            "Intersection::AdvanceTraffic(unsigned int, unsigned int) const",
        ),
    ),
    (
        "AdvanceNextWaitingRoad__12Intersection",
        Ok(
            "Intersection::AdvanceNextWaitingRoad(void)",
        ),
    ),
    (
        "AddRoadIn__12IntersectionP4Road",
        Ok(
            "Intersection::AddRoadIn(Road *)",
        ),
    ),
    (
        "AddRoadOut__12IntersectionP4Road",
        Ok(
            "Intersection::AddRoadOut(Road *)",
        ),
    ),
    (
        "FindRoadIn__C12IntersectionPC4Road",
        Ok(
            "Intersection::FindRoadIn(Road const *) const",
        ),
    ),
    (
        "GetLocation__C12IntersectionRQ218RadicalMathLibrary6Vector",
        Ok(
            "Intersection::GetLocation(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "PopulateShortestRoads__12IntersectionRt9SwapArray1ZQ211RoadManager12ShortestRoadb",
        Ok(
            "Intersection::PopulateShortestRoads(SwapArray<RoadManager::ShortestRoad> &, bool)",
        ),
    ),
    (
        "SortRoads__12Intersection",
        Ok(
            "Intersection::SortRoads(void)",
        ),
    ),
    (
        "GetType__C12Intersection",
        Ok(
            "Intersection::GetType(void) const",
        ),
    ),
    (
        "SetType__12IntersectionQ212Intersection4Type",
        Ok(
            "Intersection::SetType(Intersection::Type)",
        ),
    ),
    (
        "IsPointInIntersection__C12IntersectionRQ218RadicalMathLibrary6Vector",
        Ok(
            "Intersection::IsPointInIntersection(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "FindGoodTrafficLane__12IntersectionRC4RoadUiRP4LaneRUi",
        Ok(
            "Intersection::FindGoodTrafficLane(Road const &, unsigned int, Lane *&, unsigned int &)",
        ),
    ),
    (
        "GetLeftTurnForTraffic__12IntersectionRC4RoadUiRP4RoadRP4LaneRUi",
        Ok(
            "Intersection::GetLeftTurnForTraffic(Road const &, unsigned int, Road *&, Lane *&, unsigned int &)",
        ),
    ),
    (
        "GetStraightForTraffic__12IntersectionRC4RoadUiRP4RoadRP4LaneRUi",
        Ok(
            "Intersection::GetStraightForTraffic(Road const &, unsigned int, Road *&, Lane *&, unsigned int &)",
        ),
    ),
    (
        "GetRightTurnForTraffic__12IntersectionRC4RoadUiRP4RoadRP4LaneRUi",
        Ok(
            "Intersection::GetRightTurnForTraffic(Road const &, unsigned int, Road *&, Lane *&, unsigned int &)",
        ),
    ),
    (
        "GetOtherIntersection__12IntersectionbP12IntersectionRP12IntersectionRPQ211RoadManager12ShortestRoad",
        Ok(
            "Intersection::GetOtherIntersection(bool, Intersection *, Intersection *&, RoadManager::ShortestRoad *&)",
        ),
    ),
    (
        "__4Lane",
        Ok(
            "Lane::Lane(void)",
        ),
    ),
    (
        "_$_4Lane",
        Ok(
            "Lane::~Lane(void)",
        ),
    ),
    (
        "Create__4LaneiP4Road",
        Ok(
            "Lane::Create(int, Road *)",
        ),
    ),
    (
        "NotifyWaitingTraffic__4LaneUi",
        Ok(
            "Lane::NotifyWaitingTraffic(unsigned int)",
        ),
    ),
    (
        "__4Road",
        Ok(
            "Road::Road(void)",
        ),
    ),
    (
        "_$_4Road",
        Ok(
            "Road::~Road(void)",
        ),
    ),
    (
        "AllocateSegments__4RoadUi",
        Ok(
            "Road::AllocateSegments(unsigned int)",
        ),
    ),
    (
        "AddRoadSegment__4RoadP11RoadSegment",
        Ok(
            "Road::AddRoadSegment(RoadSegment *)",
        ),
    ),
    (
        "CreateLanes__4Road",
        Ok(
            "Road::CreateLanes(void)",
        ),
    ),
    (
        "GetLane__C4RoadUi",
        Ok(
            "Road::GetLane(unsigned int) const",
        ),
    ),
    (
        "GetRoadSegment__C4RoadUi",
        Ok(
            "Road::GetRoadSegment(unsigned int) const",
        ),
    ),
    (
        "GetRoadSegmentAtPoint__C4RoadRCQ218RadicalMathLibrary6VectorPP11RoadSegmentRfT3i",
        Ok(
            "Road::GetRoadSegmentAtPoint(RadicalMathLibrary::Vector const &, RoadSegment **, float &, float &, int) const",
        ),
    ),
    (
        "IsPointInRoadSegment__C4RoadiRCQ218RadicalMathLibrary6VectorRfT3",
        Ok(
            "Road::IsPointInRoadSegment(int, RadicalMathLibrary::Vector const &, float &, float &) const",
        ),
    ),
    (
        "SetDensity__4RoadUi",
        Ok(
            "Road::SetDensity(unsigned int)",
        ),
    ),
    (
        "FindRoadSegmentAtDist__4RoadfPP11RoadSegment",
        Ok(
            "Road::FindRoadSegmentAtDist(float, RoadSegment **)",
        ),
    ),
    (
        "GetInstance__11RoadManager",
        Ok(
            "RoadManager::GetInstance(void)",
        ),
    ),
    (
        "Destroy__11RoadManager",
        Ok(
            "RoadManager::Destroy(void)",
        ),
    ),
    (
        "__11RoadManager",
        Ok(
            "RoadManager::RoadManager(void)",
        ),
    ),
    (
        "_$_11RoadManager",
        Ok(
            "RoadManager::~RoadManager(void)",
        ),
    ),
    (
        "Init__11RoadManagerb",
        Ok(
            "RoadManager::Init(bool)",
        ),
    ),
    (
        "InitializeRoadMemory__11RoadManagerUi",
        Ok(
            "RoadManager::InitializeRoadMemory(unsigned int)",
        ),
    ),
    (
        "InitializeIntersectionMemory__11RoadManagerUi",
        Ok(
            "RoadManager::InitializeIntersectionMemory(unsigned int)",
        ),
    ),
    (
        "InitializeRoadSegmentDataMemory__11RoadManagerUi",
        Ok(
            "RoadManager::InitializeRoadSegmentDataMemory(unsigned int)",
        ),
    ),
    (
        "DumpRoadSegmentDataMemory__11RoadManager",
        Ok(
            "RoadManager::DumpRoadSegmentDataMemory(void)",
        ),
    ),
    (
        "InitializeRoadSegmentMemory__11RoadManagerUi",
        Ok(
            "RoadManager::InitializeRoadSegmentMemory(unsigned int)",
        ),
    ),
    (
        "GetFreeRoadMemory__11RoadManager",
        Ok(
            "RoadManager::GetFreeRoadMemory(void)",
        ),
    ),
    (
        "GetFreeIntersectionMemory__11RoadManager",
        Ok(
            "RoadManager::GetFreeIntersectionMemory(void)",
        ),
    ),
    (
        "GetFreeRoadSegmentDataMemory__11RoadManager",
        Ok(
            "RoadManager::GetFreeRoadSegmentDataMemory(void)",
        ),
    ),
    (
        "GetFreeRoadSegmentMemory__11RoadManager",
        Ok(
            "RoadManager::GetFreeRoadSegmentMemory(void)",
        ),
    ),
    (
        "GetMaxPathElements__11RoadManager",
        Ok(
            "RoadManager::GetMaxPathElements(void)",
        ),
    ),
    (
        "FindClosestPointOnRoad__11RoadManagerPC4RoadRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6VectorRfRi",
        Ok(
            "RoadManager::FindClosestPointOnRoad(Road const *, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, float &, int &)",
        ),
    ),
    (
        "DetermineRoadT__11RoadManagerP11RoadSegmentf",
        Ok(
            "RoadManager::DetermineRoadT(RoadSegment *, float)",
        ),
    ),
    (
        "DetermineSegmentT__11RoadManagerRCQ218RadicalMathLibrary6VectorP11RoadSegment",
        Ok(
            "RoadManager::DetermineSegmentT(RadicalMathLibrary::Vector const &, RoadSegment *)",
        ),
    ),
    (
        "CreateRoadNetwork__11RoadManager",
        Ok(
            "RoadManager::CreateRoadNetwork(void)",
        ),
    ),
    (
        "PopulateConnectivityData__11RoadManagerbP12Intersectioni",
        Ok(
            "RoadManager::PopulateConnectivityData(bool, Intersection *, int)",
        ),
    ),
    (
        "VisitAll__11RoadManagerRt9SwapArray1ZQ211RoadManager12DijkstraNode",
        Ok(
            "RoadManager::VisitAll(SwapArray<RoadManager::DijkstraNode> &)",
        ),
    ),
    (
        "FindPathElementsBetween__11RoadManagerbRQ211RoadManager11PathElementfRCQ218RadicalMathLibrary6VectorT2fT4Rt9SwapArray1ZQ211RoadManager11PathElement",
        Ok(
            "RoadManager::FindPathElementsBetween(bool, RoadManager::PathElement &, float, RadicalMathLibrary::Vector const &, RoadManager::PathElement &, float, RadicalMathLibrary::Vector const &, SwapArray<RoadManager::PathElement> &)",
        ),
    ),
    (
        "GetTraversalDistance__11RoadManagerPQ211RoadManager12ShortestRoadT1",
        Ok(
            "RoadManager::GetTraversalDistance(RoadManager::ShortestRoad *, RoadManager::ShortestRoad *)",
        ),
    ),
    (
        "FindDistToTargetInOneDirection__11RoadManagerbP12IntersectionN22PQ211RoadManager12ShortestRoadRt9SwapArray1ZQ211RoadManager11PathElementRPQ211RoadManager12ShortestRoadT7RQ211RoadManager10ErrorValue",
        Ok(
            "RoadManager::FindDistToTargetInOneDirection(bool, Intersection *, Intersection *, Intersection *, RoadManager::ShortestRoad *, SwapArray<RoadManager::PathElement> &, RoadManager::ShortestRoad *&, RoadManager::ShortestRoad *&, RoadManager::ErrorValue &)",
        ),
    ),
    (
        "TraverseRoads__11RoadManagerbP12IntersectionN22Rt9SwapArray1ZQ211RoadManager11PathElementRQ211RoadManager10ErrorValue",
        Ok(
            "RoadManager::TraverseRoads(bool, Intersection *, Intersection *, Intersection *, SwapArray<RoadManager::PathElement> &, RoadManager::ErrorValue &)",
        ),
    ),
    (
        "FindIntersection__11RoadManagerPCc",
        Ok(
            "RoadManager::FindIntersection(char const *)",
        ),
    ),
    (
        "FindIntersection__11RoadManagerG13tUidUnaligned",
        Ok(
            "RoadManager::FindIntersection(tUidUnaligned)",
        ),
    ),
    (
        "FindIntersection__11RoadManagerRQ218RadicalMathLibrary6Vector",
        Ok(
            "RoadManager::FindIntersection(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "FindIntersection__11RoadManageri",
        Ok(
            "RoadManager::FindIntersection(int)",
        ),
    ),
    (
        "FindRoad__C11RoadManagerRCQ218RadicalMathLibrary6VectorPPC4RoadPP11RoadSegmentRiRfT5b",
        Ok(
            "RoadManager::FindRoad(RadicalMathLibrary::Vector const &, Road const **, RoadSegment **, int &, float &, float &, bool) const",
        ),
    ),
    (
        "FindRoadSegmentData__11RoadManagerPCc",
        Ok(
            "RoadManager::FindRoadSegmentData(char const *)",
        ),
    ),
    (
        "FindRoadSegmentData__11RoadManagerG13tUidUnaligned",
        Ok(
            "RoadManager::FindRoadSegmentData(tUidUnaligned)",
        ),
    ),
    (
        "AddRoad__11RoadManagerP4Road",
        Ok(
            "RoadManager::AddRoad(Road *)",
        ),
    ),
    (
        "AddIntersection__11RoadManagerP12Intersection",
        Ok(
            "RoadManager::AddIntersection(Intersection *)",
        ),
    ),
    (
        "AddRoadSegmentData__11RoadManagerP15RoadSegmentData",
        Ok(
            "RoadManager::AddRoadSegmentData(RoadSegmentData *)",
        ),
    ),
    (
        "AddRoadSegment__11RoadManagerP11RoadSegment",
        Ok(
            "RoadManager::AddRoadSegment(RoadSegment *)",
        ),
    ),
    (
        "__11RoadSegment",
        Ok(
            "RoadSegment::RoadSegment(void)",
        ),
    ),
    (
        "_$_11RoadSegment",
        Ok(
            "RoadSegment::~RoadSegment(void)",
        ),
    ),
    (
        "Init__11RoadSegmentP15RoadSegmentDataRQ218RadicalMathLibrary6Matrixf",
        Ok(
            "RoadSegment::Init(RoadSegmentData *, RadicalMathLibrary::Matrix &, float)",
        ),
    ),
    (
        "GetBoundingBox__11RoadSegmentPQ218RadicalMathLibrary5Box3D",
        Ok(
            "RoadSegment::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__11RoadSegmentPQ218RadicalMathLibrary6Sphere",
        Ok(
            "RoadSegment::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "CalculateUnitDistIntoRoadSegment__11RoadSegmentff",
        Ok(
            "RoadSegment::CalculateUnitDistIntoRoadSegment(float, float)",
        ),
    ),
    (
        "CalculateUnitHeightInRoadSegment__11RoadSegmentff",
        Ok(
            "RoadSegment::CalculateUnitHeightInRoadSegment(float, float)",
        ),
    ),
    (
        "GetPosition__11RoadSegmentffPQ218RadicalMathLibrary6Vector",
        Ok(
            "RoadSegment::GetPosition(float, float, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetLaneLocation__11RoadSegmentfiRQ218RadicalMathLibrary6VectorT3",
        Ok(
            "RoadSegment::GetLaneLocation(float, int, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "GetCorner__11RoadSegmentiRQ218RadicalMathLibrary6Vector",
        Ok(
            "RoadSegment::GetCorner(int, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "GetEdgeNormal__11RoadSegmentiRQ218RadicalMathLibrary6Vector",
        Ok(
            "RoadSegment::GetEdgeNormal(int, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "GetSegmentNormal__11RoadSegmentRQ218RadicalMathLibrary6Vector",
        Ok(
            "RoadSegment::GetSegmentNormal(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "GetNumLanes__11RoadSegment",
        Ok(
            "RoadSegment::GetNumLanes(void)",
        ),
    ),
    (
        "GetLaneLength__11RoadSegmentUi",
        Ok(
            "RoadSegment::GetLaneLength(unsigned int)",
        ),
    ),
    (
        "GetRoadWidth__11RoadSegment",
        Ok(
            "RoadSegment::GetRoadWidth(void)",
        ),
    ),
    (
        "__15RoadSegmentData",
        Ok(
            "RoadSegmentData::RoadSegmentData(void)",
        ),
    ),
    (
        "_$_15RoadSegmentData",
        Ok(
            "RoadSegmentData::~RoadSegmentData(void)",
        ),
    ),
    (
        "SetData__15RoadSegmentDataRCQ218RadicalMathLibrary6VectorN21Ui",
        Ok(
            "RoadSegmentData::SetData(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, unsigned int)",
        ),
    ),
    (
        "GetCorner__C15RoadSegmentDatai",
        Ok(
            "RoadSegmentData::GetCorner(int) const",
        ),
    ),
    (
        "GetEdgeNormal__C15RoadSegmentDatai",
        Ok(
            "RoadSegmentData::GetEdgeNormal(int) const",
        ),
    ),
    (
        "GetSegmentNormal__C15RoadSegmentData",
        Ok(
            "RoadSegmentData::GetSegmentNormal(void) const",
        ),
    ),
    (
        "GetNumLanes__C15RoadSegmentData",
        Ok(
            "RoadSegmentData::GetNumLanes(void) const",
        ),
    ),
    (
        "Update__12TrafficLightUi",
        Ok(
            "TrafficLight::Update(unsigned int)",
        ),
    ),
    (
        "SwitchControl__12TrafficLight",
        Ok(
            "TrafficLight::SwitchControl(void)",
        ),
    ),
    (
        "Update__8NWayStopUi",
        Ok(
            "NWayStop::Update(unsigned int)",
        ),
    ),
    (
        "Update__12CourtesyStopUi",
        Ok(
            "CourtesyStop::Update(unsigned int)",
        ),
    ),
    (
        "__tf14TrafficControl",
        Ok(
            "TrafficControl type_info function",
        ),
    ),
    (
        "__tf12TrafficLight",
        Ok(
            "TrafficLight type_info function",
        ),
    ),
    (
        "__tf8NWayStop",
        Ok(
            "NWayStop type_info function",
        ),
    ),
    (
        "_$_12CourtesyStop",
        Ok(
            "CourtesyStop::~CourtesyStop(void)",
        ),
    ),
    (
        "__tf12CourtesyStop",
        Ok(
            "CourtesyStop type_info function",
        ),
    ),
    (
        "__tf4Lane",
        Ok(
            "Lane type_info function",
        ),
    ),
    (
        "__tf11RoadManager",
        Ok(
            "RoadManager type_info function",
        ),
    ),
    (
        "__tf11RoadSegment",
        Ok(
            "RoadSegment type_info function",
        ),
    ),
    (
        "_$_14TrafficControl",
        Ok(
            "TrafficControl::~TrafficControl(void)",
        ),
    ),
    (
        "_$_12TrafficLight",
        Ok(
            "TrafficLight::~TrafficLight(void)",
        ),
    ),
    (
        "_$_8NWayStop",
        Ok(
            "NWayStop::~NWayStop(void)",
        ),
    ),
    (
        "__16ILaneInformation",
        Ok(
            "ILaneInformation::ILaneInformation(void)",
        ),
    ),
    (
        "__12ILaneControl",
        Ok(
            "ILaneControl::ILaneControl(void)",
        ),
    ),
    (
        "SetSpeedLimit__4Lanef",
        Ok(
            "Lane::SetSpeedLimit(float)",
        ),
    ),
    (
        "GetRoad__C4Lane",
        Ok(
            "Lane::GetRoad(void) const",
        ),
    ),
    (
        "GetSpeedLimit__C4Lane",
        Ok(
            "Lane::GetSpeedLimit(void) const",
        ),
    ),
    (
        "SetDensity__4Lanei",
        Ok(
            "Lane::SetDensity(int)",
        ),
    ),
    (
        "GetDensity__C4Lane",
        Ok(
            "Lane::GetDensity(void) const",
        ),
    ),
    (
        "_$_Q211RoadManager15BigIntersection",
        Ok(
            "RoadManager::BigIntersection::~BigIntersection(void)",
        ),
    ),
    (
        "__Q211RoadManager15BigIntersection",
        Ok(
            "RoadManager::BigIntersection::BigIntersection(void)",
        ),
    ),
    (
        "Display__11RoadSegment",
        Ok(
            "RoadSegment::Display(void)",
        ),
    ),
    (
        "pPosition__11RoadSegment",
        Ok(
            "RoadSegment::pPosition(void)",
        ),
    ),
    (
        "rPosition__11RoadSegment",
        Ok(
            "RoadSegment::rPosition(void)",
        ),
    ),
    (
        "GetPosition__11RoadSegmentPQ218RadicalMathLibrary6Vector",
        Ok(
            "RoadSegment::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "__tf16ILaneInformation",
        Ok(
            "ILaneInformation type_info function",
        ),
    ),
    (
        "__tf12ILaneControl",
        Ok(
            "ILaneControl type_info function",
        ),
    ),
    (
        "__8Listener",
        Ok(
            "Listener::Listener(void)",
        ),
    ),
    (
        "_$_8Listener",
        Ok(
            "Listener::~Listener(void)",
        ),
    ),
    (
        "Initialize__8ListenerRQ25Sound23daSoundRenderingManager",
        Ok(
            "Listener::Initialize(Sound::daSoundRenderingManager &)",
        ),
    ),
    (
        "Update__8Listener11ContextEnum",
        Ok(
            "Listener::Update(ContextEnum)",
        ),
    ),
    (
        "__19SimpsonsSoundPlayer",
        Ok(
            "SimpsonsSoundPlayer::SimpsonsSoundPlayer(void)",
        ),
    ),
    (
        "_$_19SimpsonsSoundPlayer",
        Ok(
            "SimpsonsSoundPlayer::~SimpsonsSoundPlayer(void)",
        ),
    ),
    (
        "PlaySound__19SimpsonsSoundPlayerPCcP27SimpsonsSoundPlayerCallback",
        Ok(
            "SimpsonsSoundPlayer::PlaySound(char const *, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "PlayResource__19SimpsonsSoundPlayerP16IDaSoundResourceUiP27SimpsonsSoundPlayerCallback",
        Ok(
            "SimpsonsSoundPlayer::PlayResource(IDaSoundResource *, unsigned int, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "PlaySound__19SimpsonsSoundPlayerUiP27SimpsonsSoundPlayerCallback",
        Ok(
            "SimpsonsSoundPlayer::PlaySound(unsigned int, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "QueueSound__19SimpsonsSoundPlayerUiP27SimpsonsSoundPlayerCallback",
        Ok(
            "SimpsonsSoundPlayer::QueueSound(unsigned int, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "QueueSound__19SimpsonsSoundPlayerP16IDaSoundResourceUiP27SimpsonsSoundPlayerCallback",
        Ok(
            "SimpsonsSoundPlayer::QueueSound(IDaSoundResource *, unsigned int, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "PlayQueuedSound__19SimpsonsSoundPlayerP27SimpsonsSoundPlayerCallback",
        Ok(
            "SimpsonsSoundPlayer::PlayQueuedSound(SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "OnPlaybackComplete__19SimpsonsSoundPlayer",
        Ok(
            "SimpsonsSoundPlayer::OnPlaybackComplete(void)",
        ),
    ),
    (
        "Stop__19SimpsonsSoundPlayer",
        Ok(
            "SimpsonsSoundPlayer::Stop(void)",
        ),
    ),
    (
        "Pause__19SimpsonsSoundPlayer",
        Ok(
            "SimpsonsSoundPlayer::Pause(void)",
        ),
    ),
    (
        "Continue__19SimpsonsSoundPlayer",
        Ok(
            "SimpsonsSoundPlayer::Continue(void)",
        ),
    ),
    (
        "IsPaused__19SimpsonsSoundPlayer",
        Ok(
            "SimpsonsSoundPlayer::IsPaused(void)",
        ),
    ),
    (
        "SetPitch__19SimpsonsSoundPlayerf",
        Ok(
            "SimpsonsSoundPlayer::SetPitch(float)",
        ),
    ),
    (
        "SetTrim__19SimpsonsSoundPlayerf",
        Ok(
            "SimpsonsSoundPlayer::SetTrim(float)",
        ),
    ),
    (
        "dumpSoundPlayer__19SimpsonsSoundPlayer",
        Ok(
            "SimpsonsSoundPlayer::dumpSoundPlayer(void)",
        ),
    ),
    (
        "__12SoundClusteriP13IRadNameSpace",
        Ok(
            "SoundCluster::SoundCluster(int, IRadNameSpace *)",
        ),
    ),
    (
        "_$_12SoundCluster",
        Ok(
            "SoundCluster::~SoundCluster(void)",
        ),
    ),
    (
        "LoadSounds__12SoundClusterP16SoundFileHandler",
        Ok(
            "SoundCluster::LoadSounds(SoundFileHandler *)",
        ),
    ),
    (
        "UnloadSounds__12SoundCluster",
        Ok(
            "SoundCluster::UnloadSounds(void)",
        ),
    ),
    (
        "AddResource__12SoundClusterUi",
        Ok(
            "SoundCluster::AddResource(unsigned int)",
        ),
    ),
    (
        "OnDynaLoadOperationsComplete__12SoundClusterPv",
        Ok(
            "SoundCluster::OnDynaLoadOperationsComplete(void *)",
        ),
    ),
    (
        "__11SoundLoader",
        Ok(
            "SoundLoader::SoundLoader(void)",
        ),
    ),
    (
        "_$_11SoundLoader",
        Ok(
            "SoundLoader::~SoundLoader(void)",
        ),
    ),
    (
        "LevelLoad__11SoundLoaderQ211RenderEnums9LevelEnum",
        Ok(
            "SoundLoader::LevelLoad(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "LevelUnload__11SoundLoaderb",
        Ok(
            "SoundLoader::LevelUnload(bool)",
        ),
    ),
    (
        "LoadCarSound__11SoundLoaderP7Vehicleb",
        Ok(
            "SoundLoader::LoadCarSound(Vehicle *, bool)",
        ),
    ),
    (
        "LoadClusterByName__11SoundLoaderPCcP16SoundFileHandler",
        Ok(
            "SoundLoader::LoadClusterByName(char const *, SoundFileHandler *)",
        ),
    ),
    (
        "HandleEvent__11SoundLoader9EventEnumPv",
        Ok(
            "SoundLoader::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "queueLoad__11SoundLoader16SoundClusterName",
        Ok(
            "SoundLoader::queueLoad(SoundClusterName)",
        ),
    ),
    (
        "clusterLoad__11SoundLoader16SoundClusterNameP16SoundFileHandler",
        Ok(
            "SoundLoader::clusterLoad(SoundClusterName, SoundFileHandler *)",
        ),
    ),
    (
        "clusterUnload__11SoundLoader16SoundClusterName",
        Ok(
            "SoundLoader::clusterUnload(SoundClusterName)",
        ),
    ),
    (
        "CreateInstance__12SoundManagerbN31",
        Ok(
            "SoundManager::CreateInstance(bool, bool, bool, bool)",
        ),
    ),
    (
        "GetInstance__12SoundManager",
        Ok(
            "SoundManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__12SoundManager",
        Ok(
            "SoundManager::DestroyInstance(void)",
        ),
    ),
    (
        "Update__12SoundManager",
        Ok(
            "SoundManager::Update(void)",
        ),
    ),
    (
        "UpdateOncePerFrame__12SoundManagerUi11ContextEnumb",
        Ok(
            "SoundManager::UpdateOncePerFrame(unsigned int, ContextEnum, bool)",
        ),
    ),
    (
        "HandleEvent__12SoundManager9EventEnumPv",
        Ok(
            "SoundManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnBootupStart__12SoundManager",
        Ok(
            "SoundManager::OnBootupStart(void)",
        ),
    ),
    (
        "OnBootupComplete__12SoundManager",
        Ok(
            "SoundManager::OnBootupComplete(void)",
        ),
    ),
    (
        "QueueLevelSoundLoads__12SoundManager",
        Ok(
            "SoundManager::QueueLevelSoundLoads(void)",
        ),
    ),
    (
        "ResetDucking__12SoundManager",
        Ok(
            "SoundManager::ResetDucking(void)",
        ),
    ),
    (
        "OnFrontEndStart__12SoundManager",
        Ok(
            "SoundManager::OnFrontEndStart(void)",
        ),
    ),
    (
        "OnFrontEndEnd__12SoundManager",
        Ok(
            "SoundManager::OnFrontEndEnd(void)",
        ),
    ),
    (
        "OnGameplayStart__12SoundManager",
        Ok(
            "SoundManager::OnGameplayStart(void)",
        ),
    ),
    (
        "OnGameplayEnd__12SoundManagerb",
        Ok(
            "SoundManager::OnGameplayEnd(bool)",
        ),
    ),
    (
        "OnPauseStart__12SoundManager",
        Ok(
            "SoundManager::OnPauseStart(void)",
        ),
    ),
    (
        "OnPauseEnd__12SoundManager",
        Ok(
            "SoundManager::OnPauseEnd(void)",
        ),
    ),
    (
        "OnStoreScreenStart__12SoundManagerb",
        Ok(
            "SoundManager::OnStoreScreenStart(bool)",
        ),
    ),
    (
        "OnStoreScreenEnd__12SoundManager",
        Ok(
            "SoundManager::OnStoreScreenEnd(void)",
        ),
    ),
    (
        "DuckEverythingButMusicBegin__12SoundManagerb",
        Ok(
            "SoundManager::DuckEverythingButMusicBegin(bool)",
        ),
    ),
    (
        "DuckEverythingButMusicEnd__12SoundManagerb",
        Ok(
            "SoundManager::DuckEverythingButMusicEnd(bool)",
        ),
    ),
    (
        "OnMissionBriefingStart__12SoundManager",
        Ok(
            "SoundManager::OnMissionBriefingStart(void)",
        ),
    ),
    (
        "OnMissionBriefingEnd__12SoundManager",
        Ok(
            "SoundManager::OnMissionBriefingEnd(void)",
        ),
    ),
    (
        "DuckForInGameCredits__12SoundManager",
        Ok(
            "SoundManager::DuckForInGameCredits(void)",
        ),
    ),
    (
        "LoadSoundFile__12SoundManagerPCcP16SoundFileHandler",
        Ok(
            "SoundManager::LoadSoundFile(char const *, SoundFileHandler *)",
        ),
    ),
    (
        "LoadCarSound__12SoundManagerP7Vehicleb",
        Ok(
            "SoundManager::LoadCarSound(Vehicle *, bool)",
        ),
    ),
    (
        "SetMasterVolume__12SoundManagerf",
        Ok(
            "SoundManager::SetMasterVolume(float)",
        ),
    ),
    (
        "GetSfxVolume__12SoundManager",
        Ok(
            "SoundManager::GetSfxVolume(void)",
        ),
    ),
    (
        "SetSfxVolume__12SoundManagerf",
        Ok(
            "SoundManager::SetSfxVolume(float)",
        ),
    ),
    (
        "GetCarVolume__12SoundManager",
        Ok(
            "SoundManager::GetCarVolume(void)",
        ),
    ),
    (
        "SetCarVolume__12SoundManagerf",
        Ok(
            "SoundManager::SetCarVolume(float)",
        ),
    ),
    (
        "GetMusicVolume__12SoundManager",
        Ok(
            "SoundManager::GetMusicVolume(void)",
        ),
    ),
    (
        "SetMusicVolume__12SoundManagerf",
        Ok(
            "SoundManager::SetMusicVolume(float)",
        ),
    ),
    (
        "SetMusicVolumeWithoutTuner__12SoundManagerf",
        Ok(
            "SoundManager::SetMusicVolumeWithoutTuner(float)",
        ),
    ),
    (
        "SetAmbienceVolume__12SoundManagerf",
        Ok(
            "SoundManager::SetAmbienceVolume(float)",
        ),
    ),
    (
        "SetAmbienceVolumeWithoutTuner__12SoundManagerf",
        Ok(
            "SoundManager::SetAmbienceVolumeWithoutTuner(float)",
        ),
    ),
    (
        "GetCalculatedAmbienceVolume__12SoundManager",
        Ok(
            "SoundManager::GetCalculatedAmbienceVolume(void)",
        ),
    ),
    (
        "GetDialogueVolume__12SoundManager",
        Ok(
            "SoundManager::GetDialogueVolume(void)",
        ),
    ),
    (
        "SetDialogueVolume__12SoundManagerf",
        Ok(
            "SoundManager::SetDialogueVolume(float)",
        ),
    ),
    (
        "PlayCarOptionMenuStinger__12SoundManager",
        Ok(
            "SoundManager::PlayCarOptionMenuStinger(void)",
        ),
    ),
    (
        "PlayDialogueOptionMenuStinger__12SoundManager",
        Ok(
            "SoundManager::PlayDialogueOptionMenuStinger(void)",
        ),
    ),
    (
        "PlayMusicOptionMenuStinger__12SoundManager",
        Ok(
            "SoundManager::PlayMusicOptionMenuStinger(void)",
        ),
    ),
    (
        "PlaySfxOptionMenuStinger__12SoundManager",
        Ok(
            "SoundManager::PlaySfxOptionMenuStinger(void)",
        ),
    ),
    (
        "LoadNISSound__12SoundManagerUiP22NISSoundLoadedCallback",
        Ok(
            "SoundManager::LoadNISSound(unsigned int, NISSoundLoadedCallback *)",
        ),
    ),
    (
        "PlayNISSound__12SoundManagerUiPQ218RadicalMathLibrary5Box3DP32NISSoundPlaybackCompleteCallback",
        Ok(
            "SoundManager::PlayNISSound(unsigned int, RadicalMathLibrary::Box3D *, NISSoundPlaybackCompleteCallback *)",
        ),
    ),
    (
        "StopAndDumpNISSound__12SoundManagerUi",
        Ok(
            "SoundManager::StopAndDumpNISSound(unsigned int)",
        ),
    ),
    (
        "StopForMovie__12SoundManager",
        Ok(
            "SoundManager::StopForMovie(void)",
        ),
    ),
    (
        "ResumeAfterMovie__12SoundManager",
        Ok(
            "SoundManager::ResumeAfterMovie(void)",
        ),
    ),
    (
        "IsStoppedForMovie__12SoundManager",
        Ok(
            "SoundManager::IsStoppedForMovie(void)",
        ),
    ),
    (
        "MuteNISPlayers__12SoundManager",
        Ok(
            "SoundManager::MuteNISPlayers(void)",
        ),
    ),
    (
        "UnmuteNISPlayers__12SoundManager",
        Ok(
            "SoundManager::UnmuteNISPlayers(void)",
        ),
    ),
    (
        "RestartSupersprintMusic__12SoundManager",
        Ok(
            "SoundManager::RestartSupersprintMusic(void)",
        ),
    ),
    (
        "GetBeatValue__12SoundManager",
        Ok(
            "SoundManager::GetBeatValue(void)",
        ),
    ),
    (
        "IsFoodCharacter__12SoundManagerP9Character",
        Ok(
            "SoundManager::IsFoodCharacter(Character *)",
        ),
    ),
    (
        "SetDialogueLanguage__12SoundManagerQ27Scrooby10XLLanguage",
        Ok(
            "SoundManager::SetDialogueLanguage(Scrooby::XLLanguage)",
        ),
    ),
    (
        "LoadData__12SoundManagerPCUcUi",
        Ok(
            "SoundManager::LoadData(unsigned char const *, unsigned int)",
        ),
    ),
    (
        "SaveData__12SoundManagerPUcUi",
        Ok(
            "SoundManager::SaveData(unsigned char *, unsigned int)",
        ),
    ),
    (
        "ResetData__12SoundManager",
        Ok(
            "SoundManager::ResetData(void)",
        ),
    ),
    (
        "SetSoundMode__12SoundManager9SoundMode",
        Ok(
            "SoundManager::SetSoundMode(SoundMode)",
        ),
    ),
    (
        "GetSoundMode__12SoundManager",
        Ok(
            "SoundManager::GetSoundMode(void)",
        ),
    ),
    (
        "__12SoundManagerbN31",
        Ok(
            "SoundManager::SoundManager(bool, bool, bool, bool)",
        ),
    ),
    (
        "_$_12SoundManager",
        Ok(
            "SoundManager::~SoundManager(void)",
        ),
    ),
    (
        "initialize__12SoundManager",
        Ok(
            "SoundManager::initialize(void)",
        ),
    ),
    (
        "prepareStartupSounds__12SoundManager",
        Ok(
            "SoundManager::prepareStartupSounds(void)",
        ),
    ),
    (
        "dumpStartupSounds__12SoundManager",
        Ok(
            "SoundManager::dumpStartupSounds(void)",
        ),
    ),
    (
        "playStartupAcceptSound__12SoundManager",
        Ok(
            "SoundManager::playStartupAcceptSound(void)",
        ),
    ),
    (
        "playStartupScrollSound__12SoundManager",
        Ok(
            "SoundManager::playStartupScrollSound(void)",
        ),
    ),
    (
        "__28SoundRenderingPlayerCallbackR19SimpsonsSoundPlayerP27SimpsonsSoundPlayerCallback",
        Ok(
            "SoundRenderingPlayerCallback::SoundRenderingPlayerCallback(SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "_$_28SoundRenderingPlayerCallback",
        Ok(
            "SoundRenderingPlayerCallback::~SoundRenderingPlayerCallback(void)",
        ),
    ),
    (
        "CancelGameCallbackAndRelease__28SoundRenderingPlayerCallback",
        Ok(
            "SoundRenderingPlayerCallback::CancelGameCallbackAndRelease(void)",
        ),
    ),
    (
        "OnSoundReady__28SoundRenderingPlayerCallbackPv",
        Ok(
            "SoundRenderingPlayerCallback::OnSoundReady(void *)",
        ),
    ),
    (
        "OnSoundDone__28SoundRenderingPlayerCallbackPv",
        Ok(
            "SoundRenderingPlayerCallback::OnSoundDone(void *)",
        ),
    ),
    (
        "__15PositionCarrier",
        Ok(
            "PositionCarrier::PositionCarrier(void)",
        ),
    ),
    (
        "_$_15PositionCarrier",
        Ok(
            "PositionCarrier::~PositionCarrier(void)",
        ),
    ),
    (
        "__21PositionalSoundPlayer",
        Ok(
            "PositionalSoundPlayer::PositionalSoundPlayer(void)",
        ),
    ),
    (
        "_$_21PositionalSoundPlayer",
        Ok(
            "PositionalSoundPlayer::~PositionalSoundPlayer(void)",
        ),
    ),
    (
        "PlayResource__21PositionalSoundPlayerP16IDaSoundResourceUiP27SimpsonsSoundPlayerCallback",
        Ok(
            "PositionalSoundPlayer::PlayResource(IDaSoundResource *, unsigned int, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "PlayQueuedSound__21PositionalSoundPlayerR14radSoundVectorP27SimpsonsSoundPlayerCallback",
        Ok(
            "PositionalSoundPlayer::PlayQueuedSound(radSoundVector &, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "ServiceOncePerFrame__21PositionalSoundPlayer",
        Ok(
            "PositionalSoundPlayer::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "SetPositionCarrier__21PositionalSoundPlayerR15PositionCarrier",
        Ok(
            "PositionalSoundPlayer::SetPositionCarrier(PositionCarrier &)",
        ),
    ),
    (
        "SetParameters__21PositionalSoundPlayerP23positionalSoundSettings",
        Ok(
            "PositionalSoundPlayer::SetParameters(positionalSoundSettings *)",
        ),
    ),
    (
        "SetPosition__21PositionalSoundPlayerfff",
        Ok(
            "PositionalSoundPlayer::SetPosition(float, float, float)",
        ),
    ),
    (
        "dumpSoundPlayer__21PositionalSoundPlayer",
        Ok(
            "PositionalSoundPlayer::dumpSoundPlayer(void)",
        ),
    ),
    (
        "__tf8Listener",
        Ok(
            "Listener type_info function",
        ),
    ),
    (
        "__tf19SimpsonsSoundPlayer",
        Ok(
            "SimpsonsSoundPlayer type_info function",
        ),
    ),
    (
        "__tf12SoundCluster",
        Ok(
            "SoundCluster type_info function",
        ),
    ),
    (
        "__tf11SoundLoader",
        Ok(
            "SoundLoader type_info function",
        ),
    ),
    (
        "__tf15PositionCarrier",
        Ok(
            "PositionCarrier type_info function",
        ),
    ),
    (
        "__tf21PositionalSoundPlayer",
        Ok(
            "PositionalSoundPlayer type_info function",
        ),
    ),
    (
        "__tf12SoundManager",
        Ok(
            "SoundManager type_info function",
        ),
    ),
    (
        "__tf28SoundRenderingPlayerCallback",
        Ok(
            "SoundRenderingPlayerCallback type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1Z28SoundRenderingPlayerCallback",
        Ok(
            "radLinkedClass<SoundRenderingPlayerCallback> type_info function",
        ),
    ),
    (
        "__Q25Sound19IDaSoundPlayerState",
        Ok(
            "Sound::IDaSoundPlayerState::IDaSoundPlayerState(void)",
        ),
    ),
    (
        "__Q25Sound34IDaSoundDynaLoadCompletionCallback",
        Ok(
            "Sound::IDaSoundDynaLoadCompletionCallback::IDaSoundDynaLoadCompletionCallback(void)",
        ),
    ),
    (
        "AddRef__12SoundCluster",
        Ok(
            "SoundCluster::AddRef(void)",
        ),
    ),
    (
        "Release__12SoundCluster",
        Ok(
            "SoundCluster::Release(void)",
        ),
    ),
    (
        "AddRef__28SoundRenderingPlayerCallback",
        Ok(
            "SoundRenderingPlayerCallback::AddRef(void)",
        ),
    ),
    (
        "Release__28SoundRenderingPlayerCallback",
        Ok(
            "SoundRenderingPlayerCallback::Release(void)",
        ),
    ),
    (
        "__tfQ25Sound19IDaSoundPlayerState",
        Ok(
            "Sound::IDaSoundPlayerState type_info function",
        ),
    ),
    (
        "__tfQ25Sound34IDaSoundDynaLoadCompletionCallback",
        Ok(
            "Sound::IDaSoundDynaLoadCompletionCallback type_info function",
        ),
    ),
    (
        "__17AvatarSoundPlayer",
        Ok(
            "AvatarSoundPlayer::AvatarSoundPlayer(void)",
        ),
    ),
    (
        "_$_17AvatarSoundPlayer",
        Ok(
            "AvatarSoundPlayer::~AvatarSoundPlayer(void)",
        ),
    ),
    (
        "Initialize__17AvatarSoundPlayer",
        Ok(
            "AvatarSoundPlayer::Initialize(void)",
        ),
    ),
    (
        "UpdateOncePerFrame__17AvatarSoundPlayerUi",
        Ok(
            "AvatarSoundPlayer::UpdateOncePerFrame(unsigned int)",
        ),
    ),
    (
        "OnBeginGameplay__17AvatarSoundPlayer",
        Ok(
            "AvatarSoundPlayer::OnBeginGameplay(void)",
        ),
    ),
    (
        "OnEndGameplay__17AvatarSoundPlayer",
        Ok(
            "AvatarSoundPlayer::OnEndGameplay(void)",
        ),
    ),
    (
        "__18carSoundParameters",
        Ok(
            "carSoundParameters::carSoundParameters(void)",
        ),
    ),
    (
        "_$_18carSoundParameters",
        Ok(
            "carSoundParameters::~carSoundParameters(void)",
        ),
    ),
    (
        "SetWatcherName__18carSoundParametersPCc",
        Ok(
            "carSoundParameters::SetWatcherName(char const *)",
        ),
    ),
    (
        "SetShiftPoint__18carSoundParametersUif",
        Ok(
            "carSoundParameters::SetShiftPoint(unsigned int, float)",
        ),
    ),
    (
        "GetShiftPoint__18carSoundParametersi",
        Ok(
            "carSoundParameters::GetShiftPoint(int)",
        ),
    ),
    (
        "SetAttackTimeMsecs__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetAttackTimeMsecs(float)",
        ),
    ),
    (
        "SetDelayTimeMsecs__18carSoundParametersUi",
        Ok(
            "carSoundParameters::SetDelayTimeMsecs(unsigned int)",
        ),
    ),
    (
        "SetDecayTimeMsecs__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetDecayTimeMsecs(float)",
        ),
    ),
    (
        "SetDecayFinishTrim__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetDecayFinishTrim(float)",
        ),
    ),
    (
        "SetDownshiftDamperSize__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetDownshiftDamperSize(float)",
        ),
    ),
    (
        "SetEngineClipName__18carSoundParametersPCc",
        Ok(
            "carSoundParameters::SetEngineClipName(char const *)",
        ),
    ),
    (
        "SetEngineIdleClipName__18carSoundParametersPCc",
        Ok(
            "carSoundParameters::SetEngineIdleClipName(char const *)",
        ),
    ),
    (
        "SetDamagedEngineClipName__18carSoundParametersPCc",
        Ok(
            "carSoundParameters::SetDamagedEngineClipName(char const *)",
        ),
    ),
    (
        "SetHornClipName__18carSoundParametersPCc",
        Ok(
            "carSoundParameters::SetHornClipName(char const *)",
        ),
    ),
    (
        "SetCarDoorOpenClipName__18carSoundParametersPCc",
        Ok(
            "carSoundParameters::SetCarDoorOpenClipName(char const *)",
        ),
    ),
    (
        "SetCarDoorCloseClipName__18carSoundParametersPCc",
        Ok(
            "carSoundParameters::SetCarDoorCloseClipName(char const *)",
        ),
    ),
    (
        "SetOverlayClipName__18carSoundParametersPCc",
        Ok(
            "carSoundParameters::SetOverlayClipName(char const *)",
        ),
    ),
    (
        "SetRoadSkidClipName__18carSoundParametersPCc",
        Ok(
            "carSoundParameters::SetRoadSkidClipName(char const *)",
        ),
    ),
    (
        "SetDirtSkidClipName__18carSoundParametersPCc",
        Ok(
            "carSoundParameters::SetDirtSkidClipName(char const *)",
        ),
    ),
    (
        "SetBackupClipName__18carSoundParametersPCc",
        Ok(
            "carSoundParameters::SetBackupClipName(char const *)",
        ),
    ),
    (
        "SetGearPitchRange__18carSoundParametersUiff",
        Ok(
            "carSoundParameters::SetGearPitchRange(unsigned int, float, float)",
        ),
    ),
    (
        "SetNumberOfGears__18carSoundParametersUi",
        Ok(
            "carSoundParameters::SetNumberOfGears(unsigned int)",
        ),
    ),
    (
        "SetReversePitchCapKmh__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetReversePitchCapKmh(float)",
        ),
    ),
    (
        "SetReversePitchRange__18carSoundParametersff",
        Ok(
            "carSoundParameters::SetReversePitchRange(float, float)",
        ),
    ),
    (
        "SetGearShiftPitchDrop__18carSoundParametersUif",
        Ok(
            "carSoundParameters::SetGearShiftPitchDrop(unsigned int, float)",
        ),
    ),
    (
        "GetGearShiftPitchDrop__18carSoundParametersUi",
        Ok(
            "carSoundParameters::GetGearShiftPitchDrop(unsigned int)",
        ),
    ),
    (
        "SetDamageStartPcnt__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetDamageStartPcnt(float)",
        ),
    ),
    (
        "SetDamageMaxVolPcnt__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetDamageMaxVolPcnt(float)",
        ),
    ),
    (
        "SetDamageStartTrim__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetDamageStartTrim(float)",
        ),
    ),
    (
        "SetDamageMaxTrim__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetDamageMaxTrim(float)",
        ),
    ),
    (
        "SetIdleEnginePitch__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetIdleEnginePitch(float)",
        ),
    ),
    (
        "SetInAirThrottlePitch__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetInAirThrottlePitch(float)",
        ),
    ),
    (
        "GetInAirThrottlePitch__18carSoundParameters",
        Ok(
            "carSoundParameters::GetInAirThrottlePitch(void)",
        ),
    ),
    (
        "SetInAirIdlePitch__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetInAirIdlePitch(float)",
        ),
    ),
    (
        "GetInAirIdlePitch__18carSoundParameters",
        Ok(
            "carSoundParameters::GetInAirIdlePitch(void)",
        ),
    ),
    (
        "SetInAirThrottleResponseTimeMsecs__18carSoundParametersUi",
        Ok(
            "carSoundParameters::SetInAirThrottleResponseTimeMsecs(unsigned int)",
        ),
    ),
    (
        "SetBurnoutMinPitch__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetBurnoutMinPitch(float)",
        ),
    ),
    (
        "SetBurnoutMaxPitch__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetBurnoutMaxPitch(float)",
        ),
    ),
    (
        "SetPowerslideMinPitch__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetPowerslideMinPitch(float)",
        ),
    ),
    (
        "GetPowerslideMinPitch__18carSoundParameters",
        Ok(
            "carSoundParameters::GetPowerslideMinPitch(void)",
        ),
    ),
    (
        "SetPowerslideMaxPitch__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetPowerslideMaxPitch(float)",
        ),
    ),
    (
        "GetPowerslideMaxPitch__18carSoundParameters",
        Ok(
            "carSoundParameters::GetPowerslideMaxPitch(void)",
        ),
    ),
    (
        "CalculateEnginePitch__18carSoundParametersiff",
        Ok(
            "carSoundParameters::CalculateEnginePitch(int, float, float)",
        ),
    ),
    (
        "CalculateCurrentGear__18carSoundParametersfffi",
        Ok(
            "carSoundParameters::CalculateCurrentGear(float, float, float, int)",
        ),
    ),
    (
        "GetRevLimit__18carSoundParameters",
        Ok(
            "carSoundParameters::GetRevLimit(void)",
        ),
    ),
    (
        "CarSoundParameterObjCreate__FPP19ICarSoundParametersi",
        Ok(
            "CarSoundParameterObjCreate(ICarSoundParameters **, int)",
        ),
    ),
    (
        "__11SoundAvatarP6Avatar",
        Ok(
            "SoundAvatar::SoundAvatar(Avatar *)",
        ),
    ),
    (
        "_$_11SoundAvatar",
        Ok(
            "SoundAvatar::~SoundAvatar(void)",
        ),
    ),
    (
        "HandleEvent__11SoundAvatar9EventEnumPv",
        Ok(
            "SoundAvatar::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "UpdateOncePerFrame__11SoundAvatarUi",
        Ok(
            "SoundAvatar::UpdateOncePerFrame(unsigned int)",
        ),
    ),
    (
        "syncCarSoundState__11SoundAvatar",
        Ok(
            "SoundAvatar::syncCarSoundState(void)",
        ),
    ),
    (
        "__11EngineState",
        Ok(
            "EngineState::EngineState(void)",
        ),
    ),
    (
        "_$_11EngineState",
        Ok(
            "EngineState::~EngineState(void)",
        ),
    ),
    (
        "Initialize__11EngineStateP7VehicleP18carSoundParametersP19SimpsonsSoundPlayerUiP21VehicleSoundDebugPage",
        Ok(
            "EngineState::Initialize(Vehicle *, carSoundParameters *, SimpsonsSoundPlayer *, unsigned int, VehicleSoundDebugPage *)",
        ),
    ),
    (
        "SetActive__11EngineStatebf",
        Ok(
            "EngineState::SetActive(bool, float)",
        ),
    ),
    (
        "SetDebugInfo__11EngineState",
        Ok(
            "EngineState::SetDebugInfo(void)",
        ),
    ),
    (
        "isAtIdleSpeed__11EngineState",
        Ok(
            "EngineState::isAtIdleSpeed(void)",
        ),
    ),
    (
        "isSkidding__11EngineState",
        Ok(
            "EngineState::isSkidding(void)",
        ),
    ),
    (
        "GetCurrentPitch__11EngineState",
        Ok(
            "EngineState::GetCurrentPitch(void)",
        ),
    ),
    (
        "IsFading__11EngineState",
        Ok(
            "EngineState::IsFading(void)",
        ),
    ),
    (
        "StartFade__11EngineStatefb",
        Ok(
            "EngineState::StartFade(float, bool)",
        ),
    ),
    (
        "ServiceFade__11EngineStateUi",
        Ok(
            "EngineState::ServiceFade(unsigned int)",
        ),
    ),
    (
        "SetTrim__11EngineStatef",
        Ok(
            "EngineState::SetTrim(float)",
        ),
    ),
    (
        "__17NormalEngineState",
        Ok(
            "NormalEngineState::NormalEngineState(void)",
        ),
    ),
    (
        "_$_17NormalEngineState",
        Ok(
            "NormalEngineState::~NormalEngineState(void)",
        ),
    ),
    (
        "Service__17NormalEngineStateUi",
        Ok(
            "NormalEngineState::Service(unsigned int)",
        ),
    ),
    (
        "SetDebugInfo__17NormalEngineState",
        Ok(
            "NormalEngineState::SetDebugInfo(void)",
        ),
    ),
    (
        "GetCurrentPitch__17NormalEngineState",
        Ok(
            "NormalEngineState::GetCurrentPitch(void)",
        ),
    ),
    (
        "startup__17NormalEngineStatef",
        Ok(
            "NormalEngineState::startup(float)",
        ),
    ),
    (
        "updateCurrentGearFromVehicle__17NormalEngineStateb",
        Ok(
            "NormalEngineState::updateCurrentGearFromVehicle(bool)",
        ),
    ),
    (
        "__18UpshiftEngineState",
        Ok(
            "UpshiftEngineState::UpshiftEngineState(void)",
        ),
    ),
    (
        "_$_18UpshiftEngineState",
        Ok(
            "UpshiftEngineState::~UpshiftEngineState(void)",
        ),
    ),
    (
        "Service__18UpshiftEngineStateUi",
        Ok(
            "UpshiftEngineState::Service(unsigned int)",
        ),
    ),
    (
        "SetDebugInfo__18UpshiftEngineState",
        Ok(
            "UpshiftEngineState::SetDebugInfo(void)",
        ),
    ),
    (
        "startup__18UpshiftEngineStatef",
        Ok(
            "UpshiftEngineState::startup(float)",
        ),
    ),
    (
        "__20DownshiftEngineState",
        Ok(
            "DownshiftEngineState::DownshiftEngineState(void)",
        ),
    ),
    (
        "_$_20DownshiftEngineState",
        Ok(
            "DownshiftEngineState::~DownshiftEngineState(void)",
        ),
    ),
    (
        "Service__20DownshiftEngineStateUi",
        Ok(
            "DownshiftEngineState::Service(unsigned int)",
        ),
    ),
    (
        "SetDebugInfo__20DownshiftEngineState",
        Ok(
            "DownshiftEngineState::SetDebugInfo(void)",
        ),
    ),
    (
        "GetCurrentPitch__20DownshiftEngineState",
        Ok(
            "DownshiftEngineState::GetCurrentPitch(void)",
        ),
    ),
    (
        "startup__20DownshiftEngineStatef",
        Ok(
            "DownshiftEngineState::startup(float)",
        ),
    ),
    (
        "__16InAirEngineState",
        Ok(
            "InAirEngineState::InAirEngineState(void)",
        ),
    ),
    (
        "_$_16InAirEngineState",
        Ok(
            "InAirEngineState::~InAirEngineState(void)",
        ),
    ),
    (
        "Service__16InAirEngineStateUi",
        Ok(
            "InAirEngineState::Service(unsigned int)",
        ),
    ),
    (
        "SetDebugInfo__16InAirEngineState",
        Ok(
            "InAirEngineState::SetDebugInfo(void)",
        ),
    ),
    (
        "startup__16InAirEngineStatef",
        Ok(
            "InAirEngineState::startup(float)",
        ),
    ),
    (
        "__18ReverseEngineStateP19SimpsonsSoundPlayer",
        Ok(
            "ReverseEngineState::ReverseEngineState(SimpsonsSoundPlayer *)",
        ),
    ),
    (
        "_$_18ReverseEngineState",
        Ok(
            "ReverseEngineState::~ReverseEngineState(void)",
        ),
    ),
    (
        "Service__18ReverseEngineStateUi",
        Ok(
            "ReverseEngineState::Service(unsigned int)",
        ),
    ),
    (
        "SetDebugInfo__18ReverseEngineState",
        Ok(
            "ReverseEngineState::SetDebugInfo(void)",
        ),
    ),
    (
        "startup__18ReverseEngineStatef",
        Ok(
            "ReverseEngineState::startup(float)",
        ),
    ),
    (
        "__15IdleEngineState",
        Ok(
            "IdleEngineState::IdleEngineState(void)",
        ),
    ),
    (
        "_$_15IdleEngineState",
        Ok(
            "IdleEngineState::~IdleEngineState(void)",
        ),
    ),
    (
        "Service__15IdleEngineStateUi",
        Ok(
            "IdleEngineState::Service(unsigned int)",
        ),
    ),
    (
        "SetDebugInfo__15IdleEngineState",
        Ok(
            "IdleEngineState::SetDebugInfo(void)",
        ),
    ),
    (
        "GetCurrentPitch__15IdleEngineState",
        Ok(
            "IdleEngineState::GetCurrentPitch(void)",
        ),
    ),
    (
        "startup__15IdleEngineStatef",
        Ok(
            "IdleEngineState::startup(float)",
        ),
    ),
    (
        "__15SkidEngineState",
        Ok(
            "SkidEngineState::SkidEngineState(void)",
        ),
    ),
    (
        "_$_15SkidEngineState",
        Ok(
            "SkidEngineState::~SkidEngineState(void)",
        ),
    ),
    (
        "Service__15SkidEngineStateUi",
        Ok(
            "SkidEngineState::Service(unsigned int)",
        ),
    ),
    (
        "SetDebugInfo__15SkidEngineState",
        Ok(
            "SkidEngineState::SetDebugInfo(void)",
        ),
    ),
    (
        "GetCurrentPitch__15SkidEngineState",
        Ok(
            "SkidEngineState::GetCurrentPitch(void)",
        ),
    ),
    (
        "startup__15SkidEngineStatef",
        Ok(
            "SkidEngineState::startup(float)",
        ),
    ),
    (
        "__18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer::VehicleSoundPlayer(void)",
        ),
    ),
    (
        "_$_18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer::~VehicleSoundPlayer(void)",
        ),
    ),
    (
        "StartCarSounds__18VehicleSoundPlayerP7Vehicle",
        Ok(
            "VehicleSoundPlayer::StartCarSounds(Vehicle *)",
        ),
    ),
    (
        "StopCarSounds__18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer::StopCarSounds(void)",
        ),
    ),
    (
        "UpdateSoundParameters__18VehicleSoundPlayerUi",
        Ok(
            "VehicleSoundPlayer::UpdateSoundParameters(unsigned int)",
        ),
    ),
    (
        "UpdateOncePerFrame__18VehicleSoundPlayerUi",
        Ok(
            "VehicleSoundPlayer::UpdateOncePerFrame(unsigned int)",
        ),
    ),
    (
        "CheckForSkid__18VehicleSoundPlayerUi",
        Ok(
            "VehicleSoundPlayer::CheckForSkid(unsigned int)",
        ),
    ),
    (
        "CheckHorn__18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer::CheckHorn(void)",
        ),
    ),
    (
        "OnPlaybackComplete__18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer::OnPlaybackComplete(void)",
        ),
    ),
    (
        "OnSoundReady__18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer::OnSoundReady(void)",
        ),
    ),
    (
        "AddAIVehicleProximityTest__18VehicleSoundPlayerP7Vehicle",
        Ok(
            "VehicleSoundPlayer::AddAIVehicleProximityTest(Vehicle *)",
        ),
    ),
    (
        "DeleteAIVehicleProximityTest__18VehicleSoundPlayerP7Vehicle",
        Ok(
            "VehicleSoundPlayer::DeleteAIVehicleProximityTest(Vehicle *)",
        ),
    ),
    (
        "checkDamage__18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer::checkDamage(void)",
        ),
    ),
    (
        "carSoundIsActive__18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer::carSoundIsActive(void)",
        ),
    ),
    (
        "checkProximity__18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer::checkProximity(void)",
        ),
    ),
    (
        "getSkidResourceForTerrain__18VehicleSoundPlayer12eTerrainType",
        Ok(
            "VehicleSoundPlayer::getSkidResourceForTerrain(eTerrainType)",
        ),
    ),
    (
        "_$_21VehicleSoundDebugPage",
        Ok(
            "VehicleSoundDebugPage::~VehicleSoundDebugPage(void)",
        ),
    ),
    (
        "fillLineBuffer__21VehicleSoundDebugPageiPc",
        Ok(
            "VehicleSoundDebugPage::fillLineBuffer(int, char *)",
        ),
    ),
    (
        "getNumLines__21VehicleSoundDebugPage",
        Ok(
            "VehicleSoundDebugPage::getNumLines(void)",
        ),
    ),
    (
        "__tf17AvatarSoundPlayer",
        Ok(
            "AvatarSoundPlayer type_info function",
        ),
    ),
    (
        "__tf21VehicleSoundDebugPage",
        Ok(
            "VehicleSoundDebugPage type_info function",
        ),
    ),
    (
        "__tf18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer type_info function",
        ),
    ),
    (
        "__tf11SoundAvatar",
        Ok(
            "SoundAvatar type_info function",
        ),
    ),
    (
        "__tf18carSoundParameters",
        Ok(
            "carSoundParameters type_info function",
        ),
    ),
    (
        "__tf11EngineState",
        Ok(
            "EngineState type_info function",
        ),
    ),
    (
        "__tf17NormalEngineState",
        Ok(
            "NormalEngineState type_info function",
        ),
    ),
    (
        "__tf18UpshiftEngineState",
        Ok(
            "UpshiftEngineState type_info function",
        ),
    ),
    (
        "__tf20DownshiftEngineState",
        Ok(
            "DownshiftEngineState type_info function",
        ),
    ),
    (
        "__tf16InAirEngineState",
        Ok(
            "InAirEngineState type_info function",
        ),
    ),
    (
        "__tf18ReverseEngineState",
        Ok(
            "ReverseEngineState type_info function",
        ),
    ),
    (
        "__tf15IdleEngineState",
        Ok(
            "IdleEngineState type_info function",
        ),
    ),
    (
        "__tf15SkidEngineState",
        Ok(
            "SkidEngineState type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1Z18carSoundParameters",
        Ok(
            "radLinkedClass<carSoundParameters> type_info function",
        ),
    ),
    (
        "__27SimpsonsSoundPlayerCallback",
        Ok(
            "SimpsonsSoundPlayerCallback::SimpsonsSoundPlayerCallback(void)",
        ),
    ),
    (
        "__19ICarSoundParameters",
        Ok(
            "ICarSoundParameters::ICarSoundParameters(void)",
        ),
    ),
    (
        "AddRef__18carSoundParameters",
        Ok(
            "carSoundParameters::AddRef(void)",
        ),
    ),
    (
        "Release__18carSoundParameters",
        Ok(
            "carSoundParameters::Release(void)",
        ),
    ),
    (
        "SetClipRPM__18carSoundParametersf",
        Ok(
            "carSoundParameters::SetClipRPM(float)",
        ),
    ),
    (
        "__tf27SimpsonsSoundPlayerCallback",
        Ok(
            "SimpsonsSoundPlayerCallback type_info function",
        ),
    ),
    (
        "__tf19ICarSoundParameters",
        Ok(
            "ICarSoundParameters type_info function",
        ),
    ),
    (
        "__12ConversationR10DialogLine",
        Ok(
            "Conversation::Conversation(DialogLine &)",
        ),
    ),
    (
        "_$_12Conversation",
        Ok(
            "Conversation::~Conversation(void)",
        ),
    ),
    (
        "LineFits__12ConversationR10DialogLine",
        Ok(
            "Conversation::LineFits(DialogLine &)",
        ),
    ),
    (
        "AddToConversation__12ConversationR10DialogLine",
        Ok(
            "Conversation::AddToConversation(DialogLine &)",
        ),
    ),
    (
        "PlayLine__12ConversationUiR19SimpsonsSoundPlayerP27SimpsonsSoundPlayerCallback",
        Ok(
            "Conversation::PlayLine(unsigned int, SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "QueueLine__12ConversationUiR19SimpsonsSoundPlayer",
        Ok(
            "Conversation::QueueLine(unsigned int, SimpsonsSoundPlayer &)",
        ),
    ),
    (
        "PlayQueuedLine__12ConversationR19SimpsonsSoundPlayerP27SimpsonsSoundPlayerCallback",
        Ok(
            "Conversation::PlayQueuedLine(SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "GetNumDialogLines__C12Conversation",
        Ok(
            "Conversation::GetNumDialogLines(void) const",
        ),
    ),
    (
        "UsesCharacter__12ConversationG13tUidUnaligned",
        Ok(
            "Conversation::UsesCharacter(tUidUnaligned)",
        ),
    ),
    (
        "IsVillainLine__12Conversation",
        Ok(
            "Conversation::IsVillainLine(void)",
        ),
    ),
    (
        "GetDialogLineCharacterUID__12ConversationUi",
        Ok(
            "Conversation::GetDialogLineCharacterUID(unsigned int)",
        ),
    ),
    (
        "GetConversationName__12Conversation",
        Ok(
            "Conversation::GetConversationName(void)",
        ),
    ),
    (
        "AddMatchingDialog__12ConversationR16SelectableDialogRt4list2ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialog",
        Ok(
            "Conversation::AddMatchingDialog(SelectableDialog &, list<SelectableDialog *, s2alloc<SelectableDialog *> > &)",
        ),
    ),
    (
        "findDialogLineByIndex__12ConversationUi",
        Ok(
            "Conversation::findDialogLineByIndex(unsigned int)",
        ),
    ),
    (
        "__19ConversationMatcher",
        Ok(
            "ConversationMatcher::ConversationMatcher(void)",
        ),
    ),
    (
        "_$_19ConversationMatcher",
        Ok(
            "ConversationMatcher::~ConversationMatcher(void)",
        ),
    ),
    (
        "AddNewLine__19ConversationMatcherP16IDaSoundResource",
        Ok(
            "ConversationMatcher::AddNewLine(IDaSoundResource *)",
        ),
    ),
    (
        "AddConversationsToList__19ConversationMatcherUiUiRt4list2ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialog",
        Ok(
            "ConversationMatcher::AddConversationsToList(unsigned int, unsigned int, list<SelectableDialog *, s2alloc<SelectableDialog *> > &)",
        ),
    ),
    (
        "__17DialogCoordinatorP13IRadNameSpace",
        Ok(
            "DialogCoordinator::DialogCoordinator(IRadNameSpace *)",
        ),
    ),
    (
        "_$_17DialogCoordinator",
        Ok(
            "DialogCoordinator::~DialogCoordinator(void)",
        ),
    ),
    (
        "HandleEvent__17DialogCoordinator9EventEnumPv",
        Ok(
            "DialogCoordinator::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Initialize__17DialogCoordinator",
        Ok(
            "DialogCoordinator::Initialize(void)",
        ),
    ),
    (
        "registerDialogEvents__17DialogCoordinator",
        Ok(
            "DialogCoordinator::registerDialogEvents(void)",
        ),
    ),
    (
        "queueVillainDialog__17DialogCoordinator9EventEnumPv",
        Ok(
            "DialogCoordinator::queueVillainDialog(EventEnum, void *)",
        ),
    ),
    (
        "playLinePositionally__17DialogCoordinator9EventEnum",
        Ok(
            "DialogCoordinator::playLinePositionally(EventEnum)",
        ),
    ),
    (
        "getCharacterPosition__17DialogCoordinatorP9CharacterRQ218RadicalMathLibrary6Vector",
        Ok(
            "DialogCoordinator::getCharacterPosition(Character *, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "eventHasVehicleData__17DialogCoordinator9EventEnum",
        Ok(
            "DialogCoordinator::eventHasVehicleData(EventEnum)",
        ),
    ),
    (
        "__10DialogLineP16IDaSoundResource",
        Ok(
            "DialogLine::DialogLine(IDaSoundResource *)",
        ),
    ),
    (
        "_$_10DialogLine",
        Ok(
            "DialogLine::~DialogLine(void)",
        ),
    ),
    (
        "PlayLine__10DialogLineUiR19SimpsonsSoundPlayerP27SimpsonsSoundPlayerCallback",
        Ok(
            "DialogLine::PlayLine(unsigned int, SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "QueueLine__10DialogLineUiR19SimpsonsSoundPlayer",
        Ok(
            "DialogLine::QueueLine(unsigned int, SimpsonsSoundPlayer &)",
        ),
    ),
    (
        "PlayQueuedLine__10DialogLineR19SimpsonsSoundPlayerP27SimpsonsSoundPlayerCallback",
        Ok(
            "DialogLine::PlayQueuedLine(SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "StripDirectoryCrud__10DialogLinePCcPci",
        Ok(
            "DialogLine::StripDirectoryCrud(char const *, char *, int)",
        ),
    ),
    (
        "GetEventTableEntry__10DialogLineUi",
        Ok(
            "DialogLine::GetEventTableEntry(unsigned int)",
        ),
    ),
    (
        "GetEventTableSize__10DialogLine",
        Ok(
            "DialogLine::GetEventTableSize(void)",
        ),
    ),
    (
        "GetCharacterTableEntry__10DialogLineUi",
        Ok(
            "DialogLine::GetCharacterTableEntry(unsigned int)",
        ),
    ),
    (
        "GetCharacterTableSize__10DialogLine",
        Ok(
            "DialogLine::GetCharacterTableSize(void)",
        ),
    ),
    (
        "UsesCharacter__10DialogLineG13tUidUnaligned",
        Ok(
            "DialogLine::UsesCharacter(tUidUnaligned)",
        ),
    ),
    (
        "AddMatchingDialog__10DialogLineR16SelectableDialogRt4list2ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialog",
        Ok(
            "DialogLine::AddMatchingDialog(SelectableDialog &, list<SelectableDialog *, s2alloc<SelectableDialog *> > &)",
        ),
    ),
    (
        "GetConversationName__10DialogLine",
        Ok(
            "DialogLine::GetConversationName(void)",
        ),
    ),
    (
        "IsFoodCharacter__10DialogLineP9Character",
        Ok(
            "DialogLine::IsFoodCharacter(Character *)",
        ),
    ),
    (
        "GetLifeInMsecsForEvent__10DialogLine9EventEnum",
        Ok(
            "DialogLine::GetLifeInMsecsForEvent(EventEnum)",
        ),
    ),
    (
        "FillCharacterName__10DialogLinePcUiG13tUidUnaligned",
        Ok(
            "DialogLine::FillCharacterName(char *, unsigned int, tUidUnaligned)",
        ),
    ),
    (
        "FillEventName__10DialogLinePcUi9EventEnum",
        Ok(
            "DialogLine::FillEventName(char *, unsigned int, EventEnum)",
        ),
    ),
    (
        "parseResourceFilename__10DialogLine",
        Ok(
            "DialogLine::parseResourceFilename(void)",
        ),
    ),
    (
        "matchRoleField__10DialogLinePCci",
        Ok(
            "DialogLine::matchRoleField(char const *, int)",
        ),
    ),
    (
        "matchEventField__10DialogLinePCci",
        Ok(
            "DialogLine::matchEventField(char const *, int)",
        ),
    ),
    (
        "matchOrderField__10DialogLinePCci",
        Ok(
            "DialogLine::matchOrderField(char const *, int)",
        ),
    ),
    (
        "matchCharacterField__10DialogLinePCci",
        Ok(
            "DialogLine::matchCharacterField(char const *, int)",
        ),
    ),
    (
        "matchLevelField__10DialogLinePCci",
        Ok(
            "DialogLine::matchLevelField(char const *, int)",
        ),
    ),
    (
        "getNameField__10DialogLinePCciPci",
        Ok(
            "DialogLine::getNameField(char const *, int, char *, int)",
        ),
    ),
    (
        "initializeTables__10DialogLine",
        Ok(
            "DialogLine::initializeTables(void)",
        ),
    ),
    (
        "__10DialogList",
        Ok(
            "DialogList::DialogList(void)",
        ),
    ),
    (
        "_$_10DialogList",
        Ok(
            "DialogList::~DialogList(void)",
        ),
    ),
    (
        "OrganizeDialog__10DialogListP13IRadNameSpace",
        Ok(
            "DialogList::OrganizeDialog(IRadNameSpace *)",
        ),
    ),
    (
        "FindDialogForEvent__10DialogList9EventEnumP9CharacterT2G13tUidUnalignedT4Uib",
        Ok(
            "DialogList::FindDialogForEvent(EventEnum, Character *, Character *, tUidUnaligned, tUidUnaligned, unsigned int, bool)",
        ),
    ),
    (
        "GetStinkySkinPointer__10DialogListG13tUidUnaligned",
        Ok(
            "DialogList::GetStinkySkinPointer(tUidUnaligned)",
        ),
    ),
    (
        "hasOneLinerPrefix__10DialogListPCc",
        Ok(
            "DialogList::hasOneLinerPrefix(char const *)",
        ),
    ),
    (
        "isIndividualLine__10DialogListP16IDaSoundResource",
        Ok(
            "DialogList::isIndividualLine(IDaSoundResource *)",
        ),
    ),
    (
        "isConversationLine__10DialogListP16IDaSoundResource",
        Ok(
            "DialogList::isConversationLine(IDaSoundResource *)",
        ),
    ),
    (
        "underscoreCount__10DialogListPCc",
        Ok(
            "DialogList::underscoreCount(char const *)",
        ),
    ),
    (
        "searchDialogList__10DialogList9EventEnumP9CharacterT2Rt4list2ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialogUib",
        Ok(
            "DialogList::searchDialogList(EventEnum, Character *, Character *, list<SelectableDialog *, s2alloc<SelectableDialog *> > &, unsigned int, bool)",
        ),
    ),
    (
        "searchDialogList__10DialogList9EventEnumG13tUidUnalignedT2Rt4list2ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialogUib",
        Ok(
            "DialogList::searchDialogList(EventEnum, tUidUnaligned, tUidUnaligned, list<SelectableDialog *, s2alloc<SelectableDialog *> > &, unsigned int, bool)",
        ),
    ),
    (
        "searchDialogList__10DialogList9EventEnumG13tUidUnalignedT2Rt4list2ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialogUibT6",
        Ok(
            "DialogList::searchDialogList(EventEnum, tUidUnaligned, tUidUnaligned, list<SelectableDialog *, s2alloc<SelectableDialog *> > &, unsigned int, bool, bool)",
        ),
    ),
    (
        "characterMatches__10DialogListG13tUidUnalignedP16SelectableDialogb",
        Ok(
            "DialogList::characterMatches(tUidUnaligned, SelectableDialog *, bool)",
        ),
    ),
    (
        "getPuppetUID__10DialogListP9Character",
        Ok(
            "DialogList::getPuppetUID(Character *)",
        ),
    ),
    (
        "__19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue::DialogPriorityQueue(void)",
        ),
    ),
    (
        "_$_19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue::~DialogPriorityQueue(void)",
        ),
    ),
    (
        "AddDialogToQueue__19DialogPriorityQueueR16SelectableDialogPQ218RadicalMathLibrary6Vector",
        Ok(
            "DialogPriorityQueue::AddDialogToQueue(SelectableDialog &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "StopAllDialog__19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue::StopAllDialog(void)",
        ),
    ),
    (
        "PauseDialog__19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue::PauseDialog(void)",
        ),
    ),
    (
        "UnpauseDialog__19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue::UnpauseDialog(void)",
        ),
    ),
    (
        "OnDialogLineComplete__19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue::OnDialogLineComplete(void)",
        ),
    ),
    (
        "OnDialogComplete__19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue::OnDialogComplete(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "advanceQueue__19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue::advanceQueue(void)",
        ),
    ),
    (
        "playDialog__19DialogPriorityQueuePQ218RadicalMathLibrary6Vector",
        Ok(
            "DialogPriorityQueue::playDialog(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "serviceDebugPage__19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue::serviceDebugPage(void)",
        ),
    ),
    (
        "__18DialogQueueElementP16SelectableDialog",
        Ok(
            "DialogQueueElement::DialogQueueElement(SelectableDialog *)",
        ),
    ),
    (
        "_$_18DialogQueueElement",
        Ok(
            "DialogQueueElement::~DialogQueueElement(void)",
        ),
    ),
    (
        "OnTimerDone__18DialogQueueElementUiPv",
        Ok(
            "DialogQueueElement::OnTimerDone(unsigned int, void *)",
        ),
    ),
    (
        "AddToQueue__18DialogQueueElementPt4list2ZP18DialogQueueElementZt7s2alloc1ZP18DialogQueueElementPQ218RadicalMathLibrary6Vector",
        Ok(
            "DialogQueueElement::AddToQueue(list<DialogQueueElement *, s2alloc<DialogQueueElement *> > *, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "RemoveSelfFromList__18DialogQueueElement",
        Ok(
            "DialogQueueElement::RemoveSelfFromList(void)",
        ),
    ),
    (
        "CalculateDialogPriority__18DialogQueueElementRC16SelectableDialog",
        Ok(
            "DialogQueueElement::CalculateDialogPriority(SelectableDialog const &)",
        ),
    ),
    (
        "CalculateDialogProbability__18DialogQueueElementRC16SelectableDialog",
        Ok(
            "DialogQueueElement::CalculateDialogProbability(SelectableDialog const &)",
        ),
    ),
    (
        "OnPlaybackComplete__18DialogQueueElement",
        Ok(
            "DialogQueueElement::OnPlaybackComplete(void)",
        ),
    ),
    (
        "OnSoundReady__18DialogQueueElement",
        Ok(
            "DialogQueueElement::OnSoundReady(void)",
        ),
    ),
    (
        "PlayDialog__18DialogQueueElementR19SimpsonsSoundPlayerT1P26DialogLineCompleteCallbackP22DialogCompleteCallback",
        Ok(
            "DialogQueueElement::PlayDialog(SimpsonsSoundPlayer &, SimpsonsSoundPlayer &, DialogLineCompleteCallback *, DialogCompleteCallback *)",
        ),
    ),
    (
        "StopDialog__18DialogQueueElement",
        Ok(
            "DialogQueueElement::StopDialog(void)",
        ),
    ),
    (
        "Service__18DialogQueueElement",
        Ok(
            "DialogQueueElement::Service(void)",
        ),
    ),
    (
        "GetPosition__18DialogQueueElement",
        Ok(
            "DialogQueueElement::GetPosition(void)",
        ),
    ),
    (
        "dialogLineIsWalker__18DialogQueueElementUi",
        Ok(
            "DialogQueueElement::dialogLineIsWalker(unsigned int)",
        ),
    ),
    (
        "dialogLineIsNPC__18DialogQueueElementUi",
        Ok(
            "DialogQueueElement::dialogLineIsNPC(unsigned int)",
        ),
    ),
    (
        "isMouthFlappingEvent__18DialogQueueElement9EventEnum",
        Ok(
            "DialogQueueElement::isMouthFlappingEvent(EventEnum)",
        ),
    ),
    (
        "__20DialogSelectionGroupR16SelectableDialogT1",
        Ok(
            "DialogSelectionGroup::DialogSelectionGroup(SelectableDialog &, SelectableDialog &)",
        ),
    ),
    (
        "_$_20DialogSelectionGroup",
        Ok(
            "DialogSelectionGroup::~DialogSelectionGroup(void)",
        ),
    ),
    (
        "PlayLine__20DialogSelectionGroupUiR19SimpsonsSoundPlayerP27SimpsonsSoundPlayerCallback",
        Ok(
            "DialogSelectionGroup::PlayLine(unsigned int, SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "QueueLine__20DialogSelectionGroupUiR19SimpsonsSoundPlayer",
        Ok(
            "DialogSelectionGroup::QueueLine(unsigned int, SimpsonsSoundPlayer &)",
        ),
    ),
    (
        "PlayQueuedLine__20DialogSelectionGroupR19SimpsonsSoundPlayerP27SimpsonsSoundPlayerCallback",
        Ok(
            "DialogSelectionGroup::PlayQueuedLine(SimpsonsSoundPlayer &, SimpsonsSoundPlayerCallback *)",
        ),
    ),
    (
        "GetNumDialogLines__C20DialogSelectionGroup",
        Ok(
            "DialogSelectionGroup::GetNumDialogLines(void) const",
        ),
    ),
    (
        "UsesCharacter__20DialogSelectionGroupG13tUidUnaligned",
        Ok(
            "DialogSelectionGroup::UsesCharacter(tUidUnaligned)",
        ),
    ),
    (
        "IsVillainLine__20DialogSelectionGroup",
        Ok(
            "DialogSelectionGroup::IsVillainLine(void)",
        ),
    ),
    (
        "GetDialogLineCharacterUID__20DialogSelectionGroupUi",
        Ok(
            "DialogSelectionGroup::GetDialogLineCharacterUID(unsigned int)",
        ),
    ),
    (
        "AddMatchingDialog__20DialogSelectionGroupR16SelectableDialogRt4list2ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialog",
        Ok(
            "DialogSelectionGroup::AddMatchingDialog(SelectableDialog &, list<SelectableDialog *, s2alloc<SelectableDialog *> > &)",
        ),
    ),
    (
        "GetEvent__C20DialogSelectionGroup",
        Ok(
            "DialogSelectionGroup::GetEvent(void) const",
        ),
    ),
    (
        "GetLevel__C20DialogSelectionGroup",
        Ok(
            "DialogSelectionGroup::GetLevel(void) const",
        ),
    ),
    (
        "GetMission__C20DialogSelectionGroup",
        Ok(
            "DialogSelectionGroup::GetMission(void) const",
        ),
    ),
    (
        "GetConversationName__20DialogSelectionGroup",
        Ok(
            "DialogSelectionGroup::GetConversationName(void)",
        ),
    ),
    (
        "makeRandomSelection__20DialogSelectionGroup",
        Ok(
            "DialogSelectionGroup::makeRandomSelection(void)",
        ),
    ),
    (
        "__14PlayableDialog",
        Ok(
            "PlayableDialog::PlayableDialog(void)",
        ),
    ),
    (
        "__14PlayableDialogUiUi9EventEnum",
        Ok(
            "PlayableDialog::PlayableDialog(unsigned int, unsigned int, EventEnum)",
        ),
    ),
    (
        "_$_14PlayableDialog",
        Ok(
            "PlayableDialog::~PlayableDialog(void)",
        ),
    ),
    (
        "__16SelectableDialog",
        Ok(
            "SelectableDialog::SelectableDialog(void)",
        ),
    ),
    (
        "__16SelectableDialogUiUi9EventEnum",
        Ok(
            "SelectableDialog::SelectableDialog(unsigned int, unsigned int, EventEnum)",
        ),
    ),
    (
        "_$_16SelectableDialog",
        Ok(
            "SelectableDialog::~SelectableDialog(void)",
        ),
    ),
    (
        "AddToDialogList__16SelectableDialogPP16SelectableDialog",
        Ok(
            "SelectableDialog::AddToDialogList(SelectableDialog **)",
        ),
    ),
    (
        "AddToDialogList__16SelectableDialogP16SelectableDialog",
        Ok(
            "SelectableDialog::AddToDialogList(SelectableDialog *)",
        ),
    ),
    (
        "RemoveNextFromList__16SelectableDialog",
        Ok(
            "SelectableDialog::RemoveNextFromList(void)",
        ),
    ),
    (
        "GetMission__C16SelectableDialog",
        Ok(
            "SelectableDialog::GetMission(void) const",
        ),
    ),
    (
        "GetLevel__C16SelectableDialog",
        Ok(
            "SelectableDialog::GetLevel(void) const",
        ),
    ),
    (
        "GetEvent__C16SelectableDialog",
        Ok(
            "SelectableDialog::GetEvent(void) const",
        ),
    ),
    (
        "_$_20DialogSoundDebugPage",
        Ok(
            "DialogSoundDebugPage::~DialogSoundDebugPage(void)",
        ),
    ),
    (
        "fillLineBuffer__20DialogSoundDebugPageiPc",
        Ok(
            "DialogSoundDebugPage::fillLineBuffer(int, char *)",
        ),
    ),
    (
        "getNumLines__20DialogSoundDebugPage",
        Ok(
            "DialogSoundDebugPage::getNumLines(void)",
        ),
    ),
    (
        "fillQueueText__20DialogSoundDebugPagePcUi",
        Ok(
            "DialogSoundDebugPage::fillQueueText(char *, unsigned int)",
        ),
    ),
    (
        "remove__t4list2ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialogRCP16SelectableDialog",
        Ok(
            "list<SelectableDialog *, s2alloc<SelectableDialog *> >::remove(SelectableDialog *const &)",
        ),
    ),
    (
        "clear__t10_List_base2ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialog",
        Ok(
            "_List_base<SelectableDialog *, s2alloc<SelectableDialog *> >::clear(void)",
        ),
    ),
    (
        "clear__t10_List_base2ZP18DialogQueueElementZt7s2alloc1ZP18DialogQueueElement",
        Ok(
            "_List_base<DialogQueueElement *, s2alloc<DialogQueueElement *> >::clear(void)",
        ),
    ),
    (
        "remove__t4list2ZP18DialogQueueElementZt7s2alloc1ZP18DialogQueueElementRCP18DialogQueueElement",
        Ok(
            "list<DialogQueueElement *, s2alloc<DialogQueueElement *> >::remove(DialogQueueElement *const &)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialogPP16SelectableDialogRCP16SelectableDialog",
        Ok(
            "vector<SelectableDialog *, s2alloc<SelectableDialog *> >::_M_insert_aux(SelectableDialog **, SelectableDialog *const &)",
        ),
    ),
    (
        "__tf16SelectableDialog",
        Ok(
            "SelectableDialog type_info function",
        ),
    ),
    (
        "__tf14PlayableDialog",
        Ok(
            "PlayableDialog type_info function",
        ),
    ),
    (
        "__tf12Conversation",
        Ok(
            "Conversation type_info function",
        ),
    ),
    (
        "__tf10DialogLine",
        Ok(
            "DialogLine type_info function",
        ),
    ),
    (
        "__tf20DialogSelectionGroup",
        Ok(
            "DialogSelectionGroup type_info function",
        ),
    ),
    (
        "__tf19ConversationMatcher",
        Ok(
            "ConversationMatcher type_info function",
        ),
    ),
    (
        "__tf10DialogList",
        Ok(
            "DialogList type_info function",
        ),
    ),
    (
        "__tf18DialogQueueElement",
        Ok(
            "DialogQueueElement type_info function",
        ),
    ),
    (
        "__tf20DialogSoundDebugPage",
        Ok(
            "DialogSoundDebugPage type_info function",
        ),
    ),
    (
        "__tf19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue type_info function",
        ),
    ),
    (
        "__tf17DialogCoordinator",
        Ok(
            "DialogCoordinator type_info function",
        ),
    ),
    (
        "UsesCharacter__16SelectableDialogP9Character",
        Ok(
            "SelectableDialog::UsesCharacter(Character *)",
        ),
    ),
    (
        "GetDialogLineCharacterUID__10DialogLineUi",
        Ok(
            "DialogLine::GetDialogLineCharacterUID(unsigned int)",
        ),
    ),
    (
        "IsVillainLine__10DialogLine",
        Ok(
            "DialogLine::IsVillainLine(void)",
        ),
    ),
    (
        "GetNumDialogLines__C10DialogLine",
        Ok(
            "DialogLine::GetNumDialogLines(void) const",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialogb0",
        Ok(
            "_Vector_alloc_base<SelectableDialog *, s2alloc<SelectableDialog *>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "_$_t16_List_alloc_base3ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialogb0",
        Ok(
            "_List_alloc_base<SelectableDialog *, s2alloc<SelectableDialog *>, false>::~_List_alloc_base(void)",
        ),
    ),
    (
        "__26DialogLineCompleteCallback",
        Ok(
            "DialogLineCompleteCallback::DialogLineCompleteCallback(void)",
        ),
    ),
    (
        "__22DialogCompleteCallback",
        Ok(
            "DialogCompleteCallback::DialogCompleteCallback(void)",
        ),
    ),
    (
        "AddRef__18DialogQueueElement",
        Ok(
            "DialogQueueElement::AddRef(void)",
        ),
    ),
    (
        "Release__18DialogQueueElement",
        Ok(
            "DialogQueueElement::Release(void)",
        ),
    ),
    (
        "_$_t16_List_alloc_base3ZP18DialogQueueElementZt7s2alloc1ZP18DialogQueueElementb0",
        Ok(
            "_List_alloc_base<DialogQueueElement *, s2alloc<DialogQueueElement *>, false>::~_List_alloc_base(void)",
        ),
    ),
    (
        "__tf26DialogLineCompleteCallback",
        Ok(
            "DialogLineCompleteCallback type_info function",
        ),
    ),
    (
        "__tf22DialogCompleteCallback",
        Ok(
            "DialogCompleteCallback type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__12ConversationR10DialogLine",
        Ok(
            "global constructors keyed to Conversation::Conversation(DialogLine &)",
        ),
    ),
    (
        "__11MusicPlayerRQ25Sound13IDaSoundTuner",
        Ok(
            "MusicPlayer::MusicPlayer(Sound::IDaSoundTuner &)",
        ),
    ),
    (
        "_$_11MusicPlayer",
        Ok(
            "MusicPlayer::~MusicPlayer(void)",
        ),
    ),
    (
        "TriggerMusicEvent__11MusicPlayer14MusicEventList",
        Ok(
            "MusicPlayer::TriggerMusicEvent(MusicEventList)",
        ),
    ),
    (
        "TriggerAmbientEvent__11MusicPlayerUi",
        Ok(
            "MusicPlayer::TriggerAmbientEvent(unsigned int)",
        ),
    ),
    (
        "HandleEvent__11MusicPlayer9EventEnumPv",
        Ok(
            "MusicPlayer::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "SetUpPerformance__11MusicPlayerPPQ28radmusic11performancePPQ28radmusic11compositionPCc",
        Ok(
            "MusicPlayer::SetUpPerformance(radmusic::performance **, radmusic::composition **, char const *)",
        ),
    ),
    (
        "Service__11MusicPlayer",
        Ok(
            "MusicPlayer::Service(void)",
        ),
    ),
    (
        "QueueRadmusicScriptLoad__11MusicPlayer",
        Ok(
            "MusicPlayer::QueueRadmusicScriptLoad(void)",
        ),
    ),
    (
        "QueueMusicLevelLoad__11MusicPlayerQ211RenderEnums9LevelEnum",
        Ok(
            "MusicPlayer::QueueMusicLevelLoad(RenderEnums::LevelEnum)",
        ),
    ),
    (
        "LoadRadmusicScript__11MusicPlayerPCcP16SoundFileHandler",
        Ok(
            "MusicPlayer::LoadRadmusicScript(char const *, SoundFileHandler *)",
        ),
    ),
    (
        "UnloadRadmusicScript__11MusicPlayer",
        Ok(
            "MusicPlayer::UnloadRadmusicScript(void)",
        ),
    ),
    (
        "OnFrontEndStart__11MusicPlayer",
        Ok(
            "MusicPlayer::OnFrontEndStart(void)",
        ),
    ),
    (
        "OnFrontEndFinish__11MusicPlayer",
        Ok(
            "MusicPlayer::OnFrontEndFinish(void)",
        ),
    ),
    (
        "OnGameplayStart__11MusicPlayerb",
        Ok(
            "MusicPlayer::OnGameplayStart(bool)",
        ),
    ),
    (
        "OnGameplayFinish__11MusicPlayer",
        Ok(
            "MusicPlayer::OnGameplayFinish(void)",
        ),
    ),
    (
        "OnPauseStart__11MusicPlayer",
        Ok(
            "MusicPlayer::OnPauseStart(void)",
        ),
    ),
    (
        "OnPauseEnd__11MusicPlayer",
        Ok(
            "MusicPlayer::OnPauseEnd(void)",
        ),
    ),
    (
        "OnStoreStart__11MusicPlayer",
        Ok(
            "MusicPlayer::OnStoreStart(void)",
        ),
    ),
    (
        "OnStoreEnd__11MusicPlayer",
        Ok(
            "MusicPlayer::OnStoreEnd(void)",
        ),
    ),
    (
        "StopForMovie__11MusicPlayer",
        Ok(
            "MusicPlayer::StopForMovie(void)",
        ),
    ),
    (
        "ResumeAfterMovie__11MusicPlayer",
        Ok(
            "MusicPlayer::ResumeAfterMovie(void)",
        ),
    ),
    (
        "IsStoppedForMovie__11MusicPlayer",
        Ok(
            "MusicPlayer::IsStoppedForMovie(void)",
        ),
    ),
    (
        "RestartSupersprintMusic__11MusicPlayer",
        Ok(
            "MusicPlayer::RestartSupersprintMusic(void)",
        ),
    ),
    (
        "SetVolume__11MusicPlayerf",
        Ok(
            "MusicPlayer::SetVolume(float)",
        ),
    ),
    (
        "SetAmbienceVolume__11MusicPlayerf",
        Ok(
            "MusicPlayer::SetAmbienceVolume(float)",
        ),
    ),
    (
        "GetBeatValue__11MusicPlayer",
        Ok(
            "MusicPlayer::GetBeatValue(void)",
        ),
    ),
    (
        "calculateLevelIndex__11MusicPlayer",
        Ok(
            "MusicPlayer::calculateLevelIndex(void)",
        ),
    ),
    (
        "calculateMissionIndex__11MusicPlayer",
        Ok(
            "MusicPlayer::calculateMissionIndex(void)",
        ),
    ),
    (
        "calculateInteriorIndex__11MusicPlayerG13tUidUnaligned",
        Ok(
            "MusicPlayer::calculateInteriorIndex(tUidUnaligned)",
        ),
    ),
    (
        "musicLockedOnForStage__11MusicPlayer",
        Ok(
            "MusicPlayer::musicLockedOnForStage(void)",
        ),
    ),
    (
        "startMusic__11MusicPlayer",
        Ok(
            "MusicPlayer::startMusic(void)",
        ),
    ),
    (
        "playPostMissionSounds__11MusicPlayer",
        Ok(
            "MusicPlayer::playPostMissionSounds(void)",
        ),
    ),
    (
        "turnAmbienceOn__11MusicPlayerUi",
        Ok(
            "MusicPlayer::turnAmbienceOn(unsigned int)",
        ),
    ),
    (
        "turnAmbienceOff__11MusicPlayerUi",
        Ok(
            "MusicPlayer::turnAmbienceOff(unsigned int)",
        ),
    ),
    (
        "currentMissionIsRace__11MusicPlayer",
        Ok(
            "MusicPlayer::currentMissionIsRace(void)",
        ),
    ),
    (
        "currentMissionIsSundayDrive__11MusicPlayer",
        Ok(
            "MusicPlayer::currentMissionIsSundayDrive(void)",
        ),
    ),
    (
        "initializeTableNameKeys__11MusicPlayer",
        Ok(
            "MusicPlayer::initializeTableNameKeys(void)",
        ),
    ),
    (
        "buildEventTables__11MusicPlayer",
        Ok(
            "MusicPlayer::buildEventTables(void)",
        ),
    ),
    (
        "triggerMusicMissionEventByName__11MusicPlayerPUi",
        Ok(
            "MusicPlayer::triggerMusicMissionEventByName(unsigned int *)",
        ),
    ),
    (
        "triggerMusicStateChange__11MusicPlayerUiUi",
        Ok(
            "MusicPlayer::triggerMusicStateChange(unsigned int, unsigned int)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ28radmusic27radload_composition_adapter",
        Ok(
            "radLoadInventory::SafeCast<radmusic::radload_composition_adapter>::SafeCast(void)",
        ),
    ),
    (
        "radLoadFind__H1ZQ28radmusic27radload_composition_adapter_P16radLoadInventoryG13tUidUnaligned_PX01",
        Ok(
            "radmusic::radload_composition_adapter * radLoadFind<radmusic::radload_composition_adapter>(radLoadInventory *, tUidUnaligned)",
        ),
    ),
    (
        "radLoadFind__H1ZQ28radmusic27radload_composition_adapter_P16radLoadInventoryPCc_PX01",
        Ok(
            "radmusic::radload_composition_adapter * radLoadFind<radmusic::radload_composition_adapter>(radLoadInventory *, char const *)",
        ),
    ),
    (
        "__tf11MusicPlayer",
        Ok(
            "MusicPlayer type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ28radmusic27radload_composition_adapter",
        Ok(
            "radLoadInventory::SafeCast<radmusic::radload_composition_adapter> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ28radmusic27radload_composition_adapterP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<radmusic::radload_composition_adapter>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "__14NISPlayerGroup",
        Ok(
            "NISPlayerGroup::NISPlayerGroup(void)",
        ),
    ),
    (
        "_$_14NISPlayerGroup",
        Ok(
            "NISPlayerGroup::~NISPlayerGroup(void)",
        ),
    ),
    (
        "LoadSound__14NISPlayerGroupUiP22NISSoundLoadedCallback",
        Ok(
            "NISPlayerGroup::LoadSound(unsigned int, NISSoundLoadedCallback *)",
        ),
    ),
    (
        "PlaySound__14NISPlayerGroupPQ218RadicalMathLibrary5Box3DP32NISSoundPlaybackCompleteCallback",
        Ok(
            "NISPlayerGroup::PlaySound(RadicalMathLibrary::Box3D *, NISSoundPlaybackCompleteCallback *)",
        ),
    ),
    (
        "StopAndDumpSound__14NISPlayerGroup",
        Ok(
            "NISPlayerGroup::StopAndDumpSound(void)",
        ),
    ),
    (
        "IsSoundIDLoaded__14NISPlayerGroupUi",
        Ok(
            "NISPlayerGroup::IsSoundIDLoaded(unsigned int)",
        ),
    ),
    (
        "Continue__14NISPlayerGroup",
        Ok(
            "NISPlayerGroup::Continue(void)",
        ),
    ),
    (
        "OnSoundReady__14NISPlayerGroup",
        Ok(
            "NISPlayerGroup::OnSoundReady(void)",
        ),
    ),
    (
        "OnPlaybackComplete__14NISPlayerGroup",
        Ok(
            "NISPlayerGroup::OnPlaybackComplete(void)",
        ),
    ),
    (
        "__14NISSoundPlayer",
        Ok(
            "NISSoundPlayer::NISSoundPlayer(void)",
        ),
    ),
    (
        "_$_14NISSoundPlayer",
        Ok(
            "NISSoundPlayer::~NISSoundPlayer(void)",
        ),
    ),
    (
        "LoadNISSound__14NISSoundPlayerUiP22NISSoundLoadedCallback",
        Ok(
            "NISSoundPlayer::LoadNISSound(unsigned int, NISSoundLoadedCallback *)",
        ),
    ),
    (
        "PlayNISSound__14NISSoundPlayerUiPQ218RadicalMathLibrary5Box3DP32NISSoundPlaybackCompleteCallback",
        Ok(
            "NISSoundPlayer::PlayNISSound(unsigned int, RadicalMathLibrary::Box3D *, NISSoundPlaybackCompleteCallback *)",
        ),
    ),
    (
        "StopAndDumpNISSound__14NISSoundPlayerUi",
        Ok(
            "NISSoundPlayer::StopAndDumpNISSound(unsigned int)",
        ),
    ),
    (
        "PauseAllNISPlayers__14NISSoundPlayer",
        Ok(
            "NISSoundPlayer::PauseAllNISPlayers(void)",
        ),
    ),
    (
        "ContinueAllNISPlayers__14NISSoundPlayer",
        Ok(
            "NISSoundPlayer::ContinueAllNISPlayers(void)",
        ),
    ),
    (
        "HandleEvent__14NISSoundPlayer9EventEnumPv",
        Ok(
            "NISSoundPlayer::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "loadFEGag__14NISSoundPlayerUi",
        Ok(
            "NISSoundPlayer::loadFEGag(unsigned int)",
        ),
    ),
    (
        "__tf14NISPlayerGroup",
        Ok(
            "NISPlayerGroup type_info function",
        ),
    ),
    (
        "__tf14NISSoundPlayer",
        Ok(
            "NISSoundPlayer type_info function",
        ),
    ),
    (
        "__17SoundEffectPlayer",
        Ok(
            "SoundEffectPlayer::SoundEffectPlayer(void)",
        ),
    ),
    (
        "_$_17SoundEffectPlayer",
        Ok(
            "SoundEffectPlayer::~SoundEffectPlayer(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__17SoundEffectPlayerUi",
        Ok(
            "SoundEffectPlayer::ServiceOncePerFrame(unsigned int)",
        ),
    ),
    (
        "OnPauseStart__17SoundEffectPlayer",
        Ok(
            "SoundEffectPlayer::OnPauseStart(void)",
        ),
    ),
    (
        "OnPauseEnd__17SoundEffectPlayer",
        Ok(
            "SoundEffectPlayer::OnPauseEnd(void)",
        ),
    ),
    (
        "PlayCarOptionStinger__17SoundEffectPlayerf",
        Ok(
            "SoundEffectPlayer::PlayCarOptionStinger(float)",
        ),
    ),
    (
        "PlayDialogOptionStinger__17SoundEffectPlayerf",
        Ok(
            "SoundEffectPlayer::PlayDialogOptionStinger(float)",
        ),
    ),
    (
        "PlayMusicOptionStinger__17SoundEffectPlayerf",
        Ok(
            "SoundEffectPlayer::PlayMusicOptionStinger(float)",
        ),
    ),
    (
        "PlaySfxOptionStinger__17SoundEffectPlayerf",
        Ok(
            "SoundEffectPlayer::PlaySfxOptionStinger(float)",
        ),
    ),
    (
        "initialize__17SoundEffectPlayer",
        Ok(
            "SoundEffectPlayer::initialize(void)",
        ),
    ),
    (
        "setSFXState__17SoundEffectPlayerQ217SoundEffectPlayer8SFXState",
        Ok(
            "SoundEffectPlayer::setSFXState(SoundEffectPlayer::SFXState)",
        ),
    ),
    (
        "doCleanup__17SoundEffectPlayer",
        Ok(
            "SoundEffectPlayer::doCleanup(void)",
        ),
    ),
    (
        "playStinger__17SoundEffectPlayerPCcf",
        Ok(
            "SoundEffectPlayer::playStinger(char const *, float)",
        ),
    ),
    (
        "__20SoundFXFrontEndLogic",
        Ok(
            "SoundFXFrontEndLogic::SoundFXFrontEndLogic(void)",
        ),
    ),
    (
        "_$_20SoundFXFrontEndLogic",
        Ok(
            "SoundFXFrontEndLogic::~SoundFXFrontEndLogic(void)",
        ),
    ),
    (
        "RegisterEventListeners__20SoundFXFrontEndLogic",
        Ok(
            "SoundFXFrontEndLogic::RegisterEventListeners(void)",
        ),
    ),
    (
        "HandleEvent__20SoundFXFrontEndLogic9EventEnumPv",
        Ok(
            "SoundFXFrontEndLogic::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic::SoundFXGameplayLogic(void)",
        ),
    ),
    (
        "_$_20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic::~SoundFXGameplayLogic(void)",
        ),
    ),
    (
        "RegisterEventListeners__20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic::RegisterEventListeners(void)",
        ),
    ),
    (
        "HandleEvent__20SoundFXGameplayLogic9EventEnumPv",
        Ok(
            "SoundFXGameplayLogic::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnPlaybackComplete__20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic::OnPlaybackComplete(void)",
        ),
    ),
    (
        "Cleanup__20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic::Cleanup(void)",
        ),
    ),
    (
        "getGlobalSettings__20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic::getGlobalSettings(void)",
        ),
    ),
    (
        "handleCollisionEvent__20SoundFXGameplayLogicP18SoundCollisionData",
        Ok(
            "SoundFXGameplayLogic::handleCollisionEvent(SoundCollisionData *)",
        ),
    ),
    (
        "handleObjectKick__20SoundFXGameplayLogicP18CollisionEntityDSG",
        Ok(
            "SoundFXGameplayLogic::handleObjectKick(CollisionEntityDSG *)",
        ),
    ),
    (
        "collisionPairMatches__20SoundFXGameplayLogiciPvT2",
        Ok(
            "SoundFXGameplayLogic::collisionPairMatches(int, void *, void *)",
        ),
    ),
    (
        "startCollisionPlayer__20SoundFXGameplayLogicPCcP18CollisionEntityDSGT2PQ218RadicalMathLibrary6Vector",
        Ok(
            "SoundFXGameplayLogic::startCollisionPlayer(char const *, CollisionEntityDSG *, CollisionEntityDSG *, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "handleFootstepEvent__20SoundFXGameplayLogicP9Character",
        Ok(
            "SoundFXGameplayLogic::handleFootstepEvent(Character *)",
        ),
    ),
    (
        "handleSwitchEvent__20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic::handleSwitchEvent(void)",
        ),
    ),
    (
        "handleCollection__20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic::handleCollection(void)",
        ),
    ),
    (
        "playPositionalSound__20SoundFXGameplayLogicP13ScriptLocator",
        Ok(
            "SoundFXGameplayLogic::playPositionalSound(ScriptLocator *)",
        ),
    ),
    (
        "playCarDoorSound__20SoundFXGameplayLogic9EventEnumP9Character",
        Ok(
            "SoundFXGameplayLogic::playCarDoorSound(EventEnum, Character *)",
        ),
    ),
    (
        "playCoinCollectSound__20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic::playCoinCollectSound(void)",
        ),
    ),
    (
        "__12SoundFXLogic",
        Ok(
            "SoundFXLogic::SoundFXLogic(void)",
        ),
    ),
    (
        "_$_12SoundFXLogic",
        Ok(
            "SoundFXLogic::~SoundFXLogic(void)",
        ),
    ),
    (
        "UnregisterEventListeners__12SoundFXLogic",
        Ok(
            "SoundFXLogic::UnregisterEventListeners(void)",
        ),
    ),
    (
        "GetAvailableSFXPlayer__12SoundFXLogicPUi",
        Ok(
            "SoundFXLogic::GetAvailableSFXPlayer(unsigned int *)",
        ),
    ),
    (
        "playSFXSound__12SoundFXLogicPCcbT2PUiff",
        Ok(
            "SoundFXLogic::playSFXSound(char const *, bool, bool, unsigned int *, float, float)",
        ),
    ),
    (
        "ServiceOncePerFrame__12SoundFXLogicUi",
        Ok(
            "SoundFXLogic::ServiceOncePerFrame(unsigned int)",
        ),
    ),
    (
        "OnSoundReady__12SoundFXLogic",
        Ok(
            "SoundFXLogic::OnSoundReady(void)",
        ),
    ),
    (
        "OnPlaybackComplete__12SoundFXLogic",
        Ok(
            "SoundFXLogic::OnPlaybackComplete(void)",
        ),
    ),
    (
        "Cleanup__12SoundFXLogic",
        Ok(
            "SoundFXLogic::Cleanup(void)",
        ),
    ),
    (
        "playCreditLine__12SoundFXLogici",
        Ok(
            "SoundFXLogic::playCreditLine(int)",
        ),
    ),
    (
        "__17SoundFXPauseLogic",
        Ok(
            "SoundFXPauseLogic::SoundFXPauseLogic(void)",
        ),
    ),
    (
        "_$_17SoundFXPauseLogic",
        Ok(
            "SoundFXPauseLogic::~SoundFXPauseLogic(void)",
        ),
    ),
    (
        "RegisterEventListeners__17SoundFXPauseLogic",
        Ok(
            "SoundFXPauseLogic::RegisterEventListeners(void)",
        ),
    ),
    (
        "HandleEvent__17SoundFXPauseLogic9EventEnumPv",
        Ok(
            "SoundFXPauseLogic::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__16ReverbController",
        Ok(
            "ReverbController::ReverbController(void)",
        ),
    ),
    (
        "_$_16ReverbController",
        Ok(
            "ReverbController::~ReverbController(void)",
        ),
    ),
    (
        "SetReverbGain__16ReverbControllerf",
        Ok(
            "ReverbController::SetReverbGain(float)",
        ),
    ),
    (
        "HandleEvent__16ReverbController9EventEnumPv",
        Ok(
            "ReverbController::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "ServiceOncePerFrame__16ReverbControllerUi",
        Ok(
            "ReverbController::ServiceOncePerFrame(unsigned int)",
        ),
    ),
    (
        "PauseReverb__16ReverbController",
        Ok(
            "ReverbController::PauseReverb(void)",
        ),
    ),
    (
        "UnpauseReverb__16ReverbController",
        Ok(
            "ReverbController::UnpauseReverb(void)",
        ),
    ),
    (
        "registerReverbEffect__16ReverbControllerP18IRadSoundHalEffect",
        Ok(
            "ReverbController::registerReverbEffect(IRadSoundHalEffect *)",
        ),
    ),
    (
        "prepareFadeSettings__16ReverbControllerfff",
        Ok(
            "ReverbController::prepareFadeSettings(float, float, float)",
        ),
    ),
    (
        "startFadeOut__16ReverbController",
        Ok(
            "ReverbController::startFadeOut(void)",
        ),
    ),
    (
        "getReverbSettings__16ReverbControllerPCc",
        Ok(
            "ReverbController::getReverbSettings(char const *)",
        ),
    ),
    (
        "__14reverbSettings",
        Ok(
            "reverbSettings::reverbSettings(void)",
        ),
    ),
    (
        "_$_14reverbSettings",
        Ok(
            "reverbSettings::~reverbSettings(void)",
        ),
    ),
    (
        "ReverbSettingsObjCreate__FPP15IReverbSettingsi",
        Ok(
            "ReverbSettingsObjCreate(IReverbSettings **, int)",
        ),
    ),
    (
        "__23positionalSoundSettings",
        Ok(
            "positionalSoundSettings::positionalSoundSettings(void)",
        ),
    ),
    (
        "_$_23positionalSoundSettings",
        Ok(
            "positionalSoundSettings::~positionalSoundSettings(void)",
        ),
    ),
    (
        "SetClipName__23positionalSoundSettingsPCc",
        Ok(
            "positionalSoundSettings::SetClipName(char const *)",
        ),
    ),
    (
        "SetMinDistance__23positionalSoundSettingsf",
        Ok(
            "positionalSoundSettings::SetMinDistance(float)",
        ),
    ),
    (
        "SetMaxDistance__23positionalSoundSettingsf",
        Ok(
            "positionalSoundSettings::SetMaxDistance(float)",
        ),
    ),
    (
        "SetPlaybackProbability__23positionalSoundSettingsf",
        Ok(
            "positionalSoundSettings::SetPlaybackProbability(float)",
        ),
    ),
    (
        "PositionalSettingsObjCreate__FPP24IPositionalSoundSettingsi",
        Ok(
            "PositionalSettingsObjCreate(IPositionalSoundSettings **, int)",
        ),
    ),
    (
        "__19PS2ReverbController",
        Ok(
            "PS2ReverbController::PS2ReverbController(void)",
        ),
    ),
    (
        "_$_19PS2ReverbController",
        Ok(
            "PS2ReverbController::~PS2ReverbController(void)",
        ),
    ),
    (
        "SetReverbOn__19PS2ReverbControllerP14reverbSettings",
        Ok(
            "PS2ReverbController::SetReverbOn(reverbSettings *)",
        ),
    ),
    (
        "SetReverbOff__19PS2ReverbController",
        Ok(
            "PS2ReverbController::SetReverbOff(void)",
        ),
    ),
    (
        "__tf17SoundEffectPlayer",
        Ok(
            "SoundEffectPlayer type_info function",
        ),
    ),
    (
        "__tf12SoundFXLogic",
        Ok(
            "SoundFXLogic type_info function",
        ),
    ),
    (
        "__tf20SoundFXFrontEndLogic",
        Ok(
            "SoundFXFrontEndLogic type_info function",
        ),
    ),
    (
        "__tf20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic type_info function",
        ),
    ),
    (
        "__tf17SoundFXPauseLogic",
        Ok(
            "SoundFXPauseLogic type_info function",
        ),
    ),
    (
        "__tf16ReverbController",
        Ok(
            "ReverbController type_info function",
        ),
    ),
    (
        "__tf19PS2ReverbController",
        Ok(
            "PS2ReverbController type_info function",
        ),
    ),
    (
        "__tf23positionalSoundSettings",
        Ok(
            "positionalSoundSettings type_info function",
        ),
    ),
    (
        "__tf14reverbSettings",
        Ok(
            "reverbSettings type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1Z23positionalSoundSettings",
        Ok(
            "radLinkedClass<positionalSoundSettings> type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1Z14reverbSettings",
        Ok(
            "radLinkedClass<reverbSettings> type_info function",
        ),
    ),
    (
        "_$_9SFXPlayer",
        Ok(
            "SFXPlayer::~SFXPlayer(void)",
        ),
    ),
    (
        "__9SFXPlayer",
        Ok(
            "SFXPlayer::SFXPlayer(void)",
        ),
    ),
    (
        "_$_19PositionalSFXPlayer",
        Ok(
            "PositionalSFXPlayer::~PositionalSFXPlayer(void)",
        ),
    ),
    (
        "__19PositionalSFXPlayer",
        Ok(
            "PositionalSFXPlayer::PositionalSFXPlayer(void)",
        ),
    ),
    (
        "__24IPositionalSoundSettings",
        Ok(
            "IPositionalSoundSettings::IPositionalSoundSettings(void)",
        ),
    ),
    (
        "AddRef__23positionalSoundSettings",
        Ok(
            "positionalSoundSettings::AddRef(void)",
        ),
    ),
    (
        "Release__23positionalSoundSettings",
        Ok(
            "positionalSoundSettings::Release(void)",
        ),
    ),
    (
        "__15IReverbSettings",
        Ok(
            "IReverbSettings::IReverbSettings(void)",
        ),
    ),
    (
        "AddRef__14reverbSettings",
        Ok(
            "reverbSettings::AddRef(void)",
        ),
    ),
    (
        "Release__14reverbSettings",
        Ok(
            "reverbSettings::Release(void)",
        ),
    ),
    (
        "SetGain__14reverbSettingsf",
        Ok(
            "reverbSettings::SetGain(float)",
        ),
    ),
    (
        "SetFadeInTime__14reverbSettingsf",
        Ok(
            "reverbSettings::SetFadeInTime(float)",
        ),
    ),
    (
        "SetFadeOutTime__14reverbSettingsf",
        Ok(
            "reverbSettings::SetFadeOutTime(float)",
        ),
    ),
    (
        "SetXboxRoom__14reverbSettingsi",
        Ok(
            "reverbSettings::SetXboxRoom(int)",
        ),
    ),
    (
        "SetXboxRoomHF__14reverbSettingsi",
        Ok(
            "reverbSettings::SetXboxRoomHF(int)",
        ),
    ),
    (
        "SetXboxRoomRolloffFactor__14reverbSettingsf",
        Ok(
            "reverbSettings::SetXboxRoomRolloffFactor(float)",
        ),
    ),
    (
        "SetXboxDecayTime__14reverbSettingsf",
        Ok(
            "reverbSettings::SetXboxDecayTime(float)",
        ),
    ),
    (
        "SetXboxDecayHFRatio__14reverbSettingsf",
        Ok(
            "reverbSettings::SetXboxDecayHFRatio(float)",
        ),
    ),
    (
        "SetXboxReflections__14reverbSettingsi",
        Ok(
            "reverbSettings::SetXboxReflections(int)",
        ),
    ),
    (
        "SetXboxReflectionsDelay__14reverbSettingsf",
        Ok(
            "reverbSettings::SetXboxReflectionsDelay(float)",
        ),
    ),
    (
        "SetXboxReverb__14reverbSettingsi",
        Ok(
            "reverbSettings::SetXboxReverb(int)",
        ),
    ),
    (
        "SetXboxReverbDelay__14reverbSettingsf",
        Ok(
            "reverbSettings::SetXboxReverbDelay(float)",
        ),
    ),
    (
        "SetXboxDiffusion__14reverbSettingsf",
        Ok(
            "reverbSettings::SetXboxDiffusion(float)",
        ),
    ),
    (
        "SetXboxDensity__14reverbSettingsf",
        Ok(
            "reverbSettings::SetXboxDensity(float)",
        ),
    ),
    (
        "SetXboxHFReference__14reverbSettingsf",
        Ok(
            "reverbSettings::SetXboxHFReference(float)",
        ),
    ),
    (
        "SetPS2ReverbMode__14reverbSettingsi",
        Ok(
            "reverbSettings::SetPS2ReverbMode(int)",
        ),
    ),
    (
        "SetPS2Delay__14reverbSettingsf",
        Ok(
            "reverbSettings::SetPS2Delay(float)",
        ),
    ),
    (
        "SetPS2Feedback__14reverbSettingsf",
        Ok(
            "reverbSettings::SetPS2Feedback(float)",
        ),
    ),
    (
        "SetGCPreDelay__14reverbSettingsf",
        Ok(
            "reverbSettings::SetGCPreDelay(float)",
        ),
    ),
    (
        "SetGCReverbTime__14reverbSettingsf",
        Ok(
            "reverbSettings::SetGCReverbTime(float)",
        ),
    ),
    (
        "SetGCColoration__14reverbSettingsf",
        Ok(
            "reverbSettings::SetGCColoration(float)",
        ),
    ),
    (
        "SetGCDamping__14reverbSettingsf",
        Ok(
            "reverbSettings::SetGCDamping(float)",
        ),
    ),
    (
        "SetWinEnvironmentDiffusion__14reverbSettingsf",
        Ok(
            "reverbSettings::SetWinEnvironmentDiffusion(float)",
        ),
    ),
    (
        "SetWinAirAbsorptionHF__14reverbSettingsf",
        Ok(
            "reverbSettings::SetWinAirAbsorptionHF(float)",
        ),
    ),
    (
        "__tf24IPositionalSoundSettings",
        Ok(
            "IPositionalSoundSettings type_info function",
        ),
    ),
    (
        "__tf15IReverbSettings",
        Ok(
            "IReverbSettings type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__17SoundEffectPlayer",
        Ok(
            "global constructors keyed to SoundEffectPlayer::SoundEffectPlayer(void)",
        ),
    ),
    (
        "__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::daSoundClipStreamPlayer(void)",
        ),
    ),
    (
        "_$_Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::~daSoundClipStreamPlayer(void)",
        ),
    ),
    (
        "UpdateClip__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::UpdateClip(void)",
        ),
    ),
    (
        "UpdateStream__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::UpdateStream(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "InitializeAsClipPlayer__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::InitializeAsClipPlayer(void)",
        ),
    ),
    (
        "InitializeAsStreamPlayer__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::InitializeAsStreamPlayer(void)",
        ),
    ),
    (
        "Capture__Q25Sound23daSoundClipStreamPlayerP16IDaSoundResourceb",
        Ok(
            "Sound::daSoundClipStreamPlayer::Capture(IDaSoundResource *, bool)",
        ),
    ),
    (
        "IsCaptured__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::IsCaptured(void)",
        ),
    ),
    (
        "UnCapture__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::UnCapture(void)",
        ),
    ),
    (
        "ChangeTrim__Q25Sound23daSoundClipStreamPlayerQ25Sound12daSoundGroupf",
        Ok(
            "Sound::daSoundClipStreamPlayer::ChangeTrim(Sound::daSoundGroup, float)",
        ),
    ),
    (
        "ChangeFaderTrim__Q25Sound23daSoundClipStreamPlayerQ25Sound12daSoundGroupf",
        Ok(
            "Sound::daSoundClipStreamPlayer::ChangeFaderTrim(Sound::daSoundGroup, float)",
        ),
    ),
    (
        "GetSoundGroup__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::GetSoundGroup(void)",
        ),
    ),
    (
        "RegisterSoundPlayerStateCallback__Q25Sound23daSoundClipStreamPlayerPQ25Sound19IDaSoundPlayerStatePv",
        Ok(
            "Sound::daSoundClipStreamPlayer::RegisterSoundPlayerStateCallback(Sound::IDaSoundPlayerState *, void *)",
        ),
    ),
    (
        "UnregisterSoundPlayerStateCallback__Q25Sound23daSoundClipStreamPlayerPQ25Sound19IDaSoundPlayerStatePv",
        Ok(
            "Sound::daSoundClipStreamPlayer::UnregisterSoundPlayerStateCallback(Sound::IDaSoundPlayerState *, void *)",
        ),
    ),
    (
        "Play__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::Play(void)",
        ),
    ),
    (
        "OnStitch__Q25Sound23daSoundClipStreamPlayerPP22IRadSoundHalDataSourceUiPv",
        Ok(
            "Sound::daSoundClipStreamPlayer::OnStitch(IRadSoundHalDataSource **, unsigned int, void *)",
        ),
    ),
    (
        "Pause__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::Pause(void)",
        ),
    ),
    (
        "Continue__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::Continue(void)",
        ),
    ),
    (
        "Stop__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::Stop(void)",
        ),
    ),
    (
        "HookUpAndCuePlayer__Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer::HookUpAndCuePlayer(void)",
        ),
    ),
    (
        "__5FaderP14globalSettingsQ25Sound14DuckSituationsRQ25Sound20daSoundPlayerManagerRQ25Sound13IDaSoundTuner",
        Ok(
            "Fader::Fader(globalSettings *, Sound::DuckSituations, Sound::daSoundPlayerManager &, Sound::IDaSoundTuner &)",
        ),
    ),
    (
        "_$_5Fader",
        Ok(
            "Fader::~Fader(void)",
        ),
    ),
    (
        "BroadCast__5Fader",
        Ok(
            "Fader::BroadCast(void)",
        ),
    ),
    (
        "Fade__5FaderbPQ25Sound13DuckVolumeSetT2",
        Ok(
            "Fader::Fade(bool, Sound::DuckVolumeSet *, Sound::DuckVolumeSet *)",
        ),
    ),
    (
        "GetState__5Fader",
        Ok(
            "Fader::GetState(void)",
        ),
    ),
    (
        "Update__5FaderUi",
        Ok(
            "Fader::Update(unsigned int)",
        ),
    ),
    (
        "UpdateAllFaders__5FaderUi",
        Ok(
            "Fader::UpdateAllFaders(unsigned int)",
        ),
    ),
    (
        "ReinitializeFader__5FaderP14globalSettings",
        Ok(
            "Fader::ReinitializeFader(globalSettings *)",
        ),
    ),
    (
        "Stop__5Fader",
        Ok(
            "Fader::Stop(void)",
        ),
    ),
    (
        "setState__5Fader",
        Ok(
            "Fader::setState(void)",
        ),
    ),
    (
        "addToUpdateList__5Fader",
        Ok(
            "Fader::addToUpdateList(void)",
        ),
    ),
    (
        "removeFromUpdateList__5Fader",
        Ok(
            "Fader::removeFromUpdateList(void)",
        ),
    ),
    (
        "faderInUpdateList__5Fader",
        Ok(
            "Fader::faderInUpdateList(void)",
        ),
    ),
    (
        "__Q25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer::MusicSoundPlayer(void)",
        ),
    ),
    (
        "_$_Q25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer::~MusicSoundPlayer(void)",
        ),
    ),
    (
        "Initialize__Q25Sound16MusicSoundPlayerb",
        Ok(
            "Sound::MusicSoundPlayer::Initialize(bool)",
        ),
    ),
    (
        "GetSoundGroup__Q25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer::GetSoundGroup(void)",
        ),
    ),
    (
        "SetGroupTrim__Q25Sound16MusicSoundPlayerf",
        Ok(
            "Sound::MusicSoundPlayer::SetGroupTrim(float)",
        ),
    ),
    (
        "SetFaderGroupTrim__Q25Sound16MusicSoundPlayerf",
        Ok(
            "Sound::MusicSoundPlayer::SetFaderGroupTrim(float)",
        ),
    ),
    (
        "SetMasterTrim__Q25Sound16MusicSoundPlayerf",
        Ok(
            "Sound::MusicSoundPlayer::SetMasterTrim(float)",
        ),
    ),
    (
        "ChangeTrim__Q25Sound16MusicSoundPlayerQ25Sound12daSoundGroupf",
        Ok(
            "Sound::MusicSoundPlayer::ChangeTrim(Sound::daSoundGroup, float)",
        ),
    ),
    (
        "ChangeFaderTrim__Q25Sound16MusicSoundPlayerQ25Sound12daSoundGroupf",
        Ok(
            "Sound::MusicSoundPlayer::ChangeFaderTrim(Sound::daSoundGroup, float)",
        ),
    ),
    (
        "ResetMusicTrim__Q25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer::ResetMusicTrim(void)",
        ),
    ),
    (
        "CreateAudioFormat__5SoundPQ25Sound11AudioFormati",
        Ok(
            "Sound::CreateAudioFormat(Sound::AudioFormat *, int)",
        ),
    ),
    (
        "DestroyAudioFormat__5SoundPQ25Sound11AudioFormat",
        Ok(
            "Sound::DestroyAudioFormat(Sound::AudioFormat *)",
        ),
    ),
    (
        "CreateStreamerResources__5SoundPQ25Sound17StreamerResourcesi",
        Ok(
            "Sound::CreateStreamerResources(Sound::StreamerResources *, int)",
        ),
    ),
    (
        "DestroyStreamerResources__5SoundPQ25Sound17StreamerResources",
        Ok(
            "Sound::DestroyStreamerResources(Sound::StreamerResources *)",
        ),
    ),
    (
        "CalculateStreamerSize__5SoundUiPQ25Sound11AudioFormat",
        Ok(
            "Sound::CalculateStreamerSize(unsigned int, Sound::AudioFormat *)",
        ),
    ),
    (
        "SoundNucleusInitialize__5Soundi",
        Ok(
            "Sound::SoundNucleusInitialize(int)",
        ),
    ),
    (
        "SoundNucleusTerminate__5Soundv",
        Ok(
            "Sound::SoundNucleusTerminate(void)",
        ),
    ),
    (
        "SoundNucleusGetStreamFileAudioFormat__5Soundv",
        Ok(
            "Sound::SoundNucleusGetStreamFileAudioFormat(void)",
        ),
    ),
    (
        "SoundNucleusGetClipFileAudioFormat__5Soundv",
        Ok(
            "Sound::SoundNucleusGetClipFileAudioFormat(void)",
        ),
    ),
    (
        "SoundNucleusCaptureStreamerResources__5SoundP23IRadSoundHalAudioFormat",
        Ok(
            "Sound::SoundNucleusCaptureStreamerResources(IRadSoundHalAudioFormat *)",
        ),
    ),
    (
        "SoundNucleusUnCaptureStreamerResources__5SoundPQ25Sound17StreamerResources",
        Ok(
            "Sound::SoundNucleusUnCaptureStreamerResources(Sound::StreamerResources *)",
        ),
    ),
    (
        "SoundNucleusLoadClip__5SoundPCcb",
        Ok(
            "Sound::SoundNucleusLoadClip(char const *, bool)",
        ),
    ),
    (
        "SoundNucleusIsClipLoaded__5Soundv",
        Ok(
            "Sound::SoundNucleusIsClipLoaded(void)",
        ),
    ),
    (
        "SoundNucleusFinishClipLoad__5SoundPP13IRadSoundClip",
        Ok(
            "Sound::SoundNucleusFinishClipLoad(IRadSoundClip **)",
        ),
    ),
    (
        "SoundNucleusCancelClipLoad__5Soundv",
        Ok(
            "Sound::SoundNucleusCancelClipLoad(void)",
        ),
    ),
    (
        "SoundNucleusServiceClipLoad__5Soundv",
        Ok(
            "Sound::SoundNucleusServiceClipLoad(void)",
        ),
    ),
    (
        "_$_Q25Sound24daSoundAsyncFadeCallback",
        Ok(
            "Sound::daSoundAsyncFadeCallback::~daSoundAsyncFadeCallback(void)",
        ),
    ),
    (
        "GetCallback__Q25Sound24daSoundAsyncFadeCallbackPPQ25Sound17IDaSoundFadeStatePPv",
        Ok(
            "Sound::daSoundAsyncFadeCallback::GetCallback(Sound::IDaSoundFadeState **, void **)",
        ),
    ),
    (
        "__Q25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager::daSoundPlayerManager(void)",
        ),
    ),
    (
        "_$_Q25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager::~daSoundPlayerManager(void)",
        ),
    ),
    (
        "UglyHackPostInitialize__Q25Sound20daSoundPlayerManagerPQ25Sound13IDaSoundTuner",
        Ok(
            "Sound::daSoundPlayerManager::UglyHackPostInitialize(Sound::IDaSoundTuner *)",
        ),
    ),
    (
        "Initialize__Q25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager::Initialize(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__Q25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "CaptureFreePlayer__Q25Sound20daSoundPlayerManagerPPQ25Sound23daSoundClipStreamPlayerP16IDaSoundResourceb",
        Ok(
            "Sound::daSoundPlayerManager::CaptureFreePlayer(Sound::daSoundClipStreamPlayer **, IDaSoundResource *, bool)",
        ),
    ),
    (
        "FindFreePlayer__Q25Sound20daSoundPlayerManagerPPQ25Sound23daSoundClipStreamPlayerUiT1",
        Ok(
            "Sound::daSoundPlayerManager::FindFreePlayer(Sound::daSoundClipStreamPlayer **, unsigned int, Sound::daSoundClipStreamPlayer **)",
        ),
    ),
    (
        "FindFreeClipPlayer__Q25Sound20daSoundPlayerManagerPPQ25Sound23daSoundClipStreamPlayerP16IDaSoundResource",
        Ok(
            "Sound::daSoundPlayerManager::FindFreeClipPlayer(Sound::daSoundClipStreamPlayer **, IDaSoundResource *)",
        ),
    ),
    (
        "FindFreeStreamPlayer__Q25Sound20daSoundPlayerManagerPPQ25Sound23daSoundClipStreamPlayerP16IDaSoundResource",
        Ok(
            "Sound::daSoundPlayerManager::FindFreeStreamPlayer(Sound::daSoundClipStreamPlayer **, IDaSoundResource *)",
        ),
    ),
    (
        "PausePlayers__Q25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager::PausePlayers(void)",
        ),
    ),
    (
        "ContinuePlayers__Q25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager::ContinuePlayers(void)",
        ),
    ),
    (
        "CancelPlayers__Q25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager::CancelPlayers(void)",
        ),
    ),
    (
        "PlayerVolumeChange__Q25Sound20daSoundPlayerManagerQ25Sound12daSoundGroupf",
        Ok(
            "Sound::daSoundPlayerManager::PlayerVolumeChange(Sound::daSoundGroup, float)",
        ),
    ),
    (
        "PlayerFaderVolumeChange__Q25Sound20daSoundPlayerManagerQ25Sound12daSoundGroupf",
        Ok(
            "Sound::daSoundPlayerManager::PlayerFaderVolumeChange(Sound::daSoundGroup, float)",
        ),
    ),
    (
        "OnFadeDone__Q25Sound20daSoundPlayerManagerPv",
        Ok(
            "Sound::daSoundPlayerManager::OnFadeDone(void *)",
        ),
    ),
    (
        "__Q25Sound19daSoundFileInstanceP16IDaSoundResourceUi",
        Ok(
            "Sound::daSoundFileInstance::daSoundFileInstance(IDaSoundResource *, unsigned int)",
        ),
    ),
    (
        "_$_Q25Sound19daSoundFileInstance",
        Ok(
            "Sound::daSoundFileInstance::~daSoundFileInstance(void)",
        ),
    ),
    (
        "CreateFileDataSource__Q25Sound19daSoundFileInstancePP26IRadSoundRsdFileDataSource",
        Ok(
            "Sound::daSoundFileInstance::CreateFileDataSource(IRadSoundRsdFileDataSource **)",
        ),
    ),
    (
        "Load__Q25Sound19daSoundFileInstanceP24IRadSoundHalMemoryRegion",
        Ok(
            "Sound::daSoundFileInstance::Load(IRadSoundHalMemoryRegion *)",
        ),
    ),
    (
        "UpdateLoading__Q25Sound19daSoundFileInstance",
        Ok(
            "Sound::daSoundFileInstance::UpdateLoading(void)",
        ),
    ),
    (
        "UnLoad__Q25Sound19daSoundFileInstance",
        Ok(
            "Sound::daSoundFileInstance::UnLoad(void)",
        ),
    ),
    (
        "__Q25Sound24daSoundAllocatedResource",
        Ok(
            "Sound::daSoundAllocatedResource::daSoundAllocatedResource(void)",
        ),
    ),
    (
        "_$_Q25Sound24daSoundAllocatedResource",
        Ok(
            "Sound::daSoundAllocatedResource::~daSoundAllocatedResource(void)",
        ),
    ),
    (
        "Initialize__Q25Sound24daSoundAllocatedResourceP16IDaSoundResource",
        Ok(
            "Sound::daSoundAllocatedResource::Initialize(IDaSoundResource *)",
        ),
    ),
    (
        "ChooseNextInstance__Q25Sound24daSoundAllocatedResource",
        Ok(
            "Sound::daSoundAllocatedResource::ChooseNextInstance(void)",
        ),
    ),
    (
        "GetFileInstance__Q25Sound24daSoundAllocatedResourceUi",
        Ok(
            "Sound::daSoundAllocatedResource::GetFileInstance(unsigned int)",
        ),
    ),
    (
        "__Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::daSoundDynaLoadRegion(void)",
        ),
    ),
    (
        "_$_Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::~daSoundDynaLoadRegion(void)",
        ),
    ),
    (
        "Create__Q25Sound21daSoundDynaLoadRegionP24IRadSoundHalMemoryRegionUiUi",
        Ok(
            "Sound::daSoundDynaLoadRegion::Create(IRadSoundHalMemoryRegion *, unsigned int, unsigned int)",
        ),
    ),
    (
        "Destroy__Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::Destroy(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "SwapInObject__Q25Sound21daSoundDynaLoadRegionUiPQ25Sound19daSoundFileInstance",
        Ok(
            "Sound::daSoundDynaLoadRegion::SwapInObject(unsigned int, Sound::daSoundFileInstance *)",
        ),
    ),
    (
        "GetSlotState__Q25Sound21daSoundDynaLoadRegionUi",
        Ok(
            "Sound::daSoundDynaLoadRegion::GetSlotState(unsigned int)",
        ),
    ),
    (
        "GetNumSlots__Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::GetNumSlots(void)",
        ),
    ),
    (
        "SharedMemoryRegions__Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::SharedMemoryRegions(void)",
        ),
    ),
    (
        "PerformSwap__Q25Sound21daSoundDynaLoadRegionUi",
        Ok(
            "Sound::daSoundDynaLoadRegion::PerformSwap(unsigned int)",
        ),
    ),
    (
        "GetSlotMemoryRegion__Q25Sound21daSoundDynaLoadRegionUi",
        Ok(
            "Sound::daSoundDynaLoadRegion::GetSlotMemoryRegion(unsigned int)",
        ),
    ),
    (
        "SetSlotObject__Q25Sound21daSoundDynaLoadRegionUiPQ25Sound19daSoundFileInstance",
        Ok(
            "Sound::daSoundDynaLoadRegion::SetSlotObject(unsigned int, Sound::daSoundFileInstance *)",
        ),
    ),
    (
        "GetSlotObject__Q25Sound21daSoundDynaLoadRegionUi",
        Ok(
            "Sound::daSoundDynaLoadRegion::GetSlotObject(unsigned int)",
        ),
    ),
    (
        "SetPendingSwapObject__Q25Sound21daSoundDynaLoadRegionUiPQ25Sound19daSoundFileInstance",
        Ok(
            "Sound::daSoundDynaLoadRegion::SetPendingSwapObject(unsigned int, Sound::daSoundFileInstance *)",
        ),
    ),
    (
        "ArePendingSwapsRegistered__Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::ArePendingSwapsRegistered(void)",
        ),
    ),
    (
        "GetNumPendingSwaps__Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::GetNumPendingSwaps(void)",
        ),
    ),
    (
        "GetPendingSwapObject__Q25Sound21daSoundDynaLoadRegionUi",
        Ok(
            "Sound::daSoundDynaLoadRegion::GetPendingSwapObject(unsigned int)",
        ),
    ),
    (
        "SetObject_Internal__Q25Sound21daSoundDynaLoadRegionPPQ25Sound19daSoundFileInstanceUiPQ25Sound19daSoundFileInstance",
        Ok(
            "Sound::daSoundDynaLoadRegion::SetObject_Internal(Sound::daSoundFileInstance **, unsigned int, Sound::daSoundFileInstance *)",
        ),
    ),
    (
        "GetObject_Internal__Q25Sound21daSoundDynaLoadRegionPPQ25Sound19daSoundFileInstanceUi",
        Ok(
            "Sound::daSoundDynaLoadRegion::GetObject_Internal(Sound::daSoundFileInstance **, unsigned int)",
        ),
    ),
    (
        "ClearActiveSwap__Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::ClearActiveSwap(void)",
        ),
    ),
    (
        "SetActiveSwap__Q25Sound21daSoundDynaLoadRegionUi",
        Ok(
            "Sound::daSoundDynaLoadRegion::SetActiveSwap(unsigned int)",
        ),
    ),
    (
        "__Q25Sound22daSoundDynaLoadManager",
        Ok(
            "Sound::daSoundDynaLoadManager::daSoundDynaLoadManager(void)",
        ),
    ),
    (
        "_$_Q25Sound22daSoundDynaLoadManager",
        Ok(
            "Sound::daSoundDynaLoadManager::~daSoundDynaLoadManager(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__Q25Sound22daSoundDynaLoadManager",
        Ok(
            "Sound::daSoundDynaLoadManager::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "CreateRegion__Q25Sound22daSoundDynaLoadManagerP24IRadSoundHalMemoryRegionUiUi",
        Ok(
            "Sound::daSoundDynaLoadManager::CreateRegion(IRadSoundHalMemoryRegion *, unsigned int, unsigned int)",
        ),
    ),
    (
        "AddCompletionCallback__Q25Sound22daSoundDynaLoadManagerPQ25Sound34IDaSoundDynaLoadCompletionCallbackPv",
        Ok(
            "Sound::daSoundDynaLoadManager::AddCompletionCallback(Sound::IDaSoundDynaLoadCompletionCallback *, void *)",
        ),
    ),
    (
        "__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::daSoundRenderingManager(void)",
        ),
    ),
    (
        "_$_Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::~daSoundRenderingManager(void)",
        ),
    ),
    (
        "GetInstance__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::GetInstance(void)",
        ),
    ),
    (
        "Initialize__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::Initialize(void)",
        ),
    ),
    (
        "IsInitialized__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::IsInitialized(void)",
        ),
    ),
    (
        "Terminate__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::Terminate(void)",
        ),
    ),
    (
        "Service__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::Service(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__Q25Sound23daSoundRenderingManagerUi",
        Ok(
            "Sound::daSoundRenderingManager::ServiceOncePerFrame(unsigned int)",
        ),
    ),
    (
        "QueueCementFileRegistration__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::QueueCementFileRegistration(void)",
        ),
    ),
    (
        "SwitchDialogueCementFile__Q25Sound23daSoundRenderingManagerQ27Scrooby10XLLanguage",
        Ok(
            "Sound::daSoundRenderingManager::SwitchDialogueCementFile(Scrooby::XLLanguage)",
        ),
    ),
    (
        "QueueRadscriptFileLoads__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::QueueRadscriptFileLoads(void)",
        ),
    ),
    (
        "LoadTypeInfoFile__Q25Sound23daSoundRenderingManagerPCcP16SoundFileHandler",
        Ok(
            "Sound::daSoundRenderingManager::LoadTypeInfoFile(char const *, SoundFileHandler *)",
        ),
    ),
    (
        "LoadScriptFile__Q25Sound23daSoundRenderingManagerPCcP16SoundFileHandler",
        Ok(
            "Sound::daSoundRenderingManager::LoadScriptFile(char const *, SoundFileHandler *)",
        ),
    ),
    (
        "GetSoundNamespace__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::GetSoundNamespace(void)",
        ),
    ),
    (
        "GetTuningNamespace__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::GetTuningNamespace(void)",
        ),
    ),
    (
        "GetCharacterNamespace__Q25Sound23daSoundRenderingManagerUi",
        Ok(
            "Sound::daSoundRenderingManager::GetCharacterNamespace(unsigned int)",
        ),
    ),
    (
        "GetTheListener__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::GetTheListener(void)",
        ),
    ),
    (
        "GetDynaLoadManager__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::GetDynaLoadManager(void)",
        ),
    ),
    (
        "GetTuner__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::GetTuner(void)",
        ),
    ),
    (
        "GetResourceManager__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::GetResourceManager(void)",
        ),
    ),
    (
        "GetPlayerManager__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::GetPlayerManager(void)",
        ),
    ),
    (
        "TypeInfoComplete__Q25Sound23daSoundRenderingManagerPv",
        Ok(
            "Sound::daSoundRenderingManager::TypeInfoComplete(void *)",
        ),
    ),
    (
        "ScriptComplete__Q25Sound23daSoundRenderingManagerPv",
        Ok(
            "Sound::daSoundRenderingManager::ScriptComplete(void *)",
        ),
    ),
    (
        "SoundObjectCreated__Q25Sound23daSoundRenderingManagerPCcP9IRefCount",
        Ok(
            "Sound::daSoundRenderingManager::SoundObjectCreated(char const *, IRefCount *)",
        ),
    ),
    (
        "ProcessTypeInfo__Q25Sound23daSoundRenderingManagerPv",
        Ok(
            "Sound::daSoundRenderingManager::ProcessTypeInfo(void *)",
        ),
    ),
    (
        "ProcessScript__Q25Sound23daSoundRenderingManagerPv",
        Ok(
            "Sound::daSoundRenderingManager::ProcessScript(void *)",
        ),
    ),
    (
        "daSoundRenderingManagerCreate__5Soundi",
        Ok(
            "Sound::daSoundRenderingManagerCreate(int)",
        ),
    ),
    (
        "daSoundRenderingManagerGet__5Soundv",
        Ok(
            "Sound::daSoundRenderingManagerGet(void)",
        ),
    ),
    (
        "FilePerformanceEvent__Q25Sound23daSoundRenderingManagerbPCcUi",
        Ok(
            "Sound::daSoundRenderingManager::FilePerformanceEvent(bool, char const *, unsigned int)",
        ),
    ),
    (
        "daSoundRenderingManagerTerminate__5Soundv",
        Ok(
            "Sound::daSoundRenderingManagerTerminate(void)",
        ),
    ),
    (
        "__28SoundResourceFilenameBuilder",
        Ok(
            "SoundResourceFilenameBuilder::SoundResourceFilenameBuilder(void)",
        ),
    ),
    (
        "_$_28SoundResourceFilenameBuilder",
        Ok(
            "SoundResourceFilenameBuilder::~SoundResourceFilenameBuilder(void)",
        ),
    ),
    (
        "CutFilename__28SoundResourceFilenameBuilderPCcPc",
        Ok(
            "SoundResourceFilenameBuilder::CutFilename(char const *, char *)",
        ),
    ),
    (
        "RestoreFilename__28SoundResourceFilenameBuilderPCcUiPcUi",
        Ok(
            "SoundResourceFilenameBuilder::RestoreFilename(char const *, unsigned int, char *, unsigned int)",
        ),
    ),
    (
        "__19daSoundResourceData",
        Ok(
            "daSoundResourceData::daSoundResourceData(void)",
        ),
    ),
    (
        "_$_19daSoundResourceData",
        Ok(
            "daSoundResourceData::~daSoundResourceData(void)",
        ),
    ),
    (
        "AddFilename__19daSoundResourceDataPCcf",
        Ok(
            "daSoundResourceData::AddFilename(char const *, float)",
        ),
    ),
    (
        "GetNumFiles__19daSoundResourceData",
        Ok(
            "daSoundResourceData::GetNumFiles(void)",
        ),
    ),
    (
        "GetFileAt__19daSoundResourceDataUi",
        Ok(
            "daSoundResourceData::GetFileAt(unsigned int)",
        ),
    ),
    (
        "GetFilenameAt__19daSoundResourceDataUiPcUi",
        Ok(
            "daSoundResourceData::GetFilenameAt(unsigned int, char *, unsigned int)",
        ),
    ),
    (
        "SetPitchRange__19daSoundResourceDataff",
        Ok(
            "daSoundResourceData::SetPitchRange(float, float)",
        ),
    ),
    (
        "GetPitchRange__19daSoundResourceDataPfT1",
        Ok(
            "daSoundResourceData::GetPitchRange(float *, float *)",
        ),
    ),
    (
        "SetTrimRange__19daSoundResourceDataff",
        Ok(
            "daSoundResourceData::SetTrimRange(float, float)",
        ),
    ),
    (
        "SetTrim__19daSoundResourceDataf",
        Ok(
            "daSoundResourceData::SetTrim(float)",
        ),
    ),
    (
        "GetTrimRange__19daSoundResourceDataPfT1",
        Ok(
            "daSoundResourceData::GetTrimRange(float *, float *)",
        ),
    ),
    (
        "SetStreaming__19daSoundResourceDatab",
        Ok(
            "daSoundResourceData::SetStreaming(bool)",
        ),
    ),
    (
        "GetStreaming__19daSoundResourceData",
        Ok(
            "daSoundResourceData::GetStreaming(void)",
        ),
    ),
    (
        "SetLooping__19daSoundResourceDatab",
        Ok(
            "daSoundResourceData::SetLooping(bool)",
        ),
    ),
    (
        "GetLooping__19daSoundResourceData",
        Ok(
            "daSoundResourceData::GetLooping(void)",
        ),
    ),
    (
        "GetType__19daSoundResourceData",
        Ok(
            "daSoundResourceData::GetType(void)",
        ),
    ),
    (
        "SetSoundGroup__19daSoundResourceDataQ25Sound12daSoundGroup",
        Ok(
            "daSoundResourceData::SetSoundGroup(Sound::daSoundGroup)",
        ),
    ),
    (
        "GetSoundGroup__19daSoundResourceData",
        Ok(
            "daSoundResourceData::GetSoundGroup(void)",
        ),
    ),
    (
        "CaptureResource__19daSoundResourceData",
        Ok(
            "daSoundResourceData::CaptureResource(void)",
        ),
    ),
    (
        "IsCaptured__19daSoundResourceData",
        Ok(
            "daSoundResourceData::IsCaptured(void)",
        ),
    ),
    (
        "ReleaseResource__19daSoundResourceData",
        Ok(
            "daSoundResourceData::ReleaseResource(void)",
        ),
    ),
    (
        "Play__19daSoundResourceData",
        Ok(
            "daSoundResourceData::Play(void)",
        ),
    ),
    (
        "InitializedResourceFile__19daSoundResourceDataPQ216IDaSoundResource23daSoundResourceFileDescPCcf",
        Ok(
            "daSoundResourceData::InitializedResourceFile(IDaSoundResource::daSoundResourceFileDesc *, char const *, float)",
        ),
    ),
    (
        "DestroyResourceFile__19daSoundResourceDataRQ216IDaSoundResource23daSoundResourceFileDesc",
        Ok(
            "daSoundResourceData::DestroyResourceFile(IDaSoundResource::daSoundResourceFileDesc &)",
        ),
    ),
    (
        "AddRef__19daSoundResourceData",
        Ok(
            "daSoundResourceData::AddRef(void)",
        ),
    ),
    (
        "Release__19daSoundResourceData",
        Ok(
            "daSoundResourceData::Release(void)",
        ),
    ),
    (
        "__Q25Sound22daSoundResourceManager",
        Ok(
            "Sound::daSoundResourceManager::daSoundResourceManager(void)",
        ),
    ),
    (
        "_$_Q25Sound22daSoundResourceManager",
        Ok(
            "Sound::daSoundResourceManager::~daSoundResourceManager(void)",
        ),
    ),
    (
        "AllocateResource__Q25Sound22daSoundResourceManagerP16IDaSoundResource",
        Ok(
            "Sound::daSoundResourceManager::AllocateResource(IDaSoundResource *)",
        ),
    ),
    (
        "DeallocateResource__Q25Sound22daSoundResourceManagerP16IDaSoundResource",
        Ok(
            "Sound::daSoundResourceManager::DeallocateResource(IDaSoundResource *)",
        ),
    ),
    (
        "FindResource__Q25Sound22daSoundResourceManagerPCc",
        Ok(
            "Sound::daSoundResourceManager::FindResource(char const *)",
        ),
    ),
    (
        "FindResource__Q25Sound22daSoundResourceManagerUi",
        Ok(
            "Sound::daSoundResourceManager::FindResource(unsigned int)",
        ),
    ),
    (
        "FindAllocatedResource__Q25Sound22daSoundResourceManagerP16IDaSoundResource",
        Ok(
            "Sound::daSoundResourceManager::FindAllocatedResource(IDaSoundResource *)",
        ),
    ),
    (
        "SetResourceLockdown__Q25Sound22daSoundResourceManagerb",
        Ok(
            "Sound::daSoundResourceManager::SetResourceLockdown(bool)",
        ),
    ),
    (
        "GetResourceLockdown__Q25Sound22daSoundResourceManager",
        Ok(
            "Sound::daSoundResourceManager::GetResourceLockdown(void)",
        ),
    ),
    (
        "GetNumResourceDatas__Q25Sound22daSoundResourceManager",
        Ok(
            "Sound::daSoundResourceManager::GetNumResourceDatas(void)",
        ),
    ),
    (
        "SetActiveResource__Q25Sound22daSoundResourceManagerP13IRadNameSpace",
        Ok(
            "Sound::daSoundResourceManager::SetActiveResource(IRadNameSpace *)",
        ),
    ),
    (
        "ReleaseActiveResource__Q25Sound22daSoundResourceManagerP13IRadNameSpace",
        Ok(
            "Sound::daSoundResourceManager::ReleaseActiveResource(IRadNameSpace *)",
        ),
    ),
    (
        "GetResourceDataAt__Q25Sound22daSoundResourceManagerUi",
        Ok(
            "Sound::daSoundResourceManager::GetResourceDataAt(unsigned int)",
        ),
    ),
    (
        "CreateResourceData__Q25Sound22daSoundResourceManager",
        Ok(
            "Sound::daSoundResourceManager::CreateResourceData(void)",
        ),
    ),
    (
        "__Q25Sound27daSoundTuner_ActiveFadeInfoP5FaderbPQ25Sound17IDaSoundFadeStatePvPQ25Sound13DuckVolumeSetT5",
        Ok(
            "Sound::daSoundTuner_ActiveFadeInfo::daSoundTuner_ActiveFadeInfo(Fader *, bool, Sound::IDaSoundFadeState *, void *, Sound::DuckVolumeSet *, Sound::DuckVolumeSet *)",
        ),
    ),
    (
        "_$_Q25Sound27daSoundTuner_ActiveFadeInfo",
        Ok(
            "Sound::daSoundTuner_ActiveFadeInfo::~daSoundTuner_ActiveFadeInfo(void)",
        ),
    ),
    (
        "ProcessFader__Q25Sound27daSoundTuner_ActiveFadeInfo",
        Ok(
            "Sound::daSoundTuner_ActiveFadeInfo::ProcessFader(void)",
        ),
    ),
    (
        "StoreCurrentVolumes__Q25Sound27daSoundTuner_ActiveFadeInfoRQ25Sound13DuckVolumeSet",
        Ok(
            "Sound::daSoundTuner_ActiveFadeInfo::StoreCurrentVolumes(Sound::DuckVolumeSet &)",
        ),
    ),
    (
        "__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::daSoundTuner(void)",
        ),
    ),
    (
        "_$_Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::~daSoundTuner(void)",
        ),
    ),
    (
        "Initialize__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::Initialize(void)",
        ),
    ),
    (
        "PostScriptLoadInitialize__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::PostScriptLoadInitialize(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__Q25Sound12daSoundTunerUi",
        Ok(
            "Sound::daSoundTuner::ServiceOncePerFrame(unsigned int)",
        ),
    ),
    (
        "SetSoundOutputMode__Q25Sound12daSoundTunerQ35Sound13IDaSoundTuner15SoundOutputMode",
        Ok(
            "Sound::daSoundTuner::SetSoundOutputMode(Sound::IDaSoundTuner::SoundOutputMode)",
        ),
    ),
    (
        "GetSoundOutputMode__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::GetSoundOutputMode(void)",
        ),
    ),
    (
        "ActivateDuck__Q25Sound12daSoundTunerPQ25Sound17IDaSoundFadeStatePvb",
        Ok(
            "Sound::daSoundTuner::ActivateDuck(Sound::IDaSoundFadeState *, void *, bool)",
        ),
    ),
    (
        "ActivateSituationalDuck__Q25Sound12daSoundTunerPQ25Sound17IDaSoundFadeStateQ25Sound14DuckSituationsPvb",
        Ok(
            "Sound::daSoundTuner::ActivateSituationalDuck(Sound::IDaSoundFadeState *, Sound::DuckSituations, void *, bool)",
        ),
    ),
    (
        "ResetDuck__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::ResetDuck(void)",
        ),
    ),
    (
        "SetMasterVolume__Q25Sound12daSoundTunerf",
        Ok(
            "Sound::daSoundTuner::SetMasterVolume(float)",
        ),
    ),
    (
        "GetMasterVolume__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::GetMasterVolume(void)",
        ),
    ),
    (
        "SetDialogueVolume__Q25Sound12daSoundTunerf",
        Ok(
            "Sound::daSoundTuner::SetDialogueVolume(float)",
        ),
    ),
    (
        "GetDialogueVolume__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::GetDialogueVolume(void)",
        ),
    ),
    (
        "SetMusicVolume__Q25Sound12daSoundTunerf",
        Ok(
            "Sound::daSoundTuner::SetMusicVolume(float)",
        ),
    ),
    (
        "GetMusicVolume__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::GetMusicVolume(void)",
        ),
    ),
    (
        "SetAmbienceVolume__Q25Sound12daSoundTunerf",
        Ok(
            "Sound::daSoundTuner::SetAmbienceVolume(float)",
        ),
    ),
    (
        "GetAmbienceVolume__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::GetAmbienceVolume(void)",
        ),
    ),
    (
        "SetSfxVolume__Q25Sound12daSoundTunerf",
        Ok(
            "Sound::daSoundTuner::SetSfxVolume(float)",
        ),
    ),
    (
        "GetSfxVolume__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::GetSfxVolume(void)",
        ),
    ),
    (
        "SetCarVolume__Q25Sound12daSoundTunerf",
        Ok(
            "Sound::daSoundTuner::SetCarVolume(float)",
        ),
    ),
    (
        "GetCarVolume__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::GetCarVolume(void)",
        ),
    ),
    (
        "FadeSounds__Q25Sound12daSoundTunerPQ25Sound17IDaSoundFadeStatePvP5FaderbPQ25Sound13DuckVolumeSet",
        Ok(
            "Sound::daSoundTuner::FadeSounds(Sound::IDaSoundFadeState *, void *, Fader *, bool, Sound::DuckVolumeSet *)",
        ),
    ),
    (
        "WireKnobToPathHelper__Q25Sound12daSoundTunerP16IDaSoundResourcePv",
        Ok(
            "Sound::daSoundTuner::WireKnobToPathHelper(IDaSoundResource *, void *)",
        ),
    ),
    (
        "WirePath__Q25Sound12daSoundTunerQ25Sound12daSoundGroupPCc",
        Ok(
            "Sound::daSoundTuner::WirePath(Sound::daSoundGroup, char const *)",
        ),
    ),
    (
        "WireGroup__Q25Sound12daSoundTunerQ25Sound12daSoundGroupT1",
        Ok(
            "Sound::daSoundTuner::WireGroup(Sound::daSoundGroup, Sound::daSoundGroup)",
        ),
    ),
    (
        "IsSlaveGroup__Q25Sound12daSoundTunerQ25Sound12daSoundGroupT1",
        Ok(
            "Sound::daSoundTuner::IsSlaveGroup(Sound::daSoundGroup, Sound::daSoundGroup)",
        ),
    ),
    (
        "GetGroupTrim__Q25Sound12daSoundTunerQ25Sound12daSoundGroup",
        Ok(
            "Sound::daSoundTuner::GetGroupTrim(Sound::daSoundGroup)",
        ),
    ),
    (
        "SetFaderGroupTrim__Q25Sound12daSoundTunerQ25Sound11DuckVolumesf",
        Ok(
            "Sound::daSoundTuner::SetFaderGroupTrim(Sound::DuckVolumes, float)",
        ),
    ),
    (
        "GetFaderGroupTrim__Q25Sound12daSoundTunerQ25Sound12daSoundGroup",
        Ok(
            "Sound::daSoundTuner::GetFaderGroupTrim(Sound::daSoundGroup)",
        ),
    ),
    (
        "MuteNIS__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::MuteNIS(void)",
        ),
    ),
    (
        "UnmuteNIS__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::UnmuteNIS(void)",
        ),
    ),
    (
        "activateDuckInternal__Q25Sound12daSoundTunerPQ25Sound17IDaSoundFadeStatePvbP5Fader",
        Ok(
            "Sound::daSoundTuner::activateDuckInternal(Sound::IDaSoundFadeState *, void *, bool, Fader *)",
        ),
    ),
    (
        "calculateDuckedVolumes__Q25Sound12daSoundTunerRQ25Sound13DuckVolumeSet",
        Ok(
            "Sound::daSoundTuner::calculateDuckedVolumes(Sound::DuckVolumeSet &)",
        ),
    ),
    (
        "serviceDebugInfo__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::serviceDebugInfo(void)",
        ),
    ),
    (
        "daSoundTunerCreate__5SoundPPQ25Sound13IDaSoundTuneri",
        Ok(
            "Sound::daSoundTunerCreate(Sound::IDaSoundTuner **, int)",
        ),
    ),
    (
        "daSoundTunerWireSystem__5SoundPQ25Sound14IDaSoundWiring",
        Ok(
            "Sound::daSoundTunerWireSystem(Sound::IDaSoundWiring *)",
        ),
    ),
    (
        "_$_14TunerDebugPage",
        Ok(
            "TunerDebugPage::~TunerDebugPage(void)",
        ),
    ),
    (
        "fillLineBuffer__14TunerDebugPageiPc",
        Ok(
            "TunerDebugPage::fillLineBuffer(int, char *)",
        ),
    ),
    (
        "getNumLines__14TunerDebugPage",
        Ok(
            "TunerDebugPage::getNumLines(void)",
        ),
    ),
    (
        "__tf19daSoundResourceData",
        Ok(
            "daSoundResourceData type_info function",
        ),
    ),
    (
        "__tfQ25Sound22daSoundResourceManager",
        Ok(
            "Sound::daSoundResourceManager type_info function",
        ),
    ),
    (
        "__tfQ25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion type_info function",
        ),
    ),
    (
        "__tfQ25Sound22daSoundDynaLoadManager",
        Ok(
            "Sound::daSoundDynaLoadManager type_info function",
        ),
    ),
    (
        "__tfQ25Sound24daSoundAllocatedResource",
        Ok(
            "Sound::daSoundAllocatedResource type_info function",
        ),
    ),
    (
        "__tfQ25Sound17daSoundPlayerBase",
        Ok(
            "Sound::daSoundPlayerBase type_info function",
        ),
    ),
    (
        "__tfQ25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer type_info function",
        ),
    ),
    (
        "__tfQ25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer type_info function",
        ),
    ),
    (
        "__tfQ25Sound24daSoundAsyncFadeCallback",
        Ok(
            "Sound::daSoundAsyncFadeCallback type_info function",
        ),
    ),
    (
        "__tfQ25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager type_info function",
        ),
    ),
    (
        "__tfQ25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager type_info function",
        ),
    ),
    (
        "__tf5Fader",
        Ok(
            "Fader type_info function",
        ),
    ),
    (
        "__tf28SoundResourceFilenameBuilder",
        Ok(
            "SoundResourceFilenameBuilder type_info function",
        ),
    ),
    (
        "__tf14TunerDebugPage",
        Ok(
            "TunerDebugPage type_info function",
        ),
    ),
    (
        "__tfQ25Sound27daSoundTuner_ActiveFadeInfo",
        Ok(
            "Sound::daSoundTuner_ActiveFadeInfo type_info function",
        ),
    ),
    (
        "__tfQ25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1ZQ25Sound21daSoundDynaLoadRegion",
        Ok(
            "radLinkedClass<Sound::daSoundDynaLoadRegion> type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1ZQ25Sound17daSoundPlayerBase",
        Ok(
            "radLinkedClass<Sound::daSoundPlayerBase> type_info function",
        ),
    ),
    (
        "__23IRadSoundStitchCallback",
        Ok(
            "IRadSoundStitchCallback::IRadSoundStitchCallback(void)",
        ),
    ),
    (
        "__Q25Sound17IDaSoundFadeState",
        Ok(
            "Sound::IDaSoundFadeState::IDaSoundFadeState(void)",
        ),
    ),
    (
        "__Q25Sound13IDaSoundTuner",
        Ok(
            "Sound::IDaSoundTuner::IDaSoundTuner(void)",
        ),
    ),
    (
        "__16IDaSoundResource",
        Ok(
            "IDaSoundResource::IDaSoundResource(void)",
        ),
    ),
    (
        "AddRef__Q25Sound22daSoundResourceManager",
        Ok(
            "Sound::daSoundResourceManager::AddRef(void)",
        ),
    ),
    (
        "Release__Q25Sound22daSoundResourceManager",
        Ok(
            "Sound::daSoundResourceManager::Release(void)",
        ),
    ),
    (
        "AddRef__Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::AddRef(void)",
        ),
    ),
    (
        "Release__Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::Release(void)",
        ),
    ),
    (
        "AddRef__Q25Sound22daSoundDynaLoadManager",
        Ok(
            "Sound::daSoundDynaLoadManager::AddRef(void)",
        ),
    ),
    (
        "Release__Q25Sound22daSoundDynaLoadManager",
        Ok(
            "Sound::daSoundDynaLoadManager::Release(void)",
        ),
    ),
    (
        "AddRef__Q25Sound24daSoundAllocatedResource",
        Ok(
            "Sound::daSoundAllocatedResource::AddRef(void)",
        ),
    ),
    (
        "Release__Q25Sound24daSoundAllocatedResource",
        Ok(
            "Sound::daSoundAllocatedResource::Release(void)",
        ),
    ),
    (
        "_$_Q25Sound17daSoundPlayerBase",
        Ok(
            "Sound::daSoundPlayerBase::~daSoundPlayerBase(void)",
        ),
    ),
    (
        "AddRef__Q25Sound17daSoundPlayerBase",
        Ok(
            "Sound::daSoundPlayerBase::AddRef(void)",
        ),
    ),
    (
        "Release__Q25Sound17daSoundPlayerBase",
        Ok(
            "Sound::daSoundPlayerBase::Release(void)",
        ),
    ),
    (
        "SetPitch__Q25Sound23daSoundClipStreamPlayerf",
        Ok(
            "Sound::daSoundClipStreamPlayer::SetPitch(float)",
        ),
    ),
    (
        "ServiceOncePerFrame__Q25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "IsCaptured__Q25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer::IsCaptured(void)",
        ),
    ),
    (
        "Pause__Q25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer::Pause(void)",
        ),
    ),
    (
        "Continue__Q25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer::Continue(void)",
        ),
    ),
    (
        "Stop__Q25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer::Stop(void)",
        ),
    ),
    (
        "SetPitch__Q25Sound16MusicSoundPlayerf",
        Ok(
            "Sound::MusicSoundPlayer::SetPitch(float)",
        ),
    ),
    (
        "AddRef__Q25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager::AddRef(void)",
        ),
    ),
    (
        "Release__Q25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager::Release(void)",
        ),
    ),
    (
        "AddRef__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::AddRef(void)",
        ),
    ),
    (
        "Release__Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager::Release(void)",
        ),
    ),
    (
        "AddRef__5Fader",
        Ok(
            "Fader::AddRef(void)",
        ),
    ),
    (
        "Release__5Fader",
        Ok(
            "Fader::Release(void)",
        ),
    ),
    (
        "AddRef__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::AddRef(void)",
        ),
    ),
    (
        "Release__Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner::Release(void)",
        ),
    ),
    (
        "__tf23IRadSoundStitchCallback",
        Ok(
            "IRadSoundStitchCallback type_info function",
        ),
    ),
    (
        "__tfQ25Sound17IDaSoundFadeState",
        Ok(
            "Sound::IDaSoundFadeState type_info function",
        ),
    ),
    (
        "__tfQ25Sound13IDaSoundTuner",
        Ok(
            "Sound::IDaSoundTuner type_info function",
        ),
    ),
    (
        "__tf16IDaSoundResource",
        Ok(
            "IDaSoundResource type_info function",
        ),
    ),
    (
        "__Q25Sound14IDaSoundWiring",
        Ok(
            "Sound::IDaSoundWiring::IDaSoundWiring(void)",
        ),
    ),
    (
        "__20IDaSoundResourceData",
        Ok(
            "IDaSoundResourceData::IDaSoundResourceData(void)",
        ),
    ),
    (
        "__tfQ25Sound14IDaSoundWiring",
        Ok(
            "Sound::IDaSoundWiring type_info function",
        ),
    ),
    (
        "__tf20IDaSoundResourceData",
        Ok(
            "IDaSoundResourceData type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$_t14radLinkedClass1ZQ25Sound17daSoundPlayerBase$s_pLinkedClassHead",
        Ok(
            "global constructors keyed to radLinkedClass<Sound::daSoundPlayerBase>::s_pLinkedClassHead",
        ),
    ),
    (
        "_GLOBAL_$D$_t14radLinkedClass1ZQ25Sound17daSoundPlayerBase$s_pLinkedClassHead",
        Ok(
            "global destructors keyed to radLinkedClass<Sound::daSoundPlayerBase>::s_pLinkedClassHead",
        ),
    ),
    (
        "__14globalSettings",
        Ok(
            "globalSettings::globalSettings(void)",
        ),
    ),
    (
        "_$_14globalSettings",
        Ok(
            "globalSettings::~globalSettings(void)",
        ),
    ),
    (
        "SetMasterVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMasterVolume(float)",
        ),
    ),
    (
        "SetSfxVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetSfxVolume(float)",
        ),
    ),
    (
        "SetCarVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetCarVolume(float)",
        ),
    ),
    (
        "SetMusicVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMusicVolume(float)",
        ),
    ),
    (
        "SetDialogueVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetDialogueVolume(float)",
        ),
    ),
    (
        "SetAmbienceVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetAmbienceVolume(float)",
        ),
    ),
    (
        "SetPeeloutMin__14globalSettingsf",
        Ok(
            "globalSettings::SetPeeloutMin(float)",
        ),
    ),
    (
        "SetPeeloutMax__14globalSettingsf",
        Ok(
            "globalSettings::SetPeeloutMax(float)",
        ),
    ),
    (
        "SetPeeloutMaxTrim__14globalSettingsf",
        Ok(
            "globalSettings::SetPeeloutMaxTrim(float)",
        ),
    ),
    (
        "SetSkidRoadClipName__14globalSettingsPCc",
        Ok(
            "globalSettings::SetSkidRoadClipName(char const *)",
        ),
    ),
    (
        "SetSkidDirtClipName__14globalSettingsPCc",
        Ok(
            "globalSettings::SetSkidDirtClipName(char const *)",
        ),
    ),
    (
        "SetFootstepRoadClipName__14globalSettingsPCc",
        Ok(
            "globalSettings::SetFootstepRoadClipName(char const *)",
        ),
    ),
    (
        "SetFootstepMetalClipName__14globalSettingsPCc",
        Ok(
            "globalSettings::SetFootstepMetalClipName(char const *)",
        ),
    ),
    (
        "SetFootstepWoodClipName__14globalSettingsPCc",
        Ok(
            "globalSettings::SetFootstepWoodClipName(char const *)",
        ),
    ),
    (
        "SetCoinPitch__14globalSettingsf",
        Ok(
            "globalSettings::SetCoinPitch(float)",
        ),
    ),
    (
        "GetCoinPitch__14globalSettingsUi",
        Ok(
            "globalSettings::GetCoinPitch(unsigned int)",
        ),
    ),
    (
        "setDuckVolume__14globalSettingsQ25Sound14DuckSituationsQ25Sound11DuckVolumesf",
        Ok(
            "globalSettings::setDuckVolume(Sound::DuckSituations, Sound::DuckVolumes, float)",
        ),
    ),
    (
        "GlobalSettingsObjCreate__FPP15IGlobalSettingsi",
        Ok(
            "GlobalSettingsObjCreate(IGlobalSettings **, int)",
        ),
    ),
    (
        "__tf14globalSettings",
        Ok(
            "globalSettings type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1Z14globalSettings",
        Ok(
            "radLinkedClass<globalSettings> type_info function",
        ),
    ),
    (
        "__15IGlobalSettings",
        Ok(
            "IGlobalSettings::IGlobalSettings(void)",
        ),
    ),
    (
        "AddRef__14globalSettings",
        Ok(
            "globalSettings::AddRef(void)",
        ),
    ),
    (
        "Release__14globalSettings",
        Ok(
            "globalSettings::Release(void)",
        ),
    ),
    (
        "SetPauseSfxVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetPauseSfxVolume(float)",
        ),
    ),
    (
        "SetPauseCarVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetPauseCarVolume(float)",
        ),
    ),
    (
        "SetPauseMusicVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetPauseMusicVolume(float)",
        ),
    ),
    (
        "SetPauseDialogueVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetPauseDialogueVolume(float)",
        ),
    ),
    (
        "SetPauseAmbienceVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetPauseAmbienceVolume(float)",
        ),
    ),
    (
        "SetMissionScreenSfxVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMissionScreenSfxVolume(float)",
        ),
    ),
    (
        "SetMissionScreenCarVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMissionScreenCarVolume(float)",
        ),
    ),
    (
        "SetMissionScreenMusicVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMissionScreenMusicVolume(float)",
        ),
    ),
    (
        "SetMissionScreenDialogueVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMissionScreenDialogueVolume(float)",
        ),
    ),
    (
        "SetMissionScreenAmbienceVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMissionScreenAmbienceVolume(float)",
        ),
    ),
    (
        "SetLetterboxSfxVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetLetterboxSfxVolume(float)",
        ),
    ),
    (
        "SetLetterboxCarVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetLetterboxCarVolume(float)",
        ),
    ),
    (
        "SetLetterboxMusicVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetLetterboxMusicVolume(float)",
        ),
    ),
    (
        "SetLetterboxDialogueVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetLetterboxDialogueVolume(float)",
        ),
    ),
    (
        "SetLetterboxAmbienceVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetLetterboxAmbienceVolume(float)",
        ),
    ),
    (
        "SetDialogueSfxVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetDialogueSfxVolume(float)",
        ),
    ),
    (
        "SetDialogueCarVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetDialogueCarVolume(float)",
        ),
    ),
    (
        "SetDialogueMusicVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetDialogueMusicVolume(float)",
        ),
    ),
    (
        "SetDialogueDialogueVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetDialogueDialogueVolume(float)",
        ),
    ),
    (
        "SetDialogueAmbienceVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetDialogueAmbienceVolume(float)",
        ),
    ),
    (
        "SetStoreSfxVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetStoreSfxVolume(float)",
        ),
    ),
    (
        "SetStoreCarVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetStoreCarVolume(float)",
        ),
    ),
    (
        "SetStoreMusicVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetStoreMusicVolume(float)",
        ),
    ),
    (
        "SetStoreDialogueVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetStoreDialogueVolume(float)",
        ),
    ),
    (
        "SetStoreAmbienceVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetStoreAmbienceVolume(float)",
        ),
    ),
    (
        "SetOnFootSfxVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetOnFootSfxVolume(float)",
        ),
    ),
    (
        "SetOnFootCarVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetOnFootCarVolume(float)",
        ),
    ),
    (
        "SetOnFootMusicVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetOnFootMusicVolume(float)",
        ),
    ),
    (
        "SetOnFootDialogueVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetOnFootDialogueVolume(float)",
        ),
    ),
    (
        "SetOnFootAmbienceVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetOnFootAmbienceVolume(float)",
        ),
    ),
    (
        "SetMinigameSfxVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMinigameSfxVolume(float)",
        ),
    ),
    (
        "SetMinigameCarVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMinigameCarVolume(float)",
        ),
    ),
    (
        "SetMinigameMusicVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMinigameMusicVolume(float)",
        ),
    ),
    (
        "SetMinigameDialogueVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMinigameDialogueVolume(float)",
        ),
    ),
    (
        "SetMinigameAmbienceVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetMinigameAmbienceVolume(float)",
        ),
    ),
    (
        "SetJustMusicSfxVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetJustMusicSfxVolume(float)",
        ),
    ),
    (
        "SetJustMusicCarVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetJustMusicCarVolume(float)",
        ),
    ),
    (
        "SetJustMusicMusicVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetJustMusicMusicVolume(float)",
        ),
    ),
    (
        "SetJustMusicDialogueVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetJustMusicDialogueVolume(float)",
        ),
    ),
    (
        "SetJustMusicAmbienceVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetJustMusicAmbienceVolume(float)",
        ),
    ),
    (
        "SetCreditsSfxVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetCreditsSfxVolume(float)",
        ),
    ),
    (
        "SetCreditsCarVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetCreditsCarVolume(float)",
        ),
    ),
    (
        "SetCreditsMusicVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetCreditsMusicVolume(float)",
        ),
    ),
    (
        "SetCreditsDialogueVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetCreditsDialogueVolume(float)",
        ),
    ),
    (
        "SetCreditsAmbienceVolume__14globalSettingsf",
        Ok(
            "globalSettings::SetCreditsAmbienceVolume(float)",
        ),
    ),
    (
        "__tf15IGlobalSettings",
        Ok(
            "IGlobalSettings type_info function",
        ),
    ),
    (
        "__17SoundDebugDisplayPQ25Sound23daSoundRenderingManager",
        Ok(
            "SoundDebugDisplay::SoundDebugDisplay(Sound::daSoundRenderingManager *)",
        ),
    ),
    (
        "_$_17SoundDebugDisplay",
        Ok(
            "SoundDebugDisplay::~SoundDebugDisplay(void)",
        ),
    ),
    (
        "DeregisterPage__17SoundDebugDisplayP14SoundDebugPage",
        Ok(
            "SoundDebugDisplay::DeregisterPage(SoundDebugPage *)",
        ),
    ),
    (
        "_$_14SoundDebugPage",
        Ok(
            "SoundDebugPage::~SoundDebugPage(void)",
        ),
    ),
    (
        "__tf17SoundDebugDisplay",
        Ok(
            "SoundDebugDisplay type_info function",
        ),
    ),
    (
        "__tf14SoundDebugPage",
        Ok(
            "SoundDebugPage type_info function",
        ),
    ),
    (
        "__18MovingSoundManager",
        Ok(
            "MovingSoundManager::MovingSoundManager(void)",
        ),
    ),
    (
        "_$_18MovingSoundManager",
        Ok(
            "MovingSoundManager::~MovingSoundManager(void)",
        ),
    ),
    (
        "HandleEvent__18MovingSoundManager9EventEnumPv",
        Ok(
            "MovingSoundManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "ServiceOncePerFrame__18MovingSoundManager",
        Ok(
            "MovingSoundManager::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "addTrafficSound__18MovingSoundManagerPCcP7Vehicleb",
        Ok(
            "MovingSoundManager::addTrafficSound(char const *, Vehicle *, bool)",
        ),
    ),
    (
        "stopTrafficSound__18MovingSoundManagerP7Vehicle",
        Ok(
            "MovingSoundManager::stopTrafficSound(Vehicle *)",
        ),
    ),
    (
        "addAISound__18MovingSoundManagerPCcP7Vehicleb",
        Ok(
            "MovingSoundManager::addAISound(char const *, Vehicle *, bool)",
        ),
    ),
    (
        "stopAISound__18MovingSoundManagerP7Vehicle",
        Ok(
            "MovingSoundManager::stopAISound(Vehicle *)",
        ),
    ),
    (
        "handleTrafficHornEvent__18MovingSoundManagerP7Vehicle",
        Ok(
            "MovingSoundManager::handleTrafficHornEvent(Vehicle *)",
        ),
    ),
    (
        "makeCarGoBoom__18MovingSoundManagerP7Vehicle",
        Ok(
            "MovingSoundManager::makeCarGoBoom(Vehicle *)",
        ),
    ),
    (
        "startPlatformSound__18MovingSoundManagerP13AnimSoundData",
        Ok(
            "MovingSoundManager::startPlatformSound(AnimSoundData *)",
        ),
    ),
    (
        "stopPlatformSound__18MovingSoundManagerPQ212ActionButton10AnimSwitch",
        Ok(
            "MovingSoundManager::stopPlatformSound(ActionButton::AnimSwitch *)",
        ),
    ),
    (
        "startAnimObjSound__18MovingSoundManagerP16AnimSoundDSGData",
        Ok(
            "MovingSoundManager::startAnimObjSound(AnimSoundDSGData *)",
        ),
    ),
    (
        "stopAnimObjSound__18MovingSoundManagerP22AnimCollisionEntityDSG",
        Ok(
            "MovingSoundManager::stopAnimObjSound(AnimCollisionEntityDSG *)",
        ),
    ),
    (
        "hasOverlayClip__18MovingSoundManagerP7VehiclePP18carSoundParameters",
        Ok(
            "MovingSoundManager::hasOverlayClip(Vehicle *, carSoundParameters **)",
        ),
    ),
    (
        "toggleOverlayClip__18MovingSoundManagerP7Vehicle",
        Ok(
            "MovingSoundManager::toggleOverlayClip(Vehicle *)",
        ),
    ),
    (
        "getPositionalSettingName__18MovingSoundManagerP7Vehicleb",
        Ok(
            "MovingSoundManager::getPositionalSettingName(Vehicle *, bool)",
        ),
    ),
    (
        "startWaspSound__18MovingSoundManagerP5Actor",
        Ok(
            "MovingSoundManager::startWaspSound(Actor *)",
        ),
    ),
    (
        "__28VehiclePositionalSoundPlayer",
        Ok(
            "VehiclePositionalSoundPlayer::VehiclePositionalSoundPlayer(void)",
        ),
    ),
    (
        "_$_28VehiclePositionalSoundPlayer",
        Ok(
            "VehiclePositionalSoundPlayer::~VehiclePositionalSoundPlayer(void)",
        ),
    ),
    (
        "ActivateByName__28VehiclePositionalSoundPlayerPCcP7Vehicle",
        Ok(
            "VehiclePositionalSoundPlayer::ActivateByName(char const *, Vehicle *)",
        ),
    ),
    (
        "Activate__28VehiclePositionalSoundPlayerP23positionalSoundSettingsPCcP7Vehicle",
        Ok(
            "VehiclePositionalSoundPlayer::Activate(positionalSoundSettings *, char const *, Vehicle *)",
        ),
    ),
    (
        "Deactivate__28VehiclePositionalSoundPlayer",
        Ok(
            "VehiclePositionalSoundPlayer::Deactivate(void)",
        ),
    ),
    (
        "GetPosition__28VehiclePositionalSoundPlayerR14radSoundVector",
        Ok(
            "VehiclePositionalSoundPlayer::GetPosition(radSoundVector &)",
        ),
    ),
    (
        "GetVelocity__28VehiclePositionalSoundPlayerR14radSoundVector",
        Ok(
            "VehiclePositionalSoundPlayer::GetVelocity(radSoundVector &)",
        ),
    ),
    (
        "ServiceOncePerFrame__28VehiclePositionalSoundPlayer",
        Ok(
            "VehiclePositionalSoundPlayer::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "UsesVehicle__28VehiclePositionalSoundPlayerP7Vehicle",
        Ok(
            "VehiclePositionalSoundPlayer::UsesVehicle(Vehicle *)",
        ),
    ),
    (
        "BlowUp__28VehiclePositionalSoundPlayer",
        Ok(
            "VehiclePositionalSoundPlayer::BlowUp(void)",
        ),
    ),
    (
        "__20AIVehicleSoundPlayer",
        Ok(
            "AIVehicleSoundPlayer::AIVehicleSoundPlayer(void)",
        ),
    ),
    (
        "_$_20AIVehicleSoundPlayer",
        Ok(
            "AIVehicleSoundPlayer::~AIVehicleSoundPlayer(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__20AIVehicleSoundPlayer",
        Ok(
            "AIVehicleSoundPlayer::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "__18TrafficSoundPlayer",
        Ok(
            "TrafficSoundPlayer::TrafficSoundPlayer(void)",
        ),
    ),
    (
        "_$_18TrafficSoundPlayer",
        Ok(
            "TrafficSoundPlayer::~TrafficSoundPlayer(void)",
        ),
    ),
    (
        "InitializeClass__18TrafficSoundPlayerUi",
        Ok(
            "TrafficSoundPlayer::InitializeClass(unsigned int)",
        ),
    ),
    (
        "Activate__18TrafficSoundPlayerP23positionalSoundSettingsPCcP7Vehicle",
        Ok(
            "TrafficSoundPlayer::Activate(positionalSoundSettings *, char const *, Vehicle *)",
        ),
    ),
    (
        "Deactivate__18TrafficSoundPlayer",
        Ok(
            "TrafficSoundPlayer::Deactivate(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__18TrafficSoundPlayer",
        Ok(
            "TrafficSoundPlayer::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "ServiceTimerList__18TrafficSoundPlayer",
        Ok(
            "TrafficSoundPlayer::ServiceTimerList(void)",
        ),
    ),
    (
        "OnTimerDone__18TrafficSoundPlayerUiPv",
        Ok(
            "TrafficSoundPlayer::OnTimerDone(unsigned int, void *)",
        ),
    ),
    (
        "HonkHorn__18TrafficSoundPlayer",
        Ok(
            "TrafficSoundPlayer::HonkHorn(void)",
        ),
    ),
    (
        "AddOverlayClip__18TrafficSoundPlayerP18carSoundParametersPCc",
        Ok(
            "TrafficSoundPlayer::AddOverlayClip(carSoundParameters *, char const *)",
        ),
    ),
    (
        "ToggleOverlayClip__18TrafficSoundPlayerP18carSoundParametersPCc",
        Ok(
            "TrafficSoundPlayer::ToggleOverlayClip(carSoundParameters *, char const *)",
        ),
    ),
    (
        "__23AvatarVehiclePosnPlayer",
        Ok(
            "AvatarVehiclePosnPlayer::AvatarVehiclePosnPlayer(void)",
        ),
    ),
    (
        "_$_23AvatarVehiclePosnPlayer",
        Ok(
            "AvatarVehiclePosnPlayer::~AvatarVehiclePosnPlayer(void)",
        ),
    ),
    (
        "HandleEvent__23AvatarVehiclePosnPlayer9EventEnumPv",
        Ok(
            "AvatarVehiclePosnPlayer::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "StartPositionalIdle__23AvatarVehiclePosnPlayerP7Vehicle",
        Ok(
            "AvatarVehiclePosnPlayer::StartPositionalIdle(Vehicle *)",
        ),
    ),
    (
        "__11ActorPlayer",
        Ok(
            "ActorPlayer::ActorPlayer(void)",
        ),
    ),
    (
        "_$_11ActorPlayer",
        Ok(
            "ActorPlayer::~ActorPlayer(void)",
        ),
    ),
    (
        "GetPosition__11ActorPlayerR14radSoundVector",
        Ok(
            "ActorPlayer::GetPosition(radSoundVector &)",
        ),
    ),
    (
        "GetVelocity__11ActorPlayerR14radSoundVector",
        Ok(
            "ActorPlayer::GetVelocity(radSoundVector &)",
        ),
    ),
    (
        "ServiceOncePerFrame__11ActorPlayer",
        Ok(
            "ActorPlayer::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "OnPlaybackComplete__11ActorPlayer",
        Ok(
            "ActorPlayer::OnPlaybackComplete(void)",
        ),
    ),
    (
        "OnSoundReady__11ActorPlayer",
        Ok(
            "ActorPlayer::OnSoundReady(void)",
        ),
    ),
    (
        "playSound__11ActorPlayerP23positionalSoundSettingsPCcP5Actor",
        Ok(
            "ActorPlayer::playSound(positionalSoundSettings *, char const *, Actor *)",
        ),
    ),
    (
        "deactivate__11ActorPlayer",
        Ok(
            "ActorPlayer::deactivate(void)",
        ),
    ),
    (
        "__15WaspSoundPlayer",
        Ok(
            "WaspSoundPlayer::WaspSoundPlayer(void)",
        ),
    ),
    (
        "_$_15WaspSoundPlayer",
        Ok(
            "WaspSoundPlayer::~WaspSoundPlayer(void)",
        ),
    ),
    (
        "Activate__15WaspSoundPlayerP5Actor",
        Ok(
            "WaspSoundPlayer::Activate(Actor *)",
        ),
    ),
    (
        "HandleEvent__15WaspSoundPlayer9EventEnumPv",
        Ok(
            "WaspSoundPlayer::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnPlaybackComplete__15WaspSoundPlayer",
        Ok(
            "WaspSoundPlayer::OnPlaybackComplete(void)",
        ),
    ),
    (
        "deactivate__15WaspSoundPlayer",
        Ok(
            "WaspSoundPlayer::deactivate(void)",
        ),
    ),
    (
        "safeStop__15WaspSoundPlayer",
        Ok(
            "WaspSoundPlayer::safeStop(void)",
        ),
    ),
    (
        "playWaspSound__15WaspSoundPlayerPCcP5Actor",
        Ok(
            "WaspSoundPlayer::playWaspSound(char const *, Actor *)",
        ),
    ),
    (
        "__19PlatformSoundPlayer",
        Ok(
            "PlatformSoundPlayer::PlatformSoundPlayer(void)",
        ),
    ),
    (
        "_$_19PlatformSoundPlayer",
        Ok(
            "PlatformSoundPlayer::~PlatformSoundPlayer(void)",
        ),
    ),
    (
        "Activate__19PlatformSoundPlayerP13AnimSoundData",
        Ok(
            "PlatformSoundPlayer::Activate(AnimSoundData *)",
        ),
    ),
    (
        "Deactivate__19PlatformSoundPlayer",
        Ok(
            "PlatformSoundPlayer::Deactivate(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__19PlatformSoundPlayer",
        Ok(
            "PlatformSoundPlayer::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "GetPosition__19PlatformSoundPlayerR14radSoundVector",
        Ok(
            "PlatformSoundPlayer::GetPosition(radSoundVector &)",
        ),
    ),
    (
        "GetVelocity__19PlatformSoundPlayerR14radSoundVector",
        Ok(
            "PlatformSoundPlayer::GetVelocity(radSoundVector &)",
        ),
    ),
    (
        "__18AnimObjSoundPlayer",
        Ok(
            "AnimObjSoundPlayer::AnimObjSoundPlayer(void)",
        ),
    ),
    (
        "_$_18AnimObjSoundPlayer",
        Ok(
            "AnimObjSoundPlayer::~AnimObjSoundPlayer(void)",
        ),
    ),
    (
        "Activate__18AnimObjSoundPlayerP16AnimSoundDSGData",
        Ok(
            "AnimObjSoundPlayer::Activate(AnimSoundDSGData *)",
        ),
    ),
    (
        "Deactivate__18AnimObjSoundPlayer",
        Ok(
            "AnimObjSoundPlayer::Deactivate(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__18AnimObjSoundPlayer",
        Ok(
            "AnimObjSoundPlayer::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "GetPosition__18AnimObjSoundPlayerR14radSoundVector",
        Ok(
            "AnimObjSoundPlayer::GetPosition(radSoundVector &)",
        ),
    ),
    (
        "GetVelocity__18AnimObjSoundPlayerR14radSoundVector",
        Ok(
            "AnimObjSoundPlayer::GetVelocity(radSoundVector &)",
        ),
    ),
    (
        "__tf28VehiclePositionalSoundPlayer",
        Ok(
            "VehiclePositionalSoundPlayer type_info function",
        ),
    ),
    (
        "__tf18TrafficSoundPlayer",
        Ok(
            "TrafficSoundPlayer type_info function",
        ),
    ),
    (
        "__tf20AIVehicleSoundPlayer",
        Ok(
            "AIVehicleSoundPlayer type_info function",
        ),
    ),
    (
        "__tf23AvatarVehiclePosnPlayer",
        Ok(
            "AvatarVehiclePosnPlayer type_info function",
        ),
    ),
    (
        "__tf11ActorPlayer",
        Ok(
            "ActorPlayer type_info function",
        ),
    ),
    (
        "__tf15WaspSoundPlayer",
        Ok(
            "WaspSoundPlayer type_info function",
        ),
    ),
    (
        "__tf19PlatformSoundPlayer",
        Ok(
            "PlatformSoundPlayer type_info function",
        ),
    ),
    (
        "__tf18AnimObjSoundPlayer",
        Ok(
            "AnimObjSoundPlayer type_info function",
        ),
    ),
    (
        "__tf18MovingSoundManager",
        Ok(
            "MovingSoundManager type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$_18MovingSoundManager$s_waspUID",
        Ok(
            "global constructors keyed to MovingSoundManager::s_waspUID",
        ),
    ),
    (
        "UnRegisterMappableHandle__FiRi",
        Ok(
            "UnRegisterMappableHandle(int, int &)",
        ),
    ),
    (
        "__6Avatar",
        Ok(
            "Avatar::Avatar(void)",
        ),
    ),
    (
        "_$_6Avatar",
        Ok(
            "Avatar::~Avatar(void)",
        ),
    ),
    (
        "Destroy__6Avatar",
        Ok(
            "Avatar::Destroy(void)",
        ),
    ),
    (
        "SetControllerId__6Avatari",
        Ok(
            "Avatar::SetControllerId(int)",
        ),
    ),
    (
        "GetCharacter__C6Avatar",
        Ok(
            "Avatar::GetCharacter(void) const",
        ),
    ),
    (
        "SetCharacter__6AvatarP9Character",
        Ok(
            "Avatar::SetCharacter(Character *)",
        ),
    ),
    (
        "GetVehicle__C6Avatar",
        Ok(
            "Avatar::GetVehicle(void) const",
        ),
    ),
    (
        "SetVehicle__6AvatarP7Vehicle",
        Ok(
            "Avatar::SetVehicle(Vehicle *)",
        ),
    ),
    (
        "SetInCarController__6Avatar",
        Ok(
            "Avatar::SetInCarController(void)",
        ),
    ),
    (
        "SetCameraTargetToVehicle__6Avatarb",
        Ok(
            "Avatar::SetCameraTargetToVehicle(bool)",
        ),
    ),
    (
        "GetIntoVehicleStart__6AvatarP7Vehicle",
        Ok(
            "Avatar::GetIntoVehicleStart(Vehicle *)",
        ),
    ),
    (
        "GetIntoVehicleEnd__6AvatarP7Vehicle",
        Ok(
            "Avatar::GetIntoVehicleEnd(Vehicle *)",
        ),
    ),
    (
        "GetOutOfVehicleStart__6AvatarP7Vehicle",
        Ok(
            "Avatar::GetOutOfVehicleStart(Vehicle *)",
        ),
    ),
    (
        "SetOutOfCarController__6Avatar",
        Ok(
            "Avatar::SetOutOfCarController(void)",
        ),
    ),
    (
        "SetCameraTargetToCharacter__6Avatarb",
        Ok(
            "Avatar::SetCameraTargetToCharacter(bool)",
        ),
    ),
    (
        "GetOutOfVehicleEnd__6AvatarP7Vehicle",
        Ok(
            "Avatar::GetOutOfVehicleEnd(Vehicle *)",
        ),
    ),
    (
        "IsInCar__C6Avatar",
        Ok(
            "Avatar::IsInCar(void) const",
        ),
    ),
    (
        "GetPosition__C6AvatarRQ218RadicalMathLibrary6Vector",
        Ok(
            "Avatar::GetPosition(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetHeading__C6AvatarRQ218RadicalMathLibrary6Vector",
        Ok(
            "Avatar::GetHeading(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetVelocity__C6AvatarRQ218RadicalMathLibrary6Vector",
        Ok(
            "Avatar::GetVelocity(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetSpeedMps__C6Avatar",
        Ok(
            "Avatar::GetSpeedMps(void) const",
        ),
    ),
    (
        "OnCheatEntered__6Avatar8eCheatIDb",
        Ok(
            "Avatar::OnCheatEntered(eCheatID, bool)",
        ),
    ),
    (
        "Update__6Avatarf",
        Ok(
            "Avatar::Update(float)",
        ),
    ),
    (
        "GetLastPathInfo__6AvatarRQ211RoadManager11PathElementRP11RoadSegmentRfT3",
        Ok(
            "Avatar::GetLastPathInfo(RoadManager::PathElement &, RoadSegment *&, float &, float &)",
        ),
    ),
    (
        "GetRaceInfo__6AvatarRfRiT2",
        Ok(
            "Avatar::GetRaceInfo(float &, int &, int &)",
        ),
    ),
    (
        "SetRaceInfo__6Avatarfii",
        Ok(
            "Avatar::SetRaceInfo(float, int, int)",
        ),
    ),
    (
        "CreateInstance__13AvatarManager",
        Ok(
            "AvatarManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__13AvatarManager",
        Ok(
            "AvatarManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__13AvatarManager",
        Ok(
            "AvatarManager::DestroyInstance(void)",
        ),
    ),
    (
        "__13AvatarManager",
        Ok(
            "AvatarManager::AvatarManager(void)",
        ),
    ),
    (
        "_$_13AvatarManager",
        Ok(
            "AvatarManager::~AvatarManager(void)",
        ),
    ),
    (
        "Destroy__13AvatarManager",
        Ok(
            "AvatarManager::Destroy(void)",
        ),
    ),
    (
        "EnterGame__13AvatarManager",
        Ok(
            "AvatarManager::EnterGame(void)",
        ),
    ),
    (
        "ExitGame__13AvatarManager",
        Ok(
            "AvatarManager::ExitGame(void)",
        ),
    ),
    (
        "HandleEvent__13AvatarManager9EventEnumPv",
        Ok(
            "AvatarManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "GetAvatarForPlayer__13AvatarManageri",
        Ok(
            "AvatarManager::GetAvatarForPlayer(int)",
        ),
    ),
    (
        "PutCharacterInCar__13AvatarManagerP9CharacterP7Vehicle",
        Ok(
            "AvatarManager::PutCharacterInCar(Character *, Vehicle *)",
        ),
    ),
    (
        "PutCharacterOnGround__13AvatarManagerP9CharacterP7Vehicle",
        Ok(
            "AvatarManager::PutCharacterOnGround(Character *, Vehicle *)",
        ),
    ),
    (
        "Update__13AvatarManagerf",
        Ok(
            "AvatarManager::Update(float)",
        ),
    ),
    (
        "FindAvatarForCharacter__13AvatarManagerP9Character",
        Ok(
            "AvatarManager::FindAvatarForCharacter(Character *)",
        ),
    ),
    (
        "GetAvatarForVehicle__13AvatarManagerP7Vehicle",
        Ok(
            "AvatarManager::GetAvatarForVehicle(Vehicle *)",
        ),
    ),
    (
        "IsAvatarGettingInOrOutOfCar__13AvatarManageri",
        Ok(
            "AvatarManager::IsAvatarGettingInOrOutOfCar(int)",
        ),
    ),
    (
        "__15GroundPlanePooli",
        Ok(
            "GroundPlanePool::GroundPlanePool(int)",
        ),
    ),
    (
        "_$_15GroundPlanePool",
        Ok(
            "GroundPlanePool::~GroundPlanePool(void)",
        ),
    ),
    (
        "GetNewGroundPlane__15GroundPlanePoolPQ23sim8SimState",
        Ok(
            "GroundPlanePool::GetNewGroundPlane(sim::SimState *)",
        ),
    ),
    (
        "UpdateGroundPlane__15GroundPlanePooliRQ218RadicalMathLibrary6VectorT2",
        Ok(
            "GroundPlanePool::UpdateGroundPlane(int, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "EnableCollision__15GroundPlanePooli",
        Ok(
            "GroundPlanePool::EnableCollision(int)",
        ),
    ),
    (
        "DisableCollision__15GroundPlanePooli",
        Ok(
            "GroundPlanePool::DisableCollision(int)",
        ),
    ),
    (
        "FreeGroundPlane__15GroundPlanePooli",
        Ok(
            "GroundPlanePool::FreeGroundPlane(int)",
        ),
    ),
    (
        "FreeAllGroundPlanes__15GroundPlanePool",
        Ok(
            "GroundPlanePool::FreeAllGroundPlanes(void)",
        ),
    ),
    (
        "GetSimState__15GroundPlanePooli",
        Ok(
            "GroundPlanePool::GetSimState(int)",
        ),
    ),
    (
        "CreateInstance__14HitnRunManager",
        Ok(
            "HitnRunManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__14HitnRunManager",
        Ok(
            "HitnRunManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__14HitnRunManager",
        Ok(
            "HitnRunManager::DestroyInstance(void)",
        ),
    ),
    (
        "__14HitnRunManager",
        Ok(
            "HitnRunManager::HitnRunManager(void)",
        ),
    ),
    (
        "_$_14HitnRunManager",
        Ok(
            "HitnRunManager::~HitnRunManager(void)",
        ),
    ),
    (
        "Destroy__14HitnRunManager",
        Ok(
            "HitnRunManager::Destroy(void)",
        ),
    ),
    (
        "Init__14HitnRunManager",
        Ok(
            "HitnRunManager::Init(void)",
        ),
    ),
    (
        "ResetState__14HitnRunManager",
        Ok(
            "HitnRunManager::ResetState(void)",
        ),
    ),
    (
        "HandleEvent__14HitnRunManager9EventEnumPv",
        Ok(
            "HitnRunManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Update__14HitnRunManageri",
        Ok(
            "HitnRunManager::Update(int)",
        ),
    ),
    (
        "GetHitnRunValue__C14HitnRunManager",
        Ok(
            "HitnRunManager::GetHitnRunValue(void) const",
        ),
    ),
    (
        "SetHitnRunValue__14HitnRunManagerf",
        Ok(
            "HitnRunManager::SetHitnRunValue(float)",
        ),
    ),
    (
        "HasntBeenHit__14HitnRunManagerPv",
        Ok(
            "HitnRunManager::HasntBeenHit(void *)",
        ),
    ),
    (
        "RegisterHit__14HitnRunManagerPv",
        Ok(
            "HitnRunManager::RegisterHit(void *)",
        ),
    ),
    (
        "DoesObjectGiveCoins__14HitnRunManagerP18CollisionEntityDSG",
        Ok(
            "HitnRunManager::DoesObjectGiveCoins(CollisionEntityDSG *)",
        ),
    ),
    (
        "RegisterVehicleImmunity__14HitnRunManagerP7Vehicle",
        Ok(
            "HitnRunManager::RegisterVehicleImmunity(Vehicle *)",
        ),
    ),
    (
        "__14VehicleCentral",
        Ok(
            "VehicleCentral::VehicleCentral(void)",
        ),
    ),
    (
        "SetupConsoleFunctionsForVehicleTuning__14VehicleCentral",
        Ok(
            "VehicleCentral::SetupConsoleFunctionsForVehicleTuning(void)",
        ),
    ),
    (
        "_$_14VehicleCentral",
        Ok(
            "VehicleCentral::~VehicleCentral(void)",
        ),
    ),
    (
        "GetInstance__14VehicleCentral",
        Ok(
            "VehicleCentral::GetInstance(void)",
        ),
    ),
    (
        "CreateInstance__14VehicleCentral",
        Ok(
            "VehicleCentral::CreateInstance(void)",
        ),
    ),
    (
        "DestroyInstance__14VehicleCentral",
        Ok(
            "VehicleCentral::DestroyInstance(void)",
        ),
    ),
    (
        "PreLoad__14VehicleCentral",
        Ok(
            "VehicleCentral::PreLoad(void)",
        ),
    ),
    (
        "Unload__14VehicleCentral",
        Ok(
            "VehicleCentral::Unload(void)",
        ),
    ),
    (
        "InitVehicle__14VehicleCentralPCcbPc11VehicleTypeQ214VehicleCentral10DriverInitT2T2",
        Ok(
            "VehicleCentral::InitVehicle(char const *, bool, char *, VehicleType, VehicleCentral::DriverInit, bool, bool)",
        ),
    ),
    (
        "AddVehicleToActiveList__14VehicleCentralP7Vehicle",
        Ok(
            "VehicleCentral::AddVehicleToActiveList(Vehicle *)",
        ),
    ),
    (
        "RemoveVehicleFromActiveList__14VehicleCentralP7Vehicle",
        Ok(
            "VehicleCentral::RemoveVehicleFromActiveList(Vehicle *)",
        ),
    ),
    (
        "GetVehicle__C14VehicleCentrali",
        Ok(
            "VehicleCentral::GetVehicle(int) const",
        ),
    ),
    (
        "SetVehicleController__14VehicleCentraliP17VehicleController",
        Ok(
            "VehicleCentral::SetVehicleController(int, VehicleController *)",
        ),
    ),
    (
        "RemoveVehicleController__14VehicleCentrali",
        Ok(
            "VehicleCentral::RemoveVehicleController(int)",
        ),
    ),
    (
        "GetVehicleController__C14VehicleCentrali",
        Ok(
            "VehicleCentral::GetVehicleController(int) const",
        ),
    ),
    (
        "GetVehicleId__C14VehicleCentralP7Vehicleb",
        Ok(
            "VehicleCentral::GetVehicleId(Vehicle *, bool) const",
        ),
    ),
    (
        "PreSubstepUpdate__14VehicleCentralf",
        Ok(
            "VehicleCentral::PreSubstepUpdate(float)",
        ),
    ),
    (
        "Update__14VehicleCentralf",
        Ok(
            "VehicleCentral::Update(float)",
        ),
    ),
    (
        "PostSubstepUpdate__14VehicleCentralf",
        Ok(
            "VehicleCentral::PostSubstepUpdate(float)",
        ),
    ),
    (
        "PreCollisionPrep__14VehicleCentralfb",
        Ok(
            "VehicleCentral::PreCollisionPrep(float, bool)",
        ),
    ),
    (
        "SubmitStatics__14VehicleCentral",
        Ok(
            "VehicleCentral::SubmitStatics(void)",
        ),
    ),
    (
        "SubmitDynamics__14VehicleCentral",
        Ok(
            "VehicleCentral::SubmitDynamics(void)",
        ),
    ),
    (
        "SubmitAnimCollisions__14VehicleCentral",
        Ok(
            "VehicleCentral::SubmitAnimCollisions(void)",
        ),
    ),
    (
        "GetVehicleByName__C14VehicleCentralPCc",
        Ok(
            "VehicleCentral::GetVehicleByName(char const *) const",
        ),
    ),
    (
        "GetVehicleByUID__C14VehicleCentralG13tUidUnaligned",
        Ok(
            "VehicleCentral::GetVehicleByUID(tUidUnaligned) const",
        ),
    ),
    (
        "OnProcessRequestsComplete__14VehicleCentralPv",
        Ok(
            "VehicleCentral::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "ActivateVehicleTriggers__14VehicleCentralb",
        Ok(
            "VehicleCentral::ActivateVehicleTriggers(bool)",
        ),
    ),
    (
        "ClearSuppressedDrivers__14VehicleCentral",
        Ok(
            "VehicleCentral::ClearSuppressedDrivers(void)",
        ),
    ),
    (
        "AddSuppressedDriver__14VehicleCentralPCc",
        Ok(
            "VehicleCentral::AddSuppressedDriver(char const *)",
        ),
    ),
    (
        "RemoveSuppressedDriver__14VehicleCentralPCc",
        Ok(
            "VehicleCentral::RemoveSuppressedDriver(char const *)",
        ),
    ),
    (
        "IsDriverSuppressed__14VehicleCentralPCc",
        Ok(
            "VehicleCentral::IsDriverSuppressed(char const *)",
        ),
    ),
    (
        "SetupDriver__14VehicleCentralP7Vehicle",
        Ok(
            "VehicleCentral::SetupDriver(Vehicle *)",
        ),
    ),
    (
        "IsCarUnderConstruction__14VehicleCentralPC7Vehicle",
        Ok(
            "VehicleCentral::IsCarUnderConstruction(Vehicle const *)",
        ),
    ),
    (
        "GetVehicleAI__14VehicleCentralP7Vehicle",
        Ok(
            "VehicleCentral::GetVehicleAI(Vehicle *)",
        ),
    ),
    (
        "DetachAllCollectibles__14VehicleCentral",
        Ok(
            "VehicleCentral::DetachAllCollectibles(void)",
        ),
    ),
    (
        "__32WorldCollisionSolverAgentManager",
        Ok(
            "WorldCollisionSolverAgentManager::WorldCollisionSolverAgentManager(void)",
        ),
    ),
    (
        "_$_32WorldCollisionSolverAgentManager",
        Ok(
            "WorldCollisionSolverAgentManager::~WorldCollisionSolverAgentManager(void)",
        ),
    ),
    (
        "CollisionEvent__32WorldCollisionSolverAgentManagerPQ23sim8SimStateiT1iRCQ218RadicalMathLibrary6VectorffPPQ23sim15SimulatedObjectT8",
        Ok(
            "WorldCollisionSolverAgentManager::CollisionEvent(sim::SimState *, int, sim::SimState *, int, RadicalMathLibrary::Vector const &, float, float, sim::SimulatedObject **, sim::SimulatedObject **)",
        ),
    ),
    (
        "PreCollisionEvent__32WorldCollisionSolverAgentManagerRQ23sim9Collisioni",
        Ok(
            "WorldCollisionSolverAgentManager::PreCollisionEvent(sim::Collision &, int)",
        ),
    ),
    (
        "TestImpulse__32WorldCollisionSolverAgentManagerRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "WorldCollisionSolverAgentManager::TestImpulse(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "TestCache__32WorldCollisionSolverAgentManagerPQ23sim8SimStatei",
        Ok(
            "WorldCollisionSolverAgentManager::TestCache(sim::SimState *, int)",
        ),
    ),
    (
        "EndObjectCollision__32WorldCollisionSolverAgentManagerPQ23sim8SimStatei",
        Ok(
            "WorldCollisionSolverAgentManager::EndObjectCollision(sim::SimState *, int)",
        ),
    ),
    (
        "ResetCollisionFlags__32WorldCollisionSolverAgentManager",
        Ok(
            "WorldCollisionSolverAgentManager::ResetCollisionFlags(void)",
        ),
    ),
    (
        "_$_11WorldObject",
        Ok(
            "WorldObject::~WorldObject(void)",
        ),
    ),
    (
        "Display__11WorldObject",
        Ok(
            "WorldObject::Display(void)",
        ),
    ),
    (
        "__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::WorldPhysicsManager(void)",
        ),
    ),
    (
        "_$_19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::~WorldPhysicsManager(void)",
        ),
    ),
    (
        "GetInstance__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::GetInstance(void)",
        ),
    ),
    (
        "CreateInstance__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::CreateInstance(void)",
        ),
    ),
    (
        "Init__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::Init(void)",
        ),
    ),
    (
        "ToggleTimerState__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::ToggleTimerState(void)",
        ),
    ),
    (
        "ApplyForceToDynamicsSpherical__19WorldPhysicsManageriRCQ218RadicalMathLibrary6VectorffPQ219WorldPhysicsManager22CollisionEntityDSGList",
        Ok(
            "WorldPhysicsManager::ApplyForceToDynamicsSpherical(int, RadicalMathLibrary::Vector const &, float, float, WorldPhysicsManager::CollisionEntityDSGList *)",
        ),
    ),
    (
        "InitCollisionManager__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::InitCollisionManager(void)",
        ),
    ),
    (
        "EmptyCollisionAreaIndex__19WorldPhysicsManageri",
        Ok(
            "WorldPhysicsManager::EmptyCollisionAreaIndex(int)",
        ),
    ),
    (
        "FreeCollisionAreaIndex__19WorldPhysicsManageri",
        Ok(
            "WorldPhysicsManager::FreeCollisionAreaIndex(int)",
        ),
    ),
    (
        "RemoveFromAnyOtherCurrentDynamicsListAndCollisionArea__19WorldPhysicsManagerP11DynaPhysDSG",
        Ok(
            "WorldPhysicsManager::RemoveFromAnyOtherCurrentDynamicsListAndCollisionArea(DynaPhysDSG *)",
        ),
    ),
    (
        "OnQuitLevel__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::OnQuitLevel(void)",
        ),
    ),
    (
        "GetCameraCollisionAreaIndex__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::GetCameraCollisionAreaIndex(void)",
        ),
    ),
    (
        "GetVehicleCollisionAreaIndex__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::GetVehicleCollisionAreaIndex(void)",
        ),
    ),
    (
        "GetCharacterCollisionAreaIndex__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::GetCharacterCollisionAreaIndex(void)",
        ),
    ),
    (
        "DestroyInstance__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::DestroyInstance(void)",
        ),
    ),
    (
        "Update__19WorldPhysicsManagerUi",
        Ok(
            "WorldPhysicsManager::Update(unsigned int)",
        ),
    ),
    (
        "DebugInfoDisplay__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::DebugInfoDisplay(void)",
        ),
    ),
    (
        "WorldSimSubstepGuts__19WorldPhysicsManagerfb",
        Ok(
            "WorldPhysicsManager::WorldSimSubstepGuts(float, bool)",
        ),
    ),
    (
        "SubmitStaticsPseudoCallback__19WorldPhysicsManagerRQ218RadicalMathLibrary6VectorfiPQ23sim8SimStateb",
        Ok(
            "WorldPhysicsManager::SubmitStaticsPseudoCallback(RadicalMathLibrary::Vector &, float, int, sim::SimState *, bool)",
        ),
    ),
    (
        "SubmitAnimCollisionsPseudoCallback__19WorldPhysicsManagerRQ218RadicalMathLibrary6VectorfiPQ23sim8SimState",
        Ok(
            "WorldPhysicsManager::SubmitAnimCollisionsPseudoCallback(RadicalMathLibrary::Vector &, float, int, sim::SimState *)",
        ),
    ),
    (
        "SubmitAnimCollisionsForUpdateOnly__19WorldPhysicsManagerRQ218RadicalMathLibrary6Vectorfi",
        Ok(
            "WorldPhysicsManager::SubmitAnimCollisionsForUpdateOnly(RadicalMathLibrary::Vector &, float, int)",
        ),
    ),
    (
        "SubmitDynamicsPseudoCallback__19WorldPhysicsManagerRQ218RadicalMathLibrary6VectorfiPQ23sim8SimStateb",
        Ok(
            "WorldPhysicsManager::SubmitDynamicsPseudoCallback(RadicalMathLibrary::Vector &, float, int, sim::SimState *, bool)",
        ),
    ),
    (
        "PurgeDynamics__19WorldPhysicsManageri",
        Ok(
            "WorldPhysicsManager::PurgeDynamics(int)",
        ),
    ),
    (
        "UpdateSimluatingDynamicObjectGroundPlanes__19WorldPhysicsManager",
        Ok(
            "WorldPhysicsManager::UpdateSimluatingDynamicObjectGroundPlanes(void)",
        ),
    ),
    (
        "GetNewGroundPlane__19WorldPhysicsManagerPQ23sim8SimState",
        Ok(
            "WorldPhysicsManager::GetNewGroundPlane(sim::SimState *)",
        ),
    ),
    (
        "FreeGroundPlane__19WorldPhysicsManageri",
        Ok(
            "WorldPhysicsManager::FreeGroundPlane(int)",
        ),
    ),
    (
        "EnableGroundPlaneCollision__19WorldPhysicsManageri",
        Ok(
            "WorldPhysicsManager::EnableGroundPlaneCollision(int)",
        ),
    ),
    (
        "DisableGroundPlaneCollision__19WorldPhysicsManageri",
        Ok(
            "WorldPhysicsManager::DisableGroundPlaneCollision(int)",
        ),
    ),
    (
        "UpdateDynamicObjects__19WorldPhysicsManagerfi",
        Ok(
            "WorldPhysicsManager::UpdateDynamicObjects(float, int)",
        ),
    ),
    (
        "UpdateAnimCollisions__19WorldPhysicsManagerfi",
        Ok(
            "WorldPhysicsManager::UpdateAnimCollisions(float, int)",
        ),
    ),
    (
        "SubmitFencePiecesPseudoCallback__19WorldPhysicsManagerRQ218RadicalMathLibrary6VectorfiPQ23sim8SimStateb",
        Ok(
            "WorldPhysicsManager::SubmitFencePiecesPseudoCallback(RadicalMathLibrary::Vector &, float, int, sim::SimState *, bool)",
        ),
    ),
    (
        "UpdateFencePiece__19WorldPhysicsManagerRQ218RadicalMathLibrary6VectorPQ23sim14ManualSimStateT1N21PQ23sim8SimState",
        Ok(
            "WorldPhysicsManager::UpdateFencePiece(RadicalMathLibrary::Vector &, sim::ManualSimState *, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, sim::SimState *)",
        ),
    ),
    (
        "FenceSanityCheck__19WorldPhysicsManagerUiGQ218RadicalMathLibrary6VectorT2PQ218RadicalMathLibrary6Vector",
        Ok(
            "WorldPhysicsManager::FenceSanityCheck(unsigned int, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "__8HuskPool",
        Ok(
            "HuskPool::HuskPool(void)",
        ),
    ),
    (
        "_$_8HuskPool",
        Ok(
            "HuskPool::~HuskPool(void)",
        ),
    ),
    (
        "Init__8HuskPooli",
        Ok(
            "HuskPool::Init(int)",
        ),
    ),
    (
        "Empty__8HuskPool",
        Ok(
            "HuskPool::Empty(void)",
        ),
    ),
    (
        "RequestHusk__8HuskPool11VehicleTypeP7Vehicle",
        Ok(
            "HuskPool::RequestHusk(VehicleType, Vehicle *)",
        ),
    ),
    (
        "FreeHusk__8HuskPoolP7Vehicle",
        Ok(
            "HuskPool::FreeHusk(Vehicle *)",
        ),
    ),
    (
        "IsHuskType__8HuskPoolQ211VehicleEnum9VehicleID",
        Ok(
            "HuskPool::IsHuskType(VehicleEnum::VehicleID)",
        ),
    ),
    (
        "FindOriginalVehicleGivenHusk__8HuskPoolP7Vehicle",
        Ok(
            "HuskPool::FindOriginalVehicleGivenHusk(Vehicle *)",
        ),
    ),
    (
        "FindHuskGivenOriginalVehicle__8HuskPoolP7Vehicle",
        Ok(
            "HuskPool::FindHuskGivenOriginalVehicle(Vehicle *)",
        ),
    ),
    (
        "WillMakeConvincingHusk__8HuskPoolP7Vehicle",
        Ok(
            "HuskPool::WillMakeConvincingHusk(Vehicle *)",
        ),
    ),
    (
        "__tf6Avatar",
        Ok(
            "Avatar type_info function",
        ),
    ),
    (
        "__tf14VehicleCentral",
        Ok(
            "VehicleCentral type_info function",
        ),
    ),
    (
        "__tf13AvatarManager",
        Ok(
            "AvatarManager type_info function",
        ),
    ),
    (
        "__tf14HitnRunManager",
        Ok(
            "HitnRunManager type_info function",
        ),
    ),
    (
        "__tf32WorldCollisionSolverAgentManager",
        Ok(
            "WorldCollisionSolverAgentManager type_info function",
        ),
    ),
    (
        "__tf11WorldObject",
        Ok(
            "WorldObject type_info function",
        ),
    ),
    (
        "__Q219WorldPhysicsManager11FencePieces",
        Ok(
            "WorldPhysicsManager::FencePieces::FencePieces(void)",
        ),
    ),
    (
        "_GLOBAL_$I$_6Avatar$s_displayCoordinates",
        Ok(
            "global constructors keyed to Avatar::s_displayCoordinates",
        ),
    ),
    (
        "CreateInstance__11CoinManager",
        Ok(
            "CoinManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__11CoinManager",
        Ok(
            "CoinManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__11CoinManager",
        Ok(
            "CoinManager::DestroyInstance(void)",
        ),
    ),
    (
        "__11CoinManager",
        Ok(
            "CoinManager::CoinManager(void)",
        ),
    ),
    (
        "_$_11CoinManager",
        Ok(
            "CoinManager::~CoinManager(void)",
        ),
    ),
    (
        "Destroy__11CoinManager",
        Ok(
            "CoinManager::Destroy(void)",
        ),
    ),
    (
        "Init__11CoinManager",
        Ok(
            "CoinManager::Init(void)",
        ),
    ),
    (
        "HandleEvent__11CoinManager9EventEnumPv",
        Ok(
            "CoinManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "GetInactiveCoin__11CoinManager",
        Ok(
            "CoinManager::GetInactiveCoin(void)",
        ),
    ),
    (
        "SpawnCoins__11CoinManageriRCQ218RadicalMathLibrary6VectorPCQ218RadicalMathLibrary6Vectorb",
        Ok(
            "CoinManager::SpawnCoins(int, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const *, bool)",
        ),
    ),
    (
        "SpawnCoins__11CoinManageriRCQ218RadicalMathLibrary6VectorfPCQ218RadicalMathLibrary6Vectorb",
        Ok(
            "CoinManager::SpawnCoins(int, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const *, bool)",
        ),
    ),
    (
        "SpawnInstantCoins__11CoinManageriRCQ218RadicalMathLibrary6Vector",
        Ok(
            "CoinManager::SpawnInstantCoins(int, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SpawnCoin__11CoinManagerRQ211CoinManager10ActiveCoinRCQ218RadicalMathLibrary6VectorfPCQ218RadicalMathLibrary6Vectorb",
        Ok(
            "CoinManager::SpawnCoin(CoinManager::ActiveCoin &, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const *, bool)",
        ),
    ),
    (
        "AddFlyDownCoin__11CoinManager",
        Ok(
            "CoinManager::AddFlyDownCoin(void)",
        ),
    ),
    (
        "Update__11CoinManageri",
        Ok(
            "CoinManager::Update(int)",
        ),
    ),
    (
        "OnVehicleDestroyed__11CoinManagerP7Vehicle",
        Ok(
            "CoinManager::OnVehicleDestroyed(Vehicle *)",
        ),
    ),
    (
        "SetCoinDrawable__11CoinManagerP9tDrawable",
        Ok(
            "CoinManager::SetCoinDrawable(tDrawable *)",
        ),
    ),
    (
        "CheckCollection__11CoinManagerRQ211CoinManager10ActiveCoinRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "CoinManager::CheckCollection(CoinManager::ActiveCoin &, RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "CollectCoins__11CoinManageri",
        Ok(
            "CoinManager::CollectCoins(int)",
        ),
    ),
    (
        "LoseCoins__11CoinManageriPCQ218RadicalMathLibrary6Vector",
        Ok(
            "CoinManager::LoseCoins(int, RadicalMathLibrary::Vector const *)",
        ),
    ),
    (
        "GetBankValue__C11CoinManager",
        Ok(
            "CoinManager::GetBankValue(void) const",
        ),
    ),
    (
        "AdjustBankValue__11CoinManageri",
        Ok(
            "CoinManager::AdjustBankValue(int)",
        ),
    ),
    (
        "AddWorldCoin__11CoinManagerRCQ218RadicalMathLibrary6VectorG13tUidUnaligned",
        Ok(
            "CoinManager::AddWorldCoin(RadicalMathLibrary::Vector const &, tUidUnaligned)",
        ),
    ),
    (
        "RemoveWorldCoins__11CoinManagerG13tUidUnaligned",
        Ok(
            "CoinManager::RemoveWorldCoins(tUidUnaligned)",
        ),
    ),
    (
        "UpdateCollecting__11CoinManagerRQ211CoinManager10ActiveCoinRCQ218RadicalMathLibrary6Vector",
        Ok(
            "CoinManager::UpdateCollecting(CoinManager::ActiveCoin &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "UpdateSpawning__11CoinManagerRQ211CoinManager10ActiveCoinRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "CoinManager::UpdateSpawning(CoinManager::ActiveCoin &, RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "AddGlint__11CoinManagerRQ211CoinManager10ActiveCoinRCQ218RadicalMathLibrary6VectorN22",
        Ok(
            "CoinManager::AddGlint(CoinManager::ActiveCoin &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "UpdateHUDFlying__11CoinManagerRQ211CoinManager10ActiveCoin",
        Ok(
            "CoinManager::UpdateHUDFlying(CoinManager::ActiveCoin &)",
        ),
    ),
    (
        "ClearHUDCoins__11CoinManager",
        Ok(
            "CoinManager::ClearHUDCoins(void)",
        ),
    ),
    (
        "Render__11CoinManager",
        Ok(
            "CoinManager::Render(void)",
        ),
    ),
    (
        "SetHUDCoin__11CoinManageriib",
        Ok(
            "CoinManager::SetHUDCoin(int, int, bool)",
        ),
    ),
    (
        "OnCheatEntered__11CoinManager8eCheatIDb",
        Ok(
            "CoinManager::OnCheatEntered(eCheatID, bool)",
        ),
    ),
    (
        "HUDRender__11CoinManager",
        Ok(
            "CoinManager::HUDRender(void)",
        ),
    ),
    (
        "CreateInstance__7SparkleUcUs",
        Ok(
            "Sparkle::CreateInstance(unsigned char, unsigned short)",
        ),
    ),
    (
        "GetInstance__7Sparkle",
        Ok(
            "Sparkle::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__7Sparkle",
        Ok(
            "Sparkle::DestroyInstance(void)",
        ),
    ),
    (
        "__7SparkleUcUs",
        Ok(
            "Sparkle::Sparkle(unsigned char, unsigned short)",
        ),
    ),
    (
        "_$_7Sparkle",
        Ok(
            "Sparkle::~Sparkle(void)",
        ),
    ),
    (
        "Init__7Sparkle",
        Ok(
            "Sparkle::Init(void)",
        ),
    ),
    (
        "Destroy__7Sparkle",
        Ok(
            "Sparkle::Destroy(void)",
        ),
    ),
    (
        "SetTexture__7SparkleUcP8tTexture",
        Ok(
            "Sparkle::SetTexture(unsigned char, tTexture *)",
        ),
    ),
    (
        "GetInactiveSparkle__7Sparkle",
        Ok(
            "Sparkle::GetInactiveSparkle(void)",
        ),
    ),
    (
        "AddSparkle__7SparkleRCQ218RadicalMathLibrary6VectorffT1Q27Sparkle14eSparkleEffect",
        Ok(
            "Sparkle::AddSparkle(RadicalMathLibrary::Vector const &, float, float, RadicalMathLibrary::Vector const &, Sparkle::eSparkleEffect)",
        ),
    ),
    (
        "AddGagSparkle__7SparkleRCQ218RadicalMathLibrary6VectorffUi",
        Ok(
            "Sparkle::AddGagSparkle(RadicalMathLibrary::Vector const &, float, float, unsigned int)",
        ),
    ),
    (
        "AddSparks__7SparkleRCQ218RadicalMathLibrary6VectorT1f",
        Ok(
            "Sparkle::AddSparks(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "AddBottomOut__7SparkleRCQ218RadicalMathLibrary6Vector",
        Ok(
            "Sparkle::AddBottomOut(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "AddDash__7SparkleRCQ218RadicalMathLibrary6VectorT1f",
        Ok(
            "Sparkle::AddDash(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "AddLanding__7SparkleRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "Sparkle::AddLanding(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "AddShockRing__7SparkleRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "Sparkle::AddShockRing(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "AddPaintChips__7SparkleRCQ218RadicalMathLibrary6VectorT1G10pddiColourf",
        Ok(
            "Sparkle::AddPaintChips(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, pddiColour, float)",
        ),
    ),
    (
        "AddStars__7SparkleRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "Sparkle::AddStars(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "AddSmoke__7SparkleRCQ218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary6VectorT2f",
        Ok(
            "Sparkle::AddSmoke(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "Update__7SparkleUi",
        Ok(
            "Sparkle::Update(unsigned int)",
        ),
    ),
    (
        "__Q27Sparkle13ActiveSparkle",
        Ok(
            "Sparkle::ActiveSparkle::ActiveSparkle(void)",
        ),
    ),
    (
        "Render__7SparkleQ27Sparkle18eSparkleRenderMode",
        Ok(
            "Sparkle::Render(Sparkle::eSparkleRenderMode)",
        ),
    ),
    (
        "HUDRender__7Sparkle",
        Ok(
            "Sparkle::HUDRender(void)",
        ),
    ),
    (
        "__tf11CoinManager",
        Ok(
            "CoinManager type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$_11CoinManager$spCoinManager",
        Ok(
            "global constructors keyed to CoinManager::spCoinManager",
        ),
    ),
    (
        "_GLOBAL_$D$_11CoinManager$spCoinManager",
        Ok(
            "global destructors keyed to CoinManager::spCoinManager",
        ),
    ),
    (
        "__6Wander",
        Ok(
            "Wander::Wander(void)",
        ),
    ),
    (
        "_$_6Wander",
        Ok(
            "Wander::~Wander(void)",
        ),
    ),
    (
        "Tick__6WanderR9Character",
        Ok(
            "Wander::Tick(Character &)",
        ),
    ),
    (
        "Update__21AICharacterControllerf",
        Ok(
            "AICharacterController::Update(float)",
        ),
    ),
    (
        "GetValue__C21AICharacterControlleri",
        Ok(
            "AICharacterController::GetValue(int) const",
        ),
    ),
    (
        "IsButtonDown__C21AICharacterControlleri",
        Ok(
            "AICharacterController::IsButtonDown(int) const",
        ),
    ),
    (
        "__11NPCharacter",
        Ok(
            "NPCharacter::NPCharacter(void)",
        ),
    ),
    (
        "_$_11NPCharacter",
        Ok(
            "NPCharacter::~NPCharacter(void)",
        ),
    ),
    (
        "OnUpdateRoot__11NPCharacterf",
        Ok(
            "NPCharacter::OnUpdateRoot(float)",
        ),
    ),
    (
        "OnPostSimUpdate__11NPCharacterf",
        Ok(
            "NPCharacter::OnPostSimUpdate(float)",
        ),
    ),
    (
        "__9Character",
        Ok(
            "Character::Character(void)",
        ),
    ),
    (
        "Init__9Character",
        Ok(
            "Character::Init(void)",
        ),
    ),
    (
        "InitGroundPlane__9Character",
        Ok(
            "Character::InitGroundPlane(void)",
        ),
    ),
    (
        "SetPuppet__9CharacterPQ26choreo6Puppet",
        Ok(
            "Character::SetPuppet(choreo::Puppet *)",
        ),
    ),
    (
        "SetYAdjust__9Characterf",
        Ok(
            "Character::SetYAdjust(float)",
        ),
    ),
    (
        "ResetSpeed__9Character",
        Ok(
            "Character::ResetSpeed(void)",
        ),
    ),
    (
        "Kick__9Character",
        Ok(
            "Character::Kick(void)",
        ),
    ),
    (
        "Slam__9Character",
        Ok(
            "Character::Slam(void)",
        ),
    ),
    (
        "RelocateAndReset__9CharacterRCQ218RadicalMathLibrary6VectorfbT3",
        Ok(
            "Character::RelocateAndReset(RadicalMathLibrary::Vector const &, float, bool, bool)",
        ),
    ),
    (
        "AddToPhysics__9Character",
        Ok(
            "Character::AddToPhysics(void)",
        ),
    ),
    (
        "RemoveFromPhysics__9Character",
        Ok(
            "Character::RemoveFromPhysics(void)",
        ),
    ),
    (
        "AddToPhysics__11NPCharacter",
        Ok(
            "NPCharacter::AddToPhysics(void)",
        ),
    ),
    (
        "RemoveFromPhysics__11NPCharacter",
        Ok(
            "NPCharacter::RemoveFromPhysics(void)",
        ),
    ),
    (
        "_$_9Character",
        Ok(
            "Character::~Character(void)",
        ),
    ),
    (
        "UpdateParentTransform__9Characterf",
        Ok(
            "Character::UpdateParentTransform(float)",
        ),
    ),
    (
        "SetParentTransform__9CharacterRCQ218RadicalMathLibrary6Matrixf",
        Ok(
            "Character::SetParentTransform(RadicalMathLibrary::Matrix const &, float)",
        ),
    ),
    (
        "UpdateGroundPlane__9Characterf",
        Ok(
            "Character::UpdateGroundPlane(float)",
        ),
    ),
    (
        "PreSimUpdate__9Characterf",
        Ok(
            "Character::PreSimUpdate(float)",
        ),
    ),
    (
        "ResetCollisions__9Character",
        Ok(
            "Character::ResetCollisions(void)",
        ),
    ),
    (
        "UpdateController__9CharacterRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "Character::UpdateController(RadicalMathLibrary::Vector &, float)",
        ),
    ),
    (
        "UpdateDesiredDirAndSpeed__9CharacterRCQ218RadicalMathLibrary6Vector",
        Ok(
            "Character::UpdateDesiredDirAndSpeed(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "UpdateRoot__9Characterf",
        Ok(
            "Character::UpdateRoot(float)",
        ),
    ),
    (
        "OnUpdateRoot__9Characterf",
        Ok(
            "Character::OnUpdateRoot(float)",
        ),
    ),
    (
        "UpdatePuppet__9Characterf",
        Ok(
            "Character::UpdatePuppet(float)",
        ),
    ),
    (
        "TestInAnyonesFrustrum__9Character",
        Ok(
            "Character::TestInAnyonesFrustrum(void)",
        ),
    ),
    (
        "PostSimUpdate__9Characterf",
        Ok(
            "Character::PostSimUpdate(float)",
        ),
    ),
    (
        "ResolveCollisions__9Character",
        Ok(
            "Character::ResolveCollisions(void)",
        ),
    ),
    (
        "UpdateFootPlant__9Character",
        Ok(
            "Character::UpdateFootPlant(void)",
        ),
    ),
    (
        "OnPostSimUpdate__9Characterf",
        Ok(
            "Character::OnPostSimUpdate(float)",
        ),
    ),
    (
        "UpdateShock__9Characterf",
        Ok(
            "Character::UpdateShock(float)",
        ),
    ),
    (
        "AddToWorldScene__9Character",
        Ok(
            "Character::AddToWorldScene(void)",
        ),
    ),
    (
        "RemoveFromWorldScene__9Character",
        Ok(
            "Character::RemoveFromWorldScene(void)",
        ),
    ),
    (
        "MoveInWorldScene__9Character",
        Ok(
            "Character::MoveInWorldScene(void)",
        ),
    ),
    (
        "UpdateSimState__9Characterf",
        Ok(
            "Character::UpdateSimState(float)",
        ),
    ),
    (
        "UpdateBBox__9CharacterRQ218RadicalMathLibrary5Box3D",
        Ok(
            "Character::UpdateBBox(RadicalMathLibrary::Box3D &)",
        ),
    ),
    (
        "PreReactToCollision__9CharacterPQ23sim8SimStateRQ23sim9Collision",
        Ok(
            "Character::PreReactToCollision(sim::SimState *, sim::Collision &)",
        ),
    ),
    (
        "PostReactToCollision__9CharacterRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "Character::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "SolveCollisionWithStatic__9CharacterRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "Character::SolveCollisionWithStatic(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "GetMaxSpeed__C9Character",
        Ok(
            "Character::GetMaxSpeed(void) const",
        ),
    ),
    (
        "GetTerrainIntersect__C9CharacterRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "Character::GetTerrainIntersect(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetTerrainType__C9CharacterR12eTerrainTypeRb",
        Ok(
            "Character::GetTerrainType(eTerrainType &, bool &) const",
        ),
    ),
    (
        "SnapToGround__9Character",
        Ok(
            "Character::SnapToGround(void)",
        ),
    ),
    (
        "UpdateGroundHeight__9Character",
        Ok(
            "Character::UpdateGroundHeight(void)",
        ),
    ),
    (
        "pPosition__9Character",
        Ok(
            "Character::pPosition(void)",
        ),
    ),
    (
        "rPosition__9Character",
        Ok(
            "Character::rPosition(void)",
        ),
    ),
    (
        "GetPosition__9CharacterPQ218RadicalMathLibrary6Vector",
        Ok(
            "Character::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetFadeAlpha__9Characteri",
        Ok(
            "Character::SetFadeAlpha(int)",
        ),
    ),
    (
        "CastsShadow__9Character",
        Ok(
            "Character::CastsShadow(void)",
        ),
    ),
    (
        "DisplayShadow__9Character",
        Ok(
            "Character::DisplayShadow(void)",
        ),
    ),
    (
        "DisplaySimpleShadow__9Character",
        Ok(
            "Character::DisplaySimpleShadow(void)",
        ),
    ),
    (
        "CanPlayAnimation__C9CharacterRC5tName",
        Ok(
            "Character::CanPlayAnimation(tName const &) const",
        ),
    ),
    (
        "CanStandOnCollisionNormal__C9CharacterRCQ218RadicalMathLibrary6Vector",
        Ok(
            "Character::CanStandOnCollisionNormal(RadicalMathLibrary::Vector const &) const",
        ),
    ),
    (
        "FindStandingVolume__9CharacterRCQ218RadicalMathLibrary6VectorPQ23sim15CollisionVolumeRQ218RadicalMathLibrary6VectorRf",
        Ok(
            "Character::FindStandingVolume(RadicalMathLibrary::Vector const &, sim::CollisionVolume *, RadicalMathLibrary::Vector &, float &)",
        ),
    ),
    (
        "GetCollisionHeight__9CharacterRCQ218RadicalMathLibrary6VectorT1RQ218RadicalMathLibrary6VectorT3",
        Ok(
            "Character::GetCollisionHeight(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "SetStandingJoint__9CharacterPCQ25poser5Joint",
        Ok(
            "Character::SetStandingJoint(poser::Joint const *)",
        ),
    ),
    (
        "SetGroundPoint__9CharacterRCQ218RadicalMathLibrary6Vector",
        Ok(
            "Character::SetGroundPoint(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "UpdateTransformToLoco__9Character",
        Ok(
            "Character::UpdateTransformToLoco(void)",
        ),
    ),
    (
        "AssignCollisionAreaIndex__9Character",
        Ok(
            "Character::AssignCollisionAreaIndex(void)",
        ),
    ),
    (
        "UpdateTransformToInCar__9Character",
        Ok(
            "Character::UpdateTransformToInCar(void)",
        ),
    ),
    (
        "SetInCar__9Characterb",
        Ok(
            "Character::SetInCar(bool)",
        ),
    ),
    (
        "GetActionButtonHandler__C9Character",
        Ok(
            "Character::GetActionButtonHandler(void) const",
        ),
    ),
    (
        "AddActionButtonHandler__9CharacterPQ212ActionButton13ButtonHandler",
        Ok(
            "Character::AddActionButtonHandler(ActionButton::ButtonHandler *)",
        ),
    ),
    (
        "RemoveActionButtonHandler__9CharacterPQ212ActionButton13ButtonHandler",
        Ok(
            "Character::RemoveActionButtonHandler(ActionButton::ButtonHandler *)",
        ),
    ),
    (
        "TestPriority__9CharacterPQ212ActionButton13ButtonHandlerT1",
        Ok(
            "Character::TestPriority(ActionButton::ButtonHandler *, ActionButton::ButtonHandler *)",
        ),
    ),
    (
        "ClearAllActionButtonHandlers__9Character",
        Ok(
            "Character::ClearAllActionButtonHandlers(void)",
        ),
    ),
    (
        "__Q29Character4Prop",
        Ok(
            "Character::Prop::Prop(void)",
        ),
    ),
    (
        "_$_Q29Character4Prop",
        Ok(
            "Character::Prop::~Prop(void)",
        ),
    ),
    (
        "TouchProp__9CharacterP15InstDynaPhysDSG",
        Ok(
            "Character::TouchProp(InstDynaPhysDSG *)",
        ),
    ),
    (
        "AttachProp__9CharacterP15InstDynaPhysDSG",
        Ok(
            "Character::AttachProp(InstDynaPhysDSG *)",
        ),
    ),
    (
        "UpdatePhysicsObjects__9Characterfi",
        Ok(
            "Character::UpdatePhysicsObjects(float, int)",
        ),
    ),
    (
        "SubmitStatics__9Character",
        Ok(
            "Character::SubmitStatics(void)",
        ),
    ),
    (
        "SubmitAnimCollisions__9Character",
        Ok(
            "Character::SubmitAnimCollisions(void)",
        ),
    ),
    (
        "SubmitDynamics__9Character",
        Ok(
            "Character::SubmitDynamics(void)",
        ),
    ),
    (
        "PosInFrustrumOfPlayer__9CharacterRCQ218RadicalMathLibrary6Vectori",
        Ok(
            "Character::PosInFrustrumOfPlayer(RadicalMathLibrary::Vector const &, int)",
        ),
    ),
    (
        "TestInFrustrumOfPlayer__9Characteri",
        Ok(
            "Character::TestInFrustrumOfPlayer(int)",
        ),
    ),
    (
        "SetShadowColour__9CharacterG10pddiColour",
        Ok(
            "Character::SetShadowColour(pddiColour)",
        ),
    ),
    (
        "GetShadowColour__9Character",
        Ok(
            "Character::GetShadowColour(void)",
        ),
    ),
    (
        "SetSwatch__9Characteri",
        Ok(
            "Character::SetSwatch(int)",
        ),
    ),
    (
        "SetDrawable__9CharacterP19CharacterRenderable",
        Ok(
            "Character::SetDrawable(CharacterRenderable *)",
        ),
    ),
    (
        "Shock__9Characterf",
        Ok(
            "Character::Shock(float)",
        ),
    ),
    (
        "DoKickwave__9Character",
        Ok(
            "Character::DoKickwave(void)",
        ),
    ),
    (
        "OnTransitToAICtrl__9Character",
        Ok(
            "Character::OnTransitToAICtrl(void)",
        ),
    ),
    (
        "Display__9Character",
        Ok(
            "Character::Display(void)",
        ),
    ),
    (
        "SetAmbient__9CharacterPCcf",
        Ok(
            "Character::SetAmbient(char const *, float)",
        ),
    ),
    (
        "EnableAmbientDialogue__9Characterb",
        Ok(
            "Character::EnableAmbientDialogue(bool)",
        ),
    ),
    (
        "ResetAmbientPosition__9Character",
        Ok(
            "Character::ResetAmbientPosition(void)",
        ),
    ),
    (
        "UpdatePhysicsObjects__11NPCharacterfi",
        Ok(
            "NPCharacter::UpdatePhysicsObjects(float, int)",
        ),
    ),
    (
        "AssignCollisionAreaIndex__11NPCharacter",
        Ok(
            "NPCharacter::AssignCollisionAreaIndex(void)",
        ),
    ),
    (
        "SubmitStatics__11NPCharacter",
        Ok(
            "NPCharacter::SubmitStatics(void)",
        ),
    ),
    (
        "SubmitDynamics__11NPCharacter",
        Ok(
            "NPCharacter::SubmitDynamics(void)",
        ),
    ),
    (
        "OnTransitToAICtrl__11NPCharacter",
        Ok(
            "NPCharacter::OnTransitToAICtrl(void)",
        ),
    ),
    (
        "ApplyForce__11NPCharacterRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "NPCharacter::ApplyForce(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "ApplyKickForce__11NPCharacterRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "NPCharacter::ApplyKickForce(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "__19CharacterController",
        Ok(
            "CharacterController::CharacterController(void)",
        ),
    ),
    (
        "_$_19CharacterController",
        Ok(
            "CharacterController::~CharacterController(void)",
        ),
    ),
    (
        "GetCharacter__C19CharacterController",
        Ok(
            "CharacterController::GetCharacter(void) const",
        ),
    ),
    (
        "SetCharacter__19CharacterControllerP9Character",
        Ok(
            "CharacterController::SetCharacter(Character *)",
        ),
    ),
    (
        "__18PhysicalController",
        Ok(
            "PhysicalController::PhysicalController(void)",
        ),
    ),
    (
        "_$_18PhysicalController",
        Ok(
            "PhysicalController::~PhysicalController(void)",
        ),
    ),
    (
        "SetCharacterMappable__18PhysicalControllerP17CharacterMappable",
        Ok(
            "PhysicalController::SetCharacterMappable(CharacterMappable *)",
        ),
    ),
    (
        "GetDirection__18PhysicalControllerRQ218RadicalMathLibrary6Vector",
        Ok(
            "PhysicalController::GetDirection(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "GetValue__C18PhysicalControlleri",
        Ok(
            "PhysicalController::GetValue(int) const",
        ),
    ),
    (
        "IsButtonDown__C18PhysicalControlleri",
        Ok(
            "PhysicalController::IsButtonDown(int) const",
        ),
    ),
    (
        "TimeSinceChange__C18PhysicalControlleri",
        Ok(
            "PhysicalController::TimeSinceChange(int) const",
        ),
    ),
    (
        "GetCharacterMappable__C18PhysicalController",
        Ok(
            "PhysicalController::GetCharacterMappable(void) const",
        ),
    ),
    (
        "__33CameraRelativeCharacterController",
        Ok(
            "CameraRelativeCharacterController::CameraRelativeCharacterController(void)",
        ),
    ),
    (
        "Create__33CameraRelativeCharacterControllerP9CharacterP17CharacterMappable",
        Ok(
            "CameraRelativeCharacterController::Create(Character *, CharacterMappable *)",
        ),
    ),
    (
        "_$_33CameraRelativeCharacterController",
        Ok(
            "CameraRelativeCharacterController::~CameraRelativeCharacterController(void)",
        ),
    ),
    (
        "SetIntention__33CameraRelativeCharacterControllerQ219CharacterController10eIntention",
        Ok(
            "CameraRelativeCharacterController::SetIntention(CharacterController::eIntention)",
        ),
    ),
    (
        "GetDirection__33CameraRelativeCharacterControllerRQ218RadicalMathLibrary6Vector",
        Ok(
            "CameraRelativeCharacterController::GetDirection(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "SetCamera__33CameraRelativeCharacterControllerP7tCamera",
        Ok(
            "CameraRelativeCharacterController::SetCamera(tCamera *)",
        ),
    ),
    (
        "HandleEvent__33CameraRelativeCharacterControlleriPv",
        Ok(
            "CameraRelativeCharacterController::HandleEvent(int, void *)",
        ),
    ),
    (
        "__13NPCController",
        Ok(
            "NPCController::NPCController(void)",
        ),
    ),
    (
        "_$_13NPCController",
        Ok(
            "NPCController::~NPCController(void)",
        ),
    ),
    (
        "SetCharacter__13NPCControllerP9Character",
        Ok(
            "NPCController::SetCharacter(Character *)",
        ),
    ),
    (
        "AddNPCWaypoint__13NPCControllerRCQ218RadicalMathLibrary6Vector",
        Ok(
            "NPCController::AddNPCWaypoint(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "IncitePanic__13NPCController",
        Ok(
            "NPCController::IncitePanic(void)",
        ),
    ),
    (
        "QuellPanic__13NPCController",
        Ok(
            "NPCController::QuellPanic(void)",
        ),
    ),
    (
        "Update__13NPCControllerf",
        Ok(
            "NPCController::Update(float)",
        ),
    ),
    (
        "GetFollowPathSpeedMps__C13NPCController",
        Ok(
            "NPCController::GetFollowPathSpeedMps(void) const",
        ),
    ),
    (
        "FollowPath__13NPCControllerf",
        Ok(
            "NPCController::FollowPath(float)",
        ),
    ),
    (
        "TeleportToPath__13NPCController",
        Ok(
            "NPCController::TeleportToPath(void)",
        ),
    ),
    (
        "DetectAndDodge__13NPCControllerf",
        Ok(
            "NPCController::DetectAndDodge(float)",
        ),
    ),
    (
        "TraversePath__13NPCControllerf",
        Ok(
            "NPCController::TraversePath(float)",
        ),
    ),
    (
        "OnReachedWaypoint__13NPCController",
        Ok(
            "NPCController::OnReachedWaypoint(void)",
        ),
    ),
    (
        "Detect__13NPCControllerfRf",
        Ok(
            "NPCController::Detect(float, float &)",
        ),
    ),
    (
        "PerformCringe__13NPCController",
        Ok(
            "NPCController::PerformCringe(void)",
        ),
    ),
    (
        "PerformDodge__13NPCController",
        Ok(
            "NPCController::PerformDodge(void)",
        ),
    ),
    (
        "GetDirection__13NPCControllerRQ218RadicalMathLibrary6Vector",
        Ok(
            "NPCController::GetDirection(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "TransitToState__13NPCControllerQ213NPCController5State",
        Ok(
            "NPCController::TransitToState(NPCController::State)",
        ),
    ),
    (
        "GetAllowedPathOffset__13NPCControllerRQ218RadicalMathLibrary6Vector",
        Ok(
            "NPCController::GetAllowedPathOffset(RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "OnOffPath__13NPCControllerGQ218RadicalMathLibrary6VectorT1",
        Ok(
            "NPCController::OnOffPath(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "StartTalking__13NPCController",
        Ok(
            "NPCController::StartTalking(void)",
        ),
    ),
    (
        "StopTalking__13NPCController",
        Ok(
            "NPCController::StopTalking(void)",
        ),
    ),
    (
        "SetTempWaypont__13NPCControllerRCQ218RadicalMathLibrary6Vector",
        Ok(
            "NPCController::SetTempWaypont(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "ClearTempWaypoint__13NPCController",
        Ok(
            "NPCController::ClearTempWaypoint(void)",
        ),
    ),
    (
        "CreateInstance__16CharacterManager",
        Ok(
            "CharacterManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__16CharacterManager",
        Ok(
            "CharacterManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__16CharacterManager",
        Ok(
            "CharacterManager::DestroyInstance(void)",
        ),
    ),
    (
        "__16CharacterManager",
        Ok(
            "CharacterManager::CharacterManager(void)",
        ),
    ),
    (
        "_$_16CharacterManager",
        Ok(
            "CharacterManager::~CharacterManager(void)",
        ),
    ),
    (
        "PreLoad__16CharacterManager",
        Ok(
            "CharacterManager::PreLoad(void)",
        ),
    ),
    (
        "Destroy__16CharacterManagerb",
        Ok(
            "CharacterManager::Destroy(bool)",
        ),
    ),
    (
        "RemoveCharacter__16CharacterManagerP9Character",
        Ok(
            "CharacterManager::RemoveCharacter(Character *)",
        ),
    ),
    (
        "SetGarbage__16CharacterManagerP9Characterb",
        Ok(
            "CharacterManager::SetGarbage(Character *, bool)",
        ),
    ),
    (
        "GarbageCollectModel__16CharacterManagerUi",
        Ok(
            "CharacterManager::GarbageCollectModel(unsigned int)",
        ),
    ),
    (
        "GarbageCollectAnim__16CharacterManagerUi",
        Ok(
            "CharacterManager::GarbageCollectAnim(unsigned int)",
        ),
    ),
    (
        "IsModelLoaded__16CharacterManagerPCc",
        Ok(
            "CharacterManager::IsModelLoaded(char const *)",
        ),
    ),
    (
        "LoadModel__16CharacterManagerPCcPQ214LoadingManager23ProcessRequestsCallbackPv",
        Ok(
            "CharacterManager::LoadModel(char const *, LoadingManager::ProcessRequestsCallback *, void *)",
        ),
    ),
    (
        "LoadAnimation__16CharacterManagerPCc",
        Ok(
            "CharacterManager::LoadAnimation(char const *)",
        ),
    ),
    (
        "FindLoad__16CharacterManagerPQ216CharacterManager4LoadG13tUidUnaligned",
        Ok(
            "CharacterManager::FindLoad(CharacterManager::Load *, tUidUnaligned)",
        ),
    ),
    (
        "AllocLoad__16CharacterManagerPQ216CharacterManager4LoadG13tUidUnaligned",
        Ok(
            "CharacterManager::AllocLoad(CharacterManager::Load *, tUidUnaligned)",
        ),
    ),
    (
        "GetState__16CharacterManagerPQ216CharacterManager4LoadG13tUidUnaligned",
        Ok(
            "CharacterManager::GetState(CharacterManager::Load *, tUidUnaligned)",
        ),
    ),
    (
        "FillLoadData__16CharacterManagerRQ216CharacterManager17CharacterLoadDataPCcT2",
        Ok(
            "CharacterManager::FillLoadData(CharacterManager::CharacterLoadData &, char const *, char const *)",
        ),
    ),
    (
        "AddCharacter__16CharacterManagerQ216CharacterManager13CharacterTypePCcN32",
        Ok(
            "CharacterManager::AddCharacter(CharacterManager::CharacterType, char const *, char const *, char const *, char const *)",
        ),
    ),
    (
        "AddCharacterDeferedLoad__16CharacterManagerQ216CharacterManager13CharacterTypePCcN32",
        Ok(
            "CharacterManager::AddCharacterDeferedLoad(CharacterManager::CharacterType, char const *, char const *, char const *, char const *)",
        ),
    ),
    (
        "SwapData__16CharacterManagerP9CharacterPCcT2",
        Ok(
            "CharacterManager::SwapData(Character *, char const *, char const *)",
        ),
    ),
    (
        "InternalSwapData__16CharacterManagerP9CharacterPCcT2",
        Ok(
            "CharacterManager::InternalSwapData(Character *, char const *, char const *)",
        ),
    ),
    (
        "SetupCharacter__16CharacterManagerRQ216CharacterManager17CharacterLoadDataP9Character",
        Ok(
            "CharacterManager::SetupCharacter(CharacterManager::CharacterLoadData &, Character *)",
        ),
    ),
    (
        "GarbageCollect__16CharacterManagerb",
        Ok(
            "CharacterManager::GarbageCollect(bool)",
        ),
    ),
    (
        "PreSimUpdate__16CharacterManagerf",
        Ok(
            "CharacterManager::PreSimUpdate(float)",
        ),
    ),
    (
        "PostSimUpdate__16CharacterManagerf",
        Ok(
            "CharacterManager::PostSimUpdate(float)",
        ),
    ),
    (
        "Update__16CharacterManagerf",
        Ok(
            "CharacterManager::Update(float)",
        ),
    ),
    (
        "PreSubstepUpdate__16CharacterManagerf",
        Ok(
            "CharacterManager::PreSubstepUpdate(float)",
        ),
    ),
    (
        "PostSubstepUpdate__16CharacterManagerf",
        Ok(
            "CharacterManager::PostSubstepUpdate(float)",
        ),
    ),
    (
        "ClearTargetVehicle__16CharacterManagerP7Vehicle",
        Ok(
            "CharacterManager::ClearTargetVehicle(Vehicle *)",
        ),
    ),
    (
        "ResetBonusCharacters__16CharacterManager",
        Ok(
            "CharacterManager::ResetBonusCharacters(void)",
        ),
    ),
    (
        "AddCharacter__16CharacterManagerP9CharacterQ216CharacterManager13CharacterType",
        Ok(
            "CharacterManager::AddCharacter(Character *, CharacterManager::CharacterType)",
        ),
    ),
    (
        "OnProcessRequestsComplete__16CharacterManagerPv",
        Ok(
            "CharacterManager::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "GetCharacterByName__C16CharacterManagerPCc",
        Ok(
            "CharacterManager::GetCharacterByName(char const *) const",
        ),
    ),
    (
        "GetCharacterByName__C16CharacterManagerG13tUidUnaligned",
        Ok(
            "CharacterManager::GetCharacterByName(tUidUnaligned) const",
        ),
    ),
    (
        "GetMissionCharacter__C16CharacterManagerPCc",
        Ok(
            "CharacterManager::GetMissionCharacter(char const *) const",
        ),
    ),
    (
        "GetCharacter__C16CharacterManageri",
        Ok(
            "CharacterManager::GetCharacter(int) const",
        ),
    ),
    (
        "HandleEvent__16CharacterManager9EventEnumPv",
        Ok(
            "CharacterManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "GetModelName__16CharacterManagerP9Character",
        Ok(
            "CharacterManager::GetModelName(Character *)",
        ),
    ),
    (
        "GetAnimName__16CharacterManagerP9Character",
        Ok(
            "CharacterManager::GetAnimName(Character *)",
        ),
    ),
    (
        "SubmitStatics__16CharacterManager",
        Ok(
            "CharacterManager::SubmitStatics(void)",
        ),
    ),
    (
        "SubmitAnimCollisions__16CharacterManager",
        Ok(
            "CharacterManager::SubmitAnimCollisions(void)",
        ),
    ),
    (
        "SubmitDynamics__16CharacterManager",
        Ok(
            "CharacterManager::SubmitDynamics(void)",
        ),
    ),
    (
        "SetCharacterPosition__16CharacterManageriPPc",
        Ok(
            "CharacterManager::SetCharacterPosition(int, char **)",
        ),
    ),
    (
        "ResetCharacter__16CharacterManageriPPc",
        Ok(
            "CharacterManager::ResetCharacter(int, char **)",
        ),
    ),
    (
        "SetInitialWalk__16CharacterManageriPPc",
        Ok(
            "CharacterManager::SetInitialWalk(int, char **)",
        ),
    ),
    (
        "NextCheatModel__16CharacterManager",
        Ok(
            "CharacterManager::NextCheatModel(void)",
        ),
    ),
    (
        "GetNumTeleportDests__16CharacterManager",
        Ok(
            "CharacterManager::GetNumTeleportDests(void)",
        ),
    ),
    (
        "GetTeleportDest__16CharacterManagerUi",
        Ok(
            "CharacterManager::GetTeleportDest(unsigned int)",
        ),
    ),
    (
        "ClearTeleportDests__16CharacterManager",
        Ok(
            "CharacterManager::ClearTeleportDests(void)",
        ),
    ),
    (
        "AddTeleportDest__16CharacterManageriPPc",
        Ok(
            "CharacterManager::AddTeleportDest(int, char **)",
        ),
    ),
    (
        "DoTeleport__16CharacterManagerPv",
        Ok(
            "CharacterManager::DoTeleport(void *)",
        ),
    ),
    (
        "GetCharacterIndex__C16CharacterManagerPC9Character",
        Ok(
            "CharacterManager::GetCharacterIndex(Character const *) const",
        ),
    ),
    (
        "__17CharacterMappable",
        Ok(
            "CharacterMappable::CharacterMappable(void)",
        ),
    ),
    (
        "_$_17CharacterMappable",
        Ok(
            "CharacterMappable::~CharacterMappable(void)",
        ),
    ),
    (
        "GetCharacterController__C17CharacterMappable",
        Ok(
            "CharacterMappable::GetCharacterController(void) const",
        ),
    ),
    (
        "SetCharacterController__17CharacterMappableP19CharacterController",
        Ok(
            "CharacterMappable::SetCharacterController(CharacterController *)",
        ),
    ),
    (
        "OnButton__17CharacterMappableiiPC6Button",
        Ok(
            "CharacterMappable::OnButton(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonUp__17CharacterMappableiiPC6Button",
        Ok(
            "CharacterMappable::OnButtonUp(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonDown__17CharacterMappableiiPC6Button",
        Ok(
            "CharacterMappable::OnButtonDown(int, int, Button const *)",
        ),
    ),
    (
        "LoadControllerMappings__17CharacterMappableUi",
        Ok(
            "CharacterMappable::LoadControllerMappings(unsigned int)",
        ),
    ),
    (
        "GetDirection__C17CharacterMappableRQ218RadicalMathLibrary6Vector",
        Ok(
            "CharacterMappable::GetDirection(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "__22BipedCharacterMappable",
        Ok(
            "BipedCharacterMappable::BipedCharacterMappable(void)",
        ),
    ),
    (
        "_$_22BipedCharacterMappable",
        Ok(
            "BipedCharacterMappable::~BipedCharacterMappable(void)",
        ),
    ),
    (
        "OnButtonDown__22BipedCharacterMappableiiPC6Button",
        Ok(
            "BipedCharacterMappable::OnButtonDown(int, int, Button const *)",
        ),
    ),
    (
        "GetDirection__C22BipedCharacterMappableRQ218RadicalMathLibrary6Vector",
        Ok(
            "BipedCharacterMappable::GetDirection(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "__22InCarCharacterMappable",
        Ok(
            "InCarCharacterMappable::InCarCharacterMappable(void)",
        ),
    ),
    (
        "_$_22InCarCharacterMappable",
        Ok(
            "InCarCharacterMappable::~InCarCharacterMappable(void)",
        ),
    ),
    (
        "OnButtonDown__22InCarCharacterMappableiiPC6Button",
        Ok(
            "InCarCharacterMappable::OnButtonDown(int, int, Button const *)",
        ),
    ),
    (
        "GetDirection__C22InCarCharacterMappableRQ218RadicalMathLibrary6Vector",
        Ok(
            "InCarCharacterMappable::GetDirection(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "__19CharacterRenderableP13tDrawablePoseN21",
        Ok(
            "CharacterRenderable::CharacterRenderable(tDrawablePose *, tDrawablePose *, tDrawablePose *)",
        ),
    ),
    (
        "_$_19CharacterRenderable",
        Ok(
            "CharacterRenderable::~CharacterRenderable(void)",
        ),
    ),
    (
        "Display__19CharacterRenderableGQ218RadicalMathLibrary6VectorP5tPose",
        Ok(
            "CharacterRenderable::Display(RadicalMathLibrary::Vector, tPose *)",
        ),
    ),
    (
        "CastsShadow__19CharacterRenderable",
        Ok(
            "CharacterRenderable::CastsShadow(void)",
        ),
    ),
    (
        "DisplayShadow__19CharacterRenderableP5tPosePC16BlobShadowParams",
        Ok(
            "CharacterRenderable::DisplayShadow(tPose *, BlobShadowParams const *)",
        ),
    ),
    (
        "GetDrawable__C19CharacterRenderable",
        Ok(
            "CharacterRenderable::GetDrawable(void) const",
        ),
    ),
    (
        "SetLOD__19CharacterRenderablei",
        Ok(
            "CharacterRenderable::SetLOD(int)",
        ),
    ),
    (
        "SetSwatch__19CharacterRenderablei",
        Ok(
            "CharacterRenderable::SetSwatch(int)",
        ),
    ),
    (
        "SetSwatchTexture__19CharacterRenderableiP8tTexture",
        Ok(
            "CharacterRenderable::SetSwatchTexture(int, tTexture *)",
        ),
    ),
    (
        "SetShockEffect__19CharacterRenderableP9tDrawable",
        Ok(
            "CharacterRenderable::SetShockEffect(tDrawable *)",
        ),
    ),
    (
        "SetSwatchShader__19CharacterRenderableP7tShader",
        Ok(
            "CharacterRenderable::SetSwatchShader(tShader *)",
        ),
    ),
    (
        "SetFadeAlpha__19CharacterRenderablei",
        Ok(
            "CharacterRenderable::SetFadeAlpha(int)",
        ),
    ),
    (
        "SetShadowColour__19CharacterRenderableG10pddiColour",
        Ok(
            "CharacterRenderable::SetShadowColour(pddiColour)",
        ),
    ),
    (
        "DisplayModel__19CharacterRenderableP5tPose",
        Ok(
            "CharacterRenderable::DisplayModel(tPose *)",
        ),
    ),
    (
        "DisplayShocked__19CharacterRenderableP5tPose",
        Ok(
            "CharacterRenderable::DisplayShocked(tPose *)",
        ),
    ),
    (
        "__15CharacterTargetP9Character",
        Ok(
            "CharacterTarget::CharacterTarget(Character *)",
        ),
    ),
    (
        "_$_15CharacterTarget",
        Ok(
            "CharacterTarget::~CharacterTarget(void)",
        ),
    ),
    (
        "GetPosition__15CharacterTargetPQ218RadicalMathLibrary6Vector",
        Ok(
            "CharacterTarget::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetHeading__15CharacterTargetPQ218RadicalMathLibrary6Vector",
        Ok(
            "CharacterTarget::GetHeading(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetVUP__15CharacterTargetPQ218RadicalMathLibrary6Vector",
        Ok(
            "CharacterTarget::GetVUP(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetVelocity__15CharacterTargetPQ218RadicalMathLibrary6Vector",
        Ok(
            "CharacterTarget::GetVelocity(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetID__15CharacterTarget",
        Ok(
            "CharacterTarget::GetID(void)",
        ),
    ),
    (
        "IsCar__C15CharacterTarget",
        Ok(
            "CharacterTarget::IsCar(void) const",
        ),
    ),
    (
        "IsAirborn__15CharacterTarget",
        Ok(
            "CharacterTarget::IsAirborn(void)",
        ),
    ),
    (
        "IsUnstable__15CharacterTarget",
        Ok(
            "CharacterTarget::IsUnstable(void)",
        ),
    ),
    (
        "IsQuickTurn__15CharacterTarget",
        Ok(
            "CharacterTarget::IsQuickTurn(void)",
        ),
    ),
    (
        "GetFirstPersonPosition__15CharacterTargetPQ218RadicalMathLibrary6Vector",
        Ok(
            "CharacterTarget::GetFirstPersonPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetName__15CharacterTarget",
        Ok(
            "CharacterTarget::GetName(void)",
        ),
    ),
    (
        "IsInReverse__15CharacterTarget",
        Ok(
            "CharacterTarget::IsInReverse(void)",
        ),
    ),
    (
        "GetTerrainIntersect__C15CharacterTargetRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "CharacterTarget::GetTerrainIntersect(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "__12TeleportDest",
        Ok(
            "TeleportDest::TeleportDest(void)",
        ),
    ),
    (
        "__tf19CharacterController",
        Ok(
            "CharacterController type_info function",
        ),
    ),
    (
        "__tf13NPCController",
        Ok(
            "NPCController type_info function",
        ),
    ),
    (
        "__tf18PhysicalController",
        Ok(
            "PhysicalController type_info function",
        ),
    ),
    (
        "__tf33CameraRelativeCharacterController",
        Ok(
            "CameraRelativeCharacterController type_info function",
        ),
    ),
    (
        "_$_21AICharacterController",
        Ok(
            "AICharacterController::~AICharacterController(void)",
        ),
    ),
    (
        "__tf21AICharacterController",
        Ok(
            "AICharacterController type_info function",
        ),
    ),
    (
        "__tf9Character",
        Ok(
            "Character type_info function",
        ),
    ),
    (
        "__tf11NPCharacter",
        Ok(
            "NPCharacter type_info function",
        ),
    ),
    (
        "__tf16CharacterManager",
        Ok(
            "CharacterManager type_info function",
        ),
    ),
    (
        "__tf6Wander",
        Ok(
            "Wander type_info function",
        ),
    ),
    (
        "__tf17CharacterMappable",
        Ok(
            "CharacterMappable type_info function",
        ),
    ),
    (
        "__tf22BipedCharacterMappable",
        Ok(
            "BipedCharacterMappable type_info function",
        ),
    ),
    (
        "__tf22InCarCharacterMappable",
        Ok(
            "InCarCharacterMappable type_info function",
        ),
    ),
    (
        "__tf15CharacterTarget",
        Ok(
            "CharacterTarget type_info function",
        ),
    ),
    (
        "_$_21AmbientDialogueButton",
        Ok(
            "AmbientDialogueButton::~AmbientDialogueButton(void)",
        ),
    ),
    (
        "__tf21AmbientDialogueButton",
        Ok(
            "AmbientDialogueButton type_info function",
        ),
    ),
    (
        "__tf22AmbientDialogueTrigger",
        Ok(
            "AmbientDialogueTrigger type_info function",
        ),
    ),
    (
        "__tf45CameraRelativeCharacterControllerEventHandler",
        Ok(
            "CameraRelativeCharacterControllerEventHandler type_info function",
        ),
    ),
    (
        "Update__19CharacterControllerf",
        Ok(
            "CharacterController::Update(float)",
        ),
    ),
    (
        "TimeSinceChange__C19CharacterControlleri",
        Ok(
            "CharacterController::TimeSinceChange(int) const",
        ),
    ),
    (
        "SetIntention__19CharacterControllerQ219CharacterController10eIntention",
        Ok(
            "CharacterController::SetIntention(CharacterController::eIntention)",
        ),
    ),
    (
        "__Q213NPCController9DodgeInfo",
        Ok(
            "NPCController::DodgeInfo::DodgeInfo(void)",
        ),
    ),
    (
        "GetState__C13NPCController",
        Ok(
            "NPCController::GetState(void) const",
        ),
    ),
    (
        "GetSpeedMps__C13NPCController",
        Ok(
            "NPCController::GetSpeedMps(void) const",
        ),
    ),
    (
        "SetSpeedMps__13NPCControllerf",
        Ok(
            "NPCController::SetSpeedMps(float)",
        ),
    ),
    (
        "SetDirection__13NPCControllerRCQ218RadicalMathLibrary6Vector",
        Ok(
            "NPCController::SetDirection(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetValue__C13NPCControlleri",
        Ok(
            "NPCController::GetValue(int) const",
        ),
    ),
    (
        "IsButtonDown__C13NPCControlleri",
        Ok(
            "NPCController::IsButtonDown(int) const",
        ),
    ),
    (
        "SetIntention__18PhysicalControllerQ219CharacterController10eIntention",
        Ok(
            "PhysicalController::SetIntention(CharacterController::eIntention)",
        ),
    ),
    (
        "_$_15ISuperCamTarget",
        Ok(
            "ISuperCamTarget::~ISuperCamTarget(void)",
        ),
    ),
    (
        "GetAIRef__9Character",
        Ok(
            "Character::GetAIRef(void)",
        ),
    ),
    (
        "Update__9Characterf",
        Ok(
            "Character::Update(float)",
        ),
    ),
    (
        "ApplyForce__9CharacterRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "Character::ApplyForce(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "GetInputScale__9Character",
        Ok(
            "Character::GetInputScale(void)",
        ),
    ),
    (
        "GetAIRef__11NPCharacter",
        Ok(
            "NPCharacter::GetAIRef(void)",
        ),
    ),
    (
        "SubmitAnimCollisions__11NPCharacter",
        Ok(
            "NPCharacter::SubmitAnimCollisions(void)",
        ),
    ),
    (
        "GetInputScale__11NPCharacter",
        Ok(
            "NPCharacter::GetInputScale(void)",
        ),
    ),
    (
        "UpdateFootPlant__11NPCharacter",
        Ok(
            "NPCharacter::UpdateFootPlant(void)",
        ),
    ),
    (
        "_$_Q216CharacterManager17CharacterLoadData",
        Ok(
            "CharacterManager::CharacterLoadData::~CharacterLoadData(void)",
        ),
    ),
    (
        "__Q216CharacterManager17CharacterLoadData",
        Ok(
            "CharacterManager::CharacterLoadData::CharacterLoadData(void)",
        ),
    ),
    (
        "__9Behaviour",
        Ok(
            "Behaviour::Behaviour(void)",
        ),
    ),
    (
        "OnButtonPressed__21AmbientDialogueButtonP9CharacterP9Sequencer",
        Ok(
            "AmbientDialogueButton::OnButtonPressed(Character *, Sequencer *)",
        ),
    ),
    (
        "_$_22AmbientDialogueTrigger",
        Ok(
            "AmbientDialogueTrigger::~AmbientDialogueTrigger(void)",
        ),
    ),
    (
        "Trigger__22AmbientDialogueTriggerUib",
        Ok(
            "AmbientDialogueTrigger::Trigger(unsigned int, bool)",
        ),
    ),
    (
        "_$_45CameraRelativeCharacterControllerEventHandler",
        Ok(
            "CameraRelativeCharacterControllerEventHandler::~CameraRelativeCharacterControllerEventHandler(void)",
        ),
    ),
    (
        "HandleEvent__45CameraRelativeCharacterControllerEventHandler9EventEnumPv",
        Ok(
            "CameraRelativeCharacterControllerEventHandler::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z13tDrawablePose",
        Ok(
            "radLoadInventory::SafeCast<tDrawablePose>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z9tSkeleton",
        Ok(
            "radLoadInventory::SafeCast<tSkeleton>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ26choreo4Bank",
        Ok(
            "radLoadInventory::SafeCast<choreo::Bank>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z13tDrawablePose",
        Ok(
            "radLoadInventory::SafeCast<tDrawablePose> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z9tSkeleton",
        Ok(
            "radLoadInventory::SafeCast<tSkeleton> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ26choreo4Bank",
        Ok(
            "radLoadInventory::SafeCast<choreo::Bank> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ26choreo4BankP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<choreo::Bank>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z9tSkeletonP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tSkeleton>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z13tDrawablePoseP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tDrawablePose>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$__6Wander",
        Ok(
            "global constructors keyed to Wander::Wander(void)",
        ),
    ),
    (
        "_GLOBAL_$D$__6Wander",
        Ok(
            "global destructors keyed to Wander::Wander(void)",
        ),
    ),
    (
        "__15GeometryVehicle",
        Ok(
            "GeometryVehicle::GeometryVehicle(void)",
        ),
    ),
    (
        "_$_15GeometryVehicle",
        Ok(
            "GeometryVehicle::~GeometryVehicle(void)",
        ),
    ),
    (
        "Init__15GeometryVehiclePCcP7Vehiclei",
        Ok(
            "GeometryVehicle::Init(char const *, Vehicle *, int)",
        ),
    ),
    (
        "InitSkidMarks__15GeometryVehicle",
        Ok(
            "GeometryVehicle::InitSkidMarks(void)",
        ),
    ),
    (
        "InitParticles__15GeometryVehicle",
        Ok(
            "GeometryVehicle::InitParticles(void)",
        ),
    ),
    (
        "GetHeadlightScale__15GeometryVehicle",
        Ok(
            "GeometryVehicle::GetHeadlightScale(void)",
        ),
    ),
    (
        "SetHeadlightScale__15GeometryVehiclef",
        Ok(
            "GeometryVehicle::SetHeadlightScale(float)",
        ),
    ),
    (
        "AttachCollectible__15GeometryVehicleP20StatePropCollectible",
        Ok(
            "GeometryVehicle::AttachCollectible(StatePropCollectible *)",
        ),
    ),
    (
        "GetAttachedCollectible__15GeometryVehicle",
        Ok(
            "GeometryVehicle::GetAttachedCollectible(void)",
        ),
    ),
    (
        "DetachCollectible__15GeometryVehicleRCQ218RadicalMathLibrary6Vectorb",
        Ok(
            "GeometryVehicle::DetachCollectible(RadicalMathLibrary::Vector const &, bool)",
        ),
    ),
    (
        "Display__15GeometryVehicle",
        Ok(
            "GeometryVehicle::Display(void)",
        ),
    ),
    (
        "SetSkidValues__15GeometryVehicleifRQ218RadicalMathLibrary6Vector12eTerrainType",
        Ok(
            "GeometryVehicle::SetSkidValues(int, float, RadicalMathLibrary::Vector &, eTerrainType)",
        ),
    ),
    (
        "UpdateSkids__15GeometryVehicle",
        Ok(
            "GeometryVehicle::UpdateSkids(void)",
        ),
    ),
    (
        "DisplayShadow__15GeometryVehicleP16BlobShadowParams",
        Ok(
            "GeometryVehicle::DisplayShadow(BlobShadowParams *)",
        ),
    ),
    (
        "FindAndTurnOffWheels__15GeometryVehicle",
        Ok(
            "GeometryVehicle::FindAndTurnOffWheels(void)",
        ),
    ),
    (
        "FindAndTurnOffFrontWheelsOnly__15GeometryVehicle",
        Ok(
            "GeometryVehicle::FindAndTurnOffFrontWheelsOnly(void)",
        ),
    ),
    (
        "FindHeadLightBillboardJoints__15GeometryVehicle",
        Ok(
            "GeometryVehicle::FindHeadLightBillboardJoints(void)",
        ),
    ),
    (
        "FindBrakeLightBillboardJoints__15GeometryVehicle",
        Ok(
            "GeometryVehicle::FindBrakeLightBillboardJoints(void)",
        ),
    ),
    (
        "FindGhostGlowBillboards__15GeometryVehiclePCc",
        Ok(
            "GeometryVehicle::FindGhostGlowBillboards(char const *)",
        ),
    ),
    (
        "FindNukeGlowBillboards__15GeometryVehiclePCc",
        Ok(
            "GeometryVehicle::FindNukeGlowBillboards(char const *)",
        ),
    ),
    (
        "SetCollectibleHardpointPosition__15GeometryVehicleRCQ218RadicalMathLibrary6Vector",
        Ok(
            "GeometryVehicle::SetCollectibleHardpointPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetCollectibleHardpointTransform__15GeometryVehiclefffRCQ218RadicalMathLibrary6Vector",
        Ok(
            "GeometryVehicle::SetCollectibleHardpointTransform(float, float, float, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "ShowBrakeLights__15GeometryVehicle",
        Ok(
            "GeometryVehicle::ShowBrakeLights(void)",
        ),
    ),
    (
        "HideBrakeLights__15GeometryVehicle",
        Ok(
            "GeometryVehicle::HideBrakeLights(void)",
        ),
    ),
    (
        "ShowReverseLights__15GeometryVehicle",
        Ok(
            "GeometryVehicle::ShowReverseLights(void)",
        ),
    ),
    (
        "HideReverseLights__15GeometryVehicle",
        Ok(
            "GeometryVehicle::HideReverseLights(void)",
        ),
    ),
    (
        "GetArt__15GeometryVehiclePCc",
        Ok(
            "GeometryVehicle::GetArt(char const *)",
        ),
    ),
    (
        "FindDamageShadersAndTextures__15GeometryVehiclePCc",
        Ok(
            "GeometryVehicle::FindDamageShadersAndTextures(char const *)",
        ),
    ),
    (
        "SetEngineSmoke__15GeometryVehicleQ212ParticleEnum10ParticleID",
        Ok(
            "GeometryVehicle::SetEngineSmoke(ParticleEnum::ParticleID)",
        ),
    ),
    (
        "SetWheelSmoke__15GeometryVehicleiQ212ParticleEnum10ParticleIDf",
        Ok(
            "GeometryVehicle::SetWheelSmoke(int, ParticleEnum::ParticleID, float)",
        ),
    ),
    (
        "DamageTextureTrunk__15GeometryVehicleb",
        Ok(
            "GeometryVehicle::DamageTextureTrunk(bool)",
        ),
    ),
    (
        "DamageTextureHood__15GeometryVehicleb",
        Ok(
            "GeometryVehicle::DamageTextureHood(bool)",
        ),
    ),
    (
        "DamageTextureDoorP__15GeometryVehicleb",
        Ok(
            "GeometryVehicle::DamageTextureDoorP(bool)",
        ),
    ),
    (
        "DamageTextureDoorD__15GeometryVehicleb",
        Ok(
            "GeometryVehicle::DamageTextureDoorD(bool)",
        ),
    ),
    (
        "HideFlappingPiece__15GeometryVehicleib",
        Ok(
            "GeometryVehicle::HideFlappingPiece(int, bool)",
        ),
    ),
    (
        "Update__15GeometryVehiclef",
        Ok(
            "GeometryVehicle::Update(float)",
        ),
    ),
    (
        "SetTrafficBodyColour__15GeometryVehicleG10pddiColour",
        Ok(
            "GeometryVehicle::SetTrafficBodyColour(pddiColour)",
        ),
    ),
    (
        "GetP3DPose__15GeometryVehicle",
        Ok(
            "GeometryVehicle::GetP3DPose(void)",
        ),
    ),
    (
        "SetShadowAdjustments__15GeometryVehiclePA1_f",
        Ok(
            "GeometryVehicle::SetShadowAdjustments(float (*)[2])",
        ),
    ),
    (
        "SetFadeAlpha__15GeometryVehiclei",
        Ok(
            "GeometryVehicle::SetFadeAlpha(int)",
        ),
    ),
    (
        "IsTrafficModel__15GeometryVehicle",
        Ok(
            "GeometryVehicle::IsTrafficModel(void)",
        ),
    ),
    (
        "FadeRoof__15GeometryVehicleb",
        Ok(
            "GeometryVehicle::FadeRoof(bool)",
        ),
    ),
    (
        "FindRoofGeometry__15GeometryVehiclePCc",
        Ok(
            "GeometryVehicle::FindRoofGeometry(char const *)",
        ),
    ),
    (
        "EnableLights__15GeometryVehicleb",
        Ok(
            "GeometryVehicle::EnableLights(bool)",
        ),
    ),
    (
        "GetVehicleColour__C15GeometryVehicle",
        Ok(
            "GeometryVehicle::GetVehicleColour(void) const",
        ),
    ),
    (
        "FindAnimationControllers__15GeometryVehiclePCc",
        Ok(
            "GeometryVehicle::FindAnimationControllers(char const *)",
        ),
    ),
    (
        "GetSpecialController__15GeometryVehicleG13tUidUnalignedPQ215GeometryVehicle22VehicleFrameController",
        Ok(
            "GeometryVehicle::GetSpecialController(tUidUnaligned, GeometryVehicle::VehicleFrameController *)",
        ),
    ),
    (
        "AdvanceAnimationControllers__15GeometryVehiclef",
        Ok(
            "GeometryVehicle::AdvanceAnimationControllers(float)",
        ),
    ),
    (
        "__17PhysicsLocomotionP7Vehicle",
        Ok(
            "PhysicsLocomotion::PhysicsLocomotion(Vehicle *)",
        ),
    ),
    (
        "_$_17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::~PhysicsLocomotion(void)",
        ),
    ),
    (
        "SetTerrainIntersectCachePointsForNewTransform__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::SetTerrainIntersectCachePointsForNewTransform(void)",
        ),
    ),
    (
        "MoveWheelsToBottomOfSuspension__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::MoveWheelsToBottomOfSuspension(void)",
        ),
    ),
    (
        "UpdateVehicleGroundPlane__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::UpdateVehicleGroundPlane(void)",
        ),
    ),
    (
        "PreCollisionPrep__17PhysicsLocomotionb",
        Ok(
            "PhysicsLocomotion::PreCollisionPrep(bool)",
        ),
    ),
    (
        "CompareNormalAndHeight__17PhysicsLocomotioniRQ218RadicalMathLibrary6VectorT2",
        Ok(
            "PhysicsLocomotion::CompareNormalAndHeight(int, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "PreSubstepUpdate__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::PreSubstepUpdate(void)",
        ),
    ),
    (
        "SetForceApplicationPoints__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::SetForceApplicationPoints(void)",
        ),
    ),
    (
        "ApplySuspensionForces__17PhysicsLocomotionfb",
        Ok(
            "PhysicsLocomotion::ApplySuspensionForces(float, bool)",
        ),
    ),
    (
        "CalculateSuspensionForce__17PhysicsLocomotionP5WheelffRf",
        Ok(
            "PhysicsLocomotion::CalculateSuspensionForce(Wheel *, float, float, float &)",
        ),
    ),
    (
        "ApplyDragForce__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::ApplyDragForce(void)",
        ),
    ),
    (
        "ApplyAngularDrag__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::ApplyAngularDrag(void)",
        ),
    ),
    (
        "ApplyRollingFriction__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::ApplyRollingFriction(void)",
        ),
    ),
    (
        "Weeble__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::Weeble(void)",
        ),
    ),
    (
        "PreUpdate__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::PreUpdate(void)",
        ),
    ),
    (
        "Update__17PhysicsLocomotionf",
        Ok(
            "PhysicsLocomotion::Update(float)",
        ),
    ),
    (
        "DurangoStyleStabilizer__17PhysicsLocomotionf",
        Ok(
            "PhysicsLocomotion::DurangoStyleStabilizer(float)",
        ),
    ),
    (
        "StuckOnSideTest__17PhysicsLocomotionf",
        Ok(
            "PhysicsLocomotion::StuckOnSideTest(float)",
        ),
    ),
    (
        "PostUpdate__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::PostUpdate(void)",
        ),
    ),
    (
        "CorrectWheelYPositions__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::CorrectWheelYPositions(void)",
        ),
    ),
    (
        "FetchWheelTerrainCollisionInfo__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::FetchWheelTerrainCollisionInfo(void)",
        ),
    ),
    (
        "UseWheelTerrainCollisionInfo__17PhysicsLocomotionf",
        Ok(
            "PhysicsLocomotion::UseWheelTerrainCollisionInfo(float)",
        ),
    ),
    (
        "ApplyControllerForces2__17PhysicsLocomotionf",
        Ok(
            "PhysicsLocomotion::ApplyControllerForces2(float)",
        ),
    ),
    (
        "ApplyTerrainFriction__17PhysicsLocomotionPQ218RadicalMathLibrary6Vector",
        Ok(
            "PhysicsLocomotion::ApplyTerrainFriction(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GasForce2__17PhysicsLocomotionRQ218RadicalMathLibrary6Vectorif",
        Ok(
            "PhysicsLocomotion::GasForce2(RadicalMathLibrary::Vector &, int, float)",
        ),
    ),
    (
        "BrakeForce2__17PhysicsLocomotionRQ218RadicalMathLibrary6Vectorif",
        Ok(
            "PhysicsLocomotion::BrakeForce2(RadicalMathLibrary::Vector &, int, float)",
        ),
    ),
    (
        "ReverseForce2__17PhysicsLocomotionRQ218RadicalMathLibrary6Vectori",
        Ok(
            "PhysicsLocomotion::ReverseForce2(RadicalMathLibrary::Vector &, int)",
        ),
    ),
    (
        "EBrakeEffect__17PhysicsLocomotionRQ218RadicalMathLibrary6Vectori",
        Ok(
            "PhysicsLocomotion::EBrakeEffect(RadicalMathLibrary::Vector &, int)",
        ),
    ),
    (
        "SteeringForce2__17PhysicsLocomotionRQ218RadicalMathLibrary6Vectorif",
        Ok(
            "PhysicsLocomotion::SteeringForce2(RadicalMathLibrary::Vector &, int, float)",
        ),
    ),
    (
        "TestControllerForces__17PhysicsLocomotionPQ218RadicalMathLibrary6Vector",
        Ok(
            "PhysicsLocomotion::TestControllerForces(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetSkidLevel__17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion::SetSkidLevel(void)",
        ),
    ),
    (
        "__28RedBrickCollisionSolverAgent",
        Ok(
            "RedBrickCollisionSolverAgent::RedBrickCollisionSolverAgent(void)",
        ),
    ),
    (
        "_$_28RedBrickCollisionSolverAgent",
        Ok(
            "RedBrickCollisionSolverAgent::~RedBrickCollisionSolverAgent(void)",
        ),
    ),
    (
        "ResetCollisionFlags__28RedBrickCollisionSolverAgent",
        Ok(
            "RedBrickCollisionSolverAgent::ResetCollisionFlags(void)",
        ),
    ),
    (
        "TestImpulse__28RedBrickCollisionSolverAgentRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "RedBrickCollisionSolverAgent::TestImpulse(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "CarOnCarPreTest__28RedBrickCollisionSolverAgentRQ23sim9Collisioni",
        Ok(
            "RedBrickCollisionSolverAgent::CarOnCarPreTest(sim::Collision &, int)",
        ),
    ),
    (
        "PreCollisionEvent__28RedBrickCollisionSolverAgentRQ23sim9Collisioni",
        Ok(
            "RedBrickCollisionSolverAgent::PreCollisionEvent(sim::Collision &, int)",
        ),
    ),
    (
        "EndObjectCollision__28RedBrickCollisionSolverAgentPQ23sim8SimStatei",
        Ok(
            "RedBrickCollisionSolverAgent::EndObjectCollision(sim::SimState *, int)",
        ),
    ),
    (
        "TestCache__28RedBrickCollisionSolverAgentPQ23sim8SimStatei",
        Ok(
            "RedBrickCollisionSolverAgent::TestCache(sim::SimState *, int)",
        ),
    ),
    (
        "Update__16RootMatrixDriverPQ25poser4Pose",
        Ok(
            "RootMatrixDriver::Update(poser::Pose *)",
        ),
    ),
    (
        "__21SuspensionJointDriverP5Wheeli",
        Ok(
            "SuspensionJointDriver::SuspensionJointDriver(Wheel *, int)",
        ),
    ),
    (
        "_$_21SuspensionJointDriver",
        Ok(
            "SuspensionJointDriver::~SuspensionJointDriver(void)",
        ),
    ),
    (
        "Update__21SuspensionJointDriverPQ25poser4Pose",
        Ok(
            "SuspensionJointDriver::Update(poser::Pose *)",
        ),
    ),
    (
        "__17TrafficLocomotionP7Vehicle",
        Ok(
            "TrafficLocomotion::TrafficLocomotion(Vehicle *)",
        ),
    ),
    (
        "_$_17TrafficLocomotion",
        Ok(
            "TrafficLocomotion::~TrafficLocomotion(void)",
        ),
    ),
    (
        "InitPos__17TrafficLocomotionRCQ218RadicalMathLibrary6Vector",
        Ok(
            "TrafficLocomotion::InitPos(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "InitFacing__17TrafficLocomotionRCQ218RadicalMathLibrary6Vector",
        Ok(
            "TrafficLocomotion::InitFacing(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Init__17TrafficLocomotion",
        Ok(
            "TrafficLocomotion::Init(void)",
        ),
    ),
    (
        "InitVehicleAI__17TrafficLocomotionP7Vehicle",
        Ok(
            "TrafficLocomotion::InitVehicleAI(Vehicle *)",
        ),
    ),
    (
        "InitLane__17TrafficLocomotionP4LaneUif",
        Ok(
            "TrafficLocomotion::InitLane(Lane *, unsigned int, float)",
        ),
    ),
    (
        "InitSegment__17TrafficLocomotionP11RoadSegmentUif",
        Ok(
            "TrafficLocomotion::InitSegment(RoadSegment *, unsigned int, float)",
        ),
    ),
    (
        "UpdateVehicleGroundPlane__17TrafficLocomotion",
        Ok(
            "TrafficLocomotion::UpdateVehicleGroundPlane(void)",
        ),
    ),
    (
        "PreCollisionPrep__17TrafficLocomotionb",
        Ok(
            "TrafficLocomotion::PreCollisionPrep(bool)",
        ),
    ),
    (
        "PreSubstepUpdate__17TrafficLocomotion",
        Ok(
            "TrafficLocomotion::PreSubstepUpdate(void)",
        ),
    ),
    (
        "PreUpdate__17TrafficLocomotion",
        Ok(
            "TrafficLocomotion::PreUpdate(void)",
        ),
    ),
    (
        "StopSuddenly__17TrafficLocomotionRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "TrafficLocomotion::StopSuddenly(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "Update__17TrafficLocomotionf",
        Ok(
            "TrafficLocomotion::Update(float)",
        ),
    ),
    (
        "PostUpdate__17TrafficLocomotion",
        Ok(
            "TrafficLocomotion::PostUpdate(void)",
        ),
    ),
    (
        "FindOutLane__17TrafficLocomotionPC4LaneUiRP4LaneRUi",
        Ok(
            "TrafficLocomotion::FindOutLane(Lane const *, unsigned int, Lane *&, unsigned int &)",
        ),
    ),
    (
        "BuildCurve__17TrafficLocomotionP11RoadSegmentUiT1Ui",
        Ok(
            "TrafficLocomotion::BuildCurve(RoadSegment *, unsigned int, RoadSegment *, unsigned int)",
        ),
    ),
    (
        "EnterIntersection__17TrafficLocomotion",
        Ok(
            "TrafficLocomotion::EnterIntersection(void)",
        ),
    ),
    (
        "PivotFrontWheels__17TrafficLocomotionGQ218RadicalMathLibrary6Vector",
        Ok(
            "TrafficLocomotion::PivotFrontWheels(RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "UpdateLanes__17TrafficLocomotionP14TrafficVehicleP4LaneT2",
        Ok(
            "TrafficLocomotion::UpdateLanes(TrafficVehicle *, Lane *, Lane *)",
        ),
    ),
    (
        "GetAIPrevLane__17TrafficLocomotion",
        Ok(
            "TrafficLocomotion::GetAIPrevLane(void)",
        ),
    ),
    (
        "BuildLaneChangeCurve__17TrafficLocomotionP11RoadSegmentfUiUif",
        Ok(
            "TrafficLocomotion::BuildLaneChangeCurve(RoadSegment *, float, unsigned int, unsigned int, float)",
        ),
    ),
    (
        "BuildArbitraryCurve__17TrafficLocomotionRCQ218RadicalMathLibrary6VectorN31",
        Ok(
            "TrafficLocomotion::BuildArbitraryCurve(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetSplineCurve__17TrafficLocomotionRPQ218RadicalMathLibrary6VectorRiT2",
        Ok(
            "TrafficLocomotion::GetSplineCurve(RadicalMathLibrary::Vector *&, int &, int &)",
        ),
    ),
    (
        "ActivateTriggers__7Vehicleb",
        Ok(
            "Vehicle::ActivateTriggers(bool)",
        ),
    ),
    (
        "SetUserDrivingCar__7Vehicleb",
        Ok(
            "Vehicle::SetUserDrivingCar(bool)",
        ),
    ),
    (
        "TransitToAI__7Vehicle",
        Ok(
            "Vehicle::TransitToAI(void)",
        ),
    ),
    (
        "EnteringJumpBoostVolume__7Vehicle",
        Ok(
            "Vehicle::EnteringJumpBoostVolume(void)",
        ),
    ),
    (
        "ExitingJumpBoostVolume__7Vehicle",
        Ok(
            "Vehicle::ExitingJumpBoostVolume(void)",
        ),
    ),
    (
        "CastsShadow__7Vehicle",
        Ok(
            "Vehicle::CastsShadow(void)",
        ),
    ),
    (
        "DisplayShadow__7Vehicle",
        Ok(
            "Vehicle::DisplayShadow(void)",
        ),
    ),
    (
        "DisplaySimpleShadow__7Vehicle",
        Ok(
            "Vehicle::DisplaySimpleShadow(void)",
        ),
    ),
    (
        "SetInCarSimState__7Vehicle",
        Ok(
            "Vehicle::SetInCarSimState(void)",
        ),
    ),
    (
        "SetOutOfCarSimState__7Vehicle",
        Ok(
            "Vehicle::SetOutOfCarSimState(void)",
        ),
    ),
    (
        "SetLocomotion__7Vehicle21VehicleLocomotionType",
        Ok(
            "Vehicle::SetLocomotion(VehicleLocomotionType)",
        ),
    ),
    (
        "IsAFlappingJoint__7Vehiclei",
        Ok(
            "Vehicle::IsAFlappingJoint(int)",
        ),
    ),
    (
        "CalculateDragCoeffBasedOnTopSpeed__7Vehicle",
        Ok(
            "Vehicle::CalculateDragCoeffBasedOnTopSpeed(void)",
        ),
    ),
    (
        "IsJointAWheel__7Vehiclei",
        Ok(
            "Vehicle::IsJointAWheel(int)",
        ),
    ),
    (
        "SetWheelCorrectionOffset__7VehicleifRQ218RadicalMathLibrary6VectorT3",
        Ok(
            "Vehicle::SetWheelCorrectionOffset(int, float, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "GetCollisionAreaIndexAndAddSelf__7Vehicle",
        Ok(
            "Vehicle::GetCollisionAreaIndexAndAddSelf(void)",
        ),
    ),
    (
        "RemoveSelfAndFreeCollisionAreaIndex__7Vehicle",
        Ok(
            "Vehicle::RemoveSelfAndFreeCollisionAreaIndex(void)",
        ),
    ),
    (
        "AddSelfToCollisionManager__7Vehicle",
        Ok(
            "Vehicle::AddSelfToCollisionManager(void)",
        ),
    ),
    (
        "RemoveSelfFromCollisionManager__7Vehicle",
        Ok(
            "Vehicle::RemoveSelfFromCollisionManager(void)",
        ),
    ),
    (
        "CalculateValuesBasedOnDesignerParams__7Vehicle",
        Ok(
            "Vehicle::CalculateValuesBasedOnDesignerParams(void)",
        ),
    ),
    (
        "TrafficSetTransform__7VehicleRQ218RadicalMathLibrary6Matrix",
        Ok(
            "Vehicle::TrafficSetTransform(RadicalMathLibrary::Matrix &)",
        ),
    ),
    (
        "GetRestHeightAboveGround__7Vehicle",
        Ok(
            "Vehicle::GetRestHeightAboveGround(void)",
        ),
    ),
    (
        "SetTransform__7VehicleRQ218RadicalMathLibrary6Matrix",
        Ok(
            "Vehicle::SetTransform(RadicalMathLibrary::Matrix &)",
        ),
    ),
    (
        "SetPosition__7VehiclePQ218RadicalMathLibrary6Vector",
        Ok(
            "Vehicle::SetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetInitialPositionGroundOffsetAutoAdjust__7VehiclePQ218RadicalMathLibrary6Vector",
        Ok(
            "Vehicle::SetInitialPositionGroundOffsetAutoAdjust(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetInitialPosition__7VehiclePQ218RadicalMathLibrary6Vector",
        Ok(
            "Vehicle::SetInitialPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetResetFacingInRadians__7Vehiclef",
        Ok(
            "Vehicle::SetResetFacingInRadians(float)",
        ),
    ),
    (
        "Reset__7VehiclebT1",
        Ok(
            "Vehicle::Reset(bool, bool)",
        ),
    ),
    (
        "ResetFlagsOnly__7Vehicleb",
        Ok(
            "Vehicle::ResetFlagsOnly(bool)",
        ),
    ),
    (
        "ResetOnSpot__7VehiclebT1",
        Ok(
            "Vehicle::ResetOnSpot(bool, bool)",
        ),
    ),
    (
        "GetFacingInRadians__7Vehicle",
        Ok(
            "Vehicle::GetFacingInRadians(void)",
        ),
    ),
    (
        "FacingIntoRad__7VehicleGQ218RadicalMathLibrary6Vector",
        Ok(
            "Vehicle::FacingIntoRad(RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "SetGas__7Vehiclef",
        Ok(
            "Vehicle::SetGas(float)",
        ),
    ),
    (
        "SetBrake__7Vehiclef",
        Ok(
            "Vehicle::SetBrake(float)",
        ),
    ),
    (
        "SetEBrake__7Vehicleff",
        Ok(
            "Vehicle::SetEBrake(float, float)",
        ),
    ),
    (
        "SetWheelTurnAngle__7Vehiclefbf",
        Ok(
            "Vehicle::SetWheelTurnAngle(float, bool, float)",
        ),
    ),
    (
        "SetWheelTurnAngleDirectlyInRadiansForDusitOnly__7Vehiclef",
        Ok(
            "Vehicle::SetWheelTurnAngleDirectlyInRadiansForDusitOnly(float)",
        ),
    ),
    (
        "SetReverse__7Vehiclef",
        Ok(
            "Vehicle::SetReverse(float)",
        ),
    ),
    (
        "PreSubstepUpdate__7Vehiclef",
        Ok(
            "Vehicle::PreSubstepUpdate(float)",
        ),
    ),
    (
        "PreCollisionPrep__7Vehiclefb",
        Ok(
            "Vehicle::PreCollisionPrep(float, bool)",
        ),
    ),
    (
        "SetNoDamperDownFlagOnWheel__7Vehiclei",
        Ok(
            "Vehicle::SetNoDamperDownFlagOnWheel(int)",
        ),
    ),
    (
        "CalculateSuspensionLocationAndVelocity__7Vehicle",
        Ok(
            "Vehicle::CalculateSuspensionLocationAndVelocity(void)",
        ),
    ),
    (
        "JumpOnHorn__7Vehiclef",
        Ok(
            "Vehicle::JumpOnHorn(float)",
        ),
    ),
    (
        "TurboOnHorn__7Vehicle",
        Ok(
            "Vehicle::TurboOnHorn(void)",
        ),
    ),
    (
        "Update__7Vehiclef",
        Ok(
            "Vehicle::Update(float)",
        ),
    ),
    (
        "GetGroundY__7Vehicle",
        Ok(
            "Vehicle::GetGroundY(void)",
        ),
    ),
    (
        "PostSubstepUpdate__7Vehiclef",
        Ok(
            "Vehicle::PostSubstepUpdate(float)",
        ),
    ),
    (
        "BounceCharacters__7Vehiclef",
        Ok(
            "Vehicle::BounceCharacters(float)",
        ),
    ),
    (
        "MoveCharactersTowardsRestPosition__7Vehiclef",
        Ok(
            "Vehicle::MoveCharactersTowardsRestPosition(float)",
        ),
    ),
    (
        "ApplyDisplacementToCharacters__7Vehiclef",
        Ok(
            "Vehicle::ApplyDisplacementToCharacters(float)",
        ),
    ),
    (
        "RecordRestSeatingPositionsOnEntry__7Vehicle",
        Ok(
            "Vehicle::RecordRestSeatingPositionsOnEntry(void)",
        ),
    ),
    (
        "RestTest__7Vehicle",
        Ok(
            "Vehicle::RestTest(void)",
        ),
    ),
    (
        "SelfRestTest__7Vehicle",
        Ok(
            "Vehicle::SelfRestTest(void)",
        ),
    ),
    (
        "ZeroOutXZVelocity__7Vehicle",
        Ok(
            "Vehicle::ZeroOutXZVelocity(void)",
        ),
    ),
    (
        "SetGeometryVehicleWheelSmokeLevel__7Vehicle",
        Ok(
            "Vehicle::SetGeometryVehicleWheelSmokeLevel(void)",
        ),
    ),
    (
        "DSGUpdateAndMove__7Vehicle",
        Ok(
            "Vehicle::DSGUpdateAndMove(void)",
        ),
    ),
    (
        "UpdateGearAndRPM__7Vehicle",
        Ok(
            "Vehicle::UpdateGearAndRPM(void)",
        ),
    ),
    (
        "UpdateWheelRenderingInfo__7Vehiclef",
        Ok(
            "Vehicle::UpdateWheelRenderingInfo(float)",
        ),
    ),
    (
        "GetTransform__7Vehicle",
        Ok(
            "Vehicle::GetTransform(void)",
        ),
    ),
    (
        "pPosition__7Vehicle",
        Ok(
            "Vehicle::pPosition(void)",
        ),
    ),
    (
        "rPosition__7Vehicle",
        Ok(
            "Vehicle::rPosition(void)",
        ),
    ),
    (
        "Display__7Vehicle",
        Ok(
            "Vehicle::Display(void)",
        ),
    ),
    (
        "CarDisplay__7Vehicleb",
        Ok(
            "Vehicle::CarDisplay(bool)",
        ),
    ),
    (
        "GetSpeedKmh__7Vehicle",
        Ok(
            "Vehicle::GetSpeedKmh(void)",
        ),
    ),
    (
        "GetAccelMss__7Vehicle",
        Ok(
            "Vehicle::GetAccelMss(void)",
        ),
    ),
    (
        "GetSkidLevel__7Vehicle",
        Ok(
            "Vehicle::GetSkidLevel(void)",
        ),
    ),
    (
        "GetPosition__7VehiclePQ218RadicalMathLibrary6Vector",
        Ok(
            "Vehicle::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetHeading__7VehiclePQ218RadicalMathLibrary6Vector",
        Ok(
            "Vehicle::GetHeading(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetVUP__7VehiclePQ218RadicalMathLibrary6Vector",
        Ok(
            "Vehicle::GetVUP(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetVelocity__7VehiclePQ218RadicalMathLibrary6Vector",
        Ok(
            "Vehicle::GetVelocity(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetID__7Vehicle",
        Ok(
            "Vehicle::GetID(void)",
        ),
    ),
    (
        "IsCar__C7Vehicle",
        Ok(
            "Vehicle::IsCar(void) const",
        ),
    ),
    (
        "IsAirborn__7Vehicle",
        Ok(
            "Vehicle::IsAirborn(void)",
        ),
    ),
    (
        "IsUnstable__7Vehicle",
        Ok(
            "Vehicle::IsUnstable(void)",
        ),
    ),
    (
        "IsSafeToUpShift__7Vehicle",
        Ok(
            "Vehicle::IsSafeToUpShift(void)",
        ),
    ),
    (
        "IsQuickTurn__7Vehicle",
        Ok(
            "Vehicle::IsQuickTurn(void)",
        ),
    ),
    (
        "IsInReverse__7Vehicle",
        Ok(
            "Vehicle::IsInReverse(void)",
        ),
    ),
    (
        "GetTerrainIntersect__C7VehicleRQ218RadicalMathLibrary6VectorT1",
        Ok(
            "Vehicle::GetTerrainIntersect(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "IsMovingBackward__7Vehicle",
        Ok(
            "Vehicle::IsMovingBackward(void)",
        ),
    ),
    (
        "GetName__7Vehicle",
        Ok(
            "Vehicle::GetName(void)",
        ),
    ),
    (
        "GetPassengerLocation__C7Vehicle",
        Ok(
            "Vehicle::GetPassengerLocation(void) const",
        ),
    ),
    (
        "GetDriverLocation__C7Vehicle",
        Ok(
            "Vehicle::GetDriverLocation(void) const",
        ),
    ),
    (
        "PreReactToCollision__7VehiclePQ23sim8SimStateRQ23sim9Collision",
        Ok(
            "Vehicle::PreReactToCollision(sim::SimState *, sim::Collision &)",
        ),
    ),
    (
        "ResetDamageState__7Vehicle",
        Ok(
            "Vehicle::ResetDamageState(void)",
        ),
    ),
    (
        "PostReactToCollision__7VehicleRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "Vehicle::PostReactToCollision(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "DusitsStunTest__7Vehiclef",
        Ok(
            "Vehicle::DusitsStunTest(float)",
        ),
    ),
    (
        "TestWhoHitWhom__7VehiclePQ23sim8SimStateT1fRCQ23sim9Collision",
        Ok(
            "Vehicle::TestWhoHitWhom(sim::SimState *, sim::SimState *, float, sim::Collision const &)",
        ),
    ),
    (
        "SwitchOnDamageTypeAndApply__7VehiclefRQ23sim9Collision",
        Ok(
            "Vehicle::SwitchOnDamageTypeAndApply(float, sim::Collision &)",
        ),
    ),
    (
        "CarOnCarDamageLogic__7VehiclebPQ23sim8SimStateT2",
        Ok(
            "Vehicle::CarOnCarDamageLogic(bool, sim::SimState *, sim::SimState *)",
        ),
    ),
    (
        "CameraShakeTest__7VehiclefRQ23sim9Collision",
        Ok(
            "Vehicle::CameraShakeTest(float, sim::Collision &)",
        ),
    ),
    (
        "SparksTest__7VehiclefRQ23sim9Collision",
        Ok(
            "Vehicle::SparksTest(float, sim::Collision &)",
        ),
    ),
    (
        "VisualDamageType1__7VehiclefQ27Vehicle14DamageLocation",
        Ok(
            "Vehicle::VisualDamageType1(float, Vehicle::DamageLocation)",
        ),
    ),
    (
        "VisualDamageType2__7VehiclefQ27Vehicle14DamageLocation",
        Ok(
            "Vehicle::VisualDamageType2(float, Vehicle::DamageLocation)",
        ),
    ),
    (
        "VisualDamageType3__7Vehiclef",
        Ok(
            "Vehicle::VisualDamageType3(float)",
        ),
    ),
    (
        "SyncVisualDamage__7Vehiclef",
        Ok(
            "Vehicle::SyncVisualDamage(float)",
        ),
    ),
    (
        "TranslateCollisionIntoLocation__7VehicleRQ23sim9Collision",
        Ok(
            "Vehicle::TranslateCollisionIntoLocation(sim::Collision &)",
        ),
    ),
    (
        "BeefUpHitPointsOnTrafficCarsWhenUserDriving__7Vehicle",
        Ok(
            "Vehicle::BeefUpHitPointsOnTrafficCarsWhenUserDriving(void)",
        ),
    ),
    (
        "GetVehicleLifePercentage__7Vehiclef",
        Ok(
            "Vehicle::GetVehicleLifePercentage(float)",
        ),
    ),
    (
        "TriggerDamage__7Vehiclefb",
        Ok(
            "Vehicle::TriggerDamage(float, bool)",
        ),
    ),
    (
        "NeedToOpenDoor__7VehicleQ27Vehicle4Door",
        Ok(
            "Vehicle::NeedToOpenDoor(Vehicle::Door)",
        ),
    ),
    (
        "NeedToCloseDoor__7VehicleQ27Vehicle4Door",
        Ok(
            "Vehicle::NeedToCloseDoor(Vehicle::Door)",
        ),
    ),
    (
        "HasActiveDoor__7VehicleQ27Vehicle4Door",
        Ok(
            "Vehicle::HasActiveDoor(Vehicle::Door)",
        ),
    ),
    (
        "UpdateDoorState__7Vehicle",
        Ok(
            "Vehicle::UpdateDoorState(void)",
        ),
    ),
    (
        "ReleaseDoors__7Vehicle",
        Ok(
            "Vehicle::ReleaseDoors(void)",
        ),
    ),
    (
        "PlayExplosionEffect__7Vehicle",
        Ok(
            "Vehicle::PlayExplosionEffect(void)",
        ),
    ),
    (
        "AddToSimulation__7Vehicle",
        Ok(
            "Vehicle::AddToSimulation(void)",
        ),
    ),
    (
        "ApplyForce__7VehicleRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "Vehicle::ApplyForce(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "AttachCollectible__7VehicleP20StatePropCollectible",
        Ok(
            "Vehicle::AttachCollectible(StatePropCollectible *)",
        ),
    ),
    (
        "GetAttachedCollectible__7Vehicle",
        Ok(
            "Vehicle::GetAttachedCollectible(void)",
        ),
    ),
    (
        "DetachCollectible__7VehicleRCQ218RadicalMathLibrary6Vectorb",
        Ok(
            "Vehicle::DetachCollectible(RadicalMathLibrary::Vector const &, bool)",
        ),
    ),
    (
        "MoveDoor__7VehicleQ27Vehicle4DoorQ27Vehicle10DoorActionf",
        Ok(
            "Vehicle::MoveDoor(Vehicle::Door, Vehicle::DoorAction, float)",
        ),
    ),
    (
        "CalcDoor__7VehicleUiUif",
        Ok(
            "Vehicle::CalcDoor(unsigned int, unsigned int, float)",
        ),
    ),
    (
        "CalcDoors__7Vehicle",
        Ok(
            "Vehicle::CalcDoors(void)",
        ),
    ),
    (
        "SetDriverName__7VehiclePCc",
        Ok(
            "Vehicle::SetDriverName(char const *)",
        ),
    ),
    (
        "GetDriverName__7Vehicle",
        Ok(
            "Vehicle::GetDriverName(void)",
        ),
    ),
    (
        "SetDriver__7VehicleP9Character",
        Ok(
            "Vehicle::SetDriver(Character *)",
        ),
    ),
    (
        "SetShadowAdjustments__7VehiclePA1_f",
        Ok(
            "Vehicle::SetShadowAdjustments(float (*)[2])",
        ),
    ),
    (
        "SetShininess__7VehicleUc",
        Ok(
            "Vehicle::SetShininess(unsigned char)",
        ),
    ),
    (
        "GetTopSpeed__C7Vehicle",
        Ok(
            "Vehicle::GetTopSpeed(void) const",
        ),
    ),
    (
        "__7Vehicle",
        Ok(
            "Vehicle::Vehicle(void)",
        ),
    ),
    (
        "Init__7VehiclePCcPQ23sim14SimEnvironment21VehicleLocomotionType11VehicleTypeb",
        Ok(
            "Vehicle::Init(char const *, sim::SimEnvironment *, VehicleLocomotionType, VehicleType, bool)",
        ),
    ),
    (
        "InitEventLocator__7Vehicle",
        Ok(
            "Vehicle::InitEventLocator(void)",
        ),
    ),
    (
        "AssignEnumBasedOnName__7Vehicle",
        Ok(
            "Vehicle::AssignEnumBasedOnName(void)",
        ),
    ),
    (
        "SetupRadDebugWatchStuff__7Vehicle",
        Ok(
            "Vehicle::SetupRadDebugWatchStuff(void)",
        ),
    ),
    (
        "_$_7Vehicle",
        Ok(
            "Vehicle::~Vehicle(void)",
        ),
    ),
    (
        "CreateLocomotions__7Vehicle",
        Ok(
            "Vehicle::CreateLocomotions(void)",
        ),
    ),
    (
        "InitWheelsAndLinkSuspensionJointDrivers__7Vehicle",
        Ok(
            "Vehicle::InitWheelsAndLinkSuspensionJointDrivers(void)",
        ),
    ),
    (
        "InitFlappingJoints__7Vehicle",
        Ok(
            "Vehicle::InitFlappingJoints(void)",
        ),
    ),
    (
        "AddFlappingJoint__7VehiclePCcT1RQ218RadicalMathLibrary6VectorT3iPi",
        Ok(
            "Vehicle::AddFlappingJoint(char const *, char const *, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, int, int *)",
        ),
    ),
    (
        "InitGears__7Vehicle",
        Ok(
            "Vehicle::InitGears(void)",
        ),
    ),
    (
        "SetupPhysicsProperties__7Vehicle",
        Ok(
            "Vehicle::SetupPhysicsProperties(void)",
        ),
    ),
    (
        "InitGroundPlane__7Vehicle",
        Ok(
            "Vehicle::InitGroundPlane(void)",
        ),
    ),
    (
        "FetchWheelMapping__7Vehicle",
        Ok(
            "Vehicle::FetchWheelMapping(void)",
        ),
    ),
    (
        "GetWheel0Offset__7Vehicle",
        Ok(
            "Vehicle::GetWheel0Offset(void)",
        ),
    ),
    (
        "GetWheel1Offset__7Vehicle",
        Ok(
            "Vehicle::GetWheel1Offset(void)",
        ),
    ),
    (
        "InitSimState__7VehiclePQ23sim14SimEnvironment",
        Ok(
            "Vehicle::InitSimState(sim::SimEnvironment *)",
        ),
    ),
    (
        "CreatePoseEngine__7Vehicle",
        Ok(
            "Vehicle::CreatePoseEngine(void)",
        ),
    ),
    (
        "__5Wheel",
        Ok(
            "Wheel::Wheel(void)",
        ),
    ),
    (
        "_$_5Wheel",
        Ok(
            "Wheel::~Wheel(void)",
        ),
    ),
    (
        "Init__5WheelP7VehicleifbT4",
        Ok(
            "Wheel::Init(Vehicle *, int, float, bool, bool)",
        ),
    ),
    (
        "SetDesignerParams__5WheelPQ27Vehicle14DesignerParams",
        Ok(
            "Wheel::SetDesignerParams(Vehicle::DesignerParams *)",
        ),
    ),
    (
        "CalculateRenderingSpinUpRateBase__5Wheelf",
        Ok(
            "Wheel::CalculateRenderingSpinUpRateBase(float)",
        ),
    ),
    (
        "CalculateRotAngle__5Wheelf",
        Ok(
            "Wheel::CalculateRotAngle(float)",
        ),
    ),
    (
        "SetYOffsetFromCurrentPosition__5Wheelf",
        Ok(
            "Wheel::SetYOffsetFromCurrentPosition(float)",
        ),
    ),
    (
        "ResolveOffset__5Wheel",
        Ok(
            "Wheel::ResolveOffset(void)",
        ),
    ),
    (
        "GetYCorrectionValue__5Wheel",
        Ok(
            "Wheel::GetYCorrectionValue(void)",
        ),
    ),
    (
        "Reset__5Wheel",
        Ok(
            "Wheel::Reset(void)",
        ),
    ),
    (
        "__20VehicleEventListenerP7Vehicle",
        Ok(
            "VehicleEventListener::VehicleEventListener(Vehicle *)",
        ),
    ),
    (
        "_$_20VehicleEventListener",
        Ok(
            "VehicleEventListener::~VehicleEventListener(void)",
        ),
    ),
    (
        "HandleEvent__20VehicleEventListener9EventEnumPv",
        Ok(
            "VehicleEventListener::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__19TrafficBodyDrawable",
        Ok(
            "TrafficBodyDrawable::TrafficBodyDrawable(void)",
        ),
    ),
    (
        "_$_19TrafficBodyDrawable",
        Ok(
            "TrafficBodyDrawable::~TrafficBodyDrawable(void)",
        ),
    ),
    (
        "SetBodyPropDrawable__19TrafficBodyDrawableP9tDrawable",
        Ok(
            "TrafficBodyDrawable::SetBodyPropDrawable(tDrawable *)",
        ),
    ),
    (
        "SetBodyShader__19TrafficBodyDrawableP7tShader",
        Ok(
            "TrafficBodyDrawable::SetBodyShader(tShader *)",
        ),
    ),
    (
        "Display__19TrafficBodyDrawable",
        Ok(
            "TrafficBodyDrawable::Display(void)",
        ),
    ),
    (
        "ProcessShaders__19TrafficBodyDrawableRQ29tDrawable14ShaderCallback",
        Ok(
            "TrafficBodyDrawable::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZPQ215GeometryVehicle22VehicleFrameControllerZPQ215GeometryVehicle22VehicleFrameController_X01X01X11G12__false_type_X11",
        Ok(
            "GeometryVehicle::VehicleFrameController * __uninitialized_copy_aux<GeometryVehicle::VehicleFrameController *, GeometryVehicle::VehicleFrameController *>(GeometryVehicle::VehicleFrameController *, GeometryVehicle::VehicleFrameController *, GeometryVehicle::VehicleFrameController *, __false_type)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2ZQ215GeometryVehicle22VehicleFrameControllerZt7s2alloc1ZQ215GeometryVehicle22VehicleFrameControllerPQ215GeometryVehicle22VehicleFrameControllerRCQ215GeometryVehicle22VehicleFrameController",
        Ok(
            "vector<GeometryVehicle::VehicleFrameController, s2alloc<GeometryVehicle::VehicleFrameController> >::_M_insert_aux(GeometryVehicle::VehicleFrameController *, GeometryVehicle::VehicleFrameController const &)",
        ),
    ),
    (
        "__tf7Vehicle",
        Ok(
            "Vehicle type_info function",
        ),
    ),
    (
        "__tf19TrafficBodyDrawable",
        Ok(
            "TrafficBodyDrawable type_info function",
        ),
    ),
    (
        "_$_Q23sim26PhysicsJointMatrixModifier",
        Ok(
            "sim::PhysicsJointMatrixModifier::~PhysicsJointMatrixModifier(void)",
        ),
    ),
    (
        "__tfQ23sim26PhysicsJointMatrixModifier",
        Ok(
            "sim::PhysicsJointMatrixModifier type_info function",
        ),
    ),
    (
        "_$_Q23sim28PhysicsJointInertialEffector",
        Ok(
            "sim::PhysicsJointInertialEffector::~PhysicsJointInertialEffector(void)",
        ),
    ),
    (
        "__tfQ23sim28PhysicsJointInertialEffector",
        Ok(
            "sim::PhysicsJointInertialEffector type_info function",
        ),
    ),
    (
        "__tf17VehicleLocomotion",
        Ok(
            "VehicleLocomotion type_info function",
        ),
    ),
    (
        "__tf17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion type_info function",
        ),
    ),
    (
        "__tf28RedBrickCollisionSolverAgent",
        Ok(
            "RedBrickCollisionSolverAgent type_info function",
        ),
    ),
    (
        "_$_16RootMatrixDriver",
        Ok(
            "RootMatrixDriver::~RootMatrixDriver(void)",
        ),
    ),
    (
        "__tf16RootMatrixDriver",
        Ok(
            "RootMatrixDriver type_info function",
        ),
    ),
    (
        "__tf21SuspensionJointDriver",
        Ok(
            "SuspensionJointDriver type_info function",
        ),
    ),
    (
        "__tf17TrafficLocomotion",
        Ok(
            "TrafficLocomotion type_info function",
        ),
    ),
    (
        "__tf20VehicleEventListener",
        Ok(
            "VehicleEventListener type_info function",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3ZQ215GeometryVehicle22VehicleFrameControllerZt7s2alloc1ZQ215GeometryVehicle22VehicleFrameControllerb0",
        Ok(
            "_Vector_alloc_base<GeometryVehicle::VehicleFrameController, s2alloc<GeometryVehicle::VehicleFrameController>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "__Q27Vehicle14DesignerParams",
        Ok(
            "Vehicle::DesignerParams::DesignerParams(void)",
        ),
    ),
    (
        "SetShadow__7VehicleP11tShadowMesh",
        Ok(
            "Vehicle::SetShadow(tShadowMesh *)",
        ),
    ),
    (
        "GetSimState__C7Vehicle",
        Ok(
            "Vehicle::GetSimState(void) const",
        ),
    ),
    (
        "mpSimState__C7Vehicle",
        Ok(
            "Vehicle::mpSimState(void) const",
        ),
    ),
    (
        "OnSetSimState__7VehiclePQ23sim8SimState",
        Ok(
            "Vehicle::OnSetSimState(sim::SimState *)",
        ),
    ),
    (
        "GetFirstPersonPosition__7VehiclePQ218RadicalMathLibrary6Vector",
        Ok(
            "Vehicle::GetFirstPersonPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetAIRef__7Vehicle",
        Ok(
            "Vehicle::GetAIRef(void)",
        ),
    ),
    (
        "GetGroundPlaneAIRef__7Vehicle",
        Ok(
            "Vehicle::GetGroundPlaneAIRef(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z19tBillboardQuadGroup",
        Ok(
            "radLoadInventory::SafeCast<tBillboardQuadGroup>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z17tEffectController",
        Ok(
            "radLoadInventory::SafeCast<tEffectController>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z24tPoseAnimationController",
        Ok(
            "radLoadInventory::SafeCast<tPoseAnimationController>::SafeCast(void)",
        ),
    ),
    (
        "GetMinimumJointIndex__CQ23sim26PhysicsJointMatrixModifier",
        Ok(
            "sim::PhysicsJointMatrixModifier::GetMinimumJointIndex(void) const",
        ),
    ),
    (
        "GetPriority__CQ23sim26PhysicsJointMatrixModifier",
        Ok(
            "sim::PhysicsJointMatrixModifier::GetPriority(void) const",
        ),
    ),
    (
        "Advance__Q23sim26PhysicsJointMatrixModifierf",
        Ok(
            "sim::PhysicsJointMatrixModifier::Advance(float)",
        ),
    ),
    (
        "Update__Q23sim26PhysicsJointMatrixModifierPQ25poser4Pose",
        Ok(
            "sim::PhysicsJointMatrixModifier::Update(poser::Pose *)",
        ),
    ),
    (
        "GetMinimumJointIndex__CQ23sim28PhysicsJointInertialEffector",
        Ok(
            "sim::PhysicsJointInertialEffector::GetMinimumJointIndex(void) const",
        ),
    ),
    (
        "GetPriority__CQ23sim28PhysicsJointInertialEffector",
        Ok(
            "sim::PhysicsJointInertialEffector::GetPriority(void) const",
        ),
    ),
    (
        "SetIsEnabled__Q23sim28PhysicsJointInertialEffectorb",
        Ok(
            "sim::PhysicsJointInertialEffector::SetIsEnabled(bool)",
        ),
    ),
    (
        "Advance__Q23sim28PhysicsJointInertialEffectorf",
        Ok(
            "sim::PhysicsJointInertialEffector::Advance(float)",
        ),
    ),
    (
        "Update__Q23sim28PhysicsJointInertialEffectorPQ25poser4Pose",
        Ok(
            "sim::PhysicsJointInertialEffector::Update(poser::Pose *)",
        ),
    ),
    (
        "_$_17VehicleLocomotion",
        Ok(
            "VehicleLocomotion::~VehicleLocomotion(void)",
        ),
    ),
    (
        "__Q217PhysicsLocomotion21TerrainIntersectCache",
        Ok(
            "PhysicsLocomotion::TerrainIntersectCache::TerrainIntersectCache(void)",
        ),
    ),
    (
        "_$_25WorldCollisionSolverAgent",
        Ok(
            "WorldCollisionSolverAgent::~WorldCollisionSolverAgent(void)",
        ),
    ),
    (
        "__25WorldCollisionSolverAgent",
        Ok(
            "WorldCollisionSolverAgent::WorldCollisionSolverAgent(void)",
        ),
    ),
    (
        "GetMinimumJointIndex__C16RootMatrixDriver",
        Ok(
            "RootMatrixDriver::GetMinimumJointIndex(void) const",
        ),
    ),
    (
        "GetPriority__C16RootMatrixDriver",
        Ok(
            "RootMatrixDriver::GetPriority(void) const",
        ),
    ),
    (
        "Advance__16RootMatrixDriverf",
        Ok(
            "RootMatrixDriver::Advance(float)",
        ),
    ),
    (
        "Advance__21SuspensionJointDriverf",
        Ok(
            "SuspensionJointDriver::Advance(float)",
        ),
    ),
    (
        "CompareNormalAndHeight__17TrafficLocomotioniRQ218RadicalMathLibrary6VectorT2",
        Ok(
            "TrafficLocomotion::CompareNormalAndHeight(int, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z19tBillboardQuadGroup",
        Ok(
            "radLoadInventory::SafeCast<tBillboardQuadGroup> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z17tEffectController",
        Ok(
            "radLoadInventory::SafeCast<tEffectController> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z24tPoseAnimationController",
        Ok(
            "radLoadInventory::SafeCast<tPoseAnimationController> type_info function",
        ),
    ),
    (
        "__tf25WorldCollisionSolverAgent",
        Ok(
            "WorldCollisionSolverAgent type_info function",
        ),
    ),
    (
        "ResetCollisionFlags__25WorldCollisionSolverAgent",
        Ok(
            "WorldCollisionSolverAgent::ResetCollisionFlags(void)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z24tPoseAnimationControllerP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tPoseAnimationController>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z17tEffectControllerP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tEffectController>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z19tBillboardQuadGroupP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tBillboardQuadGroup>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$__15GeometryVehicle",
        Ok(
            "global constructors keyed to GeometryVehicle::GeometryVehicle(void)",
        ),
    ),
    (
        "_$_13VehicleWander",
        Ok(
            "VehicleWander::~VehicleWander(void)",
        ),
    ),
    (
        "Tick__13VehicleWanderP7Vehicle",
        Ok(
            "VehicleWander::Tick(Vehicle *)",
        ),
    ),
    (
        "__19AiVehicleControllerP7Vehicle",
        Ok(
            "AiVehicleController::AiVehicleController(Vehicle *)",
        ),
    ),
    (
        "_$_19AiVehicleController",
        Ok(
            "AiVehicleController::~AiVehicleController(void)",
        ),
    ),
    (
        "Update__19AiVehicleControllerf",
        Ok(
            "AiVehicleController::Update(float)",
        ),
    ),
    (
        "GetGas__C19AiVehicleController",
        Ok(
            "AiVehicleController::GetGas(void) const",
        ),
    ),
    (
        "GetThrottle__C19AiVehicleController",
        Ok(
            "AiVehicleController::GetThrottle(void) const",
        ),
    ),
    (
        "GetBrake__C19AiVehicleController",
        Ok(
            "AiVehicleController::GetBrake(void) const",
        ),
    ),
    (
        "GetSteering__C19AiVehicleControllerRb",
        Ok(
            "AiVehicleController::GetSteering(bool &) const",
        ),
    ),
    (
        "GetSteerLeft__C19AiVehicleController",
        Ok(
            "AiVehicleController::GetSteerLeft(void) const",
        ),
    ),
    (
        "GetSteerRight__C19AiVehicleController",
        Ok(
            "AiVehicleController::GetSteerRight(void) const",
        ),
    ),
    (
        "GetHandBrake__C19AiVehicleController",
        Ok(
            "AiVehicleController::GetHandBrake(void) const",
        ),
    ),
    (
        "GetReverse__C19AiVehicleController",
        Ok(
            "AiVehicleController::GetReverse(void) const",
        ),
    ),
    (
        "GetHorn__C19AiVehicleController",
        Ok(
            "AiVehicleController::GetHorn(void) const",
        ),
    ),
    (
        "__22HumanVehicleController",
        Ok(
            "HumanVehicleController::HumanVehicleController(void)",
        ),
    ),
    (
        "Create__22HumanVehicleControllerP7VehicleP15VehicleMappablei",
        Ok(
            "HumanVehicleController::Create(Vehicle *, VehicleMappable *, int)",
        ),
    ),
    (
        "SetWheel__22HumanVehicleControllerP15VehicleMappableUi",
        Ok(
            "HumanVehicleController::SetWheel(VehicleMappable *, unsigned int)",
        ),
    ),
    (
        "_$_22HumanVehicleController",
        Ok(
            "HumanVehicleController::~HumanVehicleController(void)",
        ),
    ),
    (
        "ReleaseVehicleMappable__22HumanVehicleController",
        Ok(
            "HumanVehicleController::ReleaseVehicleMappable(void)",
        ),
    ),
    (
        "GetGas__C22HumanVehicleController",
        Ok(
            "HumanVehicleController::GetGas(void) const",
        ),
    ),
    (
        "GetThrottle__C22HumanVehicleController",
        Ok(
            "HumanVehicleController::GetThrottle(void) const",
        ),
    ),
    (
        "GetBrake__C22HumanVehicleController",
        Ok(
            "HumanVehicleController::GetBrake(void) const",
        ),
    ),
    (
        "GetSteering__C22HumanVehicleControllerRb",
        Ok(
            "HumanVehicleController::GetSteering(bool &) const",
        ),
    ),
    (
        "GetSteerLeft__C22HumanVehicleController",
        Ok(
            "HumanVehicleController::GetSteerLeft(void) const",
        ),
    ),
    (
        "GetSteerRight__C22HumanVehicleController",
        Ok(
            "HumanVehicleController::GetSteerRight(void) const",
        ),
    ),
    (
        "GetReverse__C22HumanVehicleController",
        Ok(
            "HumanVehicleController::GetReverse(void) const",
        ),
    ),
    (
        "GetHandBrake__C22HumanVehicleController",
        Ok(
            "HumanVehicleController::GetHandBrake(void) const",
        ),
    ),
    (
        "GetHorn__C22HumanVehicleController",
        Ok(
            "HumanVehicleController::GetHorn(void) const",
        ),
    ),
    (
        "Reset__22HumanVehicleController",
        Ok(
            "HumanVehicleController::Reset(void)",
        ),
    ),
    (
        "GetMappable__C22HumanVehicleController",
        Ok(
            "HumanVehicleController::GetMappable(void) const",
        ),
    ),
    (
        "Update__22HumanVehicleControllerf",
        Ok(
            "HumanVehicleController::Update(float)",
        ),
    ),
    (
        "Init__22HumanVehicleController",
        Ok(
            "HumanVehicleController::Init(void)",
        ),
    ),
    (
        "Shutdown__22HumanVehicleController",
        Ok(
            "HumanVehicleController::Shutdown(void)",
        ),
    ),
    (
        "HandleEvent__22HumanVehicleController9EventEnumPv",
        Ok(
            "HumanVehicleController::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "__17VehicleController",
        Ok(
            "VehicleController::VehicleController(void)",
        ),
    ),
    (
        "_$_17VehicleController",
        Ok(
            "VehicleController::~VehicleController(void)",
        ),
    ),
    (
        "GetVehicle__C17VehicleController",
        Ok(
            "VehicleController::GetVehicle(void) const",
        ),
    ),
    (
        "__15VehicleMappable",
        Ok(
            "VehicleMappable::VehicleMappable(void)",
        ),
    ),
    (
        "_$_15VehicleMappable",
        Ok(
            "VehicleMappable::~VehicleMappable(void)",
        ),
    ),
    (
        "ReleaseController__15VehicleMappable",
        Ok(
            "VehicleMappable::ReleaseController(void)",
        ),
    ),
    (
        "OnButton__15VehicleMappableiiPC6Button",
        Ok(
            "VehicleMappable::OnButton(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonUp__15VehicleMappableiiPC6Button",
        Ok(
            "VehicleMappable::OnButtonUp(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonDown__15VehicleMappableiiPC6Button",
        Ok(
            "VehicleMappable::OnButtonDown(int, int, Button const *)",
        ),
    ),
    (
        "LoadControllerMappings__15VehicleMappableUi",
        Ok(
            "VehicleMappable::LoadControllerMappings(unsigned int)",
        ),
    ),
    (
        "SetController__15VehicleMappableP22HumanVehicleController",
        Ok(
            "VehicleMappable::SetController(HumanVehicleController *)",
        ),
    ),
    (
        "__tf17VehicleController",
        Ok(
            "VehicleController type_info function",
        ),
    ),
    (
        "__tf19AiVehicleController",
        Ok(
            "AiVehicleController type_info function",
        ),
    ),
    (
        "__tf13VehicleWander",
        Ok(
            "VehicleWander type_info function",
        ),
    ),
    (
        "__tf22HumanVehicleController",
        Ok(
            "HumanVehicleController type_info function",
        ),
    ),
    (
        "__tf15VehicleMappable",
        Ok(
            "VehicleMappable type_info function",
        ),
    ),
    (
        "Update__17VehicleControllerf",
        Ok(
            "VehicleController::Update(float)",
        ),
    ),
    (
        "Init__17VehicleController",
        Ok(
            "VehicleController::Init(void)",
        ),
    ),
    (
        "Shutdown__17VehicleController",
        Ok(
            "VehicleController::Shutdown(void)",
        ),
    ),
    (
        "InitDefaultModelGroups__14TrafficManager",
        Ok(
            "TrafficManager::InitDefaultModelGroups(void)",
        ),
    ),
    (
        "GetSpawnController__14TrafficManager",
        Ok(
            "TrafficManager::GetSpawnController(void)",
        ),
    ),
    (
        "GetInstance__14TrafficManager",
        Ok(
            "TrafficManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__14TrafficManager",
        Ok(
            "TrafficManager::DestroyInstance(void)",
        ),
    ),
    (
        "HandleEvent__14TrafficManager9EventEnumPv",
        Ok(
            "TrafficManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Init__14TrafficManager",
        Ok(
            "TrafficManager::Init(void)",
        ),
    ),
    (
        "ClearOutOfSightTraffic__14TrafficManager",
        Ok(
            "TrafficManager::ClearOutOfSightTraffic(void)",
        ),
    ),
    (
        "UpdateQueuedTrafficHorns__14TrafficManagerUi",
        Ok(
            "TrafficManager::UpdateQueuedTrafficHorns(unsigned int)",
        ),
    ),
    (
        "Update__14TrafficManagerUi",
        Ok(
            "TrafficManager::Update(unsigned int)",
        ),
    ),
    (
        "ClearTrafficOutsideSphere__14TrafficManagerRCQ218RadicalMathLibrary6Sphere",
        Ok(
            "TrafficManager::ClearTrafficOutsideSphere(RadicalMathLibrary::Sphere const &)",
        ),
    ),
    (
        "ClearTrafficInSphere__14TrafficManagerRCQ218RadicalMathLibrary6Sphere",
        Ok(
            "TrafficManager::ClearTrafficInSphere(RadicalMathLibrary::Sphere const &)",
        ),
    ),
    (
        "RemoveTraffic__14TrafficManagerP7Vehicle",
        Ok(
            "TrafficManager::RemoveTraffic(Vehicle *)",
        ),
    ),
    (
        "EnableTraffic__14TrafficManager",
        Ok(
            "TrafficManager::EnableTraffic(void)",
        ),
    ),
    (
        "DisableTraffic__14TrafficManager",
        Ok(
            "TrafficManager::DisableTraffic(void)",
        ),
    ),
    (
        "AddCharacterToStopFor__14TrafficManagerP9Character",
        Ok(
            "TrafficManager::AddCharacterToStopFor(Character *)",
        ),
    ),
    (
        "RemoveCharacterToStopFor__14TrafficManagerP9Character",
        Ok(
            "TrafficManager::RemoveCharacterToStopFor(Character *)",
        ),
    ),
    (
        "GenerateRandomColour__14TrafficManagerR10pddiColour",
        Ok(
            "TrafficManager::GenerateRandomColour(pddiColour &)",
        ),
    ),
    (
        "Deactivate__14TrafficManagerP7Vehicle",
        Ok(
            "TrafficManager::Deactivate(Vehicle *)",
        ),
    ),
    (
        "SwapInTrafficHusk__14TrafficManagerP7Vehicle",
        Ok(
            "TrafficManager::SwapInTrafficHusk(Vehicle *)",
        ),
    ),
    (
        "SetMaxTraffic__14TrafficManageri",
        Ok(
            "TrafficManager::SetMaxTraffic(int)",
        ),
    ),
    (
        "GetMaxTraffic__14TrafficManager",
        Ok(
            "TrafficManager::GetMaxTraffic(void)",
        ),
    ),
    (
        "__14TrafficManager",
        Ok(
            "TrafficManager::TrafficManager(void)",
        ),
    ),
    (
        "_$_14TrafficManager",
        Ok(
            "TrafficManager::~TrafficManager(void)",
        ),
    ),
    (
        "InitRandomVehicle__14TrafficManager",
        Ok(
            "TrafficManager::InitRandomVehicle(void)",
        ),
    ),
    (
        "Cleanup__14TrafficManager",
        Ok(
            "TrafficManager::Cleanup(void)",
        ),
    ),
    (
        "AddTraffic__14TrafficManagerP4LaneP14TrafficVehicle",
        Ok(
            "TrafficManager::AddTraffic(Lane *, TrafficVehicle *)",
        ),
    ),
    (
        "RemoveTraffic__14TrafficManageri",
        Ok(
            "TrafficManager::RemoveTraffic(int)",
        ),
    ),
    (
        "RemoveTrafficVehicle__14TrafficManagerP14TrafficVehicle",
        Ok(
            "TrafficManager::RemoveTrafficVehicle(TrafficVehicle *)",
        ),
    ),
    (
        "GetFreeTrafficVehicle__14TrafficManager",
        Ok(
            "TrafficManager::GetFreeTrafficVehicle(void)",
        ),
    ),
    (
        "DetermineDesiredSpeedKph__14TrafficManager",
        Ok(
            "TrafficManager::DetermineDesiredSpeedKph(void)",
        ),
    ),
    (
        "FindTrafficVehicle__14TrafficManagerP7Vehicle",
        Ok(
            "TrafficManager::FindTrafficVehicle(Vehicle *)",
        ),
    ),
    (
        "InitRandomHusk__14TrafficManagerP7Vehicle",
        Ok(
            "TrafficManager::InitRandomHusk(Vehicle *)",
        ),
    ),
    (
        "UpdateIntersection__14TrafficManagerUiP7VehicleRi",
        Ok(
            "TrafficManager::UpdateIntersection(unsigned int, Vehicle *, int &)",
        ),
    ),
    (
        "SetVehicleFadeAlpha__14TrafficManagerP7VehicleRCQ218RadicalMathLibrary6Vector",
        Ok(
            "TrafficManager::SetVehicleFadeAlpha(Vehicle *, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "AttemptResurrection__14TrafficManagerP14TrafficVehicle",
        Ok(
            "TrafficManager::AttemptResurrection(TrafficVehicle *)",
        ),
    ),
    (
        "__tf14TrafficVehicle",
        Ok(
            "TrafficVehicle type_info function",
        ),
    ),
    (
        "__tf14TrafficManager",
        Ok(
            "TrafficManager type_info function",
        ),
    ),
    (
        "_$_14TrafficVehicle",
        Ok(
            "TrafficVehicle::~TrafficVehicle(void)",
        ),
    ),
    (
        "__23ITrafficSpawnController",
        Ok(
            "ITrafficSpawnController::ITrafficSpawnController(void)",
        ),
    ),
    (
        "__tf23ITrafficSpawnController",
        Ok(
            "ITrafficSpawnController type_info function",
        ),
    ),
    (
        "__4Path",
        Ok(
            "Path::Path(void)",
        ),
    ),
    (
        "AllocateSegments__4Pathi",
        Ok(
            "Path::AllocateSegments(int)",
        ),
    ),
    (
        "_$_4Path",
        Ok(
            "Path::~Path(void)",
        ),
    ),
    (
        "GetPathSegmentByIndex__4Pathi",
        Ok(
            "Path::GetPathSegmentByIndex(int)",
        ),
    ),
    (
        "AddPedestrian__4Path",
        Ok(
            "Path::AddPedestrian(void)",
        ),
    ),
    (
        "RemovePedestrian__4Path",
        Ok(
            "Path::RemovePedestrian(void)",
        ),
    ),
    (
        "IsFull__C4Path",
        Ok(
            "Path::IsFull(void) const",
        ),
    ),
    (
        "GetInstance__11PathManager",
        Ok(
            "PathManager::GetInstance(void)",
        ),
    ),
    (
        "Destroy__11PathManager",
        Ok(
            "PathManager::Destroy(void)",
        ),
    ),
    (
        "__11PathManager",
        Ok(
            "PathManager::PathManager(void)",
        ),
    ),
    (
        "_$_11PathManager",
        Ok(
            "PathManager::~PathManager(void)",
        ),
    ),
    (
        "AllocatePaths__11PathManageri",
        Ok(
            "PathManager::AllocatePaths(int)",
        ),
    ),
    (
        "GetFreePath__11PathManager",
        Ok(
            "PathManager::GetFreePath(void)",
        ),
    ),
    (
        "Initialize__11PathSegmentP4PathiGQ218RadicalMathLibrary6VectorT3",
        Ok(
            "PathSegment::Initialize(Path *, int, RadicalMathLibrary::Vector, RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "__11PathSegment",
        Ok(
            "PathSegment::PathSegment(void)",
        ),
    ),
    (
        "_$_11PathSegment",
        Ok(
            "PathSegment::~PathSegment(void)",
        ),
    ),
    (
        "GetBoundingBox__11PathSegmentPQ218RadicalMathLibrary5Box3D",
        Ok(
            "PathSegment::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__11PathSegmentPQ218RadicalMathLibrary6Sphere",
        Ok(
            "PathSegment::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "Display__11PathSegment",
        Ok(
            "PathSegment::Display(void)",
        ),
    ),
    (
        "pPosition__11PathSegment",
        Ok(
            "PathSegment::pPosition(void)",
        ),
    ),
    (
        "rPosition__11PathSegment",
        Ok(
            "PathSegment::rPosition(void)",
        ),
    ),
    (
        "GetPosition__11PathSegmentPQ218RadicalMathLibrary6Vector",
        Ok(
            "PathSegment::GetPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "__tf11PathSegment",
        Ok(
            "PathSegment type_info function",
        ),
    ),
    (
        "__tf11PathManager",
        Ok(
            "PathManager type_info function",
        ),
    ),
    (
        "GetInstance__17PedestrianManager",
        Ok(
            "PedestrianManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__17PedestrianManager",
        Ok(
            "PedestrianManager::DestroyInstance(void)",
        ),
    ),
    (
        "InitDefaultModelGroups__17PedestrianManager",
        Ok(
            "PedestrianManager::InitDefaultModelGroups(void)",
        ),
    ),
    (
        "SetDefaultModelGroup__17PedestrianManageri",
        Ok(
            "PedestrianManager::SetDefaultModelGroup(int)",
        ),
    ),
    (
        "Init__17PedestrianManager",
        Ok(
            "PedestrianManager::Init(void)",
        ),
    ),
    (
        "Update__17PedestrianManagerUi",
        Ok(
            "PedestrianManager::Update(unsigned int)",
        ),
    ),
    (
        "RemovePed__17PedestrianManagerP9Character",
        Ok(
            "PedestrianManager::RemovePed(Character *)",
        ),
    ),
    (
        "RemoveAllPeds__17PedestrianManager",
        Ok(
            "PedestrianManager::RemoveAllPeds(void)",
        ),
    ),
    (
        "AllowAddingPeds__17PedestrianManagerb",
        Ok(
            "PedestrianManager::AllowAddingPeds(bool)",
        ),
    ),
    (
        "__17PedestrianManager",
        Ok(
            "PedestrianManager::PedestrianManager(void)",
        ),
    ),
    (
        "_$_17PedestrianManager",
        Ok(
            "PedestrianManager::~PedestrianManager(void)",
        ),
    ),
    (
        "DeactivatePed__17PedestrianManagerPQ217PedestrianManager16PedestrianStruct",
        Ok(
            "PedestrianManager::DeactivatePed(PedestrianManager::PedestrianStruct *)",
        ),
    ),
    (
        "GetRandomMinDistSqr__17PedestrianManager",
        Ok(
            "PedestrianManager::GetRandomMinDistSqr(void)",
        ),
    ),
    (
        "ActivatePed__17PedestrianManagerP11PathSegmentGQ218RadicalMathLibrary6Vector",
        Ok(
            "PedestrianManager::ActivatePed(PathSegment *, RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "SwapModels__17PedestrianManageriPQ217PedestrianManager16PedestrianStruct",
        Ok(
            "PedestrianManager::SwapModels(int, PedestrianManager::PedestrianStruct *)",
        ),
    ),
    (
        "GetRandomModel__17PedestrianManager",
        Ok(
            "PedestrianManager::GetRandomModel(void)",
        ),
    ),
    (
        "RegisterModel__17PedestrianManagerPCci",
        Ok(
            "PedestrianManager::RegisterModel(char const *, int)",
        ),
    ),
    (
        "UnregisterModel__17PedestrianManageri",
        Ok(
            "PedestrianManager::UnregisterModel(int)",
        ),
    ),
    (
        "UnregisterAllModels__17PedestrianManager",
        Ok(
            "PedestrianManager::UnregisterAllModels(void)",
        ),
    ),
    (
        "SwitchModelGroup__17PedestrianManageri",
        Ok(
            "PedestrianManager::SwitchModelGroup(int)",
        ),
    ),
    (
        "GetModelIDByName__17PedestrianManagerPCc",
        Ok(
            "PedestrianManager::GetModelIDByName(char const *)",
        ),
    ),
    (
        "SetModelGroup__17PedestrianManageriRCQ217PedestrianManager10ModelGroup",
        Ok(
            "PedestrianManager::SetModelGroup(int, PedestrianManager::ModelGroup const &)",
        ),
    ),
    (
        "IsPed__17PedestrianManagerP9Character",
        Ok(
            "PedestrianManager::IsPed(Character *)",
        ),
    ),
    (
        "HandleEvent__17PedestrianManager9EventEnumPv",
        Ok(
            "PedestrianManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "AddPeds__17PedestrianManagerGQ218RadicalMathLibrary6Vectorf",
        Ok(
            "PedestrianManager::AddPeds(RadicalMathLibrary::Vector, float)",
        ),
    ),
    (
        "FindModelInUseAndRemove__17PedestrianManagerPCc",
        Ok(
            "PedestrianManager::FindModelInUseAndRemove(char const *)",
        ),
    ),
    (
        "FindModelInUseAndAdd__17PedestrianManagerPCc",
        Ok(
            "PedestrianManager::FindModelInUseAndAdd(char const *)",
        ),
    ),
    (
        "DumpAllPedModels__17PedestrianManager",
        Ok(
            "PedestrianManager::DumpAllPedModels(void)",
        ),
    ),
    (
        "__10Pedestrian",
        Ok(
            "Pedestrian::Pedestrian(void)",
        ),
    ),
    (
        "_$_10Pedestrian",
        Ok(
            "Pedestrian::~Pedestrian(void)",
        ),
    ),
    (
        "Update__10Pedestrianf",
        Ok(
            "Pedestrian::Update(float)",
        ),
    ),
    (
        "GetValue__C10Pedestriani",
        Ok(
            "Pedestrian::GetValue(int) const",
        ),
    ),
    (
        "IsButtonDown__C10Pedestriani",
        Ok(
            "Pedestrian::IsButtonDown(int) const",
        ),
    ),
    (
        "Activate__10PedestrianP4PathP11PathSegmentGQ218RadicalMathLibrary6VectorPCc",
        Ok(
            "Pedestrian::Activate(Path *, PathSegment *, RadicalMathLibrary::Vector, char const *)",
        ),
    ),
    (
        "ActivateSelf__10Pedestrian",
        Ok(
            "Pedestrian::ActivateSelf(void)",
        ),
    ),
    (
        "InitZero__10Pedestrian",
        Ok(
            "Pedestrian::InitZero(void)",
        ),
    ),
    (
        "Deactivate__10Pedestrian",
        Ok(
            "Pedestrian::Deactivate(void)",
        ),
    ),
    (
        "OnReachedWaypoint__10Pedestrian",
        Ok(
            "Pedestrian::OnReachedWaypoint(void)",
        ),
    ),
    (
        "GetFollowPathSpeedMps__C10Pedestrian",
        Ok(
            "Pedestrian::GetFollowPathSpeedMps(void) const",
        ),
    ),
    (
        "DetermineFollowPathSpeed__10Pedestrian",
        Ok(
            "Pedestrian::DetermineFollowPathSpeed(void)",
        ),
    ),
    (
        "__tf10Pedestrian",
        Ok(
            "Pedestrian type_info function",
        ),
    ),
    (
        "__tf17PedestrianManager",
        Ok(
            "PedestrianManager type_info function",
        ),
    ),
    (
        "_$_Q217PedestrianManager9UsedModel",
        Ok(
            "PedestrianManager::UsedModel::~UsedModel(void)",
        ),
    ),
    (
        "Init__12SpawnManager",
        Ok(
            "SpawnManager::Init(void)",
        ),
    ),
    (
        "Update__12SpawnManagerf",
        Ok(
            "SpawnManager::Update(float)",
        ),
    ),
    (
        "__tf12SpawnManager",
        Ok(
            "SpawnManager type_info function",
        ),
    ),
    (
        "_$_12SpawnManager",
        Ok(
            "SpawnManager::~SpawnManager(void)",
        ),
    ),
    (
        "__12ChaseManager",
        Ok(
            "ChaseManager::ChaseManager(void)",
        ),
    ),
    (
        "_$_12ChaseManager",
        Ok(
            "ChaseManager::~ChaseManager(void)",
        ),
    ),
    (
        "IsChaseVehicle__12ChaseManagerP7Vehicle",
        Ok(
            "ChaseManager::IsChaseVehicle(Vehicle *)",
        ),
    ),
    (
        "FindChaseVehicle__12ChaseManagerP7Vehicle",
        Ok(
            "ChaseManager::FindChaseVehicle(Vehicle *)",
        ),
    ),
    (
        "HandleEvent__12ChaseManager9EventEnumPv",
        Ok(
            "ChaseManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "Init__12ChaseManager",
        Ok(
            "ChaseManager::Init(void)",
        ),
    ),
    (
        "ClearAllObjects__12ChaseManager",
        Ok(
            "ChaseManager::ClearAllObjects(void)",
        ),
    ),
    (
        "GetNumActiveVehicles__12ChaseManager",
        Ok(
            "ChaseManager::GetNumActiveVehicles(void)",
        ),
    ),
    (
        "ClearOutOfSightVehicles__12ChaseManager",
        Ok(
            "ChaseManager::ClearOutOfSightVehicles(void)",
        ),
    ),
    (
        "ClearObjectsInsideRadius__12ChaseManagerGQ218RadicalMathLibrary6Vectorf",
        Ok(
            "ChaseManager::ClearObjectsInsideRadius(RadicalMathLibrary::Vector, float)",
        ),
    ),
    (
        "ClearObjectsOutsideRadius__12ChaseManagerGQ218RadicalMathLibrary6Vectorf",
        Ok(
            "ChaseManager::ClearObjectsOutsideRadius(RadicalMathLibrary::Vector, float)",
        ),
    ),
    (
        "RegisterModel__12ChaseManagerPCci",
        Ok(
            "ChaseManager::RegisterModel(char const *, int)",
        ),
    ),
    (
        "IsModelRegistered__12ChaseManagerPCc",
        Ok(
            "ChaseManager::IsModelRegistered(char const *)",
        ),
    ),
    (
        "UnregisterModel__12ChaseManagerPCc",
        Ok(
            "ChaseManager::UnregisterModel(char const *)",
        ),
    ),
    (
        "SetConfileName__12ChaseManagerPCc",
        Ok(
            "ChaseManager::SetConfileName(char const *)",
        ),
    ),
    (
        "DisableAllActiveVehicleAIs__12ChaseManager",
        Ok(
            "ChaseManager::DisableAllActiveVehicleAIs(void)",
        ),
    ),
    (
        "EnableAllActiveVehicleAIs__12ChaseManager",
        Ok(
            "ChaseManager::EnableAllActiveVehicleAIs(void)",
        ),
    ),
    (
        "AddObjects__12ChaseManagerf",
        Ok(
            "ChaseManager::AddObjects(float)",
        ),
    ),
    (
        "RemoveObjects__12ChaseManagerf",
        Ok(
            "ChaseManager::RemoveObjects(float)",
        ),
    ),
    (
        "UpdateObjects__12ChaseManagerf",
        Ok(
            "ChaseManager::UpdateObjects(float)",
        ),
    ),
    (
        "SuspendAllVehicles__12ChaseManager",
        Ok(
            "ChaseManager::SuspendAllVehicles(void)",
        ),
    ),
    (
        "ResumeAllVehicles__12ChaseManager",
        Ok(
            "ChaseManager::ResumeAllVehicles(void)",
        ),
    ),
    (
        "DeactivateVehicle__12ChaseManagerPQ212ChaseManager12ChaseVehicle",
        Ok(
            "ChaseManager::DeactivateVehicle(ChaseManager::ChaseVehicle *)",
        ),
    ),
    (
        "ActivateVehicle__12ChaseManagerPQ212ChaseManager12ChaseVehicle",
        Ok(
            "ChaseManager::ActivateVehicle(ChaseManager::ChaseVehicle *)",
        ),
    ),
    (
        "DeactivateAllVehicles__12ChaseManager",
        Ok(
            "ChaseManager::DeactivateAllVehicles(void)",
        ),
    ),
    (
        "MarkAllVehiclesForDeletion__12ChaseManager",
        Ok(
            "ChaseManager::MarkAllVehiclesForDeletion(void)",
        ),
    ),
    (
        "GetInactiveVehicle__12ChaseManager",
        Ok(
            "ChaseManager::GetInactiveVehicle(void)",
        ),
    ),
    (
        "SpawningOnTopOfAnotherVehicle__12ChaseManagerRCQ218RadicalMathLibrary6Sphere",
        Ok(
            "ChaseManager::SpawningOnTopOfAnotherVehicle(RadicalMathLibrary::Sphere const &)",
        ),
    ),
    (
        "GetClosestCarPosition__12ChaseManagerPQ218RadicalMathLibrary6VectorT1",
        Ok(
            "ChaseManager::GetClosestCarPosition(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "__tf12ChaseManager",
        Ok(
            "ChaseManager type_info function",
        ),
    ),
    (
        "GetAbsoluteMaxObjects__C12ChaseManager",
        Ok(
            "ChaseManager::GetAbsoluteMaxObjects(void) const",
        ),
    ),
    (
        "GetMaxObjects__C12ChaseManager",
        Ok(
            "ChaseManager::GetMaxObjects(void) const",
        ),
    ),
    (
        "SetMaxObjects__12ChaseManageri",
        Ok(
            "ChaseManager::SetMaxObjects(int)",
        ),
    ),
    (
        "GetMaxModels__C12ChaseManager",
        Ok(
            "ChaseManager::GetMaxModels(void) const",
        ),
    ),
    (
        "GetNumRegisteredModels__C12ChaseManager",
        Ok(
            "ChaseManager::GetNumRegisteredModels(void) const",
        ),
    ),
    (
        "GetSecondsBetwAdds__C12ChaseManager",
        Ok(
            "ChaseManager::GetSecondsBetwAdds(void) const",
        ),
    ),
    (
        "GetSecondsBetwRemoves__C12ChaseManager",
        Ok(
            "ChaseManager::GetSecondsBetwRemoves(void) const",
        ),
    ),
    (
        "GetSecondsBetwUpdates__C12ChaseManager",
        Ok(
            "ChaseManager::GetSecondsBetwUpdates(void) const",
        ),
    ),
    (
        "CreateStateProp__10CStatePropP14CStatePropDataUiP5tPose",
        Ok(
            "CStateProp::CreateStateProp(CStatePropData *, unsigned int, tPose *)",
        ),
    ),
    (
        "__10CStatePropP15tAnimatedObjectP14CStatePropDataUi",
        Ok(
            "CStateProp::CStateProp(tAnimatedObject *, CStatePropData *, unsigned int)",
        ),
    ),
    (
        "_$_10CStateProp",
        Ok(
            "CStateProp::~CStateProp(void)",
        ),
    ),
    (
        "Update__10CStatePropf",
        Ok(
            "CStateProp::Update(float)",
        ),
    ),
    (
        "UpdateFrameControllersForRender__10CStateProp",
        Ok(
            "CStateProp::UpdateFrameControllersForRender(void)",
        ),
    ),
    (
        "GetState__10CStateProp",
        Ok(
            "CStateProp::GetState(void)",
        ),
    ),
    (
        "SetState__10CStatePropUi",
        Ok(
            "CStateProp::SetState(unsigned int)",
        ),
    ),
    (
        "OnEvent__10CStatePropUi",
        Ok(
            "CStateProp::OnEvent(unsigned int)",
        ),
    ),
    (
        "AddStatePropListener__10CStatePropP18CStatePropListener",
        Ok(
            "CStateProp::AddStatePropListener(CStatePropListener *)",
        ),
    ),
    (
        "RemoveStatePropListener__10CStatePropP18CStatePropListener",
        Ok(
            "CStateProp::RemoveStatePropListener(CStatePropListener *)",
        ),
    ),
    (
        "GetDrawable__10CStateProp",
        Ok(
            "CStateProp::GetDrawable(void)",
        ),
    ),
    (
        "GetNumberOfFrameControllers__10CStateProp",
        Ok(
            "CStateProp::GetNumberOfFrameControllers(void)",
        ),
    ),
    (
        "GetFrameControllerByIndex__10CStatePropUi",
        Ok(
            "CStateProp::GetFrameControllerByIndex(unsigned int)",
        ),
    ),
    (
        "GetDrawableElement__10CStatePropUi",
        Ok(
            "CStateProp::GetDrawableElement(unsigned int)",
        ),
    ),
    (
        "Display__10CStatePropP24StatePropDSGProcAnimator",
        Ok(
            "CStateProp::Display(StatePropDSGProcAnimator *)",
        ),
    ),
    (
        "__14CStatePropData",
        Ok(
            "CStatePropData::CStatePropData(void)",
        ),
    ),
    (
        "_$_14CStatePropData",
        Ok(
            "CStatePropData::~CStatePropData(void)",
        ),
    ),
    (
        "GetNumberOfStates__14CStatePropData",
        Ok(
            "CStatePropData::GetNumberOfStates(void)",
        ),
    ),
    (
        "GetTransitionData__14CStatePropDatai",
        Ok(
            "CStatePropData::GetTransitionData(int)",
        ),
    ),
    (
        "GetVisibilityData__14CStatePropDataii",
        Ok(
            "CStatePropData::GetVisibilityData(int, int)",
        ),
    ),
    (
        "GetFrameControllerData__14CStatePropDataii",
        Ok(
            "CStatePropData::GetFrameControllerData(int, int)",
        ),
    ),
    (
        "GetNumberOfEvents__14CStatePropDatai",
        Ok(
            "CStatePropData::GetNumberOfEvents(int)",
        ),
    ),
    (
        "GetEventData__14CStatePropDataii",
        Ok(
            "CStatePropData::GetEventData(int, int)",
        ),
    ),
    (
        "GetNumberOfCallbacks__14CStatePropDatai",
        Ok(
            "CStatePropData::GetNumberOfCallbacks(int)",
        ),
    ),
    (
        "GetCallbackData__14CStatePropDataii",
        Ok(
            "CStatePropData::GetCallbackData(int, int)",
        ),
    ),
    (
        "__20CStatePropDataLoader",
        Ok(
            "CStatePropDataLoader::CStatePropDataLoader(void)",
        ),
    ),
    (
        "LoadObject__20CStatePropDataLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "CStatePropDataLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf10CStateProp",
        Ok(
            "CStateProp type_info function",
        ),
    ),
    (
        "__tf14CStatePropData",
        Ok(
            "CStatePropData type_info function",
        ),
    ),
    (
        "__tf20CStatePropDataLoader",
        Ok(
            "CStatePropDataLoader type_info function",
        ),
    ),
    (
        "_$_20CStatePropDataLoader",
        Ok(
            "CStatePropDataLoader::~CStatePropDataLoader(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z22tAnimatedObjectFactory",
        Ok(
            "radLoadInventory::SafeCast<tAnimatedObjectFactory>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z22tAnimatedObjectFactory",
        Ok(
            "radLoadInventory::SafeCast<tAnimatedObjectFactory> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z22tAnimatedObjectFactoryP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tAnimatedObjectFactory>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_$_3UFO",
        Ok(
            "UFO::~UFO(void)",
        ),
    ),
    (
        "LoadSetup__3UFOPCcRCQ218RadicalMathLibrary6Vector",
        Ok(
            "UFO::LoadSetup(char const *, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "AddWeapon__3UFOP6WeaponRCQ218RadicalMathLibrary6Vector",
        Ok(
            "UFO::AddWeapon(Weapon *, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Update__3UFOf",
        Ok(
            "UFO::Update(float)",
        ),
    ),
    (
        "Navigate__3UFOf",
        Ok(
            "UFO::Navigate(float)",
        ),
    ),
    (
        "Move__3UFOf",
        Ok(
            "UFO::Move(float)",
        ),
    ),
    (
        "ScanForTargets__3UFO",
        Ok(
            "UFO::ScanForTargets(void)",
        ),
    ),
    (
        "HandleEvent__3UFO9EventEnumPv",
        Ok(
            "UFO::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "_$_11TractorBeam",
        Ok(
            "TractorBeam::~TractorBeam(void)",
        ),
    ),
    (
        "LoadSetup__11TractorBeamPCc",
        Ok(
            "TractorBeam::LoadSetup(char const *)",
        ),
    ),
    (
        "Update__11TractorBeamf",
        Ok(
            "TractorBeam::Update(float)",
        ),
    ),
    (
        "IsValidTarget__C11TractorBeamP11DynaPhysDSG",
        Ok(
            "TractorBeam::IsValidTarget(DynaPhysDSG *) const",
        ),
    ),
    (
        "CanFire__C11TractorBeamP11DynaPhysDSG",
        Ok(
            "TractorBeam::CanFire(DynaPhysDSG *) const",
        ),
    ),
    (
        "Fire__11TractorBeamP11DynaPhysDSG",
        Ok(
            "TractorBeam::Fire(DynaPhysDSG *)",
        ),
    ),
    (
        "Display__11TractorBeam",
        Ok(
            "TractorBeam::Display(void)",
        ),
    ),
    (
        "SetPosition__11TractorBeamRCQ218RadicalMathLibrary6Vector",
        Ok(
            "TractorBeam::SetPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SwallowObject__11TractorBeamP11DynaPhysDSG",
        Ok(
            "TractorBeam::SwallowObject(DynaPhysDSG *)",
        ),
    ),
    (
        "Slerp__11TractorBeamGQ218RadicalMathLibrary6MatrixT1ff",
        Ok(
            "TractorBeam::Slerp(RadicalMathLibrary::Matrix, RadicalMathLibrary::Matrix, float, float)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZP9UFOWeaponZP9UFOWeapon_X01X01X11G12__false_type_X11",
        Ok(
            "UFOWeapon * __uninitialized_copy_aux<UFOWeapon *, UFOWeapon *>(UFOWeapon *, UFOWeapon *, UFOWeapon *, __false_type)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2Z9UFOWeaponZt7s2alloc1Z9UFOWeaponP9UFOWeaponRC9UFOWeapon",
        Ok(
            "vector<UFOWeapon, s2alloc<UFOWeapon> >::_M_insert_aux(UFOWeapon *, UFOWeapon const &)",
        ),
    ),
    (
        "__t3Map2ZfZi",
        Ok(
            "Map<float, int>::Map(void)",
        ),
    ),
    (
        "__push_heap__H3ZPt10MapElement2ZfZiZiZt10MapElement2ZfZi_X01X11X11X21_v",
        Ok(
            "void __push_heap<MapElement<float, int> *, int, MapElement<float, int> >(MapElement<float, int> *, int, int, MapElement<float, int>)",
        ),
    ),
    (
        "__adjust_heap__H3ZPt10MapElement2ZfZiZiZt10MapElement2ZfZi_X01X11X11X21_v",
        Ok(
            "void __adjust_heap<MapElement<float, int> *, int, MapElement<float, int> >(MapElement<float, int> *, int, int, MapElement<float, int>)",
        ),
    ),
    (
        "__make_heap__H3ZPt10MapElement2ZfZiZt10MapElement2ZfZiZi_X01X01PX11PX21_v",
        Ok(
            "void __make_heap<MapElement<float, int> *, MapElement<float, int>, int>(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *, int *)",
        ),
    ),
    (
        "sort_heap__H1ZPt10MapElement2ZfZi_X01X01_v",
        Ok(
            "void sort_heap<MapElement<float, int> *>(MapElement<float, int> *, MapElement<float, int> *)",
        ),
    ),
    (
        "__partial_sort__H2ZPt10MapElement2ZfZiZt10MapElement2ZfZi_X01X01X01PX11_v",
        Ok(
            "void __partial_sort<MapElement<float, int> *, MapElement<float, int> >(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *)",
        ),
    ),
    (
        "__unguarded_partition__H2ZPt10MapElement2ZfZiZt10MapElement2ZfZi_X01X01X11_X01",
        Ok(
            "MapElement<float, int> * __unguarded_partition<MapElement<float, int> *, MapElement<float, int> >(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int>)",
        ),
    ),
    (
        "__introsort_loop__H3ZPt10MapElement2ZfZiZt10MapElement2ZfZiZi_X01X01PX11X21_v",
        Ok(
            "void __introsort_loop<MapElement<float, int> *, MapElement<float, int>, int>(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *, int)",
        ),
    ),
    (
        "__unguarded_linear_insert__H2ZPt10MapElement2ZfZiZt10MapElement2ZfZi_X01X11_v",
        Ok(
            "void __unguarded_linear_insert<MapElement<float, int> *, MapElement<float, int> >(MapElement<float, int> *, MapElement<float, int>)",
        ),
    ),
    (
        "__insertion_sort__H1ZPt10MapElement2ZfZi_X01X01_v",
        Ok(
            "void __insertion_sort<MapElement<float, int> *>(MapElement<float, int> *, MapElement<float, int> *)",
        ),
    ),
    (
        "__unguarded_insertion_sort_aux__H2ZPt10MapElement2ZfZiZt10MapElement2ZfZi_X01X01PX11_v",
        Ok(
            "void __unguarded_insertion_sort_aux<MapElement<float, int> *, MapElement<float, int> >(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *)",
        ),
    ),
    (
        "__final_insertion_sort__H1ZPt10MapElement2ZfZi_X01X01_v",
        Ok(
            "void __final_insertion_sort<MapElement<float, int> *>(MapElement<float, int> *, MapElement<float, int> *)",
        ),
    ),
    (
        "RefreshIfDirty__Ct3Map2ZfZi",
        Ok(
            "Map<float, int>::RefreshIfDirty(void) const",
        ),
    ),
    (
        "__lower_bound__H3ZPt10MapElement2ZfZiZt10MapElement2ZfZiZi_X01X01RCX11PX21_X01",
        Ok(
            "MapElement<float, int> * __lower_bound<MapElement<float, int> *, MapElement<float, int>, int>(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> const &, int *)",
        ),
    ),
    (
        "find__t3Map2ZfZiRCf",
        Ok(
            "Map<float, int>::find(float const &)",
        ),
    ),
    (
        "end__t3Map2ZfZi",
        Ok(
            "Map<float, int>::end(void)",
        ),
    ),
    (
        "__uninitialized_copy_aux__H2ZPt10MapElement2ZfZiZPt10MapElement2ZfZi_X01X01X11G12__false_type_X11",
        Ok(
            "MapElement<float, int> * __uninitialized_copy_aux<MapElement<float, int> *, MapElement<float, int> *>(MapElement<float, int> *, MapElement<float, int> *, MapElement<float, int> *, __false_type)",
        ),
    ),
    (
        "_M_insert_aux__t6vector2Zt10MapElement2ZfZiZt7s2alloc1Zt10MapElement2ZfZiPt10MapElement2ZfZiRCt10MapElement2ZfZi",
        Ok(
            "vector<MapElement<float, int>, s2alloc<MapElement<float, int> > >::_M_insert_aux(MapElement<float, int> *, MapElement<float, int> const &)",
        ),
    ),
    (
        "insert__t3Map2ZfZiRCfRCi",
        Ok(
            "Map<float, int>::insert(float const &, int const &)",
        ),
    ),
    (
        "size__Ct3Map2ZfZi",
        Ok(
            "Map<float, int>::size(void) const",
        ),
    ),
    (
        "begin__t3Map2ZfZi",
        Ok(
            "Map<float, int>::begin(void)",
        ),
    ),
    (
        "__tf4Boss",
        Ok(
            "Boss type_info function",
        ),
    ),
    (
        "__tf3UFO",
        Ok(
            "UFO type_info function",
        ),
    ),
    (
        "__tf6Weapon",
        Ok(
            "Weapon type_info function",
        ),
    ),
    (
        "__tf11TractorBeam",
        Ok(
            "TractorBeam type_info function",
        ),
    ),
    (
        "_$_4Boss",
        Ok(
            "Boss::~Boss(void)",
        ),
    ),
    (
        "__9UFOWeapon",
        Ok(
            "UFOWeapon::UFOWeapon(void)",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3Z9UFOWeaponZt7s2alloc1Z9UFOWeaponb0",
        Ok(
            "_Vector_alloc_base<UFOWeapon, s2alloc<UFOWeapon>, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "_$_6Weapon",
        Ok(
            "Weapon::~Weapon(void)",
        ),
    ),
    (
        "_$_t3Map2ZfZi",
        Ok(
            "Map<float, int>::~Map(void)",
        ),
    ),
    (
        "_$_t18_Vector_alloc_base3Zt10MapElement2ZfZiZt7s2alloc1Zt10MapElement2ZfZib0",
        Ok(
            "_Vector_alloc_base<MapElement<float, int>, s2alloc<MapElement<float, int> >, false>::~_Vector_alloc_base(void)",
        ),
    ),
    (
        "GetInstance__16ParkedCarManager",
        Ok(
            "ParkedCarManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__16ParkedCarManager",
        Ok(
            "ParkedCarManager::DestroyInstance(void)",
        ),
    ),
    (
        "HandleEvent__16ParkedCarManager9EventEnumPv",
        Ok(
            "ParkedCarManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "FindParkedCarInfo__16ParkedCarManagerP7VehicleRPQ216ParkedCarManager13ParkedCarInfoRb",
        Ok(
            "ParkedCarManager::FindParkedCarInfo(Vehicle *, ParkedCarManager::ParkedCarInfo *&, bool &)",
        ),
    ),
    (
        "OnProcessRequestsComplete__16ParkedCarManagerPv",
        Ok(
            "ParkedCarManager::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "AddCarType__16ParkedCarManagerPCc",
        Ok(
            "ParkedCarManager::AddCarType(char const *)",
        ),
    ),
    (
        "AddLocator__16ParkedCarManagerP15CarStartLocator",
        Ok(
            "ParkedCarManager::AddLocator(CarStartLocator *)",
        ),
    ),
    (
        "AddFreeCar__16ParkedCarManagerPCcP15CarStartLocator",
        Ok(
            "ParkedCarManager::AddFreeCar(char const *, CarStartLocator *)",
        ),
    ),
    (
        "RemoveFreeCar__16ParkedCarManager",
        Ok(
            "ParkedCarManager::RemoveFreeCar(void)",
        ),
    ),
    (
        "RemoveFreeCarIfClose__16ParkedCarManagerRCQ218RadicalMathLibrary6Vector",
        Ok(
            "ParkedCarManager::RemoveFreeCarIfClose(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__16ParkedCarManager",
        Ok(
            "ParkedCarManager::ParkedCarManager(void)",
        ),
    ),
    (
        "_$_16ParkedCarManager",
        Ok(
            "ParkedCarManager::~ParkedCarManager(void)",
        ),
    ),
    (
        "CreateFreeCar__16ParkedCarManager",
        Ok(
            "ParkedCarManager::CreateFreeCar(void)",
        ),
    ),
    (
        "MDKParkedCars__16ParkedCarManager",
        Ok(
            "ParkedCarManager::MDKParkedCars(void)",
        ),
    ),
    (
        "__tf16ParkedCarManager",
        Ok(
            "ParkedCarManager type_info function",
        ),
    ),
    (
        "GetInstance__25LoadingSuperSprintContext",
        Ok(
            "LoadingSuperSprintContext::GetInstance(void)",
        ),
    ),
    (
        "__25LoadingSuperSprintContext",
        Ok(
            "LoadingSuperSprintContext::LoadingSuperSprintContext(void)",
        ),
    ),
    (
        "_$_25LoadingSuperSprintContext",
        Ok(
            "LoadingSuperSprintContext::~LoadingSuperSprintContext(void)",
        ),
    ),
    (
        "OnStart__25LoadingSuperSprintContext11ContextEnum",
        Ok(
            "LoadingSuperSprintContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__25LoadingSuperSprintContext11ContextEnum",
        Ok(
            "LoadingSuperSprintContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__25LoadingSuperSprintContextUi",
        Ok(
            "LoadingSuperSprintContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__25LoadingSuperSprintContext",
        Ok(
            "LoadingSuperSprintContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__25LoadingSuperSprintContext",
        Ok(
            "LoadingSuperSprintContext::OnResume(void)",
        ),
    ),
    (
        "PrepareNewHeaps__25LoadingSuperSprintContext",
        Ok(
            "LoadingSuperSprintContext::PrepareNewHeaps(void)",
        ),
    ),
    (
        "OnProcessRequestsComplete__25LoadingSuperSprintContextPv",
        Ok(
            "LoadingSuperSprintContext::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "GetInstance__18SuperSprintContext",
        Ok(
            "SuperSprintContext::GetInstance(void)",
        ),
    ),
    (
        "OnStart__18SuperSprintContext11ContextEnum",
        Ok(
            "SuperSprintContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__18SuperSprintContext11ContextEnum",
        Ok(
            "SuperSprintContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__18SuperSprintContextUi",
        Ok(
            "SuperSprintContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__18SuperSprintContext",
        Ok(
            "SuperSprintContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__18SuperSprintContext",
        Ok(
            "SuperSprintContext::OnResume(void)",
        ),
    ),
    (
        "__18SuperSprintContext",
        Ok(
            "SuperSprintContext::SuperSprintContext(void)",
        ),
    ),
    (
        "_$_18SuperSprintContext",
        Ok(
            "SuperSprintContext::~SuperSprintContext(void)",
        ),
    ),
    (
        "GetInstance__20SuperSprintFEContext",
        Ok(
            "SuperSprintFEContext::GetInstance(void)",
        ),
    ),
    (
        "OnStart__20SuperSprintFEContext11ContextEnum",
        Ok(
            "SuperSprintFEContext::OnStart(ContextEnum)",
        ),
    ),
    (
        "OnStop__20SuperSprintFEContext11ContextEnum",
        Ok(
            "SuperSprintFEContext::OnStop(ContextEnum)",
        ),
    ),
    (
        "OnUpdate__20SuperSprintFEContextUi",
        Ok(
            "SuperSprintFEContext::OnUpdate(unsigned int)",
        ),
    ),
    (
        "OnSuspend__20SuperSprintFEContext",
        Ok(
            "SuperSprintFEContext::OnSuspend(void)",
        ),
    ),
    (
        "OnResume__20SuperSprintFEContext",
        Ok(
            "SuperSprintFEContext::OnResume(void)",
        ),
    ),
    (
        "OnHandleEvent__20SuperSprintFEContext9EventEnumPv",
        Ok(
            "SuperSprintFEContext::OnHandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnProcessRequestsComplete__20SuperSprintFEContextPv",
        Ok(
            "SuperSprintFEContext::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "__20SuperSprintFEContext",
        Ok(
            "SuperSprintFEContext::SuperSprintFEContext(void)",
        ),
    ),
    (
        "_$_20SuperSprintFEContext",
        Ok(
            "SuperSprintFEContext::~SuperSprintFEContext(void)",
        ),
    ),
    (
        "__tf25LoadingSuperSprintContext",
        Ok(
            "LoadingSuperSprintContext type_info function",
        ),
    ),
    (
        "__tf18SuperSprintContext",
        Ok(
            "SuperSprintContext type_info function",
        ),
    ),
    (
        "__tf20SuperSprintFEContext",
        Ok(
            "SuperSprintFEContext type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$_25LoadingSuperSprintContext$spInstance",
        Ok(
            "global constructors keyed to LoadingSuperSprintContext::spInstance",
        ),
    ),
    (
        "HandleEvent__18SuperSprintManager9EventEnumPv",
        Ok(
            "SuperSprintManager::HandleEvent(EventEnum, void *)",
        ),
    ),
    (
        "OnProcessRequestsComplete__18SuperSprintManagerPv",
        Ok(
            "SuperSprintManager::OnProcessRequestsComplete(void *)",
        ),
    ),
    (
        "GetInstance__18SuperSprintManager",
        Ok(
            "SuperSprintManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__18SuperSprintManager",
        Ok(
            "SuperSprintManager::DestroyInstance(void)",
        ),
    ),
    (
        "Initialize__18SuperSprintManager",
        Ok(
            "SuperSprintManager::Initialize(void)",
        ),
    ),
    (
        "Finalize__18SuperSprintManager",
        Ok(
            "SuperSprintManager::Finalize(void)",
        ),
    ),
    (
        "Update__18SuperSprintManagerUi",
        Ok(
            "SuperSprintManager::Update(unsigned int)",
        ),
    ),
    (
        "LoadScriptData__18SuperSprintManager",
        Ok(
            "SuperSprintManager::LoadScriptData(void)",
        ),
    ),
    (
        "StartRace__18SuperSprintManager",
        Ok(
            "SuperSprintManager::StartRace(void)",
        ),
    ),
    (
        "SetCharacter__18SuperSprintManagerii",
        Ok(
            "SuperSprintManager::SetCharacter(int, int)",
        ),
    ),
    (
        "SetVehicle__18SuperSprintManageriPCc",
        Ok(
            "SuperSprintManager::SetVehicle(int, char const *)",
        ),
    ),
    (
        "CalculatePositions__18SuperSprintManager",
        Ok(
            "SuperSprintManager::CalculatePositions(void)",
        ),
    ),
    (
        "LoadLevelData__18SuperSprintManager",
        Ok(
            "SuperSprintManager::LoadLevelData(void)",
        ),
    ),
    (
        "Reset__18SuperSprintManager",
        Ok(
            "SuperSprintManager::Reset(void)",
        ),
    ),
    (
        "OnButton__18SuperSprintManageriiPC6Button",
        Ok(
            "SuperSprintManager::OnButton(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonUp__18SuperSprintManageriiPC6Button",
        Ok(
            "SuperSprintManager::OnButtonUp(int, int, Button const *)",
        ),
    ),
    (
        "OnButtonDown__18SuperSprintManageriiPC6Button",
        Ok(
            "SuperSprintManager::OnButtonDown(int, int, Button const *)",
        ),
    ),
    (
        "LoadControllerMappings__18SuperSprintManagerUi",
        Ok(
            "SuperSprintManager::LoadControllerMappings(unsigned int)",
        ),
    ),
    (
        "OnControllerConnect__18SuperSprintManageri",
        Ok(
            "SuperSprintManager::OnControllerConnect(int)",
        ),
    ),
    (
        "OnControllerDisconnect__18SuperSprintManageri",
        Ok(
            "SuperSprintManager::OnControllerDisconnect(int)",
        ),
    ),
    (
        "GetNumCheckpoints__18SuperSprintManager",
        Ok(
            "SuperSprintManager::GetNumCheckpoints(void)",
        ),
    ),
    (
        "SetUpCars__18SuperSprintManager",
        Ok(
            "SuperSprintManager::SetUpCars(void)",
        ),
    ),
    (
        "CleanUpCars__18SuperSprintManager",
        Ok(
            "SuperSprintManager::CleanUpCars(void)",
        ),
    ),
    (
        "PositionCars__18SuperSprintManager",
        Ok(
            "SuperSprintManager::PositionCars(void)",
        ),
    ),
    (
        "PositionAI__18SuperSprintManager",
        Ok(
            "SuperSprintManager::PositionAI(void)",
        ),
    ),
    (
        "DisableAllAI__18SuperSprintManager",
        Ok(
            "SuperSprintManager::DisableAllAI(void)",
        ),
    ),
    (
        "DisableAllControllers__18SuperSprintManager",
        Ok(
            "SuperSprintManager::DisableAllControllers(void)",
        ),
    ),
    (
        "InitRaceData__18SuperSprintManager",
        Ok(
            "SuperSprintManager::InitRaceData(void)",
        ),
    ),
    (
        "ResetRaceData__18SuperSprintManager",
        Ok(
            "SuperSprintManager::ResetRaceData(void)",
        ),
    ),
    (
        "PlaceCharactersInCars__18SuperSprintManager",
        Ok(
            "SuperSprintManager::PlaceCharactersInCars(void)",
        ),
    ),
    (
        "LoadCars__18SuperSprintManager",
        Ok(
            "SuperSprintManager::LoadCars(void)",
        ),
    ),
    (
        "LoadCharacters__18SuperSprintManager",
        Ok(
            "SuperSprintManager::LoadCharacters(void)",
        ),
    ),
    (
        "EnumerateControllers__18SuperSprintManager",
        Ok(
            "SuperSprintManager::EnumerateControllers(void)",
        ),
    ),
    (
        "SetupIcons__18SuperSprintManager",
        Ok(
            "SuperSprintManager::SetupIcons(void)",
        ),
    ),
    (
        "InitCamera__18SuperSprintManager",
        Ok(
            "SuperSprintManager::InitCamera(void)",
        ),
    ),
    (
        "GetOnlyHumanPlayerID__18SuperSprintManager",
        Ok(
            "SuperSprintManager::GetOnlyHumanPlayerID(void)",
        ),
    ),
    (
        "RestoreControllerState__18SuperSprintManager",
        Ok(
            "SuperSprintManager::RestoreControllerState(void)",
        ),
    ),
    (
        "SetupTraps__18SuperSprintManager",
        Ok(
            "SuperSprintManager::SetupTraps(void)",
        ),
    ),
    (
        "PlayIntroCam__18SuperSprintManager",
        Ok(
            "SuperSprintManager::PlayIntroCam(void)",
        ),
    ),
    (
        "UpdatePositionIcons__18SuperSprintManagerUi",
        Ok(
            "SuperSprintManager::UpdatePositionIcons(unsigned int)",
        ),
    ),
    (
        "GetCheckpointWith__18SuperSprintManagerc",
        Ok(
            "SuperSprintManager::GetCheckpointWith(char)",
        ),
    ),
    (
        "GetPathDataWith__18SuperSprintManagerP7Locator",
        Ok(
            "SuperSprintManager::GetPathDataWith(Locator *)",
        ),
    ),
    (
        "PositionCharacters__18SuperSprintManager",
        Ok(
            "SuperSprintManager::PositionCharacters(void)",
        ),
    ),
    (
        "__18SuperSprintManager",
        Ok(
            "SuperSprintManager::SuperSprintManager(void)",
        ),
    ),
    (
        "_$_18SuperSprintManager",
        Ok(
            "SuperSprintManager::~SuperSprintManager(void)",
        ),
    ),
    (
        "__tf19SuperSprintDrawable",
        Ok(
            "SuperSprintDrawable type_info function",
        ),
    ),
    (
        "__tf18SuperSprintManager",
        Ok(
            "SuperSprintManager type_info function",
        ),
    ),
    (
        "_$_19SuperSprintDrawable",
        Ok(
            "SuperSprintDrawable::~SuperSprintDrawable(void)",
        ),
    ),
    (
        "Display__19SuperSprintDrawable",
        Ok(
            "SuperSprintDrawable::Display(void)",
        ),
    ),
    (
        "InitLevelData__18SuperSprintManager",
        Ok(
            "SuperSprintManager::InitLevelData(void)",
        ),
    ),
    (
        "CleanMissionData__18SuperSprintManager",
        Ok(
            "SuperSprintManager::CleanMissionData(void)",
        ),
    ),
    (
        "IsSundayDrive__18SuperSprintManager",
        Ok(
            "SuperSprintManager::IsSundayDrive(void)",
        ),
    ),
    (
        "PerformLoading__18SuperSprintManager",
        Ok(
            "SuperSprintManager::PerformLoading(void)",
        ),
    ),
    (
        "LoadMission__18SuperSprintManager",
        Ok(
            "SuperSprintManager::LoadMission(void)",
        ),
    ),
    (
        "IsSuperSprint__18SuperSprintManager",
        Ok(
            "SuperSprintManager::IsSuperSprint(void)",
        ),
    ),
    (
        "_GLOBAL_$I$_18SuperSprintManager$spInstance",
        Ok(
            "global constructors keyed to SuperSprintManager::spInstance",
        ),
    ),
    (
        "__Q216FootprintManager9Footprint",
        Ok(
            "FootprintManager::Footprint::Footprint(void)",
        ),
    ),
    (
        "__16FootprintManager",
        Ok(
            "FootprintManager::FootprintManager(void)",
        ),
    ),
    (
        "_$_16FootprintManager",
        Ok(
            "FootprintManager::~FootprintManager(void)",
        ),
    ),
    (
        "CreateInstance__16FootprintManager",
        Ok(
            "FootprintManager::CreateInstance(void)",
        ),
    ),
    (
        "GetInstance__16FootprintManager",
        Ok(
            "FootprintManager::GetInstance(void)",
        ),
    ),
    (
        "DestroyInstance__16FootprintManager",
        Ok(
            "FootprintManager::DestroyInstance(void)",
        ),
    ),
    (
        "Render__16FootprintManager",
        Ok(
            "FootprintManager::Render(void)",
        ),
    ),
    (
        "Update__16FootprintManagerUi",
        Ok(
            "FootprintManager::Update(unsigned int)",
        ),
    ),
    (
        "FreeTextures__16FootprintManager",
        Ok(
            "FootprintManager::FreeTextures(void)",
        ),
    ),
    (
        "__Q26choreo9AnimationPQ26choreo3RigP10tAnimationPQ26choreo9PartitionQ26choreo15GroundFixupEnum",
        Ok(
            "choreo::Animation::Animation(choreo::Rig *, tAnimation *, choreo::Partition *, choreo::GroundFixupEnum)",
        ),
    ),
    (
        "_$_Q26choreo9Animation",
        Ok(
            "choreo::Animation::~Animation(void)",
        ),
    ),
    (
        "GetGroundFixup__CQ26choreo9Animationf",
        Ok(
            "choreo::Animation::GetGroundFixup(float) const",
        ),
    ),
    (
        "MakeValidFrame__Q26choreo9Animationfffb",
        Ok(
            "choreo::Animation::MakeValidFrame(float, float, float, bool)",
        ),
    ),
    (
        "NewDriver__Q26choreo9Animation",
        Ok(
            "choreo::Animation::NewDriver(void)",
        ),
    ),
    (
        "NewAnimationDriver__Q26choreo9Animation",
        Ok(
            "choreo::Animation::NewAnimationDriver(void)",
        ),
    ),
    (
        "ReadFromScript__Q26choreo9AnimationPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::Animation::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "__Q26choreo14AnimationFramePQ26choreo9Animation",
        Ok(
            "choreo::AnimationFrame::AnimationFrame(choreo::Animation *)",
        ),
    ),
    (
        "_$_Q26choreo14AnimationFrame",
        Ok(
            "choreo::AnimationFrame::~AnimationFrame(void)",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo14AnimationFramei",
        Ok(
            "choreo::AnimationFrame::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo14AnimationFramei",
        Ok(
            "choreo::AnimationFrame::GetJointPriority(int) const",
        ),
    ),
    (
        "HasJointTranslation__CQ26choreo14AnimationFramei",
        Ok(
            "choreo::AnimationFrame::HasJointTranslation(int) const",
        ),
    ),
    (
        "HasJointRotation__CQ26choreo14AnimationFramei",
        Ok(
            "choreo::AnimationFrame::HasJointRotation(int) const",
        ),
    ),
    (
        "GetGroupPriority__CQ26choreo14AnimationFrame",
        Ok(
            "choreo::AnimationFrame::GetGroupPriority(void) const",
        ),
    ),
    (
        "GetGroupWeight__CQ26choreo14AnimationFrame",
        Ok(
            "choreo::AnimationFrame::GetGroupWeight(void) const",
        ),
    ),
    (
        "__Q26choreo19AnimationRootDriverPQ26choreo9AnimationPQ26choreo14AnimationFrame",
        Ok(
            "choreo::AnimationRootDriver::AnimationRootDriver(choreo::Animation *, choreo::AnimationFrame *)",
        ),
    ),
    (
        "_$_Q26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver::~AnimationRootDriver(void)",
        ),
    ),
    (
        "Reset__Q26choreo19AnimationRootDriverPQ26choreo11RootBlender",
        Ok(
            "choreo::AnimationRootDriver::Reset(choreo::RootBlender *)",
        ),
    ),
    (
        "GetRootBlendInTime__CQ26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver::GetRootBlendInTime(void) const",
        ),
    ),
    (
        "GetRootBlendOutTime__CQ26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver::GetRootBlendOutTime(void) const",
        ),
    ),
    (
        "GetRootWeight__CQ26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver::GetRootWeight(void) const",
        ),
    ),
    (
        "GetRootPriority__CQ26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver::GetRootPriority(void) const",
        ),
    ),
    (
        "HasRootTranslation__CQ26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver::HasRootTranslation(void) const",
        ),
    ),
    (
        "GetRootTranslation__CQ26choreo19AnimationRootDriverRCQ25poser9TransformRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::AnimationRootDriver::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasRootRotation__CQ26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver::HasRootRotation(void) const",
        ),
    ),
    (
        "GetRootRotation__CQ26choreo19AnimationRootDriverRCQ25poser9TransformRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::AnimationRootDriver::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "HasRootGroundFixup__CQ26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver::HasRootGroundFixup(void) const",
        ),
    ),
    (
        "GetRootGroundFixup__CQ26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver::GetRootGroundFixup(void) const",
        ),
    ),
    (
        "__Q26choreo20AnimationJointDriverPQ26choreo9AnimationPQ26choreo14AnimationFrame",
        Ok(
            "choreo::AnimationJointDriver::AnimationJointDriver(choreo::Animation *, choreo::AnimationFrame *)",
        ),
    ),
    (
        "_$_Q26choreo20AnimationJointDriver",
        Ok(
            "choreo::AnimationJointDriver::~AnimationJointDriver(void)",
        ),
    ),
    (
        "Reset__Q26choreo20AnimationJointDriver",
        Ok(
            "choreo::AnimationJointDriver::Reset(void)",
        ),
    ),
    (
        "Advance__Q26choreo20AnimationJointDriverf",
        Ok(
            "choreo::AnimationJointDriver::Advance(float)",
        ),
    ),
    (
        "GetBlendInTime__CQ26choreo20AnimationJointDriver",
        Ok(
            "choreo::AnimationJointDriver::GetBlendInTime(void) const",
        ),
    ),
    (
        "GetBlendOutTime__CQ26choreo20AnimationJointDriver",
        Ok(
            "choreo::AnimationJointDriver::GetBlendOutTime(void) const",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo20AnimationJointDriveri",
        Ok(
            "choreo::AnimationJointDriver::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo20AnimationJointDriveri",
        Ok(
            "choreo::AnimationJointDriver::GetJointPriority(int) const",
        ),
    ),
    (
        "HasJointTranslation__CQ26choreo20AnimationJointDriveri",
        Ok(
            "choreo::AnimationJointDriver::HasJointTranslation(int) const",
        ),
    ),
    (
        "GetJointTranslation__CQ26choreo20AnimationJointDriveriRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::AnimationJointDriver::GetJointTranslation(int, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasJointRotation__CQ26choreo20AnimationJointDriveri",
        Ok(
            "choreo::AnimationJointDriver::HasJointRotation(int) const",
        ),
    ),
    (
        "GetJointRotation__CQ26choreo20AnimationJointDriveriRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::AnimationJointDriver::GetJointRotation(int, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "GetGroupWeight__CQ26choreo20AnimationJointDriverG13tUidUnaligned",
        Ok(
            "choreo::AnimationJointDriver::GetGroupWeight(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupPriority__CQ26choreo20AnimationJointDriverG13tUidUnaligned",
        Ok(
            "choreo::AnimationJointDriver::GetGroupPriority(tUidUnaligned) const",
        ),
    ),
    (
        "HasGroupTranslation__CQ26choreo20AnimationJointDriverG13tUidUnaligned",
        Ok(
            "choreo::AnimationJointDriver::HasGroupTranslation(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupTranslation__CQ26choreo20AnimationJointDriverG13tUidUnalignedRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::AnimationJointDriver::GetGroupTranslation(tUidUnaligned, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasGroupRotation__CQ26choreo20AnimationJointDriverG13tUidUnaligned",
        Ok(
            "choreo::AnimationJointDriver::HasGroupRotation(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupRotation__CQ26choreo20AnimationJointDriverG13tUidUnalignedRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::AnimationJointDriver::GetGroupRotation(tUidUnaligned, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "__Q26choreo19AnimationFootDriverPQ26choreo6RigLegPQ26choreo9AnimationPQ26choreo14AnimationFrame",
        Ok(
            "choreo::AnimationFootDriver::AnimationFootDriver(choreo::RigLeg *, choreo::Animation *, choreo::AnimationFrame *)",
        ),
    ),
    (
        "_$_Q26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::~AnimationFootDriver(void)",
        ),
    ),
    (
        "GetFootBlendInTime__CQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::GetFootBlendInTime(void) const",
        ),
    ),
    (
        "GetFootBlendOutTime__CQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::GetFootBlendOutTime(void) const",
        ),
    ),
    (
        "GetFootWeight__CQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::GetFootWeight(void) const",
        ),
    ),
    (
        "GetFootPriority__CQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::GetFootPriority(void) const",
        ),
    ),
    (
        "HasFootEffectorTranslation__CQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::HasFootEffectorTranslation(void) const",
        ),
    ),
    (
        "GetFootEffectorTranslation__CQ26choreo19AnimationFootDriverRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::AnimationFootDriver::GetFootEffectorTranslation(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasFootEffectorRotation__CQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::HasFootEffectorRotation(void) const",
        ),
    ),
    (
        "GetFootEffectorRotation__CQ26choreo19AnimationFootDriverRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::AnimationFootDriver::GetFootEffectorRotation(RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "HasFootPoleVectorTranslation__CQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::HasFootPoleVectorTranslation(void) const",
        ),
    ),
    (
        "GetFootPoleVectorTranslation__CQ26choreo19AnimationFootDriverRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::AnimationFootDriver::GetFootPoleVectorTranslation(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasFootPlanted__CQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::HasFootPlanted(void) const",
        ),
    ),
    (
        "IsFootPlanted__CQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::IsFootPlanted(void) const",
        ),
    ),
    (
        "HasFootGroundFixup__CQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::HasFootGroundFixup(void) const",
        ),
    ),
    (
        "GetFootGroundFixup__CQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver::GetFootGroundFixup(void) const",
        ),
    ),
    (
        "__Q26choreo15AnimationDriverPQ26choreo9Animation",
        Ok(
            "choreo::AnimationDriver::AnimationDriver(choreo::Animation *)",
        ),
    ),
    (
        "_$_Q26choreo15AnimationDriver",
        Ok(
            "choreo::AnimationDriver::~AnimationDriver(void)",
        ),
    ),
    (
        "Clone__CQ26choreo15AnimationDriver",
        Ok(
            "choreo::AnimationDriver::Clone(void) const",
        ),
    ),
    (
        "SetPartition__Q26choreo15AnimationDriverPQ26choreo9Partition",
        Ok(
            "choreo::AnimationDriver::SetPartition(choreo::Partition *)",
        ),
    ),
    (
        "SetWeight__Q26choreo15AnimationDriverf",
        Ok(
            "choreo::AnimationDriver::SetWeight(float)",
        ),
    ),
    (
        "SetPriority__Q26choreo15AnimationDriveri",
        Ok(
            "choreo::AnimationDriver::SetPriority(int)",
        ),
    ),
    (
        "SetSpeed__Q26choreo15AnimationDriverf",
        Ok(
            "choreo::AnimationDriver::SetSpeed(float)",
        ),
    ),
    (
        "SetStartFrame__Q26choreo15AnimationDriverf",
        Ok(
            "choreo::AnimationDriver::SetStartFrame(float)",
        ),
    ),
    (
        "SetEndFrame__Q26choreo15AnimationDriverf",
        Ok(
            "choreo::AnimationDriver::SetEndFrame(float)",
        ),
    ),
    (
        "SetPlaybackTimings__Q26choreo15AnimationDriverffff",
        Ok(
            "choreo::AnimationDriver::SetPlaybackTimings(float, float, float, float)",
        ),
    ),
    (
        "GetCycleDuration__CQ26choreo15AnimationDriver",
        Ok(
            "choreo::AnimationDriver::GetCycleDuration(void) const",
        ),
    ),
    (
        "GetDuration__CQ26choreo15AnimationDriver",
        Ok(
            "choreo::AnimationDriver::GetDuration(void) const",
        ),
    ),
    (
        "GetTimeRemaining__CQ26choreo15AnimationDriver",
        Ok(
            "choreo::AnimationDriver::GetTimeRemaining(void) const",
        ),
    ),
    (
        "GetValidFrame__CQ26choreo15AnimationDriverf",
        Ok(
            "choreo::AnimationDriver::GetValidFrame(float) const",
        ),
    ),
    (
        "GetNextFrame__CQ26choreo15AnimationDriverf",
        Ok(
            "choreo::AnimationDriver::GetNextFrame(float) const",
        ),
    ),
    (
        "GetFrame__CQ26choreo15AnimationDriver",
        Ok(
            "choreo::AnimationDriver::GetFrame(void) const",
        ),
    ),
    (
        "SetFrame__Q26choreo15AnimationDriverf",
        Ok(
            "choreo::AnimationDriver::SetFrame(float)",
        ),
    ),
    (
        "Reset__Q26choreo15AnimationDriver",
        Ok(
            "choreo::AnimationDriver::Reset(void)",
        ),
    ),
    (
        "Begin__Q26choreo15AnimationDriverPQ26choreo6Puppet",
        Ok(
            "choreo::AnimationDriver::Begin(choreo::Puppet *)",
        ),
    ),
    (
        "Advance__Q26choreo15AnimationDriverf",
        Ok(
            "choreo::AnimationDriver::Advance(float)",
        ),
    ),
    (
        "IsFinished__CQ26choreo15AnimationDriver",
        Ok(
            "choreo::AnimationDriver::IsFinished(void) const",
        ),
    ),
    (
        "End__Q26choreo15AnimationDriverPQ26choreo6Puppet",
        Ok(
            "choreo::AnimationDriver::End(choreo::Puppet *)",
        ),
    ),
    (
        "Apply__Q26choreo15AnimationDriverPQ26choreo6Engine",
        Ok(
            "choreo::AnimationDriver::Apply(choreo::Engine *)",
        ),
    ),
    (
        "__tfQ26choreo9Animation",
        Ok(
            "choreo::Animation type_info function",
        ),
    ),
    (
        "__tfQ26choreo15AnimationDriver",
        Ok(
            "choreo::AnimationDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo14AnimationFrame",
        Ok(
            "choreo::AnimationFrame type_info function",
        ),
    ),
    (
        "__tfQ26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo20AnimationJointDriver",
        Ok(
            "choreo::AnimationJointDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver type_info function",
        ),
    ),
    (
        "_$_Q26choreo12PuppetDriver",
        Ok(
            "choreo::PuppetDriver::~PuppetDriver(void)",
        ),
    ),
    (
        "__Q26choreo12PuppetDriver",
        Ok(
            "choreo::PuppetDriver::PuppetDriver(void)",
        ),
    ),
    (
        "_$_Q26choreo19PuppetDriverFactory",
        Ok(
            "choreo::PuppetDriverFactory::~PuppetDriverFactory(void)",
        ),
    ),
    (
        "__Q26choreo19PuppetDriverFactory",
        Ok(
            "choreo::PuppetDriverFactory::PuppetDriverFactory(void)",
        ),
    ),
    (
        "_$_Q26choreo15RootBlendDriver",
        Ok(
            "choreo::RootBlendDriver::~RootBlendDriver(void)",
        ),
    ),
    (
        "__Q26choreo15RootBlendDriver",
        Ok(
            "choreo::RootBlendDriver::RootBlendDriver(void)",
        ),
    ),
    (
        "_$_Q26choreo16JointBlendDriver",
        Ok(
            "choreo::JointBlendDriver::~JointBlendDriver(void)",
        ),
    ),
    (
        "__Q26choreo16JointBlendDriver",
        Ok(
            "choreo::JointBlendDriver::JointBlendDriver(void)",
        ),
    ),
    (
        "_$_Q26choreo15FootBlendDriver",
        Ok(
            "choreo::FootBlendDriver::~FootBlendDriver(void)",
        ),
    ),
    (
        "__Q26choreo15FootBlendDriver",
        Ok(
            "choreo::FootBlendDriver::FootBlendDriver(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ26choreo9Partition",
        Ok(
            "radLoadInventory::SafeCast<choreo::Partition>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ26choreo12PuppetDriver",
        Ok(
            "choreo::PuppetDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo19PuppetDriverFactory",
        Ok(
            "choreo::PuppetDriverFactory type_info function",
        ),
    ),
    (
        "__tfQ26choreo15RootBlendDriver",
        Ok(
            "choreo::RootBlendDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo16JointBlendDriver",
        Ok(
            "choreo::JointBlendDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo15FootBlendDriver",
        Ok(
            "choreo::FootBlendDriver type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ26choreo9Partition",
        Ok(
            "radLoadInventory::SafeCast<choreo::Partition> type_info function",
        ),
    ),
    (
        "_$_Q26choreo6Driver",
        Ok(
            "choreo::Driver::~Driver(void)",
        ),
    ),
    (
        "__Q26choreo6Driver",
        Ok(
            "choreo::Driver::Driver(void)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ26choreo9PartitionP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<choreo::Partition>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "__tfQ26choreo6Driver",
        Ok(
            "choreo::Driver type_info function",
        ),
    ),
    (
        "__Q36choreo4Bank11RawIteratorPQ26choreo4Bank",
        Ok(
            "choreo::Bank::RawIterator::RawIterator(choreo::Bank *)",
        ),
    ),
    (
        "First__Q36choreo4Bank11RawIterator",
        Ok(
            "choreo::Bank::RawIterator::First(void)",
        ),
    ),
    (
        "Last__Q36choreo4Bank11RawIterator",
        Ok(
            "choreo::Bank::RawIterator::Last(void)",
        ),
    ),
    (
        "Next__Q36choreo4Bank11RawIterator",
        Ok(
            "choreo::Bank::RawIterator::Next(void)",
        ),
    ),
    (
        "Prev__Q36choreo4Bank11RawIterator",
        Ok(
            "choreo::Bank::RawIterator::Prev(void)",
        ),
    ),
    (
        "__Q26choreo4BankPQ26choreo3Rig",
        Ok(
            "choreo::Bank::Bank(choreo::Rig *)",
        ),
    ),
    (
        "_$_Q26choreo4Bank",
        Ok(
            "choreo::Bank::~Bank(void)",
        ),
    ),
    (
        "Find__CQ26choreo4BankRQ216radLoadInventory12SafeCastBaseG13tUidUnaligned",
        Ok(
            "choreo::Bank::Find(radLoadInventory::SafeCastBase &, tUidUnaligned) const",
        ),
    ),
    (
        "Store__Q26choreo4BankP7tEntity",
        Ok(
            "choreo::Bank::Store(tEntity *)",
        ),
    ),
    (
        "NewRawIterator__Q26choreo4Bank",
        Ok(
            "choreo::Bank::NewRawIterator(void)",
        ),
    ),
    (
        "ReadFromScript__Q26choreo4BankPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::Bank::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "RegisterScriptReadHandler__Q26choreo4BankPFPQ26choreo12ScriptReaderPQ26choreo8BaseBank_b",
        Ok(
            "choreo::Bank::RegisterScriptReadHandler(bool (*)(choreo::ScriptReader *, choreo::BaseBank *))",
        ),
    ),
    (
        "RegisterDefaultScriptReadHandlers__Q26choreo4Bank",
        Ok(
            "choreo::Bank::RegisterDefaultScriptReadHandlers(void)",
        ),
    ),
    (
        "_$_12tEntityTable",
        Ok(
            "tEntityTable::~tEntityTable(void)",
        ),
    ),
    (
        "__tf12tEntityTable",
        Ok(
            "tEntityTable type_info function",
        ),
    ),
    (
        "__tfQ36choreo4Bank11RawIterator",
        Ok(
            "choreo::Bank::RawIterator type_info function",
        ),
    ),
    (
        "__tfQ26choreo4Bank",
        Ok(
            "choreo::Bank type_info function",
        ),
    ),
    (
        "_$_Q218radLoadHashedStore8Iterator",
        Ok(
            "radLoadHashedStore::Iterator::~Iterator(void)",
        ),
    ),
    (
        "__Q36choreo8BaseBank11RawIterator",
        Ok(
            "choreo::BaseBank::RawIterator::RawIterator(void)",
        ),
    ),
    (
        "_$_Q26choreo8BaseBank",
        Ok(
            "choreo::BaseBank::~BaseBank(void)",
        ),
    ),
    (
        "__Q26choreo8BaseBank",
        Ok(
            "choreo::BaseBank::BaseBank(void)",
        ),
    ),
    (
        "GetRig__CQ26choreo4Bank",
        Ok(
            "choreo::Bank::GetRig(void) const",
        ),
    ),
    (
        "_$_Q36choreo4Bank11RawIterator",
        Ok(
            "choreo::Bank::RawIterator::~RawIterator(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ26choreo3Rig",
        Ok(
            "radLoadInventory::SafeCast<choreo::Rig>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ36choreo8BaseBank11RawIterator",
        Ok(
            "choreo::BaseBank::RawIterator type_info function",
        ),
    ),
    (
        "__tfQ26choreo8BaseBank",
        Ok(
            "choreo::BaseBank type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ26choreo3Rig",
        Ok(
            "radLoadInventory::SafeCast<choreo::Rig> type_info function",
        ),
    ),
    (
        "_$_Q2t9HashTable1Z9IRefCount8Iterator",
        Ok(
            "HashTable<IRefCount>::Iterator::~Iterator(void)",
        ),
    ),
    (
        "_$_Q36choreo8BaseBank11RawIterator",
        Ok(
            "choreo::BaseBank::RawIterator::~RawIterator(void)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ26choreo3RigP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<choreo::Rig>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "GetFindHook__6choreov",
        Ok(
            "choreo::GetFindHook(void)",
        ),
    ),
    (
        "GetFindHookContext__6choreov",
        Ok(
            "choreo::GetFindHookContext(void)",
        ),
    ),
    (
        "__Q26choreo9MultiBankPQ26choreo8BaseBankT1",
        Ok(
            "choreo::MultiBank::MultiBank(choreo::BaseBank *, choreo::BaseBank *)",
        ),
    ),
    (
        "_$_Q26choreo9MultiBank",
        Ok(
            "choreo::MultiBank::~MultiBank(void)",
        ),
    ),
    (
        "Find__CQ26choreo9MultiBankRQ216radLoadInventory12SafeCastBaseG13tUidUnaligned",
        Ok(
            "choreo::MultiBank::Find(radLoadInventory::SafeCastBase &, tUidUnaligned) const",
        ),
    ),
    (
        "Store__Q26choreo9MultiBankP7tEntity",
        Ok(
            "choreo::MultiBank::Store(tEntity *)",
        ),
    ),
    (
        "__Q26choreo25P3DEntityStoreWrapperBankP12tEntityStore",
        Ok(
            "choreo::P3DEntityStoreWrapperBank::P3DEntityStoreWrapperBank(tEntityStore *)",
        ),
    ),
    (
        "_$_Q26choreo25P3DEntityStoreWrapperBank",
        Ok(
            "choreo::P3DEntityStoreWrapperBank::~P3DEntityStoreWrapperBank(void)",
        ),
    ),
    (
        "Find__CQ26choreo25P3DEntityStoreWrapperBankRQ216radLoadInventory12SafeCastBaseG13tUidUnaligned",
        Ok(
            "choreo::P3DEntityStoreWrapperBank::Find(radLoadInventory::SafeCastBase &, tUidUnaligned) const",
        ),
    ),
    (
        "Store__Q26choreo25P3DEntityStoreWrapperBankP7tEntity",
        Ok(
            "choreo::P3DEntityStoreWrapperBank::Store(tEntity *)",
        ),
    ),
    (
        "NewRawIterator__Q26choreo25P3DEntityStoreWrapperBank",
        Ok(
            "choreo::P3DEntityStoreWrapperBank::NewRawIterator(void)",
        ),
    ),
    (
        "__Q36choreo23P3DInventoryWrapperBank11RawIteratorPQ26choreo23P3DInventoryWrapperBank",
        Ok(
            "choreo::P3DInventoryWrapperBank::RawIterator::RawIterator(choreo::P3DInventoryWrapperBank *)",
        ),
    ),
    (
        "First__Q36choreo23P3DInventoryWrapperBank11RawIterator",
        Ok(
            "choreo::P3DInventoryWrapperBank::RawIterator::First(void)",
        ),
    ),
    (
        "Last__Q36choreo23P3DInventoryWrapperBank11RawIterator",
        Ok(
            "choreo::P3DInventoryWrapperBank::RawIterator::Last(void)",
        ),
    ),
    (
        "Next__Q36choreo23P3DInventoryWrapperBank11RawIterator",
        Ok(
            "choreo::P3DInventoryWrapperBank::RawIterator::Next(void)",
        ),
    ),
    (
        "Prev__Q36choreo23P3DInventoryWrapperBank11RawIterator",
        Ok(
            "choreo::P3DInventoryWrapperBank::RawIterator::Prev(void)",
        ),
    ),
    (
        "_$_Q26choreo23P3DInventoryWrapperBank",
        Ok(
            "choreo::P3DInventoryWrapperBank::~P3DInventoryWrapperBank(void)",
        ),
    ),
    (
        "Find__CQ26choreo23P3DInventoryWrapperBankRQ216radLoadInventory12SafeCastBaseG13tUidUnaligned",
        Ok(
            "choreo::P3DInventoryWrapperBank::Find(radLoadInventory::SafeCastBase &, tUidUnaligned) const",
        ),
    ),
    (
        "Store__Q26choreo23P3DInventoryWrapperBankP7tEntity",
        Ok(
            "choreo::P3DInventoryWrapperBank::Store(tEntity *)",
        ),
    ),
    (
        "NewRawIterator__Q26choreo23P3DInventoryWrapperBank",
        Ok(
            "choreo::P3DInventoryWrapperBank::NewRawIterator(void)",
        ),
    ),
    (
        "__tfQ26choreo9MultiBank",
        Ok(
            "choreo::MultiBank type_info function",
        ),
    ),
    (
        "__tfQ26choreo25P3DEntityStoreWrapperBank",
        Ok(
            "choreo::P3DEntityStoreWrapperBank type_info function",
        ),
    ),
    (
        "__tfQ36choreo23P3DInventoryWrapperBank11RawIterator",
        Ok(
            "choreo::P3DInventoryWrapperBank::RawIterator type_info function",
        ),
    ),
    (
        "__tfQ26choreo23P3DInventoryWrapperBank",
        Ok(
            "choreo::P3DInventoryWrapperBank type_info function",
        ),
    ),
    (
        "GetRig__CQ26choreo9MultiBank",
        Ok(
            "choreo::MultiBank::GetRig(void) const",
        ),
    ),
    (
        "NewRawIterator__Q26choreo9MultiBank",
        Ok(
            "choreo::MultiBank::NewRawIterator(void)",
        ),
    ),
    (
        "GetRig__CQ26choreo25P3DEntityStoreWrapperBank",
        Ok(
            "choreo::P3DEntityStoreWrapperBank::GetRig(void) const",
        ),
    ),
    (
        "GetRig__CQ26choreo23P3DInventoryWrapperBank",
        Ok(
            "choreo::P3DInventoryWrapperBank::GetRig(void) const",
        ),
    ),
    (
        "_$_Q36choreo23P3DInventoryWrapperBank11RawIterator",
        Ok(
            "choreo::P3DInventoryWrapperBank::RawIterator::~RawIterator(void)",
        ),
    ),
    (
        "_GLOBAL_$I$_6choreo$DEFAULT_FACING_VECTOR",
        Ok(
            "global constructors keyed to choreo::DEFAULT_FACING_VECTOR",
        ),
    ),
    (
        "_$_Q26choreo28FootBlenderEffectorSimTarget",
        Ok(
            "choreo::FootBlenderEffectorSimTarget::~FootBlenderEffectorSimTarget(void)",
        ),
    ),
    (
        "GetPos__CQ26choreo28FootBlenderEffectorSimTargetRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "choreo::FootBlenderEffectorSimTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
        ),
    ),
    (
        "GetTransform__CQ26choreo28FootBlenderEffectorSimTargetRQ218RadicalMathLibrary6Matrixf",
        Ok(
            "choreo::FootBlenderEffectorSimTarget::GetTransform(RadicalMathLibrary::Matrix &, float) const",
        ),
    ),
    (
        "_$_Q26choreo30FootBlenderPoleVectorSimTarget",
        Ok(
            "choreo::FootBlenderPoleVectorSimTarget::~FootBlenderPoleVectorSimTarget(void)",
        ),
    ),
    (
        "GetPos__CQ26choreo30FootBlenderPoleVectorSimTargetRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "choreo::FootBlenderPoleVectorSimTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
        ),
    ),
    (
        "GetTransform__CQ26choreo30FootBlenderPoleVectorSimTargetRQ218RadicalMathLibrary6Matrixf",
        Ok(
            "choreo::FootBlenderPoleVectorSimTarget::GetTransform(RadicalMathLibrary::Matrix &, float) const",
        ),
    ),
    (
        "__Q26choreo6EngineP5tPosePQ26choreo3Rigbi",
        Ok(
            "choreo::Engine::Engine(tPose *, choreo::Rig *, bool, int)",
        ),
    ),
    (
        "_$_Q26choreo6Engine",
        Ok(
            "choreo::Engine::~Engine(void)",
        ),
    ),
    (
        "GetFootBlender__CQ26choreo6Enginei",
        Ok(
            "choreo::Engine::GetFootBlender(int) const",
        ),
    ),
    (
        "GetLegCount__CQ26choreo6Engine",
        Ok(
            "choreo::Engine::GetLegCount(void) const",
        ),
    ),
    (
        "SetIsLegIKEnabled__Q26choreo6Engineib",
        Ok(
            "choreo::Engine::SetIsLegIKEnabled(int, bool)",
        ),
    ),
    (
        "IsFootPlanted__CQ26choreo6Enginei",
        Ok(
            "choreo::Engine::IsFootPlanted(int) const",
        ),
    ),
    (
        "GetFootPosition__CQ26choreo6Enginei",
        Ok(
            "choreo::Engine::GetFootPosition(int) const",
        ),
    ),
    (
        "Push__Q26choreo6EnginePQ26choreo6Driver",
        Ok(
            "choreo::Engine::Push(choreo::Driver *)",
        ),
    ),
    (
        "Advance__Q26choreo6Enginef",
        Ok(
            "choreo::Engine::Advance(float)",
        ),
    ),
    (
        "UpdateBegin__Q26choreo6Engine",
        Ok(
            "choreo::Engine::UpdateBegin(void)",
        ),
    ),
    (
        "UpdateRoot__Q26choreo6Engine",
        Ok(
            "choreo::Engine::UpdateRoot(void)",
        ),
    ),
    (
        "UpdatePose__Q26choreo6Engine",
        Ok(
            "choreo::Engine::UpdatePose(void)",
        ),
    ),
    (
        "UpdateEnd__Q26choreo6Engine",
        Ok(
            "choreo::Engine::UpdateEnd(void)",
        ),
    ),
    (
        "__tfQ26choreo6Engine",
        Ok(
            "choreo::Engine type_info function",
        ),
    ),
    (
        "__tfQ26choreo28FootBlenderEffectorSimTarget",
        Ok(
            "choreo::FootBlenderEffectorSimTarget type_info function",
        ),
    ),
    (
        "__tfQ26choreo30FootBlenderPoleVectorSimTarget",
        Ok(
            "choreo::FootBlenderPoleVectorSimTarget type_info function",
        ),
    ),
    (
        "__Q26choreo11FootBlenderPQ26choreo3RigPQ26choreo6RigLegii",
        Ok(
            "choreo::FootBlender::FootBlender(choreo::Rig *, choreo::RigLeg *, int, int)",
        ),
    ),
    (
        "_$_Q26choreo11FootBlender",
        Ok(
            "choreo::FootBlender::~FootBlender(void)",
        ),
    ),
    (
        "Push__Q26choreo11FootBlenderPQ26choreo15FootBlendDriver",
        Ok(
            "choreo::FootBlender::Push(choreo::FootBlendDriver *)",
        ),
    ),
    (
        "Advance__Q26choreo11FootBlenderf",
        Ok(
            "choreo::FootBlender::Advance(float)",
        ),
    ),
    (
        "UpdateEffectorTranslateDriver__Q26choreo11FootBlenderPQ26choreo15FootBlendDriverfi",
        Ok(
            "choreo::FootBlender::UpdateEffectorTranslateDriver(choreo::FootBlendDriver *, float, int)",
        ),
    ),
    (
        "UpdateEffectorTranslate__Q26choreo11FootBlender",
        Ok(
            "choreo::FootBlender::UpdateEffectorTranslate(void)",
        ),
    ),
    (
        "UpdatePoleVectorTranslateDriver__Q26choreo11FootBlenderPQ26choreo15FootBlendDriverfi",
        Ok(
            "choreo::FootBlender::UpdatePoleVectorTranslateDriver(choreo::FootBlendDriver *, float, int)",
        ),
    ),
    (
        "UpdatePoleVectorTranslate__Q26choreo11FootBlender",
        Ok(
            "choreo::FootBlender::UpdatePoleVectorTranslate(void)",
        ),
    ),
    (
        "UpdateEffectorRotateDriver__Q26choreo11FootBlenderPQ26choreo15FootBlendDriverfi",
        Ok(
            "choreo::FootBlender::UpdateEffectorRotateDriver(choreo::FootBlendDriver *, float, int)",
        ),
    ),
    (
        "UpdateEffectorRotate__Q26choreo11FootBlender",
        Ok(
            "choreo::FootBlender::UpdateEffectorRotate(void)",
        ),
    ),
    (
        "UpdateFootPlantDriver__Q26choreo11FootBlenderPQ26choreo15FootBlendDriverfi",
        Ok(
            "choreo::FootBlender::UpdateFootPlantDriver(choreo::FootBlendDriver *, float, int)",
        ),
    ),
    (
        "UpdateFootPlant__Q26choreo11FootBlender",
        Ok(
            "choreo::FootBlender::UpdateFootPlant(void)",
        ),
    ),
    (
        "UpdateGroundFixupDriver__Q26choreo11FootBlenderPQ26choreo15FootBlendDriverfi",
        Ok(
            "choreo::FootBlender::UpdateGroundFixupDriver(choreo::FootBlendDriver *, float, int)",
        ),
    ),
    (
        "UpdateGroundFixup__Q26choreo11FootBlender",
        Ok(
            "choreo::FootBlender::UpdateGroundFixup(void)",
        ),
    ),
    (
        "Update__Q26choreo11FootBlenderPQ25poser4Pose",
        Ok(
            "choreo::FootBlender::Update(poser::Pose *)",
        ),
    ),
    (
        "BlendDriverNoContext__H2ZQ218RadicalMathLibrary6VectorZQ26choreo15FootBlendDriver_6choreoPX11PMX11CFPCX11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        Ok(
            "void choreo::BlendDriverNoContext<RadicalMathLibrary::Vector, choreo::FootBlendDriver>(choreo::FootBlendDriver *, void (choreo::FootBlendDriver::*)(RadicalMathLibrary::Vector &) const, float, int, choreo::BlendPriority<RadicalMathLibrary::Vector> *, int, int &)",
        ),
    ),
    (
        "BlendPriorities__H1ZQ218RadicalMathLibrary6Vector_6choreoPCQ26choreot13BlendPriority1ZX01iRX01_b",
        Ok(
            "bool choreo::BlendPriorities<RadicalMathLibrary::Vector>(choreo::BlendPriority<RadicalMathLibrary::Vector> const *, int, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "BlendDriverNoContext__H2ZQ218RadicalMathLibrary10QuaternionZQ26choreo15FootBlendDriver_6choreoPX11PMX11CFPCX11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        Ok(
            "void choreo::BlendDriverNoContext<RadicalMathLibrary::Quaternion, choreo::FootBlendDriver>(choreo::FootBlendDriver *, void (choreo::FootBlendDriver::*)(RadicalMathLibrary::Quaternion &) const, float, int, choreo::BlendPriority<RadicalMathLibrary::Quaternion> *, int, int &)",
        ),
    ),
    (
        "BlendPriorities__H1ZQ218RadicalMathLibrary10Quaternion_6choreoPCQ26choreot13BlendPriority1ZX01iRX01_b",
        Ok(
            "bool choreo::BlendPriorities<RadicalMathLibrary::Quaternion>(choreo::BlendPriority<RadicalMathLibrary::Quaternion> const *, int, RadicalMathLibrary::Quaternion &)",
        ),
    ),
    (
        "BlendDriverNoContext__H2ZfZQ26choreo15FootBlendDriver_6choreoPX11PMX11CFPCX11_X01fiPQ26choreot13BlendPriority1ZX01iRi_v",
        Ok(
            "void choreo::BlendDriverNoContext<float, choreo::FootBlendDriver>(choreo::FootBlendDriver *, float (choreo::FootBlendDriver::*)() const, float, int, choreo::BlendPriority<float> *, int, int &)",
        ),
    ),
    (
        "BlendPriorities__H1Zf_6choreoPCQ26choreot13BlendPriority1ZX01iRX01_b",
        Ok(
            "bool choreo::BlendPriorities<float>(choreo::BlendPriority<float> const *, int, float &)",
        ),
    ),
    (
        "__tfQ26choreo11FootBlender",
        Ok(
            "choreo::FootBlender type_info function",
        ),
    ),
    (
        "GetMinimumJointIndex__CQ26choreo11FootBlender",
        Ok(
            "choreo::FootBlender::GetMinimumJointIndex(void) const",
        ),
    ),
    (
        "GetPriority__CQ26choreo11FootBlender",
        Ok(
            "choreo::FootBlender::GetPriority(void) const",
        ),
    ),
    (
        "GetFootPlanted__CQ26choreo15FootBlendDriver",
        Ok(
            "choreo::FootBlendDriver::GetFootPlanted(void) const",
        ),
    ),
    (
        "__Q26choreot13BlendPriority1ZQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::BlendPriority<RadicalMathLibrary::Vector>::BlendPriority(void)",
        ),
    ),
    (
        "__Q26choreot13BlendPriority1ZQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::BlendPriority<RadicalMathLibrary::Quaternion>::BlendPriority(void)",
        ),
    ),
    (
        "_$_Q26choreo11FootPlanter",
        Ok(
            "choreo::FootPlanter::~FootPlanter(void)",
        ),
    ),
    (
        "Reset__Q26choreo11FootPlanter",
        Ok(
            "choreo::FootPlanter::Reset(void)",
        ),
    ),
    (
        "Advance__Q26choreo11FootPlanterf",
        Ok(
            "choreo::FootPlanter::Advance(float)",
        ),
    ),
    (
        "Update__Q26choreo11FootPlanterPQ25poser4Pose",
        Ok(
            "choreo::FootPlanter::Update(poser::Pose *)",
        ),
    ),
    (
        "__tfQ26choreo11FootPlanter",
        Ok(
            "choreo::FootPlanter type_info function",
        ),
    ),
    (
        "GetMinimumJointIndex__CQ26choreo11FootPlanter",
        Ok(
            "choreo::FootPlanter::GetMinimumJointIndex(void) const",
        ),
    ),
    (
        "GetPriority__CQ26choreo11FootPlanter",
        Ok(
            "choreo::FootPlanter::GetPriority(void) const",
        ),
    ),
    (
        "__Q26choreo17InternalAnimationP9tSkeletonP10tAnimation",
        Ok(
            "choreo::InternalAnimation::InternalAnimation(tSkeleton *, tAnimation *)",
        ),
    ),
    (
        "_$_Q26choreo17InternalAnimation",
        Ok(
            "choreo::InternalAnimation::~InternalAnimation(void)",
        ),
    ),
    (
        "HasJointTranslation__CQ26choreo17InternalAnimationi",
        Ok(
            "choreo::InternalAnimation::HasJointTranslation(int) const",
        ),
    ),
    (
        "GetJointTranslation__CQ26choreo17InternalAnimationifRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::InternalAnimation::GetJointTranslation(int, float, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasJointRotation__CQ26choreo17InternalAnimationi",
        Ok(
            "choreo::InternalAnimation::HasJointRotation(int) const",
        ),
    ),
    (
        "GetJointRotation__CQ26choreo17InternalAnimationifRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::InternalAnimation::GetJointRotation(int, float, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "HasGroupTranslation__CQ26choreo17InternalAnimationG13tUidUnaligned",
        Ok(
            "choreo::InternalAnimation::HasGroupTranslation(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupTranslation__CQ26choreo17InternalAnimationG13tUidUnalignedfRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::InternalAnimation::GetGroupTranslation(tUidUnaligned, float, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasGroupRotation__CQ26choreo17InternalAnimationG13tUidUnaligned",
        Ok(
            "choreo::InternalAnimation::HasGroupRotation(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupRotation__CQ26choreo17InternalAnimationG13tUidUnalignedfRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::InternalAnimation::GetGroupRotation(tUidUnaligned, float, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "__Q26choreo12JointBlenderiii",
        Ok(
            "choreo::JointBlender::JointBlender(int, int, int)",
        ),
    ),
    (
        "_$_Q26choreo12JointBlender",
        Ok(
            "choreo::JointBlender::~JointBlender(void)",
        ),
    ),
    (
        "SetMinimumJointIndex__Q26choreo12JointBlenderi",
        Ok(
            "choreo::JointBlender::SetMinimumJointIndex(int)",
        ),
    ),
    (
        "Push__Q26choreo12JointBlenderPQ26choreo16JointBlendDriver",
        Ok(
            "choreo::JointBlender::Push(choreo::JointBlendDriver *)",
        ),
    ),
    (
        "Advance__Q26choreo12JointBlenderf",
        Ok(
            "choreo::JointBlender::Advance(float)",
        ),
    ),
    (
        "UpdateDriverTranslation__Q26choreo12JointBlenderiPQ26choreo16JointBlendDriverfi",
        Ok(
            "choreo::JointBlender::UpdateDriverTranslation(int, choreo::JointBlendDriver *, float, int)",
        ),
    ),
    (
        "UpdateDriverRotation__Q26choreo12JointBlenderiPQ26choreo16JointBlendDriverfi",
        Ok(
            "choreo::JointBlender::UpdateDriverRotation(int, choreo::JointBlendDriver *, float, int)",
        ),
    ),
    (
        "UpdateTranslation__Q26choreo12JointBlenderPQ25poser5Joint",
        Ok(
            "choreo::JointBlender::UpdateTranslation(poser::Joint *)",
        ),
    ),
    (
        "UpdateRotation__Q26choreo12JointBlenderPQ25poser5Joint",
        Ok(
            "choreo::JointBlender::UpdateRotation(poser::Joint *)",
        ),
    ),
    (
        "Update__Q26choreo12JointBlenderPQ25poser4Pose",
        Ok(
            "choreo::JointBlender::Update(poser::Pose *)",
        ),
    ),
    (
        "BlendDriverWithContext__H3ZQ218RadicalMathLibrary6VectorZiZQ26choreo16JointBlendDriver_6choreoX11PX21PMX21CFPCX21X11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        Ok(
            "void choreo::BlendDriverWithContext<RadicalMathLibrary::Vector, int, choreo::JointBlendDriver>(int, choreo::JointBlendDriver *, void (choreo::JointBlendDriver::*)(int, RadicalMathLibrary::Vector &) const, float, int, choreo::BlendPriority<RadicalMathLibrary::Vector> *, int, int &)",
        ),
    ),
    (
        "BlendDriverWithContext__H3ZQ218RadicalMathLibrary10QuaternionZiZQ26choreo16JointBlendDriver_6choreoX11PX21PMX21CFPCX21X11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        Ok(
            "void choreo::BlendDriverWithContext<RadicalMathLibrary::Quaternion, int, choreo::JointBlendDriver>(int, choreo::JointBlendDriver *, void (choreo::JointBlendDriver::*)(int, RadicalMathLibrary::Quaternion &) const, float, int, choreo::BlendPriority<RadicalMathLibrary::Quaternion> *, int, int &)",
        ),
    ),
    (
        "__tfQ26choreo12JointBlender",
        Ok(
            "choreo::JointBlender type_info function",
        ),
    ),
    (
        "GetMinimumJointIndex__CQ26choreo12JointBlender",
        Ok(
            "choreo::JointBlender::GetMinimumJointIndex(void) const",
        ),
    ),
    (
        "GetPriority__CQ26choreo12JointBlender",
        Ok(
            "choreo::JointBlender::GetPriority(void) const",
        ),
    ),
    (
        "RegisterScriptReadHandler__6choreoPFPQ26choreo12ScriptReaderPQ26choreo8BaseBank_b",
        Ok(
            "choreo::RegisterScriptReadHandler(bool (*)(choreo::ScriptReader *, choreo::BaseBank *))",
        ),
    ),
    (
        "RegisterDefaultScriptReadHandlers__6choreov",
        Ok(
            "choreo::RegisterDefaultScriptReadHandlers(void)",
        ),
    ),
    (
        "ReadFromScript__6choreoPQ26choreo12ScriptReaderP12tEntityStore",
        Ok(
            "choreo::ReadFromScript(choreo::ScriptReader *, tEntityStore *)",
        ),
    ),
    (
        "ReadFromScriptFile__6choreoPQ26choreo10FileReaderP12tEntityStore",
        Ok(
            "choreo::ReadFromScriptFile(choreo::FileReader *, tEntityStore *)",
        ),
    ),
    (
        "ReadFromScriptString__6choreoPCcT1P12tEntityStore",
        Ok(
            "choreo::ReadFromScriptString(char const *, char const *, tEntityStore *)",
        ),
    ),
    (
        "ReadFromScriptFileP3D__6choreoP5tFileP12tEntityStore",
        Ok(
            "choreo::ReadFromScriptFileP3D(tFile *, tEntityStore *)",
        ),
    ),
    (
        "RegisterDefaultScriptHandlers__6choreov",
        Ok(
            "choreo::RegisterDefaultScriptHandlers(void)",
        ),
    ),
    (
        "__tfQ26choreo19ChoreoScriptHandler",
        Ok(
            "choreo::ChoreoScriptHandler type_info function",
        ),
    ),
    (
        "__tfQ26choreo18ChoreoChunkHandler",
        Ok(
            "choreo::ChoreoChunkHandler type_info function",
        ),
    ),
    (
        "__17radLoadFileLoader",
        Ok(
            "radLoadFileLoader::radLoadFileLoader(void)",
        ),
    ),
    (
        "CheckExtension__Q26choreo19ChoreoScriptHandlerPc",
        Ok(
            "choreo::ChoreoScriptHandler::CheckExtension(char *)",
        ),
    ),
    (
        "Load__Q26choreo19ChoreoScriptHandlerP5tFileP12tEntityStore",
        Ok(
            "choreo::ChoreoScriptHandler::Load(tFile *, tEntityStore *)",
        ),
    ),
    (
        "_$_Q26choreo19ChoreoScriptHandler",
        Ok(
            "choreo::ChoreoScriptHandler::~ChoreoScriptHandler(void)",
        ),
    ),
    (
        "Load__Q26choreo18ChoreoChunkHandlerP10tChunkFileP12tEntityStore",
        Ok(
            "choreo::ChoreoChunkHandler::Load(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "CheckChunkID__Q26choreo18ChoreoChunkHandlerUi",
        Ok(
            "choreo::ChoreoChunkHandler::CheckChunkID(unsigned int)",
        ),
    ),
    (
        "GetChunkID__Q26choreo18ChoreoChunkHandler",
        Ok(
            "choreo::ChoreoChunkHandler::GetChunkID(void)",
        ),
    ),
    (
        "_$_Q26choreo18ChoreoChunkHandler",
        Ok(
            "choreo::ChoreoChunkHandler::~ChoreoChunkHandler(void)",
        ),
    ),
    (
        "__tf17radLoadFileLoader",
        Ok(
            "radLoadFileLoader type_info function",
        ),
    ),
    (
        "_$_17radLoadFileLoader",
        Ok(
            "radLoadFileLoader::~radLoadFileLoader(void)",
        ),
    ),
    (
        "__Q26choreo14LocomotionSlotPQ26choreo3RigP10tAnimation",
        Ok(
            "choreo::LocomotionSlot::LocomotionSlot(choreo::Rig *, tAnimation *)",
        ),
    ),
    (
        "_$_Q26choreo14LocomotionSlot",
        Ok(
            "choreo::LocomotionSlot::~LocomotionSlot(void)",
        ),
    ),
    (
        "__Q26choreo10LocomotionPQ26choreo3RigiiPP10tAnimationPQ26choreo9PartitioniPPQ26choreo10Transition",
        Ok(
            "choreo::Locomotion::Locomotion(choreo::Rig *, int, int, tAnimation **, choreo::Partition *, int, choreo::Transition **)",
        ),
    ),
    (
        "_$_Q26choreo10Locomotion",
        Ok(
            "choreo::Locomotion::~Locomotion(void)",
        ),
    ),
    (
        "GetLocomotionSlotCount__CQ26choreo10Locomotion",
        Ok(
            "choreo::Locomotion::GetLocomotionSlotCount(void) const",
        ),
    ),
    (
        "GetLocomotionSlotVelocity__CQ26choreo10Locomotioni",
        Ok(
            "choreo::Locomotion::GetLocomotionSlotVelocity(int) const",
        ),
    ),
    (
        "FillNullVelocities__Q26choreo10Locomotion",
        Ok(
            "choreo::Locomotion::FillNullVelocities(void)",
        ),
    ),
    (
        "SetLocomotionSlot__Q26choreo10LocomotioniiP10tAnimation",
        Ok(
            "choreo::Locomotion::SetLocomotionSlot(int, int, tAnimation *)",
        ),
    ),
    (
        "NewDriver__Q26choreo10Locomotion",
        Ok(
            "choreo::Locomotion::NewDriver(void)",
        ),
    ),
    (
        "NewLocomotionDriver__Q26choreo10Locomotion",
        Ok(
            "choreo::Locomotion::NewLocomotionDriver(void)",
        ),
    ),
    (
        "ReadFromScript__Q26choreo10LocomotionPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::Locomotion::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "ReadFromScript4__Q26choreo10LocomotionPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::Locomotion::ReadFromScript4(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "ReadFromScript8__Q26choreo10LocomotionPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::Locomotion::ReadFromScript8(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "__Q26choreo20LocomotionRootDriverPQ26choreo11BlendDriver",
        Ok(
            "choreo::LocomotionRootDriver::LocomotionRootDriver(choreo::BlendDriver *)",
        ),
    ),
    (
        "_$_Q26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver::~LocomotionRootDriver(void)",
        ),
    ),
    (
        "Reset__Q26choreo20LocomotionRootDriverPQ26choreo11RootBlender",
        Ok(
            "choreo::LocomotionRootDriver::Reset(choreo::RootBlender *)",
        ),
    ),
    (
        "GetRootBlendInTime__CQ26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver::GetRootBlendInTime(void) const",
        ),
    ),
    (
        "GetRootBlendOutTime__CQ26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver::GetRootBlendOutTime(void) const",
        ),
    ),
    (
        "GetRootWeight__CQ26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver::GetRootWeight(void) const",
        ),
    ),
    (
        "GetRootPriority__CQ26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver::GetRootPriority(void) const",
        ),
    ),
    (
        "HasRootTranslation__CQ26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver::HasRootTranslation(void) const",
        ),
    ),
    (
        "GetRootTranslation__CQ26choreo20LocomotionRootDriverRCQ25poser9TransformRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::LocomotionRootDriver::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasRootRotation__CQ26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver::HasRootRotation(void) const",
        ),
    ),
    (
        "GetRootRotation__CQ26choreo20LocomotionRootDriverRCQ25poser9TransformRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::LocomotionRootDriver::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "HasRootGroundFixup__CQ26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver::HasRootGroundFixup(void) const",
        ),
    ),
    (
        "GetRootGroundFixup__CQ26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver::GetRootGroundFixup(void) const",
        ),
    ),
    (
        "__Q26choreo16LocomotionDriverPQ26choreo10Locomotion",
        Ok(
            "choreo::LocomotionDriver::LocomotionDriver(choreo::Locomotion *)",
        ),
    ),
    (
        "_$_Q26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver::~LocomotionDriver(void)",
        ),
    ),
    (
        "Clone__CQ26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver::Clone(void) const",
        ),
    ),
    (
        "GetRootBlendInTime__CQ26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver::GetRootBlendInTime(void) const",
        ),
    ),
    (
        "GetRootBlendOutTime__CQ26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver::GetRootBlendOutTime(void) const",
        ),
    ),
    (
        "GetActualMotionAngle__CQ26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver::GetActualMotionAngle(void) const",
        ),
    ),
    (
        "SetActualMotionAngle__Q26choreo16LocomotionDriverf",
        Ok(
            "choreo::LocomotionDriver::SetActualMotionAngle(float)",
        ),
    ),
    (
        "SetDesiredMotionAngle__Q26choreo16LocomotionDriverf",
        Ok(
            "choreo::LocomotionDriver::SetDesiredMotionAngle(float)",
        ),
    ),
    (
        "GetActualFacingAngle__CQ26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver::GetActualFacingAngle(void) const",
        ),
    ),
    (
        "SetActualFacingAngle__Q26choreo16LocomotionDriverf",
        Ok(
            "choreo::LocomotionDriver::SetActualFacingAngle(float)",
        ),
    ),
    (
        "SetDesiredFacingAngle__Q26choreo16LocomotionDriverf",
        Ok(
            "choreo::LocomotionDriver::SetDesiredFacingAngle(float)",
        ),
    ),
    (
        "GetActualVelocity__CQ26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver::GetActualVelocity(void) const",
        ),
    ),
    (
        "SetActualVelocity__Q26choreo16LocomotionDriverf",
        Ok(
            "choreo::LocomotionDriver::SetActualVelocity(float)",
        ),
    ),
    (
        "SetDesiredVelocity__Q26choreo16LocomotionDriverf",
        Ok(
            "choreo::LocomotionDriver::SetDesiredVelocity(float)",
        ),
    ),
    (
        "SetActualVelocityVector__Q26choreo16LocomotionDriverRCQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::LocomotionDriver::SetActualVelocityVector(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo16LocomotionDriveri",
        Ok(
            "choreo::LocomotionDriver::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo16LocomotionDriveri",
        Ok(
            "choreo::LocomotionDriver::GetJointPriority(int) const",
        ),
    ),
    (
        "Begin__Q26choreo16LocomotionDriverPQ26choreo6Puppet",
        Ok(
            "choreo::LocomotionDriver::Begin(choreo::Puppet *)",
        ),
    ),
    (
        "UpdateFacing__Q26choreo16LocomotionDriverf",
        Ok(
            "choreo::LocomotionDriver::UpdateFacing(float)",
        ),
    ),
    (
        "UpdateMotion__Q26choreo16LocomotionDriverf",
        Ok(
            "choreo::LocomotionDriver::UpdateMotion(float)",
        ),
    ),
    (
        "UpdateBlends__Q26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver::UpdateBlends(void)",
        ),
    ),
    (
        "Advance__Q26choreo16LocomotionDriverf",
        Ok(
            "choreo::LocomotionDriver::Advance(float)",
        ),
    ),
    (
        "IsFinished__CQ26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver::IsFinished(void) const",
        ),
    ),
    (
        "End__Q26choreo16LocomotionDriverPQ26choreo6Puppet",
        Ok(
            "choreo::LocomotionDriver::End(choreo::Puppet *)",
        ),
    ),
    (
        "Apply__Q26choreo16LocomotionDriverPQ26choreo6Engine",
        Ok(
            "choreo::LocomotionDriver::Apply(choreo::Engine *)",
        ),
    ),
    (
        "__tfQ26choreo14LocomotionSlot",
        Ok(
            "choreo::LocomotionSlot type_info function",
        ),
    ),
    (
        "__tfQ26choreo10Locomotion",
        Ok(
            "choreo::Locomotion type_info function",
        ),
    ),
    (
        "__tfQ26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver type_info function",
        ),
    ),
    (
        "__Q26choreo9BlendSlot",
        Ok(
            "choreo::BlendSlot::BlendSlot(void)",
        ),
    ),
    (
        "GetName__CQ26choreo14LocomotionSlot",
        Ok(
            "choreo::LocomotionSlot::GetName(void) const",
        ),
    ),
    (
        "GetFrameCount__CQ26choreo14LocomotionSlot",
        Ok(
            "choreo::LocomotionSlot::GetFrameCount(void) const",
        ),
    ),
    (
        "GetFramesPerSecond__CQ26choreo14LocomotionSlot",
        Ok(
            "choreo::LocomotionSlot::GetFramesPerSecond(void) const",
        ),
    ),
    (
        "GetCycleStart__CQ26choreo14LocomotionSlot",
        Ok(
            "choreo::LocomotionSlot::GetCycleStart(void) const",
        ),
    ),
    (
        "GetFootPlant__CQ26choreo14LocomotionSloti",
        Ok(
            "choreo::LocomotionSlot::GetFootPlant(int) const",
        ),
    ),
    (
        "GetFootLift__CQ26choreo14LocomotionSloti",
        Ok(
            "choreo::LocomotionSlot::GetFootLift(int) const",
        ),
    ),
    (
        "GetFootScale__CQ26choreo14LocomotionSloti",
        Ok(
            "choreo::LocomotionSlot::GetFootScale(int) const",
        ),
    ),
    (
        "HasJointTranslation__CQ26choreo14LocomotionSloti",
        Ok(
            "choreo::LocomotionSlot::HasJointTranslation(int) const",
        ),
    ),
    (
        "GetJointTranslation__CQ26choreo14LocomotionSlotifRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::LocomotionSlot::GetJointTranslation(int, float, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasJointRotation__CQ26choreo14LocomotionSloti",
        Ok(
            "choreo::LocomotionSlot::HasJointRotation(int) const",
        ),
    ),
    (
        "GetJointRotation__CQ26choreo14LocomotionSlotifRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::LocomotionSlot::GetJointRotation(int, float, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "HasGroupTranslation__CQ26choreo14LocomotionSlotG13tUidUnaligned",
        Ok(
            "choreo::LocomotionSlot::HasGroupTranslation(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupTranslation__CQ26choreo14LocomotionSlotG13tUidUnalignedfRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::LocomotionSlot::GetGroupTranslation(tUidUnaligned, float, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasGroupRotation__CQ26choreo14LocomotionSlotG13tUidUnaligned",
        Ok(
            "choreo::LocomotionSlot::HasGroupRotation(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupRotation__CQ26choreo14LocomotionSlotG13tUidUnalignedfRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::LocomotionSlot::GetGroupRotation(tUidUnaligned, float, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ26choreo10Transition",
        Ok(
            "radLoadInventory::SafeCast<choreo::Transition>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ26choreo10Transition",
        Ok(
            "radLoadInventory::SafeCast<choreo::Transition> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ26choreo10TransitionP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<choreo::Transition>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "__Q26choreo9PartitionPQ26choreo3Rig",
        Ok(
            "choreo::Partition::Partition(choreo::Rig *)",
        ),
    ),
    (
        "_$_Q26choreo9Partition",
        Ok(
            "choreo::Partition::~Partition(void)",
        ),
    ),
    (
        "__Q26choreo18InclusivePartitionPQ26choreo3Rigii",
        Ok(
            "choreo::InclusivePartition::InclusivePartition(choreo::Rig *, int, int)",
        ),
    ),
    (
        "_$_Q26choreo18InclusivePartition",
        Ok(
            "choreo::InclusivePartition::~InclusivePartition(void)",
        ),
    ),
    (
        "AddEntry__Q26choreo18InclusivePartitionifi",
        Ok(
            "choreo::InclusivePartition::AddEntry(int, float, int)",
        ),
    ),
    (
        "AddRangeEntry__Q26choreo18InclusivePartitioniifi",
        Ok(
            "choreo::InclusivePartition::AddRangeEntry(int, int, float, int)",
        ),
    ),
    (
        "FindEntryIndex__CQ26choreo18InclusivePartitioni",
        Ok(
            "choreo::InclusivePartition::FindEntryIndex(int) const",
        ),
    ),
    (
        "FindEntry__CQ26choreo18InclusivePartitioni",
        Ok(
            "choreo::InclusivePartition::FindEntry(int) const",
        ),
    ),
    (
        "HasJoint__CQ26choreo18InclusivePartitioni",
        Ok(
            "choreo::InclusivePartition::HasJoint(int) const",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo18InclusivePartitioni",
        Ok(
            "choreo::InclusivePartition::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo18InclusivePartitioni",
        Ok(
            "choreo::InclusivePartition::GetJointPriority(int) const",
        ),
    ),
    (
        "ReadFromScript__Q26choreo18InclusivePartitionPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::InclusivePartition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "__Q26choreo18ExclusivePartitionPQ26choreo3Rigii",
        Ok(
            "choreo::ExclusivePartition::ExclusivePartition(choreo::Rig *, int, int)",
        ),
    ),
    (
        "_$_Q26choreo18ExclusivePartition",
        Ok(
            "choreo::ExclusivePartition::~ExclusivePartition(void)",
        ),
    ),
    (
        "AddEntry__Q26choreo18ExclusivePartitioni",
        Ok(
            "choreo::ExclusivePartition::AddEntry(int)",
        ),
    ),
    (
        "AddRangeEntry__Q26choreo18ExclusivePartitionii",
        Ok(
            "choreo::ExclusivePartition::AddRangeEntry(int, int)",
        ),
    ),
    (
        "FindEntryIndex__CQ26choreo18ExclusivePartitioni",
        Ok(
            "choreo::ExclusivePartition::FindEntryIndex(int) const",
        ),
    ),
    (
        "FindRangeEntryIndex__CQ26choreo18ExclusivePartitioni",
        Ok(
            "choreo::ExclusivePartition::FindRangeEntryIndex(int) const",
        ),
    ),
    (
        "HasJoint__CQ26choreo18ExclusivePartitioni",
        Ok(
            "choreo::ExclusivePartition::HasJoint(int) const",
        ),
    ),
    (
        "ReadFromScript__Q26choreo18ExclusivePartitionPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::ExclusivePartition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "__Q26choreo14UnionPartitionPQ26choreo3Rigi",
        Ok(
            "choreo::UnionPartition::UnionPartition(choreo::Rig *, int)",
        ),
    ),
    (
        "_$_Q26choreo14UnionPartition",
        Ok(
            "choreo::UnionPartition::~UnionPartition(void)",
        ),
    ),
    (
        "AddPartition__Q26choreo14UnionPartitionPQ26choreo9Partitionif",
        Ok(
            "choreo::UnionPartition::AddPartition(choreo::Partition *, int, float)",
        ),
    ),
    (
        "HasJoint__CQ26choreo14UnionPartitioni",
        Ok(
            "choreo::UnionPartition::HasJoint(int) const",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo14UnionPartitioni",
        Ok(
            "choreo::UnionPartition::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo14UnionPartitioni",
        Ok(
            "choreo::UnionPartition::GetJointPriority(int) const",
        ),
    ),
    (
        "ReadFromScript__Q26choreo14UnionPartitionPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::UnionPartition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "__Q26choreo18IntersectPartitionPQ26choreo3Rigi",
        Ok(
            "choreo::IntersectPartition::IntersectPartition(choreo::Rig *, int)",
        ),
    ),
    (
        "_$_Q26choreo18IntersectPartition",
        Ok(
            "choreo::IntersectPartition::~IntersectPartition(void)",
        ),
    ),
    (
        "AddPartition__Q26choreo18IntersectPartitionPQ26choreo9Partitionif",
        Ok(
            "choreo::IntersectPartition::AddPartition(choreo::Partition *, int, float)",
        ),
    ),
    (
        "HasJoint__CQ26choreo18IntersectPartitioni",
        Ok(
            "choreo::IntersectPartition::HasJoint(int) const",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo18IntersectPartitioni",
        Ok(
            "choreo::IntersectPartition::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo18IntersectPartitioni",
        Ok(
            "choreo::IntersectPartition::GetJointPriority(int) const",
        ),
    ),
    (
        "ReadFromScript__Q26choreo18IntersectPartitionPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::IntersectPartition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "__Q26choreo17CompletePartitionPQ26choreo3Rig",
        Ok(
            "choreo::CompletePartition::CompletePartition(choreo::Rig *)",
        ),
    ),
    (
        "_$_Q26choreo17CompletePartition",
        Ok(
            "choreo::CompletePartition::~CompletePartition(void)",
        ),
    ),
    (
        "HasJoint__CQ26choreo17CompletePartitioni",
        Ok(
            "choreo::CompletePartition::HasJoint(int) const",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo17CompletePartitioni",
        Ok(
            "choreo::CompletePartition::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo17CompletePartitioni",
        Ok(
            "choreo::CompletePartition::GetJointPriority(int) const",
        ),
    ),
    (
        "AddJoint__Q26choreo17CompletePartitionifi",
        Ok(
            "choreo::CompletePartition::AddJoint(int, float, int)",
        ),
    ),
    (
        "AddJointRange__Q26choreo17CompletePartitioniifi",
        Ok(
            "choreo::CompletePartition::AddJointRange(int, int, float, int)",
        ),
    ),
    (
        "Clear__Q26choreo17CompletePartition",
        Ok(
            "choreo::CompletePartition::Clear(void)",
        ),
    ),
    (
        "ReadFromScript__Q26choreo17CompletePartitionPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::CompletePartition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "_$_Q26choreo12LODPartition",
        Ok(
            "choreo::LODPartition::~LODPartition(void)",
        ),
    ),
    (
        "HasJoint__CQ26choreo12LODPartitioni",
        Ok(
            "choreo::LODPartition::HasJoint(int) const",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo12LODPartitioni",
        Ok(
            "choreo::LODPartition::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo12LODPartitioni",
        Ok(
            "choreo::LODPartition::GetJointPriority(int) const",
        ),
    ),
    (
        "__tfQ26choreo9Partition",
        Ok(
            "choreo::Partition type_info function",
        ),
    ),
    (
        "__tfQ26choreo18InclusivePartition",
        Ok(
            "choreo::InclusivePartition type_info function",
        ),
    ),
    (
        "__tfQ26choreo18ExclusivePartition",
        Ok(
            "choreo::ExclusivePartition type_info function",
        ),
    ),
    (
        "__tfQ26choreo14UnionPartition",
        Ok(
            "choreo::UnionPartition type_info function",
        ),
    ),
    (
        "__tfQ26choreo18IntersectPartition",
        Ok(
            "choreo::IntersectPartition type_info function",
        ),
    ),
    (
        "__tfQ26choreo17CompletePartition",
        Ok(
            "choreo::CompletePartition type_info function",
        ),
    ),
    (
        "__tfQ26choreo12LODPartition",
        Ok(
            "choreo::LODPartition type_info function",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo18ExclusivePartitioni",
        Ok(
            "choreo::ExclusivePartition::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo18ExclusivePartitioni",
        Ok(
            "choreo::ExclusivePartition::GetJointPriority(int) const",
        ),
    ),
    (
        "__Q26choreo6PuppetP5tPosePQ26choreo4Bankbii",
        Ok(
            "choreo::Puppet::Puppet(tPose *, choreo::Bank *, bool, int, int)",
        ),
    ),
    (
        "_$_Q26choreo6Puppet",
        Ok(
            "choreo::Puppet::~Puppet(void)",
        ),
    ),
    (
        "GetPose__Q26choreo6Puppet",
        Ok(
            "choreo::Puppet::GetPose(void)",
        ),
    ),
    (
        "GetP3DPose__CQ26choreo6Puppet",
        Ok(
            "choreo::Puppet::GetP3DPose(void) const",
        ),
    ),
    (
        "PlayAnimation__Q26choreo6PuppetG13tUidUnalignedfffffiPQ26choreo9Partition",
        Ok(
            "choreo::Puppet::PlayAnimation(tUidUnaligned, float, float, float, float, float, int, choreo::Partition *)",
        ),
    ),
    (
        "PlayAnimation__Q26choreo6PuppetPCcfffffiPQ26choreo9Partition",
        Ok(
            "choreo::Puppet::PlayAnimation(char const *, float, float, float, float, float, int, choreo::Partition *)",
        ),
    ),
    (
        "AddDriver__Q26choreo6PuppetPQ26choreo12PuppetDriverfb",
        Ok(
            "choreo::Puppet::AddDriver(choreo::PuppetDriver *, float, bool)",
        ),
    ),
    (
        "PlayDriver__Q26choreo6PuppetPQ26choreo12PuppetDriverfb",
        Ok(
            "choreo::Puppet::PlayDriver(choreo::PuppetDriver *, float, bool)",
        ),
    ),
    (
        "StopDriver__Q26choreo6PuppetPQ26choreo12PuppetDriver",
        Ok(
            "choreo::Puppet::StopDriver(choreo::PuppetDriver *)",
        ),
    ),
    (
        "IsDriverFinished__CQ26choreo6PuppetPQ26choreo12PuppetDriver",
        Ok(
            "choreo::Puppet::IsDriverFinished(choreo::PuppetDriver *) const",
        ),
    ),
    (
        "SetIsDriverIndefinite__Q26choreo6PuppetPQ26choreo12PuppetDriverb",
        Ok(
            "choreo::Puppet::SetIsDriverIndefinite(choreo::PuppetDriver *, bool)",
        ),
    ),
    (
        "StopAllDrivers__Q26choreo6Puppet",
        Ok(
            "choreo::Puppet::StopAllDrivers(void)",
        ),
    ),
    (
        "Advance__Q26choreo6Puppetf",
        Ok(
            "choreo::Puppet::Advance(float)",
        ),
    ),
    (
        "UpdateBegin__Q26choreo6Puppet",
        Ok(
            "choreo::Puppet::UpdateBegin(void)",
        ),
    ),
    (
        "UpdateRoot__Q26choreo6Puppet",
        Ok(
            "choreo::Puppet::UpdateRoot(void)",
        ),
    ),
    (
        "UpdatePose__Q26choreo6Puppet",
        Ok(
            "choreo::Puppet::UpdatePose(void)",
        ),
    ),
    (
        "UpdateEnd__Q26choreo6Puppet",
        Ok(
            "choreo::Puppet::UpdateEnd(void)",
        ),
    ),
    (
        "ReadFromScript__Q26choreo6PuppetPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::Puppet::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "__tfQ26choreo6Puppet",
        Ok(
            "choreo::Puppet type_info function",
        ),
    ),
    (
        "AddRef__Q26choreo6Puppet",
        Ok(
            "choreo::Puppet::AddRef(void)",
        ),
    ),
    (
        "__Q26choreo6ReplayPQ26choreo3RigiPQ26choreo9Partition",
        Ok(
            "choreo::Replay::Replay(choreo::Rig *, int, choreo::Partition *)",
        ),
    ),
    (
        "_$_Q26choreo6Replay",
        Ok(
            "choreo::Replay::~Replay(void)",
        ),
    ),
    (
        "SetRecordFrameCount__Q26choreo6Replayi",
        Ok(
            "choreo::Replay::SetRecordFrameCount(int)",
        ),
    ),
    (
        "NewDriver__Q26choreo6Replay",
        Ok(
            "choreo::Replay::NewDriver(void)",
        ),
    ),
    (
        "NewReplayDriver__Q26choreo6Replay",
        Ok(
            "choreo::Replay::NewReplayDriver(void)",
        ),
    ),
    (
        "ReadFromScript__Q26choreo6ReplayPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::Replay::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "Compress__Q26choreo11ReplayJointRCQ25poser9Transform",
        Ok(
            "choreo::ReplayJoint::Compress(poser::Transform const &)",
        ),
    ),
    (
        "Uncompress__CQ26choreo11ReplayJointRQ25poser9Transform",
        Ok(
            "choreo::ReplayJoint::Uncompress(poser::Transform &) const",
        ),
    ),
    (
        "__Q26choreo12ReplayBufferPQ26choreo6Replay",
        Ok(
            "choreo::ReplayBuffer::ReplayBuffer(choreo::Replay *)",
        ),
    ),
    (
        "_$_Q26choreo12ReplayBuffer",
        Ok(
            "choreo::ReplayBuffer::~ReplayBuffer(void)",
        ),
    ),
    (
        "Reset__Q26choreo12ReplayBuffer",
        Ok(
            "choreo::ReplayBuffer::Reset(void)",
        ),
    ),
    (
        "Advance__Q26choreo12ReplayBufferf",
        Ok(
            "choreo::ReplayBuffer::Advance(float)",
        ),
    ),
    (
        "Update__Q26choreo12ReplayBuffer",
        Ok(
            "choreo::ReplayBuffer::Update(void)",
        ),
    ),
    (
        "AdvanceReplay__Q26choreo12ReplayBufferf",
        Ok(
            "choreo::ReplayBuffer::AdvanceReplay(float)",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo12ReplayBufferi",
        Ok(
            "choreo::ReplayBuffer::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo12ReplayBufferi",
        Ok(
            "choreo::ReplayBuffer::GetJointPriority(int) const",
        ),
    ),
    (
        "HasJoint__CQ26choreo12ReplayBufferi",
        Ok(
            "choreo::ReplayBuffer::HasJoint(int) const",
        ),
    ),
    (
        "GetJointTransform__CQ26choreo12ReplayBufferiRQ25poser9Transform",
        Ok(
            "choreo::ReplayBuffer::GetJointTransform(int, poser::Transform &) const",
        ),
    ),
    (
        "SetJointTransform__Q26choreo12ReplayBufferiRCQ25poser9Transform",
        Ok(
            "choreo::ReplayBuffer::SetJointTransform(int, poser::Transform const &)",
        ),
    ),
    (
        "__Q26choreo20ReplayDriverInternalPQ26choreo12ReplayBuffer",
        Ok(
            "choreo::ReplayDriverInternal::ReplayDriverInternal(choreo::ReplayBuffer *)",
        ),
    ),
    (
        "_$_Q26choreo20ReplayDriverInternal",
        Ok(
            "choreo::ReplayDriverInternal::~ReplayDriverInternal(void)",
        ),
    ),
    (
        "Reset__Q26choreo20ReplayDriverInternal",
        Ok(
            "choreo::ReplayDriverInternal::Reset(void)",
        ),
    ),
    (
        "Advance__Q26choreo20ReplayDriverInternalf",
        Ok(
            "choreo::ReplayDriverInternal::Advance(float)",
        ),
    ),
    (
        "Update__Q26choreo20ReplayDriverInternal",
        Ok(
            "choreo::ReplayDriverInternal::Update(void)",
        ),
    ),
    (
        "AdvanceReplay__Q26choreo20ReplayDriverInternalf",
        Ok(
            "choreo::ReplayDriverInternal::AdvanceReplay(float)",
        ),
    ),
    (
        "GetBlendInTime__CQ26choreo20ReplayDriverInternal",
        Ok(
            "choreo::ReplayDriverInternal::GetBlendInTime(void) const",
        ),
    ),
    (
        "GetBlendOutTime__CQ26choreo20ReplayDriverInternal",
        Ok(
            "choreo::ReplayDriverInternal::GetBlendOutTime(void) const",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo20ReplayDriverInternali",
        Ok(
            "choreo::ReplayDriverInternal::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo20ReplayDriverInternali",
        Ok(
            "choreo::ReplayDriverInternal::GetJointPriority(int) const",
        ),
    ),
    (
        "HasJoint__CQ26choreo20ReplayDriverInternali",
        Ok(
            "choreo::ReplayDriverInternal::HasJoint(int) const",
        ),
    ),
    (
        "GetJointTransform__CQ26choreo20ReplayDriverInternaliRQ25poser9Transform",
        Ok(
            "choreo::ReplayDriverInternal::GetJointTransform(int, poser::Transform &) const",
        ),
    ),
    (
        "RecordJointTransform__CQ26choreo20ReplayDriverInternaliRCQ25poser9Transform",
        Ok(
            "choreo::ReplayDriverInternal::RecordJointTransform(int, poser::Transform const &) const",
        ),
    ),
    (
        "__Q26choreo12ReplayDriverPQ26choreo6Replay",
        Ok(
            "choreo::ReplayDriver::ReplayDriver(choreo::Replay *)",
        ),
    ),
    (
        "_$_Q26choreo12ReplayDriver",
        Ok(
            "choreo::ReplayDriver::~ReplayDriver(void)",
        ),
    ),
    (
        "Clone__CQ26choreo12ReplayDriver",
        Ok(
            "choreo::ReplayDriver::Clone(void) const",
        ),
    ),
    (
        "Begin__Q26choreo12ReplayDriverPQ26choreo6Puppet",
        Ok(
            "choreo::ReplayDriver::Begin(choreo::Puppet *)",
        ),
    ),
    (
        "Advance__Q26choreo12ReplayDriverf",
        Ok(
            "choreo::ReplayDriver::Advance(float)",
        ),
    ),
    (
        "IsFinished__CQ26choreo12ReplayDriver",
        Ok(
            "choreo::ReplayDriver::IsFinished(void) const",
        ),
    ),
    (
        "End__Q26choreo12ReplayDriverPQ26choreo6Puppet",
        Ok(
            "choreo::ReplayDriver::End(choreo::Puppet *)",
        ),
    ),
    (
        "Apply__Q26choreo12ReplayDriverPQ26choreo6Engine",
        Ok(
            "choreo::ReplayDriver::Apply(choreo::Engine *)",
        ),
    ),
    (
        "__tfQ26choreo6Replay",
        Ok(
            "choreo::Replay type_info function",
        ),
    ),
    (
        "__tfQ26choreo12ReplayDriver",
        Ok(
            "choreo::ReplayDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo12ReplayBuffer",
        Ok(
            "choreo::ReplayBuffer type_info function",
        ),
    ),
    (
        "__tfQ26choreo20ReplayDriverInternal",
        Ok(
            "choreo::ReplayDriverInternal type_info function",
        ),
    ),
    (
        "_$_Q26choreo17ReplayBlendDriver",
        Ok(
            "choreo::ReplayBlendDriver::~ReplayBlendDriver(void)",
        ),
    ),
    (
        "__Q26choreo17ReplayBlendDriver",
        Ok(
            "choreo::ReplayBlendDriver::ReplayBlendDriver(void)",
        ),
    ),
    (
        "__tfQ26choreo17ReplayBlendDriver",
        Ok(
            "choreo::ReplayBlendDriver type_info function",
        ),
    ),
    (
        "__Q26choreo13ReplayBlenderii",
        Ok(
            "choreo::ReplayBlender::ReplayBlender(int, int)",
        ),
    ),
    (
        "_$_Q26choreo13ReplayBlender",
        Ok(
            "choreo::ReplayBlender::~ReplayBlender(void)",
        ),
    ),
    (
        "Push__Q26choreo13ReplayBlenderPQ26choreo17ReplayBlendDriver",
        Ok(
            "choreo::ReplayBlender::Push(choreo::ReplayBlendDriver *)",
        ),
    ),
    (
        "Advance__Q26choreo13ReplayBlenderf",
        Ok(
            "choreo::ReplayBlender::Advance(float)",
        ),
    ),
    (
        "Update__Q26choreo13ReplayBlenderPQ25poser4Pose",
        Ok(
            "choreo::ReplayBlender::Update(poser::Pose *)",
        ),
    ),
    (
        "__tfQ26choreo13ReplayBlender",
        Ok(
            "choreo::ReplayBlender type_info function",
        ),
    ),
    (
        "GetMinimumJointIndex__CQ26choreo13ReplayBlender",
        Ok(
            "choreo::ReplayBlender::GetMinimumJointIndex(void) const",
        ),
    ),
    (
        "GetPriority__CQ26choreo13ReplayBlender",
        Ok(
            "choreo::ReplayBlender::GetPriority(void) const",
        ),
    ),
    (
        "__Q26choreot13BlendPriority1ZQ25poser9Transform",
        Ok(
            "choreo::BlendPriority<poser::Transform>::BlendPriority(void)",
        ),
    ),
    (
        "__Q26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::RigLeg(void)",
        ),
    ),
    (
        "_$_Q26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::~RigLeg(void)",
        ),
    ),
    (
        "ContainsJointIndex__CQ26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::ContainsJointIndex(int) const",
        ),
    ),
    (
        "ReadFromScript__Q26choreo6RigLegPQ26choreo12ScriptReaderPQ26choreo8BaseBankPQ26choreo3Rig",
        Ok(
            "choreo::RigLeg::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *, choreo::Rig *)",
        ),
    ),
    (
        "__Q26choreo3RigP9tSkeletoni",
        Ok(
            "choreo::Rig::Rig(tSkeleton *, int)",
        ),
    ),
    (
        "_$_Q26choreo3Rig",
        Ok(
            "choreo::Rig::~Rig(void)",
        ),
    ),
    (
        "GetJointCount__CQ26choreo3Rig",
        Ok(
            "choreo::Rig::GetJointCount(void) const",
        ),
    ),
    (
        "GetJointIndex__CQ26choreo3RigQ26choreo13RigJointIndex",
        Ok(
            "choreo::Rig::GetJointIndex(choreo::RigJointIndex) const",
        ),
    ),
    (
        "SetJointIndex__Q26choreo3RigQ26choreo13RigJointIndexi",
        Ok(
            "choreo::Rig::SetJointIndex(choreo::RigJointIndex, int)",
        ),
    ),
    (
        "GetLeg__CQ26choreo3Rigi",
        Ok(
            "choreo::Rig::GetLeg(int) const",
        ),
    ),
    (
        "AddLeg__Q26choreo3RigPQ26choreo6RigLeg",
        Ok(
            "choreo::Rig::AddLeg(choreo::RigLeg *)",
        ),
    ),
    (
        "ReadFromScript__Q26choreo3RigPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::Rig::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "__tfQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg type_info function",
        ),
    ),
    (
        "__tfQ26choreo3Rig",
        Ok(
            "choreo::Rig type_info function",
        ),
    ),
    (
        "GetFootPlantJointIndex__CQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::GetFootPlantJointIndex(void) const",
        ),
    ),
    (
        "SetFootPlantJointIndex__Q26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::SetFootPlantJointIndex(int)",
        ),
    ),
    (
        "GetMinimumFKJointIndex__CQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::GetMinimumFKJointIndex(void) const",
        ),
    ),
    (
        "SetMinimumFKJointIndex__Q26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::SetMinimumFKJointIndex(int)",
        ),
    ),
    (
        "GetMaximumFKJointIndex__CQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::GetMaximumFKJointIndex(void) const",
        ),
    ),
    (
        "SetMaximumFKJointIndex__Q26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::SetMaximumFKJointIndex(int)",
        ),
    ),
    (
        "GetThighJointIndex__CQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::GetThighJointIndex(void) const",
        ),
    ),
    (
        "SetThighJointIndex__Q26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::SetThighJointIndex(int)",
        ),
    ),
    (
        "GetKneeJointIndex__CQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::GetKneeJointIndex(void) const",
        ),
    ),
    (
        "SetKneeJointIndex__Q26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::SetKneeJointIndex(int)",
        ),
    ),
    (
        "GetAnkleJointIndex__CQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::GetAnkleJointIndex(void) const",
        ),
    ),
    (
        "SetAnkleJointIndex__Q26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::SetAnkleJointIndex(int)",
        ),
    ),
    (
        "GetMinimumIKJointIndex__CQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::GetMinimumIKJointIndex(void) const",
        ),
    ),
    (
        "SetMinimumIKJointIndex__Q26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::SetMinimumIKJointIndex(int)",
        ),
    ),
    (
        "GetMaximumIKJointIndex__CQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::GetMaximumIKJointIndex(void) const",
        ),
    ),
    (
        "SetMaximumIKJointIndex__Q26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::SetMaximumIKJointIndex(int)",
        ),
    ),
    (
        "GetEffectorJointIndex__CQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::GetEffectorJointIndex(void) const",
        ),
    ),
    (
        "SetEffectorJointIndex__Q26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::SetEffectorJointIndex(int)",
        ),
    ),
    (
        "GetPoleVectorJointIndex__CQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::GetPoleVectorJointIndex(void) const",
        ),
    ),
    (
        "SetPoleVectorJointIndex__Q26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::SetPoleVectorJointIndex(int)",
        ),
    ),
    (
        "GetOrientOffsetJointIndex__CQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg::GetOrientOffsetJointIndex(void) const",
        ),
    ),
    (
        "SetOrientOffsetJointIndex__Q26choreo6RigLegi",
        Ok(
            "choreo::RigLeg::SetOrientOffsetJointIndex(int)",
        ),
    ),
    (
        "GetRootTranslation__CQ26choreo14RootControllerRCQ25poser9TransformRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::RootController::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetRootRotation__CQ26choreo14RootControllerRCQ25poser9TransformRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::RootController::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "NewDriver__Q26choreo14RootController",
        Ok(
            "choreo::RootController::NewDriver(void)",
        ),
    ),
    (
        "NewRootDriver__Q26choreo14RootController",
        Ok(
            "choreo::RootController::NewRootDriver(void)",
        ),
    ),
    (
        "_$_Q26choreo22RootPositionController",
        Ok(
            "choreo::RootPositionController::~RootPositionController(void)",
        ),
    ),
    (
        "_$_Q26choreo22RootRotationController",
        Ok(
            "choreo::RootRotationController::~RootRotationController(void)",
        ),
    ),
    (
        "__Q26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController::RootTransformController(void)",
        ),
    ),
    (
        "_$_Q26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController::~RootTransformController(void)",
        ),
    ),
    (
        "SetOrientation__Q26choreo23RootTransformControllerf",
        Ok(
            "choreo::RootTransformController::SetOrientation(float)",
        ),
    ),
    (
        "__Q26choreo18RootDriverInternalPQ26choreo14RootController",
        Ok(
            "choreo::RootDriverInternal::RootDriverInternal(choreo::RootController *)",
        ),
    ),
    (
        "_$_Q26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal::~RootDriverInternal(void)",
        ),
    ),
    (
        "__Q26choreo10RootDriverPQ26choreo14RootController",
        Ok(
            "choreo::RootDriver::RootDriver(choreo::RootController *)",
        ),
    ),
    (
        "_$_Q26choreo10RootDriver",
        Ok(
            "choreo::RootDriver::~RootDriver(void)",
        ),
    ),
    (
        "Clone__CQ26choreo10RootDriver",
        Ok(
            "choreo::RootDriver::Clone(void) const",
        ),
    ),
    (
        "Begin__Q26choreo10RootDriverPQ26choreo6Puppet",
        Ok(
            "choreo::RootDriver::Begin(choreo::Puppet *)",
        ),
    ),
    (
        "Advance__Q26choreo10RootDriverf",
        Ok(
            "choreo::RootDriver::Advance(float)",
        ),
    ),
    (
        "IsFinished__CQ26choreo10RootDriver",
        Ok(
            "choreo::RootDriver::IsFinished(void) const",
        ),
    ),
    (
        "End__Q26choreo10RootDriverPQ26choreo6Puppet",
        Ok(
            "choreo::RootDriver::End(choreo::Puppet *)",
        ),
    ),
    (
        "Apply__Q26choreo10RootDriverPQ26choreo6Engine",
        Ok(
            "choreo::RootDriver::Apply(choreo::Engine *)",
        ),
    ),
    (
        "__tfQ26choreo14RootController",
        Ok(
            "choreo::RootController type_info function",
        ),
    ),
    (
        "__tfQ26choreo22RootPositionController",
        Ok(
            "choreo::RootPositionController type_info function",
        ),
    ),
    (
        "__tfQ26choreo22RootRotationController",
        Ok(
            "choreo::RootRotationController type_info function",
        ),
    ),
    (
        "__tfQ26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController type_info function",
        ),
    ),
    (
        "__tfQ26choreo10RootDriver",
        Ok(
            "choreo::RootDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal type_info function",
        ),
    ),
    (
        "_$_Q26choreo14RootController",
        Ok(
            "choreo::RootController::~RootController(void)",
        ),
    ),
    (
        "__Q26choreo14RootController",
        Ok(
            "choreo::RootController::RootController(void)",
        ),
    ),
    (
        "Reset__Q26choreo14RootControllerPQ26choreo11RootBlender",
        Ok(
            "choreo::RootController::Reset(choreo::RootBlender *)",
        ),
    ),
    (
        "Advance__Q26choreo14RootControllerf",
        Ok(
            "choreo::RootController::Advance(float)",
        ),
    ),
    (
        "GetRootBlendInTime__CQ26choreo14RootController",
        Ok(
            "choreo::RootController::GetRootBlendInTime(void) const",
        ),
    ),
    (
        "GetRootBlendOutTime__CQ26choreo14RootController",
        Ok(
            "choreo::RootController::GetRootBlendOutTime(void) const",
        ),
    ),
    (
        "GetRootWeight__CQ26choreo14RootController",
        Ok(
            "choreo::RootController::GetRootWeight(void) const",
        ),
    ),
    (
        "GetRootPriority__CQ26choreo14RootController",
        Ok(
            "choreo::RootController::GetRootPriority(void) const",
        ),
    ),
    (
        "HasRootTranslation__CQ26choreo14RootController",
        Ok(
            "choreo::RootController::HasRootTranslation(void) const",
        ),
    ),
    (
        "HasRootRotation__CQ26choreo14RootController",
        Ok(
            "choreo::RootController::HasRootRotation(void) const",
        ),
    ),
    (
        "HasRootGroundFixup__CQ26choreo14RootController",
        Ok(
            "choreo::RootController::HasRootGroundFixup(void) const",
        ),
    ),
    (
        "GetRootGroundFixup__CQ26choreo14RootController",
        Ok(
            "choreo::RootController::GetRootGroundFixup(void) const",
        ),
    ),
    (
        "GetRootBlendInTime__CQ26choreo22RootPositionController",
        Ok(
            "choreo::RootPositionController::GetRootBlendInTime(void) const",
        ),
    ),
    (
        "GetRootBlendOutTime__CQ26choreo22RootPositionController",
        Ok(
            "choreo::RootPositionController::GetRootBlendOutTime(void) const",
        ),
    ),
    (
        "GetRootWeight__CQ26choreo22RootPositionController",
        Ok(
            "choreo::RootPositionController::GetRootWeight(void) const",
        ),
    ),
    (
        "GetRootPriority__CQ26choreo22RootPositionController",
        Ok(
            "choreo::RootPositionController::GetRootPriority(void) const",
        ),
    ),
    (
        "HasRootTranslation__CQ26choreo22RootPositionController",
        Ok(
            "choreo::RootPositionController::HasRootTranslation(void) const",
        ),
    ),
    (
        "GetRootTranslation__CQ26choreo22RootPositionControllerRCQ25poser9TransformRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::RootPositionController::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasRootGroundFixup__CQ26choreo22RootPositionController",
        Ok(
            "choreo::RootPositionController::HasRootGroundFixup(void) const",
        ),
    ),
    (
        "GetRootGroundFixup__CQ26choreo22RootPositionController",
        Ok(
            "choreo::RootPositionController::GetRootGroundFixup(void) const",
        ),
    ),
    (
        "GetRootBlendInTime__CQ26choreo22RootRotationController",
        Ok(
            "choreo::RootRotationController::GetRootBlendInTime(void) const",
        ),
    ),
    (
        "GetRootBlendOutTime__CQ26choreo22RootRotationController",
        Ok(
            "choreo::RootRotationController::GetRootBlendOutTime(void) const",
        ),
    ),
    (
        "GetRootWeight__CQ26choreo22RootRotationController",
        Ok(
            "choreo::RootRotationController::GetRootWeight(void) const",
        ),
    ),
    (
        "GetRootPriority__CQ26choreo22RootRotationController",
        Ok(
            "choreo::RootRotationController::GetRootPriority(void) const",
        ),
    ),
    (
        "HasRootRotation__CQ26choreo22RootRotationController",
        Ok(
            "choreo::RootRotationController::HasRootRotation(void) const",
        ),
    ),
    (
        "GetRootRotation__CQ26choreo22RootRotationControllerRCQ25poser9TransformRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::RootRotationController::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "GetRootBlendInTime__CQ26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController::GetRootBlendInTime(void) const",
        ),
    ),
    (
        "GetRootBlendOutTime__CQ26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController::GetRootBlendOutTime(void) const",
        ),
    ),
    (
        "GetRootWeight__CQ26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController::GetRootWeight(void) const",
        ),
    ),
    (
        "GetRootPriority__CQ26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController::GetRootPriority(void) const",
        ),
    ),
    (
        "HasRootTranslation__CQ26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController::HasRootTranslation(void) const",
        ),
    ),
    (
        "GetRootTranslation__CQ26choreo23RootTransformControllerRCQ25poser9TransformRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::RootTransformController::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasRootRotation__CQ26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController::HasRootRotation(void) const",
        ),
    ),
    (
        "GetRootRotation__CQ26choreo23RootTransformControllerRCQ25poser9TransformRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::RootTransformController::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "HasRootGroundFixup__CQ26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController::HasRootGroundFixup(void) const",
        ),
    ),
    (
        "GetRootGroundFixup__CQ26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController::GetRootGroundFixup(void) const",
        ),
    ),
    (
        "Reset__Q26choreo18RootDriverInternalPQ26choreo11RootBlender",
        Ok(
            "choreo::RootDriverInternal::Reset(choreo::RootBlender *)",
        ),
    ),
    (
        "GetRootBlendInTime__CQ26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal::GetRootBlendInTime(void) const",
        ),
    ),
    (
        "GetRootBlendOutTime__CQ26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal::GetRootBlendOutTime(void) const",
        ),
    ),
    (
        "GetRootWeight__CQ26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal::GetRootWeight(void) const",
        ),
    ),
    (
        "GetRootPriority__CQ26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal::GetRootPriority(void) const",
        ),
    ),
    (
        "HasRootTranslation__CQ26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal::HasRootTranslation(void) const",
        ),
    ),
    (
        "GetRootTranslation__CQ26choreo18RootDriverInternalRCQ25poser9TransformRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::RootDriverInternal::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasRootRotation__CQ26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal::HasRootRotation(void) const",
        ),
    ),
    (
        "GetRootRotation__CQ26choreo18RootDriverInternalRCQ25poser9TransformRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::RootDriverInternal::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "HasRootGroundFixup__CQ26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal::HasRootGroundFixup(void) const",
        ),
    ),
    (
        "GetRootGroundFixup__CQ26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal::GetRootGroundFixup(void) const",
        ),
    ),
    (
        "__Q26choreo11RootBlenderiii",
        Ok(
            "choreo::RootBlender::RootBlender(int, int, int)",
        ),
    ),
    (
        "_$_Q26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::~RootBlender(void)",
        ),
    ),
    (
        "SetParentTransform__Q26choreo11RootBlenderRCQ25poser9Transform",
        Ok(
            "choreo::RootBlender::SetParentTransform(poser::Transform const &)",
        ),
    ),
    (
        "SetRootTransform__Q26choreo11RootBlenderRCQ25poser9Transform",
        Ok(
            "choreo::RootBlender::SetRootTransform(poser::Transform const &)",
        ),
    ),
    (
        "SetPosition__Q26choreo11RootBlenderRCQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::RootBlender::SetPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetOrientation__CQ26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::GetOrientation(void) const",
        ),
    ),
    (
        "GetPrevOrientation__CQ26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::GetPrevOrientation(void) const",
        ),
    ),
    (
        "GetFacingVector__CQ26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::GetFacingVector(void) const",
        ),
    ),
    (
        "SetFacingVector__Q26choreo11RootBlenderRCQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::RootBlender::SetFacingVector(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetGroundPoint__Q26choreo11RootBlenderRCQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::RootBlender::SetGroundPoint(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetGroundFixupWeight__CQ26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::GetGroundFixupWeight(void) const",
        ),
    ),
    (
        "GetPrevGroundFixupWeight__CQ26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::GetPrevGroundFixupWeight(void) const",
        ),
    ),
    (
        "Push__Q26choreo11RootBlenderPQ26choreo15RootBlendDriver",
        Ok(
            "choreo::RootBlender::Push(choreo::RootBlendDriver *)",
        ),
    ),
    (
        "Advance__Q26choreo11RootBlenderf",
        Ok(
            "choreo::RootBlender::Advance(float)",
        ),
    ),
    (
        "UpdateDriverTranslation__Q26choreo11RootBlenderPQ26choreo15RootBlendDriverfi",
        Ok(
            "choreo::RootBlender::UpdateDriverTranslation(choreo::RootBlendDriver *, float, int)",
        ),
    ),
    (
        "UpdateDriverRotation__Q26choreo11RootBlenderPQ26choreo15RootBlendDriverfi",
        Ok(
            "choreo::RootBlender::UpdateDriverRotation(choreo::RootBlendDriver *, float, int)",
        ),
    ),
    (
        "UpdateDriverGroundFixup__Q26choreo11RootBlenderPQ26choreo15RootBlendDriverfi",
        Ok(
            "choreo::RootBlender::UpdateDriverGroundFixup(choreo::RootBlendDriver *, float, int)",
        ),
    ),
    (
        "UpdateTranslation__Q26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::UpdateTranslation(void)",
        ),
    ),
    (
        "UpdateRotation__Q26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::UpdateRotation(void)",
        ),
    ),
    (
        "UpdateGroundFixup__Q26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::UpdateGroundFixup(void)",
        ),
    ),
    (
        "Update__Q26choreo11RootBlenderPQ25poser4Pose",
        Ok(
            "choreo::RootBlender::Update(poser::Pose *)",
        ),
    ),
    (
        "ClearRootDrivers__Q26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::ClearRootDrivers(void)",
        ),
    ),
    (
        "__Q26choreo15RootFixupDriverPQ26choreo11RootBlender",
        Ok(
            "choreo::RootFixupDriver::RootFixupDriver(choreo::RootBlender *)",
        ),
    ),
    (
        "_$_Q26choreo15RootFixupDriver",
        Ok(
            "choreo::RootFixupDriver::~RootFixupDriver(void)",
        ),
    ),
    (
        "Advance__Q26choreo15RootFixupDriverf",
        Ok(
            "choreo::RootFixupDriver::Advance(float)",
        ),
    ),
    (
        "Update__Q26choreo15RootFixupDriverPQ25poser4Pose",
        Ok(
            "choreo::RootFixupDriver::Update(poser::Pose *)",
        ),
    ),
    (
        "BlendDriverWithContext__H3ZQ218RadicalMathLibrary6VectorZRCQ25poser9TransformZQ26choreo15RootBlendDriver_6choreoX11PX21PMX21CFPCX21X11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        Ok(
            "void choreo::BlendDriverWithContext<RadicalMathLibrary::Vector, poser::Transform const &, choreo::RootBlendDriver>(poser::Transform const &, choreo::RootBlendDriver *, void (choreo::RootBlendDriver::*)(poser::Transform const &, RadicalMathLibrary::Vector &) const, float, int, choreo::BlendPriority<RadicalMathLibrary::Vector> *, int, int &)",
        ),
    ),
    (
        "BlendDriverWithContext__H3ZQ218RadicalMathLibrary10QuaternionZRCQ25poser9TransformZQ26choreo15RootBlendDriver_6choreoX11PX21PMX21CFPCX21X11RX01_vfiPQ26choreot13BlendPriority1ZX01iRi_v",
        Ok(
            "void choreo::BlendDriverWithContext<RadicalMathLibrary::Quaternion, poser::Transform const &, choreo::RootBlendDriver>(poser::Transform const &, choreo::RootBlendDriver *, void (choreo::RootBlendDriver::*)(poser::Transform const &, RadicalMathLibrary::Quaternion &) const, float, int, choreo::BlendPriority<RadicalMathLibrary::Quaternion> *, int, int &)",
        ),
    ),
    (
        "BlendDriverNoContext__H2ZfZQ26choreo15RootBlendDriver_6choreoPX11PMX11CFPCX11_X01fiPQ26choreot13BlendPriority1ZX01iRi_v",
        Ok(
            "void choreo::BlendDriverNoContext<float, choreo::RootBlendDriver>(choreo::RootBlendDriver *, float (choreo::RootBlendDriver::*)() const, float, int, choreo::BlendPriority<float> *, int, int &)",
        ),
    ),
    (
        "__tfQ26choreo11RootBlender",
        Ok(
            "choreo::RootBlender type_info function",
        ),
    ),
    (
        "__tfQ26choreo15RootFixupDriver",
        Ok(
            "choreo::RootFixupDriver type_info function",
        ),
    ),
    (
        "GetMinimumJointIndex__CQ26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::GetMinimumJointIndex(void) const",
        ),
    ),
    (
        "GetPriority__CQ26choreo11RootBlender",
        Ok(
            "choreo::RootBlender::GetPriority(void) const",
        ),
    ),
    (
        "GetMinimumJointIndex__CQ26choreo15RootFixupDriver",
        Ok(
            "choreo::RootFixupDriver::GetMinimumJointIndex(void) const",
        ),
    ),
    (
        "GetPriority__CQ26choreo15RootFixupDriver",
        Ok(
            "choreo::RootFixupDriver::GetPriority(void) const",
        ),
    ),
    (
        "__Q26choreo16StringFileReaderPCcT1",
        Ok(
            "choreo::StringFileReader::StringFileReader(char const *, char const *)",
        ),
    ),
    (
        "_$_Q26choreo16StringFileReader",
        Ok(
            "choreo::StringFileReader::~StringFileReader(void)",
        ),
    ),
    (
        "SetPosition__Q26choreo16StringFileReaderUi",
        Ok(
            "choreo::StringFileReader::SetPosition(unsigned int)",
        ),
    ),
    (
        "ReadChar__Q26choreo16StringFileReader",
        Ok(
            "choreo::StringFileReader::ReadChar(void)",
        ),
    ),
    (
        "IsEndOfFile__CQ26choreo16StringFileReader",
        Ok(
            "choreo::StringFileReader::IsEndOfFile(void) const",
        ),
    ),
    (
        "__Q26choreo13P3DFileReaderP5tFile",
        Ok(
            "choreo::P3DFileReader::P3DFileReader(tFile *)",
        ),
    ),
    (
        "_$_Q26choreo13P3DFileReader",
        Ok(
            "choreo::P3DFileReader::~P3DFileReader(void)",
        ),
    ),
    (
        "GetFilename__CQ26choreo13P3DFileReader",
        Ok(
            "choreo::P3DFileReader::GetFilename(void) const",
        ),
    ),
    (
        "GetPosition__CQ26choreo13P3DFileReader",
        Ok(
            "choreo::P3DFileReader::GetPosition(void) const",
        ),
    ),
    (
        "SetPosition__Q26choreo13P3DFileReaderUi",
        Ok(
            "choreo::P3DFileReader::SetPosition(unsigned int)",
        ),
    ),
    (
        "ReadChar__Q26choreo13P3DFileReader",
        Ok(
            "choreo::P3DFileReader::ReadChar(void)",
        ),
    ),
    (
        "IsEndOfFile__CQ26choreo13P3DFileReader",
        Ok(
            "choreo::P3DFileReader::IsEndOfFile(void) const",
        ),
    ),
    (
        "_$_Q26choreo13FTTFileReader",
        Ok(
            "choreo::FTTFileReader::~FTTFileReader(void)",
        ),
    ),
    (
        "GetFilename__CQ26choreo13FTTFileReader",
        Ok(
            "choreo::FTTFileReader::GetFilename(void) const",
        ),
    ),
    (
        "GetPosition__CQ26choreo13FTTFileReader",
        Ok(
            "choreo::FTTFileReader::GetPosition(void) const",
        ),
    ),
    (
        "SetPosition__Q26choreo13FTTFileReaderUi",
        Ok(
            "choreo::FTTFileReader::SetPosition(unsigned int)",
        ),
    ),
    (
        "ReadChar__Q26choreo13FTTFileReader",
        Ok(
            "choreo::FTTFileReader::ReadChar(void)",
        ),
    ),
    (
        "IsEndOfFile__CQ26choreo13FTTFileReader",
        Ok(
            "choreo::FTTFileReader::IsEndOfFile(void) const",
        ),
    ),
    (
        "__Q26choreo12ScriptReaderPQ26choreo10FileReaderi",
        Ok(
            "choreo::ScriptReader::ScriptReader(choreo::FileReader *, int)",
        ),
    ),
    (
        "_$_Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::~ScriptReader(void)",
        ),
    ),
    (
        "LoadToken__Q26choreo12ScriptReaderPQ26choreo10FileReaderRiPci",
        Ok(
            "choreo::ScriptReader::LoadToken(choreo::FileReader *, int &, char *, int)",
        ),
    ),
    (
        "NextToken__Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::NextToken(void)",
        ),
    ),
    (
        "ClearError__Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::ClearError(void)",
        ),
    ),
    (
        "SetErrorString__Q26choreo12ScriptReaderPCc",
        Ok(
            "choreo::ScriptReader::SetErrorString(char const *)",
        ),
    ),
    (
        "SetErrorFormat__Q26choreo12ScriptReaderPCce",
        Ok(
            "choreo::ScriptReader::SetErrorFormat(char const *, ...)",
        ),
    ),
    (
        "SetErrorString__Q26choreo12ScriptReaderiPCc",
        Ok(
            "choreo::ScriptReader::SetErrorString(int, char const *)",
        ),
    ),
    (
        "SetErrorFormat__Q26choreo12ScriptReaderiPCce",
        Ok(
            "choreo::ScriptReader::SetErrorFormat(int, char const *, ...)",
        ),
    ),
    (
        "GetErrorMessage__Q26choreo12ScriptReaderPci",
        Ok(
            "choreo::ScriptReader::GetErrorMessage(char *, int)",
        ),
    ),
    (
        "HandleError__Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::HandleError(void)",
        ),
    ),
    (
        "DefaultErrorHandler__Q26choreo12ScriptReaderPQ26choreo12ScriptReaderPv",
        Ok(
            "choreo::ScriptReader::DefaultErrorHandler(choreo::ScriptReader *, void *)",
        ),
    ),
    (
        "FindDefaultFloat__CQ26choreo12ScriptReaderPCc",
        Ok(
            "choreo::ScriptReader::FindDefaultFloat(char const *) const",
        ),
    ),
    (
        "FindDefaultString__CQ26choreo12ScriptReaderPCc",
        Ok(
            "choreo::ScriptReader::FindDefaultString(char const *) const",
        ),
    ),
    (
        "LoadDefault__Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::LoadDefault(void)",
        ),
    ),
    (
        "FindLocalFloat__CQ26choreo12ScriptReaderPCc",
        Ok(
            "choreo::ScriptReader::FindLocalFloat(char const *) const",
        ),
    ),
    (
        "LoadLocalFloat__Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::LoadLocalFloat(void)",
        ),
    ),
    (
        "FindLocalString__CQ26choreo12ScriptReaderPCc",
        Ok(
            "choreo::ScriptReader::FindLocalString(char const *) const",
        ),
    ),
    (
        "LoadLocalString__Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::LoadLocalString(void)",
        ),
    ),
    (
        "LoadLocal__Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::LoadLocal(void)",
        ),
    ),
    (
        "LoadUntilStruct__Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::LoadUntilStruct(void)",
        ),
    ),
    (
        "IsEndOfFile__CQ26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::IsEndOfFile(void) const",
        ),
    ),
    (
        "GetStructCount__Q26choreo12ScriptReaderPCc",
        Ok(
            "choreo::ScriptReader::GetStructCount(char const *)",
        ),
    ),
    (
        "IsMoreStructs__Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::IsMoreStructs(void)",
        ),
    ),
    (
        "GetNextStructIdentifier__CQ26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::GetNextStructIdentifier(void) const",
        ),
    ),
    (
        "BeginStruct__Q26choreo12ScriptReaderPCc",
        Ok(
            "choreo::ScriptReader::BeginStruct(char const *)",
        ),
    ),
    (
        "EndStruct__Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader::EndStruct(void)",
        ),
    ),
    (
        "RequiredParamFloat__Q26choreo12ScriptReaderPCcPfPi",
        Ok(
            "choreo::ScriptReader::RequiredParamFloat(char const *, float *, int *)",
        ),
    ),
    (
        "RequiredParamString__Q26choreo12ScriptReaderPCcPciPi",
        Ok(
            "choreo::ScriptReader::RequiredParamString(char const *, char *, int, int *)",
        ),
    ),
    (
        "ParamFloat__Q26choreo12ScriptReaderPCcPfPi",
        Ok(
            "choreo::ScriptReader::ParamFloat(char const *, float *, int *)",
        ),
    ),
    (
        "ParamString__Q26choreo12ScriptReaderPCcPciPi",
        Ok(
            "choreo::ScriptReader::ParamString(char const *, char *, int, int *)",
        ),
    ),
    (
        "__tfQ26choreo16StringFileReader",
        Ok(
            "choreo::StringFileReader type_info function",
        ),
    ),
    (
        "__tfQ26choreo13P3DFileReader",
        Ok(
            "choreo::P3DFileReader type_info function",
        ),
    ),
    (
        "__tfQ26choreo13FTTFileReader",
        Ok(
            "choreo::FTTFileReader type_info function",
        ),
    ),
    (
        "__tfQ26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader type_info function",
        ),
    ),
    (
        "_$_Q26choreo10FileReader",
        Ok(
            "choreo::FileReader::~FileReader(void)",
        ),
    ),
    (
        "__Q26choreo10FileReader",
        Ok(
            "choreo::FileReader::FileReader(void)",
        ),
    ),
    (
        "GetFilename__CQ26choreo16StringFileReader",
        Ok(
            "choreo::StringFileReader::GetFilename(void) const",
        ),
    ),
    (
        "GetPosition__CQ26choreo16StringFileReader",
        Ok(
            "choreo::StringFileReader::GetPosition(void) const",
        ),
    ),
    (
        "__tfQ26choreo10FileReader",
        Ok(
            "choreo::FileReader type_info function",
        ),
    ),
    (
        "__Q26choreo25SynchronizationRootDriverPQ26choreo16LocomotionDriver",
        Ok(
            "choreo::SynchronizationRootDriver::SynchronizationRootDriver(choreo::LocomotionDriver *)",
        ),
    ),
    (
        "_$_Q26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver::~SynchronizationRootDriver(void)",
        ),
    ),
    (
        "SetPosition__Q26choreo25SynchronizationRootDriverRCQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::SynchronizationRootDriver::SetPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetOrientation__Q26choreo25SynchronizationRootDriverf",
        Ok(
            "choreo::SynchronizationRootDriver::SetOrientation(float)",
        ),
    ),
    (
        "GetRootBlendInTime__CQ26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver::GetRootBlendInTime(void) const",
        ),
    ),
    (
        "GetRootBlendOutTime__CQ26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver::GetRootBlendOutTime(void) const",
        ),
    ),
    (
        "GetRootWeight__CQ26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver::GetRootWeight(void) const",
        ),
    ),
    (
        "GetRootPriority__CQ26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver::GetRootPriority(void) const",
        ),
    ),
    (
        "HasRootTranslation__CQ26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver::HasRootTranslation(void) const",
        ),
    ),
    (
        "GetRootTranslation__CQ26choreo25SynchronizationRootDriverRCQ25poser9TransformRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::SynchronizationRootDriver::GetRootTranslation(poser::Transform const &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasRootRotation__CQ26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver::HasRootRotation(void) const",
        ),
    ),
    (
        "GetRootRotation__CQ26choreo25SynchronizationRootDriverRCQ25poser9TransformRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::SynchronizationRootDriver::GetRootRotation(poser::Transform const &, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "HasRootGroundFixup__CQ26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver::HasRootGroundFixup(void) const",
        ),
    ),
    (
        "GetRootGroundFixup__CQ26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver::GetRootGroundFixup(void) const",
        ),
    ),
    (
        "__Q26choreo21SynchronizationDriverPQ26choreo10Locomotion",
        Ok(
            "choreo::SynchronizationDriver::SynchronizationDriver(choreo::Locomotion *)",
        ),
    ),
    (
        "_$_Q26choreo21SynchronizationDriver",
        Ok(
            "choreo::SynchronizationDriver::~SynchronizationDriver(void)",
        ),
    ),
    (
        "Clone__CQ26choreo21SynchronizationDriver",
        Ok(
            "choreo::SynchronizationDriver::Clone(void) const",
        ),
    ),
    (
        "SetSynchParameters__Q26choreo21SynchronizationDriverf",
        Ok(
            "choreo::SynchronizationDriver::SetSynchParameters(float)",
        ),
    ),
    (
        "Begin__Q26choreo21SynchronizationDriverPQ26choreo6Puppet",
        Ok(
            "choreo::SynchronizationDriver::Begin(choreo::Puppet *)",
        ),
    ),
    (
        "Advance__Q26choreo21SynchronizationDriverf",
        Ok(
            "choreo::SynchronizationDriver::Advance(float)",
        ),
    ),
    (
        "IsFinished__CQ26choreo21SynchronizationDriver",
        Ok(
            "choreo::SynchronizationDriver::IsFinished(void) const",
        ),
    ),
    (
        "End__Q26choreo21SynchronizationDriverPQ26choreo6Puppet",
        Ok(
            "choreo::SynchronizationDriver::End(choreo::Puppet *)",
        ),
    ),
    (
        "Apply__Q26choreo21SynchronizationDriverPQ26choreo6Engine",
        Ok(
            "choreo::SynchronizationDriver::Apply(choreo::Engine *)",
        ),
    ),
    (
        "__tfQ26choreo21SynchronizationDriver",
        Ok(
            "choreo::SynchronizationDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver type_info function",
        ),
    ),
    (
        "Reset__Q26choreo25SynchronizationRootDriverPQ26choreo11RootBlender",
        Ok(
            "choreo::SynchronizationRootDriver::Reset(choreo::RootBlender *)",
        ),
    ),
    (
        "__Q26choreo10TransitionPQ26choreo3RigP10tAnimationPQ26choreo9Partition",
        Ok(
            "choreo::Transition::Transition(choreo::Rig *, tAnimation *, choreo::Partition *)",
        ),
    ),
    (
        "_$_Q26choreo10Transition",
        Ok(
            "choreo::Transition::~Transition(void)",
        ),
    ),
    (
        "ReadFromScript__Q26choreo10TransitionPQ26choreo12ScriptReaderPQ26choreo8BaseBank",
        Ok(
            "choreo::Transition::ReadFromScript(choreo::ScriptReader *, choreo::BaseBank *)",
        ),
    ),
    (
        "__tfQ26choreo10Transition",
        Ok(
            "choreo::Transition type_info function",
        ),
    ),
    (
        "GetWorldAngle__6choreoff",
        Ok(
            "choreo::GetWorldAngle(float, float)",
        ),
    ),
    (
        "GetSmallestArc__6choreoff",
        Ok(
            "choreo::GetSmallestArc(float, float)",
        ),
    ),
    (
        "RotateYVector__6choreofRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::RotateYVector(float, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "MatrixFillRotateVectorToVector__6choreoRQ218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary6VectorT2",
        Ok(
            "choreo::MatrixFillRotateVectorToVector(RadicalMathLibrary::Matrix &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "VStrPrintf__6choreoPciPCcT1",
        Ok(
            "choreo::VStrPrintf(char *, int, char const *, char *)",
        ),
    ),
    (
        "StrPrintf__6choreoPciPCce",
        Ok(
            "choreo::StrPrintf(char *, int, char const *, ...)",
        ),
    ),
    (
        "StrSet__6choreoPciPCc",
        Ok(
            "choreo::StrSet(char *, int, char const *)",
        ),
    ),
    (
        "StrCat__6choreoPciPCc",
        Ok(
            "choreo::StrCat(char *, int, char const *)",
        ),
    ),
    (
        "_$_Q26choreo9BlendSlot",
        Ok(
            "choreo::BlendSlot::~BlendSlot(void)",
        ),
    ),
    (
        "GetCycleDuration__CQ26choreo9BlendSlot",
        Ok(
            "choreo::BlendSlot::GetCycleDuration(void) const",
        ),
    ),
    (
        "PhaseToFrame__CQ26choreo9BlendSlotf",
        Ok(
            "choreo::BlendSlot::PhaseToFrame(float) const",
        ),
    ),
    (
        "__Q26choreo17BlendSlotFootInfoPQ26choreo3RigPQ26choreo9BlendSlot",
        Ok(
            "choreo::BlendSlotFootInfo::BlendSlotFootInfo(choreo::Rig *, choreo::BlendSlot *)",
        ),
    ),
    (
        "_$_Q26choreo17BlendSlotFootInfo",
        Ok(
            "choreo::BlendSlotFootInfo::~BlendSlotFootInfo(void)",
        ),
    ),
    (
        "FrameToPhase__CQ26choreo17BlendSlotFootInfoff",
        Ok(
            "choreo::BlendSlotFootInfo::FrameToPhase(float, float) const",
        ),
    ),
    (
        "GetFootPlant__CQ26choreo17BlendSlotFootInfoi",
        Ok(
            "choreo::BlendSlotFootInfo::GetFootPlant(int) const",
        ),
    ),
    (
        "GetFootLift__CQ26choreo17BlendSlotFootInfoi",
        Ok(
            "choreo::BlendSlotFootInfo::GetFootLift(int) const",
        ),
    ),
    (
        "GetFootScale__CQ26choreo17BlendSlotFootInfoi",
        Ok(
            "choreo::BlendSlotFootInfo::GetFootScale(int) const",
        ),
    ),
    (
        "__Q26choreo5BlendPQ26choreo3RigiPCiPQ26choreo9Partition",
        Ok(
            "choreo::Blend::Blend(choreo::Rig *, int, int const *, choreo::Partition *)",
        ),
    ),
    (
        "_$_Q26choreo5Blend",
        Ok(
            "choreo::Blend::~Blend(void)",
        ),
    ),
    (
        "GetParamSlotCount__CQ26choreo5Blendi",
        Ok(
            "choreo::Blend::GetParamSlotCount(int) const",
        ),
    ),
    (
        "GetBlendSlotIndex__CQ26choreo5BlendPCi",
        Ok(
            "choreo::Blend::GetBlendSlotIndex(int const *) const",
        ),
    ),
    (
        "GetBlendSlot__Q26choreo5Blendi",
        Ok(
            "choreo::Blend::GetBlendSlot(int)",
        ),
    ),
    (
        "SetBlendSlot__Q26choreo5BlendiPQ26choreo9BlendSlot",
        Ok(
            "choreo::Blend::SetBlendSlot(int, choreo::BlendSlot *)",
        ),
    ),
    (
        "NewDriver__Q26choreo5Blend",
        Ok(
            "choreo::Blend::NewDriver(void)",
        ),
    ),
    (
        "NewBlendDriver__Q26choreo5Blend",
        Ok(
            "choreo::Blend::NewBlendDriver(void)",
        ),
    ),
    (
        "__Q26choreo10BlendPhasePQ26choreo5Blend",
        Ok(
            "choreo::BlendPhase::BlendPhase(choreo::Blend *)",
        ),
    ),
    (
        "_$_Q26choreo10BlendPhase",
        Ok(
            "choreo::BlendPhase::~BlendPhase(void)",
        ),
    ),
    (
        "SetParamValue__Q26choreo10BlendPhaseif",
        Ok(
            "choreo::BlendPhase::SetParamValue(int, float)",
        ),
    ),
    (
        "SetPhase__Q26choreo10BlendPhasef",
        Ok(
            "choreo::BlendPhase::SetPhase(float)",
        ),
    ),
    (
        "GetMaxBlendSlotCount__CQ26choreo10BlendPhase",
        Ok(
            "choreo::BlendPhase::GetMaxBlendSlotCount(void) const",
        ),
    ),
    (
        "GetBlendSlot__Q26choreo10BlendPhasei",
        Ok(
            "choreo::BlendPhase::GetBlendSlot(int)",
        ),
    ),
    (
        "AddBlendSlot__Q26choreo10BlendPhasePQ26choreo9BlendSlotf",
        Ok(
            "choreo::BlendPhase::AddBlendSlot(choreo::BlendSlot *, float)",
        ),
    ),
    (
        "UpdateBlends__Q26choreo10BlendPhase",
        Ok(
            "choreo::BlendPhase::UpdateBlends(void)",
        ),
    ),
    (
        "AdvancePhase__Q26choreo10BlendPhasef",
        Ok(
            "choreo::BlendPhase::AdvancePhase(float)",
        ),
    ),
    (
        "UpdateLegPhase__Q26choreo10BlendPhase",
        Ok(
            "choreo::BlendPhase::UpdateLegPhase(void)",
        ),
    ),
    (
        "IsFinished__CQ26choreo10BlendPhase",
        Ok(
            "choreo::BlendPhase::IsFinished(void) const",
        ),
    ),
    (
        "IsFootPlanted__CQ26choreo10BlendPhasei",
        Ok(
            "choreo::BlendPhase::IsFootPlanted(int) const",
        ),
    ),
    (
        "HasJointTranslation__CQ26choreo10BlendPhasei",
        Ok(
            "choreo::BlendPhase::HasJointTranslation(int) const",
        ),
    ),
    (
        "GetJointTranslation__CQ26choreo10BlendPhaseiRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::BlendPhase::GetJointTranslation(int, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasJointRotation__CQ26choreo10BlendPhasei",
        Ok(
            "choreo::BlendPhase::HasJointRotation(int) const",
        ),
    ),
    (
        "GetJointRotation__CQ26choreo10BlendPhaseiRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::BlendPhase::GetJointRotation(int, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo10BlendPhasei",
        Ok(
            "choreo::BlendPhase::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo10BlendPhasei",
        Ok(
            "choreo::BlendPhase::GetJointPriority(int) const",
        ),
    ),
    (
        "HasGroupTranslation__CQ26choreo10BlendPhaseG13tUidUnaligned",
        Ok(
            "choreo::BlendPhase::HasGroupTranslation(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupTranslation__CQ26choreo10BlendPhaseG13tUidUnalignedRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::BlendPhase::GetGroupTranslation(tUidUnaligned, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasGroupRotation__CQ26choreo10BlendPhaseG13tUidUnaligned",
        Ok(
            "choreo::BlendPhase::HasGroupRotation(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupRotation__CQ26choreo10BlendPhaseG13tUidUnalignedRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::BlendPhase::GetGroupRotation(tUidUnaligned, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "GetGroupWeight__CQ26choreo10BlendPhase",
        Ok(
            "choreo::BlendPhase::GetGroupWeight(void) const",
        ),
    ),
    (
        "GetGroupPriority__CQ26choreo10BlendPhase",
        Ok(
            "choreo::BlendPhase::GetGroupPriority(void) const",
        ),
    ),
    (
        "GetBlendSlotLegWeight__CQ26choreo10BlendPhaseii",
        Ok(
            "choreo::BlendPhase::GetBlendSlotLegWeight(int, int) const",
        ),
    ),
    (
        "GetBlendSlotLegFrame__CQ26choreo10BlendPhaseii",
        Ok(
            "choreo::BlendPhase::GetBlendSlotLegFrame(int, int) const",
        ),
    ),
    (
        "__Q26choreo16BlendJointDriverPQ26choreo10BlendPhase",
        Ok(
            "choreo::BlendJointDriver::BlendJointDriver(choreo::BlendPhase *)",
        ),
    ),
    (
        "_$_Q26choreo16BlendJointDriver",
        Ok(
            "choreo::BlendJointDriver::~BlendJointDriver(void)",
        ),
    ),
    (
        "Reset__Q26choreo16BlendJointDriver",
        Ok(
            "choreo::BlendJointDriver::Reset(void)",
        ),
    ),
    (
        "Advance__Q26choreo16BlendJointDriverf",
        Ok(
            "choreo::BlendJointDriver::Advance(float)",
        ),
    ),
    (
        "GetBlendInTime__CQ26choreo16BlendJointDriver",
        Ok(
            "choreo::BlendJointDriver::GetBlendInTime(void) const",
        ),
    ),
    (
        "GetBlendOutTime__CQ26choreo16BlendJointDriver",
        Ok(
            "choreo::BlendJointDriver::GetBlendOutTime(void) const",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo16BlendJointDriveri",
        Ok(
            "choreo::BlendJointDriver::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo16BlendJointDriveri",
        Ok(
            "choreo::BlendJointDriver::GetJointPriority(int) const",
        ),
    ),
    (
        "HasJointTranslation__CQ26choreo16BlendJointDriveri",
        Ok(
            "choreo::BlendJointDriver::HasJointTranslation(int) const",
        ),
    ),
    (
        "GetJointTranslation__CQ26choreo16BlendJointDriveriRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::BlendJointDriver::GetJointTranslation(int, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasJointRotation__CQ26choreo16BlendJointDriveri",
        Ok(
            "choreo::BlendJointDriver::HasJointRotation(int) const",
        ),
    ),
    (
        "GetJointRotation__CQ26choreo16BlendJointDriveriRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::BlendJointDriver::GetJointRotation(int, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "GetGroupWeight__CQ26choreo16BlendJointDriverG13tUidUnaligned",
        Ok(
            "choreo::BlendJointDriver::GetGroupWeight(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupPriority__CQ26choreo16BlendJointDriverG13tUidUnaligned",
        Ok(
            "choreo::BlendJointDriver::GetGroupPriority(tUidUnaligned) const",
        ),
    ),
    (
        "HasGroupTranslation__CQ26choreo16BlendJointDriverG13tUidUnaligned",
        Ok(
            "choreo::BlendJointDriver::HasGroupTranslation(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupTranslation__CQ26choreo16BlendJointDriverG13tUidUnalignedRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::BlendJointDriver::GetGroupTranslation(tUidUnaligned, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasGroupRotation__CQ26choreo16BlendJointDriverG13tUidUnaligned",
        Ok(
            "choreo::BlendJointDriver::HasGroupRotation(tUidUnaligned) const",
        ),
    ),
    (
        "GetGroupRotation__CQ26choreo16BlendJointDriverG13tUidUnalignedRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::BlendJointDriver::GetGroupRotation(tUidUnaligned, RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "__Q26choreo15BlendFootDriverPQ26choreo6RigLegPQ26choreo10BlendPhase",
        Ok(
            "choreo::BlendFootDriver::BlendFootDriver(choreo::RigLeg *, choreo::BlendPhase *)",
        ),
    ),
    (
        "_$_Q26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::~BlendFootDriver(void)",
        ),
    ),
    (
        "GetFootBlendInTime__CQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::GetFootBlendInTime(void) const",
        ),
    ),
    (
        "GetFootBlendOutTime__CQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::GetFootBlendOutTime(void) const",
        ),
    ),
    (
        "GetFootWeight__CQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::GetFootWeight(void) const",
        ),
    ),
    (
        "GetFootPriority__CQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::GetFootPriority(void) const",
        ),
    ),
    (
        "HasFootEffectorTranslation__CQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::HasFootEffectorTranslation(void) const",
        ),
    ),
    (
        "GetFootEffectorTranslationIK__CQ26choreo15BlendFootDriverRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::BlendFootDriver::GetFootEffectorTranslationIK(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetFootEffectorTranslationIKWorld__CQ26choreo15BlendFootDriverRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::BlendFootDriver::GetFootEffectorTranslationIKWorld(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetFootEffectorTranslationNoIK__CQ26choreo15BlendFootDriverRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::BlendFootDriver::GetFootEffectorTranslationNoIK(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetFootEffectorTranslation__CQ26choreo15BlendFootDriverRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::BlendFootDriver::GetFootEffectorTranslation(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasFootEffectorRotation__CQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::HasFootEffectorRotation(void) const",
        ),
    ),
    (
        "GetFootEffectorRotationIK__CQ26choreo15BlendFootDriverRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::BlendFootDriver::GetFootEffectorRotationIK(RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "GetFootEffectorRotationIKWorld__CQ26choreo15BlendFootDriverRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::BlendFootDriver::GetFootEffectorRotationIKWorld(RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "GetFootEffectorRotation__CQ26choreo15BlendFootDriverRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "choreo::BlendFootDriver::GetFootEffectorRotation(RadicalMathLibrary::Quaternion &) const",
        ),
    ),
    (
        "HasFootPoleVectorTranslation__CQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::HasFootPoleVectorTranslation(void) const",
        ),
    ),
    (
        "GetFootPoleVectorTranslation__CQ26choreo15BlendFootDriverRQ218RadicalMathLibrary6Vector",
        Ok(
            "choreo::BlendFootDriver::GetFootPoleVectorTranslation(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "HasFootPlanted__CQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::HasFootPlanted(void) const",
        ),
    ),
    (
        "IsFootPlanted__CQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::IsFootPlanted(void) const",
        ),
    ),
    (
        "HasFootGroundFixup__CQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::HasFootGroundFixup(void) const",
        ),
    ),
    (
        "GetFootGroundFixup__CQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver::GetFootGroundFixup(void) const",
        ),
    ),
    (
        "__Q26choreo11BlendDriverPQ26choreo5Blend",
        Ok(
            "choreo::BlendDriver::BlendDriver(choreo::Blend *)",
        ),
    ),
    (
        "_$_Q26choreo11BlendDriver",
        Ok(
            "choreo::BlendDriver::~BlendDriver(void)",
        ),
    ),
    (
        "Clone__CQ26choreo11BlendDriver",
        Ok(
            "choreo::BlendDriver::Clone(void) const",
        ),
    ),
    (
        "GetWeight__CQ26choreo11BlendDriver",
        Ok(
            "choreo::BlendDriver::GetWeight(void) const",
        ),
    ),
    (
        "GetRootBlendInTime__CQ26choreo11BlendDriver",
        Ok(
            "choreo::BlendDriver::GetRootBlendInTime(void) const",
        ),
    ),
    (
        "GetRootBlendOutTime__CQ26choreo11BlendDriver",
        Ok(
            "choreo::BlendDriver::GetRootBlendOutTime(void) const",
        ),
    ),
    (
        "SetParamValue__Q26choreo11BlendDriverif",
        Ok(
            "choreo::BlendDriver::SetParamValue(int, float)",
        ),
    ),
    (
        "SetIsCyclic__Q26choreo11BlendDriverb",
        Ok(
            "choreo::BlendDriver::SetIsCyclic(bool)",
        ),
    ),
    (
        "GetJointWeight__CQ26choreo11BlendDriveri",
        Ok(
            "choreo::BlendDriver::GetJointWeight(int) const",
        ),
    ),
    (
        "GetJointPriority__CQ26choreo11BlendDriveri",
        Ok(
            "choreo::BlendDriver::GetJointPriority(int) const",
        ),
    ),
    (
        "Begin__Q26choreo11BlendDriverPQ26choreo6Puppet",
        Ok(
            "choreo::BlendDriver::Begin(choreo::Puppet *)",
        ),
    ),
    (
        "Advance__Q26choreo11BlendDriverf",
        Ok(
            "choreo::BlendDriver::Advance(float)",
        ),
    ),
    (
        "IsFinished__CQ26choreo11BlendDriver",
        Ok(
            "choreo::BlendDriver::IsFinished(void) const",
        ),
    ),
    (
        "End__Q26choreo11BlendDriverPQ26choreo6Puppet",
        Ok(
            "choreo::BlendDriver::End(choreo::Puppet *)",
        ),
    ),
    (
        "Apply__Q26choreo11BlendDriverPQ26choreo6Engine",
        Ok(
            "choreo::BlendDriver::Apply(choreo::Engine *)",
        ),
    ),
    (
        "__tfQ26choreo9BlendSlot",
        Ok(
            "choreo::BlendSlot type_info function",
        ),
    ),
    (
        "__tfQ26choreo17BlendSlotFootInfo",
        Ok(
            "choreo::BlendSlotFootInfo type_info function",
        ),
    ),
    (
        "__tfQ26choreo5Blend",
        Ok(
            "choreo::Blend type_info function",
        ),
    ),
    (
        "__tfQ26choreo11BlendDriver",
        Ok(
            "choreo::BlendDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo10BlendPhase",
        Ok(
            "choreo::BlendPhase type_info function",
        ),
    ),
    (
        "__tfQ26choreo16BlendJointDriver",
        Ok(
            "choreo::BlendJointDriver type_info function",
        ),
    ),
    (
        "__tfQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver type_info function",
        ),
    ),
    (
        "GetCycleStart__CQ26choreo9BlendSlot",
        Ok(
            "choreo::BlendSlot::GetCycleStart(void) const",
        ),
    ),
    (
        "GetFootPlant__CQ26choreo9BlendSloti",
        Ok(
            "choreo::BlendSlot::GetFootPlant(int) const",
        ),
    ),
    (
        "GetFootLift__CQ26choreo9BlendSloti",
        Ok(
            "choreo::BlendSlot::GetFootLift(int) const",
        ),
    ),
    (
        "GetFootScale__CQ26choreo9BlendSloti",
        Ok(
            "choreo::BlendSlot::GetFootScale(int) const",
        ),
    ),
    (
        "__Q23sim9Collision",
        Ok(
            "sim::Collision::Collision(void)",
        ),
    ),
    (
        "__Q23sim9CollisionPQ23sim15CollisionVolumeRCQ218RadicalMathLibrary6VectorT1T2fT2",
        Ok(
            "sim::Collision::Collision(sim::CollisionVolume *, RadicalMathLibrary::Vector const &, sim::CollisionVolume *, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Set__Q23sim9CollisionPQ23sim15CollisionVolumeRCQ218RadicalMathLibrary6VectorT1T2fT2",
        Ok(
            "sim::Collision::Set(sim::CollisionVolume *, RadicalMathLibrary::Vector const &, sim::CollisionVolume *, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__Q23sim19CollisionObjectPair",
        Ok(
            "sim::CollisionObjectPair::CollisionObjectPair(void)",
        ),
    ),
    (
        "Set__Q23sim19CollisionObjectPairPQ23sim15CollisionObjectT1",
        Ok(
            "sim::CollisionObjectPair::Set(sim::CollisionObject *, sim::CollisionObject *)",
        ),
    ),
    (
        "PrepareForCollisionDetection__Q23sim19CollisionObjectPair",
        Ok(
            "sim::CollisionObjectPair::PrepareForCollisionDetection(void)",
        ),
    ),
    (
        "SafeCollisionDistance__Q23sim19CollisionObjectPairf",
        Ok(
            "sim::CollisionObjectPair::SafeCollisionDistance(float)",
        ),
    ),
    (
        "SetDrawVolumeMethod__3simQ23sim16DrawVolumeMethod",
        Ok(
            "sim::SetDrawVolumeMethod(sim::DrawVolumeMethod)",
        ),
    ),
    (
        "DrawCollisionVolume__3simPQ23sim15CollisionVolume",
        Ok(
            "sim::DrawCollisionVolume(sim::CollisionVolume *)",
        ),
    ),
    (
        "DrawBBox__3simPQ23sim15CollisionVolume",
        Ok(
            "sim::DrawBBox(sim::CollisionVolume *)",
        ),
    ),
    (
        "DrawCyl__3simPQ23sim14CylinderVolume",
        Ok(
            "sim::DrawCyl(sim::CylinderVolume *)",
        ),
    ),
    (
        "DrawSphere__3simPQ23sim12SphereVolume",
        Ok(
            "sim::DrawSphere(sim::SphereVolume *)",
        ),
    ),
    (
        "DrawOBBox__3simPQ23sim11OBBoxVolume",
        Ok(
            "sim::DrawOBBox(sim::OBBoxVolume *)",
        ),
    ),
    (
        "DrawWall__3simPQ23sim10WallVolume",
        Ok(
            "sim::DrawWall(sim::WallVolume *)",
        ),
    ),
    (
        "DrawOBBoxShape__3simPQ23sim11OBBoxVolume",
        Ok(
            "sim::DrawOBBoxShape(sim::OBBoxVolume *)",
        ),
    ),
    (
        "DrawSphereShape__3simPQ23sim12SphereVolume",
        Ok(
            "sim::DrawSphereShape(sim::SphereVolume *)",
        ),
    ),
    (
        "DrawCylinderShape__3simPQ23sim14CylinderVolume",
        Ok(
            "sim::DrawCylinderShape(sim::CylinderVolume *)",
        ),
    ),
    (
        "GetInstance__Q23sim16CollisionManager",
        Ok(
            "sim::CollisionManager::GetInstance(void)",
        ),
    ),
    (
        "__Q23sim16CollisionManager",
        Ok(
            "sim::CollisionManager::CollisionManager(void)",
        ),
    ),
    (
        "_$_Q23sim16CollisionManager",
        Ok(
            "sim::CollisionManager::~CollisionManager(void)",
        ),
    ),
    (
        "SetCollisionManagerAttributes__Q23sim16CollisionManagerUi",
        Ok(
            "sim::CollisionManager::SetCollisionManagerAttributes(unsigned int)",
        ),
    ),
    (
        "SetNbArea__Q23sim16CollisionManageri",
        Ok(
            "sim::CollisionManager::SetNbArea(int)",
        ),
    ),
    (
        "ResetArea__Q23sim16CollisionManageri",
        Ok(
            "sim::CollisionManager::ResetArea(int)",
        ),
    ),
    (
        "SetUseExclusiveAutoPair__Q23sim16CollisionManagerbi",
        Ok(
            "sim::CollisionManager::SetUseExclusiveAutoPair(bool, int)",
        ),
    ),
    (
        "ClearCollisions__Q23sim16CollisionManager",
        Ok(
            "sim::CollisionManager::ClearCollisions(void)",
        ),
    ),
    (
        "AddCollisionObject__Q23sim16CollisionManagerPQ23sim15CollisionObjecti",
        Ok(
            "sim::CollisionManager::AddCollisionObject(sim::CollisionObject *, int)",
        ),
    ),
    (
        "RemoveCollisionObject__Q23sim16CollisionManagerPQ23sim15CollisionObjecti",
        Ok(
            "sim::CollisionManager::RemoveCollisionObject(sim::CollisionObject *, int)",
        ),
    ),
    (
        "AddPair__Q23sim16CollisionManagerPQ23sim15CollisionObjectT1i",
        Ok(
            "sim::CollisionManager::AddPair(sim::CollisionObject *, sim::CollisionObject *, int)",
        ),
    ),
    (
        "DetectCollision__Q23sim16CollisionManageriffb",
        Ok(
            "sim::CollisionManager::DetectCollision(int, float, float, bool)",
        ),
    ),
    (
        "DetectCollision__Q23sim16CollisionManagerffb",
        Ok(
            "sim::CollisionManager::DetectCollision(float, float, bool)",
        ),
    ),
    (
        "SolveCollision__Q23sim16CollisionManageriff",
        Ok(
            "sim::CollisionManager::SolveCollision(int, float, float)",
        ),
    ),
    (
        "SolveCollision__Q23sim16CollisionManagerff",
        Ok(
            "sim::CollisionManager::SolveCollision(float, float)",
        ),
    ),
    (
        "EndDetectCollision__Q23sim16CollisionManager",
        Ok(
            "sim::CollisionManager::EndDetectCollision(void)",
        ),
    ),
    (
        "SetAreaActivated__Q23sim16CollisionManagerib",
        Ok(
            "sim::CollisionManager::SetAreaActivated(int, bool)",
        ),
    ),
    (
        "ActivateAllAreas__Q23sim16CollisionManager",
        Ok(
            "sim::CollisionManager::ActivateAllAreas(void)",
        ),
    ),
    (
        "DeActivateAllAreas__Q23sim16CollisionManager",
        Ok(
            "sim::CollisionManager::DeActivateAllAreas(void)",
        ),
    ),
    (
        "DetectRayIntersection__Q23sim16CollisionManagerRQ23simt6TArray1ZQ23sim19RayIntersectionInfoRCQ218RadicalMathLibrary6VectorT2bi",
        Ok(
            "sim::CollisionManager::DetectRayIntersection(sim::TArray<sim::RayIntersectionInfo> &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, bool, int)",
        ),
    ),
    (
        "__Q33sim16CollisionManager4Area",
        Ok(
            "sim::CollisionManager::Area::Area(void)",
        ),
    ),
    (
        "_$_Q33sim16CollisionManager4Area",
        Ok(
            "sim::CollisionManager::Area::~Area(void)",
        ),
    ),
    (
        "Reset__Q33sim16CollisionManager4Area",
        Ok(
            "sim::CollisionManager::Area::Reset(void)",
        ),
    ),
    (
        "AddCollisionObject__Q33sim16CollisionManager4AreaPQ23sim15CollisionObject",
        Ok(
            "sim::CollisionManager::Area::AddCollisionObject(sim::CollisionObject *)",
        ),
    ),
    (
        "RemoveCollisionObject__Q33sim16CollisionManager4AreaPQ23sim15CollisionObject",
        Ok(
            "sim::CollisionManager::Area::RemoveCollisionObject(sim::CollisionObject *)",
        ),
    ),
    (
        "AddPair__Q33sim16CollisionManager4AreaPQ23sim15CollisionObjectT1",
        Ok(
            "sim::CollisionManager::Area::AddPair(sim::CollisionObject *, sim::CollisionObject *)",
        ),
    ),
    (
        "PrepareForCollisionDetection__Q33sim16CollisionManager4AreaUi",
        Ok(
            "sim::CollisionManager::Area::PrepareForCollisionDetection(unsigned int)",
        ),
    ),
    (
        "EndCollisionDetection__Q33sim16CollisionManager4AreaUi",
        Ok(
            "sim::CollisionManager::Area::EndCollisionDetection(unsigned int)",
        ),
    ),
    (
        "DetectRayIntersection__Q33sim16CollisionManager4AreaRQ23simt6TArray1ZQ23sim19RayIntersectionInfoRCQ218RadicalMathLibrary6VectorT2RQ218RadicalMathLibrary6VectorRfb",
        Ok(
            "sim::CollisionManager::Area::DetectRayIntersection(sim::TArray<sim::RayIntersectionInfo> &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, float &, bool)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1Zii",
        Ok(
            "sim::TArray<int>::ResizeArray(int)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1Zi",
        Ok(
            "sim::TArray<int>::Grow(void)",
        ),
    ),
    (
        "Add__Q23simt6TArray1ZiRCi",
        Ok(
            "sim::TArray<int>::Add(int const &)",
        ),
    ),
    (
        "RemoveAt__Q23simt6TArray1Zii",
        Ok(
            "sim::TArray<int>::RemoveAt(int)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1ZQ23sim19CollisionObjectPairi",
        Ok(
            "sim::TArray<sim::CollisionObjectPair>::ResizeArray(int)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1ZQ23sim19CollisionObjectPair",
        Ok(
            "sim::TArray<sim::CollisionObjectPair>::Grow(void)",
        ),
    ),
    (
        "NewElem__Q23simt6TArray1ZQ23sim19CollisionObjectPair",
        Ok(
            "sim::TArray<sim::CollisionObjectPair>::NewElem(void)",
        ),
    ),
    (
        "RemoveAt__Q23simt6TArray1ZQ23sim19CollisionObjectPairi",
        Ok(
            "sim::TArray<sim::CollisionObjectPair>::RemoveAt(int)",
        ),
    ),
    (
        "__tfQ23simt5TList1ZPQ23sim15CollisionObject",
        Ok(
            "sim::TList<sim::CollisionObject *> type_info function",
        ),
    ),
    (
        "__tfQ23sim16CollisionManager",
        Ok(
            "sim::CollisionManager type_info function",
        ),
    ),
    (
        "_$_Q23simt5TList1ZPQ23sim15CollisionObject",
        Ok(
            "sim::TList<sim::CollisionObject *>::~TList(void)",
        ),
    ),
    (
        "__Q23sim15CollisionObjectPQ23sim15CollisionVolume",
        Ok(
            "sim::CollisionObject::CollisionObject(sim::CollisionVolume *)",
        ),
    ),
    (
        "_$_Q23sim15CollisionObject",
        Ok(
            "sim::CollisionObject::~CollisionObject(void)",
        ),
    ),
    (
        "SetIsStatic__Q23sim15CollisionObjectb",
        Ok(
            "sim::CollisionObject::SetIsStatic(bool)",
        ),
    ),
    (
        "SetPhysicsProperties__Q23sim15CollisionObjectPQ23sim17PhysicsProperties",
        Ok(
            "sim::CollisionObject::SetPhysicsProperties(sim::PhysicsProperties *)",
        ),
    ),
    (
        "ConvertToRigidBody__Q23sim15CollisionObject",
        Ok(
            "sim::CollisionObject::ConvertToRigidBody(void)",
        ),
    ),
    (
        "Clone__Q23sim15CollisionObjectPQ23sim8SimState",
        Ok(
            "sim::CollisionObject::Clone(sim::SimState *)",
        ),
    ),
    (
        "SetCollisionVolume__Q23sim15CollisionObjectPQ23sim15CollisionVolume",
        Ok(
            "sim::CollisionObject::SetCollisionVolume(sim::CollisionVolume *)",
        ),
    ),
    (
        "SetVisibility__Q23sim15CollisionObjectP18tCompositeDrawable",
        Ok(
            "sim::CollisionObject::SetVisibility(tCompositeDrawable *)",
        ),
    ),
    (
        "SetVisibility__Q23sim15CollisionObjectib",
        Ok(
            "sim::CollisionObject::SetVisibility(int, bool)",
        ),
    ),
    (
        "UpdateVisibilityByJoint__Q23sim15CollisionObjectPQ23sim15CollisionVolumeib",
        Ok(
            "sim::CollisionObject::UpdateVisibilityByJoint(sim::CollisionVolume *, int, bool)",
        ),
    ),
    (
        "UpdateVisibilityByOwner__Q23sim15CollisionObjectPQ23sim15CollisionVolumeRQ23simt6TArray1Zb",
        Ok(
            "sim::CollisionObject::UpdateVisibilityByOwner(sim::CollisionVolume *, sim::TArray<bool> &)",
        ),
    ),
    (
        "AddSelfCollision__Q23sim15CollisionObjectiibT3",
        Ok(
            "sim::CollisionObject::AddSelfCollision(int, int, bool, bool)",
        ),
    ),
    (
        "SetSelfCollision__Q23sim15CollisionObjectRQ33sim15CollisionObject13SelfCollision",
        Ok(
            "sim::CollisionObject::SetSelfCollision(sim::CollisionObject::SelfCollision &)",
        ),
    ),
    (
        "__as__Q33sim15CollisionObject20CollisionVolumeOwnerRCQ33sim15CollisionObject20CollisionVolumeOwner",
        Ok(
            "sim::CollisionObject::CollisionVolumeOwner::operator=(sim::CollisionObject::CollisionVolumeOwner const &)",
        ),
    ),
    (
        "LoadVectorFromCollisionVectorChunk__3simP10tChunkFileRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::LoadVectorFromCollisionVectorChunk(tChunkFile *, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "__Q23sim21CollisionObjectLoader",
        Ok(
            "sim::CollisionObjectLoader::CollisionObjectLoader(void)",
        ),
    ),
    (
        "LoadObject__Q23sim21CollisionObjectLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "sim::CollisionObjectLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadCollisionVolume__Q23sim21CollisionObjectLoaderP10tChunkFile",
        Ok(
            "sim::CollisionObjectLoader::LoadCollisionVolume(tChunkFile *)",
        ),
    ),
    (
        "SetNumOwnerList__Q33sim15CollisionObject20CollisionVolumeOwneri",
        Ok(
            "sim::CollisionObject::CollisionVolumeOwner::SetNumOwnerList(int)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1ZQ33sim15CollisionObject13SelfCollisioni",
        Ok(
            "sim::TArray<sim::CollisionObject::SelfCollision>::ResizeArray(int)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1ZQ33sim15CollisionObject13SelfCollision",
        Ok(
            "sim::TArray<sim::CollisionObject::SelfCollision>::Grow(void)",
        ),
    ),
    (
        "NewElem__Q23simt6TArray1ZQ33sim15CollisionObject13SelfCollision",
        Ok(
            "sim::TArray<sim::CollisionObject::SelfCollision>::NewElem(void)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1Z13tUidUnalignedi",
        Ok(
            "sim::TArray<tUidUnaligned>::ResizeArray(int)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1Zbi",
        Ok(
            "sim::TArray<bool>::ResizeArray(int)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1Z13tUidUnaligned",
        Ok(
            "sim::TArray<tUidUnaligned>::Grow(void)",
        ),
    ),
    (
        "NewElem__Q23simt6TArray1Z13tUidUnaligned",
        Ok(
            "sim::TArray<tUidUnaligned>::NewElem(void)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1Zb",
        Ok(
            "sim::TArray<bool>::Grow(void)",
        ),
    ),
    (
        "NewElem__Q23simt6TArray1Zb",
        Ok(
            "sim::TArray<bool>::NewElem(void)",
        ),
    ),
    (
        "__tfQ23sim15CollisionObject",
        Ok(
            "sim::CollisionObject type_info function",
        ),
    ),
    (
        "__tfQ23sim21CollisionObjectLoader",
        Ok(
            "sim::CollisionObjectLoader type_info function",
        ),
    ),
    (
        "_$_Q23sim21CollisionObjectLoader",
        Ok(
            "sim::CollisionObjectLoader::~CollisionObjectLoader(void)",
        ),
    ),
    (
        "__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::CollisionVolume(void)",
        ),
    ),
    (
        "_$_Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::~CollisionVolume(void)",
        ),
    ),
    (
        "GetSubCollisionVolume__Q23sim15CollisionVolumeib",
        Ok(
            "sim::CollisionVolume::GetSubCollisionVolume(int, bool)",
        ),
    ),
    (
        "ConvertToRigidBody__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::ConvertToRigidBody(void)",
        ),
    ),
    (
        "UpdateBBoxVisibility__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::UpdateBBoxVisibility(void)",
        ),
    ),
    (
        "Clone__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::Clone(void)",
        ),
    ),
    (
        "Optimize__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::Optimize(void)",
        ),
    ),
    (
        "DeOptimize__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::DeOptimize(void)",
        ),
    ),
    (
        "SetClone__Q23sim15CollisionVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::SetClone(sim::CollisionVolume *)",
        ),
    ),
    (
        "UpdateAll__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::UpdateAll(void)",
        ),
    ),
    (
        "UpdateBSphere__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::UpdateBSphere(void)",
        ),
    ),
    (
        "UpdatePos__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::UpdatePos(void)",
        ),
    ),
    (
        "UpdateRot__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::UpdateRot(void)",
        ),
    ),
    (
        "UpdateScale__Q23sim15CollisionVolumef",
        Ok(
            "sim::CollisionVolume::UpdateScale(float)",
        ),
    ),
    (
        "Reserve__Q23sim15CollisionVolumeUi",
        Ok(
            "sim::CollisionVolume::Reserve(unsigned int)",
        ),
    ),
    (
        "AddSubVolume__Q23sim15CollisionVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::AddSubVolume(sim::CollisionVolume *)",
        ),
    ),
    (
        "RemoveSubVolume__Q23sim15CollisionVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::RemoveSubVolume(sim::CollisionVolume *)",
        ),
    ),
    (
        "SetCollisionObject__Q23sim15CollisionVolumePQ23sim15CollisionObject",
        Ok(
            "sim::CollisionVolume::SetCollisionObject(sim::CollisionObject *)",
        ),
    ),
    (
        "SetObjRefIndex__Q23sim15CollisionVolumei",
        Ok(
            "sim::CollisionVolume::SetObjRefIndex(int)",
        ),
    ),
    (
        "IsBBIn__Q23sim15CollisionVolumePQ23sim15CollisionVolumef",
        Ok(
            "sim::CollisionVolume::IsBBIn(sim::CollisionVolume *, float)",
        ),
    ),
    (
        "__Q23sim12SphereVolumeRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::SphereVolume::SphereVolume(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "_$_Q23sim12SphereVolume",
        Ok(
            "sim::SphereVolume::~SphereVolume(void)",
        ),
    ),
    (
        "SetClone__Q23sim12SphereVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::SphereVolume::SetClone(sim::CollisionVolume *)",
        ),
    ),
    (
        "UpdateScale__Q23sim12SphereVolumef",
        Ok(
            "sim::SphereVolume::UpdateScale(float)",
        ),
    ),
    (
        "UpdateRadius__Q23sim12SphereVolumef",
        Ok(
            "sim::SphereVolume::UpdateRadius(float)",
        ),
    ),
    (
        "__Q23sim14CylinderVolumeRCQ218RadicalMathLibrary6VectorT1ffb",
        Ok(
            "sim::CylinderVolume::CylinderVolume(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, bool)",
        ),
    ),
    (
        "_$_Q23sim14CylinderVolume",
        Ok(
            "sim::CylinderVolume::~CylinderVolume(void)",
        ),
    ),
    (
        "SetClone__Q23sim14CylinderVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::CylinderVolume::SetClone(sim::CollisionVolume *)",
        ),
    ),
    (
        "UpdateScale__Q23sim14CylinderVolumef",
        Ok(
            "sim::CylinderVolume::UpdateScale(float)",
        ),
    ),
    (
        "SetRotation__Q23sim14CylinderVolume",
        Ok(
            "sim::CylinderVolume::SetRotation(void)",
        ),
    ),
    (
        "UpdateBBox__Q23sim14CylinderVolume",
        Ok(
            "sim::CylinderVolume::UpdateBBox(void)",
        ),
    ),
    (
        "UpdateBSphere__Q23sim14CylinderVolume",
        Ok(
            "sim::CylinderVolume::UpdateBSphere(void)",
        ),
    ),
    (
        "OptimizeAxis__Q23sim14CylinderVolume",
        Ok(
            "sim::CylinderVolume::OptimizeAxis(void)",
        ),
    ),
    (
        "Set__Q23sim11OBBoxVolumeRCQ218RadicalMathLibrary6VectorN31fff",
        Ok(
            "sim::OBBoxVolume::Set(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, float)",
        ),
    ),
    (
        "_$_Q23sim11OBBoxVolume",
        Ok(
            "sim::OBBoxVolume::~OBBoxVolume(void)",
        ),
    ),
    (
        "SetClone__Q23sim11OBBoxVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::OBBoxVolume::SetClone(sim::CollisionVolume *)",
        ),
    ),
    (
        "UpdateScale__Q23sim11OBBoxVolumef",
        Ok(
            "sim::OBBoxVolume::UpdateScale(float)",
        ),
    ),
    (
        "SetRotation__Q23sim11OBBoxVolume",
        Ok(
            "sim::OBBoxVolume::SetRotation(void)",
        ),
    ),
    (
        "UpdateBBox__Q23sim11OBBoxVolume",
        Ok(
            "sim::OBBoxVolume::UpdateBBox(void)",
        ),
    ),
    (
        "UpdateBSphere__Q23sim11OBBoxVolume",
        Ok(
            "sim::OBBoxVolume::UpdateBSphere(void)",
        ),
    ),
    (
        "Projection__CQ23sim11OBBoxVolumeRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::OBBoxVolume::Projection(RadicalMathLibrary::Vector const &) const",
        ),
    ),
    (
        "Projection__CQ23sim11OBBoxVolumeRCQ218RadicalMathLibrary6Vectori",
        Ok(
            "sim::OBBoxVolume::Projection(RadicalMathLibrary::Vector const &, int) const",
        ),
    ),
    (
        "SubCorner__CQ23sim11OBBoxVolumeRQ218RadicalMathLibrary6Vectori",
        Ok(
            "sim::OBBoxVolume::SubCorner(RadicalMathLibrary::Vector &, int) const",
        ),
    ),
    (
        "Corner__CQ23sim11OBBoxVolumeRQ218RadicalMathLibrary6Vectori",
        Ok(
            "sim::OBBoxVolume::Corner(RadicalMathLibrary::Vector &, int) const",
        ),
    ),
    (
        "Side__CQ23sim11OBBoxVolumeRQ218RadicalMathLibrary6Vectorii",
        Ok(
            "sim::OBBoxVolume::Side(RadicalMathLibrary::Vector &, int, int) const",
        ),
    ),
    (
        "OptimizeAxis__Q23sim11OBBoxVolume",
        Ok(
            "sim::OBBoxVolume::OptimizeAxis(void)",
        ),
    ),
    (
        "SwapAxis__Q23sim11OBBoxVolumeii",
        Ok(
            "sim::OBBoxVolume::SwapAxis(int, int)",
        ),
    ),
    (
        "__Q23sim10WallVolumeRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "sim::WallVolume::WallVolume(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__Q23sim10WallVolume",
        Ok(
            "sim::WallVolume::WallVolume(void)",
        ),
    ),
    (
        "_$_Q23sim10WallVolume",
        Ok(
            "sim::WallVolume::~WallVolume(void)",
        ),
    ),
    (
        "SetClone__Q23sim10WallVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::WallVolume::SetClone(sim::CollisionVolume *)",
        ),
    ),
    (
        "UpdateBBox__Q23sim10WallVolume",
        Ok(
            "sim::WallVolume::UpdateBBox(void)",
        ),
    ),
    (
        "UpdateScale__Q23sim10WallVolumef",
        Ok(
            "sim::WallVolume::UpdateScale(float)",
        ),
    ),
    (
        "SetRotation__Q23sim10WallVolume",
        Ok(
            "sim::WallVolume::SetRotation(void)",
        ),
    ),
    (
        "OptimizeAxis__Q23sim10WallVolume",
        Ok(
            "sim::WallVolume::OptimizeAxis(void)",
        ),
    ),
    (
        "__Q23sim10BBoxVolume",
        Ok(
            "sim::BBoxVolume::BBoxVolume(void)",
        ),
    ),
    (
        "_$_Q23sim10BBoxVolume",
        Ok(
            "sim::BBoxVolume::~BBoxVolume(void)",
        ),
    ),
    (
        "UpdateBBox__Q23sim10BBoxVolume",
        Ok(
            "sim::BBoxVolume::UpdateBBox(void)",
        ),
    ),
    (
        "AddBox__CQ23sim10BBoxVolumeRQ218RadicalMathLibrary6VectorT1PQ23sim15CollisionVolume",
        Ok(
            "sim::BBoxVolume::AddBox(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, sim::CollisionVolume *) const",
        ),
    ),
    (
        "InertiaSelf__CQ23sim12SphereVolumeRQ23sim9SymMatrix",
        Ok(
            "sim::SphereVolume::InertiaSelf(sim::SymMatrix &) const",
        ),
    ),
    (
        "InertiaSelf__CQ23sim14CylinderVolumeRQ23sim9SymMatrix",
        Ok(
            "sim::CylinderVolume::InertiaSelf(sim::SymMatrix &) const",
        ),
    ),
    (
        "InertiaSelf__CQ23sim11OBBoxVolumeRQ23sim9SymMatrix",
        Ok(
            "sim::OBBoxVolume::InertiaSelf(sim::SymMatrix &) const",
        ),
    ),
    (
        "__tfQ23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume type_info function",
        ),
    ),
    (
        "__tfQ23simt5TList1ZPQ23sim15CollisionVolume",
        Ok(
            "sim::TList<sim::CollisionVolume *> type_info function",
        ),
    ),
    (
        "__tfQ23sim12SphereVolume",
        Ok(
            "sim::SphereVolume type_info function",
        ),
    ),
    (
        "__tfQ23sim14CylinderVolume",
        Ok(
            "sim::CylinderVolume type_info function",
        ),
    ),
    (
        "__tfQ23sim11OBBoxVolume",
        Ok(
            "sim::OBBoxVolume type_info function",
        ),
    ),
    (
        "__tfQ23sim10WallVolume",
        Ok(
            "sim::WallVolume type_info function",
        ),
    ),
    (
        "__tfQ23sim10BBoxVolume",
        Ok(
            "sim::BBoxVolume type_info function",
        ),
    ),
    (
        "__Q23sim9SymMatrixRCQ23sim9SymMatrix",
        Ok(
            "sim::SymMatrix::SymMatrix(sim::SymMatrix const &)",
        ),
    ),
    (
        "_$_Q23simt5TList1ZPQ23sim15CollisionVolume",
        Ok(
            "sim::TList<sim::CollisionVolume *>::~TList(void)",
        ),
    ),
    (
        "UpdateBBox__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::UpdateBBox(void)",
        ),
    ),
    (
        "InertiaSelf__CQ23sim15CollisionVolumeRQ23sim9SymMatrix",
        Ok(
            "sim::CollisionVolume::InertiaSelf(sim::SymMatrix &) const",
        ),
    ),
    (
        "SetRotation__Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume::SetRotation(void)",
        ),
    ),
    (
        "__Q23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver::ImpulseBasedCollisionSolver(void)",
        ),
    ),
    (
        "_$_Q23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver::~ImpulseBasedCollisionSolver(void)",
        ),
    ),
    (
        "UpdateForSimEnvironment__Q23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver::UpdateForSimEnvironment(void)",
        ),
    ),
    (
        "SetCollisionSolverAgent__Q23sim27ImpulseBasedCollisionSolverPQ23sim20CollisionSolverAgent",
        Ok(
            "sim::ImpulseBasedCollisionSolver::SetCollisionSolverAgent(sim::CollisionSolverAgent *)",
        ),
    ),
    (
        "SolveCollisions__Q23sim27ImpulseBasedCollisionSolverPQ23simt6TArray1ZQ23sim9Collisionff",
        Ok(
            "sim::ImpulseBasedCollisionSolver::SolveCollisions(sim::TArray<sim::Collision> *, float, float)",
        ),
    ),
    (
        "ExtractVelocities__Q23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver::ExtractVelocities(void)",
        ),
    ),
    (
        "SolveCollisionImpulse__Q23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver::SolveCollisionImpulse(void)",
        ),
    ),
    (
        "StartObj__Q23sim27ImpulseBasedCollisionSolverPQ23sim15SimulatedObjectT1RCQ218RadicalMathLibrary6VectorRQ23sim9SymMatrixii",
        Ok(
            "sim::ImpulseBasedCollisionSolver::StartObj(sim::SimulatedObject *, sim::SimulatedObject *, RadicalMathLibrary::Vector const &, sim::SymMatrix &, int, int)",
        ),
    ),
    (
        "AddImpulse__Q23sim27ImpulseBasedCollisionSolverPQ23sim15SimulatedObjectT1RCQ218RadicalMathLibrary6VectorRQ23sim9SymMatrixii",
        Ok(
            "sim::ImpulseBasedCollisionSolver::AddImpulse(sim::SimulatedObject *, sim::SimulatedObject *, RadicalMathLibrary::Vector const &, sim::SymMatrix &, int, int)",
        ),
    ),
    (
        "EndObj__Q23sim27ImpulseBasedCollisionSolverPQ23sim15SimulatedObjectiib",
        Ok(
            "sim::ImpulseBasedCollisionSolver::EndObj(sim::SimulatedObject *, int, int, bool)",
        ),
    ),
    (
        "ComputeImpulse__Q23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver::ComputeImpulse(void)",
        ),
    ),
    (
        "RestCoeff__Q23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver::RestCoeff(void)",
        ),
    ),
    (
        "FrictCoeff__Q23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver::FrictCoeff(void)",
        ),
    ),
    (
        "TangRestCoeff__Q23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver::TangRestCoeff(void)",
        ),
    ),
    (
        "PositionCorrectionForInterpenetration__Q23sim27ImpulseBasedCollisionSolverRf",
        Ok(
            "sim::ImpulseBasedCollisionSolver::PositionCorrectionForInterpenetration(float &)",
        ),
    ),
    (
        "__Q23sim20CollisionSolverAgent",
        Ok(
            "sim::CollisionSolverAgent::CollisionSolverAgent(void)",
        ),
    ),
    (
        "_$_Q23sim20CollisionSolverAgent",
        Ok(
            "sim::CollisionSolverAgent::~CollisionSolverAgent(void)",
        ),
    ),
    (
        "StartSolvingCollisionList__Q23sim20CollisionSolverAgentPQ23simt6TArray1ZQ23sim9Collisionf",
        Ok(
            "sim::CollisionSolverAgent::StartSolvingCollisionList(sim::TArray<sim::Collision> *, float)",
        ),
    ),
    (
        "EndSolvingCollisionList__Q23sim20CollisionSolverAgentPQ23simt6TArray1ZQ23sim9Collisionf",
        Ok(
            "sim::CollisionSolverAgent::EndSolvingCollisionList(sim::TArray<sim::Collision> *, float)",
        ),
    ),
    (
        "PreCollisionEvent__Q23sim20CollisionSolverAgentRQ23sim9Collisioni",
        Ok(
            "sim::CollisionSolverAgent::PreCollisionEvent(sim::Collision &, int)",
        ),
    ),
    (
        "CollisionEvent__Q23sim20CollisionSolverAgentPQ23sim8SimStateiT1iRCQ218RadicalMathLibrary6VectorffPPQ23sim15SimulatedObjectT8",
        Ok(
            "sim::CollisionSolverAgent::CollisionEvent(sim::SimState *, int, sim::SimState *, int, RadicalMathLibrary::Vector const &, float, float, sim::SimulatedObject **, sim::SimulatedObject **)",
        ),
    ),
    (
        "TestImpulse__Q23sim20CollisionSolverAgentRQ218RadicalMathLibrary6VectorRQ23sim9Collision",
        Ok(
            "sim::CollisionSolverAgent::TestImpulse(RadicalMathLibrary::Vector &, sim::Collision &)",
        ),
    ),
    (
        "TestCache__Q23sim20CollisionSolverAgentPQ23sim8SimStatei",
        Ok(
            "sim::CollisionSolverAgent::TestCache(sim::SimState *, int)",
        ),
    ),
    (
        "EndObjectCollision__Q23sim20CollisionSolverAgentPQ23sim8SimStatei",
        Ok(
            "sim::CollisionSolverAgent::EndObjectCollision(sim::SimState *, int)",
        ),
    ),
    (
        "DisableCollisionAnalyser__Q23sim20CollisionSolverAgent",
        Ok(
            "sim::CollisionSolverAgent::DisableCollisionAnalyser(void)",
        ),
    ),
    (
        "__tfQ23sim20CollisionSolverAgent",
        Ok(
            "sim::CollisionSolverAgent type_info function",
        ),
    ),
    (
        "__tfQ23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver type_info function",
        ),
    ),
    (
        "RayIntersectSphere__3simRCQ218RadicalMathLibrary6VectorT1ffRf",
        Ok(
            "sim::RayIntersectSphere(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, float &)",
        ),
    ),
    (
        "RayIntersectBBox__3simRCQ218RadicalMathLibrary6VectorN31Rf",
        Ok(
            "sim::RayIntersectBBox(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float &)",
        ),
    ),
    (
        "RayIntersectCylinder__3simRCQ218RadicalMathLibrary6VectorN21ffRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::RayIntersectCylinder(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "RayIntersectOBBox__3simRCQ218RadicalMathLibrary6VectorN21fPQ23sim11OBBoxVolumeRf",
        Ok(
            "sim::RayIntersectOBBox(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, sim::OBBoxVolume *, float &)",
        ),
    ),
    (
        "RayIntersectVolume__3simRCQ218RadicalMathLibrary6VectorN21fRQ23sim19RayIntersectionInfo",
        Ok(
            "sim::RayIntersectVolume(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, sim::RayIntersectionInfo &)",
        ),
    ),
    (
        "TestPointInVolume__3simRCQ218RadicalMathLibrary6VectorPQ23sim15CollisionVolume",
        Ok(
            "sim::TestPointInVolume(RadicalMathLibrary::Vector const &, sim::CollisionVolume *)",
        ),
    ),
    (
        "FindClosestPointOnVolume__3simRCQ218RadicalMathLibrary6VectorPQ23sim15CollisionVolumeRQ218RadicalMathLibrary6VectorRf",
        Ok(
            "sim::FindClosestPointOnVolume(RadicalMathLibrary::Vector const &, sim::CollisionVolume *, RadicalMathLibrary::Vector &, float &)",
        ),
    ),
    (
        "Add__Q23sim19RayIntersectionInfoRQ23simt6TArray1ZQ23sim19RayIntersectionInfoRQ23sim19RayIntersectionInfoRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6VectorRf",
        Ok(
            "sim::RayIntersectionInfo::Add(sim::TArray<sim::RayIntersectionInfo> &, sim::RayIntersectionInfo &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, float &)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1ZQ23sim19RayIntersectionInfoi",
        Ok(
            "sim::TArray<sim::RayIntersectionInfo>::ResizeArray(int)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1ZQ23sim19RayIntersectionInfo",
        Ok(
            "sim::TArray<sim::RayIntersectionInfo>::Grow(void)",
        ),
    ),
    (
        "NewElem__Q23simt6TArray1ZQ23sim19RayIntersectionInfo",
        Ok(
            "sim::TArray<sim::RayIntersectionInfo>::NewElem(void)",
        ),
    ),
    (
        "InsertAt__Q23simt6TArray1ZQ23sim19RayIntersectionInfoiRCQ23sim19RayIntersectionInfo",
        Ok(
            "sim::TArray<sim::RayIntersectionInfo>::InsertAt(int, sim::RayIntersectionInfo const &)",
        ),
    ),
    (
        "dStartStreamLine__3simv",
        Ok(
            "sim::dStartStreamLine(void)",
        ),
    ),
    (
        "dStreamLine__3simRCQ218RadicalMathLibrary6VectorT1RC10pddiColourT3",
        Ok(
            "sim::dStreamLine(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, pddiColour const &, pddiColour const &)",
        ),
    ),
    (
        "dEndStreamLine__3simv",
        Ok(
            "sim::dEndStreamLine(void)",
        ),
    ),
    (
        "dLine2__3simRCQ218RadicalMathLibrary6VectorT1RC10pddiColourT3",
        Ok(
            "sim::dLine2(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, pddiColour const &, pddiColour const &)",
        ),
    ),
    (
        "dBox3__3simRCQ218RadicalMathLibrary6VectorT1RC10pddiColour",
        Ok(
            "sim::dBox3(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, pddiColour const &)",
        ),
    ),
    (
        "dLine3__3simRCQ218RadicalMathLibrary6VectorfRC10pddiColour",
        Ok(
            "sim::dLine3(RadicalMathLibrary::Vector const &, float, pddiColour const &)",
        ),
    ),
    (
        "__Q23sim8LineElem",
        Ok(
            "sim::LineElem::LineElem(void)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1ZQ23sim8LineElemi",
        Ok(
            "sim::TArray<sim::LineElem>::ResizeArray(int)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1ZQ23sim8LineElem",
        Ok(
            "sim::TArray<sim::LineElem>::Grow(void)",
        ),
    ),
    (
        "NewElem__Q23simt6TArray1ZQ23sim8LineElem",
        Ok(
            "sim::TArray<sim::LineElem>::NewElem(void)",
        ),
    ),
    (
        "__Q23sim17PhysicsProperties",
        Ok(
            "sim::PhysicsProperties::PhysicsProperties(void)",
        ),
    ),
    (
        "_$_Q23sim17PhysicsProperties",
        Ok(
            "sim::PhysicsProperties::~PhysicsProperties(void)",
        ),
    ),
    (
        "Update__Q23sim17PhysicsProperties",
        Ok(
            "sim::PhysicsProperties::Update(void)",
        ),
    ),
    (
        "SetFrictCoeffCGS__Q23sim17PhysicsPropertiesf",
        Ok(
            "sim::PhysicsProperties::SetFrictCoeffCGS(float)",
        ),
    ),
    (
        "SetRestCoeffCGS__Q23sim17PhysicsPropertiesf",
        Ok(
            "sim::PhysicsProperties::SetRestCoeffCGS(float)",
        ),
    ),
    (
        "SetTangRestCoeffCGS__Q23sim17PhysicsPropertiesf",
        Ok(
            "sim::PhysicsProperties::SetTangRestCoeffCGS(float)",
        ),
    ),
    (
        "SetDensityCGS__Q23sim17PhysicsPropertiesf",
        Ok(
            "sim::PhysicsProperties::SetDensityCGS(float)",
        ),
    ),
    (
        "GetPhysicsProperties__Q23sim17PhysicsPropertiesP12tEntityStorePcffff",
        Ok(
            "sim::PhysicsProperties::GetPhysicsProperties(tEntityStore *, char *, float, float, float, float)",
        ),
    ),
    (
        "DefaultPhysicsProperties__Q23sim17PhysicsPropertiesP12tEntityStore",
        Ok(
            "sim::PhysicsProperties::DefaultPhysicsProperties(tEntityStore *)",
        ),
    ),
    (
        "DefaultArtPhysicsProperties__Q23sim17PhysicsPropertiesP12tEntityStore",
        Ok(
            "sim::PhysicsProperties::DefaultArtPhysicsProperties(tEntityStore *)",
        ),
    ),
    (
        "HardWoodProperties__Q23sim17PhysicsPropertiesP12tEntityStore",
        Ok(
            "sim::PhysicsProperties::HardWoodProperties(tEntityStore *)",
        ),
    ),
    (
        "CombinedRestCoeff__Q23sim17PhysicsPropertiesPCQ23sim17PhysicsPropertiesT1",
        Ok(
            "sim::PhysicsProperties::CombinedRestCoeff(sim::PhysicsProperties const *, sim::PhysicsProperties const *)",
        ),
    ),
    (
        "CombinedTangRestCoeff__Q23sim17PhysicsPropertiesPCQ23sim17PhysicsPropertiesT1",
        Ok(
            "sim::PhysicsProperties::CombinedTangRestCoeff(sim::PhysicsProperties const *, sim::PhysicsProperties const *)",
        ),
    ),
    (
        "CombinedFrictCoeff__Q23sim17PhysicsPropertiesPCQ23sim17PhysicsPropertiesT1",
        Ok(
            "sim::PhysicsProperties::CombinedFrictCoeff(sim::PhysicsProperties const *, sim::PhysicsProperties const *)",
        ),
    ),
    (
        "__tfQ23sim17PhysicsProperties",
        Ok(
            "sim::PhysicsProperties type_info function",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ23sim17PhysicsProperties",
        Ok(
            "radLoadInventory::SafeCast<sim::PhysicsProperties>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ23sim17PhysicsProperties",
        Ok(
            "radLoadInventory::SafeCast<sim::PhysicsProperties> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ23sim17PhysicsPropertiesP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<sim::PhysicsProperties>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "Initialize__Q23sim8SimUnits",
        Ok(
            "sim::SimUnits::Initialize(void)",
        ),
    ),
    (
        "Reset__Q23sim8SimUnits",
        Ok(
            "sim::SimUnits::Reset(void)",
        ),
    ),
    (
        "__Q23sim8SimUnits",
        Ok(
            "sim::SimUnits::SimUnits(void)",
        ),
    ),
    (
        "_$_Q23sim8SimUnits",
        Ok(
            "sim::SimUnits::~SimUnits(void)",
        ),
    ),
    (
        "SetCollisionDistanceCGS__Q23sim14SimEnvironmentf",
        Ok(
            "sim::SimEnvironment::SetCollisionDistanceCGS(float)",
        ),
    ),
    (
        "GetDefaultSimEnvironment__Q23sim14SimEnvironment",
        Ok(
            "sim::SimEnvironment::GetDefaultSimEnvironment(void)",
        ),
    ),
    (
        "__Q23sim14SimEnvironment",
        Ok(
            "sim::SimEnvironment::SimEnvironment(void)",
        ),
    ),
    (
        "_$_Q23sim14SimEnvironment",
        Ok(
            "sim::SimEnvironment::~SimEnvironment(void)",
        ),
    ),
    (
        "UpdateUnits__Q23sim14SimEnvironment",
        Ok(
            "sim::SimEnvironment::UpdateUnits(void)",
        ),
    ),
    (
        "SetGravityCGS__Q23sim14SimEnvironmentfff",
        Ok(
            "sim::SimEnvironment::SetGravityCGS(float, float, float)",
        ),
    ),
    (
        "SetValueCGS__Q23sim8SimSpeedf",
        Ok(
            "sim::SimSpeed::SetValueCGS(float)",
        ),
    ),
    (
        "__Q23sim9SimLengthf",
        Ok(
            "sim::SimLength::SimLength(float)",
        ),
    ),
    (
        "SetValueCGS__Q23sim9SimLengthf",
        Ok(
            "sim::SimLength::SetValueCGS(float)",
        ),
    ),
    (
        "__Q23sim7SimTimef",
        Ok(
            "sim::SimTime::SimTime(float)",
        ),
    ),
    (
        "SetValueCGS__Q23sim7SimTimef",
        Ok(
            "sim::SimTime::SetValueCGS(float)",
        ),
    ),
    (
        "__tfQ23sim8SimUnits",
        Ok(
            "sim::SimUnits type_info function",
        ),
    ),
    (
        "__tfQ23sim14SimEnvironment",
        Ok(
            "sim::SimEnvironment type_info function",
        ),
    ),
    (
        "_$_Q23sim7SimTime",
        Ok(
            "sim::SimTime::~SimTime(void)",
        ),
    ),
    (
        "__tfQ23sim7SimTime",
        Ok(
            "sim::SimTime type_info function",
        ),
    ),
    (
        "_$_Q23sim9SimLength",
        Ok(
            "sim::SimLength::~SimLength(void)",
        ),
    ),
    (
        "__tfQ23sim9SimLength",
        Ok(
            "sim::SimLength type_info function",
        ),
    ),
    (
        "__tfQ23sim8SimSpeed",
        Ok(
            "sim::SimSpeed type_info function",
        ),
    ),
    (
        "_$_Q23simt5TList1ZPQ23sim8SimUnits",
        Ok(
            "sim::TList<sim::SimUnits *>::~TList(void)",
        ),
    ),
    (
        "__tfQ23simt5TList1ZPQ23sim8SimUnits",
        Ok(
            "sim::TList<sim::SimUnits *> type_info function",
        ),
    ),
    (
        "UpdateUnits__Q23sim8SimUnits",
        Ok(
            "sim::SimUnits::UpdateUnits(void)",
        ),
    ),
    (
        "ValueCGS__CQ23sim11SimCGSValue",
        Ok(
            "sim::SimCGSValue::ValueCGS(void) const",
        ),
    ),
    (
        "Value__CQ23sim11SimCGSValue",
        Ok(
            "sim::SimCGSValue::Value(void) const",
        ),
    ),
    (
        "_$_Q23sim8SimSpeed",
        Ok(
            "sim::SimSpeed::~SimSpeed(void)",
        ),
    ),
    (
        "__tfQ23sim11SimCGSValue",
        Ok(
            "sim::SimCGSValue type_info function",
        ),
    ),
    (
        "_$_Q23sim11SimCGSValue",
        Ok(
            "sim::SimCGSValue::~SimCGSValue(void)",
        ),
    ),
    (
        "SubUpdateRotMatrix__3simRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Matrix",
        Ok(
            "sim::SubUpdateRotMatrix(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix &)",
        ),
    ),
    (
        "UpdateRotMatrixSafe__3simRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Matrixf",
        Ok(
            "sim::UpdateRotMatrixSafe(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix &, float)",
        ),
    ),
    (
        "WFromRotMatrix__3simRQ218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6MatrixT2f",
        Ok(
            "sim::WFromRotMatrix(RadicalMathLibrary::Vector &, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
        ),
    ),
    (
        "ScaleRotMatrix__3simfRCQ218RadicalMathLibrary6MatrixRQ218RadicalMathLibrary6Matrix",
        Ok(
            "sim::ScaleRotMatrix(float, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix &)",
        ),
    ),
    (
        "WDtToQuat__3simRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "sim::WDtToQuat(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Quaternion &)",
        ),
    ),
    (
        "AngleToQuat__3simfRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary10Quaternion",
        Ok(
            "sim::AngleToQuat(float, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Quaternion &)",
        ),
    ),
    (
        "GetIndexOfMaxVectorComponent__3simRCQ218RadicalMathLibrary6Vectorb",
        Ok(
            "sim::GetIndexOfMaxVectorComponent(RadicalMathLibrary::Vector const &, bool)",
        ),
    ),
    (
        "ComputePointMassInertia__3simRQ23sim9SymMatrixRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::ComputePointMassInertia(sim::SymMatrix &, RadicalMathLibrary::Vector &, float)",
        ),
    ),
    (
        "SameMatrix__3simRCQ218RadicalMathLibrary6MatrixT1f",
        Ok(
            "sim::SameMatrix(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
        ),
    ),
    (
        "SameTranslation__3simRCQ218RadicalMathLibrary6MatrixT1f",
        Ok(
            "sim::SameTranslation(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
        ),
    ),
    (
        "SameRotation__3simRCQ218RadicalMathLibrary6MatrixT1f",
        Ok(
            "sim::SameRotation(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
        ),
    ),
    (
        "BuildRotationFromTo__3simRCQ218RadicalMathLibrary6VectorT1RQ218RadicalMathLibrary10QuaternionRbff",
        Ok(
            "sim::BuildRotationFromTo(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Quaternion &, bool &, float, float)",
        ),
    ),
    (
        "CopyRotation__3simRCQ218RadicalMathLibrary6MatrixRQ218RadicalMathLibrary6Matrix",
        Ok(
            "sim::CopyRotation(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix &)",
        ),
    ),
    (
        "AxisAngle__3simRCQ218RadicalMathLibrary6VectorT1RQ218RadicalMathLibrary6VectorRf",
        Ok(
            "sim::AxisAngle(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, float &)",
        ),
    ),
    (
        "CreateSimState__Q23sim8SimStateG13tUidUnalignedUiP12tEntityStore",
        Ok(
            "sim::SimState::CreateSimState(tUidUnaligned, unsigned int, tEntityStore *)",
        ),
    ),
    (
        "CreateSimState__Q23sim8SimStatePQ23sim8SimStatePCc",
        Ok(
            "sim::SimState::CreateSimState(sim::SimState *, char const *)",
        ),
    ),
    (
        "CreateStaticSimState__Q23sim8SimStatePQ23sim15CollisionObject",
        Ok(
            "sim::SimState::CreateStaticSimState(sim::CollisionObject *)",
        ),
    ),
    (
        "CreateSimState__Q23sim8SimStatePQ23sim15CollisionObjectPQ23sim15SimulatedObject",
        Ok(
            "sim::SimState::CreateSimState(sim::CollisionObject *, sim::SimulatedObject *)",
        ),
    ),
    (
        "CreateManualSimState__Q23sim8SimStatePQ23sim15CollisionVolumePCc",
        Ok(
            "sim::SimState::CreateManualSimState(sim::CollisionVolume *, char const *)",
        ),
    ),
    (
        "ExtractVelocityFromMatrix__3simRCQ218RadicalMathLibrary6MatrixT1ffRQ23sim16SimVelocityState",
        Ok(
            "sim::ExtractVelocityFromMatrix(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float, float, sim::SimVelocityState &)",
        ),
    ),
    (
        "__Q23sim8SimStateQ23sim14SimControlEnum",
        Ok(
            "sim::SimState::SimState(sim::SimControlEnum)",
        ),
    ),
    (
        "_$_Q23sim8SimState",
        Ok(
            "sim::SimState::~SimState(void)",
        ),
    ),
    (
        "SetControl__Q23sim8SimStateQ23sim14SimControlEnum",
        Ok(
            "sim::SimState::SetControl(sim::SimControlEnum)",
        ),
    ),
    (
        "InitAllVirtualCM__Q23sim8SimState",
        Ok(
            "sim::SimState::InitAllVirtualCM(void)",
        ),
    ),
    (
        "SetHasMoved__Q23sim8SimStateb",
        Ok(
            "sim::SimState::SetHasMoved(bool)",
        ),
    ),
    (
        "SetSimulatedObject__Q23sim8SimStatePQ23sim15SimulatedObject",
        Ok(
            "sim::SimState::SetSimulatedObject(sim::SimulatedObject *)",
        ),
    ),
    (
        "SetCollisionObject__Q23sim8SimStatePQ23sim15CollisionObject",
        Ok(
            "sim::SimState::SetCollisionObject(sim::CollisionObject *)",
        ),
    ),
    (
        "GetSphereRadius__CQ23sim8SimState",
        Ok(
            "sim::SimState::GetSphereRadius(void) const",
        ),
    ),
    (
        "SetPhysicsProperties__Q23sim8SimStatePQ23sim17PhysicsProperties",
        Ok(
            "sim::SimState::SetPhysicsProperties(sim::PhysicsProperties *)",
        ),
    ),
    (
        "SyncSimObj__Q23sim8SimState",
        Ok(
            "sim::SimState::SyncSimObj(void)",
        ),
    ),
    (
        "GetVelocity__Q23sim8SimStateRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vectori",
        Ok(
            "sim::SimState::GetVelocity(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, int)",
        ),
    ),
    (
        "AddVirtualCM__Q23sim8SimStateiUi",
        Ok(
            "sim::SimState::AddVirtualCM(int, unsigned int)",
        ),
    ),
    (
        "InitVirtualCM__Q23sim8SimStatei",
        Ok(
            "sim::SimState::InitVirtualCM(int)",
        ),
    ),
    (
        "AddCacheToVirtualCM__Q23sim8SimStateRCQ218RadicalMathLibrary6VectorT1i",
        Ok(
            "sim::SimState::AddCacheToVirtualCM(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, int)",
        ),
    ),
    (
        "SetTransform__Q23sim8SimStateRCQ218RadicalMathLibrary6Matrixf",
        Ok(
            "sim::SimState::SetTransform(RadicalMathLibrary::Matrix const &, float)",
        ),
    ),
    (
        "MoveCollisionObject__Q23sim8SimStateRCQ218RadicalMathLibrary6MatrixT1",
        Ok(
            "sim::SimState::MoveCollisionObject(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "DynamicPositionAdjustment__Q23sim8SimStateRCQ218RadicalMathLibrary6Vectorfb",
        Ok(
            "sim::SimState::DynamicPositionAdjustment(RadicalMathLibrary::Vector const &, float, bool)",
        ),
    ),
    (
        "DebugDisplay__Q23sim8SimStatei",
        Ok(
            "sim::SimState::DebugDisplay(int)",
        ),
    ),
    (
        "__tfQ23sim8SimState",
        Ok(
            "sim::SimState type_info function",
        ),
    ),
    (
        "GetVirtualCM__Q23sim8SimStatei",
        Ok(
            "sim::SimState::GetVirtualCM(int)",
        ),
    ),
    (
        "GetTransform__CQ23sim8SimStatei",
        Ok(
            "sim::SimState::GetTransform(int) const",
        ),
    ),
    (
        "GetPosition__CQ23sim8SimStatei",
        Ok(
            "sim::SimState::GetPosition(int) const",
        ),
    ),
    (
        "ResetVelocities__Q23sim8SimState",
        Ok(
            "sim::SimState::ResetVelocities(void)",
        ),
    ),
    (
        "GetSimulatedObject__Q23sim8SimStatei",
        Ok(
            "sim::SimState::GetSimulatedObject(int)",
        ),
    ),
    (
        "RequiresPushTransforForDisplay__CQ23sim8SimState",
        Ok(
            "sim::SimState::RequiresPushTransforForDisplay(void) const",
        ),
    ),
    (
        "__Q23sim14ManualSimState",
        Ok(
            "sim::ManualSimState::ManualSimState(void)",
        ),
    ),
    (
        "_$_Q23sim14ManualSimState",
        Ok(
            "sim::ManualSimState::~ManualSimState(void)",
        ),
    ),
    (
        "__tfQ23sim14ManualSimState",
        Ok(
            "sim::ManualSimState type_info function",
        ),
    ),
    (
        "GetTransform__CQ23sim14ManualSimStatei",
        Ok(
            "sim::ManualSimState::GetTransform(int) const",
        ),
    ),
    (
        "GetPosition__CQ23sim14ManualSimStatei",
        Ok(
            "sim::ManualSimState::GetPosition(int) const",
        ),
    ),
    (
        "SetTransform__Q23sim14ManualSimStateRCQ218RadicalMathLibrary6Matrixf",
        Ok(
            "sim::ManualSimState::SetTransform(RadicalMathLibrary::Matrix const &, float)",
        ),
    ),
    (
        "_GLOBAL_$I$_Q23sim8SimState$sApproxSpeedMagnitudeFactor",
        Ok(
            "global constructors keyed to sim::SimState::sApproxSpeedMagnitudeFactor",
        ),
    ),
    (
        "CreateSimStateArticulated__Q23sim19SimStateArticulatedG13tUidUnalignedPQ25poser4PoseUiP12tEntityStore",
        Ok(
            "sim::SimStateArticulated::CreateSimStateArticulated(tUidUnaligned, poser::Pose *, unsigned int, tEntityStore *)",
        ),
    ),
    (
        "CreateSimStateArticulated__Q23sim19SimStateArticulatedPCcPQ25poser4PoseUiP12tEntityStore",
        Ok(
            "sim::SimStateArticulated::CreateSimStateArticulated(char const *, poser::Pose *, unsigned int, tEntityStore *)",
        ),
    ),
    (
        "CreateSimStateArticulated__Q23sim19SimStateArticulatedPQ25poser4PosePQ23sim15CollisionObjectPQ23sim15SimulatedObject",
        Ok(
            "sim::SimStateArticulated::CreateSimStateArticulated(poser::Pose *, sim::CollisionObject *, sim::SimulatedObject *)",
        ),
    ),
    (
        "__Q23sim19SimStateArticulatedPQ25poser4PoseQ23sim14SimControlEnum",
        Ok(
            "sim::SimStateArticulated::SimStateArticulated(poser::Pose *, sim::SimControlEnum)",
        ),
    ),
    (
        "_$_Q23sim19SimStateArticulated",
        Ok(
            "sim::SimStateArticulated::~SimStateArticulated(void)",
        ),
    ),
    (
        "SetCollisionObject__Q23sim19SimStateArticulatedPQ23sim15CollisionObject",
        Ok(
            "sim::SimStateArticulated::SetCollisionObject(sim::CollisionObject *)",
        ),
    ),
    (
        "SetPose__Q23sim19SimStateArticulatedPQ25poser4Pose",
        Ok(
            "sim::SimStateArticulated::SetPose(poser::Pose *)",
        ),
    ),
    (
        "SetTransform__Q23sim19SimStateArticulatedRCQ218RadicalMathLibrary6Matrixf",
        Ok(
            "sim::SimStateArticulated::SetTransform(RadicalMathLibrary::Matrix const &, float)",
        ),
    ),
    (
        "UpdateJointState__Q23sim19SimStateArticulatedf",
        Ok(
            "sim::SimStateArticulated::UpdateJointState(float)",
        ),
    ),
    (
        "ConvertToRigidBody__Q23sim19SimStateArticulated",
        Ok(
            "sim::SimStateArticulated::ConvertToRigidBody(void)",
        ),
    ),
    (
        "AddVirtualCM__Q23sim19SimStateArticulatediUi",
        Ok(
            "sim::SimStateArticulated::AddVirtualCM(int, unsigned int)",
        ),
    ),
    (
        "InitVirtualCM__Q23sim19SimStateArticulatedi",
        Ok(
            "sim::SimStateArticulated::InitVirtualCM(int)",
        ),
    ),
    (
        "ReleasePose__Q23sim19SimStateArticulated",
        Ok(
            "sim::SimStateArticulated::ReleasePose(void)",
        ),
    ),
    (
        "InitAllVirtualCM__Q23sim19SimStateArticulated",
        Ok(
            "sim::SimStateArticulated::InitAllVirtualCM(void)",
        ),
    ),
    (
        "GetVirtualCM__Q23sim19SimStateArticulatedi",
        Ok(
            "sim::SimStateArticulated::GetVirtualCM(int)",
        ),
    ),
    (
        "AddCacheToVirtualCM__Q23sim19SimStateArticulatedRCQ218RadicalMathLibrary6VectorT1i",
        Ok(
            "sim::SimStateArticulated::AddCacheToVirtualCM(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, int)",
        ),
    ),
    (
        "StoreJointState__Q23sim19SimStateArticulatedf",
        Ok(
            "sim::SimStateArticulated::StoreJointState(float)",
        ),
    ),
    (
        "ResetVelocities__Q23sim19SimStateArticulated",
        Ok(
            "sim::SimStateArticulated::ResetVelocities(void)",
        ),
    ),
    (
        "UpdateHasMoved__Q23sim19SimStateArticulated",
        Ok(
            "sim::SimStateArticulated::UpdateHasMoved(void)",
        ),
    ),
    (
        "GetTransform__CQ23sim19SimStateArticulatedi",
        Ok(
            "sim::SimStateArticulated::GetTransform(int) const",
        ),
    ),
    (
        "GetPosition__CQ23sim19SimStateArticulatedi",
        Ok(
            "sim::SimStateArticulated::GetPosition(int) const",
        ),
    ),
    (
        "GetVelocity__Q23sim19SimStateArticulatedRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vectori",
        Ok(
            "sim::SimStateArticulated::GetVelocity(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, int)",
        ),
    ),
    (
        "GetSimulatedObject__Q23sim19SimStateArticulatedi",
        Ok(
            "sim::SimStateArticulated::GetSimulatedObject(int)",
        ),
    ),
    (
        "DebugDisplay__Q23sim19SimStateArticulatedi",
        Ok(
            "sim::SimStateArticulated::DebugDisplay(int)",
        ),
    ),
    (
        "__Q33sim19SimStateArticulated10JointState",
        Ok(
            "sim::SimStateArticulated::JointState::JointState(void)",
        ),
    ),
    (
        "_$_Q33sim19SimStateArticulated10JointState",
        Ok(
            "sim::SimStateArticulated::JointState::~JointState(void)",
        ),
    ),
    (
        "SetJoint__Q33sim19SimStateArticulated10JointStatePQ25poser5Joint",
        Ok(
            "sim::SimStateArticulated::JointState::SetJoint(poser::Joint *)",
        ),
    ),
    (
        "DebugDisplay__Q33sim19SimStateArticulated10JointState",
        Ok(
            "sim::SimStateArticulated::JointState::DebugDisplay(void)",
        ),
    ),
    (
        "StoreJointState__Q33sim19SimStateArticulated10JointStatef",
        Ok(
            "sim::SimStateArticulated::JointState::StoreJointState(float)",
        ),
    ),
    (
        "GetVelocity__Q33sim19SimStateArticulated10JointStateRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::SimStateArticulated::JointState::GetVelocity(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "UpdateVelocity__Q33sim19SimStateArticulated10JointState",
        Ok(
            "sim::SimStateArticulated::JointState::UpdateVelocity(void)",
        ),
    ),
    (
        "__tfQ23simt5TList1ZPQ23sim14JointVirtualCM",
        Ok(
            "sim::TList<sim::JointVirtualCM *> type_info function",
        ),
    ),
    (
        "__tfQ23sim19SimStateArticulated",
        Ok(
            "sim::SimStateArticulated type_info function",
        ),
    ),
    (
        "_$_Q23simt5TList1ZPQ23sim14JointVirtualCM",
        Ok(
            "sim::TList<sim::JointVirtualCM *>::~TList(void)",
        ),
    ),
    (
        "RequiresPushTransforForDisplay__CQ23sim19SimStateArticulated",
        Ok(
            "sim::SimStateArticulated::RequiresPushTransforForDisplay(void) const",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ23sim24ArticulatedPhysicsObject",
        Ok(
            "radLoadInventory::SafeCast<sim::ArticulatedPhysicsObject>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1ZQ23sim12SkeletonInfo",
        Ok(
            "radLoadInventory::SafeCast<sim::SkeletonInfo>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ23sim12SkeletonInfo",
        Ok(
            "sim::SkeletonInfo type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ23sim24ArticulatedPhysicsObject",
        Ok(
            "radLoadInventory::SafeCast<sim::ArticulatedPhysicsObject> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1ZQ23sim12SkeletonInfo",
        Ok(
            "radLoadInventory::SafeCast<sim::SkeletonInfo> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ23sim12SkeletonInfoP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<sim::SkeletonInfo>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1ZQ23sim24ArticulatedPhysicsObjectP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<sim::ArticulatedPhysicsObject>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "GetTransform__CQ23sim9SimTargetRQ218RadicalMathLibrary6Matrixf",
        Ok(
            "sim::SimTarget::GetTransform(RadicalMathLibrary::Matrix &, float) const",
        ),
    ),
    (
        "GetTransform__CQ23sim15SimMatrixTargetRQ218RadicalMathLibrary6Matrixf",
        Ok(
            "sim::SimMatrixTarget::GetTransform(RadicalMathLibrary::Matrix &, float) const",
        ),
    ),
    (
        "GetPos__CQ23sim15SimJntMatTargetRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::SimJntMatTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
        ),
    ),
    (
        "GetTransform__CQ23sim15SimJntMatTargetRQ218RadicalMathLibrary6Matrixf",
        Ok(
            "sim::SimJntMatTarget::GetTransform(RadicalMathLibrary::Matrix &, float) const",
        ),
    ),
    (
        "__tfQ23sim9SimTarget",
        Ok(
            "sim::SimTarget type_info function",
        ),
    ),
    (
        "__tfQ23sim15SimVectorTarget",
        Ok(
            "sim::SimVectorTarget type_info function",
        ),
    ),
    (
        "__tfQ23sim15SimMatrixTarget",
        Ok(
            "sim::SimMatrixTarget type_info function",
        ),
    ),
    (
        "__tfQ23sim15SimJntMatTarget",
        Ok(
            "sim::SimJntMatTarget type_info function",
        ),
    ),
    (
        "GetPos__CQ23sim9SimTargetRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::SimTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
        ),
    ),
    (
        "GetMassMatrix__CQ23sim9SimTargetRQ23sim9SymMatrix",
        Ok(
            "sim::SimTarget::GetMassMatrix(sim::SymMatrix &) const",
        ),
    ),
    (
        "GetMass__CQ23sim9SimTarget",
        Ok(
            "sim::SimTarget::GetMass(void) const",
        ),
    ),
    (
        "GetSpeed__CQ23sim9SimTargetRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::SimTarget::GetSpeed(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "_$_Q23sim9SimTarget",
        Ok(
            "sim::SimTarget::~SimTarget(void)",
        ),
    ),
    (
        "GetPos__CQ23sim15SimVectorTargetRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::SimVectorTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
        ),
    ),
    (
        "_$_Q23sim15SimVectorTarget",
        Ok(
            "sim::SimVectorTarget::~SimVectorTarget(void)",
        ),
    ),
    (
        "GetPos__CQ23sim15SimMatrixTargetRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::SimMatrixTarget::GetPos(RadicalMathLibrary::Vector &, float) const",
        ),
    ),
    (
        "_$_Q23sim15SimMatrixTarget",
        Ok(
            "sim::SimMatrixTarget::~SimMatrixTarget(void)",
        ),
    ),
    (
        "_$_Q23sim15SimJntMatTarget",
        Ok(
            "sim::SimJntMatTarget::~SimJntMatTarget(void)",
        ),
    ),
    (
        "__Q23sim15SimulatedObjectPQ23sim17PhysicsProperties",
        Ok(
            "sim::SimulatedObject::SimulatedObject(sim::PhysicsProperties *)",
        ),
    ),
    (
        "__Q23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject::SimulatedObject(void)",
        ),
    ),
    (
        "_$_Q23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject::~SimulatedObject(void)",
        ),
    ),
    (
        "SetPhysicsProperties__Q23sim15SimulatedObjectPQ23sim17PhysicsProperties",
        Ok(
            "sim::SimulatedObject::SetPhysicsProperties(sim::PhysicsProperties *)",
        ),
    ),
    (
        "SetSimEnvironment__Q23sim15SimulatedObjectPQ23sim14SimEnvironment",
        Ok(
            "sim::SimulatedObject::SetSimEnvironment(sim::SimEnvironment *)",
        ),
    ),
    (
        "ResolveInterpenetration__Q23sim15SimulatedObjectiRfRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6VectorbRCQ23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject::ResolveInterpenetration(int, float &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, bool, sim::SimulatedObject const &)",
        ),
    ),
    (
        "SetClone__Q23sim15SimulatedObjectPQ23sim15SimulatedObjectPQ23sim8SimState",
        Ok(
            "sim::SimulatedObject::SetClone(sim::SimulatedObject *, sim::SimState *)",
        ),
    ),
    (
        "__tfQ23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject type_info function",
        ),
    ),
    (
        "Update__Q23sim15SimulatedObjectf",
        Ok(
            "sim::SimulatedObject::Update(float)",
        ),
    ),
    (
        "UpdateForPhysicsProperties__Q23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject::UpdateForPhysicsProperties(void)",
        ),
    ),
    (
        "UpdateForSimEnvironment__Q23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject::UpdateForSimEnvironment(void)",
        ),
    ),
    (
        "ResetRestingDetector__Q23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject::ResetRestingDetector(void)",
        ),
    ),
    (
        "GetMinimumLinSpeed__Q23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject::GetMinimumLinSpeed(void)",
        ),
    ),
    (
        "GetMinimumAngSpeed__Q23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject::GetMinimumAngSpeed(void)",
        ),
    ),
    (
        "GetNumSubObj__CQ23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject::GetNumSubObj(void) const",
        ),
    ),
    (
        "InvMass__CQ23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject::InvMass(void) const",
        ),
    ),
    (
        "AddSolverConstraint__Q23sim15SimulatedObjectRCQ218RadicalMathLibrary6Vectori",
        Ok(
            "sim::SimulatedObject::AddSolverConstraint(RadicalMathLibrary::Vector const &, int)",
        ),
    ),
    (
        "SpeedAdjustmentFromCache__Q23sim15SimulatedObjectRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vectori",
        Ok(
            "sim::SimulatedObject::SpeedAdjustmentFromCache(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, int)",
        ),
    ),
    (
        "GetCollisionCache__CQ23sim15SimulatedObjectRQ218RadicalMathLibrary6VectorT1i",
        Ok(
            "sim::SimulatedObject::GetCollisionCache(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, int) const",
        ),
    ),
    (
        "IsCacheEmpty__CQ23sim15SimulatedObjecti",
        Ok(
            "sim::SimulatedObject::IsCacheEmpty(int) const",
        ),
    ),
    (
        "ResetCache__Q23sim15SimulatedObjecti",
        Ok(
            "sim::SimulatedObject::ResetCache(int)",
        ),
    ),
    (
        "UpdateConstraintTarget__CQ23sim15SimulatedObjectRCQ23sim11LocalTargetPQ218RadicalMathLibrary6VectorRQ23sim9SimTarget",
        Ok(
            "sim::SimulatedObject::UpdateConstraintTarget(sim::LocalTarget const &, RadicalMathLibrary::Vector *, sim::SimTarget &) const",
        ),
    ),
    (
        "UpdateConstraint__Q23sim15SimulatedObjectRCQ23sim11LocalTargetRCQ23sim9SimTargetPCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::SimulatedObject::UpdateConstraint(sim::LocalTarget const &, sim::SimTarget const &, RadicalMathLibrary::Vector const *, float)",
        ),
    ),
    (
        "AddConstraint__Q23sim15SimulatedObjectRCQ23sim11LocalTarget",
        Ok(
            "sim::SimulatedObject::AddConstraint(sim::LocalTarget const &)",
        ),
    ),
    (
        "SetSimState__Q23sim15SimulatedObjectPQ23sim8SimState",
        Ok(
            "sim::SimulatedObject::SetSimState(sim::SimState *)",
        ),
    ),
    (
        "InstallSimLoaders__3simv",
        Ok(
            "sim::InstallSimLoaders(void)",
        ),
    ),
    (
        "InitializeSimulation__3simQ23sim17GeometryUnitsEnum",
        Ok(
            "sim::InitializeSimulation(sim::GeometryUnitsEnum)",
        ),
    ),
    (
        "ResetSimulation__3simv",
        Ok(
            "sim::ResetSimulation(void)",
        ),
    ),
    (
        "SetupLineDrawing__3simv",
        Ok(
            "sim::SetupLineDrawing(void)",
        ),
    ),
    (
        "CleanupLineDrawing__3simv",
        Ok(
            "sim::CleanupLineDrawing(void)",
        ),
    ),
    (
        "__Q23sim17tExportInfoLoader",
        Ok(
            "sim::tExportInfoLoader::tExportInfoLoader(void)",
        ),
    ),
    (
        "LoadObject__Q23sim17tExportInfoLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "sim::tExportInfoLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tfQ23sim11tExportInfo",
        Ok(
            "sim::tExportInfo type_info function",
        ),
    ),
    (
        "_$_Q23sim17tExportInfoLoader",
        Ok(
            "sim::tExportInfoLoader::~tExportInfoLoader(void)",
        ),
    ),
    (
        "__tfQ23sim17tExportInfoLoader",
        Ok(
            "sim::tExportInfoLoader type_info function",
        ),
    ),
    (
        "_$_Q23sim11tExportInfo",
        Ok(
            "sim::tExportInfo::~tExportInfo(void)",
        ),
    ),
    (
        "_$_Q23sim15SimUnitsManager",
        Ok(
            "sim::SimUnitsManager::~SimUnitsManager(void)",
        ),
    ),
    (
        "__Q23sim15SimUnitsManager",
        Ok(
            "sim::SimUnitsManager::SimUnitsManager(void)",
        ),
    ),
    (
        "__tfQ23sim15SimUnitsManager",
        Ok(
            "sim::SimUnitsManager type_info function",
        ),
    ),
    (
        "UpdateUnits__Q23sim15SimUnitsManager",
        Ok(
            "sim::SimUnitsManager::UpdateUnits(void)",
        ),
    ),
    (
        "__Q23sim12SkeletonInfoP9tSkeleton",
        Ok(
            "sim::SkeletonInfo::SkeletonInfo(tSkeleton *)",
        ),
    ),
    (
        "SetJointAxis__Q23sim12SkeletonInfoiRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::SkeletonInfo::SetJointAxis(int, RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "SetJointRotAxis__Q23sim12SkeletonInfoiRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::SkeletonInfo::SetJointRotAxis(int, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "_$_Q23sim12SkeletonInfo",
        Ok(
            "sim::SkeletonInfo::~SkeletonInfo(void)",
        ),
    ),
    (
        "__Q23sim9SymMatrix",
        Ok(
            "sim::SymMatrix::SymMatrix(void)",
        ),
    ),
    (
        "_$_Q23sim9SymMatrix",
        Ok(
            "sim::SymMatrix::~SymMatrix(void)",
        ),
    ),
    (
        "Add__Q23sim9SymMatrixRCQ23sim9SymMatrix",
        Ok(
            "sim::SymMatrix::Add(sim::SymMatrix const &)",
        ),
    ),
    (
        "Sum__Q23sim9SymMatrixRCQ23sim9SymMatrixT1",
        Ok(
            "sim::SymMatrix::Sum(sim::SymMatrix const &, sim::SymMatrix const &)",
        ),
    ),
    (
        "Scale__Q23sim9SymMatrixf",
        Ok(
            "sim::SymMatrix::Scale(float)",
        ),
    ),
    (
        "Scale__Q23sim9SymMatrixRCQ23sim9SymMatrixf",
        Ok(
            "sim::SymMatrix::Scale(sim::SymMatrix const &, float)",
        ),
    ),
    (
        "TransformSelf__Q23sim9SymMatrixRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "sim::SymMatrix::TransformSelf(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "TransformSelf__Q23sim9SymMatrixRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::SymMatrix::TransformSelf(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "TransformVector__CQ23sim9SymMatrixRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::SymMatrix::TransformVector(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "Invert__Q23sim9SymMatrixRCQ23sim9SymMatrix",
        Ok(
            "sim::SymMatrix::Invert(sim::SymMatrix const &)",
        ),
    ),
    (
        "Identity__Q23sim9SymMatrix",
        Ok(
            "sim::SymMatrix::Identity(void)",
        ),
    ),
    (
        "Zero__Q23sim9SymMatrix",
        Ok(
            "sim::SymMatrix::Zero(void)",
        ),
    ),
    (
        "__tfQ23sim9SymMatrix",
        Ok(
            "sim::SymMatrix type_info function",
        ),
    ),
    (
        "__Q23sim9VoidPListi",
        Ok(
            "sim::VoidPList::VoidPList(int)",
        ),
    ),
    (
        "_$_Q23sim9VoidPList",
        Ok(
            "sim::VoidPList::~VoidPList(void)",
        ),
    ),
    (
        "Remove__Q23sim9VoidPListPv",
        Ok(
            "sim::VoidPList::Remove(void *)",
        ),
    ),
    (
        "Contains__CQ23sim9VoidPListPv",
        Ok(
            "sim::VoidPList::Contains(void *) const",
        ),
    ),
    (
        "Add__Q23sim9VoidPListPv",
        Ok(
            "sim::VoidPList::Add(void *)",
        ),
    ),
    (
        "Grow__Q23sim9VoidPList",
        Ok(
            "sim::VoidPList::Grow(void)",
        ),
    ),
    (
        "ResizeArray__Q23sim9VoidPListi",
        Ok(
            "sim::VoidPList::ResizeArray(int)",
        ),
    ),
    (
        "RemoveAll__Q23sim9VoidPList",
        Ok(
            "sim::VoidPList::RemoveAll(void)",
        ),
    ),
    (
        "RemoveAt__Q23sim9VoidPListi",
        Ok(
            "sim::VoidPList::RemoveAt(int)",
        ),
    ),
    (
        "Set__Q23sim9VoidPListRCQ23sim9VoidPList",
        Ok(
            "sim::VoidPList::Set(sim::VoidPList const &)",
        ),
    ),
    (
        "__tfQ23sim9VoidPList",
        Ok(
            "sim::VoidPList type_info function",
        ),
    ),
    (
        "ResetUnitsRelatedValues__Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::ResetUnitsRelatedValues(void)",
        ),
    ),
    (
        "__Q23sim13PhysicsObjectPQ23sim17PhysicsPropertiesRCQ218RadicalMathLibrary6VectorRCQ23sim9SymMatrixf",
        Ok(
            "sim::PhysicsObject::PhysicsObject(sim::PhysicsProperties *, RadicalMathLibrary::Vector const &, sim::SymMatrix const &, float)",
        ),
    ),
    (
        "__Q23sim13PhysicsObjectPQ23sim17PhysicsProperties",
        Ok(
            "sim::PhysicsObject::PhysicsObject(sim::PhysicsProperties *)",
        ),
    ),
    (
        "_$_Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::~PhysicsObject(void)",
        ),
    ),
    (
        "Clone__Q23sim13PhysicsObjectPQ23sim8SimState",
        Ok(
            "sim::PhysicsObject::Clone(sim::SimState *)",
        ),
    ),
    (
        "SetClone__Q23sim13PhysicsObjectPQ23sim13PhysicsObjectPQ23sim8SimState",
        Ok(
            "sim::PhysicsObject::SetClone(sim::PhysicsObject *, sim::SimState *)",
        ),
    ),
    (
        "SyncSimObj__Q23sim13PhysicsObjectb",
        Ok(
            "sim::PhysicsObject::SyncSimObj(bool)",
        ),
    ),
    (
        "SetExternalCMOffset__Q23sim13PhysicsObjectRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsObject::SetExternalCMOffset(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "UpdateForSimEnvironment__Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::UpdateForSimEnvironment(void)",
        ),
    ),
    (
        "UpdateForPhysicsProperties__Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::UpdateForPhysicsProperties(void)",
        ),
    ),
    (
        "UpdateScale__Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::UpdateScale(void)",
        ),
    ),
    (
        "Update__Q23sim13PhysicsObjectf",
        Ok(
            "sim::PhysicsObject::Update(float)",
        ),
    ),
    (
        "TestResting__Q23sim13PhysicsObjectf",
        Ok(
            "sim::PhysicsObject::TestResting(float)",
        ),
    ),
    (
        "WakeUp__Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::WakeUp(void)",
        ),
    ),
    (
        "SetCMVelocity__Q23sim13PhysicsObjectRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsObject::SetCMVelocity(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "AddForce__Q23sim13PhysicsObjectRCQ218RadicalMathLibrary6VectorPCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsObject::AddForce(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const *)",
        ),
    ),
    (
        "AddTorque__Q23sim13PhysicsObjectRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsObject::AddTorque(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SolveAppliedForces__Q23sim13PhysicsObjectf",
        Ok(
            "sim::PhysicsObject::SolveAppliedForces(float)",
        ),
    ),
    (
        "BodyI__Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::BodyI(void)",
        ),
    ),
    (
        "ResetAppliedForces__Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::ResetAppliedForces(void)",
        ),
    ),
    (
        "AddImpulse__Q23sim13PhysicsObjectRCQ218RadicalMathLibrary6VectorT1RCQ23sim9SymMatrixPQ23sim15SimulatedObjectii",
        Ok(
            "sim::PhysicsObject::AddImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, sim::SymMatrix const &, sim::SimulatedObject *, int, int)",
        ),
    ),
    (
        "GetCollisionCache__CQ23sim13PhysicsObjectRQ218RadicalMathLibrary6VectorT1i",
        Ok(
            "sim::PhysicsObject::GetCollisionCache(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, int) const",
        ),
    ),
    (
        "EndCollision__Q23sim13PhysicsObjectbii",
        Ok(
            "sim::PhysicsObject::EndCollision(bool, int, int)",
        ),
    ),
    (
        "GetMassMatrix__Q23sim13PhysicsObjectRCQ218RadicalMathLibrary6VectorRQ23sim9SymMatrixPQ23sim15SimulatedObjectii",
        Ok(
            "sim::PhysicsObject::GetMassMatrix(RadicalMathLibrary::Vector const &, sim::SymMatrix &, sim::SimulatedObject *, int, int)",
        ),
    ),
    (
        "GetKineticEnergy__CQ23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::GetKineticEnergy(void) const",
        ),
    ),
    (
        "UpdateConstraint__Q23sim13PhysicsObjectRCQ23sim11LocalTargetRCQ23sim9SimTargetPCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::PhysicsObject::UpdateConstraint(sim::LocalTarget const &, sim::SimTarget const &, RadicalMathLibrary::Vector const *, float)",
        ),
    ),
    (
        "AddConstraint__Q23sim13PhysicsObjectRCQ23sim11LocalTarget",
        Ok(
            "sim::PhysicsObject::AddConstraint(sim::LocalTarget const &)",
        ),
    ),
    (
        "ReadVectorFromPhysicsVectorChunk__3simP10tChunkFileRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::ReadVectorFromPhysicsVectorChunk(tChunkFile *, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "ReadSymMatrixFromPhysicsInertiaMatrixChunk__3simP10tChunkFileRQ23sim9SymMatrix",
        Ok(
            "sim::ReadSymMatrixFromPhysicsInertiaMatrixChunk(tChunkFile *, sim::SymMatrix &)",
        ),
    ),
    (
        "__Q23sim19PhysicsObjectLoader",
        Ok(
            "sim::PhysicsObjectLoader::PhysicsObjectLoader(void)",
        ),
    ),
    (
        "LoadObject__Q23sim19PhysicsObjectLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "sim::PhysicsObjectLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tfQ23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject type_info function",
        ),
    ),
    (
        "__tfQ23sim19PhysicsObjectLoader",
        Ok(
            "sim::PhysicsObjectLoader type_info function",
        ),
    ),
    (
        "IsAtRest__CQ23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::IsAtRest(void) const",
        ),
    ),
    (
        "ResetRestingDetector__Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::ResetRestingDetector(void)",
        ),
    ),
    (
        "GetMinimumLinSpeed__Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::GetMinimumLinSpeed(void)",
        ),
    ),
    (
        "GetMinimumAngSpeed__Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::GetMinimumAngSpeed(void)",
        ),
    ),
    (
        "StartCollision__Q23sim13PhysicsObjectRCQ218RadicalMathLibrary6VectorT1PCQ23sim15SimulatedObjectii",
        Ok(
            "sim::PhysicsObject::StartCollision(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, sim::SimulatedObject const *, int, int)",
        ),
    ),
    (
        "IsCacheEmpty__CQ23sim13PhysicsObjecti",
        Ok(
            "sim::PhysicsObject::IsCacheEmpty(int) const",
        ),
    ),
    (
        "ValidCollision__CQ23sim13PhysicsObjectPCQ23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::ValidCollision(sim::PhysicsObject const *) const",
        ),
    ),
    (
        "ResetCache__Q23sim13PhysicsObjecti",
        Ok(
            "sim::PhysicsObject::ResetCache(int)",
        ),
    ),
    (
        "Mass__CQ23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::Mass(void) const",
        ),
    ),
    (
        "InvMass__CQ23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject::InvMass(void) const",
        ),
    ),
    (
        "_$_Q23sim19PhysicsObjectLoader",
        Ok(
            "sim::PhysicsObjectLoader::~PhysicsObjectLoader(void)",
        ),
    ),
    (
        "_GLOBAL_$I$_Q23sim13PhysicsObject$sSmall_Speed",
        Ok(
            "global constructors keyed to sim::PhysicsObject::sSmall_Speed",
        ),
    ),
    (
        "__Q23sim24ArticulatedPhysicsObjectPQ23sim17PhysicsPropertiesPPQ23sim12PhysicsJointi",
        Ok(
            "sim::ArticulatedPhysicsObject::ArticulatedPhysicsObject(sim::PhysicsProperties *, sim::PhysicsJoint **, int)",
        ),
    ),
    (
        "_$_Q23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::ArticulatedPhysicsObject::~ArticulatedPhysicsObject(void)",
        ),
    ),
    (
        "SetPose__Q23sim24ArticulatedPhysicsObjectPQ25poser4Pose",
        Ok(
            "sim::ArticulatedPhysicsObject::SetPose(poser::Pose *)",
        ),
    ),
    (
        "SetSkeletonInfo__Q23sim24ArticulatedPhysicsObjectPQ23sim12SkeletonInfo",
        Ok(
            "sim::ArticulatedPhysicsObject::SetSkeletonInfo(sim::SkeletonInfo *)",
        ),
    ),
    (
        "InitFromPose__Q23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::ArticulatedPhysicsObject::InitFromPose(void)",
        ),
    ),
    (
        "ComputeJointMasses__Q23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::ArticulatedPhysicsObject::ComputeJointMasses(void)",
        ),
    ),
    (
        "JointAxis__CQ23sim24ArticulatedPhysicsObjectiRQ218RadicalMathLibrary6Vectorb",
        Ok(
            "sim::ArticulatedPhysicsObject::JointAxis(int, RadicalMathLibrary::Vector &, bool) const",
        ),
    ),
    (
        "ConvertToRigidBody__Q23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::ArticulatedPhysicsObject::ConvertToRigidBody(void)",
        ),
    ),
    (
        "Clone__Q23sim24ArticulatedPhysicsObjectPQ23sim8SimState",
        Ok(
            "sim::ArticulatedPhysicsObject::Clone(sim::SimState *)",
        ),
    ),
    (
        "SetClone__Q23sim24ArticulatedPhysicsObjectPQ23sim24ArticulatedPhysicsObjectPQ23sim8SimState",
        Ok(
            "sim::ArticulatedPhysicsObject::SetClone(sim::ArticulatedPhysicsObject *, sim::SimState *)",
        ),
    ),
    (
        "Update__Q23sim24ArticulatedPhysicsObjectf",
        Ok(
            "sim::ArticulatedPhysicsObject::Update(float)",
        ),
    ),
    (
        "UpdatePoseMatrix__Q23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::ArticulatedPhysicsObject::UpdatePoseMatrix(void)",
        ),
    ),
    (
        "UpdateForPhysicsProperties__Q23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::ArticulatedPhysicsObject::UpdateForPhysicsProperties(void)",
        ),
    ),
    (
        "ComputeInertiaMatrix__Q23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::ArticulatedPhysicsObject::ComputeInertiaMatrix(void)",
        ),
    ),
    (
        "StartCollision__Q23sim24ArticulatedPhysicsObjectRCQ218RadicalMathLibrary6VectorT1PCQ23sim15SimulatedObjectii",
        Ok(
            "sim::ArticulatedPhysicsObject::StartCollision(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, sim::SimulatedObject const *, int, int)",
        ),
    ),
    (
        "GetMassMatrix__Q23sim24ArticulatedPhysicsObjectRCQ218RadicalMathLibrary6VectorRQ23sim9SymMatrixPQ23sim15SimulatedObjectii",
        Ok(
            "sim::ArticulatedPhysicsObject::GetMassMatrix(RadicalMathLibrary::Vector const &, sim::SymMatrix &, sim::SimulatedObject *, int, int)",
        ),
    ),
    (
        "SpeedAdjustmentFromCache__Q23sim24ArticulatedPhysicsObjectRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vectori",
        Ok(
            "sim::ArticulatedPhysicsObject::SpeedAdjustmentFromCache(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, int)",
        ),
    ),
    (
        "AddImpulse__Q23sim24ArticulatedPhysicsObjectRCQ218RadicalMathLibrary6VectorT1RCQ23sim9SymMatrixPQ23sim15SimulatedObjectii",
        Ok(
            "sim::ArticulatedPhysicsObject::AddImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, sim::SymMatrix const &, sim::SimulatedObject *, int, int)",
        ),
    ),
    (
        "EndCollision__Q23sim24ArticulatedPhysicsObjectbii",
        Ok(
            "sim::ArticulatedPhysicsObject::EndCollision(bool, int, int)",
        ),
    ),
    (
        "GetCollisionCache__CQ23sim24ArticulatedPhysicsObjectRQ218RadicalMathLibrary6VectorT1i",
        Ok(
            "sim::ArticulatedPhysicsObject::GetCollisionCache(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, int) const",
        ),
    ),
    (
        "IsCacheEmpty__CQ23sim24ArticulatedPhysicsObjecti",
        Ok(
            "sim::ArticulatedPhysicsObject::IsCacheEmpty(int) const",
        ),
    ),
    (
        "ResetCache__Q23sim24ArticulatedPhysicsObjecti",
        Ok(
            "sim::ArticulatedPhysicsObject::ResetCache(int)",
        ),
    ),
    (
        "StartHandlingCollision__Q23sim24ArticulatedPhysicsObjectPCQ23sim15SimulatedObjectii",
        Ok(
            "sim::ArticulatedPhysicsObject::StartHandlingCollision(sim::SimulatedObject const *, int, int)",
        ),
    ),
    (
        "__tfQ23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::ArticulatedPhysicsObject type_info function",
        ),
    ),
    (
        "UpdateScale__Q23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::ArticulatedPhysicsObject::UpdateScale(void)",
        ),
    ),
    (
        "CreatePhysicsJoint__Q23sim12PhysicsJointiRCQ218RadicalMathLibrary6Vectorfi",
        Ok(
            "sim::PhysicsJoint::CreatePhysicsJoint(int, RadicalMathLibrary::Vector const &, float, int)",
        ),
    ),
    (
        "__Q23sim12PhysicsJointRCQ218RadicalMathLibrary6Vectorfi",
        Ok(
            "sim::PhysicsJoint::PhysicsJoint(RadicalMathLibrary::Vector const &, float, int)",
        ),
    ),
    (
        "_$_Q23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint::~PhysicsJoint(void)",
        ),
    ),
    (
        "SetInertiaMatrix__Q23sim12PhysicsJointRCQ23sim9SymMatrix",
        Ok(
            "sim::PhysicsJoint::SetInertiaMatrix(sim::SymMatrix const &)",
        ),
    ),
    (
        "SetConstraintAngles__Q23sim12PhysicsJointff",
        Ok(
            "sim::PhysicsJoint::SetConstraintAngles(float, float)",
        ),
    ),
    (
        "SetParentObject__Q23sim12PhysicsJointPQ23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::PhysicsJoint::SetParentObject(sim::ArticulatedPhysicsObject *)",
        ),
    ),
    (
        "UpdateForPhysicsProperties__Q23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint::UpdateForPhysicsProperties(void)",
        ),
    ),
    (
        "SetTransform__Q23sim12PhysicsJointRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "sim::PhysicsJoint::SetTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "SetClone__Q23sim12PhysicsJointPQ23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint::SetClone(sim::PhysicsJoint *)",
        ),
    ),
    (
        "ComputeAbsorptionFactor__Q23sim12PhysicsJointRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "sim::PhysicsJoint::ComputeAbsorptionFactor(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetMassMatrix__Q23sim12PhysicsJointRCQ218RadicalMathLibrary6VectorRQ23sim9SymMatrix",
        Ok(
            "sim::PhysicsJoint::GetMassMatrix(RadicalMathLibrary::Vector const &, sim::SymMatrix &)",
        ),
    ),
    (
        "AddImpulse__Q23sim12PhysicsJointRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6VectorRCQ23sim9SymMatrix",
        Ok(
            "sim::PhysicsJoint::AddImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &, sim::SymMatrix const &)",
        ),
    ),
    (
        "StartIncludeCache__Q23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint::StartIncludeCache(void)",
        ),
    ),
    (
        "IncludeCache__Q23sim12PhysicsJointGQ218RadicalMathLibrary6VectorT1",
        Ok(
            "sim::PhysicsJoint::IncludeCache(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "IncludeCacheReaction__Q23sim12PhysicsJointGQ218RadicalMathLibrary6VectorT1b",
        Ok(
            "sim::PhysicsJoint::IncludeCacheReaction(RadicalMathLibrary::Vector, RadicalMathLibrary::Vector, bool)",
        ),
    ),
    (
        "IsParentOf__Q23sim12PhysicsJointPQ23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint::IsParentOf(sim::PhysicsJoint *)",
        ),
    ),
    (
        "JointAngle__Q23sim12PhysicsJointbRf",
        Ok(
            "sim::PhysicsJoint::JointAngle(bool, float &)",
        ),
    ),
    (
        "TryAddValue__Q23sim12PhysicsJointffff",
        Ok(
            "sim::PhysicsJoint::TryAddValue(float, float, float, float)",
        ),
    ),
    (
        "OriginSpeed__CQ23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint::OriginSpeed(void) const",
        ),
    ),
    (
        "__Q23sim14PhysicsJoint0DRCQ218RadicalMathLibrary6Vectorfi",
        Ok(
            "sim::PhysicsJoint0D::PhysicsJoint0D(RadicalMathLibrary::Vector const &, float, int)",
        ),
    ),
    (
        "_$_Q23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D::~PhysicsJoint0D(void)",
        ),
    ),
    (
        "Clone__Q23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D::Clone(void)",
        ),
    ),
    (
        "UpdateMatrix__Q23sim12PhysicsJointRQ218RadicalMathLibrary6Matrix",
        Ok(
            "sim::PhysicsJoint::UpdateMatrix(RadicalMathLibrary::Matrix &)",
        ),
    ),
    (
        "__Q23sim14PhysicsJoint1DRCQ218RadicalMathLibrary6Vectorfi",
        Ok(
            "sim::PhysicsJoint1D::PhysicsJoint1D(RadicalMathLibrary::Vector const &, float, int)",
        ),
    ),
    (
        "_$_Q23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D::~PhysicsJoint1D(void)",
        ),
    ),
    (
        "Clone__Q23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D::Clone(void)",
        ),
    ),
    (
        "SetConstraintAngles__Q23sim14PhysicsJoint1Dff",
        Ok(
            "sim::PhysicsJoint1D::SetConstraintAngles(float, float)",
        ),
    ),
    (
        "SetTransform__Q23sim14PhysicsJoint1DRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "sim::PhysicsJoint1D::SetTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "UpdateDeformation__Q23sim14PhysicsJoint1Dfff",
        Ok(
            "sim::PhysicsJoint1D::UpdateDeformation(float, float, float)",
        ),
    ),
    (
        "UpdateInertialDeformation__Q23sim14PhysicsJoint1DffffRCQ218RadicalMathLibrary6VectorT5f",
        Ok(
            "sim::PhysicsJoint1D::UpdateInertialDeformation(float, float, float, float, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "ImpulseReaction__Q23sim14PhysicsJoint1DRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint1D::ImpulseReaction(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "TestJointAngle__Q23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D::TestJointAngle(void)",
        ),
    ),
    (
        "ComputeAbsorbedImpulse__Q23sim14PhysicsJoint1DRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint1D::ComputeAbsorbedImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "VelocityProjection__CQ23sim14PhysicsJoint1DRCQ218RadicalMathLibrary6VectorfRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint1D::VelocityProjection(RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "TryAddDeformationSpeed__Q23sim14PhysicsJoint1DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint1D::TryAddDeformationSpeed(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "TryAddDeformationSpeed__Q23sim14PhysicsJoint1Df",
        Ok(
            "sim::PhysicsJoint1D::TryAddDeformationSpeed(float)",
        ),
    ),
    (
        "TryFixOverFlow__Q23sim14PhysicsJoint1DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint1D::TryFixOverFlow(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "ComputeJointAngle__Q23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D::ComputeJointAngle(void)",
        ),
    ),
    (
        "__Q23sim14PhysicsJoint3DRCQ218RadicalMathLibrary6Vectorfi",
        Ok(
            "sim::PhysicsJoint3D::PhysicsJoint3D(RadicalMathLibrary::Vector const &, float, int)",
        ),
    ),
    (
        "_$_Q23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D::~PhysicsJoint3D(void)",
        ),
    ),
    (
        "Clone__Q23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D::Clone(void)",
        ),
    ),
    (
        "SetConstraintAngles__Q23sim14PhysicsJoint3Dff",
        Ok(
            "sim::PhysicsJoint3D::SetConstraintAngles(float, float)",
        ),
    ),
    (
        "SetTransform__Q23sim14PhysicsJoint3DRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "sim::PhysicsJoint3D::SetTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "UpdateDeformation__Q23sim14PhysicsJoint3Dfff",
        Ok(
            "sim::PhysicsJoint3D::UpdateDeformation(float, float, float)",
        ),
    ),
    (
        "UpdateInertialDeformation__Q23sim14PhysicsJoint3DffffRCQ218RadicalMathLibrary6VectorT5f",
        Ok(
            "sim::PhysicsJoint3D::UpdateInertialDeformation(float, float, float, float, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "ImpulseReaction__Q23sim14PhysicsJoint3DRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint3D::ImpulseReaction(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "VelocityProjection__CQ23sim14PhysicsJoint3DRCQ218RadicalMathLibrary6VectorfRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint3D::VelocityProjection(RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "TestJointAngle__Q23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D::TestJointAngle(void)",
        ),
    ),
    (
        "TryAddDeformationSpeed__Q23sim14PhysicsJoint3DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint3D::TryAddDeformationSpeed(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "TryFixOverFlow__Q23sim14PhysicsJoint3DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint3D::TryFixOverFlow(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "ComputeJointAngle__Q23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D::ComputeJointAngle(void)",
        ),
    ),
    (
        "__tfQ23simt5TList1ZPQ23sim12PhysicsJoint",
        Ok(
            "sim::TList<sim::PhysicsJoint *> type_info function",
        ),
    ),
    (
        "__tfQ23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint type_info function",
        ),
    ),
    (
        "__tfQ23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D type_info function",
        ),
    ),
    (
        "__tfQ23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D type_info function",
        ),
    ),
    (
        "__tfQ23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D type_info function",
        ),
    ),
    (
        "_$_Q23simt5TList1ZPQ23sim12PhysicsJoint",
        Ok(
            "sim::TList<sim::PhysicsJoint *>::~TList(void)",
        ),
    ),
    (
        "Mass__CQ23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint::Mass(void) const",
        ),
    ),
    (
        "InvMass__CQ23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint::InvMass(void) const",
        ),
    ),
    (
        "__as__Q23sim14PhysicsJoint0DRCQ23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D::operator=(sim::PhysicsJoint0D const &)",
        ),
    ),
    (
        "ResetDeformationSpeed__Q23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D::ResetDeformationSpeed(void)",
        ),
    ),
    (
        "ResetCache__Q23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D::ResetCache(void)",
        ),
    ),
    (
        "ResetDeformation__Q23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D::ResetDeformation(void)",
        ),
    ),
    (
        "DeformationEmpty__CQ23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D::DeformationEmpty(void) const",
        ),
    ),
    (
        "Deformation__CQ23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D::Deformation(void) const",
        ),
    ),
    (
        "Deformation__CQ23sim14PhysicsJoint0DRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint0D::Deformation(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "UpdateDeformation__Q23sim14PhysicsJoint0Dfff",
        Ok(
            "sim::PhysicsJoint0D::UpdateDeformation(float, float, float)",
        ),
    ),
    (
        "UpdateInertialDeformation__Q23sim14PhysicsJoint0DffffRCQ218RadicalMathLibrary6VectorT5f",
        Ok(
            "sim::PhysicsJoint0D::UpdateInertialDeformation(float, float, float, float, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "SetCache__Q23sim14PhysicsJoint0DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint0D::SetCache(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "ComputeAbsorbedImpulse__Q23sim14PhysicsJoint0DRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint0D::ComputeAbsorbedImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "TryAddDeformationSpeed__Q23sim14PhysicsJoint0DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint0D::TryAddDeformationSpeed(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "TryFixOverFlow__Q23sim14PhysicsJoint0DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint0D::TryFixOverFlow(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetRotAxis__CQ23sim14PhysicsJoint0DRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint0D::GetRotAxis(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "PerpAxisProjection__CQ23sim14PhysicsJoint0DRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint0D::PerpAxisProjection(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "VelocityProjection__CQ23sim14PhysicsJoint0DRCQ218RadicalMathLibrary6VectorfRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint0D::VelocityProjection(RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetCache__CQ23sim14PhysicsJoint0DRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint0D::GetCache(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "AddCacheToDeformationSpeed__Q23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D::AddCacheToDeformationSpeed(void)",
        ),
    ),
    (
        "AddToDeformationSpeed__Q23sim14PhysicsJoint0DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint0D::AddToDeformationSpeed(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "TestJointAngle__Q23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D::TestJointAngle(void)",
        ),
    ),
    (
        "ImpulseReaction__Q23sim14PhysicsJoint0DRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint0D::ImpulseReaction(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "__as__Q23sim14PhysicsJoint1DRCQ23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D::operator=(sim::PhysicsJoint1D const &)",
        ),
    ),
    (
        "ResetDeformationSpeed__Q23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D::ResetDeformationSpeed(void)",
        ),
    ),
    (
        "ResetDeformation__Q23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D::ResetDeformation(void)",
        ),
    ),
    (
        "ResetCache__Q23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D::ResetCache(void)",
        ),
    ),
    (
        "DeformationEmpty__CQ23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D::DeformationEmpty(void) const",
        ),
    ),
    (
        "Deformation__CQ23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D::Deformation(void) const",
        ),
    ),
    (
        "Deformation__CQ23sim14PhysicsJoint1DRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint1D::Deformation(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetRotAxis__CQ23sim14PhysicsJoint1DRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint1D::GetRotAxis(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "PerpAxisProjection__CQ23sim14PhysicsJoint1DRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint1D::PerpAxisProjection(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "SetCache__Q23sim14PhysicsJoint1DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint1D::SetCache(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetCache__CQ23sim14PhysicsJoint1DRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint1D::GetCache(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "AddCacheToDeformationSpeed__Q23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D::AddCacheToDeformationSpeed(void)",
        ),
    ),
    (
        "AddToDeformationSpeed__Q23sim14PhysicsJoint1DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint1D::AddToDeformationSpeed(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__as__Q23sim14PhysicsJoint3DRCQ23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D::operator=(sim::PhysicsJoint3D const &)",
        ),
    ),
    (
        "ResetDeformationSpeed__Q23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D::ResetDeformationSpeed(void)",
        ),
    ),
    (
        "ResetDeformation__Q23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D::ResetDeformation(void)",
        ),
    ),
    (
        "ResetCache__Q23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D::ResetCache(void)",
        ),
    ),
    (
        "DeformationEmpty__CQ23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D::DeformationEmpty(void) const",
        ),
    ),
    (
        "Deformation__CQ23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D::Deformation(void) const",
        ),
    ),
    (
        "Deformation__CQ23sim14PhysicsJoint3DRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint3D::Deformation(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "GetRotAxis__CQ23sim14PhysicsJoint3DRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint3D::GetRotAxis(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "PerpAxisProjection__CQ23sim14PhysicsJoint3DRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint3D::PerpAxisProjection(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "SetCache__Q23sim14PhysicsJoint3DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint3D::SetCache(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "ComputeAbsorbedImpulse__Q23sim14PhysicsJoint3DRCQ218RadicalMathLibrary6VectorRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint3D::ComputeAbsorbedImpulse(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "GetCache__CQ23sim14PhysicsJoint3DRQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint3D::GetCache(RadicalMathLibrary::Vector &) const",
        ),
    ),
    (
        "AddCacheToDeformationSpeed__Q23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D::AddCacheToDeformationSpeed(void)",
        ),
    ),
    (
        "AddToDeformationSpeed__Q23sim14PhysicsJoint3DRCQ218RadicalMathLibrary6Vector",
        Ok(
            "sim::PhysicsJoint3D::AddToDeformationSpeed(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__as__Q23sim12PhysicsJointRCQ23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint::operator=(sim::PhysicsJoint const &)",
        ),
    ),
    (
        "_GLOBAL_$I$CreatePhysicsJoint__Q23sim12PhysicsJointiRCQ218RadicalMathLibrary6Vectorfi",
        Ok(
            "global constructors keyed to sim::PhysicsJoint::CreatePhysicsJoint(int, RadicalMathLibrary::Vector const &, float, int)",
        ),
    ),
    (
        "__Q23sim9VirtualCMUi",
        Ok(
            "sim::VirtualCM::VirtualCM(unsigned int)",
        ),
    ),
    (
        "InitLinear__Q23sim9VirtualCMRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "sim::VirtualCM::InitLinear(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "InitAngular__Q23sim9VirtualCMRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "sim::VirtualCM::InitAngular(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Update__Q23sim9VirtualCMRCQ218RadicalMathLibrary6VectorT1f",
        Ok(
            "sim::VirtualCM::Update(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "PrintOut__CQ23sim9VirtualCMf",
        Ok(
            "sim::VirtualCM::PrintOut(float) const",
        ),
    ),
    (
        "AddObjectCache__Q23sim9VirtualCMRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "sim::VirtualCM::AddObjectCache(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "DebugDisplay__CQ23sim9VirtualCM",
        Ok(
            "sim::VirtualCM::DebugDisplay(void) const",
        ),
    ),
    (
        "PrintOut__CQ23sim14JointVirtualCMf",
        Ok(
            "sim::JointVirtualCM::PrintOut(float) const",
        ),
    ),
    (
        "__tfQ23sim9VirtualCM",
        Ok(
            "sim::VirtualCM type_info function",
        ),
    ),
    (
        "_$_Q23sim14JointVirtualCM",
        Ok(
            "sim::JointVirtualCM::~JointVirtualCM(void)",
        ),
    ),
    (
        "__tfQ23sim14JointVirtualCM",
        Ok(
            "sim::JointVirtualCM type_info function",
        ),
    ),
    (
        "_$_Q23sim9VirtualCM",
        Ok(
            "sim::VirtualCM::~VirtualCM(void)",
        ),
    ),
    (
        "__Q23sim22PhysicsRestingDetector",
        Ok(
            "sim::PhysicsRestingDetector::PhysicsRestingDetector(void)",
        ),
    ),
    (
        "_$_Q23sim22PhysicsRestingDetector",
        Ok(
            "sim::PhysicsRestingDetector::~PhysicsRestingDetector(void)",
        ),
    ),
    (
        "SetObj__Q23sim22PhysicsRestingDetectorPCQ23sim13PhysicsObject",
        Ok(
            "sim::PhysicsRestingDetector::SetObj(sim::PhysicsObject const *)",
        ),
    ),
    (
        "UpdateRestingCondition__Q23sim22PhysicsRestingDetectorf",
        Ok(
            "sim::PhysicsRestingDetector::UpdateRestingCondition(float)",
        ),
    ),
    (
        "TestRestingCondition__Q23sim22PhysicsRestingDetectorf",
        Ok(
            "sim::PhysicsRestingDetector::TestRestingCondition(float)",
        ),
    ),
    (
        "ResetRestingCondition__Q23sim22PhysicsRestingDetector",
        Ok(
            "sim::PhysicsRestingDetector::ResetRestingCondition(void)",
        ),
    ),
    (
        "ComputeTypicalValues__Q23sim22PhysicsRestingDetectorf",
        Ok(
            "sim::PhysicsRestingDetector::ComputeTypicalValues(float)",
        ),
    ),
    (
        "__Q23sim17SimpleFilterAbs3D",
        Ok(
            "sim::SimpleFilterAbs3D::SimpleFilterAbs3D(void)",
        ),
    ),
    (
        "_$_Q23sim17CollisionAnalyser",
        Ok(
            "sim::CollisionAnalyser::~CollisionAnalyser(void)",
        ),
    ),
    (
        "StartSolvingCollisionList__Q23sim17CollisionAnalyserPQ23simt6TArray1ZQ23sim9Collisionf",
        Ok(
            "sim::CollisionAnalyser::StartSolvingCollisionList(sim::TArray<sim::Collision> *, float)",
        ),
    ),
    (
        "EndSolvingCollisionList__Q23sim17CollisionAnalyserPQ23simt6TArray1ZQ23sim9Collisionf",
        Ok(
            "sim::CollisionAnalyser::EndSolvingCollisionList(sim::TArray<sim::Collision> *, float)",
        ),
    ),
    (
        "PreCollisionEvent__Q23sim17CollisionAnalyserRQ23sim9Collisioni",
        Ok(
            "sim::CollisionAnalyser::PreCollisionEvent(sim::Collision &, int)",
        ),
    ),
    (
        "CollisionEvent__Q23sim17CollisionAnalyserPQ23sim8SimStateiT1iRCQ218RadicalMathLibrary6Vectorff",
        Ok(
            "sim::CollisionAnalyser::CollisionEvent(sim::SimState *, int, sim::SimState *, int, RadicalMathLibrary::Vector const &, float, float)",
        ),
    ),
    (
        "CreateNewDataIndex__Q23sim17CollisionAnalyser",
        Ok(
            "sim::CollisionAnalyser::CreateNewDataIndex(void)",
        ),
    ),
    (
        "CreateNewData__Q23sim17CollisionAnalyser",
        Ok(
            "sim::CollisionAnalyser::CreateNewData(void)",
        ),
    ),
    (
        "GetData__Q23sim17CollisionAnalyserRCQ23sim24CollisionAnalyserDataUID",
        Ok(
            "sim::CollisionAnalyser::GetData(sim::CollisionAnalyserDataUID const &)",
        ),
    ),
    (
        "CleanCollisionDataList__Q23sim17CollisionAnalyser",
        Ok(
            "sim::CollisionAnalyser::CleanCollisionDataList(void)",
        ),
    ),
    (
        "CalculateStateCollisionDataList__Q23sim17CollisionAnalyser",
        Ok(
            "sim::CollisionAnalyser::CalculateStateCollisionDataList(void)",
        ),
    ),
    (
        "NotifyShutdown__Q23sim17CollisionAnalyser",
        Ok(
            "sim::CollisionAnalyser::NotifyShutdown(void)",
        ),
    ),
    (
        "Update__Q23sim17CollisionAnalyserf",
        Ok(
            "sim::CollisionAnalyser::Update(float)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1ZPQ23sim21CollisionAnalyserDatai",
        Ok(
            "sim::TArray<sim::CollisionAnalyserData *>::ResizeArray(int)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1ZPQ23sim21CollisionAnalyserData",
        Ok(
            "sim::TArray<sim::CollisionAnalyserData *>::Grow(void)",
        ),
    ),
    (
        "Add__Q23simt6TArray1ZPQ23sim21CollisionAnalyserDataRCPQ23sim21CollisionAnalyserData",
        Ok(
            "sim::TArray<sim::CollisionAnalyserData *>::Add(sim::CollisionAnalyserData *const &)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1ZQ23sim26CollisionAnalyserDataIndexi",
        Ok(
            "sim::TArray<sim::CollisionAnalyserDataIndex>::ResizeArray(int)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1ZQ23sim26CollisionAnalyserDataIndex",
        Ok(
            "sim::TArray<sim::CollisionAnalyserDataIndex>::Grow(void)",
        ),
    ),
    (
        "NewElem__Q23simt6TArray1ZQ23sim26CollisionAnalyserDataIndex",
        Ok(
            "sim::TArray<sim::CollisionAnalyserDataIndex>::NewElem(void)",
        ),
    ),
    (
        "RemoveAt__Q23simt6TArray1ZPQ23sim21CollisionAnalyserDatai",
        Ok(
            "sim::TArray<sim::CollisionAnalyserData *>::RemoveAt(int)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1ZQ23sim21CollisionAnalyserDatai",
        Ok(
            "sim::TArray<sim::CollisionAnalyserData>::ResizeArray(int)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1ZQ23sim21CollisionAnalyserData",
        Ok(
            "sim::TArray<sim::CollisionAnalyserData>::Grow(void)",
        ),
    ),
    (
        "NewElem__Q23simt6TArray1ZQ23sim21CollisionAnalyserData",
        Ok(
            "sim::TArray<sim::CollisionAnalyserData>::NewElem(void)",
        ),
    ),
    (
        "RemoveAt__Q23simt6TArray1ZQ23sim26CollisionAnalyserDataIndexi",
        Ok(
            "sim::TArray<sim::CollisionAnalyserDataIndex>::RemoveAt(int)",
        ),
    ),
    (
        "__tfQ23sim17CollisionAnalyser",
        Ok(
            "sim::CollisionAnalyser type_info function",
        ),
    ),
    (
        "__Q23sim21CollisionAnalyserData",
        Ok(
            "sim::CollisionAnalyserData::CollisionAnalyserData(void)",
        ),
    ),
    (
        "__as__Q23sim21CollisionAnalyserDataRCQ23sim21CollisionAnalyserData",
        Ok(
            "sim::CollisionAnalyserData::operator=(sim::CollisionAnalyserData const &)",
        ),
    ),
    (
        "_$_Q23sim21CollisionAnalyserData",
        Ok(
            "sim::CollisionAnalyserData::~CollisionAnalyserData(void)",
        ),
    ),
    (
        "Init__Q23sim21CollisionAnalyserDataPQ23sim8SimStateiT1ii",
        Ok(
            "sim::CollisionAnalyserData::Init(sim::SimState *, int, sim::SimState *, int, int)",
        ),
    ),
    (
        "CalculateState__Q23sim21CollisionAnalyserData",
        Ok(
            "sim::CollisionAnalyserData::CalculateState(void)",
        ),
    ),
    (
        "Processed__Q23sim21CollisionAnalyserData",
        Ok(
            "sim::CollisionAnalyserData::Processed(void)",
        ),
    ),
    (
        "AddEvent__Q23sim21CollisionAnalyserDataQ23sim26CollisionAnalyserEventEnumRQ23sim21CollisionAnalyserInfo",
        Ok(
            "sim::CollisionAnalyserData::AddEvent(sim::CollisionAnalyserEventEnum, sim::CollisionAnalyserInfo &)",
        ),
    ),
    (
        "NotifyShutdown__Q23sim21CollisionAnalyserData",
        Ok(
            "sim::CollisionAnalyserData::NotifyShutdown(void)",
        ),
    ),
    (
        "ReadyToTerminate__Q23sim21CollisionAnalyserData",
        Ok(
            "sim::CollisionAnalyserData::ReadyToTerminate(void)",
        ),
    ),
    (
        "ResizeArray__Q23simt6TArray1ZQ23sim22CollisionAnalyserEventi",
        Ok(
            "sim::TArray<sim::CollisionAnalyserEvent>::ResizeArray(int)",
        ),
    ),
    (
        "Grow__Q23simt6TArray1ZQ23sim22CollisionAnalyserEvent",
        Ok(
            "sim::TArray<sim::CollisionAnalyserEvent>::Grow(void)",
        ),
    ),
    (
        "Add__Q23simt6TArray1ZQ23sim22CollisionAnalyserEventRCQ23sim22CollisionAnalyserEvent",
        Ok(
            "sim::TArray<sim::CollisionAnalyserEvent>::Add(sim::CollisionAnalyserEvent const &)",
        ),
    ),
    (
        "__as__Q23sim22CollisionAnalyserEventRCQ23sim22CollisionAnalyserEvent",
        Ok(
            "sim::CollisionAnalyserEvent::operator=(sim::CollisionAnalyserEvent const &)",
        ),
    ),
    (
        "__Q23sim21CollisionAnalyserInfo",
        Ok(
            "sim::CollisionAnalyserInfo::CollisionAnalyserInfo(void)",
        ),
    ),
    (
        "__Q23sim21CollisionAnalyserInfoRCQ23sim21CollisionAnalyserInfo",
        Ok(
            "sim::CollisionAnalyserInfo::CollisionAnalyserInfo(sim::CollisionAnalyserInfo const &)",
        ),
    ),
    (
        "__Q23sim17CollisionDetector",
        Ok(
            "sim::CollisionDetector::CollisionDetector(void)",
        ),
    ),
    (
        "_$_Q23sim17CollisionDetector",
        Ok(
            "sim::CollisionDetector::~CollisionDetector(void)",
        ),
    ),
    (
        "DetectCollision__Q23sim17CollisionDetectorPQ23simt6TArray1ZQ23sim19CollisionObjectPairPQ23simt6TArray1ZQ23sim9Collisionfb",
        Ok(
            "sim::CollisionDetector::DetectCollision(sim::TArray<sim::CollisionObjectPair> *, sim::TArray<sim::Collision> *, float, bool)",
        ),
    ),
    (
        "DetectCollision__Q23sim17CollisionDetectorb",
        Ok(
            "sim::CollisionDetector::DetectCollision(bool)",
        ),
    ),
    (
        "DetectCollision__Q23sim17CollisionDetectorPQ23sim15CollisionVolumeT1PQ23simt6TArray1ZQ23sim9Collision",
        Ok(
            "sim::CollisionDetector::DetectCollision(sim::CollisionVolume *, sim::CollisionVolume *, sim::TArray<sim::Collision> *)",
        ),
    ),
    (
        "DetectCollision__Q23sim17CollisionDetectorPQ23sim15CollisionVolumeT1",
        Ok(
            "sim::CollisionDetector::DetectCollision(sim::CollisionVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "DetectColl__Q23sim17CollisionDetectorPQ23sim15CollisionVolumeT1",
        Ok(
            "sim::CollisionDetector::DetectColl(sim::CollisionVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "DetectColl__Q23sim17CollisionDetectorPQ23sim10WallVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::CollisionDetector::DetectColl(sim::WallVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "DetectColl__Q23sim17CollisionDetectorPQ23sim11OBBoxVolumeT1",
        Ok(
            "sim::CollisionDetector::DetectColl(sim::OBBoxVolume *, sim::OBBoxVolume *)",
        ),
    ),
    (
        "DetectColl__Q23sim17CollisionDetectorPQ23sim11OBBoxVolumePQ23sim14CylinderVolume",
        Ok(
            "sim::CollisionDetector::DetectColl(sim::OBBoxVolume *, sim::CylinderVolume *)",
        ),
    ),
    (
        "DetectBSColl__Q23sim17CollisionDetectorPQ23sim11OBBoxVolumePQ23sim15CollisionVolumef",
        Ok(
            "sim::CollisionDetector::DetectBSColl(sim::OBBoxVolume *, sim::CollisionVolume *, float)",
        ),
    ),
    (
        "DetectColl__Q23sim17CollisionDetectorPQ23sim14CylinderVolumeT1",
        Ok(
            "sim::CollisionDetector::DetectColl(sim::CylinderVolume *, sim::CylinderVolume *)",
        ),
    ),
    (
        "DetectCSColl__Q23sim17CollisionDetectorPQ23sim14CylinderVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::CollisionDetector::DetectCSColl(sim::CylinderVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "DetectSSColl__Q23sim17CollisionDetectorPQ23sim15CollisionVolumeT1",
        Ok(
            "sim::CollisionDetector::DetectSSColl(sim::CollisionVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "DetectOnSubVolume__Q23sim17CollisionDetectorPQ23sim15CollisionVolumeT1",
        Ok(
            "sim::CollisionDetector::DetectOnSubVolume(sim::CollisionVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "CollTestInit__Q23sim17CollisionDetectorPQ23sim15CollisionVolumeT1",
        Ok(
            "sim::CollisionDetector::CollTestInit(sim::CollisionVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "SphereDistance__3simPQ23sim15CollisionVolumeT1",
        Ok(
            "sim::SphereDistance(sim::CollisionVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "WallDistance__3simPQ23sim10WallVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::WallDistance(sim::WallVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "StaticOBBoxDistance__3simPQ23sim11OBBoxVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::StaticOBBoxDistance(sim::OBBoxVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "StaticCylinderDistance__3simPQ23sim14CylinderVolumePQ23sim15CollisionVolume",
        Ok(
            "sim::StaticCylinderDistance(sim::CylinderVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "DetectProximity__Q23sim17CollisionDetectorPQ23sim19CollisionObjectPair",
        Ok(
            "sim::CollisionDetector::DetectProximity(sim::CollisionObjectPair *)",
        ),
    ),
    (
        "EstimateTimeNextTestForStaticObject__Q23sim17CollisionDetectorPQ23sim19CollisionObjectPairPQ23sim15CollisionVolumeT2",
        Ok(
            "sim::CollisionDetector::EstimateTimeNextTestForStaticObject(sim::CollisionObjectPair *, sim::CollisionVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "EstimateTimeNextTest__Q23sim17CollisionDetectorPQ23sim19CollisionObjectPairf",
        Ok(
            "sim::CollisionDetector::EstimateTimeNextTest(sim::CollisionObjectPair *, float)",
        ),
    ),
    (
        "__tfQ23sim17CollisionDetector",
        Ok(
            "sim::CollisionDetector type_info function",
        ),
    ),
    (
        "__Q23sim20SubCollisionDetector",
        Ok(
            "sim::SubCollisionDetector::SubCollisionDetector(void)",
        ),
    ),
    (
        "_$_Q23sim20SubCollisionDetector",
        Ok(
            "sim::SubCollisionDetector::~SubCollisionDetector(void)",
        ),
    ),
    (
        "OBBoxV__Q23sim20SubCollisionDetectorPQ23sim11OBBoxVolumeT1",
        Ok(
            "sim::SubCollisionDetector::OBBoxV(sim::OBBoxVolume *, sim::OBBoxVolume *)",
        ),
    ),
    (
        "OBBoxBorderCollMove__Q23sim20SubCollisionDetectorPQ23sim11OBBoxVolumeRQ218RadicalMathLibrary6Vectorffi",
        Ok(
            "sim::SubCollisionDetector::OBBoxBorderCollMove(sim::OBBoxVolume *, RadicalMathLibrary::Vector &, float, float, int)",
        ),
    ),
    (
        "OBBoxEE__Q23sim20SubCollisionDetectorPQ23sim11OBBoxVolumeT1",
        Ok(
            "sim::SubCollisionDetector::OBBoxEE(sim::OBBoxVolume *, sim::OBBoxVolume *)",
        ),
    ),
    (
        "OBBoxSepPlane__Q23sim20SubCollisionDetectorPQ23sim11OBBoxVolumeT1",
        Ok(
            "sim::SubCollisionDetector::OBBoxSepPlane(sim::OBBoxVolume *, sim::OBBoxVolume *)",
        ),
    ),
    (
        "EdgeEdge__Q23sim20SubCollisionDetectorRbRQ218RadicalMathLibrary6VectorT2fT2T2fT2ffPQ23sim15CollisionVolumeT11_",
        Ok(
            "sim::SubCollisionDetector::EdgeEdge(bool &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, float, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, float, RadicalMathLibrary::Vector &, float, float, sim::CollisionVolume *, sim::CollisionVolume *)",
        ),
    ),
    (
        "PointBoxColl__Q23sim20SubCollisionDetectorPQ23sim11OBBoxVolumeRQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6VectorT3Rffb",
        Ok(
            "sim::SubCollisionDetector::PointBoxColl(sim::OBBoxVolume *, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, float &, float, bool)",
        ),
    ),
    (
        "FindFaceIndexOrder__CQ23sim20SubCollisionDetectorPifff",
        Ok(
            "sim::SubCollisionDetector::FindFaceIndexOrder(int *, float, float, float) const",
        ),
    ),
    (
        "FindSizeOrder4__CQ23sim20SubCollisionDetectorPiPf",
        Ok(
            "sim::SubCollisionDetector::FindSizeOrder4(int *, float *) const",
        ),
    ),
    (
        "OBBoxCylF__Q23sim20SubCollisionDetectorPQ23sim11OBBoxVolumePQ23sim14CylinderVolume",
        Ok(
            "sim::SubCollisionDetector::OBBoxCylF(sim::OBBoxVolume *, sim::CylinderVolume *)",
        ),
    ),
    (
        "OBBoxCylV__Q23sim20SubCollisionDetectorPQ23sim11OBBoxVolumePQ23sim14CylinderVolume",
        Ok(
            "sim::SubCollisionDetector::OBBoxCylV(sim::OBBoxVolume *, sim::CylinderVolume *)",
        ),
    ),
    (
        "OBBoxCylEE__Q23sim20SubCollisionDetectorPQ23sim11OBBoxVolumePQ23sim14CylinderVolume",
        Ok(
            "sim::SubCollisionDetector::OBBoxCylEE(sim::OBBoxVolume *, sim::CylinderVolume *)",
        ),
    ),
    (
        "OBBoxCylEC__Q23sim20SubCollisionDetectorPQ23sim11OBBoxVolumePQ23sim14CylinderVolume",
        Ok(
            "sim::SubCollisionDetector::OBBoxCylEC(sim::OBBoxVolume *, sim::CylinderVolume *)",
        ),
    ),
    (
        "CircleEdge__Q23sim20SubCollisionDetectorPQ23sim15CollisionVolumeRQ218RadicalMathLibrary6VectorT2fPQ23sim14CylinderVolumeffb",
        Ok(
            "sim::SubCollisionDetector::CircleEdge(sim::CollisionVolume *, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, float, sim::CylinderVolume *, float, float, bool)",
        ),
    ),
    (
        "BoxSphereColl__Q23sim20SubCollisionDetectorPQ23sim11OBBoxVolumePQ23sim15CollisionVolumeRQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::SubCollisionDetector::BoxSphereColl(sim::OBBoxVolume *, sim::CollisionVolume *, RadicalMathLibrary::Vector &, float)",
        ),
    ),
    (
        "CylCylEnd__Q23sim20SubCollisionDetectorPQ23sim14CylinderVolumeT1bT3",
        Ok(
            "sim::SubCollisionDetector::CylCylEnd(sim::CylinderVolume *, sim::CylinderVolume *, bool, bool)",
        ),
    ),
    (
        "computeEdge__3simPQ23sim14CylinderVolumeT1RQ218RadicalMathLibrary6VectorT3",
        Ok(
            "sim::computeEdge(sim::CylinderVolume *, sim::CylinderVolume *, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "CylCylSphereEndSpecialFilter__Q23sim20SubCollisionDetectorf",
        Ok(
            "sim::SubCollisionDetector::CylCylSphereEndSpecialFilter(float)",
        ),
    ),
    (
        "CylCylSphereEnd__Q23sim20SubCollisionDetectorPQ23sim14CylinderVolumeT1",
        Ok(
            "sim::SubCollisionDetector::CylCylSphereEnd(sim::CylinderVolume *, sim::CylinderVolume *)",
        ),
    ),
    (
        "CircleCyl__Q23sim20SubCollisionDetectorPQ23sim14CylinderVolumeT1",
        Ok(
            "sim::SubCollisionDetector::CircleCyl(sim::CylinderVolume *, sim::CylinderVolume *)",
        ),
    ),
    (
        "CylSphereColl__Q23sim20SubCollisionDetectorPQ23sim14CylinderVolumeRCQ218RadicalMathLibrary6VectorfRQ218RadicalMathLibrary6VectorRfPQ218RadicalMathLibrary6VectorT6b",
        Ok(
            "sim::SubCollisionDetector::CylSphereColl(sim::CylinderVolume *, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector &, float &, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, bool)",
        ),
    ),
    (
        "PlanePlaneIntersection__Q23sim20SubCollisionDetectorRQ218RadicalMathLibrary6VectorN31PQ218RadicalMathLibrary6VectorT5b",
        Ok(
            "sim::SubCollisionDetector::PlanePlaneIntersection(RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, bool)",
        ),
    ),
    (
        "CircleCircleIntersection__Q23sim20SubCollisionDetectorRCQ218RadicalMathLibrary6VectorN21ffbRQ218RadicalMathLibrary6VectorT7",
        Ok(
            "sim::SubCollisionDetector::CircleCircleIntersection(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, float, float, bool, RadicalMathLibrary::Vector &, RadicalMathLibrary::Vector &)",
        ),
    ),
    (
        "AddCollision__Q23sim20SubCollisionDetectorPQ23sim15CollisionVolumeRCQ218RadicalMathLibrary6VectorT1T2fT2",
        Ok(
            "sim::SubCollisionDetector::AddCollision(sim::CollisionVolume *, RadicalMathLibrary::Vector const &, sim::CollisionVolume *, RadicalMathLibrary::Vector const &, float, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetCollisionList__Q23sim20SubCollisionDetectorRQ23simt6TArray1ZQ23sim9Collision",
        Ok(
            "sim::SubCollisionDetector::SetCollisionList(sim::TArray<sim::Collision> &)",
        ),
    ),
    (
        "RemoveAt__Q23simt6TArray1ZQ23sim9Collisioni",
        Ok(
            "sim::TArray<sim::Collision>::RemoveAt(int)",
        ),
    ),
    (
        "__tfQ23sim20SubCollisionDetector",
        Ok(
            "sim::SubCollisionDetector type_info function",
        ),
    ),
    (
        "__Q23sim14SimpleFilter1D",
        Ok(
            "sim::SimpleFilter1D::SimpleFilter1D(void)",
        ),
    ),
    (
        "Init__Q23sim14SimpleFilter1Dfff",
        Ok(
            "sim::SimpleFilter1D::Init(float, float, float)",
        ),
    ),
    (
        "Estimate__Q23sim14SimpleFilter1Dff",
        Ok(
            "sim::SimpleFilter1D::Estimate(float, float)",
        ),
    ),
    (
        "__Q23sim14SimpleFilter3D",
        Ok(
            "sim::SimpleFilter3D::SimpleFilter3D(void)",
        ),
    ),
    (
        "Init__Q23sim14SimpleFilter3DPCQ218RadicalMathLibrary6VectorN21",
        Ok(
            "sim::SimpleFilter3D::Init(RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector const *)",
        ),
    ),
    (
        "Estimate__Q23sim14SimpleFilter3DPCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::SimpleFilter3D::Estimate(RadicalMathLibrary::Vector const *, float)",
        ),
    ),
    (
        "Init__Q23sim17SimpleFilterAbs3DPCQ218RadicalMathLibrary6VectorN21",
        Ok(
            "sim::SimpleFilterAbs3D::Init(RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector const *)",
        ),
    ),
    (
        "Estimate__Q23sim17SimpleFilterAbs3DPCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "sim::SimpleFilterAbs3D::Estimate(RadicalMathLibrary::Vector const *, float)",
        ),
    ),
    (
        "Init__Q23sim9Kalmann1Dfff",
        Ok(
            "sim::Kalmann1D::Init(float, float, float)",
        ),
    ),
    (
        "Estimate__Q23sim9Kalmann1Dff",
        Ok(
            "sim::Kalmann1D::Estimate(float, float)",
        ),
    ),
    (
        "Init__Q23sim15DoubleKalmann1Dfff",
        Ok(
            "sim::DoubleKalmann1D::Init(float, float, float)",
        ),
    ),
    (
        "Estimate__Q23sim15DoubleKalmann1Dff",
        Ok(
            "sim::DoubleKalmann1D::Estimate(float, float)",
        ),
    ),
    (
        "__tfQ23sim14SimpleFilter1D",
        Ok(
            "sim::SimpleFilter1D type_info function",
        ),
    ),
    (
        "__tfQ23sim14SimpleFilter3D",
        Ok(
            "sim::SimpleFilter3D type_info function",
        ),
    ),
    (
        "__tfQ23sim17SimpleFilterAbs3D",
        Ok(
            "sim::SimpleFilterAbs3D type_info function",
        ),
    ),
    (
        "__tfQ23sim9Kalmann1D",
        Ok(
            "sim::Kalmann1D type_info function",
        ),
    ),
    (
        "__tfQ23sim15DoubleKalmann1D",
        Ok(
            "sim::DoubleKalmann1D type_info function",
        ),
    ),
    (
        "GetEstimate__CQ23sim14SimpleFilter1D",
        Ok(
            "sim::SimpleFilter1D::GetEstimate(void) const",
        ),
    ),
    (
        "GetEstimate__CQ23sim14SimpleFilter3D",
        Ok(
            "sim::SimpleFilter3D::GetEstimate(void) const",
        ),
    ),
    (
        "GetEstimate__CQ23sim9Kalmann1D",
        Ok(
            "sim::Kalmann1D::GetEstimate(void) const",
        ),
    ),
    (
        "GetEstimate__CQ23sim15DoubleKalmann1D",
        Ok(
            "sim::DoubleKalmann1D::GetEstimate(void) const",
        ),
    ),
    (
        "__tfQ23sim8Filter1D",
        Ok(
            "sim::Filter1D type_info function",
        ),
    ),
    (
        "__tfQ23sim8Filter3D",
        Ok(
            "sim::Filter3D type_info function",
        ),
    ),
    (
        "__Q25poser5Joint",
        Ok(
            "poser::Joint::Joint(void)",
        ),
    ),
    (
        "_$_Q25poser5Joint",
        Ok(
            "poser::Joint::~Joint(void)",
        ),
    ),
    (
        "SetChildJointCount__Q25poser5Jointi",
        Ok(
            "poser::Joint::SetChildJointCount(int)",
        ),
    ),
    (
        "SetChildJointMem__Q25poser5JointPPQ25poser5Joint",
        Ok(
            "poser::Joint::SetChildJointMem(poser::Joint **)",
        ),
    ),
    (
        "AddChildJoint__Q25poser5JointPQ25poser5Joint",
        Ok(
            "poser::Joint::AddChildJoint(poser::Joint *)",
        ),
    ),
    (
        "GetObjectTransform__CQ25poser5Joint",
        Ok(
            "poser::Joint::GetObjectTransform(void) const",
        ),
    ),
    (
        "SetObjectTransform__Q25poser5JointRCQ25poser9Transform",
        Ok(
            "poser::Joint::SetObjectTransform(poser::Transform const &)",
        ),
    ),
    (
        "SetObjectMatrix__Q25poser5JointRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "poser::Joint::SetObjectMatrix(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "SetObjectMatrixRotation__Q25poser5JointRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "poser::Joint::SetObjectMatrixRotation(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "SetObjectTranslation__Q25poser5JointRCQ218RadicalMathLibrary6Vector",
        Ok(
            "poser::Joint::SetObjectTranslation(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetObjectQuaternion__Q25poser5JointRCQ218RadicalMathLibrary10Quaternion",
        Ok(
            "poser::Joint::SetObjectQuaternion(RadicalMathLibrary::Quaternion const &)",
        ),
    ),
    (
        "GetWorldTransform__CQ25poser5Joint",
        Ok(
            "poser::Joint::GetWorldTransform(void) const",
        ),
    ),
    (
        "SetWorldTransform__Q25poser5JointRCQ25poser9Transform",
        Ok(
            "poser::Joint::SetWorldTransform(poser::Transform const &)",
        ),
    ),
    (
        "NotifyWorldModified__CQ25poser5Joint",
        Ok(
            "poser::Joint::NotifyWorldModified(void) const",
        ),
    ),
    (
        "ParentWorldModified__Q25poser5Joint",
        Ok(
            "poser::Joint::ParentWorldModified(void)",
        ),
    ),
    (
        "SetWorldMatrix__Q25poser5JointRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "poser::Joint::SetWorldMatrix(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "SetWorldTranslation__Q25poser5JointRCQ218RadicalMathLibrary6Vector",
        Ok(
            "poser::Joint::SetWorldTranslation(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Clean__Q25poser5Joint",
        Ok(
            "poser::Joint::Clean(void)",
        ),
    ),
    (
        "__Q25poser4PoseP5tPose",
        Ok(
            "poser::Pose::Pose(tPose *)",
        ),
    ),
    (
        "_$_Q25poser4Pose",
        Ok(
            "poser::Pose::~Pose(void)",
        ),
    ),
    (
        "Assign__Q25poser4PoseP5tPose",
        Ok(
            "poser::Pose::Assign(tPose *)",
        ),
    ),
    (
        "GetJointCount__CQ25poser4Pose",
        Ok(
            "poser::Pose::GetJointCount(void) const",
        ),
    ),
    (
        "SetRestPose__Q25poser4Pose",
        Ok(
            "poser::Pose::SetRestPose(void)",
        ),
    ),
    (
        "FillP3DPose__CQ25poser4PoseP5tPoseb",
        Ok(
            "poser::Pose::FillP3DPose(tPose *, bool) const",
        ),
    ),
    (
        "Clean__Q25poser4Pose",
        Ok(
            "poser::Pose::Clean(void)",
        ),
    ),
    (
        "__tfQ25poser4Pose",
        Ok(
            "poser::Pose type_info function",
        ),
    ),
    (
        "__Q25poser10PoseDriver",
        Ok(
            "poser::PoseDriver::PoseDriver(void)",
        ),
    ),
    (
        "_$_Q25poser10PoseDriver",
        Ok(
            "poser::PoseDriver::~PoseDriver(void)",
        ),
    ),
    (
        "__tfQ25poser10PoseDriver",
        Ok(
            "poser::PoseDriver type_info function",
        ),
    ),
    (
        "GetMinimumJointIndex__CQ25poser10PoseDriver",
        Ok(
            "poser::PoseDriver::GetMinimumJointIndex(void) const",
        ),
    ),
    (
        "GetPriority__CQ25poser10PoseDriver",
        Ok(
            "poser::PoseDriver::GetPriority(void) const",
        ),
    ),
    (
        "SetIsEnabled__Q25poser10PoseDriverb",
        Ok(
            "poser::PoseDriver::SetIsEnabled(bool)",
        ),
    ),
    (
        "__Q25poser10PoseEngineP5tPoseii",
        Ok(
            "poser::PoseEngine::PoseEngine(tPose *, int, int)",
        ),
    ),
    (
        "_$_Q25poser10PoseEngine",
        Ok(
            "poser::PoseEngine::~PoseEngine(void)",
        ),
    ),
    (
        "GetPoseDriverIndex__CQ25poser10PoseEngineiPQ25poser10PoseDriver",
        Ok(
            "poser::PoseEngine::GetPoseDriverIndex(int, poser::PoseDriver *) const",
        ),
    ),
    (
        "AddPoseDriver__Q25poser10PoseEngineiPQ25poser10PoseDriver",
        Ok(
            "poser::PoseEngine::AddPoseDriver(int, poser::PoseDriver *)",
        ),
    ),
    (
        "RemovePoseDriver__Q25poser10PoseEngineii",
        Ok(
            "poser::PoseEngine::RemovePoseDriver(int, int)",
        ),
    ),
    (
        "RemovePoseDriver__Q25poser10PoseEngineiPQ25poser10PoseDriver",
        Ok(
            "poser::PoseEngine::RemovePoseDriver(int, poser::PoseDriver *)",
        ),
    ),
    (
        "Begin__Q25poser10PoseEngineb",
        Ok(
            "poser::PoseEngine::Begin(bool)",
        ),
    ),
    (
        "Advance__Q25poser10PoseEngineif",
        Ok(
            "poser::PoseEngine::Advance(int, float)",
        ),
    ),
    (
        "Update__Q25poser10PoseEnginei",
        Ok(
            "poser::PoseEngine::Update(int)",
        ),
    ),
    (
        "End__Q25poser10PoseEngine",
        Ok(
            "poser::PoseEngine::End(void)",
        ),
    ),
    (
        "__tfQ25poser10PoseEngine",
        Ok(
            "poser::PoseEngine type_info function",
        ),
    ),
    (
        "__Q25poser9Transform",
        Ok(
            "poser::Transform::Transform(void)",
        ),
    ),
    (
        "__Q25poser9TransformRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "poser::Transform::Transform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Identity__Q25poser9Transform",
        Ok(
            "poser::Transform::Identity(void)",
        ),
    ),
    (
        "SetMatrix__Q25poser9TransformRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "poser::Transform::SetMatrix(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "SetMatrixRotation__Q25poser9TransformRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "poser::Transform::SetMatrixRotation(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "GetQuaternion__CQ25poser9Transform",
        Ok(
            "poser::Transform::GetQuaternion(void) const",
        ),
    ),
    (
        "SetQuaternion__Q25poser9TransformRCQ218RadicalMathLibrary10Quaternion",
        Ok(
            "poser::Transform::SetQuaternion(RadicalMathLibrary::Quaternion const &)",
        ),
    ),
    (
        "Blend__Q25poser9TransformfRCQ25poser9Transform",
        Ok(
            "poser::Transform::Blend(float, poser::Transform const &)",
        ),
    ),
    (
        "Invert__Q25poser9Transform",
        Ok(
            "poser::Transform::Invert(void)",
        ),
    ),
    (
        "__20FeProjectFileHandler",
        Ok(
            "FeProjectFileHandler::FeProjectFileHandler(void)",
        ),
    ),
    (
        "_$_20FeProjectFileHandler",
        Ok(
            "FeProjectFileHandler::~FeProjectFileHandler(void)",
        ),
    ),
    (
        "CheckExtension__20FeProjectFileHandlerPc",
        Ok(
            "FeProjectFileHandler::CheckExtension(char *)",
        ),
    ),
    (
        "Load__20FeProjectFileHandlerP5tFileP12tEntityStore",
        Ok(
            "FeProjectFileHandler::Load(tFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadProject__20FeProjectFileHandlerP7XMLTree",
        Ok(
            "FeProjectFileHandler::LoadProject(XMLTree *)",
        ),
    ),
    (
        "LoadScreen__20FeProjectFileHandlerP7XMLTree",
        Ok(
            "FeProjectFileHandler::LoadScreen(XMLTree *)",
        ),
    ),
    (
        "LoadPage__20FeProjectFileHandlerP7XMLTree",
        Ok(
            "FeProjectFileHandler::LoadPage(XMLTree *)",
        ),
    ),
    (
        "LoadTextStyle__20FeProjectFileHandlerP7XMLTree",
        Ok(
            "FeProjectFileHandler::LoadTextStyle(XMLTree *)",
        ),
    ),
    (
        "ParsePageResources__20FeProjectFileHandlerP7XMLTreeP6FePage",
        Ok(
            "FeProjectFileHandler::ParsePageResources(XMLTree *, FePage *)",
        ),
    ),
    (
        "ParseDrawables__20FeProjectFileHandlerP7XMLTreeP7FeOwner",
        Ok(
            "FeProjectFileHandler::ParseDrawables(XMLTree *, FeOwner *)",
        ),
    ),
    (
        "ParseGroup__20FeProjectFileHandlerP7XMLTreeP7FeOwner",
        Ok(
            "FeProjectFileHandler::ParseGroup(XMLTree *, FeOwner *)",
        ),
    ),
    (
        "ParseMovie__20FeProjectFileHandlerP7XMLTreeP7FeOwner",
        Ok(
            "FeProjectFileHandler::ParseMovie(XMLTree *, FeOwner *)",
        ),
    ),
    (
        "ParsePolygon__20FeProjectFileHandlerP7XMLTreeP7FeOwner",
        Ok(
            "FeProjectFileHandler::ParsePolygon(XMLTree *, FeOwner *)",
        ),
    ),
    (
        "ParsePure3dObject__20FeProjectFileHandlerP7XMLTreeP7FeOwner",
        Ok(
            "FeProjectFileHandler::ParsePure3dObject(XMLTree *, FeOwner *)",
        ),
    ),
    (
        "ParseSprite__20FeProjectFileHandlerP7XMLTreeP7FeOwner",
        Ok(
            "FeProjectFileHandler::ParseSprite(XMLTree *, FeOwner *)",
        ),
    ),
    (
        "ParseText__20FeProjectFileHandlerP7XMLTreeP7FeOwner",
        Ok(
            "FeProjectFileHandler::ParseText(XMLTree *, FeOwner *)",
        ),
    ),
    (
        "__17FeTextBibleLoader",
        Ok(
            "FeTextBibleLoader::FeTextBibleLoader(void)",
        ),
    ),
    (
        "LoadObject__17FeTextBibleLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "FeTextBibleLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadLanguage__17FeTextBibleLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "FeTextBibleLoader::LoadLanguage(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf20FeProjectFileHandler",
        Ok(
            "FeProjectFileHandler type_info function",
        ),
    ),
    (
        "_$_17FeTextBibleLoader",
        Ok(
            "FeTextBibleLoader::~FeTextBibleLoader(void)",
        ),
    ),
    (
        "__tf17FeTextBibleLoader",
        Ok(
            "FeTextBibleLoader type_info function",
        ),
    ),
    (
        "__6FePageiPCcP9FeProject",
        Ok(
            "FePage::FePage(int, char const *, FeProject *)",
        ),
    ),
    (
        "_$_6FePage",
        Ok(
            "FePage::~FePage(void)",
        ),
    ),
    (
        "GetBoundingBoxSize__C6FePageRiT1",
        Ok(
            "FePage::GetBoundingBoxSize(int &, int &) const",
        ),
    ),
    (
        "GetBoundingBox__C6FePageRiN31",
        Ok(
            "FePage::GetBoundingBox(int &, int &, int &, int &) const",
        ),
    ),
    (
        "Display__6FePage",
        Ok(
            "FePage::Display(void)",
        ),
    ),
    (
        "GetGroup__6FePageG13tUidUnaligned",
        Ok(
            "FePage::GetGroup(tUidUnaligned)",
        ),
    ),
    (
        "GetGroup__6FePagePCc",
        Ok(
            "FePage::GetGroup(char const *)",
        ),
    ),
    (
        "GetPolygon__6FePageG13tUidUnaligned",
        Ok(
            "FePage::GetPolygon(tUidUnaligned)",
        ),
    ),
    (
        "GetPolygon__6FePagePCc",
        Ok(
            "FePage::GetPolygon(char const *)",
        ),
    ),
    (
        "GetLayer__6FePageG13tUidUnaligned",
        Ok(
            "FePage::GetLayer(tUidUnaligned)",
        ),
    ),
    (
        "GetLayer__6FePagePCc",
        Ok(
            "FePage::GetLayer(char const *)",
        ),
    ),
    (
        "GetLayerByIndex__6FePagei",
        Ok(
            "FePage::GetLayerByIndex(int)",
        ),
    ),
    (
        "GetMovie__6FePageG13tUidUnaligned",
        Ok(
            "FePage::GetMovie(tUidUnaligned)",
        ),
    ),
    (
        "GetMovie__6FePagePCc",
        Ok(
            "FePage::GetMovie(char const *)",
        ),
    ),
    (
        "GetNumberOfLayers__C6FePage",
        Ok(
            "FePage::GetNumberOfLayers(void) const",
        ),
    ),
    (
        "GetPure3dObject__6FePageG13tUidUnaligned",
        Ok(
            "FePage::GetPure3dObject(tUidUnaligned)",
        ),
    ),
    (
        "GetPure3dObject__6FePagePCc",
        Ok(
            "FePage::GetPure3dObject(char const *)",
        ),
    ),
    (
        "IsPage__C6FePage",
        Ok(
            "FePage::IsPage(void) const",
        ),
    ),
    (
        "SetAlpha__6FePagef",
        Ok(
            "FePage::SetAlpha(float)",
        ),
    ),
    (
        "__tft7rVector1Zi",
        Ok(
            "rVector<int> type_info function",
        ),
    ),
    (
        "__tf6FePage",
        Ok(
            "FePage type_info function",
        ),
    ),
    (
        "__tfQ27Scrooby5Layer",
        Ok(
            "Scrooby::Layer type_info function",
        ),
    ),
    (
        "__Q27Scrooby8Drawable",
        Ok(
            "Scrooby::Drawable::Drawable(void)",
        ),
    ),
    (
        "__Q27Scrooby5Owner",
        Ok(
            "Scrooby::Owner::Owner(void)",
        ),
    ),
    (
        "__Q27Scrooby4Pagei",
        Ok(
            "Scrooby::Page::Page(int)",
        ),
    ),
    (
        "_$_t7rVector1Zi",
        Ok(
            "rVector<int>::~rVector(void)",
        ),
    ),
    (
        "__tfQ27Scrooby5Owner",
        Ok(
            "Scrooby::Owner type_info function",
        ),
    ),
    (
        "__tfQ27Scrooby4Page",
        Ok(
            "Scrooby::Page type_info function",
        ),
    ),
    (
        "__8FeParenti",
        Ok(
            "FeParent::FeParent(int)",
        ),
    ),
    (
        "_$_8FeParent",
        Ok(
            "FeParent::~FeParent(void)",
        ),
    ),
    (
        "ResetIter__C8FeParent",
        Ok(
            "FeParent::ResetIter(void) const",
        ),
    ),
    (
        "AddChild__8FeParentP8FeEntity",
        Ok(
            "FeParent::AddChild(FeEntity *)",
        ),
    ),
    (
        "RemoveChild__8FeParentP8FeEntity",
        Ok(
            "FeParent::RemoveChild(FeEntity *)",
        ),
    ),
    (
        "ReplaceChild__8FeParentP8FeEntityT1",
        Ok(
            "FeParent::ReplaceChild(FeEntity *, FeEntity *)",
        ),
    ),
    (
        "Resize__8FeParentUi",
        Ok(
            "FeParent::Resize(unsigned int)",
        ),
    ),
    (
        "GetChild__8FeParentPCc",
        Ok(
            "FeParent::GetChild(char const *)",
        ),
    ),
    (
        "GetChild__8FeParentG13tUidUnaligned",
        Ok(
            "FeParent::GetChild(tUidUnaligned)",
        ),
    ),
    (
        "GetChildIndex__8FeParenti",
        Ok(
            "FeParent::GetChildIndex(int)",
        ),
    ),
    (
        "GetChildIndex__C8FeParenti",
        Ok(
            "FeParent::GetChildIndex(int) const",
        ),
    ),
    (
        "GetChildDrawable__8FeParentUi",
        Ok(
            "FeParent::GetChildDrawable(unsigned int)",
        ),
    ),
    (
        "GetChildrenCount__C8FeParent",
        Ok(
            "FeParent::GetChildrenCount(void) const",
        ),
    ),
    (
        "GetGroup__8FeParentPCc",
        Ok(
            "FeParent::GetGroup(char const *)",
        ),
    ),
    (
        "GetGroup__8FeParentG13tUidUnaligned",
        Ok(
            "FeParent::GetGroup(tUidUnaligned)",
        ),
    ),
    (
        "GetLayer__8FeParentPCc",
        Ok(
            "FeParent::GetLayer(char const *)",
        ),
    ),
    (
        "GetLayer__8FeParentG13tUidUnaligned",
        Ok(
            "FeParent::GetLayer(tUidUnaligned)",
        ),
    ),
    (
        "GetPolygon__8FeParentPCc",
        Ok(
            "FeParent::GetPolygon(char const *)",
        ),
    ),
    (
        "GetPolygon__8FeParentG13tUidUnaligned",
        Ok(
            "FeParent::GetPolygon(tUidUnaligned)",
        ),
    ),
    (
        "GetSprite__8FeParentPCc",
        Ok(
            "FeParent::GetSprite(char const *)",
        ),
    ),
    (
        "GetSprite__8FeParentG13tUidUnaligned",
        Ok(
            "FeParent::GetSprite(tUidUnaligned)",
        ),
    ),
    (
        "GetText__8FeParentPCc",
        Ok(
            "FeParent::GetText(char const *)",
        ),
    ),
    (
        "GetText__8FeParentG13tUidUnaligned",
        Ok(
            "FeParent::GetText(tUidUnaligned)",
        ),
    ),
    (
        "GetMovie__8FeParentPCc",
        Ok(
            "FeParent::GetMovie(char const *)",
        ),
    ),
    (
        "GetMovie__8FeParentG13tUidUnaligned",
        Ok(
            "FeParent::GetMovie(tUidUnaligned)",
        ),
    ),
    (
        "GetPure3dObject__8FeParentPCc",
        Ok(
            "FeParent::GetPure3dObject(char const *)",
        ),
    ),
    (
        "GetPure3dObject__8FeParentG13tUidUnaligned",
        Ok(
            "FeParent::GetPure3dObject(tUidUnaligned)",
        ),
    ),
    (
        "Size__C8FeParent",
        Ok(
            "FeParent::Size(void) const",
        ),
    ),
    (
        "__tf8FeParent",
        Ok(
            "FeParent type_info function",
        ),
    ),
    (
        "__tfQ27Scrooby7Polygon",
        Ok(
            "Scrooby::Polygon type_info function",
        ),
    ),
    (
        "__9FePolygoniRC5tName",
        Ok(
            "FePolygon::FePolygon(int, tName const &)",
        ),
    ),
    (
        "_$_9FePolygon",
        Ok(
            "FePolygon::~FePolygon(void)",
        ),
    ),
    (
        "Reset__9FePolygon",
        Ok(
            "FePolygon::Reset(void)",
        ),
    ),
    (
        "SetNumVertex__9FePolygoni",
        Ok(
            "FePolygon::SetNumVertex(int)",
        ),
    ),
    (
        "SetVertexLocation__9FePolygoniii",
        Ok(
            "FePolygon::SetVertexLocation(int, int, int)",
        ),
    ),
    (
        "SetVertexColour__9FePolygoniiii",
        Ok(
            "FePolygon::SetVertexColour(int, int, int, int)",
        ),
    ),
    (
        "SetVertexColour__9FePolygonUiG10pddiColour",
        Ok(
            "FePolygon::SetVertexColour(unsigned int, pddiColour)",
        ),
    ),
    (
        "SetVertexAlpha__9FePolygonif",
        Ok(
            "FePolygon::SetVertexAlpha(int, float)",
        ),
    ),
    (
        "GetBoundingBox__C9FePolygonRiN31",
        Ok(
            "FePolygon::GetBoundingBox(int &, int &, int &, int &) const",
        ),
    ),
    (
        "GetBoundingBoxSize__C9FePolygonRiT1",
        Ok(
            "FePolygon::GetBoundingBoxSize(int &, int &) const",
        ),
    ),
    (
        "GetNumOfVertexes__9FePolygon",
        Ok(
            "FePolygon::GetNumOfVertexes(void)",
        ),
    ),
    (
        "GetVertexAlpha__C9FePolygoni",
        Ok(
            "FePolygon::GetVertexAlpha(int) const",
        ),
    ),
    (
        "GetVertexColour__C9FePolygoni",
        Ok(
            "FePolygon::GetVertexColour(int) const",
        ),
    ),
    (
        "GetVertexLocation__C9FePolygoniRiT2",
        Ok(
            "FePolygon::GetVertexLocation(int, int &, int &) const",
        ),
    ),
    (
        "Display__9FePolygon",
        Ok(
            "FePolygon::Display(void)",
        ),
    ),
    (
        "RecalculateDisplayColour__9FePolygoni",
        Ok(
            "FePolygon::RecalculateDisplayColour(int)",
        ),
    ),
    (
        "SetAlpha__9FePolygonf",
        Ok(
            "FePolygon::SetAlpha(float)",
        ),
    ),
    (
        "SetColour__9FePolygonG10pddiColour",
        Ok(
            "FePolygon::SetColour(pddiColour)",
        ),
    ),
    (
        "__tf9FePolygon",
        Ok(
            "FePolygon type_info function",
        ),
    ),
    (
        "__Q27Scrooby7Polygoni",
        Ok(
            "Scrooby::Polygon::Polygon(int)",
        ),
    ),
    (
        "__9FeProjectiPCc",
        Ok(
            "FeProject::FeProject(int, char const *)",
        ),
    ),
    (
        "_$_9FeProject",
        Ok(
            "FeProject::~FeProject(void)",
        ),
    ),
    (
        "GetCurrentScreen__9FeProject",
        Ok(
            "FeProject::GetCurrentScreen(void)",
        ),
    ),
    (
        "GetScreenCount__9FeProject",
        Ok(
            "FeProject::GetScreenCount(void)",
        ),
    ),
    (
        "GotoScreenByIndex__9FeProjectiPQ27Scrooby18GotoScreenCallback",
        Ok(
            "FeProject::GotoScreenByIndex(int, Scrooby::GotoScreenCallback *)",
        ),
    ),
    (
        "GotoScreen__9FeProjectPCcPQ27Scrooby18GotoScreenCallback",
        Ok(
            "FeProject::GotoScreen(char const *, Scrooby::GotoScreenCallback *)",
        ),
    ),
    (
        "GotoScreen__9FeProjectG13tUidUnalignedPQ27Scrooby18GotoScreenCallback",
        Ok(
            "FeProject::GotoScreen(tUidUnaligned, Scrooby::GotoScreenCallback *)",
        ),
    ),
    (
        "GotoScreen__9FeProjectPQ27Scrooby6ScreenPQ27Scrooby18GotoScreenCallback",
        Ok(
            "FeProject::GotoScreen(Scrooby::Screen *, Scrooby::GotoScreenCallback *)",
        ),
    ),
    (
        "SetScreenPath__9FeProjectPCc",
        Ok(
            "FeProject::SetScreenPath(char const *)",
        ),
    ),
    (
        "SetPagePath__9FeProjectPCc",
        Ok(
            "FeProject::SetPagePath(char const *)",
        ),
    ),
    (
        "SetResPath__9FeProjectPCc",
        Ok(
            "FeProject::SetResPath(char const *)",
        ),
    ),
    (
        "LoadScreen__9FeProjectPQ27Scrooby6ScreenPQ27Scrooby18GotoScreenCallback",
        Ok(
            "FeProject::LoadScreen(Scrooby::Screen *, Scrooby::GotoScreenCallback *)",
        ),
    ),
    (
        "UnLoadScreen__9FeProjectPQ27Scrooby6Screen",
        Ok(
            "FeProject::UnLoadScreen(Scrooby::Screen *)",
        ),
    ),
    (
        "IsScreenLoaded__9FeProjectPQ27Scrooby6Screen",
        Ok(
            "FeProject::IsScreenLoaded(Scrooby::Screen *)",
        ),
    ),
    (
        "GetScreen__9FeProjectPCc",
        Ok(
            "FeProject::GetScreen(char const *)",
        ),
    ),
    (
        "GetScreen__9FeProjectG13tUidUnaligned",
        Ok(
            "FeProject::GetScreen(tUidUnaligned)",
        ),
    ),
    (
        "SetScreenRes__9FeProjectff",
        Ok(
            "FeProject::SetScreenRes(float, float)",
        ),
    ),
    (
        "GetScreenWidth__9FeProject",
        Ok(
            "FeProject::GetScreenWidth(void)",
        ),
    ),
    (
        "GetScreenHeight__9FeProject",
        Ok(
            "FeProject::GetScreenHeight(void)",
        ),
    ),
    (
        "OnResourceLoadComplete__9FeProject",
        Ok(
            "FeProject::OnResourceLoadComplete(void)",
        ),
    ),
    (
        "__tfQ27Scrooby23ResourceManagerCallback",
        Ok(
            "Scrooby::ResourceManagerCallback type_info function",
        ),
    ),
    (
        "__tf9FeProject",
        Ok(
            "FeProject type_info function",
        ),
    ),
    (
        "__tfQ27Scrooby6Screen",
        Ok(
            "Scrooby::Screen type_info function",
        ),
    ),
    (
        "__Q27Scrooby7Project",
        Ok(
            "Scrooby::Project::Project(void)",
        ),
    ),
    (
        "__Q27Scrooby23ResourceManagerCallback",
        Ok(
            "Scrooby::ResourceManagerCallback::ResourceManagerCallback(void)",
        ),
    ),
    (
        "_$_Q27Scrooby23ResourceManagerCallback",
        Ok(
            "Scrooby::ResourceManagerCallback::~ResourceManagerCallback(void)",
        ),
    ),
    (
        "IsDrawable__9FeProject",
        Ok(
            "FeProject::IsDrawable(void)",
        ),
    ),
    (
        "IsLoadingScreens__C9FeProject",
        Ok(
            "FeProject::IsLoadingScreens(void) const",
        ),
    ),
    (
        "__tfQ27Scrooby7Project",
        Ok(
            "Scrooby::Project type_info function",
        ),
    ),
    (
        "__14FePure3dObjectiRC5tNameii",
        Ok(
            "FePure3dObject::FePure3dObject(int, tName const &, int, int)",
        ),
    ),
    (
        "_$_14FePure3dObject",
        Ok(
            "FePure3dObject::~FePure3dObject(void)",
        ),
    ),
    (
        "Reset__14FePure3dObject",
        Ok(
            "FePure3dObject::Reset(void)",
        ),
    ),
    (
        "Update__14FePure3dObjectf",
        Ok(
            "FePure3dObject::Update(float)",
        ),
    ),
    (
        "Display__14FePure3dObject",
        Ok(
            "FePure3dObject::Display(void)",
        ),
    ),
    (
        "Add3dModel__14FePure3dObjectPCc",
        Ok(
            "FePure3dObject::Add3dModel(char const *)",
        ),
    ),
    (
        "SetCamera__14FePure3dObjectP7tCamera",
        Ok(
            "FePure3dObject::SetCamera(tCamera *)",
        ),
    ),
    (
        "GetCamera__14FePure3dObject",
        Ok(
            "FePure3dObject::GetCamera(void)",
        ),
    ),
    (
        "GetMultiController__14FePure3dObject",
        Ok(
            "FePure3dObject::GetMultiController(void)",
        ),
    ),
    (
        "AdvanceAnimation__14FePure3dObjectf",
        Ok(
            "FePure3dObject::AdvanceAnimation(float)",
        ),
    ),
    (
        "Render__14FePure3dObject",
        Ok(
            "FePure3dObject::Render(void)",
        ),
    ),
    (
        "GetMatrix__14FePure3dObject",
        Ok(
            "FePure3dObject::GetMatrix(void)",
        ),
    ),
    (
        "GetMatrix__C14FePure3dObject",
        Ok(
            "FePure3dObject::GetMatrix(void) const",
        ),
    ),
    (
        "Translate__14FePure3dObjectii",
        Ok(
            "FePure3dObject::Translate(int, int)",
        ),
    ),
    (
        "SetTranslation__14FePure3dObjectii",
        Ok(
            "FePure3dObject::SetTranslation(int, int)",
        ),
    ),
    (
        "ResetTransformation__14FePure3dObject",
        Ok(
            "FePure3dObject::ResetTransformation(void)",
        ),
    ),
    (
        "GetDrawable__14FePure3dObject",
        Ok(
            "FePure3dObject::GetDrawable(void)",
        ),
    ),
    (
        "SetDrawable__14FePure3dObjectP9tDrawable",
        Ok(
            "FePure3dObject::SetDrawable(tDrawable *)",
        ),
    ),
    (
        "SetMultiController__14FePure3dObjectP16tMultiController",
        Ok(
            "FePure3dObject::SetMultiController(tMultiController *)",
        ),
    ),
    (
        "SetDefaultLight__14FePure3dObjectP6tLight",
        Ok(
            "FePure3dObject::SetDefaultLight(tLight *)",
        ),
    ),
    (
        "__tf14FePure3dObject",
        Ok(
            "FePure3dObject type_info function",
        ),
    ),
    (
        "__Q27Scrooby14HasBoundingBoxi",
        Ok(
            "Scrooby::HasBoundingBox::HasBoundingBox(int)",
        ),
    ),
    (
        "__Q27Scrooby15BoundedDrawablei",
        Ok(
            "Scrooby::BoundedDrawable::BoundedDrawable(int)",
        ),
    ),
    (
        "__Q27Scrooby12Pure3dObjecti",
        Ok(
            "Scrooby::Pure3dObject::Pure3dObject(int)",
        ),
    ),
    (
        "GetView__C14FePure3dObject",
        Ok(
            "FePure3dObject::GetView(void) const",
        ),
    ),
    (
        "SetCameraSettings__14FePure3dObjectff",
        Ok(
            "FePure3dObject::SetCameraSettings(float, float)",
        ),
    ),
    (
        "SetDrawableTranslation__14FePure3dObjectfff",
        Ok(
            "FePure3dObject::SetDrawableTranslation(float, float, float)",
        ),
    ),
    (
        "SetDrawableScale__14FePure3dObjectf",
        Ok(
            "FePure3dObject::SetDrawableScale(float)",
        ),
    ),
    (
        "SetColourWrite__14FePure3dObjectb",
        Ok(
            "FePure3dObject::SetColourWrite(bool)",
        ),
    ),
    (
        "SetClearDepthBuffer__14FePure3dObjectb",
        Ok(
            "FePure3dObject::SetClearDepthBuffer(bool)",
        ),
    ),
    (
        "SetZBufferEnabled__14FePure3dObjectb",
        Ok(
            "FePure3dObject::SetZBufferEnabled(bool)",
        ),
    ),
    (
        "SetWideScreenCorrectionEnabled__14FePure3dObjectb",
        Ok(
            "FePure3dObject::SetWideScreenCorrectionEnabled(bool)",
        ),
    ),
    (
        "__tfQ27Scrooby12Pure3dObject",
        Ok(
            "Scrooby::Pure3dObject type_info function",
        ),
    ),
    (
        "__8FeScreeniPCcP9FeProject",
        Ok(
            "FeScreen::FeScreen(int, char const *, FeProject *)",
        ),
    ),
    (
        "_$_8FeScreen",
        Ok(
            "FeScreen::~FeScreen(void)",
        ),
    ),
    (
        "GetBoundingBox__C8FeScreenRiN31",
        Ok(
            "FeScreen::GetBoundingBox(int &, int &, int &, int &) const",
        ),
    ),
    (
        "GetBoundingBoxSize__C8FeScreenRiT1",
        Ok(
            "FeScreen::GetBoundingBoxSize(int &, int &) const",
        ),
    ),
    (
        "AddChild__8FeScreenP8FeEntity",
        Ok(
            "FeScreen::AddChild(FeEntity *)",
        ),
    ),
    (
        "Display__8FeScreen",
        Ok(
            "FeScreen::Display(void)",
        ),
    ),
    (
        "DisplayBackground__8FeScreen",
        Ok(
            "FeScreen::DisplayBackground(void)",
        ),
    ),
    (
        "DisplayForeground__8FeScreen",
        Ok(
            "FeScreen::DisplayForeground(void)",
        ),
    ),
    (
        "GetPage__8FeScreenPCc",
        Ok(
            "FeScreen::GetPage(char const *)",
        ),
    ),
    (
        "GetPage__8FeScreenG13tUidUnaligned",
        Ok(
            "FeScreen::GetPage(tUidUnaligned)",
        ),
    ),
    (
        "GetPageByIndex__8FeScreeni",
        Ok(
            "FeScreen::GetPageByIndex(int)",
        ),
    ),
    (
        "GetNumberOfPages__C8FeScreen",
        Ok(
            "FeScreen::GetNumberOfPages(void) const",
        ),
    ),
    (
        "__tf8FeScreen",
        Ok(
            "FeScreen type_info function",
        ),
    ),
    (
        "__Q27Scrooby6Screeni",
        Ok(
            "Scrooby::Screen::Screen(int)",
        ),
    ),
    (
        "SetScale__8FeScreenf",
        Ok(
            "FeScreen::SetScale(float)",
        ),
    ),
    (
        "GetScale__C8FeScreen",
        Ok(
            "FeScreen::GetScale(void) const",
        ),
    ),
    (
        "Reload__8FeScreen",
        Ok(
            "FeScreen::Reload(void)",
        ),
    ),
    (
        "__8FeSpriteiRC5tNameii",
        Ok(
            "FeSprite::FeSprite(int, tName const &, int, int)",
        ),
    ),
    (
        "_$_8FeSprite",
        Ok(
            "FeSprite::~FeSprite(void)",
        ),
    ),
    (
        "AddImage__8FeSpritePCc",
        Ok(
            "FeSprite::AddImage(char const *)",
        ),
    ),
    (
        "SetImage__8FeSpriteiPCc",
        Ok(
            "FeSprite::SetImage(int, char const *)",
        ),
    ),
    (
        "Display__8FeSprite",
        Ok(
            "FeSprite::Display(void)",
        ),
    ),
    (
        "GetIndex__8FeSprite",
        Ok(
            "FeSprite::GetIndex(void)",
        ),
    ),
    (
        "GetNumOfImages__8FeSprite",
        Ok(
            "FeSprite::GetNumOfImages(void)",
        ),
    ),
    (
        "Reset__8FeSprite",
        Ok(
            "FeSprite::Reset(void)",
        ),
    ),
    (
        "ResizeToBoundingBox__8FeSprite",
        Ok(
            "FeSprite::ResizeToBoundingBox(void)",
        ),
    ),
    (
        "SetIndex__8FeSpritei",
        Ok(
            "FeSprite::SetIndex(int)",
        ),
    ),
    (
        "SetRawSprite__8FeSpriteP7tSpriteb",
        Ok(
            "FeSprite::SetRawSprite(tSprite *, bool)",
        ),
    ),
    (
        "DisplayBitmapText__8FeSprite",
        Ok(
            "FeSprite::DisplayBitmapText(void)",
        ),
    ),
    (
        "DisplayBitmapChar__8FeSpriteUs",
        Ok(
            "FeSprite::DisplayBitmapChar(unsigned short)",
        ),
    ),
    (
        "SetSpriteMode__8FeSpriteQ27Scrooby11eSpriteMode",
        Ok(
            "FeSprite::SetSpriteMode(Scrooby::eSpriteMode)",
        ),
    ),
    (
        "CreateBitmapTextBuffer__8FeSpriteUi",
        Ok(
            "FeSprite::CreateBitmapTextBuffer(unsigned int)",
        ),
    ),
    (
        "SetBitmapText__8FeSpritePCUs",
        Ok(
            "FeSprite::SetBitmapText(unsigned short const *)",
        ),
    ),
    (
        "SetBitmapText__8FeSpritePCc",
        Ok(
            "FeSprite::SetBitmapText(char const *)",
        ),
    ),
    (
        "SetBitmapTextSpacing__8FeSprites",
        Ok(
            "FeSprite::SetBitmapTextSpacing(short)",
        ),
    ),
    (
        "ConvertToScreenX__8FeSpritei",
        Ok(
            "FeSprite::ConvertToScreenX(int)",
        ),
    ),
    (
        "ConvertToScreenY__8FeSpritei",
        Ok(
            "FeSprite::ConvertToScreenY(int)",
        ),
    ),
    (
        "SetupTextWrapping__8FeSprite",
        Ok(
            "FeSprite::SetupTextWrapping(void)",
        ),
    ),
    (
        "GetRawSprite__8FeSprite",
        Ok(
            "FeSprite::GetRawSprite(void)",
        ),
    ),
    (
        "__tft7rVector1ZP13PascalCString",
        Ok(
            "rVector<PascalCString *> type_info function",
        ),
    ),
    (
        "__tf8FeSprite",
        Ok(
            "FeSprite type_info function",
        ),
    ),
    (
        "__Q27Scrooby6Spritei",
        Ok(
            "Scrooby::Sprite::Sprite(int)",
        ),
    ),
    (
        "_$_t7rVector1ZP13PascalCString",
        Ok(
            "rVector<PascalCString *>::~rVector(void)",
        ),
    ),
    (
        "__6FeTextiRC5tNameii",
        Ok(
            "FeText::FeText(int, tName const &, int, int)",
        ),
    ),
    (
        "_$_6FeText",
        Ok(
            "FeText::~FeText(void)",
        ),
    ),
    (
        "AddHardCodedString__6FeTextPCc",
        Ok(
            "FeText::AddHardCodedString(char const *)",
        ),
    ),
    (
        "AddTextBibleString__6FeTextPCcT1",
        Ok(
            "FeText::AddTextBibleString(char const *, char const *)",
        ),
    ),
    (
        "Display__6FeText",
        Ok(
            "FeText::Display(void)",
        ),
    ),
    (
        "GetIndex__6FeText",
        Ok(
            "FeText::GetIndex(void)",
        ),
    ),
    (
        "GetNumOfStrings__6FeText",
        Ok(
            "FeText::GetNumOfStrings(void)",
        ),
    ),
    (
        "GetString__6FeText",
        Ok(
            "FeText::GetString(void)",
        ),
    ),
    (
        "GetStringBuffer__6FeText",
        Ok(
            "FeText::GetStringBuffer(void)",
        ),
    ),
    (
        "SetStringBuffer__6FeTextPUs",
        Ok(
            "FeText::SetStringBuffer(unsigned short *)",
        ),
    ),
    (
        "GetStringBuffer__6FeTexti",
        Ok(
            "FeText::GetStringBuffer(int)",
        ),
    ),
    (
        "GetString__6FeTexti",
        Ok(
            "FeText::GetString(int)",
        ),
    ),
    (
        "GetTextHeight__6FeText",
        Ok(
            "FeText::GetTextHeight(void)",
        ),
    ),
    (
        "GetTextMode__6FeText",
        Ok(
            "FeText::GetTextMode(void)",
        ),
    ),
    (
        "GetTextWidth__6FeText",
        Ok(
            "FeText::GetTextWidth(void)",
        ),
    ),
    (
        "Reset__6FeText",
        Ok(
            "FeText::Reset(void)",
        ),
    ),
    (
        "ReCalculateAlignment__6FeText",
        Ok(
            "FeText::ReCalculateAlignment(void)",
        ),
    ),
    (
        "ResetText__6FeText",
        Ok(
            "FeText::ResetText(void)",
        ),
    ),
    (
        "RestoreDefaultColour__6FeText",
        Ok(
            "FeText::RestoreDefaultColour(void)",
        ),
    ),
    (
        "SetAlpha__6FeTextf",
        Ok(
            "FeText::SetAlpha(float)",
        ),
    ),
    (
        "SetColour__6FeTextiii",
        Ok(
            "FeText::SetColour(int, int, int)",
        ),
    ),
    (
        "SetColour__6FeTextG10pddiColour",
        Ok(
            "FeText::SetColour(pddiColour)",
        ),
    ),
    (
        "SetString__6FeTextiPCcT2",
        Ok(
            "FeText::SetString(int, char const *, char const *)",
        ),
    ),
    (
        "SetString__6FeTextiPCcUi",
        Ok(
            "FeText::SetString(int, char const *, unsigned int)",
        ),
    ),
    (
        "SetString__6FeTextiR13UnicodeStringPCc",
        Ok(
            "FeText::SetString(int, UnicodeString &, char const *)",
        ),
    ),
    (
        "SetString__6FeTextiR13UnicodeStringUi",
        Ok(
            "FeText::SetString(int, UnicodeString &, unsigned int)",
        ),
    ),
    (
        "SetIndex__6FeTexti",
        Ok(
            "FeText::SetIndex(int)",
        ),
    ),
    (
        "SetTextMode__6FeTextQ27Scrooby8TextMode",
        Ok(
            "FeText::SetTextMode(Scrooby::TextMode)",
        ),
    ),
    (
        "SetTextStyle__6FeTextPCc",
        Ok(
            "FeText::SetTextStyle(char const *)",
        ),
    ),
    (
        "SetTextStyle__6FeTextUi",
        Ok(
            "FeText::SetTextStyle(unsigned int)",
        ),
    ),
    (
        "SetDisplayShadow__6FeTextb",
        Ok(
            "FeText::SetDisplayShadow(bool)",
        ),
    ),
    (
        "IsDisplayingShadow__6FeText",
        Ok(
            "FeText::IsDisplayingShadow(void)",
        ),
    ),
    (
        "SetShadowOffset__6FeTextii",
        Ok(
            "FeText::SetShadowOffset(int, int)",
        ),
    ),
    (
        "GetXShadowOffset__6FeText",
        Ok(
            "FeText::GetXShadowOffset(void)",
        ),
    ),
    (
        "GetYShadowOffset__6FeText",
        Ok(
            "FeText::GetYShadowOffset(void)",
        ),
    ),
    (
        "SetShadowColour__6FeTextG10pddiColour",
        Ok(
            "FeText::SetShadowColour(pddiColour)",
        ),
    ),
    (
        "GetShadowColour__6FeText",
        Ok(
            "FeText::GetShadowColour(void)",
        ),
    ),
    (
        "GetString__17FeTextChildString",
        Ok(
            "FeTextChildString::GetString(void)",
        ),
    ),
    (
        "__26FeTextChildHardCodedStringG13UnicodeString",
        Ok(
            "FeTextChildHardCodedString::FeTextChildHardCodedString(UnicodeString)",
        ),
    ),
    (
        "_$_26FeTextChildHardCodedString",
        Ok(
            "FeTextChildHardCodedString::~FeTextChildHardCodedString(void)",
        ),
    ),
    (
        "GetStringBuffer__26FeTextChildHardCodedString",
        Ok(
            "FeTextChildHardCodedString::GetStringBuffer(void)",
        ),
    ),
    (
        "IsValid__26FeTextChildHardCodedString",
        Ok(
            "FeTextChildHardCodedString::IsValid(void)",
        ),
    ),
    (
        "__26FeTextChildTextBibleStringUiPCc",
        Ok(
            "FeTextChildTextBibleString::FeTextChildTextBibleString(unsigned int, char const *)",
        ),
    ),
    (
        "_$_26FeTextChildTextBibleString",
        Ok(
            "FeTextChildTextBibleString::~FeTextChildTextBibleString(void)",
        ),
    ),
    (
        "GetStringBuffer__26FeTextChildTextBibleString",
        Ok(
            "FeTextChildTextBibleString::GetStringBuffer(void)",
        ),
    ),
    (
        "GetTextBibleResourceId__C26FeTextChildTextBibleString",
        Ok(
            "FeTextChildTextBibleString::GetTextBibleResourceId(void) const",
        ),
    ),
    (
        "IsValid__26FeTextChildTextBibleString",
        Ok(
            "FeTextChildTextBibleString::IsValid(void)",
        ),
    ),
    (
        "__tf6FeText",
        Ok(
            "FeText type_info function",
        ),
    ),
    (
        "__tf17FeTextChildString",
        Ok(
            "FeTextChildString type_info function",
        ),
    ),
    (
        "__tf26FeTextChildHardCodedString",
        Ok(
            "FeTextChildHardCodedString type_info function",
        ),
    ),
    (
        "__tf26FeTextChildTextBibleString",
        Ok(
            "FeTextChildTextBibleString type_info function",
        ),
    ),
    (
        "__Q27Scrooby4Texti",
        Ok(
            "Scrooby::Text::Text(int)",
        ),
    ),
    (
        "SetDisplayOutline__6FeTextb",
        Ok(
            "FeText::SetDisplayOutline(bool)",
        ),
    ),
    (
        "IsDisplayingOutline__C6FeText",
        Ok(
            "FeText::IsDisplayingOutline(void) const",
        ),
    ),
    (
        "SetOutlineColour__6FeTextG10pddiColour",
        Ok(
            "FeText::SetOutlineColour(pddiColour)",
        ),
    ),
    (
        "GetOutlineColour__C6FeText",
        Ok(
            "FeText::GetOutlineColour(void) const",
        ),
    ),
    (
        "GetFont__C6FeText",
        Ok(
            "FeText::GetFont(void) const",
        ),
    ),
    (
        "_$_17FeTextChildString",
        Ok(
            "FeTextChildString::~FeTextChildString(void)",
        ),
    ),
    (
        "__17FeTextChildString",
        Ok(
            "FeTextChildString::FeTextChildString(void)",
        ),
    ),
    (
        "IsDrawable__17FeTextChildString",
        Ok(
            "FeTextChildString::IsDrawable(void)",
        ),
    ),
    (
        "__11FeTextBiblei",
        Ok(
            "FeTextBible::FeTextBible(int)",
        ),
    ),
    (
        "_$_11FeTextBible",
        Ok(
            "FeTextBible::~FeTextBible(void)",
        ),
    ),
    (
        "GetWChar__11FeTextBibleUi",
        Ok(
            "FeTextBible::GetWChar(unsigned int)",
        ),
    ),
    (
        "GetWChar__11FeTextBiblePCc",
        Ok(
            "FeTextBible::GetWChar(char const *)",
        ),
    ),
    (
        "SetLanguage__11FeTextBiblec",
        Ok(
            "FeTextBible::SetLanguage(char)",
        ),
    ),
    (
        "__tft7rVector1ZP10FeLanguage",
        Ok(
            "rVector<FeLanguage *> type_info function",
        ),
    ),
    (
        "__tf11FeTextBible",
        Ok(
            "FeTextBible type_info function",
        ),
    ),
    (
        "__Q27Scrooby9TextBible",
        Ok(
            "Scrooby::TextBible::TextBible(void)",
        ),
    ),
    (
        "IsDrawable__11FeTextBible",
        Ok(
            "FeTextBible::IsDrawable(void)",
        ),
    ),
    (
        "_$_t7rVector1ZP10FeLanguage",
        Ok(
            "rVector<FeLanguage *>::~rVector(void)",
        ),
    ),
    (
        "__tfQ27Scrooby9TextBible",
        Ok(
            "Scrooby::TextBible type_info function",
        ),
    ),
    (
        "__11FeTextStyle",
        Ok(
            "FeTextStyle::FeTextStyle(void)",
        ),
    ),
    (
        "_$_11FeTextStyle",
        Ok(
            "FeTextStyle::~FeTextStyle(void)",
        ),
    ),
    (
        "SetFontName__11FeTextStyleG13PascalCString",
        Ok(
            "FeTextStyle::SetFontName(PascalCString)",
        ),
    ),
    (
        "SetFontFilename__11FeTextStyleG13PascalCString",
        Ok(
            "FeTextStyle::SetFontFilename(PascalCString)",
        ),
    ),
    (
        "SetFontStyle__11FeTextStyleG13PascalCString",
        Ok(
            "FeTextStyle::SetFontStyle(PascalCString)",
        ),
    ),
    (
        "SetColour__11FeTextStyleP10pddiColour",
        Ok(
            "FeTextStyle::SetColour(pddiColour *)",
        ),
    ),
    (
        "__tf11FeTextStyle",
        Ok(
            "FeTextStyle type_info function",
        ),
    ),
    (
        "IsDrawable__11FeTextStyle",
        Ok(
            "FeTextStyle::IsDrawable(void)",
        ),
    ),
    (
        "__Q212tLinearTable11RawIteratorP12tLinearTable",
        Ok(
            "tLinearTable::RawIterator::RawIterator(tLinearTable *)",
        ),
    ),
    (
        "_$_Q212tLinearTable11RawIterator",
        Ok(
            "tLinearTable::RawIterator::~RawIterator(void)",
        ),
    ),
    (
        "First__Q212tLinearTable11RawIterator",
        Ok(
            "tLinearTable::RawIterator::First(void)",
        ),
    ),
    (
        "First__Q212tLinearTable11RawIteratorG13tUidUnaligned",
        Ok(
            "tLinearTable::RawIterator::First(tUidUnaligned)",
        ),
    ),
    (
        "FirstFree__Q212tLinearTable11RawIteratorG13tUidUnaligned",
        Ok(
            "tLinearTable::RawIterator::FirstFree(tUidUnaligned)",
        ),
    ),
    (
        "Next__Q212tLinearTable11RawIterator",
        Ok(
            "tLinearTable::RawIterator::Next(void)",
        ),
    ),
    (
        "FirstIndex__Q212tLinearTable11RawIteratorG13tUidUnaligned",
        Ok(
            "tLinearTable::RawIterator::FirstIndex(tUidUnaligned)",
        ),
    ),
    (
        "FirstIndex__Q212tLinearTable11RawIteratorP8FeEntity",
        Ok(
            "tLinearTable::RawIterator::FirstIndex(FeEntity *)",
        ),
    ),
    (
        "Current__Q212tLinearTable11RawIterator",
        Ok(
            "tLinearTable::RawIterator::Current(void)",
        ),
    ),
    (
        "__12tLinearTable",
        Ok(
            "tLinearTable::tLinearTable(void)",
        ),
    ),
    (
        "_$_12tLinearTable",
        Ok(
            "tLinearTable::~tLinearTable(void)",
        ),
    ),
    (
        "RemoveAll__12tLinearTable",
        Ok(
            "tLinearTable::RemoveAll(void)",
        ),
    ),
    (
        "Grow__12tLinearTable",
        Ok(
            "tLinearTable::Grow(void)",
        ),
    ),
    (
        "Repack__12tLinearTable",
        Ok(
            "tLinearTable::Repack(void)",
        ),
    ),
    (
        "Restore__12tLinearTablePP8FeEntityi",
        Ok(
            "tLinearTable::Restore(FeEntity **, int)",
        ),
    ),
    (
        "Find__12tLinearTableG13tUidUnaligned",
        Ok(
            "tLinearTable::Find(tUidUnaligned)",
        ),
    ),
    (
        "StoreNoAddRef__12tLinearTableP8FeEntity",
        Ok(
            "tLinearTable::StoreNoAddRef(FeEntity *)",
        ),
    ),
    (
        "Store__12tLinearTableP8FeEntity",
        Ok(
            "tLinearTable::Store(FeEntity *)",
        ),
    ),
    (
        "Remove__12tLinearTableP8FeEntity",
        Ok(
            "tLinearTable::Remove(FeEntity *)",
        ),
    ),
    (
        "Replace__12tLinearTableP8FeEntityT1",
        Ok(
            "tLinearTable::Replace(FeEntity *, FeEntity *)",
        ),
    ),
    (
        "Resize__12tLinearTableUi",
        Ok(
            "tLinearTable::Resize(unsigned int)",
        ),
    ),
    (
        "__tf12tLinearTable",
        Ok(
            "tLinearTable type_info function",
        ),
    ),
    (
        "AddRef__12tLinearTable",
        Ok(
            "tLinearTable::AddRef(void)",
        ),
    ),
    (
        "Release__12tLinearTable",
        Ok(
            "tLinearTable::Release(void)",
        ),
    ),
    (
        "__13FeEntityDummy",
        Ok(
            "FeEntityDummy::FeEntityDummy(void)",
        ),
    ),
    (
        "_$_13FeEntityDummy",
        Ok(
            "FeEntityDummy::~FeEntityDummy(void)",
        ),
    ),
    (
        "__tf13FeEntityDummy",
        Ok(
            "FeEntityDummy type_info function",
        ),
    ),
    (
        "IsDrawable__13FeEntityDummy",
        Ok(
            "FeEntityDummy::IsDrawable(void)",
        ),
    ),
    (
        "__17FeResourceManageri",
        Ok(
            "FeResourceManager::FeResourceManager(int)",
        ),
    ),
    (
        "_$_17FeResourceManager",
        Ok(
            "FeResourceManager::~FeResourceManager(void)",
        ),
    ),
    (
        "AddResource__17FeResourceManagerPCcP8FeEntity12ResourceTypeT1",
        Ok(
            "FeResourceManager::AddResource(char const *, FeEntity *, ResourceType, char const *)",
        ),
    ),
    (
        "AddAlias__17FeResourceManagerRC5tNamei",
        Ok(
            "FeResourceManager::AddAlias(tName const &, int)",
        ),
    ),
    (
        "AddPure3dAttributes__17FeResourceManagerPCcT1i",
        Ok(
            "FeResourceManager::AddPure3dAttributes(char const *, char const *, int)",
        ),
    ),
    (
        "ContinueLoading__17FeResourceManager",
        Ok(
            "FeResourceManager::ContinueLoading(void)",
        ),
    ),
    (
        "GetCallback__C17FeResourceManager",
        Ok(
            "FeResourceManager::GetCallback(void) const",
        ),
    ),
    (
        "GetCamera__17FeResourceManageri",
        Ok(
            "FeResourceManager::GetCamera(int)",
        ),
    ),
    (
        "GetIndex__17FeResourceManagerRC5tNameb",
        Ok(
            "FeResourceManager::GetIndex(tName const &, bool)",
        ),
    ),
    (
        "GetMultiController__17FeResourceManageri",
        Ok(
            "FeResourceManager::GetMultiController(int)",
        ),
    ),
    (
        "GetResource__17FeResourceManagerPCc",
        Ok(
            "FeResourceManager::GetResource(char const *)",
        ),
    ),
    (
        "GetResource__17FeResourceManageri",
        Ok(
            "FeResourceManager::GetResource(int)",
        ),
    ),
    (
        "IsAsyncLoading__17FeResourceManager",
        Ok(
            "FeResourceManager::IsAsyncLoading(void)",
        ),
    ),
    (
        "LoadAll__17FeResourceManagerPQ27Scrooby23ResourceManagerCallback",
        Ok(
            "FeResourceManager::LoadAll(Scrooby::ResourceManagerCallback *)",
        ),
    ),
    (
        "LoadProject__17FeResourceManagerPQ27Scrooby7ProjectPQ27Scrooby23ResourceManagerCallback",
        Ok(
            "FeResourceManager::LoadProject(Scrooby::Project *, Scrooby::ResourceManagerCallback *)",
        ),
    ),
    (
        "ProjectLoadComplete__17FeResourceManager",
        Ok(
            "FeResourceManager::ProjectLoadComplete(void)",
        ),
    ),
    (
        "RegisterCementFile__17FeResourceManagerPCc",
        Ok(
            "FeResourceManager::RegisterCementFile(char const *)",
        ),
    ),
    (
        "RemoveResource__17FeResourceManagerP7tEntityPCc",
        Ok(
            "FeResourceManager::RemoveResource(tEntity *, char const *)",
        ),
    ),
    (
        "RemoveResource__17FeResourceManageriPCc",
        Ok(
            "FeResourceManager::RemoveResource(int, char const *)",
        ),
    ),
    (
        "RemoveAlias__17FeResourceManageri",
        Ok(
            "FeResourceManager::RemoveAlias(int)",
        ),
    ),
    (
        "RemoveP3DAttributes__17FeResourceManageri",
        Ok(
            "FeResourceManager::RemoveP3DAttributes(int)",
        ),
    ),
    (
        "SetCallback__17FeResourceManagerPQ27Scrooby23ResourceManagerCallback",
        Ok(
            "FeResourceManager::SetCallback(Scrooby::ResourceManagerCallback *)",
        ),
    ),
    (
        "SetInventorySection__17FeResourceManagerPCc",
        Ok(
            "FeResourceManager::SetInventorySection(char const *)",
        ),
    ),
    (
        "SetSecondaryInventorySection__17FeResourceManagerPCc",
        Ok(
            "FeResourceManager::SetSecondaryInventorySection(char const *)",
        ),
    ),
    (
        "SetLocalizationLanguage__17FeResourceManagerQ27Scrooby10XLLanguage",
        Ok(
            "FeResourceManager::SetLocalizationLanguage(Scrooby::XLLanguage)",
        ),
    ),
    (
        "UnloadAll__17FeResourceManager",
        Ok(
            "FeResourceManager::UnloadAll(void)",
        ),
    ),
    (
        "UnloadProject__17FeResourceManagerPQ27Scrooby7Project",
        Ok(
            "FeResourceManager::UnloadProject(Scrooby::Project *)",
        ),
    ),
    (
        "__Q217FeResourceManager24ResourceManagerEntryBase",
        Ok(
            "FeResourceManager::ResourceManagerEntryBase::ResourceManagerEntryBase(void)",
        ),
    ),
    (
        "__tfQ217FeResourceManager24ResourceManagerEntryBase",
        Ok(
            "FeResourceManager::ResourceManagerEntryBase type_info function",
        ),
    ),
    (
        "__tfQ217FeResourceManager13ResourceEntry",
        Ok(
            "FeResourceManager::ResourceEntry type_info function",
        ),
    ),
    (
        "__tfQ217FeResourceManager10AliasEntry",
        Ok(
            "FeResourceManager::AliasEntry type_info function",
        ),
    ),
    (
        "__tfQ217FeResourceManager21Pure3dAttributesEntry",
        Ok(
            "FeResourceManager::Pure3dAttributesEntry type_info function",
        ),
    ),
    (
        "__tft7rVector1ZPQ217FeResourceManager13ResourceEntry",
        Ok(
            "rVector<FeResourceManager::ResourceEntry *> type_info function",
        ),
    ),
    (
        "__tft7rVector1ZPQ217FeResourceManager10AliasEntry",
        Ok(
            "rVector<FeResourceManager::AliasEntry *> type_info function",
        ),
    ),
    (
        "__tft7rVector1ZPQ217FeResourceManager21Pure3dAttributesEntry",
        Ok(
            "rVector<FeResourceManager::Pure3dAttributesEntry *> type_info function",
        ),
    ),
    (
        "__tf17FeResourceManager",
        Ok(
            "FeResourceManager type_info function",
        ),
    ),
    (
        "__Q27Scrooby15ResourceManager",
        Ok(
            "Scrooby::ResourceManager::ResourceManager(void)",
        ),
    ),
    (
        "__Q217FeResourceManager11P3DCallback",
        Ok(
            "FeResourceManager::P3DCallback::P3DCallback(void)",
        ),
    ),
    (
        "IsDrawable__17FeResourceManager",
        Ok(
            "FeResourceManager::IsDrawable(void)",
        ),
    ),
    (
        "_$_Q217FeResourceManager24ResourceManagerEntryBase",
        Ok(
            "FeResourceManager::ResourceManagerEntryBase::~ResourceManagerEntryBase(void)",
        ),
    ),
    (
        "IsDrawable__Q217FeResourceManager24ResourceManagerEntryBase",
        Ok(
            "FeResourceManager::ResourceManagerEntryBase::IsDrawable(void)",
        ),
    ),
    (
        "_$_Q217FeResourceManager13ResourceEntry",
        Ok(
            "FeResourceManager::ResourceEntry::~ResourceEntry(void)",
        ),
    ),
    (
        "_$_Q217FeResourceManager10AliasEntry",
        Ok(
            "FeResourceManager::AliasEntry::~AliasEntry(void)",
        ),
    ),
    (
        "_$_Q217FeResourceManager21Pure3dAttributesEntry",
        Ok(
            "FeResourceManager::Pure3dAttributesEntry::~Pure3dAttributesEntry(void)",
        ),
    ),
    (
        "_$_t7rVector1ZPQ217FeResourceManager13ResourceEntry",
        Ok(
            "rVector<FeResourceManager::ResourceEntry *>::~rVector(void)",
        ),
    ),
    (
        "_$_t7rVector1ZPQ217FeResourceManager10AliasEntry",
        Ok(
            "rVector<FeResourceManager::AliasEntry *>::~rVector(void)",
        ),
    ),
    (
        "_$_t7rVector1ZPQ217FeResourceManager21Pure3dAttributesEntry",
        Ok(
            "rVector<FeResourceManager::Pure3dAttributesEntry *>::~rVector(void)",
        ),
    ),
    (
        "__tfQ27Scrooby15ResourceManager",
        Ok(
            "Scrooby::ResourceManager type_info function",
        ),
    ),
    (
        "_$_Q217FeResourceManager11P3DCallback",
        Ok(
            "FeResourceManager::P3DCallback::~P3DCallback(void)",
        ),
    ),
    (
        "__tfQ217FeResourceManager11P3DCallback",
        Ok(
            "FeResourceManager::P3DCallback type_info function",
        ),
    ),
    (
        "AddRef__Q217FeResourceManager11P3DCallback",
        Ok(
            "FeResourceManager::P3DCallback::AddRef(void)",
        ),
    ),
    (
        "Release__Q217FeResourceManager11P3DCallback",
        Ok(
            "FeResourceManager::P3DCallback::Release(void)",
        ),
    ),
    (
        "Done__Q217FeResourceManager11P3DCallback11tLoadStatusP12tLoadRequest",
        Ok(
            "FeResourceManager::P3DCallback::Done(tLoadStatus, tLoadRequest *)",
        ),
    ),
    (
        "__Q27Scrooby3App",
        Ok(
            "Scrooby::App::App(void)",
        ),
    ),
    (
        "_$_Q27Scrooby3App",
        Ok(
            "Scrooby::App::~App(void)",
        ),
    ),
    (
        "GetInstance__Q27Scrooby3App",
        Ok(
            "Scrooby::App::GetInstance(void)",
        ),
    ),
    (
        "DeleteInstance__Q27Scrooby3App",
        Ok(
            "Scrooby::App::DeleteInstance(void)",
        ),
    ),
    (
        "EnableScreenScaling__Q27Scrooby3Appbfff",
        Ok(
            "Scrooby::App::EnableScreenScaling(bool, float, float, float)",
        ),
    ),
    (
        "__tfQ27Scrooby3App",
        Ok(
            "Scrooby::App type_info function",
        ),
    ),
    (
        "__13PascalCString",
        Ok(
            "PascalCString::PascalCString(void)",
        ),
    ),
    (
        "_$_13PascalCString",
        Ok(
            "PascalCString::~PascalCString(void)",
        ),
    ),
    (
        "__13PascalCStringPCc",
        Ok(
            "PascalCString::PascalCString(char const *)",
        ),
    ),
    (
        "__13PascalCStringc",
        Ok(
            "PascalCString::PascalCString(char)",
        ),
    ),
    (
        "__13PascalCStringRC13PascalCString",
        Ok(
            "PascalCString::PascalCString(PascalCString const &)",
        ),
    ),
    (
        "__as__13PascalCStringRC13PascalCString",
        Ok(
            "PascalCString::operator=(PascalCString const &)",
        ),
    ),
    (
        "__as__13PascalCStringPCc",
        Ok(
            "PascalCString::operator=(char const *)",
        ),
    ),
    (
        "Grow__13PascalCStringUi",
        Ok(
            "PascalCString::Grow(unsigned int)",
        ),
    ),
    (
        "__apl__13PascalCStringRC13PascalCString",
        Ok(
            "PascalCString::operator+=(PascalCString const &)",
        ),
    ),
    (
        "__apl__13PascalCStringPCc",
        Ok(
            "PascalCString::operator+=(char const *)",
        ),
    ),
    (
        "__apl__13PascalCStringc",
        Ok(
            "PascalCString::operator+=(char)",
        ),
    ),
    (
        "__eq__C13PascalCStringPCc",
        Ok(
            "PascalCString::operator==(char const *) const",
        ),
    ),
    (
        "__ne__C13PascalCStringPCc",
        Ok(
            "PascalCString::operator!=(char const *) const",
        ),
    ),
    (
        "Length__C13PascalCString",
        Ok(
            "PascalCString::Length(void) const",
        ),
    ),
    (
        "Reserve__13PascalCStringi",
        Ok(
            "PascalCString::Reserve(int)",
        ),
    ),
    (
        "__opPc__13PascalCString",
        Ok(
            "PascalCString::operator char *(void)",
        ),
    ),
    (
        "AdjustMaxArraySize__13PascalCStringUi",
        Ok(
            "PascalCString::AdjustMaxArraySize(unsigned int)",
        ),
    ),
    (
        "SubString__13PascalCStringii",
        Ok(
            "PascalCString::SubString(int, int)",
        ),
    ),
    (
        "StreamFirstWord__13PascalCStringc",
        Ok(
            "PascalCString::StreamFirstWord(char)",
        ),
    ),
    (
        "Find__13PascalCStringc",
        Ok(
            "PascalCString::Find(char)",
        ),
    ),
    (
        "EqualsInsensitive__13PascalCStringPCc",
        Ok(
            "PascalCString::EqualsInsensitive(char const *)",
        ),
    ),
    (
        "Replace__13PascalCStringRC13PascalCStringT1",
        Ok(
            "PascalCString::Replace(PascalCString const &, PascalCString const &)",
        ),
    ),
    (
        "ToUpper__13PascalCString",
        Ok(
            "PascalCString::ToUpper(void)",
        ),
    ),
    (
        "FullFilename__13PascalCString",
        Ok(
            "PascalCString::FullFilename(void)",
        ),
    ),
    (
        "JustFilename__13PascalCString",
        Ok(
            "PascalCString::JustFilename(void)",
        ),
    ),
    (
        "JustExtension__13PascalCString",
        Ok(
            "PascalCString::JustExtension(void)",
        ),
    ),
    (
        "JustPath__13PascalCString",
        Ok(
            "PascalCString::JustPath(void)",
        ),
    ),
    (
        "test__Fv",
        Ok(
            "test(void)",
        ),
    ),
    (
        "__13UnicodeString",
        Ok(
            "UnicodeString::UnicodeString(void)",
        ),
    ),
    (
        "__13UnicodeStringRC13UnicodeString",
        Ok(
            "UnicodeString::UnicodeString(UnicodeString const &)",
        ),
    ),
    (
        "__13UnicodeStringPCc",
        Ok(
            "UnicodeString::UnicodeString(char const *)",
        ),
    ),
    (
        "_$_13UnicodeString",
        Ok(
            "UnicodeString::~UnicodeString(void)",
        ),
    ),
    (
        "__as__13UnicodeStringRC13UnicodeString",
        Ok(
            "UnicodeString::operator=(UnicodeString const &)",
        ),
    ),
    (
        "__apl__13UnicodeStringRC13UnicodeString",
        Ok(
            "UnicodeString::operator+=(UnicodeString const &)",
        ),
    ),
    (
        "__apl__13UnicodeStringRCUs",
        Ok(
            "UnicodeString::operator+=(unsigned short const &)",
        ),
    ),
    (
        "__vc__C13UnicodeStringi",
        Ok(
            "UnicodeString::operator[](int) const",
        ),
    ),
    (
        "__vc__13UnicodeStringi",
        Ok(
            "UnicodeString::operator[](int)",
        ),
    ),
    (
        "Append__13UnicodeStringRCUs",
        Ok(
            "UnicodeString::Append(unsigned short const &)",
        ),
    ),
    (
        "Clear__13UnicodeString",
        Ok(
            "UnicodeString::Clear(void)",
        ),
    ),
    (
        "FindFirstSubstring__C13UnicodeStringRC13UnicodeString",
        Ok(
            "UnicodeString::FindFirstSubstring(UnicodeString const &) const",
        ),
    ),
    (
        "GetBuffer__13UnicodeString",
        Ok(
            "UnicodeString::GetBuffer(void)",
        ),
    ),
    (
        "Length__C13UnicodeString",
        Ok(
            "UnicodeString::Length(void) const",
        ),
    ),
    (
        "MakeAscii__C13UnicodeStringPci",
        Ok(
            "UnicodeString::MakeAscii(char *, int) const",
        ),
    ),
    (
        "ReadAscii__13UnicodeStringPCci",
        Ok(
            "UnicodeString::ReadAscii(char const *, int)",
        ),
    ),
    (
        "ReadUnicode__13UnicodeStringPCUsi",
        Ok(
            "UnicodeString::ReadUnicode(unsigned short const *, int)",
        ),
    ),
    (
        "Replace__13UnicodeStringRC13UnicodeStringT1",
        Ok(
            "UnicodeString::Replace(UnicodeString const &, UnicodeString const &)",
        ),
    ),
    (
        "Resize__13UnicodeStringUi",
        Ok(
            "UnicodeString::Resize(unsigned int)",
        ),
    ),
    (
        "Substring__C13UnicodeStringUiUi",
        Ok(
            "UnicodeString::Substring(unsigned int, unsigned int) const",
        ),
    ),
    (
        "rstricmp__FPCcT0",
        Ok(
            "rstricmp(char const *, char const *)",
        ),
    ),
    (
        "StringToJustificationEnum__FPCc",
        Ok(
            "StringToJustificationEnum(char const *)",
        ),
    ),
    (
        "__7XMLTree",
        Ok(
            "XMLTree::XMLTree(void)",
        ),
    ),
    (
        "__7XMLTreeP7XMLNode",
        Ok(
            "XMLTree::XMLTree(XMLNode *)",
        ),
    ),
    (
        "_$_7XMLTree",
        Ok(
            "XMLTree::~XMLTree(void)",
        ),
    ),
    (
        "LoadTreeFromBuffer__7XMLTreePcUiPCc",
        Ok(
            "XMLTree::LoadTreeFromBuffer(char *, unsigned int, char const *)",
        ),
    ),
    (
        "LoadTreeWorker__7XMLTreePCc",
        Ok(
            "XMLTree::LoadTreeWorker(char const *)",
        ),
    ),
    (
        "SetCurrentElementByName__7XMLTreePCc",
        Ok(
            "XMLTree::SetCurrentElementByName(char const *)",
        ),
    ),
    (
        "SetCurrentElementByIndex__7XMLTreei",
        Ok(
            "XMLTree::SetCurrentElementByIndex(int)",
        ),
    ),
    (
        "GetFilename__7XMLTreeR13PascalCString",
        Ok(
            "XMLTree::GetFilename(PascalCString &)",
        ),
    ),
    (
        "SetFilename__7XMLTreePCc",
        Ok(
            "XMLTree::SetFilename(char const *)",
        ),
    ),
    (
        "GetName__7XMLTreeR13PascalCString",
        Ok(
            "XMLTree::GetName(PascalCString &)",
        ),
    ),
    (
        "GetAttribute__7XMLTreePCcR13PascalCString",
        Ok(
            "XMLTree::GetAttribute(char const *, PascalCString &)",
        ),
    ),
    (
        "GetAttribute__7XMLTreePCcPi",
        Ok(
            "XMLTree::GetAttribute(char const *, int *)",
        ),
    ),
    (
        "GetAttribute__7XMLTreePCcPb",
        Ok(
            "XMLTree::GetAttribute(char const *, bool *)",
        ),
    ),
    (
        "GetSubTreeByName__7XMLTreePCc",
        Ok(
            "XMLTree::GetSubTreeByName(char const *)",
        ),
    ),
    (
        "GetSubTreeByIndex__7XMLTreei",
        Ok(
            "XMLTree::GetSubTreeByIndex(int)",
        ),
    ),
    (
        "__tf7XMLTree",
        Ok(
            "XMLTree type_info function",
        ),
    ),
    (
        "AddProject__5FeAppPQ27Scrooby7Project",
        Ok(
            "FeApp::AddProject(Scrooby::Project *)",
        ),
    ),
    (
        "GetInstance__5FeApp",
        Ok(
            "FeApp::GetInstance(void)",
        ),
    ),
    (
        "GetProject__5FeApp",
        Ok(
            "FeApp::GetProject(void)",
        ),
    ),
    (
        "GetProject__5FeAppUi",
        Ok(
            "FeApp::GetProject(unsigned int)",
        ),
    ),
    (
        "GetResourceManager__5FeApp",
        Ok(
            "FeApp::GetResourceManager(void)",
        ),
    ),
    (
        "GetTextBible__C5FeAppPCc",
        Ok(
            "FeApp::GetTextBible(char const *) const",
        ),
    ),
    (
        "GetScreenHeight__5FeApp",
        Ok(
            "FeApp::GetScreenHeight(void)",
        ),
    ),
    (
        "GetScreenWidth__5FeApp",
        Ok(
            "FeApp::GetScreenWidth(void)",
        ),
    ),
    (
        "AddScroobyHandlers__5FeApp",
        Ok(
            "FeApp::AddScroobyHandlers(void)",
        ),
    ),
    (
        "DeleteInstance__5FeApp",
        Ok(
            "FeApp::DeleteInstance(void)",
        ),
    ),
    (
        "__5FeApp",
        Ok(
            "FeApp::FeApp(void)",
        ),
    ),
    (
        "_$_5FeApp",
        Ok(
            "FeApp::~FeApp(void)",
        ),
    ),
    (
        "Display__5FeAppG13tUidUnalignedT1",
        Ok(
            "FeApp::Display(tUidUnaligned, tUidUnaligned)",
        ),
    ),
    (
        "Display__5FeAppPCcT1",
        Ok(
            "FeApp::Display(char const *, char const *)",
        ),
    ),
    (
        "DrawFrame__5FeAppf",
        Ok(
            "FeApp::DrawFrame(float)",
        ),
    ),
    (
        "DrawBackground__5FeAppf",
        Ok(
            "FeApp::DrawBackground(float)",
        ),
    ),
    (
        "DrawForeground__5FeAppf",
        Ok(
            "FeApp::DrawForeground(float)",
        ),
    ),
    (
        "GetFeResourceManager__5FeApp",
        Ok(
            "FeApp::GetFeResourceManager(void)",
        ),
    ),
    (
        "IsSafeToRender__5FeApp",
        Ok(
            "FeApp::IsSafeToRender(void)",
        ),
    ),
    (
        "LoadProject__5FeAppPCcPQ27Scrooby19LoadProjectCallbackPci",
        Ok(
            "FeApp::LoadProject(char const *, Scrooby::LoadProjectCallback *, char *, int)",
        ),
    ),
    (
        "LoadResourcesAll__5FeAppPQ27Scrooby23ResourceManagerCallback",
        Ok(
            "FeApp::LoadResourcesAll(Scrooby::ResourceManagerCallback *)",
        ),
    ),
    (
        "MarkSafeToRender__5FeApp",
        Ok(
            "FeApp::MarkSafeToRender(void)",
        ),
    ),
    (
        "OnProjectLoadComplete__5FeAppPQ27Scrooby7Project",
        Ok(
            "FeApp::OnProjectLoadComplete(Scrooby::Project *)",
        ),
    ),
    (
        "RegisterCementFile__5FeAppPCc",
        Ok(
            "FeApp::RegisterCementFile(char const *)",
        ),
    ),
    (
        "RemoveProject__5FeAppPQ27Scrooby7Project",
        Ok(
            "FeApp::RemoveProject(Scrooby::Project *)",
        ),
    ),
    (
        "SetLocalizationLanguage__5FeAppQ27Scrooby10XLLanguage",
        Ok(
            "FeApp::SetLocalizationLanguage(Scrooby::XLLanguage)",
        ),
    ),
    (
        "SetProjectIndex__5FeAppUi",
        Ok(
            "FeApp::SetProjectIndex(unsigned int)",
        ),
    ),
    (
        "SetProject__5FeAppPQ27Scrooby7Project",
        Ok(
            "FeApp::SetProject(Scrooby::Project *)",
        ),
    ),
    (
        "GetProjectIndex__5FeApp",
        Ok(
            "FeApp::GetProjectIndex(void)",
        ),
    ),
    (
        "UnloadProject__5FeAppPQ27Scrooby7Project",
        Ok(
            "FeApp::UnloadProject(Scrooby::Project *)",
        ),
    ),
    (
        "GetDeltaTime__5FeApp",
        Ok(
            "FeApp::GetDeltaTime(void)",
        ),
    ),
    (
        "__tft7rVector1ZP9FeProject",
        Ok(
            "rVector<FeProject *> type_info function",
        ),
    ),
    (
        "__tf5FeApp",
        Ok(
            "FeApp type_info function",
        ),
    ),
    (
        "SetFullImageNames__5FeAppb",
        Ok(
            "FeApp::SetFullImageNames(bool)",
        ),
    ),
    (
        "UseFullImageNames__5FeApp",
        Ok(
            "FeApp::UseFullImageNames(void)",
        ),
    ),
    (
        "_$_t7rVector1ZP9FeProject",
        Ok(
            "rVector<FeProject *>::~rVector(void)",
        ),
    ),
    (
        "__17FeBoundedDrawableiRC5tName",
        Ok(
            "FeBoundedDrawable::FeBoundedDrawable(int, tName const &)",
        ),
    ),
    (
        "_$_17FeBoundedDrawable",
        Ok(
            "FeBoundedDrawable::~FeBoundedDrawable(void)",
        ),
    ),
    (
        "GetBoundingBox__C17FeBoundedDrawableRiN31",
        Ok(
            "FeBoundedDrawable::GetBoundingBox(int &, int &, int &, int &) const",
        ),
    ),
    (
        "GetBoundingBoxSize__C17FeBoundedDrawableRiT1",
        Ok(
            "FeBoundedDrawable::GetBoundingBoxSize(int &, int &) const",
        ),
    ),
    (
        "GetBoundingBoxCenter__C17FeBoundedDrawableRiT1",
        Ok(
            "FeBoundedDrawable::GetBoundingBoxCenter(int &, int &) const",
        ),
    ),
    (
        "IsPointInBoundingRect__17FeBoundedDrawableff",
        Ok(
            "FeBoundedDrawable::IsPointInBoundingRect(float, float)",
        ),
    ),
    (
        "Reset__17FeBoundedDrawable",
        Ok(
            "FeBoundedDrawable::Reset(void)",
        ),
    ),
    (
        "SetHorizontalJustification__17FeBoundedDrawableQ27Scrooby17JustificationEnum",
        Ok(
            "FeBoundedDrawable::SetHorizontalJustification(Scrooby::JustificationEnum)",
        ),
    ),
    (
        "SetVerticalJustification__17FeBoundedDrawableQ27Scrooby17JustificationEnum",
        Ok(
            "FeBoundedDrawable::SetVerticalJustification(Scrooby::JustificationEnum)",
        ),
    ),
    (
        "SetBoundingBoxSize__17FeBoundedDrawableii",
        Ok(
            "FeBoundedDrawable::SetBoundingBoxSize(int, int)",
        ),
    ),
    (
        "ReCalculateAlignment__17FeBoundedDrawable",
        Ok(
            "FeBoundedDrawable::ReCalculateAlignment(void)",
        ),
    ),
    (
        "GetMatrix__17FeBoundedDrawable",
        Ok(
            "FeBoundedDrawable::GetMatrix(void)",
        ),
    ),
    (
        "GetMatrix__C17FeBoundedDrawable",
        Ok(
            "FeBoundedDrawable::GetMatrix(void) const",
        ),
    ),
    (
        "ScaleAboutCenter__17FeBoundedDrawablef",
        Ok(
            "FeBoundedDrawable::ScaleAboutCenter(float)",
        ),
    ),
    (
        "ScaleAboutCenter__17FeBoundedDrawablefff",
        Ok(
            "FeBoundedDrawable::ScaleAboutCenter(float, float, float)",
        ),
    ),
    (
        "ScaleAboutPoint__17FeBoundedDrawablefii",
        Ok(
            "FeBoundedDrawable::ScaleAboutPoint(float, int, int)",
        ),
    ),
    (
        "ScaleAboutPoint__17FeBoundedDrawablefffii",
        Ok(
            "FeBoundedDrawable::ScaleAboutPoint(float, float, float, int, int)",
        ),
    ),
    (
        "SetPositionOfCenter__17FeBoundedDrawableii",
        Ok(
            "FeBoundedDrawable::SetPositionOfCenter(int, int)",
        ),
    ),
    (
        "RotateAboutCenter__17FeBoundedDrawablefGQ218RadicalMathLibrary6Vector",
        Ok(
            "FeBoundedDrawable::RotateAboutCenter(float, RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "__tf17FeBoundedDrawable",
        Ok(
            "FeBoundedDrawable type_info function",
        ),
    ),
    (
        "GetHorizontalJustification__C17FeBoundedDrawable",
        Ok(
            "FeBoundedDrawable::GetHorizontalJustification(void) const",
        ),
    ),
    (
        "GetVerticalJustification__C17FeBoundedDrawable",
        Ok(
            "FeBoundedDrawable::GetVerticalJustification(void) const",
        ),
    ),
    (
        "__Q27Scrooby21FeProjectChunkHandler",
        Ok(
            "Scrooby::FeProjectChunkHandler::FeProjectChunkHandler(void)",
        ),
    ),
    (
        "LoadGroupChunk__Q27Scrooby21FeProjectChunkHandlerP10tChunkFile",
        Ok(
            "Scrooby::FeProjectChunkHandler::LoadGroupChunk(tChunkFile *)",
        ),
    ),
    (
        "LoadObject__Q27Scrooby21FeProjectChunkHandlerP10tChunkFileP12tEntityStore",
        Ok(
            "Scrooby::FeProjectChunkHandler::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadLayerChunk__Q27Scrooby21FeProjectChunkHandlerP10tChunkFile",
        Ok(
            "Scrooby::FeProjectChunkHandler::LoadLayerChunk(tChunkFile *)",
        ),
    ),
    (
        "LoadMovieChunk__Q27Scrooby21FeProjectChunkHandlerP10tChunkFile",
        Ok(
            "Scrooby::FeProjectChunkHandler::LoadMovieChunk(tChunkFile *)",
        ),
    ),
    (
        "LoadPageChunk__Q27Scrooby21FeProjectChunkHandlerP10tChunkFile",
        Ok(
            "Scrooby::FeProjectChunkHandler::LoadPageChunk(tChunkFile *)",
        ),
    ),
    (
        "LoadPolygonChunk__Q27Scrooby21FeProjectChunkHandlerP10tChunkFile",
        Ok(
            "Scrooby::FeProjectChunkHandler::LoadPolygonChunk(tChunkFile *)",
        ),
    ),
    (
        "LoadPure3dObjectChunk__Q27Scrooby21FeProjectChunkHandlerP10tChunkFile",
        Ok(
            "Scrooby::FeProjectChunkHandler::LoadPure3dObjectChunk(tChunkFile *)",
        ),
    ),
    (
        "LoadScreenChunk__Q27Scrooby21FeProjectChunkHandlerP10tChunkFile",
        Ok(
            "Scrooby::FeProjectChunkHandler::LoadScreenChunk(tChunkFile *)",
        ),
    ),
    (
        "LoadSpriteChunk__Q27Scrooby21FeProjectChunkHandlerP10tChunkFile",
        Ok(
            "Scrooby::FeProjectChunkHandler::LoadSpriteChunk(tChunkFile *)",
        ),
    ),
    (
        "LoadTextChunk__Q27Scrooby21FeProjectChunkHandlerP10tChunkFile",
        Ok(
            "Scrooby::FeProjectChunkHandler::LoadTextChunk(tChunkFile *)",
        ),
    ),
    (
        "_$_Q27Scrooby21FeProjectChunkHandler",
        Ok(
            "Scrooby::FeProjectChunkHandler::~FeProjectChunkHandler(void)",
        ),
    ),
    (
        "__tfQ27Scrooby21FeProjectChunkHandler",
        Ok(
            "Scrooby::FeProjectChunkHandler type_info function",
        ),
    ),
    (
        "__10FeDrawableiRC5tName",
        Ok(
            "FeDrawable::FeDrawable(int, tName const &)",
        ),
    ),
    (
        "_$_10FeDrawable",
        Ok(
            "FeDrawable::~FeDrawable(void)",
        ),
    ),
    (
        "DegreesToRadian__10FeDrawablef",
        Ok(
            "FeDrawable::DegreesToRadian(float)",
        ),
    ),
    (
        "Update__10FeDrawablef",
        Ok(
            "FeDrawable::Update(float)",
        ),
    ),
    (
        "Display__10FeDrawable",
        Ok(
            "FeDrawable::Display(void)",
        ),
    ),
    (
        "GetAlpha__C10FeDrawable",
        Ok(
            "FeDrawable::GetAlpha(void) const",
        ),
    ),
    (
        "GetColour__C10FeDrawable",
        Ok(
            "FeDrawable::GetColour(void) const",
        ),
    ),
    (
        "GetMatrix__10FeDrawable",
        Ok(
            "FeDrawable::GetMatrix(void)",
        ),
    ),
    (
        "GetMatrix__C10FeDrawable",
        Ok(
            "FeDrawable::GetMatrix(void) const",
        ),
    ),
    (
        "GetOriginPosition__C10FeDrawableRiT1",
        Ok(
            "FeDrawable::GetOriginPosition(int &, int &) const",
        ),
    ),
    (
        "InverseNormalizeCoord__C10FeDrawableffRiT3",
        Ok(
            "FeDrawable::InverseNormalizeCoord(float, float, int &, int &) const",
        ),
    ),
    (
        "IsPage__C10FeDrawable",
        Ok(
            "FeDrawable::IsPage(void) const",
        ),
    ),
    (
        "IsVisible__C10FeDrawable",
        Ok(
            "FeDrawable::IsVisible(void) const",
        ),
    ),
    (
        "ModulateColour__10FeDrawableR10pddiColourRC10pddiColour",
        Ok(
            "FeDrawable::ModulateColour(pddiColour &, pddiColour const &)",
        ),
    ),
    (
        "NormalizeCoord__C10FeDrawableiiRfT3",
        Ok(
            "FeDrawable::NormalizeCoord(int, int, float &, float &) const",
        ),
    ),
    (
        "Reset__10FeDrawable",
        Ok(
            "FeDrawable::Reset(void)",
        ),
    ),
    (
        "ResetTransformation__10FeDrawable",
        Ok(
            "FeDrawable::ResetTransformation(void)",
        ),
    ),
    (
        "RotateArbitrary__10FeDrawableffff",
        Ok(
            "FeDrawable::RotateArbitrary(float, float, float, float)",
        ),
    ),
    (
        "RotateX__10FeDrawablef",
        Ok(
            "FeDrawable::RotateX(float)",
        ),
    ),
    (
        "RotateY__10FeDrawablef",
        Ok(
            "FeDrawable::RotateY(float)",
        ),
    ),
    (
        "RotateZ__10FeDrawablef",
        Ok(
            "FeDrawable::RotateZ(float)",
        ),
    ),
    (
        "Scale__10FeDrawablef",
        Ok(
            "FeDrawable::Scale(float)",
        ),
    ),
    (
        "Scale__10FeDrawablefff",
        Ok(
            "FeDrawable::Scale(float, float, float)",
        ),
    ),
    (
        "SetAlpha__10FeDrawablef",
        Ok(
            "FeDrawable::SetAlpha(float)",
        ),
    ),
    (
        "SetClip__10FeDrawableffff",
        Ok(
            "FeDrawable::SetClip(float, float, float, float)",
        ),
    ),
    (
        "SetColour__10FeDrawableG10pddiColour",
        Ok(
            "FeDrawable::SetColour(pddiColour)",
        ),
    ),
    (
        "SetLayer__10FeDrawablef",
        Ok(
            "FeDrawable::SetLayer(float)",
        ),
    ),
    (
        "SetParent__10FeDrawableP10FeDrawable",
        Ok(
            "FeDrawable::SetParent(FeDrawable *)",
        ),
    ),
    (
        "SetTransform__10FeDrawablePQ218RadicalMathLibrary6Matrix",
        Ok(
            "FeDrawable::SetTransform(RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "SetTransform__10FeDrawableRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "FeDrawable::SetTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "SetTranslation__10FeDrawableii",
        Ok(
            "FeDrawable::SetTranslation(int, int)",
        ),
    ),
    (
        "SetTranslationRealWorld__10FeDrawableff",
        Ok(
            "FeDrawable::SetTranslationRealWorld(float, float)",
        ),
    ),
    (
        "SetVisible__10FeDrawableb",
        Ok(
            "FeDrawable::SetVisible(bool)",
        ),
    ),
    (
        "Show__10FeDrawable",
        Ok(
            "FeDrawable::Show(void)",
        ),
    ),
    (
        "Translate__10FeDrawableii",
        Ok(
            "FeDrawable::Translate(int, int)",
        ),
    ),
    (
        "GetTransform__10FeDrawable",
        Ok(
            "FeDrawable::GetTransform(void)",
        ),
    ),
    (
        "GetTransform__C10FeDrawable",
        Ok(
            "FeDrawable::GetTransform(void) const",
        ),
    ),
    (
        "GetNormalizedPosition__C10FeDrawableRfT1",
        Ok(
            "FeDrawable::GetNormalizedPosition(float &, float &) const",
        ),
    ),
    (
        "SetPosition__10FeDrawableii",
        Ok(
            "FeDrawable::SetPosition(int, int)",
        ),
    ),
    (
        "TranslatePosition__10FeDrawableii",
        Ok(
            "FeDrawable::TranslatePosition(int, int)",
        ),
    ),
    (
        "__tf10FeDrawable",
        Ok(
            "FeDrawable type_info function",
        ),
    ),
    (
        "IsDrawable__10FeDrawable",
        Ok(
            "FeDrawable::IsDrawable(void)",
        ),
    ),
    (
        "__8FeEntity",
        Ok(
            "FeEntity::FeEntity(void)",
        ),
    ),
    (
        "_$_8FeEntity",
        Ok(
            "FeEntity::~FeEntity(void)",
        ),
    ),
    (
        "IsOwner__C8FeEntity",
        Ok(
            "FeEntity::IsOwner(void) const",
        ),
    ),
    (
        "__tf8FeEntity",
        Ok(
            "FeEntity type_info function",
        ),
    ),
    (
        "__7FeGroupiRC5tName",
        Ok(
            "FeGroup::FeGroup(int, tName const &)",
        ),
    ),
    (
        "_$_7FeGroup",
        Ok(
            "FeGroup::~FeGroup(void)",
        ),
    ),
    (
        "GetBoundingBox__C7FeGroupRiN31",
        Ok(
            "FeGroup::GetBoundingBox(int &, int &, int &, int &) const",
        ),
    ),
    (
        "Show__7FeGroup",
        Ok(
            "FeGroup::Show(void)",
        ),
    ),
    (
        "GetBoundingBoxSize__C7FeGroupRiT1",
        Ok(
            "FeGroup::GetBoundingBoxSize(int &, int &) const",
        ),
    ),
    (
        "RecomputeOffsets__7FeGroup",
        Ok(
            "FeGroup::RecomputeOffsets(void)",
        ),
    ),
    (
        "ScaleAboutCenter__7FeGroupf",
        Ok(
            "FeGroup::ScaleAboutCenter(float)",
        ),
    ),
    (
        "ScaleAboutCenter__7FeGroupfff",
        Ok(
            "FeGroup::ScaleAboutCenter(float, float, float)",
        ),
    ),
    (
        "ScaleAboutPoint__7FeGroupfii",
        Ok(
            "FeGroup::ScaleAboutPoint(float, int, int)",
        ),
    ),
    (
        "RotateAboutCenter__7FeGroupfGQ218RadicalMathLibrary6Vector",
        Ok(
            "FeGroup::RotateAboutCenter(float, RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "__tf7FeGroup",
        Ok(
            "FeGroup type_info function",
        ),
    ),
    (
        "__Q27Scrooby5Groupi",
        Ok(
            "Scrooby::Group::Group(int)",
        ),
    ),
    (
        "Display__7FeGroup",
        Ok(
            "FeGroup::Display(void)",
        ),
    ),
    (
        "__tfQ27Scrooby5Group",
        Ok(
            "Scrooby::Group type_info function",
        ),
    ),
    (
        "__10FeLanguagePCc",
        Ok(
            "FeLanguage::FeLanguage(char const *)",
        ),
    ),
    (
        "_$_10FeLanguage",
        Ok(
            "FeLanguage::~FeLanguage(void)",
        ),
    ),
    (
        "GetString__10FeLanguagePCc",
        Ok(
            "FeLanguage::GetString(char const *)",
        ),
    ),
    (
        "GetString__10FeLanguageUi",
        Ok(
            "FeLanguage::GetString(unsigned int)",
        ),
    ),
    (
        "GetHash__10FeLanguagePCc",
        Ok(
            "FeLanguage::GetHash(char const *)",
        ),
    ),
    (
        "__tf10FeLanguage",
        Ok(
            "FeLanguage type_info function",
        ),
    ),
    (
        "IsDrawable__10FeLanguage",
        Ok(
            "FeLanguage::IsDrawable(void)",
        ),
    ),
    (
        "__7FeLayeriPCc",
        Ok(
            "FeLayer::FeLayer(int, char const *)",
        ),
    ),
    (
        "_$_7FeLayer",
        Ok(
            "FeLayer::~FeLayer(void)",
        ),
    ),
    (
        "GetBoundingBoxSize__C7FeLayerRiT1",
        Ok(
            "FeLayer::GetBoundingBoxSize(int &, int &) const",
        ),
    ),
    (
        "GetBoundingBox__C7FeLayerRiN31",
        Ok(
            "FeLayer::GetBoundingBox(int &, int &, int &, int &) const",
        ),
    ),
    (
        "__tf7FeLayer",
        Ok(
            "FeLayer type_info function",
        ),
    ),
    (
        "__Q27Scrooby5Layeri",
        Ok(
            "Scrooby::Layer::Layer(int)",
        ),
    ),
    (
        "Display__7FeLayer",
        Ok(
            "FeLayer::Display(void)",
        ),
    ),
    (
        "_$_7FeMovie",
        Ok(
            "FeMovie::~FeMovie(void)",
        ),
    ),
    (
        "Reset__7FeMovie",
        Ok(
            "FeMovie::Reset(void)",
        ),
    ),
    (
        "Display__7FeMovie",
        Ok(
            "FeMovie::Display(void)",
        ),
    ),
    (
        "SetAlpha__7FeMovief",
        Ok(
            "FeMovie::SetAlpha(float)",
        ),
    ),
    (
        "SetAlphaNoRedraw__7FeMovief",
        Ok(
            "FeMovie::SetAlphaNoRedraw(float)",
        ),
    ),
    (
        "SetColour__7FeMovieiii",
        Ok(
            "FeMovie::SetColour(int, int, int)",
        ),
    ),
    (
        "SetColour__7FeMovieG10pddiColour",
        Ok(
            "FeMovie::SetColour(pddiColour)",
        ),
    ),
    (
        "SetColourNoRedraw__7FeMovieG10pddiColour",
        Ok(
            "FeMovie::SetColourNoRedraw(pddiColour)",
        ),
    ),
    (
        "SetColourNoRedraw__7FeMovieiii",
        Ok(
            "FeMovie::SetColourNoRedraw(int, int, int)",
        ),
    ),
    (
        "GetAlpha__C7FeMovie",
        Ok(
            "FeMovie::GetAlpha(void) const",
        ),
    ),
    (
        "GetColour__C7FeMovie",
        Ok(
            "FeMovie::GetColour(void) const",
        ),
    ),
    (
        "Play__7FeMovie",
        Ok(
            "FeMovie::Play(void)",
        ),
    ),
    (
        "Pause__7FeMovie",
        Ok(
            "FeMovie::Pause(void)",
        ),
    ),
    (
        "Stop__7FeMovie",
        Ok(
            "FeMovie::Stop(void)",
        ),
    ),
    (
        "GetCurrentFrame__C7FeMovie",
        Ok(
            "FeMovie::GetCurrentFrame(void) const",
        ),
    ),
    (
        "SetNextFrame__7FeMoviei",
        Ok(
            "FeMovie::SetNextFrame(int)",
        ),
    ),
    (
        "__tf7FeMovie",
        Ok(
            "FeMovie type_info function",
        ),
    ),
    (
        "__tfQ27Scrooby5Movie",
        Ok(
            "Scrooby::Movie type_info function",
        ),
    ),
    (
        "__7FeOwneriRC5tName",
        Ok(
            "FeOwner::FeOwner(int, tName const &)",
        ),
    ),
    (
        "_$_7FeOwner",
        Ok(
            "FeOwner::~FeOwner(void)",
        ),
    ),
    (
        "Show__7FeOwner",
        Ok(
            "FeOwner::Show(void)",
        ),
    ),
    (
        "ShowChildren__7FeOwner",
        Ok(
            "FeOwner::ShowChildren(void)",
        ),
    ),
    (
        "DisplayChildren__7FeOwner",
        Ok(
            "FeOwner::DisplayChildren(void)",
        ),
    ),
    (
        "Update__7FeOwnerf",
        Ok(
            "FeOwner::Update(float)",
        ),
    ),
    (
        "Display__7FeOwner",
        Ok(
            "FeOwner::Display(void)",
        ),
    ),
    (
        "IsOwner__C7FeOwner",
        Ok(
            "FeOwner::IsOwner(void) const",
        ),
    ),
    (
        "__tf7FeOwner",
        Ok(
            "FeOwner type_info function",
        ),
    ),
    (
        "GetName__12XMLAttribute",
        Ok(
            "XMLAttribute::GetName(void)",
        ),
    ),
    (
        "GetValue__12XMLAttribute",
        Ok(
            "XMLAttribute::GetValue(void)",
        ),
    ),
    (
        "GetLength__16XMLAttributeList",
        Ok(
            "XMLAttributeList::GetLength(void)",
        ),
    ),
    (
        "AddItem__16XMLAttributeListP12XMLAttribute",
        Ok(
            "XMLAttributeList::AddItem(XMLAttribute *)",
        ),
    ),
    (
        "GetItem__16XMLAttributeListi",
        Ok(
            "XMLAttributeList::GetItem(int)",
        ),
    ),
    (
        "GetLength__11XMLNodeList",
        Ok(
            "XMLNodeList::GetLength(void)",
        ),
    ),
    (
        "AddItem__11XMLNodeListP7XMLNode",
        Ok(
            "XMLNodeList::AddItem(XMLNode *)",
        ),
    ),
    (
        "GetItem__11XMLNodeListi",
        Ok(
            "XMLNodeList::GetItem(int)",
        ),
    ),
    (
        "__7XMLNode",
        Ok(
            "XMLNode::XMLNode(void)",
        ),
    ),
    (
        "_$_7XMLNode",
        Ok(
            "XMLNode::~XMLNode(void)",
        ),
    ),
    (
        "GetName__7XMLNode",
        Ok(
            "XMLNode::GetName(void)",
        ),
    ),
    (
        "GetAttributes__7XMLNode",
        Ok(
            "XMLNode::GetAttributes(void)",
        ),
    ),
    (
        "GetChildNodes__7XMLNode",
        Ok(
            "XMLNode::GetChildNodes(void)",
        ),
    ),
    (
        "__9XMLParser",
        Ok(
            "XMLParser::XMLParser(void)",
        ),
    ),
    (
        "_$_9XMLParser",
        Ok(
            "XMLParser::~XMLParser(void)",
        ),
    ),
    (
        "ParseFromBuffer__9XMLParserPcUi",
        Ok(
            "XMLParser::ParseFromBuffer(char *, unsigned int)",
        ),
    ),
    (
        "Parse__9XMLParserRPc",
        Ok(
            "XMLParser::Parse(char *&)",
        ),
    ),
    (
        "ReadNextTag__9XMLParserRPc",
        Ok(
            "XMLParser::ReadNextTag(char *&)",
        ),
    ),
    (
        "DecodeTag__9XMLParserR13PascalCString",
        Ok(
            "XMLParser::DecodeTag(PascalCString &)",
        ),
    ),
    (
        "__tf7XMLNode",
        Ok(
            "XMLNode type_info function",
        ),
    ),
    (
        "__tf9XMLParser",
        Ok(
            "XMLParser type_info function",
        ),
    ),
    (
        "_$_12XMLAttribute",
        Ok(
            "XMLAttribute::~XMLAttribute(void)",
        ),
    ),
    (
        "__12XMLAttribute",
        Ok(
            "XMLAttribute::XMLAttribute(void)",
        ),
    ),
    (
        "_$_16XMLAttributeList",
        Ok(
            "XMLAttributeList::~XMLAttributeList(void)",
        ),
    ),
    (
        "__16XMLAttributeList",
        Ok(
            "XMLAttributeList::XMLAttributeList(void)",
        ),
    ),
    (
        "_$_11XMLNodeList",
        Ok(
            "XMLNodeList::~XMLNodeList(void)",
        ),
    ),
    (
        "__11XMLNodeList",
        Ok(
            "XMLNodeList::XMLNodeList(void)",
        ),
    ),
    (
        "__tft7rVector1ZP12XMLAttribute",
        Ok(
            "rVector<XMLAttribute *> type_info function",
        ),
    ),
    (
        "__tft7rVector1ZP7XMLNode",
        Ok(
            "rVector<XMLNode *> type_info function",
        ),
    ),
    (
        "_$_t7rVector1ZP12XMLAttribute",
        Ok(
            "rVector<XMLAttribute *>::~rVector(void)",
        ),
    ),
    (
        "_$_t7rVector1ZP7XMLNode",
        Ok(
            "rVector<XMLNode *>::~rVector(void)",
        ),
    ),
    (
        "__16tContextInitData",
        Ok(
            "tContextInitData::tContextInitData(void)",
        ),
    ),
    (
        "__9tPlatform",
        Ok(
            "tPlatform::tPlatform(void)",
        ),
    ),
    (
        "_$_9tPlatform",
        Ok(
            "tPlatform::~tPlatform(void)",
        ),
    ),
    (
        "Create__9tPlatform",
        Ok(
            "tPlatform::Create(void)",
        ),
    ),
    (
        "CreateContext__9tPlatformP16tContextInitData",
        Ok(
            "tPlatform::CreateContext(tContextInitData *)",
        ),
    ),
    (
        "GetPlatform__9tPlatform",
        Ok(
            "tPlatform::GetPlatform(void)",
        ),
    ),
    (
        "_GLOBAL_$I$malloc_uncached__Fi",
        Ok(
            "global constructors keyed to malloc_uncached(int)",
        ),
    ),
    (
        "_GLOBAL_$D$malloc_uncached__Fi",
        Ok(
            "global destructors keyed to malloc_uncached(int)",
        ),
    ),
    (
        "__14tBillboardQuad",
        Ok(
            "tBillboardQuad::tBillboardQuad(void)",
        ),
    ),
    (
        "_$_14tBillboardQuad",
        Ok(
            "tBillboardQuad::~tBillboardQuad(void)",
        ),
    ),
    (
        "Display__14tBillboardQuadP13ps2PrimStreamRCQ218RadicalMathLibrary6MatrixN22f",
        Ok(
            "tBillboardQuad::Display(ps2PrimStream *, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
        ),
    ),
    (
        "Display__18BakedBillboardQuadP13ps2PrimStream",
        Ok(
            "BakedBillboardQuad::Display(ps2PrimStream *)",
        ),
    ),
    (
        "Calculate__14tBillboardQuad",
        Ok(
            "tBillboardQuad::Calculate(void)",
        ),
    ),
    (
        "_$_25tCamRelativeBillboardQuad",
        Ok(
            "tCamRelativeBillboardQuad::~tCamRelativeBillboardQuad(void)",
        ),
    ),
    (
        "Display__25tCamRelativeBillboardQuadP13ps2PrimStreamRCQ218RadicalMathLibrary6MatrixN22f",
        Ok(
            "tCamRelativeBillboardQuad::Display(ps2PrimStream *, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, float)",
        ),
    ),
    (
        "CalcScale__C25tCamRelativeBillboardQuadRCQ218RadicalMathLibrary6MatrixT1",
        Ok(
            "tCamRelativeBillboardQuad::CalcScale(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &) const",
        ),
    ),
    (
        "DisplayOcclusionSprite__14tBillboardQuadRCQ218RadicalMathLibrary6MatrixN21",
        Ok(
            "tBillboardQuad::DisplayOcclusionSprite(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "__19tBillboardQuadGroup",
        Ok(
            "tBillboardQuadGroup::tBillboardQuadGroup(void)",
        ),
    ),
    (
        "_$_19tBillboardQuadGroup",
        Ok(
            "tBillboardQuadGroup::~tBillboardQuadGroup(void)",
        ),
    ),
    (
        "SetShader__19tBillboardQuadGroupP7tShader",
        Ok(
            "tBillboardQuadGroup::SetShader(tShader *)",
        ),
    ),
    (
        "FindQuadByUID__19tBillboardQuadGroupG13tUidUnaligned",
        Ok(
            "tBillboardQuadGroup::FindQuadByUID(tUidUnaligned)",
        ),
    ),
    (
        "Display__19tBillboardQuadGroup",
        Ok(
            "tBillboardQuadGroup::Display(void)",
        ),
    ),
    (
        "ProcessShaders__19tBillboardQuadGroupRQ29tDrawable14ShaderCallback",
        Ok(
            "tBillboardQuadGroup::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "SetIntensityBias__19tBillboardQuadGroupf",
        Ok(
            "tBillboardQuadGroup::SetIntensityBias(float)",
        ),
    ),
    (
        "__25tBillboardQuadGroupLoader",
        Ok(
            "tBillboardQuadGroupLoader::tBillboardQuadGroupLoader(void)",
        ),
    ),
    (
        "LoadObject__25tBillboardQuadGroupLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tBillboardQuadGroupLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadQuad__25tBillboardQuadGroupLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tBillboardQuadGroupLoader::LoadQuad(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__20BillboardQuadManager",
        Ok(
            "BillboardQuadManager::BillboardQuadManager(void)",
        ),
    ),
    (
        "DisplayAll__20BillboardQuadManager",
        Ok(
            "BillboardQuadManager::DisplayAll(void)",
        ),
    ),
    (
        "Add__20BillboardQuadManagerP19tBillboardQuadGroup",
        Ok(
            "BillboardQuadManager::Add(tBillboardQuadGroup *)",
        ),
    ),
    (
        "__tf14tBillboardQuad",
        Ok(
            "tBillboardQuad type_info function",
        ),
    ),
    (
        "__tf25tCamRelativeBillboardQuad",
        Ok(
            "tCamRelativeBillboardQuad type_info function",
        ),
    ),
    (
        "__tft6tArray1ZP14tBillboardQuad",
        Ok(
            "tArray<tBillboardQuad *> type_info function",
        ),
    ),
    (
        "__tft9tPtrArray1ZP14tBillboardQuad",
        Ok(
            "tPtrArray<tBillboardQuad *> type_info function",
        ),
    ),
    (
        "__tf19tBillboardQuadGroup",
        Ok(
            "tBillboardQuadGroup type_info function",
        ),
    ),
    (
        "__tf25tBillboardQuadGroupLoader",
        Ok(
            "tBillboardQuadGroupLoader type_info function",
        ),
    ),
    (
        "GetBoundingBox__14tBillboardQuadPQ218RadicalMathLibrary5Box3D",
        Ok(
            "tBillboardQuad::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__14tBillboardQuadPQ218RadicalMathLibrary6Sphere",
        Ok(
            "tBillboardQuad::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "_$_t9tPtrArray1ZP14tBillboardQuad",
        Ok(
            "tPtrArray<tBillboardQuad *>::~tPtrArray(void)",
        ),
    ),
    (
        "GetBoundingBox__19tBillboardQuadGroupPQ218RadicalMathLibrary5Box3D",
        Ok(
            "tBillboardQuadGroup::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__19tBillboardQuadGroupPQ218RadicalMathLibrary6Sphere",
        Ok(
            "tBillboardQuadGroup::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "_$_25tBillboardQuadGroupLoader",
        Ok(
            "tBillboardQuadGroupLoader::~tBillboardQuadGroupLoader(void)",
        ),
    ),
    (
        "_$_t6tArray1ZP14tBillboardQuad",
        Ok(
            "tArray<tBillboardQuad *>::~tArray(void)",
        ),
    ),
    (
        "SetSize__t6tArray1ZP14tBillboardQuadi",
        Ok(
            "tArray<tBillboardQuad *>::SetSize(int)",
        ),
    ),
    (
        "SetSize__t9tPtrArray1ZP14tBillboardQuadi",
        Ok(
            "tPtrArray<tBillboardQuad *>::SetSize(int)",
        ),
    ),
    (
        "CheckFormat__11tBMPHandlerQ213tImageHandler6Format",
        Ok(
            "tBMPHandler::CheckFormat(tImageHandler::Format)",
        ),
    ),
    (
        "CreateImage__11tBMPHandlerP5tFilePQ213tImageHandler7Builder",
        Ok(
            "tBMPHandler::CreateImage(tFile *, tImageHandler::Builder *)",
        ),
    ),
    (
        "SaveImage__11tBMPHandlerP6tImagePc",
        Ok(
            "tBMPHandler::SaveImage(tImage *, char *)",
        ),
    ),
    (
        "_$_11tBMPHandler",
        Ok(
            "tBMPHandler::~tBMPHandler(void)",
        ),
    ),
    (
        "__tf11tBMPHandler",
        Ok(
            "tBMPHandler type_info function",
        ),
    ),
    (
        "GetExtension__11tBMPHandler",
        Ok(
            "tBMPHandler::GetExtension(void)",
        ),
    ),
    (
        "CanLoad__11tBMPHandler",
        Ok(
            "tBMPHandler::CanLoad(void)",
        ),
    ),
    (
        "CanSave__11tBMPHandler",
        Ok(
            "tBMPHandler::CanSave(void)",
        ),
    ),
    (
        "__7tCamera",
        Ok(
            "tCamera::tCamera(void)",
        ),
    ),
    (
        "_$_7tCamera",
        Ok(
            "tCamera::~tCamera(void)",
        ),
    ),
    (
        "SetFOV__7tCameraff",
        Ok(
            "tCamera::SetFOV(float, float)",
        ),
    ),
    (
        "GetFOV__7tCameraPfT1",
        Ok(
            "tCamera::GetFOV(float *, float *)",
        ),
    ),
    (
        "SetNearPlane__7tCameraf",
        Ok(
            "tCamera::SetNearPlane(float)",
        ),
    ),
    (
        "SetFarPlane__7tCameraf",
        Ok(
            "tCamera::SetFarPlane(float)",
        ),
    ),
    (
        "GetNearPlane__7tCamera",
        Ok(
            "tCamera::GetNearPlane(void)",
        ),
    ),
    (
        "GetFarPlane__7tCamera",
        Ok(
            "tCamera::GetFarPlane(void)",
        ),
    ),
    (
        "GetCameraSpaceClipPlane__7tCameraQ27tCamera8ClipCodePQ218RadicalMathLibrary5Plane",
        Ok(
            "tCamera::GetCameraSpaceClipPlane(tCamera::ClipCode, RadicalMathLibrary::Plane *)",
        ),
    ),
    (
        "GetWorldSpaceClipPlane__7tCameraQ27tCamera8ClipCodePQ218RadicalMathLibrary5Plane",
        Ok(
            "tCamera::GetWorldSpaceClipPlane(tCamera::ClipCode, RadicalMathLibrary::Plane *)",
        ),
    ),
    (
        "GetWorldToCameraMatrix__7tCamera",
        Ok(
            "tCamera::GetWorldToCameraMatrix(void)",
        ),
    ),
    (
        "GetCameraToWorldMatrix__7tCamera",
        Ok(
            "tCamera::GetCameraToWorldMatrix(void)",
        ),
    ),
    (
        "CameraToWorld__7tCameraRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "tCamera::CameraToWorld(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "WorldToCamera__7tCameraRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "tCamera::WorldToCamera(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "CameraToView__7tCameraRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "tCamera::CameraToView(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "WorldToView__7tCameraRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "tCamera::WorldToView(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "ViewToCamera__7tCameraRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6VectorT2",
        Ok(
            "tCamera::ViewToCamera(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "PointVisibleCamera__7tCameraRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tCamera::PointVisibleCamera(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SphereVisibleCamera__7tCameraRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "tCamera::SphereVisibleCamera(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "PointVisible__7tCameraRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tCamera::PointVisible(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SphereVisible__7tCameraRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "tCamera::SphereVisible(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "PointClipCode__7tCameraRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tCamera::PointClipCode(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetWorldLookAtDirection__7tCameraPQ218RadicalMathLibrary6Vector",
        Ok(
            "tCamera::GetWorldLookAtDirection(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetWorldPosition__7tCameraPQ218RadicalMathLibrary6Vector",
        Ok(
            "tCamera::GetWorldPosition(RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetCameraMatrix__7tCameraPQ218RadicalMathLibrary6Matrix",
        Ok(
            "tCamera::SetCameraMatrix(RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "SetState__7tCamera",
        Ok(
            "tCamera::SetState(void)",
        ),
    ),
    (
        "Update__7tCamera",
        Ok(
            "tCamera::Update(void)",
        ),
    ),
    (
        "__tf7tCamera",
        Ok(
            "tCamera type_info function",
        ),
    ),
    (
        "__13tCameraLoader",
        Ok(
            "tCameraLoader::tCameraLoader(void)",
        ),
    ),
    (
        "LoadObject__13tCameraLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tCameraLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf13tCameraLoader",
        Ok(
            "tCameraLoader type_info function",
        ),
    ),
    (
        "_$_13tCameraLoader",
        Ok(
            "tCameraLoader::~tCameraLoader(void)",
        ),
    ),
    (
        "__10tChunkFileP5tFile",
        Ok(
            "tChunkFile::tChunkFile(tFile *)",
        ),
    ),
    (
        "_$_10tChunkFile",
        Ok(
            "tChunkFile::~tChunkFile(void)",
        ),
    ),
    (
        "ChunksRemaining__10tChunkFile",
        Ok(
            "tChunkFile::ChunksRemaining(void)",
        ),
    ),
    (
        "BeginChunk__10tChunkFile",
        Ok(
            "tChunkFile::BeginChunk(void)",
        ),
    ),
    (
        "BeginChunk__10tChunkFileUi",
        Ok(
            "tChunkFile::BeginChunk(unsigned int)",
        ),
    ),
    (
        "EndChunk__10tChunkFile",
        Ok(
            "tChunkFile::EndChunk(void)",
        ),
    ),
    (
        "GetCurrentID__10tChunkFile",
        Ok(
            "tChunkFile::GetCurrentID(void)",
        ),
    ),
    (
        "BeginInset__10tChunkFile",
        Ok(
            "tChunkFile::BeginInset(void)",
        ),
    ),
    (
        "EndInset__10tChunkFileP5tFile",
        Ok(
            "tChunkFile::EndInset(tFile *)",
        ),
    ),
    (
        "__tf10tChunkFile",
        Ok(
            "tChunkFile type_info function",
        ),
    ),
    (
        "_$_13radLoadStream",
        Ok(
            "radLoadStream::~radLoadStream(void)",
        ),
    ),
    (
        "GetEndianSwap__13radLoadStream",
        Ok(
            "radLoadStream::GetEndianSwap(void)",
        ),
    ),
    (
        "SetEndianSwap__13radLoadStreamb",
        Ok(
            "radLoadStream::SetEndianSwap(bool)",
        ),
    ),
    (
        "Read__10tChunkFilePvUiUi",
        Ok(
            "tChunkFile::Read(void *, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetSize__10tChunkFile",
        Ok(
            "tChunkFile::GetSize(void)",
        ),
    ),
    (
        "GetPosition__10tChunkFile",
        Ok(
            "tChunkFile::GetPosition(void)",
        ),
    ),
    (
        "__tf13radLoadStream",
        Ok(
            "radLoadStream type_info function",
        ),
    ),
    (
        "__8tContextP10pddiDeviceP11pddiDisplayP17pddiRenderContext",
        Ok(
            "tContext::tContext(pddiDevice *, pddiDisplay *, pddiRenderContext *)",
        ),
    ),
    (
        "Setup__8tContext",
        Ok(
            "tContext::Setup(void)",
        ),
    ),
    (
        "BeginFrame__8tContext",
        Ok(
            "tContext::BeginFrame(void)",
        ),
    ),
    (
        "EndFrame__8tContextb",
        Ok(
            "tContext::EndFrame(bool)",
        ),
    ),
    (
        "SetView__8tContextP5tView",
        Ok(
            "tContext::SetView(tView *)",
        ),
    ),
    (
        "GetView__8tContext",
        Ok(
            "tContext::GetView(void)",
        ),
    ),
    (
        "SwapBuffers__8tContext",
        Ok(
            "tContext::SwapBuffers(void)",
        ),
    ),
    (
        "GetMatrixStack__8tContext13p3dMatrixType",
        Ok(
            "tContext::GetMatrixStack(p3dMatrixType)",
        ),
    ),
    (
        "LoadViewMatrix__8tContextRCQ218RadicalMathLibrary6MatrixT1",
        Ok(
            "tContext::LoadViewMatrix(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "GetWorldMatrix__8tContext",
        Ok(
            "tContext::GetWorldMatrix(void)",
        ),
    ),
    (
        "WorldToView__8tContextRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "tContext::WorldToView(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetHardwareSkinning__8tContext",
        Ok(
            "tContext::GetHardwareSkinning(void)",
        ),
    ),
    (
        "__Q222pddiExtMemRegistration8CallBack",
        Ok(
            "pddiExtMemRegistration::CallBack::CallBack(void)",
        ),
    ),
    (
        "__15RadcoreMemAdapt",
        Ok(
            "RadcoreMemAdapt::RadcoreMemAdapt(void)",
        ),
    ),
    (
        "__tfQ222pddiExtMemRegistration8CallBack",
        Ok(
            "pddiExtMemRegistration::CallBack type_info function",
        ),
    ),
    (
        "__tf15RadcoreMemAdapt",
        Ok(
            "RadcoreMemAdapt type_info function",
        ),
    ),
    (
        "Alloc__15RadcoreMemAdaptPvi",
        Ok(
            "RadcoreMemAdapt::Alloc(void *, int)",
        ),
    ),
    (
        "Free__15RadcoreMemAdaptPv",
        Ok(
            "RadcoreMemAdapt::Free(void *)",
        ),
    ),
    (
        "_GLOBAL_$I$__8tContextP10pddiDeviceP11pddiDisplayP17pddiRenderContext",
        Ok(
            "global constructors keyed to tContext::tContext(pddiDevice *, pddiDisplay *, pddiRenderContext *)",
        ),
    ),
    (
        "GetBoundingBox__9tDrawablePQ218RadicalMathLibrary5Box3D",
        Ok(
            "tDrawable::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__9tDrawablePQ218RadicalMathLibrary6Sphere",
        Ok(
            "tDrawable::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "Process__19tShaderIntBroadcastP7tShader",
        Ok(
            "tShaderIntBroadcast::Process(tShader *)",
        ),
    ),
    (
        "Process__21tShaderFloatBroadcastP7tShader",
        Ok(
            "tShaderFloatBroadcast::Process(tShader *)",
        ),
    ),
    (
        "Process__22tShaderColourBroadcastP7tShader",
        Ok(
            "tShaderColourBroadcast::Process(tShader *)",
        ),
    ),
    (
        "Process__23tShaderTextureBroadcastP7tShader",
        Ok(
            "tShaderTextureBroadcast::Process(tShader *)",
        ),
    ),
    (
        "Process__22tShaderVectorBroadcastP7tShader",
        Ok(
            "tShaderVectorBroadcast::Process(tShader *)",
        ),
    ),
    (
        "Process__22tShaderMatrixBroadcastP7tShader",
        Ok(
            "tShaderMatrixBroadcast::Process(tShader *)",
        ),
    ),
    (
        "__tf9tDrawable",
        Ok(
            "tDrawable type_info function",
        ),
    ),
    (
        "__tf19tShaderIntBroadcast",
        Ok(
            "tShaderIntBroadcast type_info function",
        ),
    ),
    (
        "__tf21tShaderFloatBroadcast",
        Ok(
            "tShaderFloatBroadcast type_info function",
        ),
    ),
    (
        "__tf22tShaderColourBroadcast",
        Ok(
            "tShaderColourBroadcast type_info function",
        ),
    ),
    (
        "__tf23tShaderTextureBroadcast",
        Ok(
            "tShaderTextureBroadcast type_info function",
        ),
    ),
    (
        "__tf22tShaderVectorBroadcast",
        Ok(
            "tShaderVectorBroadcast type_info function",
        ),
    ),
    (
        "__tf22tShaderMatrixBroadcast",
        Ok(
            "tShaderMatrixBroadcast type_info function",
        ),
    ),
    (
        "ProcessShaders__9tDrawableRQ29tDrawable14ShaderCallback",
        Ok(
            "tDrawable::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "_$_9tDrawable",
        Ok(
            "tDrawable::~tDrawable(void)",
        ),
    ),
    (
        "_GLOBAL_$I$GetBoundingBox__9tDrawablePQ218RadicalMathLibrary5Box3D",
        Ok(
            "global constructors keyed to tDrawable::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "__5tName",
        Ok(
            "tName::tName(void)",
        ),
    ),
    (
        "__5tNamePCc",
        Ok(
            "tName::tName(char const *)",
        ),
    ),
    (
        "__5tNameG13tUidUnaligned",
        Ok(
            "tName::tName(tUidUnaligned)",
        ),
    ),
    (
        "__5tNameRC5tName",
        Ok(
            "tName::tName(tName const &)",
        ),
    ),
    (
        "_$_5tName",
        Ok(
            "tName::~tName(void)",
        ),
    ),
    (
        "SetText__5tNamePCc",
        Ok(
            "tName::SetText(char const *)",
        ),
    ),
    (
        "SetTextOnly__5tNamePCc",
        Ok(
            "tName::SetTextOnly(char const *)",
        ),
    ),
    (
        "SetUID__5tNameG13tUidUnaligned",
        Ok(
            "tName::SetUID(tUidUnaligned)",
        ),
    ),
    (
        "GetText__C5tName",
        Ok(
            "tName::GetText(void) const",
        ),
    ),
    (
        "__eq__C5tNameRC5tName",
        Ok(
            "tName::operator==(tName const &) const",
        ),
    ),
    (
        "__ne__C5tNameRC5tName",
        Ok(
            "tName::operator!=(tName const &) const",
        ),
    ),
    (
        "__as__5tNameRC5tName",
        Ok(
            "tName::operator=(tName const &)",
        ),
    ),
    (
        "MakeUID__5tNamePCc",
        Ok(
            "tName::MakeUID(char const *)",
        ),
    ),
    (
        "__7tEntity",
        Ok(
            "tEntity::tEntity(void)",
        ),
    ),
    (
        "_$_7tEntity",
        Ok(
            "tEntity::~tEntity(void)",
        ),
    ),
    (
        "CopyName__7tEntityP7tEntity",
        Ok(
            "tEntity::CopyName(tEntity *)",
        ),
    ),
    (
        "GetNameDangerous__7tEntity",
        Ok(
            "tEntity::GetNameDangerous(void)",
        ),
    ),
    (
        "__tf7tEntity",
        Ok(
            "tEntity type_info function",
        ),
    ),
    (
        "CapturePDDIMessages__6tDebugP10pddiDevice",
        Ok(
            "tDebug::CapturePDDIMessages(pddiDevice *)",
        ),
    ),
    (
        "P3DVERIFY__FiPCcN41",
        Ok(
            "P3DVERIFY(int, char const *, char const *, char const *, char const *, char const *)",
        ),
    ),
    (
        "__9AdaptPDDI",
        Ok(
            "AdaptPDDI::AdaptPDDI(void)",
        ),
    ),
    (
        "__tf9AdaptPDDI",
        Ok(
            "AdaptPDDI type_info function",
        ),
    ),
    (
        "__Q210pddiDevice15MessageCallback",
        Ok(
            "pddiDevice::MessageCallback::MessageCallback(void)",
        ),
    ),
    (
        "Info__9AdaptPDDIPCc",
        Ok(
            "AdaptPDDI::Info(char const *)",
        ),
    ),
    (
        "Warn__9AdaptPDDIPCc",
        Ok(
            "AdaptPDDI::Warn(char const *)",
        ),
    ),
    (
        "Fatal__9AdaptPDDIPCcT1i",
        Ok(
            "AdaptPDDI::Fatal(char const *, char const *, int)",
        ),
    ),
    (
        "__tfQ210pddiDevice15MessageCallback",
        Ok(
            "pddiDevice::MessageCallback type_info function",
        ),
    ),
    (
        "__5tFile",
        Ok(
            "tFile::tFile(void)",
        ),
    ),
    (
        "_$_5tFile",
        Ok(
            "tFile::~tFile(void)",
        ),
    ),
    (
        "SetFilename__5tFilePCc",
        Ok(
            "tFile::SetFilename(char const *)",
        ),
    ),
    (
        "UncompressBlock__5tFilePUcUiT1Ui",
        Ok(
            "tFile::UncompressBlock(unsigned char *, unsigned int, unsigned char *, unsigned int)",
        ),
    ),
    (
        "__8tFileMemPUcUib",
        Ok(
            "tFileMem::tFileMem(unsigned char *, unsigned int, bool)",
        ),
    ),
    (
        "_$_8tFileMem",
        Ok(
            "tFileMem::~tFileMem(void)",
        ),
    ),
    (
        "GetData__8tFileMemPvUiQ25tFile8DataType",
        Ok(
            "tFileMem::GetData(void *, unsigned int, tFile::DataType)",
        ),
    ),
    (
        "EndOfFile__8tFileMem",
        Ok(
            "tFileMem::EndOfFile(void)",
        ),
    ),
    (
        "GetSize__8tFileMem",
        Ok(
            "tFileMem::GetSize(void)",
        ),
    ),
    (
        "Advance__8tFileMemUi",
        Ok(
            "tFileMem::Advance(unsigned int)",
        ),
    ),
    (
        "GetPosition__8tFileMem",
        Ok(
            "tFileMem::GetPosition(void)",
        ),
    ),
    (
        "GetMemory__8tFileMem",
        Ok(
            "tFileMem::GetMemory(void)",
        ),
    ),
    (
        "SetCompressed__8tFileMemb",
        Ok(
            "tFileMem::SetCompressed(bool)",
        ),
    ),
    (
        "SetUncompressedSize__8tFileMemi",
        Ok(
            "tFileMem::SetUncompressedSize(int)",
        ),
    ),
    (
        "__tf5tFile",
        Ok(
            "tFile type_info function",
        ),
    ),
    (
        "__tf8tFileMem",
        Ok(
            "tFileMem type_info function",
        ),
    ),
    (
        "SetPosition__5tFilei",
        Ok(
            "tFile::SetPosition(int)",
        ),
    ),
    (
        "Read__5tFilePvUiUi",
        Ok(
            "tFile::Read(void *, unsigned int, unsigned int)",
        ),
    ),
    (
        "SetCompressed__5tFileb",
        Ok(
            "tFile::SetCompressed(bool)",
        ),
    ),
    (
        "SetUncompressedSize__5tFilei",
        Ok(
            "tFile::SetUncompressedSize(int)",
        ),
    ),
    (
        "GetEndianSwap__8tFileMem",
        Ok(
            "tFileMem::GetEndianSwap(void)",
        ),
    ),
    (
        "SetEndianSwap__8tFileMemb",
        Ok(
            "tFileMem::SetEndianSwap(bool)",
        ),
    ),
    (
        "__10tFontGlyph",
        Ok(
            "tFontGlyph::tFontGlyph(void)",
        ),
    ),
    (
        "_$_10tFontGlyph",
        Ok(
            "tFontGlyph::~tFontGlyph(void)",
        ),
    ),
    (
        "DisplayText__C5tFontPCUsi",
        Ok(
            "tFont::DisplayText(unsigned short const *, int) const",
        ),
    ),
    (
        "_$_5tFont",
        Ok(
            "tFont::~tFont(void)",
        ),
    ),
    (
        "__tf5tFont",
        Ok(
            "tFont type_info function",
        ),
    ),
    (
        "__9tGameAttrPCcUi",
        Ok(
            "tGameAttr::tGameAttr(char const *, unsigned int)",
        ),
    ),
    (
        "_$_9tGameAttr",
        Ok(
            "tGameAttr::~tGameAttr(void)",
        ),
    ),
    (
        "Set__9tGameAttrPcQ29tGameAttr4TypePvUi",
        Ok(
            "tGameAttr::Set(char *, tGameAttr::Type, void *, unsigned int)",
        ),
    ),
    (
        "SetInt__9tGameAttrPci",
        Ok(
            "tGameAttr::SetInt(char *, int)",
        ),
    ),
    (
        "SetFloat__9tGameAttrPcf",
        Ok(
            "tGameAttr::SetFloat(char *, float)",
        ),
    ),
    (
        "SetColour__9tGameAttrPcG10pddiColour",
        Ok(
            "tGameAttr::SetColour(char *, pddiColour)",
        ),
    ),
    (
        "SetMatrix__9tGameAttrPcRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "tGameAttr::SetMatrix(char *, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "SetVector__9tGameAttrPcRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tGameAttr::SetVector(char *, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__15tGameAttrLoader",
        Ok(
            "tGameAttrLoader::tGameAttrLoader(void)",
        ),
    ),
    (
        "LoadObject__15tGameAttrLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tGameAttrLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "_$_Q29tGameAttr7BaseMap",
        Ok(
            "tGameAttr::BaseMap::~BaseMap(void)",
        ),
    ),
    (
        "SetName__Q29tGameAttr7BaseMapPc",
        Ok(
            "tGameAttr::BaseMap::SetName(char *)",
        ),
    ),
    (
        "SetParam__Q29tGameAttr7BaseMapPvi",
        Ok(
            "tGameAttr::BaseMap::SetParam(void *, int)",
        ),
    ),
    (
        "__tf9tGameAttr",
        Ok(
            "tGameAttr type_info function",
        ),
    ),
    (
        "__tf15tGameAttrLoader",
        Ok(
            "tGameAttrLoader type_info function",
        ),
    ),
    (
        "_$_15tGameAttrLoader",
        Ok(
            "tGameAttrLoader::~tGameAttrLoader(void)",
        ),
    ),
    (
        "_GLOBAL_$I$__9tGameAttrPCcUi",
        Ok(
            "global constructors keyed to tGameAttr::tGameAttr(char const *, unsigned int)",
        ),
    ),
    (
        "__9tGeometryi",
        Ok(
            "tGeometry::tGeometry(int)",
        ),
    ),
    (
        "_$_9tGeometry",
        Ok(
            "tGeometry::~tGeometry(void)",
        ),
    ),
    (
        "GetShader__9tGeometryi",
        Ok(
            "tGeometry::GetShader(int)",
        ),
    ),
    (
        "SetShader__9tGeometryiP7tShader",
        Ok(
            "tGeometry::SetShader(int, tShader *)",
        ),
    ),
    (
        "ProcessShaders__9tGeometryRQ29tDrawable14ShaderCallback",
        Ok(
            "tGeometry::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "SetPrimGroup__9tGeometryiP10tPrimGroup",
        Ok(
            "tGeometry::SetPrimGroup(int, tPrimGroup *)",
        ),
    ),
    (
        "Display__9tGeometry",
        Ok(
            "tGeometry::Display(void)",
        ),
    ),
    (
        "SetBoundingBox__9tGeometryffffff",
        Ok(
            "tGeometry::SetBoundingBox(float, float, float, float, float, float)",
        ),
    ),
    (
        "SetBoundingSphere__9tGeometryffff",
        Ok(
            "tGeometry::SetBoundingSphere(float, float, float, float)",
        ),
    ),
    (
        "__15tGeometryLoader",
        Ok(
            "tGeometryLoader::tGeometryLoader(void)",
        ),
    ),
    (
        "Allocate__15tGeometryLoaderi",
        Ok(
            "tGeometryLoader::Allocate(int)",
        ),
    ),
    (
        "LoadObject__15tGeometryLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tGeometryLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tft6tArray1ZP10tPrimGroup",
        Ok(
            "tArray<tPrimGroup *> type_info function",
        ),
    ),
    (
        "__tft9tPtrArray1ZP10tPrimGroup",
        Ok(
            "tPtrArray<tPrimGroup *> type_info function",
        ),
    ),
    (
        "__tf9tGeometry",
        Ok(
            "tGeometry type_info function",
        ),
    ),
    (
        "_$_15tGeometryLoader",
        Ok(
            "tGeometryLoader::~tGeometryLoader(void)",
        ),
    ),
    (
        "__tf15tGeometryLoader",
        Ok(
            "tGeometryLoader type_info function",
        ),
    ),
    (
        "_$_t9tPtrArray1ZP10tPrimGroup",
        Ok(
            "tPtrArray<tPrimGroup *>::~tPtrArray(void)",
        ),
    ),
    (
        "GetBoundingBox__9tGeometryPQ218RadicalMathLibrary5Box3D",
        Ok(
            "tGeometry::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__9tGeometryPQ218RadicalMathLibrary6Sphere",
        Ok(
            "tGeometry::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "GetNumShader__9tGeometry",
        Ok(
            "tGeometry::GetNumShader(void)",
        ),
    ),
    (
        "GetNumPrimGroup__9tGeometry",
        Ok(
            "tGeometry::GetNumPrimGroup(void)",
        ),
    ),
    (
        "GetPrimGroup__9tGeometryi",
        Ok(
            "tGeometry::GetPrimGroup(int)",
        ),
    ),
    (
        "GetNumFaceNormals__9tGeometry",
        Ok(
            "tGeometry::GetNumFaceNormals(void)",
        ),
    ),
    (
        "GetFaceNormals__9tGeometry",
        Ok(
            "tGeometry::GetFaceNormals(void)",
        ),
    ),
    (
        "CastsShadow__9tGeometry",
        Ok(
            "tGeometry::CastsShadow(void)",
        ),
    ),
    (
        "SetCastsShadow__9tGeometryi",
        Ok(
            "tGeometry::SetCastsShadow(int)",
        ),
    ),
    (
        "_$_t6tArray1ZP10tPrimGroup",
        Ok(
            "tArray<tPrimGroup *>::~tArray(void)",
        ),
    ),
    (
        "SetSize__t6tArray1ZP10tPrimGroupi",
        Ok(
            "tArray<tPrimGroup *>::SetSize(int)",
        ),
    ),
    (
        "SetSize__t9tPtrArray1ZP10tPrimGroupi",
        Ok(
            "tPtrArray<tPrimGroup *>::SetSize(int)",
        ),
    ),
    (
        "__6tImage",
        Ok(
            "tImage::tImage(void)",
        ),
    ),
    (
        "_$_6tImage",
        Ok(
            "tImage::~tImage(void)",
        ),
    ),
    (
        "Invert__6tImage",
        Ok(
            "tImage::Invert(void)",
        ),
    ),
    (
        "__7tImage8",
        Ok(
            "tImage8::tImage8(void)",
        ),
    ),
    (
        "_$_7tImage8",
        Ok(
            "tImage8::~tImage8(void)",
        ),
    ),
    (
        "SetPixelIndex__7tImage8iiUi",
        Ok(
            "tImage8::SetPixelIndex(int, int, unsigned int)",
        ),
    ),
    (
        "GetPixelIndex__7tImage8ii",
        Ok(
            "tImage8::GetPixelIndex(int, int)",
        ),
    ),
    (
        "SetImage__7tImage8iiPUc",
        Ok(
            "tImage8::SetImage(int, int, unsigned char *)",
        ),
    ),
    (
        "SetSize__7tImage8ii",
        Ok(
            "tImage8::SetSize(int, int)",
        ),
    ),
    (
        "ReSize__7tImage8ii",
        Ok(
            "tImage8::ReSize(int, int)",
        ),
    ),
    (
        "GetColour__7tImage8ii",
        Ok(
            "tImage8::GetColour(int, int)",
        ),
    ),
    (
        "SetColour__7tImage8iiUi",
        Ok(
            "tImage8::SetColour(int, int, unsigned int)",
        ),
    ),
    (
        "GetPalette__7tImage8",
        Ok(
            "tImage8::GetPalette(void)",
        ),
    ),
    (
        "SetPalette__7tImage8PUii",
        Ok(
            "tImage8::SetPalette(unsigned int *, int)",
        ),
    ),
    (
        "SetPaletteEntry__7tImage8iUi",
        Ok(
            "tImage8::SetPaletteEntry(int, unsigned int)",
        ),
    ),
    (
        "GetPaletteEntry__7tImage8i",
        Ok(
            "tImage8::GetPaletteEntry(int)",
        ),
    ),
    (
        "CopyRegion__7tImage8P6tImageiiiiii",
        Ok(
            "tImage8::CopyRegion(tImage *, int, int, int, int, int, int)",
        ),
    ),
    (
        "Clear__7tImage8Ui",
        Ok(
            "tImage8::Clear(unsigned int)",
        ),
    ),
    (
        "__12tImageLoader",
        Ok(
            "tImageLoader::tImageLoader(void)",
        ),
    ),
    (
        "_$_12tImageLoader",
        Ok(
            "tImageLoader::~tImageLoader(void)",
        ),
    ),
    (
        "LoadObject__12tImageLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tImageLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadImage__12tImageLoaderP10tChunkFilei",
        Ok(
            "tImageLoader::LoadImage(tChunkFile *, int)",
        ),
    ),
    (
        "__tf6tImage",
        Ok(
            "tImage type_info function",
        ),
    ),
    (
        "__tf7tImage8",
        Ok(
            "tImage8 type_info function",
        ),
    ),
    (
        "__tf12tImageLoader",
        Ok(
            "tImageLoader type_info function",
        ),
    ),
    (
        "SetUsedColours__7tImage8i",
        Ok(
            "tImage8::SetUsedColours(int)",
        ),
    ),
    (
        "GetUsedColours__7tImage8",
        Ok(
            "tImage8::GetUsedColours(void)",
        ),
    ),
    (
        "Lock__7tImage8",
        Ok(
            "tImage8::Lock(void)",
        ),
    ),
    (
        "__12ImageBuilder",
        Ok(
            "ImageBuilder::ImageBuilder(void)",
        ),
    ),
    (
        "BeginImage__12ImageBuilderiiiQ313tImageHandler7Builder6OriginP10pddiColour",
        Ok(
            "ImageBuilder::BeginImage(int, int, int, tImageHandler::Builder::Origin, pddiColour *)",
        ),
    ),
    (
        "ProcessScanline32__12ImageBuilderPUi",
        Ok(
            "ImageBuilder::ProcessScanline32(unsigned int *)",
        ),
    ),
    (
        "ProcessScanline8__12ImageBuilderPUc",
        Ok(
            "ImageBuilder::ProcessScanline8(unsigned char *)",
        ),
    ),
    (
        "EndImage__12ImageBuilder",
        Ok(
            "ImageBuilder::EndImage(void)",
        ),
    ),
    (
        "__14TextureBuilder",
        Ok(
            "TextureBuilder::TextureBuilder(void)",
        ),
    ),
    (
        "BeginImage__14TextureBuilderiiiQ313tImageHandler7Builder6OriginP10pddiColour",
        Ok(
            "TextureBuilder::BeginImage(int, int, int, tImageHandler::Builder::Origin, pddiColour *)",
        ),
    ),
    (
        "ProcessScanline32__14TextureBuilderPUi",
        Ok(
            "TextureBuilder::ProcessScanline32(unsigned int *)",
        ),
    ),
    (
        "ProcessScanline8__14TextureBuilderPUc",
        Ok(
            "TextureBuilder::ProcessScanline8(unsigned char *)",
        ),
    ),
    (
        "EndImage__14TextureBuilder",
        Ok(
            "TextureBuilder::EndImage(void)",
        ),
    ),
    (
        "DirectCopy__14TextureBuilderPUci",
        Ok(
            "TextureBuilder::DirectCopy(unsigned char *, int)",
        ),
    ),
    (
        "SetCompressedData__14TextureBuilderiPci",
        Ok(
            "TextureBuilder::SetCompressedData(int, char *, int)",
        ),
    ),
    (
        "GetMemoryImagePtr__14TextureBuilder",
        Ok(
            "TextureBuilder::GetMemoryImagePtr(void)",
        ),
    ),
    (
        "GetPaletteMemoryImagePtr__14TextureBuilder",
        Ok(
            "TextureBuilder::GetPaletteMemoryImagePtr(void)",
        ),
    ),
    (
        "CheckExtension__13tImageHandlerPc",
        Ok(
            "tImageHandler::CheckExtension(char *)",
        ),
    ),
    (
        "Load__13tImageHandlerP5tFileP12tEntityStore",
        Ok(
            "tImageHandler::Load(tFile *, tEntityStore *)",
        ),
    ),
    (
        "SetNativeResolution__13tImageHandlerii",
        Ok(
            "tImageHandler::SetNativeResolution(int, int)",
        ),
    ),
    (
        "__13tImageFactory",
        Ok(
            "tImageFactory::tImageFactory(void)",
        ),
    ),
    (
        "_$_13tImageFactory",
        Ok(
            "tImageFactory::~tImageFactory(void)",
        ),
    ),
    (
        "SetTextureHints__13tImageFactoryii15pddiTextureType20pddiTextureUsageHint",
        Ok(
            "tImageFactory::SetTextureHints(int, int, pddiTextureType, pddiTextureUsageHint)",
        ),
    ),
    (
        "LoadAsImage__13tImageFactoryP5tFilePc",
        Ok(
            "tImageFactory::LoadAsImage(tFile *, char *)",
        ),
    ),
    (
        "LoadAsImage__13tImageFactoryPcT1",
        Ok(
            "tImageFactory::LoadAsImage(char *, char *)",
        ),
    ),
    (
        "ParseAsImage__13tImageFactoryP5tFilePcQ213tImageHandler6Format",
        Ok(
            "tImageFactory::ParseAsImage(tFile *, char *, tImageHandler::Format)",
        ),
    ),
    (
        "LoadAsTexture__13tImageFactoryPcT1",
        Ok(
            "tImageFactory::LoadAsTexture(char *, char *)",
        ),
    ),
    (
        "ParseAsTexture__13tImageFactoryP5tFilePciQ213tImageHandler6Format",
        Ok(
            "tImageFactory::ParseAsTexture(tFile *, char *, int, tImageHandler::Format)",
        ),
    ),
    (
        "LoadIntoTexture__13tImageFactoryPcP8tTexturei",
        Ok(
            "tImageFactory::LoadIntoTexture(char *, tTexture *, int)",
        ),
    ),
    (
        "ParseIntoTexture__13tImageFactoryP5tFileP8tTextureQ213tImageHandler6Formati",
        Ok(
            "tImageFactory::ParseIntoTexture(tFile *, tTexture *, tImageHandler::Format, int)",
        ),
    ),
    (
        "FindHandler__13tImageFactoryPc",
        Ok(
            "tImageFactory::FindHandler(char *)",
        ),
    ),
    (
        "FindHandler__13tImageFactoryQ213tImageHandler6Format",
        Ok(
            "tImageFactory::FindHandler(tImageHandler::Format)",
        ),
    ),
    (
        "AddHandler__13tImageFactoryP13tImageHandler",
        Ok(
            "tImageFactory::AddHandler(tImageHandler *)",
        ),
    ),
    (
        "__13tImageHandler",
        Ok(
            "tImageHandler::tImageHandler(void)",
        ),
    ),
    (
        "__tf13tImageHandler",
        Ok(
            "tImageHandler type_info function",
        ),
    ),
    (
        "__tf12ImageBuilder",
        Ok(
            "ImageBuilder type_info function",
        ),
    ),
    (
        "__tf14TextureBuilder",
        Ok(
            "TextureBuilder type_info function",
        ),
    ),
    (
        "__Q213tImageHandler7Builder",
        Ok(
            "tImageHandler::Builder::Builder(void)",
        ),
    ),
    (
        "_$_13tImageHandler",
        Ok(
            "tImageHandler::~tImageHandler(void)",
        ),
    ),
    (
        "DirectCopy__Q213tImageHandler7BuilderPUci",
        Ok(
            "tImageHandler::Builder::DirectCopy(unsigned char *, int)",
        ),
    ),
    (
        "GetMemoryImagePtr__Q213tImageHandler7Builder",
        Ok(
            "tImageHandler::Builder::GetMemoryImagePtr(void)",
        ),
    ),
    (
        "GetPaletteMemoryImagePtr__Q213tImageHandler7Builder",
        Ok(
            "tImageHandler::Builder::GetPaletteMemoryImagePtr(void)",
        ),
    ),
    (
        "SetCompressedData__Q213tImageHandler7BuilderiPci",
        Ok(
            "tImageHandler::Builder::SetCompressedData(int, char *, int)",
        ),
    ),
    (
        "SetExpectedFileSize__Q213tImageHandler7Builderi",
        Ok(
            "tImageHandler::Builder::SetExpectedFileSize(int)",
        ),
    ),
    (
        "GetExpectedFileSize__Q213tImageHandler7Builder",
        Ok(
            "tImageHandler::Builder::GetExpectedFileSize(void)",
        ),
    ),
    (
        "SetTextureType__Q213tImageHandler7Builder15pddiTextureType",
        Ok(
            "tImageHandler::Builder::SetTextureType(pddiTextureType)",
        ),
    ),
    (
        "SaveImage__13tImageHandlerP6tImagePc",
        Ok(
            "tImageHandler::SaveImage(tImage *, char *)",
        ),
    ),
    (
        "SetLoadType__13tImageHandlerQ213tImageHandler8LoadType",
        Ok(
            "tImageHandler::SetLoadType(tImageHandler::LoadType)",
        ),
    ),
    (
        "GetLoadType__13tImageHandler",
        Ok(
            "tImageHandler::GetLoadType(void)",
        ),
    ),
    (
        "SetFullName__13tImageHandlerb",
        Ok(
            "tImageHandler::SetFullName(bool)",
        ),
    ),
    (
        "GetFullName__13tImageHandler",
        Ok(
            "tImageHandler::GetFullName(void)",
        ),
    ),
    (
        "__16tRawImageHandler",
        Ok(
            "tRawImageHandler::tRawImageHandler(void)",
        ),
    ),
    (
        "SetTextureType__14TextureBuilder15pddiTextureType",
        Ok(
            "TextureBuilder::SetTextureType(pddiTextureType)",
        ),
    ),
    (
        "__tfQ213tImageHandler7Builder",
        Ok(
            "tImageHandler::Builder type_info function",
        ),
    ),
    (
        "__11tImageGlyph",
        Ok(
            "tImageGlyph::tImageGlyph(void)",
        ),
    ),
    (
        "_$_11tImageGlyph",
        Ok(
            "tImageGlyph::~tImageGlyph(void)",
        ),
    ),
    (
        "__10tImageFont",
        Ok(
            "tImageFont::tImageFont(void)",
        ),
    ),
    (
        "_$_10tImageFont",
        Ok(
            "tImageFont::~tImageFont(void)",
        ),
    ),
    (
        "GetTextHeight__C10tImageFontPCUs",
        Ok(
            "tImageFont::GetTextHeight(unsigned short const *) const",
        ),
    ),
    (
        "GetTextWidth__C10tImageFontPCUs",
        Ok(
            "tImageFont::GetTextWidth(unsigned short const *) const",
        ),
    ),
    (
        "DisplayText__C10tImageFontP6tImageiiPCUsi",
        Ok(
            "tImageFont::DisplayText(tImage *, int, int, unsigned short const *, int) const",
        ),
    ),
    (
        "GetLineWidth__C10tImageFontPCUs",
        Ok(
            "tImageFont::GetLineWidth(unsigned short const *) const",
        ),
    ),
    (
        "DisplayLine__C10tImageFontP6tImageiiPCUsi",
        Ok(
            "tImageFont::DisplayLine(tImage *, int, int, unsigned short const *, int) const",
        ),
    ),
    (
        "FindGlyph__C10tImageFontUs",
        Ok(
            "tImageFont::FindGlyph(unsigned short) const",
        ),
    ),
    (
        "__16tImageFontLoader",
        Ok(
            "tImageFontLoader::tImageFontLoader(void)",
        ),
    ),
    (
        "LoadObject__16tImageFontLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tImageFontLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf10tImageFont",
        Ok(
            "tImageFont type_info function",
        ),
    ),
    (
        "__tf16tImageFontLoader",
        Ok(
            "tImageFontLoader type_info function",
        ),
    ),
    (
        "GetFontSize__C10tImageFont",
        Ok(
            "tImageFont::GetFontSize(void) const",
        ),
    ),
    (
        "GetFontWidth__C10tImageFont",
        Ok(
            "tImageFont::GetFontWidth(void) const",
        ),
    ),
    (
        "GetFontHeight__C10tImageFont",
        Ok(
            "tImageFont::GetFontHeight(void) const",
        ),
    ),
    (
        "GetFontBaseLine__C10tImageFont",
        Ok(
            "tImageFont::GetFontBaseLine(void) const",
        ),
    ),
    (
        "GetLineSpacing__C10tImageFont",
        Ok(
            "tImageFont::GetLineSpacing(void) const",
        ),
    ),
    (
        "SetLineSpacing__10tImageFontUi",
        Ok(
            "tImageFont::SetLineSpacing(unsigned int)",
        ),
    ),
    (
        "GetColour__C10tImageFont",
        Ok(
            "tImageFont::GetColour(void) const",
        ),
    ),
    (
        "SetColour__10tImageFontG10pddiColour",
        Ok(
            "tImageFont::SetColour(pddiColour)",
        ),
    ),
    (
        "_$_16tImageFontLoader",
        Ok(
            "tImageFontLoader::~tImageFontLoader(void)",
        ),
    ),
    (
        "__10tInventory",
        Ok(
            "tInventory::tInventory(void)",
        ),
    ),
    (
        "_$_10tInventory",
        Ok(
            "tInventory::~tInventory(void)",
        ),
    ),
    (
        "Find__10tInventoryRQ216radLoadInventory12SafeCastBaseG13tUidUnaligned",
        Ok(
            "tInventory::Find(radLoadInventory::SafeCastBase &, tUidUnaligned)",
        ),
    ),
    (
        "Store__10tInventoryP7tEntity",
        Ok(
            "tInventory::Store(tEntity *)",
        ),
    ),
    (
        "Store__10tInventoryG13tUidUnalignedP9IRefCount",
        Ok(
            "tInventory::Store(tUidUnaligned, IRefCount *)",
        ),
    ),
    (
        "StoreHandlingCollisions__10tInventoryP7tEntity",
        Ok(
            "tInventory::StoreHandlingCollisions(tEntity *)",
        ),
    ),
    (
        "StoreHandlingCollisions__10tInventoryG13tUidUnalignedP9IRefCount",
        Ok(
            "tInventory::StoreHandlingCollisions(tUidUnaligned, IRefCount *)",
        ),
    ),
    (
        "Remove__10tInventoryP9IRefCount",
        Ok(
            "tInventory::Remove(IRefCount *)",
        ),
    ),
    (
        "TestCollision__10tInventoryP7tEntity",
        Ok(
            "tInventory::TestCollision(tEntity *)",
        ),
    ),
    (
        "AddSection__10tInventoryPCc",
        Ok(
            "tInventory::AddSection(char const *)",
        ),
    ),
    (
        "DeleteSection__10tInventoryG13tUidUnaligned",
        Ok(
            "tInventory::DeleteSection(tUidUnaligned)",
        ),
    ),
    (
        "GetSection__10tInventoryG13tUidUnaligned",
        Ok(
            "tInventory::GetSection(tUidUnaligned)",
        ),
    ),
    (
        "RemoveSectionElements__10tInventoryG13tUidUnaligned",
        Ok(
            "tInventory::RemoveSectionElements(tUidUnaligned)",
        ),
    ),
    (
        "SelectSection__10tInventoryRC5tName",
        Ok(
            "tInventory::SelectSection(tName const &)",
        ),
    ),
    (
        "PushSection__10tInventory",
        Ok(
            "tInventory::PushSection(void)",
        ),
    ),
    (
        "PopSection__10tInventory",
        Ok(
            "tInventory::PopSection(void)",
        ),
    ),
    (
        "FindSection__10tInventoryRC5tName",
        Ok(
            "tInventory::FindSection(tName const &)",
        ),
    ),
    (
        "SearchSection__10tInventoryUiRQ216radLoadInventory12SafeCastBaseRC5tName",
        Ok(
            "tInventory::SearchSection(unsigned int, radLoadInventory::SafeCastBase &, tName const &)",
        ),
    ),
    (
        "RePack__10tInventory",
        Ok(
            "tInventory::RePack(void)",
        ),
    ),
    (
        "SetAutoRepack__10tInventoryb",
        Ok(
            "tInventory::SetAutoRepack(bool)",
        ),
    ),
    (
        "GetAutoRepack__10tInventory",
        Ok(
            "tInventory::GetAutoRepack(void)",
        ),
    ),
    (
        "RemoveAllElements__10tInventory",
        Ok(
            "tInventory::RemoveAllElements(void)",
        ),
    ),
    (
        "DeleteAllSections__10tInventory",
        Ok(
            "tInventory::DeleteAllSections(void)",
        ),
    ),
    (
        "Store__12tEntityStoreP7tEntity",
        Ok(
            "tEntityStore::Store(tEntity *)",
        ),
    ),
    (
        "Store__12tEntityStoreG13tUidUnalignedP9IRefCount",
        Ok(
            "tEntityStore::Store(tUidUnaligned, IRefCount *)",
        ),
    ),
    (
        "StoreHandlingCollisions__12tEntityStoreP7tEntity",
        Ok(
            "tEntityStore::StoreHandlingCollisions(tEntity *)",
        ),
    ),
    (
        "StoreHandlingCollisions__12tEntityStoreG13tUidUnalignedP9IRefCount",
        Ok(
            "tEntityStore::StoreHandlingCollisions(tUidUnaligned, IRefCount *)",
        ),
    ),
    (
        "__tf12tEntityStore",
        Ok(
            "tEntityStore type_info function",
        ),
    ),
    (
        "__tf10tInventory",
        Ok(
            "tInventory type_info function",
        ),
    ),
    (
        "__tf14tSafeCasterObj",
        Ok(
            "tSafeCasterObj type_info function",
        ),
    ),
    (
        "_$_12tEntityStore",
        Ok(
            "tEntityStore::~tEntityStore(void)",
        ),
    ),
    (
        "__12tEntityStore",
        Ok(
            "tEntityStore::tEntityStore(void)",
        ),
    ),
    (
        "safe_cast__14tSafeCasterObjP9IRefCount",
        Ok(
            "tSafeCasterObj::safe_cast(IRefCount *)",
        ),
    ),
    (
        "__6tLight",
        Ok(
            "tLight::tLight(void)",
        ),
    ),
    (
        "_$_6tLight",
        Ok(
            "tLight::~tLight(void)",
        ),
    ),
    (
        "Activate__6tLightUi",
        Ok(
            "tLight::Activate(unsigned int)",
        ),
    ),
    (
        "Deactivate__6tLight",
        Ok(
            "tLight::Deactivate(void)",
        ),
    ),
    (
        "SetColour__6tLightG10pddiColour",
        Ok(
            "tLight::SetColour(pddiColour)",
        ),
    ),
    (
        "GetColour__6tLight",
        Ok(
            "tLight::GetColour(void)",
        ),
    ),
    (
        "SetPosition__6tLightfff",
        Ok(
            "tLight::SetPosition(float, float, float)",
        ),
    ),
    (
        "Enable__6tLightb",
        Ok(
            "tLight::Enable(bool)",
        ),
    ),
    (
        "SetDecayType__6tLightQ36tLight10DecayRange4Type",
        Ok(
            "tLight::SetDecayType(tLight::DecayRange::Type)",
        ),
    ),
    (
        "SetDecayRange__6tLightRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "tLight::SetDecayRange(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetDecayRotationY__6tLightf",
        Ok(
            "tLight::SetDecayRotationY(float)",
        ),
    ),
    (
        "SetIlluminationType__6tLightQ26tLight16IlluminationType",
        Ok(
            "tLight::SetIlluminationType(tLight::IlluminationType)",
        ),
    ),
    (
        "__11tLightGroup",
        Ok(
            "tLightGroup::tLightGroup(void)",
        ),
    ),
    (
        "_$_11tLightGroup",
        Ok(
            "tLightGroup::~tLightGroup(void)",
        ),
    ),
    (
        "__tf6tLight",
        Ok(
            "tLight type_info function",
        ),
    ),
    (
        "__tft6tArray1ZP6tLight",
        Ok(
            "tArray<tLight *> type_info function",
        ),
    ),
    (
        "__tft9tPtrArray1ZP6tLight",
        Ok(
            "tPtrArray<tLight *> type_info function",
        ),
    ),
    (
        "__tf11tLightGroup",
        Ok(
            "tLightGroup type_info function",
        ),
    ),
    (
        "SetPosition__6tLightRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tLight::SetPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "_$_t9tPtrArray1ZP6tLight",
        Ok(
            "tPtrArray<tLight *>::~tPtrArray(void)",
        ),
    ),
    (
        "_$_t6tArray1ZP6tLight",
        Ok(
            "tArray<tLight *>::~tArray(void)",
        ),
    ),
    (
        "SetSize__t6tArray1ZP6tLighti",
        Ok(
            "tArray<tLight *>::SetSize(int)",
        ),
    ),
    (
        "SetSize__t9tPtrArray1ZP6tLighti",
        Ok(
            "tPtrArray<tLight *>::SetSize(int)",
        ),
    ),
    (
        "__12tLightLoader",
        Ok(
            "tLightLoader::tLightLoader(void)",
        ),
    ),
    (
        "LoadObject__12tLightLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tLightLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__17tLightGroupLoader",
        Ok(
            "tLightGroupLoader::tLightGroupLoader(void)",
        ),
    ),
    (
        "LoadObject__17tLightGroupLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tLightGroupLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf12tLightLoader",
        Ok(
            "tLightLoader type_info function",
        ),
    ),
    (
        "__tf17tLightGroupLoader",
        Ok(
            "tLightGroupLoader type_info function",
        ),
    ),
    (
        "_$_12tLightLoader",
        Ok(
            "tLightLoader::~tLightLoader(void)",
        ),
    ),
    (
        "_$_17tLightGroupLoader",
        Ok(
            "tLightGroupLoader::~tLightGroupLoader(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z6tLight",
        Ok(
            "radLoadInventory::SafeCast<tLight>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z6tLight",
        Ok(
            "radLoadInventory::SafeCast<tLight> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z6tLightP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tLight>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "__8tLocator",
        Ok(
            "tLocator::tLocator(void)",
        ),
    ),
    (
        "_$_8tLocator",
        Ok(
            "tLocator::~tLocator(void)",
        ),
    ),
    (
        "SetPosition__8tLocatorGQ218RadicalMathLibrary6Vector",
        Ok(
            "tLocator::SetPosition(RadicalMathLibrary::Vector)",
        ),
    ),
    (
        "__14tLocatorLoader",
        Ok(
            "tLocatorLoader::tLocatorLoader(void)",
        ),
    ),
    (
        "LoadObject__14tLocatorLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tLocatorLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf8tLocator",
        Ok(
            "tLocator type_info function",
        ),
    ),
    (
        "__tf14tLocatorLoader",
        Ok(
            "tLocatorLoader type_info function",
        ),
    ),
    (
        "_$_14tLocatorLoader",
        Ok(
            "tLocatorLoader::~tLocatorLoader(void)",
        ),
    ),
    (
        "LoadFile__12tFileHandlerP14radLoadOptionsP23radLoadUpdatableRequest",
        Ok(
            "tFileHandler::LoadFile(radLoadOptions *, radLoadUpdatableRequest *)",
        ),
    ),
    (
        "LoadData__13tChunkHandlerP13radLoadStreamiP16radLoadInventoryP9IRefCount",
        Ok(
            "tChunkHandler::LoadData(radLoadStream *, int, radLoadInventory *, IRefCount *)",
        ),
    ),
    (
        "__15tP3DFileHandleri",
        Ok(
            "tP3DFileHandler::tP3DFileHandler(int)",
        ),
    ),
    (
        "_$_15tP3DFileHandler",
        Ok(
            "tP3DFileHandler::~tP3DFileHandler(void)",
        ),
    ),
    (
        "CheckExtension__15tP3DFileHandlerPc",
        Ok(
            "tP3DFileHandler::CheckExtension(char *)",
        ),
    ),
    (
        "Load__15tP3DFileHandlerP5tFileP12tEntityStore",
        Ok(
            "tP3DFileHandler::Load(tFile *, tEntityStore *)",
        ),
    ),
    (
        "AddHandler__15tP3DFileHandlerP13tChunkHandler",
        Ok(
            "tP3DFileHandler::AddHandler(tChunkHandler *)",
        ),
    ),
    (
        "AddHandler__15tP3DFileHandlerP13tChunkHandlerUi",
        Ok(
            "tP3DFileHandler::AddHandler(tChunkHandler *, unsigned int)",
        ),
    ),
    (
        "GetHandler__15tP3DFileHandlerUi",
        Ok(
            "tP3DFileHandler::GetHandler(unsigned int)",
        ),
    ),
    (
        "RemoveAllHandlers__15tP3DFileHandler",
        Ok(
            "tP3DFileHandler::RemoveAllHandlers(void)",
        ),
    ),
    (
        "Load__19tSimpleChunkHandlerP10tChunkFileP12tEntityStore",
        Ok(
            "tSimpleChunkHandler::Load(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "HandleCollision__19tSimpleChunkHandlerP7tEntity",
        Ok(
            "tSimpleChunkHandler::HandleCollision(tEntity *)",
        ),
    ),
    (
        "CheckChunkID__19tSimpleChunkHandlerUi",
        Ok(
            "tSimpleChunkHandler::CheckChunkID(unsigned int)",
        ),
    ),
    (
        "__12tLoadRequestPCc",
        Ok(
            "tLoadRequest::tLoadRequest(char const *)",
        ),
    ),
    (
        "__12tLoadRequestP5tFile",
        Ok(
            "tLoadRequest::tLoadRequest(tFile *)",
        ),
    ),
    (
        "_$_12tLoadRequest",
        Ok(
            "tLoadRequest::~tLoadRequest(void)",
        ),
    ),
    (
        "SetCallback__12tLoadRequestPQ212tLoadRequest8Callback",
        Ok(
            "tLoadRequest::SetCallback(tLoadRequest::Callback *)",
        ),
    ),
    (
        "SetAsync__12tLoadRequestb",
        Ok(
            "tLoadRequest::SetAsync(bool)",
        ),
    ),
    (
        "SetMemoryAllocator__12tLoadRequesti",
        Ok(
            "tLoadRequest::SetMemoryAllocator(int)",
        ),
    ),
    (
        "SetInventorySection__12tLoadRequestPCc",
        Ok(
            "tLoadRequest::SetInventorySection(char const *)",
        ),
    ),
    (
        "SetUserData__12tLoadRequestPv",
        Ok(
            "tLoadRequest::SetUserData(void *)",
        ),
    ),
    (
        "SetDummy__12tLoadRequestb",
        Ok(
            "tLoadRequest::SetDummy(bool)",
        ),
    ),
    (
        "IsDummy__12tLoadRequest",
        Ok(
            "tLoadRequest::IsDummy(void)",
        ),
    ),
    (
        "GetState__12tLoadRequest",
        Ok(
            "tLoadRequest::GetState(void)",
        ),
    ),
    (
        "Done__Q212tLoadRequest16InternalCallback",
        Ok(
            "tLoadRequest::InternalCallback::Done(void)",
        ),
    ),
    (
        "__12tLoadManageri",
        Ok(
            "tLoadManager::tLoadManager(int)",
        ),
    ),
    (
        "_$_12tLoadManager",
        Ok(
            "tLoadManager::~tLoadManager(void)",
        ),
    ),
    (
        "SwitchTask__12tLoadManager",
        Ok(
            "tLoadManager::SwitchTask(void)",
        ),
    ),
    (
        "CancelAll__12tLoadManager",
        Ok(
            "tLoadManager::CancelAll(void)",
        ),
    ),
    (
        "Load__12tLoadManagerP12tLoadRequest",
        Ok(
            "tLoadManager::Load(tLoadRequest *)",
        ),
    ),
    (
        "TriggerCallbacks__12tLoadManager",
        Ok(
            "tLoadManager::TriggerCallbacks(void)",
        ),
    ),
    (
        "AddHandler__12tLoadManagerP12tFileHandlerPc",
        Ok(
            "tLoadManager::AddHandler(tFileHandler *, char *)",
        ),
    ),
    (
        "GetHandler__12tLoadManagerPc",
        Ok(
            "tLoadManager::GetHandler(char *)",
        ),
    ),
    (
        "RemoveAllHandlers__12tLoadManager",
        Ok(
            "tLoadManager::RemoveAllHandlers(void)",
        ),
    ),
    (
        "GetP3DHandler__12tLoadManager",
        Ok(
            "tLoadManager::GetP3DHandler(void)",
        ),
    ),
    (
        "__tf12tFileHandler",
        Ok(
            "tFileHandler type_info function",
        ),
    ),
    (
        "__tf13tChunkHandler",
        Ok(
            "tChunkHandler type_info function",
        ),
    ),
    (
        "__tf19tSimpleChunkHandler",
        Ok(
            "tSimpleChunkHandler type_info function",
        ),
    ),
    (
        "__tf15tP3DFileHandler",
        Ok(
            "tP3DFileHandler type_info function",
        ),
    ),
    (
        "_$_Q212tLoadRequest16InternalCallback",
        Ok(
            "tLoadRequest::InternalCallback::~InternalCallback(void)",
        ),
    ),
    (
        "__tfQ212tLoadRequest16InternalCallback",
        Ok(
            "tLoadRequest::InternalCallback type_info function",
        ),
    ),
    (
        "__tf12tLoadRequest",
        Ok(
            "tLoadRequest type_info function",
        ),
    ),
    (
        "__tf12tLoadManager",
        Ok(
            "tLoadManager type_info function",
        ),
    ),
    (
        "_$_10tTempStore",
        Ok(
            "tTempStore::~tTempStore(void)",
        ),
    ),
    (
        "__tf10tTempStore",
        Ok(
            "tTempStore type_info function",
        ),
    ),
    (
        "_$_15tRefCountedTemp",
        Ok(
            "tRefCountedTemp::~tRefCountedTemp(void)",
        ),
    ),
    (
        "__15tRefCountedTemp",
        Ok(
            "tRefCountedTemp::tRefCountedTemp(void)",
        ),
    ),
    (
        "_$_12tFileHandler",
        Ok(
            "tFileHandler::~tFileHandler(void)",
        ),
    ),
    (
        "SetNameOverride__13tChunkHandlerPCc",
        Ok(
            "tChunkHandler::SetNameOverride(char const *)",
        ),
    ),
    (
        "_$_13tChunkHandler",
        Ok(
            "tChunkHandler::~tChunkHandler(void)",
        ),
    ),
    (
        "GetChunkID__19tSimpleChunkHandler",
        Ok(
            "tSimpleChunkHandler::GetChunkID(void)",
        ),
    ),
    (
        "SetNameOverride__19tSimpleChunkHandlerPCc",
        Ok(
            "tSimpleChunkHandler::SetNameOverride(char const *)",
        ),
    ),
    (
        "_$_19tSimpleChunkHandler",
        Ok(
            "tSimpleChunkHandler::~tSimpleChunkHandler(void)",
        ),
    ),
    (
        "Store__10tTempStoreP7tEntity",
        Ok(
            "tTempStore::Store(tEntity *)",
        ),
    ),
    (
        "StoreHandlingCollisions__10tTempStoreP7tEntity",
        Ok(
            "tTempStore::StoreHandlingCollisions(tEntity *)",
        ),
    ),
    (
        "__tf15tRefCountedTemp",
        Ok(
            "tRefCountedTemp type_info function",
        ),
    ),
    (
        "lzr_decompress__FPCUcUiPUcUi",
        Ok(
            "lzr_decompress(unsigned char const *, unsigned int, unsigned char *, unsigned int)",
        ),
    ),
    (
        "__12tMatrixStackP17pddiRenderContext",
        Ok(
            "tMatrixStack::tMatrixStack(pddiRenderContext *)",
        ),
    ),
    (
        "Translate__12tMatrixStackRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tMatrixStack::Translate(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Translate__12tMatrixStackfff",
        Ok(
            "tMatrixStack::Translate(float, float, float)",
        ),
    ),
    (
        "Scale__12tMatrixStackfff",
        Ok(
            "tMatrixStack::Scale(float, float, float)",
        ),
    ),
    (
        "_GLOBAL_$I$_12tMatrixStack$tmp",
        Ok(
            "global constructors keyed to tMatrixStack::tmp",
        ),
    ),
    (
        "MemSetup__3p3dv",
        Ok(
            "p3d::MemSetup(void)",
        ),
    ),
    (
        "GetCurrentAlloc__3p3dv",
        Ok(
            "p3d::GetCurrentAlloc(void)",
        ),
    ),
    (
        "SetCurrentAlloc__3p3dQ23p3d9AllocType",
        Ok(
            "p3d::SetCurrentAlloc(p3d::AllocType)",
        ),
    ),
    (
        "MallocTemp__3p3dUi",
        Ok(
            "p3d::MallocTemp(unsigned int)",
        ),
    ),
    (
        "FreeTemp__3p3dPv",
        Ok(
            "p3d::FreeTemp(void *)",
        ),
    ),
    (
        "UsePermanentMem__3p3db",
        Ok(
            "p3d::UsePermanentMem(bool)",
        ),
    ),
    (
        "__Q23p3d12MemoryRouter",
        Ok(
            "p3d::MemoryRouter::MemoryRouter(void)",
        ),
    ),
    (
        "__tfQ23p3d12MemoryRouter",
        Ok(
            "p3d::MemoryRouter type_info function",
        ),
    ),
    (
        "__tfQ23p3d13DefaultRouter",
        Ok(
            "p3d::DefaultRouter type_info function",
        ),
    ),
    (
        "GetCurrent__Q23p3d13DefaultRouter",
        Ok(
            "p3d::DefaultRouter::GetCurrent(void)",
        ),
    ),
    (
        "SetCurrent__Q23p3d13DefaultRouterQ23p3d9AllocType",
        Ok(
            "p3d::DefaultRouter::SetCurrent(p3d::AllocType)",
        ),
    ),
    (
        "_GLOBAL_$I$MemSetup__3p3dv",
        Ok(
            "global constructors keyed to p3d::MemSetup(void)",
        ),
    ),
    (
        "__12tPointCamera",
        Ok(
            "tPointCamera::tPointCamera(void)",
        ),
    ),
    (
        "_$_12tPointCamera",
        Ok(
            "tPointCamera::~tPointCamera(void)",
        ),
    ),
    (
        "SetTarget__12tPointCameraRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tPointCamera::SetTarget(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetPosition__12tPointCameraRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tPointCamera::SetPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetUpVector__12tPointCameraRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tPointCamera::SetUpVector(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetTwist__12tPointCameraf",
        Ok(
            "tPointCamera::SetTwist(float)",
        ),
    ),
    (
        "Update__12tPointCamera",
        Ok(
            "tPointCamera::Update(void)",
        ),
    ),
    (
        "__tf12tPointCamera",
        Ok(
            "tPointCamera type_info function",
        ),
    ),
    (
        "__11tPointLight",
        Ok(
            "tPointLight::tPointLight(void)",
        ),
    ),
    (
        "SetPosition__11tPointLightfff",
        Ok(
            "tPointLight::SetPosition(float, float, float)",
        ),
    ),
    (
        "SetAttenuation__11tPointLightfff",
        Ok(
            "tPointLight::SetAttenuation(float, float, float)",
        ),
    ),
    (
        "Update__11tPointLight",
        Ok(
            "tPointLight::Update(void)",
        ),
    ),
    (
        "__tf11tPointLight",
        Ok(
            "tPointLight type_info function",
        ),
    ),
    (
        "SetPosition__11tPointLightRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tPointLight::SetPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "_$_11tPointLight",
        Ok(
            "tPointLight::~tPointLight(void)",
        ),
    ),
    (
        "CheckFormat__11tPNGHandlerQ213tImageHandler6Format",
        Ok(
            "tPNGHandler::CheckFormat(tImageHandler::Format)",
        ),
    ),
    (
        "CreateImage__11tPNGHandlerP5tFilePQ213tImageHandler7Builder",
        Ok(
            "tPNGHandler::CreateImage(tFile *, tImageHandler::Builder *)",
        ),
    ),
    (
        "SaveImage__11tPNGHandlerP6tImagePc",
        Ok(
            "tPNGHandler::SaveImage(tImage *, char *)",
        ),
    ),
    (
        "_$_11tPNGHandler",
        Ok(
            "tPNGHandler::~tPNGHandler(void)",
        ),
    ),
    (
        "__tf11tPNGHandler",
        Ok(
            "tPNGHandler type_info function",
        ),
    ),
    (
        "GetExtension__11tPNGHandler",
        Ok(
            "tPNGHandler::GetExtension(void)",
        ),
    ),
    (
        "CanLoad__11tPNGHandler",
        Ok(
            "tPNGHandler::CanLoad(void)",
        ),
    ),
    (
        "CanSave__11tPNGHandler",
        Ok(
            "tPNGHandler::CanSave(void)",
        ),
    ),
    (
        "__10tPrimGroupi",
        Ok(
            "tPrimGroup::tPrimGroup(int)",
        ),
    ),
    (
        "_$_10tPrimGroup",
        Ok(
            "tPrimGroup::~tPrimGroup(void)",
        ),
    ),
    (
        "SetShader__10tPrimGroupP7tShader",
        Ok(
            "tPrimGroup::SetShader(tShader *)",
        ),
    ),
    (
        "__19tPrimGroupOptimisedi",
        Ok(
            "tPrimGroupOptimised::tPrimGroupOptimised(int)",
        ),
    ),
    (
        "_$_19tPrimGroupOptimised",
        Ok(
            "tPrimGroupOptimised::~tPrimGroupOptimised(void)",
        ),
    ),
    (
        "Display__19tPrimGroupOptimised",
        Ok(
            "tPrimGroupOptimised::Display(void)",
        ),
    ),
    (
        "SetBuffer__19tPrimGroupOptimisedP14pddiPrimBuffer",
        Ok(
            "tPrimGroupOptimised::SetBuffer(pddiPrimBuffer *)",
        ),
    ),
    (
        "GetVertices__19tPrimGroupOptimisedUiUiPQ218RadicalMathLibrary6Vector",
        Ok(
            "tPrimGroupOptimised::GetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetVertices__19tPrimGroupOptimisedUiUiPQ218RadicalMathLibrary6Vector",
        Ok(
            "tPrimGroupOptimised::SetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "ReleaseTempVertices__19tPrimGroupOptimised",
        Ok(
            "tPrimGroupOptimised::ReleaseTempVertices(void)",
        ),
    ),
    (
        "__26tPrimGroupSkinnedOptimisedi",
        Ok(
            "tPrimGroupSkinnedOptimised::tPrimGroupSkinnedOptimised(int)",
        ),
    ),
    (
        "_$_26tPrimGroupSkinnedOptimised",
        Ok(
            "tPrimGroupSkinnedOptimised::~tPrimGroupSkinnedOptimised(void)",
        ),
    ),
    (
        "Display__26tPrimGroupSkinnedOptimised",
        Ok(
            "tPrimGroupSkinnedOptimised::Display(void)",
        ),
    ),
    (
        "DisplayInstanced__26tPrimGroupSkinnedOptimisedUi",
        Ok(
            "tPrimGroupSkinnedOptimised::DisplayInstanced(unsigned int)",
        ),
    ),
    (
        "__18tPrimGroupStreamediUiib",
        Ok(
            "tPrimGroupStreamed::tPrimGroupStreamed(int, unsigned int, int, bool)",
        ),
    ),
    (
        "_$_18tPrimGroupStreamed",
        Ok(
            "tPrimGroupStreamed::~tPrimGroupStreamed(void)",
        ),
    ),
    (
        "Display__18tPrimGroupStreamed",
        Ok(
            "tPrimGroupStreamed::Display(void)",
        ),
    ),
    (
        "Display__18tPrimGroupStreamedP13ps2PrimStream",
        Ok(
            "tPrimGroupStreamed::Display(ps2PrimStream *)",
        ),
    ),
    (
        "__25tPrimGroupSkinnedStreamediUiib",
        Ok(
            "tPrimGroupSkinnedStreamed::tPrimGroupSkinnedStreamed(int, unsigned int, int, bool)",
        ),
    ),
    (
        "_$_25tPrimGroupSkinnedStreamed",
        Ok(
            "tPrimGroupSkinnedStreamed::~tPrimGroupSkinnedStreamed(void)",
        ),
    ),
    (
        "Display__25tPrimGroupSkinnedStreamed",
        Ok(
            "tPrimGroupSkinnedStreamed::Display(void)",
        ),
    ),
    (
        "DisplayInstanced__25tPrimGroupSkinnedStreamedUi",
        Ok(
            "tPrimGroupSkinnedStreamed::DisplayInstanced(unsigned int)",
        ),
    ),
    (
        "GetVertices__25tPrimGroupSkinnedStreamedUiUiPQ218RadicalMathLibrary6Vector",
        Ok(
            "tPrimGroupSkinnedStreamed::GetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetVertices__25tPrimGroupSkinnedStreamedUiUiPQ218RadicalMathLibrary6Vector",
        Ok(
            "tPrimGroupSkinnedStreamed::SetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "IndexedDisplay__18tPrimGroupStreamedP20pddiPrimBufferStream",
        Ok(
            "tPrimGroupStreamed::IndexedDisplay(pddiPrimBufferStream *)",
        ),
    ),
    (
        "IndexedDisplay__18tPrimGroupStreamedP13ps2PrimStream",
        Ok(
            "tPrimGroupStreamed::IndexedDisplay(ps2PrimStream *)",
        ),
    ),
    (
        "NonIndexedDisplay__18tPrimGroupStreamedP13ps2PrimStream",
        Ok(
            "tPrimGroupStreamed::NonIndexedDisplay(ps2PrimStream *)",
        ),
    ),
    (
        "__16tPrimGroupLoader",
        Ok(
            "tPrimGroupLoader::tPrimGroupLoader(void)",
        ),
    ),
    (
        "_$_16tPrimGroupLoader",
        Ok(
            "tPrimGroupLoader::~tPrimGroupLoader(void)",
        ),
    ),
    (
        "ParseHeader__16tPrimGroupLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tPrimGroupLoader::ParseHeader(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadStreamed__16tPrimGroupLoaderP10tChunkFileP12tEntityStorePQ218RadicalMathLibrary6Matrix",
        Ok(
            "tPrimGroupLoader::LoadStreamed(tChunkFile *, tEntityStore *, RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "Load__16tPrimGroupLoaderP10tChunkFileP12tEntityStorePQ218RadicalMathLibrary6MatrixbT4",
        Ok(
            "tPrimGroupLoader::Load(tChunkFile *, tEntityStore *, RadicalMathLibrary::Matrix *, bool, bool)",
        ),
    ),
    (
        "__tf10tPrimGroup",
        Ok(
            "tPrimGroup type_info function",
        ),
    ),
    (
        "__tf19tPrimGroupOptimised",
        Ok(
            "tPrimGroupOptimised type_info function",
        ),
    ),
    (
        "__tf26tPrimGroupSkinnedOptimised",
        Ok(
            "tPrimGroupSkinnedOptimised type_info function",
        ),
    ),
    (
        "__tf18tPrimGroupStreamed",
        Ok(
            "tPrimGroupStreamed type_info function",
        ),
    ),
    (
        "__tf25tPrimGroupSkinnedStreamed",
        Ok(
            "tPrimGroupSkinnedStreamed type_info function",
        ),
    ),
    (
        "__tf16tPrimGroupLoader",
        Ok(
            "tPrimGroupLoader type_info function",
        ),
    ),
    (
        "GetVertices__10tPrimGroupUiUiPQ218RadicalMathLibrary6Vector",
        Ok(
            "tPrimGroup::GetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetVertices__10tPrimGroupUiUiPQ218RadicalMathLibrary6Vector",
        Ok(
            "tPrimGroup::SetVertices(unsigned int, unsigned int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "ReleaseTempVertices__10tPrimGroup",
        Ok(
            "tPrimGroup::ReleaseTempVertices(void)",
        ),
    ),
    (
        "DisplayInstanced__10tPrimGroupUi",
        Ok(
            "tPrimGroup::DisplayInstanced(unsigned int)",
        ),
    ),
    (
        "__Q225tPrimGroupSkinnedStreamed10SkinVertex",
        Ok(
            "tPrimGroupSkinnedStreamed::SkinVertex::SkinVertex(void)",
        ),
    ),
    (
        "CheckFormat__16tRawImageHandlerQ213tImageHandler6Format",
        Ok(
            "tRawImageHandler::CheckFormat(tImageHandler::Format)",
        ),
    ),
    (
        "CreateImage__16tRawImageHandlerP5tFilePQ213tImageHandler7Builder",
        Ok(
            "tRawImageHandler::CreateImage(tFile *, tImageHandler::Builder *)",
        ),
    ),
    (
        "_$_16tRawImageHandler",
        Ok(
            "tRawImageHandler::~tRawImageHandler(void)",
        ),
    ),
    (
        "__tf16tRawImageHandler",
        Ok(
            "tRawImageHandler type_info function",
        ),
    ),
    (
        "GetExtension__16tRawImageHandler",
        Ok(
            "tRawImageHandler::GetExtension(void)",
        ),
    ),
    (
        "CanLoad__16tRawImageHandler",
        Ok(
            "tRawImageHandler::CanLoad(void)",
        ),
    ),
    (
        "CanSave__16tRawImageHandler",
        Ok(
            "tRawImageHandler::CanSave(void)",
        ),
    ),
    (
        "__nw__15tRefCountedTempUi",
        Ok(
            "tRefCountedTemp::operator new(unsigned int)",
        ),
    ),
    (
        "__dl__15tRefCountedTempPv",
        Ok(
            "tRefCountedTemp::operator delete(void *)",
        ),
    ),
    (
        "__7tShader",
        Ok(
            "tShader::tShader(void)",
        ),
    ),
    (
        "__7tShaderPcT1",
        Ok(
            "tShader::tShader(char *, char *)",
        ),
    ),
    (
        "_$_7tShader",
        Ok(
            "tShader::~tShader(void)",
        ),
    ),
    (
        "__13tShaderLoader",
        Ok(
            "tShaderLoader::tShaderLoader(void)",
        ),
    ),
    (
        "LoadObject__13tShaderLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tShaderLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "CheckChunkID__23tShaderDefinitionLoaderUi",
        Ok(
            "tShaderDefinitionLoader::CheckChunkID(unsigned int)",
        ),
    ),
    (
        "Load__23tShaderDefinitionLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tShaderDefinitionLoader::Load(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf7tShader",
        Ok(
            "tShader type_info function",
        ),
    ),
    (
        "__tf13tShaderLoader",
        Ok(
            "tShaderLoader type_info function",
        ),
    ),
    (
        "__tf23tShaderDefinitionLoader",
        Ok(
            "tShaderDefinitionLoader type_info function",
        ),
    ),
    (
        "_$_13tShaderLoader",
        Ok(
            "tShaderLoader::~tShaderLoader(void)",
        ),
    ),
    (
        "_$_23tShaderDefinitionLoader",
        Ok(
            "tShaderDefinitionLoader::~tShaderDefinitionLoader(void)",
        ),
    ),
    (
        "__7tSpriteP6tImageP7tShaderiiiP15tImageConverter",
        Ok(
            "tSprite::tSprite(tImage *, tShader *, int, int, int, tImageConverter *)",
        ),
    ),
    (
        "__7tSpritePP8tTextureiiiP7tShaderiiiP15tImageConverter",
        Ok(
            "tSprite::tSprite(tTexture **, int, int, int, tShader *, int, int, int, tImageConverter *)",
        ),
    ),
    (
        "_$_7tSprite",
        Ok(
            "tSprite::~tSprite(void)",
        ),
    ),
    (
        "ProcessShaders__7tSpriteRQ29tDrawable14ShaderCallback",
        Ok(
            "tSprite::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "SelectSegment__7tSpritei",
        Ok(
            "tSprite::SelectSegment(int)",
        ),
    ),
    (
        "SetBlitBorder__7tSpritei",
        Ok(
            "tSprite::SetBlitBorder(int)",
        ),
    ),
    (
        "CalcSections__7tSpritePP5tRectRiT2",
        Ok(
            "tSprite::CalcSections(tRect **, int &, int &)",
        ),
    ),
    (
        "BuildSections__7tSpriteP6tImageP15tImageConverter",
        Ok(
            "tSprite::BuildSections(tImage *, tImageConverter *)",
        ),
    ),
    (
        "BuildTexture__7tSpriteiR5tRectiiP6tImageT5P15tImageConverter",
        Ok(
            "tSprite::BuildTexture(int, tRect &, int, int, tImage *, tImage *, tImageConverter *)",
        ),
    ),
    (
        "BuildPoly__7tSpriteiR5tRectii",
        Ok(
            "tSprite::BuildPoly(int, tRect &, int, int)",
        ),
    ),
    (
        "SetColour__7tSpriteG10pddiColour",
        Ok(
            "tSprite::SetColour(pddiColour)",
        ),
    ),
    (
        "Display__7tSprite",
        Ok(
            "tSprite::Display(void)",
        ),
    ),
    (
        "__13tSpriteLoader",
        Ok(
            "tSpriteLoader::tSpriteLoader(void)",
        ),
    ),
    (
        "_$_13tSpriteLoader",
        Ok(
            "tSpriteLoader::~tSpriteLoader(void)",
        ),
    ),
    (
        "LoadObject__13tSpriteLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tSpriteLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadImage__13tSpriteLoaderP10tChunkFilei",
        Ok(
            "tSpriteLoader::LoadImage(tChunkFile *, int)",
        ),
    ),
    (
        "LoadTexture__13tSpriteLoaderP10tChunkFilei",
        Ok(
            "tSpriteLoader::LoadTexture(tChunkFile *, int)",
        ),
    ),
    (
        "__tf7tSprite",
        Ok(
            "tSprite type_info function",
        ),
    ),
    (
        "__tf13tSpriteLoader",
        Ok(
            "tSpriteLoader type_info function",
        ),
    ),
    (
        "__9sprVertex",
        Ok(
            "sprVertex::sprVertex(void)",
        ),
    ),
    (
        "GetBoundingBox__7tSpritePQ218RadicalMathLibrary5Box3D",
        Ok(
            "tSprite::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__7tSpritePQ218RadicalMathLibrary6Sphere",
        Ok(
            "tSprite::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "SetNormalization__13tSpriteLoaderb",
        Ok(
            "tSpriteLoader::SetNormalization(bool)",
        ),
    ),
    (
        "GetNormalization__13tSpriteLoader",
        Ok(
            "tSpriteLoader::GetNormalization(void)",
        ),
    ),
    (
        "__10tSpotLight",
        Ok(
            "tSpotLight::tSpotLight(void)",
        ),
    ),
    (
        "SetPosition__10tSpotLightfff",
        Ok(
            "tSpotLight::SetPosition(float, float, float)",
        ),
    ),
    (
        "SetDirection__10tSpotLightfff",
        Ok(
            "tSpotLight::SetDirection(float, float, float)",
        ),
    ),
    (
        "SetRange__10tSpotLightf",
        Ok(
            "tSpotLight::SetRange(float)",
        ),
    ),
    (
        "SetAttenuation__10tSpotLightfff",
        Ok(
            "tSpotLight::SetAttenuation(float, float, float)",
        ),
    ),
    (
        "SetCone__10tSpotLightfff",
        Ok(
            "tSpotLight::SetCone(float, float, float)",
        ),
    ),
    (
        "Update__10tSpotLight",
        Ok(
            "tSpotLight::Update(void)",
        ),
    ),
    (
        "__tf10tSpotLight",
        Ok(
            "tSpotLight type_info function",
        ),
    ),
    (
        "SetPosition__10tSpotLightRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tSpotLight::SetPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "_$_10tSpotLight",
        Ok(
            "tSpotLight::~tSpotLight(void)",
        ),
    ),
    (
        "CheckFormat__13tTargaHandlerQ213tImageHandler6Format",
        Ok(
            "tTargaHandler::CheckFormat(tImageHandler::Format)",
        ),
    ),
    (
        "CreateImage__13tTargaHandlerP5tFilePQ213tImageHandler7Builder",
        Ok(
            "tTargaHandler::CreateImage(tFile *, tImageHandler::Builder *)",
        ),
    ),
    (
        "SaveImage__13tTargaHandlerP6tImagePc",
        Ok(
            "tTargaHandler::SaveImage(tImage *, char *)",
        ),
    ),
    (
        "_$_13tTargaHandler",
        Ok(
            "tTargaHandler::~tTargaHandler(void)",
        ),
    ),
    (
        "__tf13tTargaHandler",
        Ok(
            "tTargaHandler type_info function",
        ),
    ),
    (
        "GetExtension__13tTargaHandler",
        Ok(
            "tTargaHandler::GetExtension(void)",
        ),
    ),
    (
        "CanLoad__13tTargaHandler",
        Ok(
            "tTargaHandler::CanLoad(void)",
        ),
    ),
    (
        "CanSave__13tTargaHandler",
        Ok(
            "tTargaHandler::CanSave(void)",
        ),
    ),
    (
        "_$_11tTextString",
        Ok(
            "tTextString::~tTextString(void)",
        ),
    ),
    (
        "Display__11tTextString",
        Ok(
            "tTextString::Display(void)",
        ),
    ),
    (
        "GetBoundingBox__11tTextStringPQ218RadicalMathLibrary5Box3D",
        Ok(
            "tTextString::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "__tf11tTextString",
        Ok(
            "tTextString type_info function",
        ),
    ),
    (
        "__8tTexture",
        Ok(
            "tTexture::tTexture(void)",
        ),
    ),
    (
        "_$_8tTexture",
        Ok(
            "tTexture::~tTexture(void)",
        ),
    ),
    (
        "Create__8tTextureiiiii15pddiTextureType20pddiTextureUsageHint",
        Ok(
            "tTexture::Create(int, int, int, int, int, pddiTextureType, pddiTextureUsageHint)",
        ),
    ),
    (
        "__10tSetLoader",
        Ok(
            "tSetLoader::tSetLoader(void)",
        ),
    ),
    (
        "_$_10tSetLoader",
        Ok(
            "tSetLoader::~tSetLoader(void)",
        ),
    ),
    (
        "Load__10tSetLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tSetLoader::Load(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "CheckChunkID__10tSetLoaderUi",
        Ok(
            "tSetLoader::CheckChunkID(unsigned int)",
        ),
    ),
    (
        "GetChunkID__10tSetLoader",
        Ok(
            "tSetLoader::GetChunkID(void)",
        ),
    ),
    (
        "__14tTextureLoader",
        Ok(
            "tTextureLoader::tTextureLoader(void)",
        ),
    ),
    (
        "_$_14tTextureLoader",
        Ok(
            "tTextureLoader::~tTextureLoader(void)",
        ),
    ),
    (
        "LoadObject__14tTextureLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tTextureLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadTexture__14tTextureLoaderP10tChunkFile",
        Ok(
            "tTextureLoader::LoadTexture(tChunkFile *)",
        ),
    ),
    (
        "LoadImage__14tTextureLoaderP10tChunkFileP13tImageFactoryP8tTexturei",
        Ok(
            "tTextureLoader::LoadImage(tChunkFile *, tImageFactory *, tTexture *, int)",
        ),
    ),
    (
        "LoadVolumeImage__14tTextureLoaderP10tChunkFileP13tImageFactoryP8tTextureii",
        Ok(
            "tTextureLoader::LoadVolumeImage(tChunkFile *, tImageFactory *, tTexture *, int, int)",
        ),
    ),
    (
        "__tf8tTexture",
        Ok(
            "tTexture type_info function",
        ),
    ),
    (
        "__tf14tTextureLoader",
        Ok(
            "tTextureLoader type_info function",
        ),
    ),
    (
        "__tf10tSetLoader",
        Ok(
            "tSetLoader type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__8tTexture",
        Ok(
            "global constructors keyed to tTexture::tTexture(void)",
        ),
    ),
    (
        "_GLOBAL_$D$__8tTexture",
        Ok(
            "global destructors keyed to tTexture::tTexture(void)",
        ),
    ),
    (
        "__13tTextureGlyph",
        Ok(
            "tTextureGlyph::tTextureGlyph(void)",
        ),
    ),
    (
        "_$_13tTextureGlyph",
        Ok(
            "tTextureGlyph::~tTextureGlyph(void)",
        ),
    ),
    (
        "__12tTextureFont",
        Ok(
            "tTextureFont::tTextureFont(void)",
        ),
    ),
    (
        "_$_12tTextureFont",
        Ok(
            "tTextureFont::~tTextureFont(void)",
        ),
    ),
    (
        "GetTextHeight__C12tTextureFontPCUs",
        Ok(
            "tTextureFont::GetTextHeight(unsigned short const *) const",
        ),
    ),
    (
        "GetTextWidth__C12tTextureFontPCUs",
        Ok(
            "tTextureFont::GetTextWidth(unsigned short const *) const",
        ),
    ),
    (
        "SetShader__12tTextureFontP7tShader",
        Ok(
            "tTextureFont::SetShader(tShader *)",
        ),
    ),
    (
        "SetMissingLetter__12tTextureFontUs",
        Ok(
            "tTextureFont::SetMissingLetter(unsigned short)",
        ),
    ),
    (
        "GetLineWidth__C12tTextureFontPCUs",
        Ok(
            "tTextureFont::GetLineWidth(unsigned short const *) const",
        ),
    ),
    (
        "DisplayLine__C12tTextureFontPCUsi",
        Ok(
            "tTextureFont::DisplayLine(unsigned short const *, int) const",
        ),
    ),
    (
        "FindGlyph__C12tTextureFontUs",
        Ok(
            "tTextureFont::FindGlyph(unsigned short) const",
        ),
    ),
    (
        "DrawGlyph__C12tTextureFontP13ps2PrimStreamUif",
        Ok(
            "tTextureFont::DrawGlyph(ps2PrimStream *, unsigned int, float) const",
        ),
    ),
    (
        "DrawBlank__C12tTextureFontP13ps2PrimStreamff",
        Ok(
            "tTextureFont::DrawBlank(ps2PrimStream *, float, float) const",
        ),
    ),
    (
        "__18tTextureFontLoader",
        Ok(
            "tTextureFontLoader::tTextureFontLoader(void)",
        ),
    ),
    (
        "LoadObject__18tTextureFontLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tTextureFontLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf12tTextureFont",
        Ok(
            "tTextureFont type_info function",
        ),
    ),
    (
        "__tf18tTextureFontLoader",
        Ok(
            "tTextureFontLoader type_info function",
        ),
    ),
    (
        "__5tFont",
        Ok(
            "tFont::tFont(void)",
        ),
    ),
    (
        "GetFontSize__C12tTextureFont",
        Ok(
            "tTextureFont::GetFontSize(void) const",
        ),
    ),
    (
        "GetFontWidth__C12tTextureFont",
        Ok(
            "tTextureFont::GetFontWidth(void) const",
        ),
    ),
    (
        "GetFontHeight__C12tTextureFont",
        Ok(
            "tTextureFont::GetFontHeight(void) const",
        ),
    ),
    (
        "GetFontBaseLine__C12tTextureFont",
        Ok(
            "tTextureFont::GetFontBaseLine(void) const",
        ),
    ),
    (
        "GetLineSpacing__C12tTextureFont",
        Ok(
            "tTextureFont::GetLineSpacing(void) const",
        ),
    ),
    (
        "SetLineSpacing__12tTextureFontf",
        Ok(
            "tTextureFont::SetLineSpacing(float)",
        ),
    ),
    (
        "GetColour__C12tTextureFont",
        Ok(
            "tTextureFont::GetColour(void) const",
        ),
    ),
    (
        "SetColour__12tTextureFontG10pddiColour",
        Ok(
            "tTextureFont::SetColour(pddiColour)",
        ),
    ),
    (
        "GetShader__C12tTextureFont",
        Ok(
            "tTextureFont::GetShader(void) const",
        ),
    ),
    (
        "_$_18tTextureFontLoader",
        Ok(
            "tTextureFontLoader::~tTextureFontLoader(void)",
        ),
    ),
    (
        "UnicodeStrLen__3p3dPCUs",
        Ok(
            "p3d::UnicodeStrLen(unsigned short const *)",
        ),
    ),
    (
        "UnicodeStrCpy__3p3dPCUsPUsi",
        Ok(
            "p3d::UnicodeStrCpy(unsigned short const *, unsigned short *, int)",
        ),
    ),
    (
        "UnicodeStrUpr__3p3dPUs",
        Ok(
            "p3d::UnicodeStrUpr(unsigned short *)",
        ),
    ),
    (
        "UnicodeToAscii__3p3dPCUsPci",
        Ok(
            "p3d::UnicodeToAscii(unsigned short const *, char *, int)",
        ),
    ),
    (
        "AsciiToUnicode__3p3dPCcPUsi",
        Ok(
            "p3d::AsciiToUnicode(char const *, unsigned short *, int)",
        ),
    ),
    (
        "openFile__3p3dPCcb",
        Ok(
            "p3d::openFile(char const *, bool)",
        ),
    ),
    (
        "printf__3p3dPCce",
        Ok(
            "p3d::printf(char const *, ...)",
        ),
    ),
    (
        "__13tVectorCamera",
        Ok(
            "tVectorCamera::tVectorCamera(void)",
        ),
    ),
    (
        "_$_13tVectorCamera",
        Ok(
            "tVectorCamera::~tVectorCamera(void)",
        ),
    ),
    (
        "SetDirection__13tVectorCameraRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tVectorCamera::SetDirection(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetUpVector__13tVectorCameraRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tVectorCamera::SetUpVector(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetPosition__13tVectorCameraRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tVectorCamera::SetPosition(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Update__13tVectorCamera",
        Ok(
            "tVectorCamera::Update(void)",
        ),
    ),
    (
        "__tf13tVectorCamera",
        Ok(
            "tVectorCamera type_info function",
        ),
    ),
    (
        "__11tVertexListUiUi",
        Ok(
            "tVertexList::tVertexList(unsigned int, unsigned int)",
        ),
    ),
    (
        "_$_11tVertexList",
        Ok(
            "tVertexList::~tVertexList(void)",
        ),
    ),
    (
        "Allocate__11tVertexListUiUi",
        Ok(
            "tVertexList::Allocate(unsigned int, unsigned int)",
        ),
    ),
    (
        "Stream__11tVertexListP13ps2PrimStreamii",
        Ok(
            "tVertexList::Stream(ps2PrimStream *, int, int)",
        ),
    ),
    (
        "__tf11tVertexList",
        Ok(
            "tVertexList type_info function",
        ),
    ),
    (
        "__5tView",
        Ok(
            "tView::tView(void)",
        ),
    ),
    (
        "_$_5tView",
        Ok(
            "tView::~tView(void)",
        ),
    ),
    (
        "SetCamera__5tViewP7tCamera",
        Ok(
            "tView::SetCamera(tCamera *)",
        ),
    ),
    (
        "SetWindow__5tViewffff",
        Ok(
            "tView::SetWindow(float, float, float, float)",
        ),
    ),
    (
        "SetAmbientLight__5tViewG10pddiColour",
        Ok(
            "tView::SetAmbientLight(pddiColour)",
        ),
    ),
    (
        "AddLight__5tViewP6tLight",
        Ok(
            "tView::AddLight(tLight *)",
        ),
    ),
    (
        "RemoveLight__5tViewUi",
        Ok(
            "tView::RemoveLight(unsigned int)",
        ),
    ),
    (
        "RemoveAllLights__5tView",
        Ok(
            "tView::RemoveAllLights(void)",
        ),
    ),
    (
        "GetLight__5tViewUi",
        Ok(
            "tView::GetLight(unsigned int)",
        ),
    ),
    (
        "BeginRender__5tView",
        Ok(
            "tView::BeginRender(void)",
        ),
    ),
    (
        "EndRender__5tView",
        Ok(
            "tView::EndRender(void)",
        ),
    ),
    (
        "__tf5tView",
        Ok(
            "tView type_info function",
        ),
    ),
    (
        "AnimationGroupCompareByGroupID__FPCvT0",
        Ok(
            "AnimationGroupCompareByGroupID(void const *, void const *)",
        ),
    ),
    (
        "AnimationGroupCompareByUID__FPCvT0",
        Ok(
            "AnimationGroupCompareByUID(void const *, void const *)",
        ),
    ),
    (
        "__16tFrameController",
        Ok(
            "tFrameController::tFrameController(void)",
        ),
    ),
    (
        "__16tFrameControllerP16tFrameController",
        Ok(
            "tFrameController::tFrameController(tFrameController *)",
        ),
    ),
    (
        "_$_16tFrameController",
        Ok(
            "tFrameController::~tFrameController(void)",
        ),
    ),
    (
        "__25tAnimationFrameController",
        Ok(
            "tAnimationFrameController::tAnimationFrameController(void)",
        ),
    ),
    (
        "__25tAnimationFrameControllerP25tAnimationFrameController",
        Ok(
            "tAnimationFrameController::tAnimationFrameController(tAnimationFrameController *)",
        ),
    ),
    (
        "_$_25tAnimationFrameController",
        Ok(
            "tAnimationFrameController::~tAnimationFrameController(void)",
        ),
    ),
    (
        "Reset__25tAnimationFrameController",
        Ok(
            "tAnimationFrameController::Reset(void)",
        ),
    ),
    (
        "__22tSimpleFrameController",
        Ok(
            "tSimpleFrameController::tSimpleFrameController(void)",
        ),
    ),
    (
        "__22tSimpleFrameControllerP22tSimpleFrameController",
        Ok(
            "tSimpleFrameController::tSimpleFrameController(tSimpleFrameController *)",
        ),
    ),
    (
        "_$_22tSimpleFrameController",
        Ok(
            "tSimpleFrameController::~tSimpleFrameController(void)",
        ),
    ),
    (
        "SetAnimation__22tSimpleFrameControllerP10tAnimation",
        Ok(
            "tSimpleFrameController::SetAnimation(tAnimation *)",
        ),
    ),
    (
        "SetAnimation__22tSimpleFrameControllerP10tAnimationff",
        Ok(
            "tSimpleFrameController::SetAnimation(tAnimation *, float, float)",
        ),
    ),
    (
        "GetAnimation__22tSimpleFrameController",
        Ok(
            "tSimpleFrameController::GetAnimation(void)",
        ),
    ),
    (
        "GetNumFrames__22tSimpleFrameController",
        Ok(
            "tSimpleFrameController::GetNumFrames(void)",
        ),
    ),
    (
        "SetFrame__22tSimpleFrameControllerf",
        Ok(
            "tSimpleFrameController::SetFrame(float)",
        ),
    ),
    (
        "GetFrame__22tSimpleFrameController",
        Ok(
            "tSimpleFrameController::GetFrame(void)",
        ),
    ),
    (
        "LastFrameReached__22tSimpleFrameController",
        Ok(
            "tSimpleFrameController::LastFrameReached(void)",
        ),
    ),
    (
        "Advance__22tSimpleFrameControllerfb",
        Ok(
            "tSimpleFrameController::Advance(float, bool)",
        ),
    ),
    (
        "Reset__22tSimpleFrameController",
        Ok(
            "tSimpleFrameController::Reset(void)",
        ),
    ),
    (
        "__21tBlendFrameController",
        Ok(
            "tBlendFrameController::tBlendFrameController(void)",
        ),
    ),
    (
        "__21tBlendFrameControllerP21tBlendFrameController",
        Ok(
            "tBlendFrameController::tBlendFrameController(tBlendFrameController *)",
        ),
    ),
    (
        "_$_21tBlendFrameController",
        Ok(
            "tBlendFrameController::~tBlendFrameController(void)",
        ),
    ),
    (
        "SetAnimation__21tBlendFrameControllerP10tAnimation",
        Ok(
            "tBlendFrameController::SetAnimation(tAnimation *)",
        ),
    ),
    (
        "SetAnimation__21tBlendFrameControllerP10tAnimationf",
        Ok(
            "tBlendFrameController::SetAnimation(tAnimation *, float)",
        ),
    ),
    (
        "SetAnimation__21tBlendFrameControllerP10tAnimationff",
        Ok(
            "tBlendFrameController::SetAnimation(tAnimation *, float, float)",
        ),
    ),
    (
        "GetAnimation__21tBlendFrameController",
        Ok(
            "tBlendFrameController::GetAnimation(void)",
        ),
    ),
    (
        "GetNumFrames__21tBlendFrameController",
        Ok(
            "tBlendFrameController::GetNumFrames(void)",
        ),
    ),
    (
        "SetFrame__21tBlendFrameControllerf",
        Ok(
            "tBlendFrameController::SetFrame(float)",
        ),
    ),
    (
        "GetFrame__21tBlendFrameController",
        Ok(
            "tBlendFrameController::GetFrame(void)",
        ),
    ),
    (
        "Advance__21tBlendFrameControllerfb",
        Ok(
            "tBlendFrameController::Advance(float, bool)",
        ),
    ),
    (
        "Update__21tBlendFrameController",
        Ok(
            "tBlendFrameController::Update(void)",
        ),
    ),
    (
        "RemoveOldestAnim__21tBlendFrameController",
        Ok(
            "tBlendFrameController::RemoveOldestAnim(void)",
        ),
    ),
    (
        "__Q221tBlendFrameController8PlayInfo",
        Ok(
            "tBlendFrameController::PlayInfo::PlayInfo(void)",
        ),
    ),
    (
        "_$_Q221tBlendFrameController8PlayInfo",
        Ok(
            "tBlendFrameController::PlayInfo::~PlayInfo(void)",
        ),
    ),
    (
        "SetAnimation__Q221tBlendFrameController8PlayInfoP10tAnimation",
        Ok(
            "tBlendFrameController::PlayInfo::SetAnimation(tAnimation *)",
        ),
    ),
    (
        "Reset__Q221tBlendFrameController8PlayInfo",
        Ok(
            "tBlendFrameController::PlayInfo::Reset(void)",
        ),
    ),
    (
        "NullAnimation__Q221tBlendFrameController8PlayInfo",
        Ok(
            "tBlendFrameController::PlayInfo::NullAnimation(void)",
        ),
    ),
    (
        "Reset__21tBlendFrameController",
        Ok(
            "tBlendFrameController::Reset(void)",
        ),
    ),
    (
        "LastFrameReached__21tBlendFrameController",
        Ok(
            "tBlendFrameController::LastFrameReached(void)",
        ),
    ),
    (
        "__22tFrameControllerLoader",
        Ok(
            "tFrameControllerLoader::tFrameControllerLoader(void)",
        ),
    ),
    (
        "_$_22tFrameControllerLoader",
        Ok(
            "tFrameControllerLoader::~tFrameControllerLoader(void)",
        ),
    ),
    (
        "LoadObject__22tFrameControllerLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tFrameControllerLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "CheckFC__22tFrameControllerLoaderUi",
        Ok(
            "tFrameControllerLoader::CheckFC(unsigned int)",
        ),
    ),
    (
        "LoadFC__22tFrameControllerLoaderPcUiP10tChunkFileP12tEntityStore",
        Ok(
            "tFrameControllerLoader::LoadFC(char *, unsigned int, tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__21tAnimationMemoryBlockUi",
        Ok(
            "tAnimationMemoryBlock::tAnimationMemoryBlock(unsigned int)",
        ),
    ),
    (
        "_$_21tAnimationMemoryBlock",
        Ok(
            "tAnimationMemoryBlock::~tAnimationMemoryBlock(void)",
        ),
    ),
    (
        "Allocate__21tAnimationMemoryBlockUii",
        Ok(
            "tAnimationMemoryBlock::Allocate(unsigned int, int)",
        ),
    ),
    (
        "__15tAnimationGroup",
        Ok(
            "tAnimationGroup::tAnimationGroup(void)",
        ),
    ),
    (
        "_$_15tAnimationGroup",
        Ok(
            "tAnimationGroup::~tAnimationGroup(void)",
        ),
    ),
    (
        "CleanUp__15tAnimationGroup",
        Ok(
            "tAnimationGroup::CleanUp(void)",
        ),
    ),
    (
        "GetIntChannel__C15tAnimationGroupUi",
        Ok(
            "tAnimationGroup::GetIntChannel(unsigned int) const",
        ),
    ),
    (
        "GetFloat1Channel__C15tAnimationGroupUi",
        Ok(
            "tAnimationGroup::GetFloat1Channel(unsigned int) const",
        ),
    ),
    (
        "GetFloat2Channel__C15tAnimationGroupUi",
        Ok(
            "tAnimationGroup::GetFloat2Channel(unsigned int) const",
        ),
    ),
    (
        "GetVectorChannel__C15tAnimationGroupUi",
        Ok(
            "tAnimationGroup::GetVectorChannel(unsigned int) const",
        ),
    ),
    (
        "GetRotationChannel__C15tAnimationGroupUi",
        Ok(
            "tAnimationGroup::GetRotationChannel(unsigned int) const",
        ),
    ),
    (
        "GetEntityChannel__C15tAnimationGroupUi",
        Ok(
            "tAnimationGroup::GetEntityChannel(unsigned int) const",
        ),
    ),
    (
        "GetBoolChannel__C15tAnimationGroupUi",
        Ok(
            "tAnimationGroup::GetBoolChannel(unsigned int) const",
        ),
    ),
    (
        "GetColourChannel__C15tAnimationGroupUi",
        Ok(
            "tAnimationGroup::GetColourChannel(unsigned int) const",
        ),
    ),
    (
        "GetEventChannel__C15tAnimationGroupUi",
        Ok(
            "tAnimationGroup::GetEventChannel(unsigned int) const",
        ),
    ),
    (
        "GetChannel__C15tAnimationGroupi",
        Ok(
            "tAnimationGroup::GetChannel(int) const",
        ),
    ),
    (
        "FindChannel__C15tAnimationGroupUi",
        Ok(
            "tAnimationGroup::FindChannel(unsigned int) const",
        ),
    ),
    (
        "__10tAnimation",
        Ok(
            "tAnimation::tAnimation(void)",
        ),
    ),
    (
        "_$_10tAnimation",
        Ok(
            "tAnimation::~tAnimation(void)",
        ),
    ),
    (
        "GetGroupByIndex__C10tAnimationi",
        Ok(
            "tAnimation::GetGroupByIndex(int) const",
        ),
    ),
    (
        "GetGroupById__C10tAnimationi",
        Ok(
            "tAnimation::GetGroupById(int) const",
        ),
    ),
    (
        "GetGroupByUID__C10tAnimationG13tUidUnaligned",
        Ok(
            "tAnimation::GetGroupByUID(tUidUnaligned) const",
        ),
    ),
    (
        "MakeValidFrame__C10tAnimationfff12p3dCycleMode",
        Ok(
            "tAnimation::MakeValidFrame(float, float, float, p3dCycleMode) const",
        ),
    ),
    (
        "SortAnimationGroups__10tAnimation",
        Ok(
            "tAnimation::SortAnimationGroups(void)",
        ),
    ),
    (
        "__16tAnimationLoader",
        Ok(
            "tAnimationLoader::tAnimationLoader(void)",
        ),
    ),
    (
        "LoadObject__16tAnimationLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tAnimationLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadAnimationGroup__16tAnimationLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tAnimationLoader::LoadAnimationGroup(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "__tf16tFrameController",
        Ok(
            "tFrameController type_info function",
        ),
    ),
    (
        "__tf25tAnimationFrameController",
        Ok(
            "tAnimationFrameController type_info function",
        ),
    ),
    (
        "__tf22tSimpleFrameController",
        Ok(
            "tSimpleFrameController type_info function",
        ),
    ),
    (
        "__tf21tBlendFrameController",
        Ok(
            "tBlendFrameController type_info function",
        ),
    ),
    (
        "__tf22tFrameControllerLoader",
        Ok(
            "tFrameControllerLoader type_info function",
        ),
    ),
    (
        "__tf21tAnimationMemoryBlock",
        Ok(
            "tAnimationMemoryBlock type_info function",
        ),
    ),
    (
        "__tf15tAnimationGroup",
        Ok(
            "tAnimationGroup type_info function",
        ),
    ),
    (
        "__tf10tAnimation",
        Ok(
            "tAnimation type_info function",
        ),
    ),
    (
        "__tf16tAnimationLoader",
        Ok(
            "tAnimationLoader type_info function",
        ),
    ),
    (
        "SetFrameRange__25tAnimationFrameControllerff",
        Ok(
            "tAnimationFrameController::SetFrameRange(float, float)",
        ),
    ),
    (
        "SetCycleMode__25tAnimationFrameController12p3dCycleMode",
        Ok(
            "tAnimationFrameController::SetCycleMode(p3dCycleMode)",
        ),
    ),
    (
        "GetCycleMode__25tAnimationFrameController",
        Ok(
            "tAnimationFrameController::GetCycleMode(void)",
        ),
    ),
    (
        "SetRelativeSpeed__25tAnimationFrameControllerf",
        Ok(
            "tAnimationFrameController::SetRelativeSpeed(float)",
        ),
    ),
    (
        "GetRelativeSpeed__25tAnimationFrameController",
        Ok(
            "tAnimationFrameController::GetRelativeSpeed(void)",
        ),
    ),
    (
        "_$_16tAnimationLoader",
        Ok(
            "tAnimationLoader::~tAnimationLoader(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z15tAnimatedObject",
        Ok(
            "radLoadInventory::SafeCast<tAnimatedObject>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z16tExpressionMixer",
        Ok(
            "radLoadInventory::SafeCast<tExpressionMixer>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z7tEffect",
        Ok(
            "radLoadInventory::SafeCast<tEffect>::SafeCast(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z9tGeometry",
        Ok(
            "radLoadInventory::SafeCast<tGeometry>::SafeCast(void)",
        ),
    ),
    (
        "__tf7tEffect",
        Ok(
            "tEffect type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z15tAnimatedObject",
        Ok(
            "radLoadInventory::SafeCast<tAnimatedObject> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z16tExpressionMixer",
        Ok(
            "radLoadInventory::SafeCast<tExpressionMixer> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z7tEffect",
        Ok(
            "radLoadInventory::SafeCast<tEffect> type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z9tGeometry",
        Ok(
            "radLoadInventory::SafeCast<tGeometry> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z9tGeometryP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tGeometry>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z7tEffectP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tEffect>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z16tExpressionMixerP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tExpressionMixer>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z15tAnimatedObjectP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tAnimatedObject>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "__22tAnimatedObjectFactory",
        Ok(
            "tAnimatedObjectFactory::tAnimatedObjectFactory(void)",
        ),
    ),
    (
        "_$_22tAnimatedObjectFactory",
        Ok(
            "tAnimatedObjectFactory::~tAnimatedObjectFactory(void)",
        ),
    ),
    (
        "CreateObject__22tAnimatedObjectFactoryP30tAnimatedObjectFrameControllerP5tPose",
        Ok(
            "tAnimatedObjectFactory::CreateObject(tAnimatedObjectFrameController *, tPose *)",
        ),
    ),
    (
        "__24tAnimatedObjectAnimation",
        Ok(
            "tAnimatedObjectAnimation::tAnimatedObjectAnimation(void)",
        ),
    ),
    (
        "_$_24tAnimatedObjectAnimation",
        Ok(
            "tAnimatedObjectAnimation::~tAnimatedObjectAnimation(void)",
        ),
    ),
    (
        "Clone__C24tAnimatedObjectAnimation",
        Ok(
            "tAnimatedObjectAnimation::Clone(void) const",
        ),
    ),
    (
        "GetFrameControllerByIndex__C24tAnimatedObjectAnimationUi",
        Ok(
            "tAnimatedObjectAnimation::GetFrameControllerByIndex(unsigned int) const",
        ),
    ),
    (
        "Advance__24tAnimatedObjectAnimationf",
        Ok(
            "tAnimatedObjectAnimation::Advance(float)",
        ),
    ),
    (
        "__15tAnimatedObject",
        Ok(
            "tAnimatedObject::tAnimatedObject(void)",
        ),
    ),
    (
        "_$_15tAnimatedObject",
        Ok(
            "tAnimatedObject::~tAnimatedObject(void)",
        ),
    ),
    (
        "Display__15tAnimatedObject",
        Ok(
            "tAnimatedObject::Display(void)",
        ),
    ),
    (
        "ProcessShaders__15tAnimatedObjectRQ29tDrawable14ShaderCallback",
        Ok(
            "tAnimatedObject::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "__30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController::tAnimatedObjectFrameController(void)",
        ),
    ),
    (
        "__30tAnimatedObjectFrameControllerP30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController::tAnimatedObjectFrameController(tAnimatedObjectFrameController *)",
        ),
    ),
    (
        "_$_30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController::~tAnimatedObjectFrameController(void)",
        ),
    ),
    (
        "SetRelativeSpeed__30tAnimatedObjectFrameControllerf",
        Ok(
            "tAnimatedObjectFrameController::SetRelativeSpeed(float)",
        ),
    ),
    (
        "SetFrame__30tAnimatedObjectFrameControllerf",
        Ok(
            "tAnimatedObjectFrameController::SetFrame(float)",
        ),
    ),
    (
        "SetFrameRange__30tAnimatedObjectFrameControllerff",
        Ok(
            "tAnimatedObjectFrameController::SetFrameRange(float, float)",
        ),
    ),
    (
        "SetCycleMode__30tAnimatedObjectFrameController12p3dCycleMode",
        Ok(
            "tAnimatedObjectFrameController::SetCycleMode(p3dCycleMode)",
        ),
    ),
    (
        "Advance__30tAnimatedObjectFrameControllerfb",
        Ok(
            "tAnimatedObjectFrameController::Advance(float, bool)",
        ),
    ),
    (
        "Reset__30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController::Reset(void)",
        ),
    ),
    (
        "Clone__30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController::Clone(void)",
        ),
    ),
    (
        "Update__30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController::Update(void)",
        ),
    ),
    (
        "__28tAnimatedObjectFactoryLoader",
        Ok(
            "tAnimatedObjectFactoryLoader::tAnimatedObjectFactoryLoader(void)",
        ),
    ),
    (
        "LoadObject__28tAnimatedObjectFactoryLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tAnimatedObjectFactoryLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__21tAnimatedObjectLoader",
        Ok(
            "tAnimatedObjectLoader::tAnimatedObjectLoader(void)",
        ),
    ),
    (
        "LoadObject__21tAnimatedObjectLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tAnimatedObjectLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadObject__30tAnimatedObjectAnimationLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tAnimatedObjectAnimationLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf22tAnimatedObjectFactory",
        Ok(
            "tAnimatedObjectFactory type_info function",
        ),
    ),
    (
        "__tf24tAnimatedObjectAnimation",
        Ok(
            "tAnimatedObjectAnimation type_info function",
        ),
    ),
    (
        "__tf15tAnimatedObject",
        Ok(
            "tAnimatedObject type_info function",
        ),
    ),
    (
        "__tf30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController type_info function",
        ),
    ),
    (
        "__tf28tAnimatedObjectFactoryLoader",
        Ok(
            "tAnimatedObjectFactoryLoader type_info function",
        ),
    ),
    (
        "__tf21tAnimatedObjectLoader",
        Ok(
            "tAnimatedObjectLoader type_info function",
        ),
    ),
    (
        "GetRelativeSpeed__30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController::GetRelativeSpeed(void)",
        ),
    ),
    (
        "GetNumFrames__30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController::GetNumFrames(void)",
        ),
    ),
    (
        "GetFrame__30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController::GetFrame(void)",
        ),
    ),
    (
        "GetCycleMode__30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController::GetCycleMode(void)",
        ),
    ),
    (
        "LastFrameReached__30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController::LastFrameReached(void)",
        ),
    ),
    (
        "_$_28tAnimatedObjectFactoryLoader",
        Ok(
            "tAnimatedObjectFactoryLoader::~tAnimatedObjectFactoryLoader(void)",
        ),
    ),
    (
        "_$_21tAnimatedObjectLoader",
        Ok(
            "tAnimatedObjectLoader::~tAnimatedObjectLoader(void)",
        ),
    ),
    (
        "_GLOBAL_$I$__22tAnimatedObjectFactory",
        Ok(
            "global constructors keyed to tAnimatedObjectFactory::tAnimatedObjectFactory(void)",
        ),
    ),
    (
        "__38tBillboardQuadGroupAnimationController",
        Ok(
            "tBillboardQuadGroupAnimationController::tBillboardQuadGroupAnimationController(void)",
        ),
    ),
    (
        "__38tBillboardQuadGroupAnimationControllerP38tBillboardQuadGroupAnimationController",
        Ok(
            "tBillboardQuadGroupAnimationController::tBillboardQuadGroupAnimationController(tBillboardQuadGroupAnimationController *)",
        ),
    ),
    (
        "_$_38tBillboardQuadGroupAnimationController",
        Ok(
            "tBillboardQuadGroupAnimationController::~tBillboardQuadGroupAnimationController(void)",
        ),
    ),
    (
        "Clone__38tBillboardQuadGroupAnimationController",
        Ok(
            "tBillboardQuadGroupAnimationController::Clone(void)",
        ),
    ),
    (
        "SetBillboardQuadGroup__38tBillboardQuadGroupAnimationControllerP19tBillboardQuadGroup",
        Ok(
            "tBillboardQuadGroupAnimationController::SetBillboardQuadGroup(tBillboardQuadGroup *)",
        ),
    ),
    (
        "ValidateAnimation__38tBillboardQuadGroupAnimationControllerP10tAnimation",
        Ok(
            "tBillboardQuadGroupAnimationController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "Update__38tBillboardQuadGroupAnimationController",
        Ok(
            "tBillboardQuadGroupAnimationController::Update(void)",
        ),
    ),
    (
        "__tf38tBillboardQuadGroupAnimationController",
        Ok(
            "tBillboardQuadGroupAnimationController type_info function",
        ),
    ),
    (
        "__26tCameraAnimationController",
        Ok(
            "tCameraAnimationController::tCameraAnimationController(void)",
        ),
    ),
    (
        "__26tCameraAnimationControllerP26tCameraAnimationController",
        Ok(
            "tCameraAnimationController::tCameraAnimationController(tCameraAnimationController *)",
        ),
    ),
    (
        "_$_26tCameraAnimationController",
        Ok(
            "tCameraAnimationController::~tCameraAnimationController(void)",
        ),
    ),
    (
        "Clone__26tCameraAnimationController",
        Ok(
            "tCameraAnimationController::Clone(void)",
        ),
    ),
    (
        "SetCamera__26tCameraAnimationControllerP13tVectorCamera",
        Ok(
            "tCameraAnimationController::SetCamera(tVectorCamera *)",
        ),
    ),
    (
        "ValidateAnimation__26tCameraAnimationControllerP10tAnimation",
        Ok(
            "tCameraAnimationController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "UpdateNoBlending__26tCameraAnimationController",
        Ok(
            "tCameraAnimationController::UpdateNoBlending(void)",
        ),
    ),
    (
        "UpdateWithBlending__26tCameraAnimationController",
        Ok(
            "tCameraAnimationController::UpdateWithBlending(void)",
        ),
    ),
    (
        "SetOffsetMatrix__26tCameraAnimationControllerRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "tCameraAnimationController::SetOffsetMatrix(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "__tf26tCameraAnimationController",
        Ok(
            "tCameraAnimationController type_info function",
        ),
    ),
    (
        "__8tChanneliP21tAnimationMemoryBlock",
        Ok(
            "tChannel::tChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__8tChannel",
        Ok(
            "tChannel::CleanUp(void)",
        ),
    ),
    (
        "FindBracketKeys__C8tChannelfRiT2",
        Ok(
            "tChannel::FindBracketKeys(float, int &, int &) const",
        ),
    ),
    (
        "__11tIntChanneliP21tAnimationMemoryBlock",
        Ok(
            "tIntChannel::tIntChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__11tIntChannel",
        Ok(
            "tIntChannel::CleanUp(void)",
        ),
    ),
    (
        "GetValue__C11tIntChannelfPi",
        Ok(
            "tIntChannel::GetValue(float, int *) const",
        ),
    ),
    (
        "__14tFloat1ChanneliP21tAnimationMemoryBlock",
        Ok(
            "tFloat1Channel::tFloat1Channel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__14tFloat1Channel",
        Ok(
            "tFloat1Channel::CleanUp(void)",
        ),
    ),
    (
        "GetValue__C14tFloat1ChannelfPf",
        Ok(
            "tFloat1Channel::GetValue(float, float *) const",
        ),
    ),
    (
        "__14tFloat2ChanneliP21tAnimationMemoryBlock",
        Ok(
            "tFloat2Channel::tFloat2Channel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__14tFloat2Channel",
        Ok(
            "tFloat2Channel::CleanUp(void)",
        ),
    ),
    (
        "GetValue__C14tFloat2ChannelfPQ218RadicalMathLibrary7Vector2",
        Ok(
            "tFloat2Channel::GetValue(float, RadicalMathLibrary::Vector2 *) const",
        ),
    ),
    (
        "__18tVector1DOFChanneliP21tAnimationMemoryBlock",
        Ok(
            "tVector1DOFChannel::tVector1DOFChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__18tVector1DOFChannel",
        Ok(
            "tVector1DOFChannel::CleanUp(void)",
        ),
    ),
    (
        "GetValue__C18tVector1DOFChannelfPQ218RadicalMathLibrary6Vector",
        Ok(
            "tVector1DOFChannel::GetValue(float, RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "__18tVector2DOFChanneliP21tAnimationMemoryBlock",
        Ok(
            "tVector2DOFChannel::tVector2DOFChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__18tVector2DOFChannel",
        Ok(
            "tVector2DOFChannel::CleanUp(void)",
        ),
    ),
    (
        "GetValue__C18tVector2DOFChannelfPQ218RadicalMathLibrary6Vector",
        Ok(
            "tVector2DOFChannel::GetValue(float, RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "__18tVector3DOFChanneliP21tAnimationMemoryBlock",
        Ok(
            "tVector3DOFChannel::tVector3DOFChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__18tVector3DOFChannel",
        Ok(
            "tVector3DOFChannel::CleanUp(void)",
        ),
    ),
    (
        "GetValue__C18tVector3DOFChannelfPQ218RadicalMathLibrary6Vector",
        Ok(
            "tVector3DOFChannel::GetValue(float, RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "__18tQuaternionChanneliP21tAnimationMemoryBlock",
        Ok(
            "tQuaternionChannel::tQuaternionChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__18tQuaternionChannel",
        Ok(
            "tQuaternionChannel::CleanUp(void)",
        ),
    ),
    (
        "GetEuler__C18tQuaternionChannelfPQ218RadicalMathLibrary6Vector",
        Ok(
            "tQuaternionChannel::GetEuler(float, RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "GetQuaternion__C18tQuaternionChannelfPQ218RadicalMathLibrary10Quaternion",
        Ok(
            "tQuaternionChannel::GetQuaternion(float, RadicalMathLibrary::Quaternion *) const",
        ),
    ),
    (
        "GetMatrix__C18tQuaternionChannelfPQ218RadicalMathLibrary6Matrix",
        Ok(
            "tQuaternionChannel::GetMatrix(float, RadicalMathLibrary::Matrix *) const",
        ),
    ),
    (
        "__28tCompressedQuaternionChanneliP21tAnimationMemoryBlock",
        Ok(
            "tCompressedQuaternionChannel::tCompressedQuaternionChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__28tCompressedQuaternionChannel",
        Ok(
            "tCompressedQuaternionChannel::CleanUp(void)",
        ),
    ),
    (
        "GetEuler__C28tCompressedQuaternionChannelfPQ218RadicalMathLibrary6Vector",
        Ok(
            "tCompressedQuaternionChannel::GetEuler(float, RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "GetQuaternion__C28tCompressedQuaternionChannelfPQ218RadicalMathLibrary10Quaternion",
        Ok(
            "tCompressedQuaternionChannel::GetQuaternion(float, RadicalMathLibrary::Quaternion *) const",
        ),
    ),
    (
        "GetMatrix__C28tCompressedQuaternionChannelfPQ218RadicalMathLibrary6Matrix",
        Ok(
            "tCompressedQuaternionChannel::GetMatrix(float, RadicalMathLibrary::Matrix *) const",
        ),
    ),
    (
        "__14tStringChanneliP21tAnimationMemoryBlock",
        Ok(
            "tStringChannel::tStringChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__14tStringChannel",
        Ok(
            "tStringChannel::CleanUp(void)",
        ),
    ),
    (
        "__14tEntityChanneliP21tAnimationMemoryBlock",
        Ok(
            "tEntityChannel::tEntityChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__14tEntityChannel",
        Ok(
            "tEntityChannel::CleanUp(void)",
        ),
    ),
    (
        "GetValue__C14tEntityChannelfPP7tEntity",
        Ok(
            "tEntityChannel::GetValue(float, tEntity **) const",
        ),
    ),
    (
        "FindEndKeys__C14tEntityChannelfPfPP7tEntityT2T3",
        Ok(
            "tEntityChannel::FindEndKeys(float, float *, tEntity **, float *, tEntity **) const",
        ),
    ),
    (
        "__12tBoolChanneliP21tAnimationMemoryBlock",
        Ok(
            "tBoolChannel::tBoolChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__12tBoolChannel",
        Ok(
            "tBoolChannel::CleanUp(void)",
        ),
    ),
    (
        "GetValue__C12tBoolChannelfPb",
        Ok(
            "tBoolChannel::GetValue(float, bool *) const",
        ),
    ),
    (
        "__14tColourChanneliP21tAnimationMemoryBlock",
        Ok(
            "tColourChannel::tColourChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__14tColourChannel",
        Ok(
            "tColourChannel::CleanUp(void)",
        ),
    ),
    (
        "GetValue__C14tColourChannelfP10pddiColour",
        Ok(
            "tColourChannel::GetValue(float, pddiColour *) const",
        ),
    ),
    (
        "__13tEventChanneliP21tAnimationMemoryBlock",
        Ok(
            "tEventChannel::tEventChannel(int, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "CleanUp__13tEventChannel",
        Ok(
            "tEventChannel::CleanUp(void)",
        ),
    ),
    (
        "DispatchEvents__C13tEventChannelP15tEventRecipientP12tEventOriginRC5tNameff",
        Ok(
            "tEventChannel::DispatchEvents(tEventRecipient *, tEventOrigin *, tName const &, float, float) const",
        ),
    ),
    (
        "LoadChannel__14tChannelLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tChannelLoader::LoadChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "LoadIntChannel__14tChannelLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tChannelLoader::LoadIntChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "LoadFloat1Channel__14tChannelLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tChannelLoader::LoadFloat1Channel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "LoadFloat2Channel__14tChannelLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tChannelLoader::LoadFloat2Channel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "LoadVectorChannel__14tChannelLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tChannelLoader::LoadVectorChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "LoadRotationChannel__14tChannelLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tChannelLoader::LoadRotationChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "LoadStringChannel__14tChannelLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tChannelLoader::LoadStringChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "LoadEntityChannel__14tChannelLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tChannelLoader::LoadEntityChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "LoadBoolChannel__14tChannelLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tChannelLoader::LoadBoolChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "LoadColourChannel__14tChannelLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tChannelLoader::LoadColourChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "LoadEventChannel__14tChannelLoaderP10tChunkFileP12tEntityStoreP21tAnimationMemoryBlock",
        Ok(
            "tChannelLoader::LoadEventChannel(tChunkFile *, tEntityStore *, tAnimationMemoryBlock *)",
        ),
    ),
    (
        "__tf8tChannel",
        Ok(
            "tChannel type_info function",
        ),
    ),
    (
        "__tf11tIntChannel",
        Ok(
            "tIntChannel type_info function",
        ),
    ),
    (
        "__tf14tFloat1Channel",
        Ok(
            "tFloat1Channel type_info function",
        ),
    ),
    (
        "__tf14tFloat2Channel",
        Ok(
            "tFloat2Channel type_info function",
        ),
    ),
    (
        "__tf18tVector1DOFChannel",
        Ok(
            "tVector1DOFChannel type_info function",
        ),
    ),
    (
        "__tf18tVector2DOFChannel",
        Ok(
            "tVector2DOFChannel type_info function",
        ),
    ),
    (
        "__tf18tVector3DOFChannel",
        Ok(
            "tVector3DOFChannel type_info function",
        ),
    ),
    (
        "__tf18tQuaternionChannel",
        Ok(
            "tQuaternionChannel type_info function",
        ),
    ),
    (
        "__tf28tCompressedQuaternionChannel",
        Ok(
            "tCompressedQuaternionChannel type_info function",
        ),
    ),
    (
        "__tf14tStringChannel",
        Ok(
            "tStringChannel type_info function",
        ),
    ),
    (
        "__tf14tEntityChannel",
        Ok(
            "tEntityChannel type_info function",
        ),
    ),
    (
        "__tf12tBoolChannel",
        Ok(
            "tBoolChannel type_info function",
        ),
    ),
    (
        "__tf14tColourChannel",
        Ok(
            "tColourChannel type_info function",
        ),
    ),
    (
        "__tf13tEventChannel",
        Ok(
            "tEventChannel type_info function",
        ),
    ),
    (
        "__tf12tNonCopyable",
        Ok(
            "tNonCopyable type_info function",
        ),
    ),
    (
        "_$_8tChannel",
        Ok(
            "tChannel::~tChannel(void)",
        ),
    ),
    (
        "_$_11tIntChannel",
        Ok(
            "tIntChannel::~tIntChannel(void)",
        ),
    ),
    (
        "_$_14tFloat1Channel",
        Ok(
            "tFloat1Channel::~tFloat1Channel(void)",
        ),
    ),
    (
        "_$_14tFloat2Channel",
        Ok(
            "tFloat2Channel::~tFloat2Channel(void)",
        ),
    ),
    (
        "_$_18tVector1DOFChannel",
        Ok(
            "tVector1DOFChannel::~tVector1DOFChannel(void)",
        ),
    ),
    (
        "_$_18tVector2DOFChannel",
        Ok(
            "tVector2DOFChannel::~tVector2DOFChannel(void)",
        ),
    ),
    (
        "_$_18tVector3DOFChannel",
        Ok(
            "tVector3DOFChannel::~tVector3DOFChannel(void)",
        ),
    ),
    (
        "_$_18tQuaternionChannel",
        Ok(
            "tQuaternionChannel::~tQuaternionChannel(void)",
        ),
    ),
    (
        "_$_28tCompressedQuaternionChannel",
        Ok(
            "tCompressedQuaternionChannel::~tCompressedQuaternionChannel(void)",
        ),
    ),
    (
        "_$_14tStringChannel",
        Ok(
            "tStringChannel::~tStringChannel(void)",
        ),
    ),
    (
        "_$_14tEntityChannel",
        Ok(
            "tEntityChannel::~tEntityChannel(void)",
        ),
    ),
    (
        "_$_12tBoolChannel",
        Ok(
            "tBoolChannel::~tBoolChannel(void)",
        ),
    ),
    (
        "_$_14tColourChannel",
        Ok(
            "tColourChannel::~tColourChannel(void)",
        ),
    ),
    (
        "_$_13tEventChannel",
        Ok(
            "tEventChannel::~tEventChannel(void)",
        ),
    ),
    (
        "__6tEvent",
        Ok(
            "tEvent::tEvent(void)",
        ),
    ),
    (
        "__tf14tVectorChannel",
        Ok(
            "tVectorChannel type_info function",
        ),
    ),
    (
        "__tf16tRotationChannel",
        Ok(
            "tRotationChannel type_info function",
        ),
    ),
    (
        "__18tCompositeDrawablei",
        Ok(
            "tCompositeDrawable::tCompositeDrawable(int)",
        ),
    ),
    (
        "_$_18tCompositeDrawable",
        Ok(
            "tCompositeDrawable::~tCompositeDrawable(void)",
        ),
    ),
    (
        "Clone__18tCompositeDrawableP5tPose",
        Ok(
            "tCompositeDrawable::Clone(tPose *)",
        ),
    ),
    (
        "Display__18tCompositeDrawableP5tPose",
        Ok(
            "tCompositeDrawable::Display(tPose *)",
        ),
    ),
    (
        "ProcessShaders__18tCompositeDrawableRQ29tDrawable14ShaderCallback",
        Ok(
            "tCompositeDrawable::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "SetPose__18tCompositeDrawableP5tPose",
        Ok(
            "tCompositeDrawable::SetPose(tPose *)",
        ),
    ),
    (
        "FindNode__18tCompositeDrawableG13tUidUnaligned",
        Ok(
            "tCompositeDrawable::FindNode(tUidUnaligned)",
        ),
    ),
    (
        "FindNodeIndex__18tCompositeDrawableG13tUidUnaligned",
        Ok(
            "tCompositeDrawable::FindNodeIndex(tUidUnaligned)",
        ),
    ),
    (
        "AddProp__18tCompositeDrawableP9tDrawablei",
        Ok(
            "tCompositeDrawable::AddProp(tDrawable *, int)",
        ),
    ),
    (
        "AddEffect__18tCompositeDrawableP7tEffecti",
        Ok(
            "tCompositeDrawable::AddEffect(tEffect *, int)",
        ),
    ),
    (
        "AddPose__18tCompositeDrawableP13tDrawablePose",
        Ok(
            "tCompositeDrawable::AddPose(tDrawablePose *)",
        ),
    ),
    (
        "SetDrawable__Q218tCompositeDrawable19DrawablePropElementP9tDrawable",
        Ok(
            "tCompositeDrawable::DrawablePropElement::SetDrawable(tDrawable *)",
        ),
    ),
    (
        "Draw__Q218tCompositeDrawable19DrawablePropElementP5tPose",
        Ok(
            "tCompositeDrawable::DrawablePropElement::Draw(tPose *)",
        ),
    ),
    (
        "SetDrawable__Q218tCompositeDrawable19DrawablePoseElementP9tDrawable",
        Ok(
            "tCompositeDrawable::DrawablePoseElement::SetDrawable(tDrawable *)",
        ),
    ),
    (
        "SetPose__Q218tCompositeDrawable19DrawablePoseElementP5tPose",
        Ok(
            "tCompositeDrawable::DrawablePoseElement::SetPose(tPose *)",
        ),
    ),
    (
        "Draw__Q218tCompositeDrawable19DrawablePoseElementP5tPose",
        Ok(
            "tCompositeDrawable::DrawablePoseElement::Draw(tPose *)",
        ),
    ),
    (
        "SetDrawable__Q218tCompositeDrawable21DrawableEffectElementP9tDrawable",
        Ok(
            "tCompositeDrawable::DrawableEffectElement::SetDrawable(tDrawable *)",
        ),
    ),
    (
        "Draw__Q218tCompositeDrawable21DrawableEffectElementP5tPose",
        Ok(
            "tCompositeDrawable::DrawableEffectElement::Draw(tPose *)",
        ),
    ),
    (
        "__24tCompositeDrawableLoader",
        Ok(
            "tCompositeDrawableLoader::tCompositeDrawableLoader(void)",
        ),
    ),
    (
        "LoadObject__24tCompositeDrawableLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tCompositeDrawableLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tfQ218tCompositeDrawable19DrawablePropElement",
        Ok(
            "tCompositeDrawable::DrawablePropElement type_info function",
        ),
    ),
    (
        "__tfQ218tCompositeDrawable19DrawablePoseElement",
        Ok(
            "tCompositeDrawable::DrawablePoseElement type_info function",
        ),
    ),
    (
        "__tfQ218tCompositeDrawable21DrawableEffectElement",
        Ok(
            "tCompositeDrawable::DrawableEffectElement type_info function",
        ),
    ),
    (
        "__tft6tArray1ZPQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tArray<tCompositeDrawable::DrawableElement *> type_info function",
        ),
    ),
    (
        "__tft16tPtrDynamicArray1ZPQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tPtrDynamicArray<tCompositeDrawable::DrawableElement *> type_info function",
        ),
    ),
    (
        "__tf18tCompositeDrawable",
        Ok(
            "tCompositeDrawable type_info function",
        ),
    ),
    (
        "__tf24tCompositeDrawableLoader",
        Ok(
            "tCompositeDrawableLoader type_info function",
        ),
    ),
    (
        "__8tPosable",
        Ok(
            "tPosable::tPosable(void)",
        ),
    ),
    (
        "_$_t16tPtrDynamicArray1ZPQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tPtrDynamicArray<tCompositeDrawable::DrawableElement *>::~tPtrDynamicArray(void)",
        ),
    ),
    (
        "Display__18tCompositeDrawable",
        Ok(
            "tCompositeDrawable::Display(void)",
        ),
    ),
    (
        "GetBoundingBox__18tCompositeDrawablePQ218RadicalMathLibrary5Box3D",
        Ok(
            "tCompositeDrawable::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__18tCompositeDrawablePQ218RadicalMathLibrary6Sphere",
        Ok(
            "tCompositeDrawable::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "Display__Q218tCompositeDrawable15DrawableElement",
        Ok(
            "tCompositeDrawable::DrawableElement::Display(void)",
        ),
    ),
    (
        "SetPose__Q218tCompositeDrawable15DrawableElementP5tPose",
        Ok(
            "tCompositeDrawable::DrawableElement::SetPose(tPose *)",
        ),
    ),
    (
        "SetVisibility__Q218tCompositeDrawable15DrawableElementb",
        Ok(
            "tCompositeDrawable::DrawableElement::SetVisibility(bool)",
        ),
    ),
    (
        "SetLockVisibility__Q218tCompositeDrawable15DrawableElementb",
        Ok(
            "tCompositeDrawable::DrawableElement::SetLockVisibility(bool)",
        ),
    ),
    (
        "_$_Q218tCompositeDrawable19DrawablePropElement",
        Ok(
            "tCompositeDrawable::DrawablePropElement::~DrawablePropElement(void)",
        ),
    ),
    (
        "GetUID__Q218tCompositeDrawable19DrawablePropElement",
        Ok(
            "tCompositeDrawable::DrawablePropElement::GetUID(void)",
        ),
    ),
    (
        "GetDrawable__Q218tCompositeDrawable19DrawablePropElement",
        Ok(
            "tCompositeDrawable::DrawablePropElement::GetDrawable(void)",
        ),
    ),
    (
        "SetPoseIndex__Q218tCompositeDrawable19DrawablePropElementi",
        Ok(
            "tCompositeDrawable::DrawablePropElement::SetPoseIndex(int)",
        ),
    ),
    (
        "GetWorldMatrix__Q218tCompositeDrawable19DrawablePropElement",
        Ok(
            "tCompositeDrawable::DrawablePropElement::GetWorldMatrix(void)",
        ),
    ),
    (
        "_$_Q218tCompositeDrawable19DrawablePoseElement",
        Ok(
            "tCompositeDrawable::DrawablePoseElement::~DrawablePoseElement(void)",
        ),
    ),
    (
        "GetUID__Q218tCompositeDrawable19DrawablePoseElement",
        Ok(
            "tCompositeDrawable::DrawablePoseElement::GetUID(void)",
        ),
    ),
    (
        "GetDrawable__Q218tCompositeDrawable19DrawablePoseElement",
        Ok(
            "tCompositeDrawable::DrawablePoseElement::GetDrawable(void)",
        ),
    ),
    (
        "GetWorldMatrix__Q218tCompositeDrawable19DrawablePoseElement",
        Ok(
            "tCompositeDrawable::DrawablePoseElement::GetWorldMatrix(void)",
        ),
    ),
    (
        "_$_Q218tCompositeDrawable21DrawableEffectElement",
        Ok(
            "tCompositeDrawable::DrawableEffectElement::~DrawableEffectElement(void)",
        ),
    ),
    (
        "GetUID__Q218tCompositeDrawable21DrawableEffectElement",
        Ok(
            "tCompositeDrawable::DrawableEffectElement::GetUID(void)",
        ),
    ),
    (
        "SetVisibility__Q218tCompositeDrawable21DrawableEffectElementb",
        Ok(
            "tCompositeDrawable::DrawableEffectElement::SetVisibility(bool)",
        ),
    ),
    (
        "GetDrawable__Q218tCompositeDrawable21DrawableEffectElement",
        Ok(
            "tCompositeDrawable::DrawableEffectElement::GetDrawable(void)",
        ),
    ),
    (
        "SetPoseIndex__Q218tCompositeDrawable21DrawableEffectElementi",
        Ok(
            "tCompositeDrawable::DrawableEffectElement::SetPoseIndex(int)",
        ),
    ),
    (
        "GetWorldMatrix__Q218tCompositeDrawable21DrawableEffectElement",
        Ok(
            "tCompositeDrawable::DrawableEffectElement::GetWorldMatrix(void)",
        ),
    ),
    (
        "_$_24tCompositeDrawableLoader",
        Ok(
            "tCompositeDrawableLoader::~tCompositeDrawableLoader(void)",
        ),
    ),
    (
        "_$_t6tArray1ZPQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tArray<tCompositeDrawable::DrawableElement *>::~tArray(void)",
        ),
    ),
    (
        "SetSize__t6tArray1ZPQ218tCompositeDrawable15DrawableElementi",
        Ok(
            "tArray<tCompositeDrawable::DrawableElement *>::SetSize(int)",
        ),
    ),
    (
        "SetSize__t9tPtrArray1ZPQ218tCompositeDrawable15DrawableElementi",
        Ok(
            "tPtrArray<tCompositeDrawable::DrawableElement *>::SetSize(int)",
        ),
    ),
    (
        "__tf8tPosable",
        Ok(
            "tPosable type_info function",
        ),
    ),
    (
        "__tft9tPtrArray1ZPQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tPtrArray<tCompositeDrawable::DrawableElement *> type_info function",
        ),
    ),
    (
        "_$_t9tPtrArray1ZPQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tPtrArray<tCompositeDrawable::DrawableElement *>::~tPtrArray(void)",
        ),
    ),
    (
        "_$_Q218tCompositeDrawable15DrawableElement",
        Ok(
            "tCompositeDrawable::DrawableElement::~DrawableElement(void)",
        ),
    ),
    (
        "_$_13tDrawablePose",
        Ok(
            "tDrawablePose::~tDrawablePose(void)",
        ),
    ),
    (
        "Display__13tDrawablePose",
        Ok(
            "tDrawablePose::Display(void)",
        ),
    ),
    (
        "SetPose__13tDrawablePoseP5tPose",
        Ok(
            "tDrawablePose::SetPose(tPose *)",
        ),
    ),
    (
        "GetPose__13tDrawablePose",
        Ok(
            "tDrawablePose::GetPose(void)",
        ),
    ),
    (
        "__tf13tDrawablePose",
        Ok(
            "tDrawablePose type_info function",
        ),
    ),
    (
        "GetSkeleton__13tDrawablePose",
        Ok(
            "tDrawablePose::GetSkeleton(void)",
        ),
    ),
    (
        "GetName__6tEvent",
        Ok(
            "tEvent::GetName(void)",
        ),
    ),
    (
        "GetParameter__6tEvent",
        Ok(
            "tEvent::GetParameter(void)",
        ),
    ),
    (
        "SetParameter__6tEventUi",
        Ok(
            "tEvent::SetParameter(unsigned int)",
        ),
    ),
    (
        "GetName__10tBaseEvent",
        Ok(
            "tBaseEvent::GetName(void)",
        ),
    ),
    (
        "SetName__10tBaseEventPc",
        Ok(
            "tBaseEvent::SetName(char *)",
        ),
    ),
    (
        "GetParameter__10tBaseEvent",
        Ok(
            "tBaseEvent::GetParameter(void)",
        ),
    ),
    (
        "SetParameter__10tBaseEventUi",
        Ok(
            "tBaseEvent::SetParameter(unsigned int)",
        ),
    ),
    (
        "_$_13tGenericEvent",
        Ok(
            "tGenericEvent::~tGenericEvent(void)",
        ),
    ),
    (
        "GetDataLength__13tGenericEvent",
        Ok(
            "tGenericEvent::GetDataLength(void)",
        ),
    ),
    (
        "SetDataLength__13tGenericEventUi",
        Ok(
            "tGenericEvent::SetDataLength(unsigned int)",
        ),
    ),
    (
        "SetData__13tGenericEventPvb",
        Ok(
            "tGenericEvent::SetData(void *, bool)",
        ),
    ),
    (
        "__tf6tEvent",
        Ok(
            "tEvent type_info function",
        ),
    ),
    (
        "__tf10tBaseEvent",
        Ok(
            "tBaseEvent type_info function",
        ),
    ),
    (
        "__tf13tGenericEvent",
        Ok(
            "tGenericEvent type_info function",
        ),
    ),
    (
        "_$_6tEvent",
        Ok(
            "tEvent::~tEvent(void)",
        ),
    ),
    (
        "_$_10tBaseEvent",
        Ok(
            "tBaseEvent::~tBaseEvent(void)",
        ),
    ),
    (
        "__11tExpression",
        Ok(
            "tExpression::tExpression(void)",
        ),
    ),
    (
        "_$_11tExpression",
        Ok(
            "tExpression::~tExpression(void)",
        ),
    ),
    (
        "__17tExpressionLoader",
        Ok(
            "tExpressionLoader::tExpressionLoader(void)",
        ),
    ),
    (
        "LoadObject__17tExpressionLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tExpressionLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__16tExpressionGroupi",
        Ok(
            "tExpressionGroup::tExpressionGroup(int)",
        ),
    ),
    (
        "_$_16tExpressionGroup",
        Ok(
            "tExpressionGroup::~tExpressionGroup(void)",
        ),
    ),
    (
        "FindExpression__C16tExpressionGroupRC5tNamePi",
        Ok(
            "tExpressionGroup::FindExpression(tName const &, int *) const",
        ),
    ),
    (
        "__16tExpressionMixer",
        Ok(
            "tExpressionMixer::tExpressionMixer(void)",
        ),
    ),
    (
        "_$_16tExpressionMixer",
        Ok(
            "tExpressionMixer::~tExpressionMixer(void)",
        ),
    ),
    (
        "SetExpressionGroup__16tExpressionMixerP16tExpressionGroup",
        Ok(
            "tExpressionMixer::SetExpressionGroup(tExpressionGroup *)",
        ),
    ),
    (
        "SetExpressionState__16tExpressionMixerRC5tNamef",
        Ok(
            "tExpressionMixer::SetExpressionState(tName const &, float)",
        ),
    ),
    (
        "ResetToNeutral__16tExpressionMixer",
        Ok(
            "tExpressionMixer::ResetToNeutral(void)",
        ),
    ),
    (
        "LoadObject__22tExpressionGroupLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tExpressionGroupLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__22tExpressionGroupLoader",
        Ok(
            "tExpressionGroupLoader::tExpressionGroupLoader(void)",
        ),
    ),
    (
        "__Q222tExpressionGroupLoader16tExpressionStore",
        Ok(
            "tExpressionGroupLoader::tExpressionStore::tExpressionStore(void)",
        ),
    ),
    (
        "_$_Q222tExpressionGroupLoader16tExpressionStore",
        Ok(
            "tExpressionGroupLoader::tExpressionStore::~tExpressionStore(void)",
        ),
    ),
    (
        "Find__Q222tExpressionGroupLoader16tExpressionStoreRQ216radLoadInventory12SafeCastBaseG13tUidUnaligned",
        Ok(
            "tExpressionGroupLoader::tExpressionStore::Find(radLoadInventory::SafeCastBase &, tUidUnaligned)",
        ),
    ),
    (
        "Store__Q222tExpressionGroupLoader16tExpressionStoreP7tEntity",
        Ok(
            "tExpressionGroupLoader::tExpressionStore::Store(tEntity *)",
        ),
    ),
    (
        "StoreHandlingCollisions__Q222tExpressionGroupLoader16tExpressionStoreP7tEntity",
        Ok(
            "tExpressionGroupLoader::tExpressionStore::StoreHandlingCollisions(tEntity *)",
        ),
    ),
    (
        "__22tExpressionMixerLoader",
        Ok(
            "tExpressionMixerLoader::tExpressionMixerLoader(void)",
        ),
    ),
    (
        "LoadObject__22tExpressionMixerLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tExpressionMixerLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf11tExpression",
        Ok(
            "tExpression type_info function",
        ),
    ),
    (
        "__tft6tArray1ZP11tExpression",
        Ok(
            "tArray<tExpression *> type_info function",
        ),
    ),
    (
        "__tft9tPtrArray1ZP11tExpression",
        Ok(
            "tPtrArray<tExpression *> type_info function",
        ),
    ),
    (
        "__tft6tArray1Z18p3dExpressionStage",
        Ok(
            "tArray<p3dExpressionStage> type_info function",
        ),
    ),
    (
        "__tf16tExpressionGroup",
        Ok(
            "tExpressionGroup type_info function",
        ),
    ),
    (
        "__tf16tExpressionMixer",
        Ok(
            "tExpressionMixer type_info function",
        ),
    ),
    (
        "__tf17tExpressionLoader",
        Ok(
            "tExpressionLoader type_info function",
        ),
    ),
    (
        "__tfQ222tExpressionGroupLoader16tExpressionStore",
        Ok(
            "tExpressionGroupLoader::tExpressionStore type_info function",
        ),
    ),
    (
        "__tf22tExpressionGroupLoader",
        Ok(
            "tExpressionGroupLoader type_info function",
        ),
    ),
    (
        "__tf22tExpressionMixerLoader",
        Ok(
            "tExpressionMixerLoader type_info function",
        ),
    ),
    (
        "_$_t9tPtrArray1ZP11tExpression",
        Ok(
            "tPtrArray<tExpression *>::~tPtrArray(void)",
        ),
    ),
    (
        "_$_17tExpressionLoader",
        Ok(
            "tExpressionLoader::~tExpressionLoader(void)",
        ),
    ),
    (
        "_$_22tExpressionGroupLoader",
        Ok(
            "tExpressionGroupLoader::~tExpressionGroupLoader(void)",
        ),
    ),
    (
        "_$_22tExpressionMixerLoader",
        Ok(
            "tExpressionMixerLoader::~tExpressionMixerLoader(void)",
        ),
    ),
    (
        "_$_t6tArray1ZP11tExpression",
        Ok(
            "tArray<tExpression *>::~tArray(void)",
        ),
    ),
    (
        "_$_t6tArray1Z18p3dExpressionStage",
        Ok(
            "tArray<p3dExpressionStage>::~tArray(void)",
        ),
    ),
    (
        "SetSize__t6tArray1ZP11tExpressioni",
        Ok(
            "tArray<tExpression *>::SetSize(int)",
        ),
    ),
    (
        "SetSize__t9tPtrArray1ZP11tExpressioni",
        Ok(
            "tPtrArray<tExpression *>::SetSize(int)",
        ),
    ),
    (
        "SetSize__t6tArray1Z18p3dExpressionStagei",
        Ok(
            "tArray<p3dExpressionStage>::SetSize(int)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z16tExpressionGroup",
        Ok(
            "radLoadInventory::SafeCast<tExpressionGroup>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z16tExpressionGroup",
        Ok(
            "radLoadInventory::SafeCast<tExpressionGroup> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z16tExpressionGroupP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tExpressionGroup>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "__30tExpressionAnimationController",
        Ok(
            "tExpressionAnimationController::tExpressionAnimationController(void)",
        ),
    ),
    (
        "__30tExpressionAnimationControllerP30tExpressionAnimationController",
        Ok(
            "tExpressionAnimationController::tExpressionAnimationController(tExpressionAnimationController *)",
        ),
    ),
    (
        "_$_30tExpressionAnimationController",
        Ok(
            "tExpressionAnimationController::~tExpressionAnimationController(void)",
        ),
    ),
    (
        "Clone__30tExpressionAnimationController",
        Ok(
            "tExpressionAnimationController::Clone(void)",
        ),
    ),
    (
        "ValidateAnimation__30tExpressionAnimationControllerP10tAnimation",
        Ok(
            "tExpressionAnimationController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "SetTargetMixer__30tExpressionAnimationControllerP16tExpressionMixer",
        Ok(
            "tExpressionAnimationController::SetTargetMixer(tExpressionMixer *)",
        ),
    ),
    (
        "GetTargetMixer__C30tExpressionAnimationController",
        Ok(
            "tExpressionAnimationController::GetTargetMixer(void) const",
        ),
    ),
    (
        "UpdateNoBlending__30tExpressionAnimationController",
        Ok(
            "tExpressionAnimationController::UpdateNoBlending(void)",
        ),
    ),
    (
        "UpdateWithBlending__30tExpressionAnimationController",
        Ok(
            "tExpressionAnimationController::UpdateWithBlending(void)",
        ),
    ),
    (
        "ResetAccumulators__30tExpressionAnimationController",
        Ok(
            "tExpressionAnimationController::ResetAccumulators(void)",
        ),
    ),
    (
        "__tf30tExpressionAnimationController",
        Ok(
            "tExpressionAnimationController type_info function",
        ),
    ),
    (
        "__25tLightAnimationController",
        Ok(
            "tLightAnimationController::tLightAnimationController(void)",
        ),
    ),
    (
        "__25tLightAnimationControllerP25tLightAnimationController",
        Ok(
            "tLightAnimationController::tLightAnimationController(tLightAnimationController *)",
        ),
    ),
    (
        "_$_25tLightAnimationController",
        Ok(
            "tLightAnimationController::~tLightAnimationController(void)",
        ),
    ),
    (
        "Clone__25tLightAnimationController",
        Ok(
            "tLightAnimationController::Clone(void)",
        ),
    ),
    (
        "SetLight__25tLightAnimationControllerP6tLight",
        Ok(
            "tLightAnimationController::SetLight(tLight *)",
        ),
    ),
    (
        "ValidateAnimation__25tLightAnimationControllerP10tAnimation",
        Ok(
            "tLightAnimationController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "UpdateNoBlending__25tLightAnimationController",
        Ok(
            "tLightAnimationController::UpdateNoBlending(void)",
        ),
    ),
    (
        "UpdateWithBlending__25tLightAnimationController",
        Ok(
            "tLightAnimationController::UpdateWithBlending(void)",
        ),
    ),
    (
        "__tf25tLightAnimationController",
        Ok(
            "tLightAnimationController type_info function",
        ),
    ),
    (
        "__16tMultiControllerif",
        Ok(
            "tMultiController::tMultiController(int, float)",
        ),
    ),
    (
        "_$_16tMultiController",
        Ok(
            "tMultiController::~tMultiController(void)",
        ),
    ),
    (
        "Clone__16tMultiController",
        Ok(
            "tMultiController::Clone(void)",
        ),
    ),
    (
        "Advance__16tMultiControllerfb",
        Ok(
            "tMultiController::Advance(float, bool)",
        ),
    ),
    (
        "SetFrame__16tMultiControllerf",
        Ok(
            "tMultiController::SetFrame(float)",
        ),
    ),
    (
        "GetFrame__16tMultiController",
        Ok(
            "tMultiController::GetFrame(void)",
        ),
    ),
    (
        "SetFrameRange__16tMultiControllerff",
        Ok(
            "tMultiController::SetFrameRange(float, float)",
        ),
    ),
    (
        "GetTrack__16tMultiControllerUi",
        Ok(
            "tMultiController::GetTrack(unsigned int)",
        ),
    ),
    (
        "SetTrack__16tMultiControllerUiP16tFrameController",
        Ok(
            "tMultiController::SetTrack(unsigned int, tFrameController *)",
        ),
    ),
    (
        "Update__16tMultiController",
        Ok(
            "tMultiController::Update(void)",
        ),
    ),
    (
        "__22tMultiControllerLoader",
        Ok(
            "tMultiControllerLoader::tMultiControllerLoader(void)",
        ),
    ),
    (
        "LoadObject__22tMultiControllerLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tMultiControllerLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf16tMultiController",
        Ok(
            "tMultiController type_info function",
        ),
    ),
    (
        "__tf22tMultiControllerLoader",
        Ok(
            "tMultiControllerLoader type_info function",
        ),
    ),
    (
        "GetCycleMode__16tMultiController",
        Ok(
            "tMultiController::GetCycleMode(void)",
        ),
    ),
    (
        "SetCycleMode__16tMultiController12p3dCycleMode",
        Ok(
            "tMultiController::SetCycleMode(p3dCycleMode)",
        ),
    ),
    (
        "GetNumFrames__16tMultiController",
        Ok(
            "tMultiController::GetNumFrames(void)",
        ),
    ),
    (
        "SetRelativeSpeed__16tMultiControllerf",
        Ok(
            "tMultiController::SetRelativeSpeed(float)",
        ),
    ),
    (
        "GetRelativeSpeed__16tMultiController",
        Ok(
            "tMultiController::GetRelativeSpeed(void)",
        ),
    ),
    (
        "LastFrameReached__16tMultiController",
        Ok(
            "tMultiController::LastFrameReached(void)",
        ),
    ),
    (
        "Reset__16tMultiController",
        Ok(
            "tMultiController::Reset(void)",
        ),
    ),
    (
        "_$_22tMultiControllerLoader",
        Ok(
            "tMultiControllerLoader::~tMultiControllerLoader(void)",
        ),
    ),
    (
        "__9tPolySkini",
        Ok(
            "tPolySkin::tPolySkin(int)",
        ),
    ),
    (
        "_$_9tPolySkin",
        Ok(
            "tPolySkin::~tPolySkin(void)",
        ),
    ),
    (
        "Display__9tPolySkinP5tPose",
        Ok(
            "tPolySkin::Display(tPose *)",
        ),
    ),
    (
        "DisplayInstanced__9tPolySkinP5tPoseUi",
        Ok(
            "tPolySkin::DisplayInstanced(tPose *, unsigned int)",
        ),
    ),
    (
        "ProcessShaders__9tPolySkinRQ29tDrawable14ShaderCallback",
        Ok(
            "tPolySkin::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "__15tPolySkinLoader",
        Ok(
            "tPolySkinLoader::tPolySkinLoader(void)",
        ),
    ),
    (
        "LoadObject__15tPolySkinLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tPolySkinLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf9tPolySkin",
        Ok(
            "tPolySkin type_info function",
        ),
    ),
    (
        "_$_15tPolySkinLoader",
        Ok(
            "tPolySkinLoader::~tPolySkinLoader(void)",
        ),
    ),
    (
        "__tf15tPolySkinLoader",
        Ok(
            "tPolySkinLoader type_info function",
        ),
    ),
    (
        "Display__9tPolySkin",
        Ok(
            "tPolySkin::Display(void)",
        ),
    ),
    (
        "GetBoundingBox__9tPolySkinPQ218RadicalMathLibrary5Box3D",
        Ok(
            "tPolySkin::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__9tPolySkinPQ218RadicalMathLibrary6Sphere",
        Ok(
            "tPolySkin::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "SetOptimise__15tPolySkinLoaderb",
        Ok(
            "tPolySkinLoader::SetOptimise(bool)",
        ),
    ),
    (
        "_GLOBAL_$I$__9tPolySkini",
        Ok(
            "global constructors keyed to tPolySkin::tPolySkin(int)",
        ),
    ),
    (
        "__5tPoseP9tSkeleton",
        Ok(
            "tPose::tPose(tSkeleton *)",
        ),
    ),
    (
        "__5tPosei",
        Ok(
            "tPose::tPose(int)",
        ),
    ),
    (
        "_$_5tPose",
        Ok(
            "tPose::~tPose(void)",
        ),
    ),
    (
        "SetSkeleton__5tPoseP9tSkeleton",
        Ok(
            "tPose::SetSkeleton(tSkeleton *)",
        ),
    ),
    (
        "FindJoint__C5tPoseG13tUidUnaligned",
        Ok(
            "tPose::FindJoint(tUidUnaligned) const",
        ),
    ),
    (
        "FindJointIndex__C5tPoseG13tUidUnaligned",
        Ok(
            "tPose::FindJointIndex(tUidUnaligned) const",
        ),
    ),
    (
        "Evaluate__5tPosePCQ218RadicalMathLibrary6Matrix",
        Ok(
            "tPose::Evaluate(RadicalMathLibrary::Matrix const *)",
        ),
    ),
    (
        "ResetToRestPose__5tPose",
        Ok(
            "tPose::ResetToRestPose(void)",
        ),
    ),
    (
        "__tf5tPose",
        Ok(
            "tPose type_info function",
        ),
    ),
    (
        "__24tPoseAnimationController",
        Ok(
            "tPoseAnimationController::tPoseAnimationController(void)",
        ),
    ),
    (
        "__24tPoseAnimationControllerP24tPoseAnimationController",
        Ok(
            "tPoseAnimationController::tPoseAnimationController(tPoseAnimationController *)",
        ),
    ),
    (
        "_$_24tPoseAnimationController",
        Ok(
            "tPoseAnimationController::~tPoseAnimationController(void)",
        ),
    ),
    (
        "Clone__24tPoseAnimationController",
        Ok(
            "tPoseAnimationController::Clone(void)",
        ),
    ),
    (
        "SetPose__24tPoseAnimationControllerP5tPose",
        Ok(
            "tPoseAnimationController::SetPose(tPose *)",
        ),
    ),
    (
        "ValidateAnimation__24tPoseAnimationControllerP10tAnimation",
        Ok(
            "tPoseAnimationController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "UpdateNoBlending__24tPoseAnimationController",
        Ok(
            "tPoseAnimationController::UpdateNoBlending(void)",
        ),
    ),
    (
        "UpdateWithBlending__24tPoseAnimationController",
        Ok(
            "tPoseAnimationController::UpdateWithBlending(void)",
        ),
    ),
    (
        "__tf24tPoseAnimationController",
        Ok(
            "tPoseAnimationController type_info function",
        ),
    ),
    (
        "__22tStateSequencerCommand",
        Ok(
            "tStateSequencerCommand::tStateSequencerCommand(void)",
        ),
    ),
    (
        "_$_22tStateSequencerCommand",
        Ok(
            "tStateSequencerCommand::~tStateSequencerCommand(void)",
        ),
    ),
    (
        "__16tStateTransition",
        Ok(
            "tStateTransition::tStateTransition(void)",
        ),
    ),
    (
        "_$_16tStateTransition",
        Ok(
            "tStateTransition::~tStateTransition(void)",
        ),
    ),
    (
        "__15tSequencerState",
        Ok(
            "tSequencerState::tSequencerState(void)",
        ),
    ),
    (
        "_$_15tSequencerState",
        Ok(
            "tSequencerState::~tSequencerState(void)",
        ),
    ),
    (
        "DefaultTransition__15tSequencerState",
        Ok(
            "tSequencerState::DefaultTransition(void)",
        ),
    ),
    (
        "__13tSubPartState",
        Ok(
            "tSubPartState::tSubPartState(void)",
        ),
    ),
    (
        "_$_13tSubPartState",
        Ok(
            "tSubPartState::~tSubPartState(void)",
        ),
    ),
    (
        "SetState__13tSubPartStateP15tSequencerStatefff",
        Ok(
            "tSubPartState::SetState(tSequencerState *, float, float, float)",
        ),
    ),
    (
        "SetEventController__13tSubPartStateP16tEventController",
        Ok(
            "tSubPartState::SetEventController(tEventController *)",
        ),
    ),
    (
        "SetAnimationTarget__13tSubPartStateP21tBlendFrameController",
        Ok(
            "tSubPartState::SetAnimationTarget(tBlendFrameController *)",
        ),
    ),
    (
        "Kill__13tSubPartState",
        Ok(
            "tSubPartState::Kill(void)",
        ),
    ),
    (
        "__10tSequencer",
        Ok(
            "tSequencer::tSequencer(void)",
        ),
    ),
    (
        "_$_10tSequencer",
        Ok(
            "tSequencer::~tSequencer(void)",
        ),
    ),
    (
        "SetRelativeSpeed__10tSequencerf",
        Ok(
            "tSequencer::SetRelativeSpeed(float)",
        ),
    ),
    (
        "SetAnimationTarget__10tSequencerP7tEntityb",
        Ok(
            "tSequencer::SetAnimationTarget(tEntity *, bool)",
        ),
    ),
    (
        "HandleCommand__10tSequencerP22tStateSequencerCommandP13tSubPartState",
        Ok(
            "tSequencer::HandleCommand(tStateSequencerCommand *, tSubPartState *)",
        ),
    ),
    (
        "__16tSequencerLoader",
        Ok(
            "tSequencerLoader::tSequencerLoader(void)",
        ),
    ),
    (
        "_$_16tSequencerLoader",
        Ok(
            "tSequencerLoader::~tSequencerLoader(void)",
        ),
    ),
    (
        "Load__16tSequencerLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tSequencerLoader::Load(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "Load__16tSequencerLoaderP5tFileP12tEntityStore",
        Ok(
            "tSequencerLoader::Load(tFile *, tEntityStore *)",
        ),
    ),
    (
        "CheckChunkID__16tSequencerLoaderUi",
        Ok(
            "tSequencerLoader::CheckChunkID(unsigned int)",
        ),
    ),
    (
        "ParseScript__16tSequencerLoaderP14TextDataParser",
        Ok(
            "tSequencerLoader::ParseScript(TextDataParser *)",
        ),
    ),
    (
        "ParseSequencer__16tSequencerLoaderP14TextDataParser",
        Ok(
            "tSequencerLoader::ParseSequencer(TextDataParser *)",
        ),
    ),
    (
        "ParseStates__16tSequencerLoaderP14TextDataParserP10tSequencer",
        Ok(
            "tSequencerLoader::ParseStates(TextDataParser *, tSequencer *)",
        ),
    ),
    (
        "ParseState__16tSequencerLoaderP14TextDataParserP15tSequencerState",
        Ok(
            "tSequencerLoader::ParseState(TextDataParser *, tSequencerState *)",
        ),
    ),
    (
        "ParseTransitions__16tSequencerLoaderP14TextDataParserP15tSequencerState",
        Ok(
            "tSequencerLoader::ParseTransitions(TextDataParser *, tSequencerState *)",
        ),
    ),
    (
        "ParseTransition__16tSequencerLoaderP14TextDataParserP16tStateTransition",
        Ok(
            "tSequencerLoader::ParseTransition(TextDataParser *, tStateTransition *)",
        ),
    ),
    (
        "FixupTransitions__16tSequencerLoaderP10tSequencer",
        Ok(
            "tSequencerLoader::FixupTransitions(tSequencer *)",
        ),
    ),
    (
        "BuildSubParts__16tSequencerLoaderP10tSequencer",
        Ok(
            "tSequencerLoader::BuildSubParts(tSequencer *)",
        ),
    ),
    (
        "FindState__16tSequencerLoaderP10tSequencerPc",
        Ok(
            "tSequencerLoader::FindState(tSequencer *, char *)",
        ),
    ),
    (
        "__15tSEQFileHandler",
        Ok(
            "tSEQFileHandler::tSEQFileHandler(void)",
        ),
    ),
    (
        "_$_15tSEQFileHandler",
        Ok(
            "tSEQFileHandler::~tSEQFileHandler(void)",
        ),
    ),
    (
        "CheckExtension__15tSEQFileHandlerPc",
        Ok(
            "tSEQFileHandler::CheckExtension(char *)",
        ),
    ),
    (
        "Load__15tSEQFileHandlerP5tFileP12tEntityStore",
        Ok(
            "tSEQFileHandler::Load(tFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf22tStateSequencerCommand",
        Ok(
            "tStateSequencerCommand type_info function",
        ),
    ),
    (
        "__tf16tStateTransition",
        Ok(
            "tStateTransition type_info function",
        ),
    ),
    (
        "__tf15tSequencerState",
        Ok(
            "tSequencerState type_info function",
        ),
    ),
    (
        "__tft6tArray1ZP15tSequencerState",
        Ok(
            "tArray<tSequencerState *> type_info function",
        ),
    ),
    (
        "__tft9tPtrArray1ZP15tSequencerState",
        Ok(
            "tPtrArray<tSequencerState *> type_info function",
        ),
    ),
    (
        "__tft6tArray1Z13tSubPartState",
        Ok(
            "tArray<tSubPartState> type_info function",
        ),
    ),
    (
        "__tf10tSequencer",
        Ok(
            "tSequencer type_info function",
        ),
    ),
    (
        "__tf16tSequencerLoader",
        Ok(
            "tSequencerLoader type_info function",
        ),
    ),
    (
        "__tf15tSEQFileHandler",
        Ok(
            "tSEQFileHandler type_info function",
        ),
    ),
    (
        "__21tEventOriginSequencer",
        Ok(
            "tEventOriginSequencer::tEventOriginSequencer(void)",
        ),
    ),
    (
        "SetStartFrame__22tStateSequencerCommandf",
        Ok(
            "tStateSequencerCommand::SetStartFrame(float)",
        ),
    ),
    (
        "_$_t9tPtrArray1ZP15tSequencerState",
        Ok(
            "tPtrArray<tSequencerState *>::~tPtrArray(void)",
        ),
    ),
    (
        "GetChunkID__16tSequencerLoader",
        Ok(
            "tSequencerLoader::GetChunkID(void)",
        ),
    ),
    (
        "_$_t6tArray1ZP15tSequencerState",
        Ok(
            "tArray<tSequencerState *>::~tArray(void)",
        ),
    ),
    (
        "_$_t6tArray1Z13tSubPartState",
        Ok(
            "tArray<tSubPartState>::~tArray(void)",
        ),
    ),
    (
        "SetSize__t6tArray1ZP15tSequencerStatei",
        Ok(
            "tArray<tSequencerState *>::SetSize(int)",
        ),
    ),
    (
        "SetSize__t9tPtrArray1ZP15tSequencerStatei",
        Ok(
            "tPtrArray<tSequencerState *>::SetSize(int)",
        ),
    ),
    (
        "SetSize__t6tArray1Z13tSubPartStatei",
        Ok(
            "tArray<tSubPartState>::SetSize(int)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z21tBlendFrameController",
        Ok(
            "radLoadInventory::SafeCast<tBlendFrameController>::SafeCast(void)",
        ),
    ),
    (
        "_$_21tEventOriginSequencer",
        Ok(
            "tEventOriginSequencer::~tEventOriginSequencer(void)",
        ),
    ),
    (
        "__tf21tEventOriginSequencer",
        Ok(
            "tEventOriginSequencer type_info function",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z21tBlendFrameController",
        Ok(
            "radLoadInventory::SafeCast<tBlendFrameController> type_info function",
        ),
    ),
    (
        "__12tEventOrigin",
        Ok(
            "tEventOrigin::tEventOrigin(void)",
        ),
    ),
    (
        "AddRef__21tEventOriginSequencer",
        Ok(
            "tEventOriginSequencer::AddRef(void)",
        ),
    ),
    (
        "Release__21tEventOriginSequencer",
        Ok(
            "tEventOriginSequencer::Release(void)",
        ),
    ),
    (
        "Origin__21tEventOriginSequencer",
        Ok(
            "tEventOriginSequencer::Origin(void)",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z21tBlendFrameControllerP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tBlendFrameController>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "__tf12tEventOrigin",
        Ok(
            "tEventOrigin type_info function",
        ),
    ),
    (
        "Origin__12tEventOrigin",
        Ok(
            "tEventOrigin::Origin(void)",
        ),
    ),
    (
        "__9tSkeletoni",
        Ok(
            "tSkeleton::tSkeleton(int)",
        ),
    ),
    (
        "_$_9tSkeleton",
        Ok(
            "tSkeleton::~tSkeleton(void)",
        ),
    ),
    (
        "FindJoint__C9tSkeletonG13tUidUnaligned",
        Ok(
            "tSkeleton::FindJoint(tUidUnaligned) const",
        ),
    ),
    (
        "FindJointIndex__C9tSkeletonG13tUidUnaligned",
        Ok(
            "tSkeleton::FindJointIndex(tUidUnaligned) const",
        ),
    ),
    (
        "NewPose__9tSkeleton",
        Ok(
            "tSkeleton::NewPose(void)",
        ),
    ),
    (
        "Rebuild__9tSkeleton",
        Ok(
            "tSkeleton::Rebuild(void)",
        ),
    ),
    (
        "__15tSkeletonLoader",
        Ok(
            "tSkeletonLoader::tSkeletonLoader(void)",
        ),
    ),
    (
        "LoadObject__15tSkeletonLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tSkeletonLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tft6tArray1ZQ29tSkeleton5Joint",
        Ok(
            "tArray<tSkeleton::Joint> type_info function",
        ),
    ),
    (
        "__tf9tSkeleton",
        Ok(
            "tSkeleton type_info function",
        ),
    ),
    (
        "__tf15tSkeletonLoader",
        Ok(
            "tSkeletonLoader type_info function",
        ),
    ),
    (
        "__Q29tSkeleton5Joint",
        Ok(
            "tSkeleton::Joint::Joint(void)",
        ),
    ),
    (
        "_$_15tSkeletonLoader",
        Ok(
            "tSkeletonLoader::~tSkeletonLoader(void)",
        ),
    ),
    (
        "_$_t6tArray1ZQ29tSkeleton5Joint",
        Ok(
            "tArray<tSkeleton::Joint>::~tArray(void)",
        ),
    ),
    (
        "SetSize__t6tArray1ZQ29tSkeleton5Jointi",
        Ok(
            "tArray<tSkeleton::Joint>::SetSize(int)",
        ),
    ),
    (
        "__26tShaderAnimationController",
        Ok(
            "tShaderAnimationController::tShaderAnimationController(void)",
        ),
    ),
    (
        "__26tShaderAnimationControllerP26tShaderAnimationController",
        Ok(
            "tShaderAnimationController::tShaderAnimationController(tShaderAnimationController *)",
        ),
    ),
    (
        "_$_26tShaderAnimationController",
        Ok(
            "tShaderAnimationController::~tShaderAnimationController(void)",
        ),
    ),
    (
        "Clone__26tShaderAnimationController",
        Ok(
            "tShaderAnimationController::Clone(void)",
        ),
    ),
    (
        "SetShader__26tShaderAnimationControllerP7tShader",
        Ok(
            "tShaderAnimationController::SetShader(tShader *)",
        ),
    ),
    (
        "ValidateAnimation__26tShaderAnimationControllerP10tAnimation",
        Ok(
            "tShaderAnimationController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "UpdateNoBlending__26tShaderAnimationController",
        Ok(
            "tShaderAnimationController::UpdateNoBlending(void)",
        ),
    ),
    (
        "UpdateWithBlending__26tShaderAnimationController",
        Ok(
            "tShaderAnimationController::UpdateWithBlending(void)",
        ),
    ),
    (
        "__tf26tShaderAnimationController",
        Ok(
            "tShaderAnimationController type_info function",
        ),
    ),
    (
        "__27tTextureAnimationController",
        Ok(
            "tTextureAnimationController::tTextureAnimationController(void)",
        ),
    ),
    (
        "__27tTextureAnimationControllerP27tTextureAnimationController",
        Ok(
            "tTextureAnimationController::tTextureAnimationController(tTextureAnimationController *)",
        ),
    ),
    (
        "_$_27tTextureAnimationController",
        Ok(
            "tTextureAnimationController::~tTextureAnimationController(void)",
        ),
    ),
    (
        "Clone__27tTextureAnimationController",
        Ok(
            "tTextureAnimationController::Clone(void)",
        ),
    ),
    (
        "SetShader__27tTextureAnimationControllerP7tShader",
        Ok(
            "tTextureAnimationController::SetShader(tShader *)",
        ),
    ),
    (
        "ValidateAnimation__27tTextureAnimationControllerP10tAnimation",
        Ok(
            "tTextureAnimationController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "Update__27tTextureAnimationController",
        Ok(
            "tTextureAnimationController::Update(void)",
        ),
    ),
    (
        "__tf27tTextureAnimationController",
        Ok(
            "tTextureAnimationController type_info function",
        ),
    ),
    (
        "__28tVertexOffsetExpressionMixer",
        Ok(
            "tVertexOffsetExpressionMixer::tVertexOffsetExpressionMixer(void)",
        ),
    ),
    (
        "_$_28tVertexOffsetExpressionMixer",
        Ok(
            "tVertexOffsetExpressionMixer::~tVertexOffsetExpressionMixer(void)",
        ),
    ),
    (
        "ValidateExpressionGroup__28tVertexOffsetExpressionMixerP16tExpressionGroup",
        Ok(
            "tVertexOffsetExpressionMixer::ValidateExpressionGroup(tExpressionGroup *)",
        ),
    ),
    (
        "SetExpressionGroup__28tVertexOffsetExpressionMixerP16tExpressionGroup",
        Ok(
            "tVertexOffsetExpressionMixer::SetExpressionGroup(tExpressionGroup *)",
        ),
    ),
    (
        "ValidateTarget__28tVertexOffsetExpressionMixerP7tEntity",
        Ok(
            "tVertexOffsetExpressionMixer::ValidateTarget(tEntity *)",
        ),
    ),
    (
        "SetTarget__28tVertexOffsetExpressionMixerP7tEntity",
        Ok(
            "tVertexOffsetExpressionMixer::SetTarget(tEntity *)",
        ),
    ),
    (
        "CompactBlendStages__28tVertexOffsetExpressionMixer",
        Ok(
            "tVertexOffsetExpressionMixer::CompactBlendStages(void)",
        ),
    ),
    (
        "ResetAccumulators__28tVertexOffsetExpressionMixer",
        Ok(
            "tVertexOffsetExpressionMixer::ResetAccumulators(void)",
        ),
    ),
    (
        "Update__28tVertexOffsetExpressionMixer",
        Ok(
            "tVertexOffsetExpressionMixer::Update(void)",
        ),
    ),
    (
        "GetVtxOffsets__28tVertexOffsetExpressionMixeri",
        Ok(
            "tVertexOffsetExpressionMixer::GetVtxOffsets(int)",
        ),
    ),
    (
        "InitOffsetArray__28tVertexOffsetExpressionMixer",
        Ok(
            "tVertexOffsetExpressionMixer::InitOffsetArray(void)",
        ),
    ),
    (
        "compareOffsets__FPCvT0",
        Ok(
            "compareOffsets(void const *, void const *)",
        ),
    ),
    (
        "__tf28tVertexOffsetExpressionMixer",
        Ok(
            "tVertexOffsetExpressionMixer type_info function",
        ),
    ),
    (
        "GetTarget__C28tVertexOffsetExpressionMixer",
        Ok(
            "tVertexOffsetExpressionMixer::GetTarget(void) const",
        ),
    ),
    (
        "Update__36tSimpleVisibilityAnimationController",
        Ok(
            "tSimpleVisibilityAnimationController::Update(void)",
        ),
    ),
    (
        "__40tSceneGraphVisibilityAnimationController",
        Ok(
            "tSceneGraphVisibilityAnimationController::tSceneGraphVisibilityAnimationController(void)",
        ),
    ),
    (
        "__40tSceneGraphVisibilityAnimationControllerP40tSceneGraphVisibilityAnimationController",
        Ok(
            "tSceneGraphVisibilityAnimationController::tSceneGraphVisibilityAnimationController(tSceneGraphVisibilityAnimationController *)",
        ),
    ),
    (
        "_$_40tSceneGraphVisibilityAnimationController",
        Ok(
            "tSceneGraphVisibilityAnimationController::~tSceneGraphVisibilityAnimationController(void)",
        ),
    ),
    (
        "Clone__40tSceneGraphVisibilityAnimationController",
        Ok(
            "tSceneGraphVisibilityAnimationController::Clone(void)",
        ),
    ),
    (
        "ValidateAnimation__40tSceneGraphVisibilityAnimationControllerP10tAnimation",
        Ok(
            "tSceneGraphVisibilityAnimationController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "SetAnimation__40tSceneGraphVisibilityAnimationControllerP10tAnimation",
        Ok(
            "tSceneGraphVisibilityAnimationController::SetAnimation(tAnimation *)",
        ),
    ),
    (
        "SetAnimation__40tSceneGraphVisibilityAnimationControllerP10tAnimationff",
        Ok(
            "tSceneGraphVisibilityAnimationController::SetAnimation(tAnimation *, float, float)",
        ),
    ),
    (
        "SetDrawable__40tSceneGraphVisibilityAnimationControllerPQ210Scenegraph10Scenegraph",
        Ok(
            "tSceneGraphVisibilityAnimationController::SetDrawable(Scenegraph::Scenegraph *)",
        ),
    ),
    (
        "RebindAnimationAndDrawable__40tSceneGraphVisibilityAnimationController",
        Ok(
            "tSceneGraphVisibilityAnimationController::RebindAnimationAndDrawable(void)",
        ),
    ),
    (
        "SetVisibilityOnNode__40tSceneGraphVisibilityAnimationControllerib",
        Ok(
            "tSceneGraphVisibilityAnimationController::SetVisibilityOnNode(int, bool)",
        ),
    ),
    (
        "__38tCompDrawVisibilityAnimationController",
        Ok(
            "tCompDrawVisibilityAnimationController::tCompDrawVisibilityAnimationController(void)",
        ),
    ),
    (
        "__38tCompDrawVisibilityAnimationControllerP38tCompDrawVisibilityAnimationController",
        Ok(
            "tCompDrawVisibilityAnimationController::tCompDrawVisibilityAnimationController(tCompDrawVisibilityAnimationController *)",
        ),
    ),
    (
        "_$_38tCompDrawVisibilityAnimationController",
        Ok(
            "tCompDrawVisibilityAnimationController::~tCompDrawVisibilityAnimationController(void)",
        ),
    ),
    (
        "Clone__38tCompDrawVisibilityAnimationController",
        Ok(
            "tCompDrawVisibilityAnimationController::Clone(void)",
        ),
    ),
    (
        "ValidateAnimation__38tCompDrawVisibilityAnimationControllerP10tAnimation",
        Ok(
            "tCompDrawVisibilityAnimationController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "SetAnimation__38tCompDrawVisibilityAnimationControllerP10tAnimation",
        Ok(
            "tCompDrawVisibilityAnimationController::SetAnimation(tAnimation *)",
        ),
    ),
    (
        "SetAnimation__38tCompDrawVisibilityAnimationControllerP10tAnimationff",
        Ok(
            "tCompDrawVisibilityAnimationController::SetAnimation(tAnimation *, float, float)",
        ),
    ),
    (
        "SetDrawable__38tCompDrawVisibilityAnimationControllerP18tCompositeDrawable",
        Ok(
            "tCompDrawVisibilityAnimationController::SetDrawable(tCompositeDrawable *)",
        ),
    ),
    (
        "RebindAnimationAndDrawable__38tCompDrawVisibilityAnimationController",
        Ok(
            "tCompDrawVisibilityAnimationController::RebindAnimationAndDrawable(void)",
        ),
    ),
    (
        "SetVisibilityOnNode__38tCompDrawVisibilityAnimationControllerib",
        Ok(
            "tCompDrawVisibilityAnimationController::SetVisibilityOnNode(int, bool)",
        ),
    ),
    (
        "__tf36tSimpleVisibilityAnimationController",
        Ok(
            "tSimpleVisibilityAnimationController type_info function",
        ),
    ),
    (
        "__tf40tSceneGraphVisibilityAnimationController",
        Ok(
            "tSceneGraphVisibilityAnimationController type_info function",
        ),
    ),
    (
        "__tf38tCompDrawVisibilityAnimationController",
        Ok(
            "tCompDrawVisibilityAnimationController type_info function",
        ),
    ),
    (
        "_$_36tSimpleVisibilityAnimationController",
        Ok(
            "tSimpleVisibilityAnimationController::~tSimpleVisibilityAnimationController(void)",
        ),
    ),
    (
        "HasHirarchy__40tSceneGraphVisibilityAnimationController",
        Ok(
            "tSceneGraphVisibilityAnimationController::HasHirarchy(void)",
        ),
    ),
    (
        "HasHirarchy__38tCompDrawVisibilityAnimationController",
        Ok(
            "tCompDrawVisibilityAnimationController::HasHirarchy(void)",
        ),
    ),
    (
        "__21tVertexAnimController",
        Ok(
            "tVertexAnimController::tVertexAnimController(void)",
        ),
    ),
    (
        "_$_21tVertexAnimController",
        Ok(
            "tVertexAnimController::~tVertexAnimController(void)",
        ),
    ),
    (
        "SetTarget__21tVertexAnimControllerP17tVertexAnimObject",
        Ok(
            "tVertexAnimController::SetTarget(tVertexAnimObject *)",
        ),
    ),
    (
        "ValidateAnimation__21tVertexAnimControllerP10tAnimation",
        Ok(
            "tVertexAnimController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "Update__21tVertexAnimController",
        Ok(
            "tVertexAnimController::Update(void)",
        ),
    ),
    (
        "Clone__21tVertexAnimController",
        Ok(
            "tVertexAnimController::Clone(void)",
        ),
    ),
    (
        "__21tVertexAnimControllerP21tVertexAnimController",
        Ok(
            "tVertexAnimController::tVertexAnimController(tVertexAnimController *)",
        ),
    ),
    (
        "__tf21tVertexAnimController",
        Ok(
            "tVertexAnimController type_info function",
        ),
    ),
    (
        "__16tOffsetIndexList",
        Ok(
            "tOffsetIndexList::tOffsetIndexList(void)",
        ),
    ),
    (
        "_$_16tOffsetIndexList",
        Ok(
            "tOffsetIndexList::~tOffsetIndexList(void)",
        ),
    ),
    (
        "CreateIndex__16tOffsetIndexListi",
        Ok(
            "tOffsetIndexList::CreateIndex(int)",
        ),
    ),
    (
        "__17tColourOffsetList",
        Ok(
            "tColourOffsetList::tColourOffsetList(void)",
        ),
    ),
    (
        "_$_17tColourOffsetList",
        Ok(
            "tColourOffsetList::~tColourOffsetList(void)",
        ),
    ),
    (
        "CreateOffsets__17tColourOffsetListi",
        Ok(
            "tColourOffsetList::CreateOffsets(int)",
        ),
    ),
    (
        "__17tVectorOffsetList",
        Ok(
            "tVectorOffsetList::tVectorOffsetList(void)",
        ),
    ),
    (
        "_$_17tVectorOffsetList",
        Ok(
            "tVectorOffsetList::~tVectorOffsetList(void)",
        ),
    ),
    (
        "CreateOffsets__17tVectorOffsetListi",
        Ok(
            "tVectorOffsetList::CreateOffsets(int)",
        ),
    ),
    (
        "__18tVector2OffsetList",
        Ok(
            "tVector2OffsetList::tVector2OffsetList(void)",
        ),
    ),
    (
        "_$_18tVector2OffsetList",
        Ok(
            "tVector2OffsetList::~tVector2OffsetList(void)",
        ),
    ),
    (
        "CreateOffsets__18tVector2OffsetListi",
        Ok(
            "tVector2OffsetList::CreateOffsets(int)",
        ),
    ),
    (
        "__14tVertexAnimKey",
        Ok(
            "tVertexAnimKey::tVertexAnimKey(void)",
        ),
    ),
    (
        "_$_14tVertexAnimKey",
        Ok(
            "tVertexAnimKey::~tVertexAnimKey(void)",
        ),
    ),
    (
        "__20tVertexAnimKeyLoader",
        Ok(
            "tVertexAnimKeyLoader::tVertexAnimKeyLoader(void)",
        ),
    ),
    (
        "LoadObject__20tVertexAnimKeyLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tVertexAnimKeyLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadObject__17tOffsetListLoaderP10tChunkFileP12tEntityStoreUiRi",
        Ok(
            "tOffsetListLoader::LoadObject(tChunkFile *, tEntityStore *, unsigned int, int &)",
        ),
    ),
    (
        "LoadVectorOffsetList__17tOffsetListLoaderP10tChunkFileP12tEntityStoreRi",
        Ok(
            "tOffsetListLoader::LoadVectorOffsetList(tChunkFile *, tEntityStore *, int &)",
        ),
    ),
    (
        "LoadVector2OffsetList__17tOffsetListLoaderP10tChunkFileP12tEntityStoreRi",
        Ok(
            "tOffsetListLoader::LoadVector2OffsetList(tChunkFile *, tEntityStore *, int &)",
        ),
    ),
    (
        "LoadColourOffsetList__17tOffsetListLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tOffsetListLoader::LoadColourOffsetList(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf16tOffsetIndexList",
        Ok(
            "tOffsetIndexList type_info function",
        ),
    ),
    (
        "__tf17tColourOffsetList",
        Ok(
            "tColourOffsetList type_info function",
        ),
    ),
    (
        "__tf17tVectorOffsetList",
        Ok(
            "tVectorOffsetList type_info function",
        ),
    ),
    (
        "__tf18tVector2OffsetList",
        Ok(
            "tVector2OffsetList type_info function",
        ),
    ),
    (
        "__tf14tVertexAnimKey",
        Ok(
            "tVertexAnimKey type_info function",
        ),
    ),
    (
        "__tf20tVertexAnimKeyLoader",
        Ok(
            "tVertexAnimKeyLoader type_info function",
        ),
    ),
    (
        "_$_20tVertexAnimKeyLoader",
        Ok(
            "tVertexAnimKeyLoader::~tVertexAnimKeyLoader(void)",
        ),
    ),
    (
        "__15tGeometryOffsetP9tGeometry",
        Ok(
            "tGeometryOffset::tGeometryOffset(tGeometry *)",
        ),
    ),
    (
        "_$_15tGeometryOffset",
        Ok(
            "tGeometryOffset::~tGeometryOffset(void)",
        ),
    ),
    (
        "__17tVertexOffsetList",
        Ok(
            "tVertexOffsetList::tVertexOffsetList(void)",
        ),
    ),
    (
        "SetNormal__17tVertexOffsetListiPQ218RadicalMathLibrary6Vector",
        Ok(
            "tVertexOffsetList::SetNormal(int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "AddNormalDiff__17tVertexOffsetListiPQ218RadicalMathLibrary6Vectorf",
        Ok(
            "tVertexOffsetList::AddNormalDiff(int, RadicalMathLibrary::Vector *, float)",
        ),
    ),
    (
        "SetPosition__17tVertexOffsetListiPQ218RadicalMathLibrary6Vector",
        Ok(
            "tVertexOffsetList::SetPosition(int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "AddPositionDiff__17tVertexOffsetListiPQ218RadicalMathLibrary6Vectorf",
        Ok(
            "tVertexOffsetList::AddPositionDiff(int, RadicalMathLibrary::Vector *, float)",
        ),
    ),
    (
        "SetColour__17tVertexOffsetListiP13tColourOffset",
        Ok(
            "tVertexOffsetList::SetColour(int, tColourOffset *)",
        ),
    ),
    (
        "AddColourDiff__17tVertexOffsetListiP13tColourOffsetf",
        Ok(
            "tVertexOffsetList::AddColourDiff(int, tColourOffset *, float)",
        ),
    ),
    (
        "SetUV__17tVertexOffsetListiPQ218RadicalMathLibrary7Vector2i",
        Ok(
            "tVertexOffsetList::SetUV(int, RadicalMathLibrary::Vector2 *, int)",
        ),
    ),
    (
        "AddUVDiff__17tVertexOffsetListiPQ218RadicalMathLibrary7Vector2if",
        Ok(
            "tVertexOffsetList::AddUVDiff(int, RadicalMathLibrary::Vector2 *, int, float)",
        ),
    ),
    (
        "Reset__17tVertexOffsetList",
        Ok(
            "tVertexOffsetList::Reset(void)",
        ),
    ),
    (
        "_$_17tVertexOffsetList",
        Ok(
            "tVertexOffsetList::~tVertexOffsetList(void)",
        ),
    ),
    (
        "__17tVertexAnimObject",
        Ok(
            "tVertexAnimObject::tVertexAnimObject(void)",
        ),
    ),
    (
        "_$_17tVertexAnimObject",
        Ok(
            "tVertexAnimObject::~tVertexAnimObject(void)",
        ),
    ),
    (
        "Reset__17tVertexAnimObject",
        Ok(
            "tVertexAnimObject::Reset(void)",
        ),
    ),
    (
        "SetActiveObject__17tVertexAnimObjectP9tGeometry",
        Ok(
            "tVertexAnimObject::SetActiveObject(tGeometry *)",
        ),
    ),
    (
        "Display__17tVertexAnimObject",
        Ok(
            "tVertexAnimObject::Display(void)",
        ),
    ),
    (
        "ProcessShaders__17tVertexAnimObjectRQ29tDrawable14ShaderCallback",
        Ok(
            "tVertexAnimObject::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "Update__17tVertexAnimObjectP14tVertexAnimKeyi",
        Ok(
            "tVertexAnimObject::Update(tVertexAnimKey *, int)",
        ),
    ),
    (
        "AddDifference__17tVertexAnimObjectP14tVertexAnimKeyif",
        Ok(
            "tVertexAnimObject::AddDifference(tVertexAnimKey *, int, float)",
        ),
    ),
    (
        "__tf17tVertexOffsetList",
        Ok(
            "tVertexOffsetList type_info function",
        ),
    ),
    (
        "__tf15tGeometryOffset",
        Ok(
            "tGeometryOffset type_info function",
        ),
    ),
    (
        "__tf17tVertexAnimObject",
        Ok(
            "tVertexAnimObject type_info function",
        ),
    ),
    (
        "__17tEffectController",
        Ok(
            "tEffectController::tEffectController(void)",
        ),
    ),
    (
        "__17tEffectControllerP17tEffectController",
        Ok(
            "tEffectController::tEffectController(tEffectController *)",
        ),
    ),
    (
        "Clone__17tEffectController",
        Ok(
            "tEffectController::Clone(void)",
        ),
    ),
    (
        "Update__17tEffectController",
        Ok(
            "tEffectController::Update(void)",
        ),
    ),
    (
        "Advance__17tEffectControllerfb",
        Ok(
            "tEffectController::Advance(float, bool)",
        ),
    ),
    (
        "_$_17tEffectController",
        Ok(
            "tEffectController::~tEffectController(void)",
        ),
    ),
    (
        "__tf17tEffectController",
        Ok(
            "tEffectController type_info function",
        ),
    ),
    (
        "Reset__17tEffectController",
        Ok(
            "tEffectController::Reset(void)",
        ),
    ),
    (
        "LastFrameReached__17tEffectController",
        Ok(
            "tEffectController::LastFrameReached(void)",
        ),
    ),
    (
        "SetRelativeSpeed__17tEffectControllerf",
        Ok(
            "tEffectController::SetRelativeSpeed(float)",
        ),
    ),
    (
        "GetRelativeSpeed__17tEffectController",
        Ok(
            "tEffectController::GetRelativeSpeed(void)",
        ),
    ),
    (
        "GetNumFrames__17tEffectController",
        Ok(
            "tEffectController::GetNumFrames(void)",
        ),
    ),
    (
        "SetFrame__17tEffectControllerf",
        Ok(
            "tEffectController::SetFrame(float)",
        ),
    ),
    (
        "GetFrame__17tEffectController",
        Ok(
            "tEffectController::GetFrame(void)",
        ),
    ),
    (
        "SetFrameRange__17tEffectControllerff",
        Ok(
            "tEffectController::SetFrameRange(float, float)",
        ),
    ),
    (
        "SetCycleMode__17tEffectController12p3dCycleMode",
        Ok(
            "tEffectController::SetCycleMode(p3dCycleMode)",
        ),
    ),
    (
        "GetCycleMode__17tEffectController",
        Ok(
            "tEffectController::GetCycleMode(void)",
        ),
    ),
    (
        "__21tLensFlareGroupLoader",
        Ok(
            "tLensFlareGroupLoader::tLensFlareGroupLoader(void)",
        ),
    ),
    (
        "LoadObject__21tLensFlareGroupLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tLensFlareGroupLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadLensFlare__21tLensFlareGroupLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tLensFlareGroupLoader::LoadLensFlare(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf21tLensFlareGroupLoader",
        Ok(
            "tLensFlareGroupLoader type_info function",
        ),
    ),
    (
        "_$_21tLensFlareGroupLoader",
        Ok(
            "tLensFlareGroupLoader::~tLensFlareGroupLoader(void)",
        ),
    ),
    (
        "LoadGeneratorFactory__23tGeneratorFactoryLoaderUiP10tChunkFileP12tEntityStore",
        Ok(
            "tGeneratorFactoryLoader::LoadGeneratorFactory(unsigned int, tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadEmitterFactory__21tEmitterFactoryLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tEmitterFactoryLoader::LoadEmitterFactory(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadBaseEmitterFactoryData__21tEmitterFactoryLoaderP10tChunkFileP12tEntityStoreP19tBaseEmitterFactory",
        Ok(
            "tEmitterFactoryLoader::LoadBaseEmitterFactoryData(tChunkFile *, tEntityStore *, tBaseEmitterFactory *)",
        ),
    ),
    (
        "LoadSpriteEmitterFactoryData__21tEmitterFactoryLoaderP10tChunkFileP12tEntityStoreP21tSpriteEmitterFactory",
        Ok(
            "tEmitterFactoryLoader::LoadSpriteEmitterFactoryData(tChunkFile *, tEntityStore *, tSpriteEmitterFactory *)",
        ),
    ),
    (
        "LoadBaseParticleData__21tEmitterFactoryLoaderP10tAnimationP19tBaseEmitterFactory",
        Ok(
            "tEmitterFactoryLoader::LoadBaseParticleData(tAnimation *, tBaseEmitterFactory *)",
        ),
    ),
    (
        "LoadSpriteParticleData__21tEmitterFactoryLoaderP10tAnimationP21tSpriteEmitterFactory",
        Ok(
            "tEmitterFactoryLoader::LoadSpriteParticleData(tAnimation *, tSpriteEmitterFactory *)",
        ),
    ),
    (
        "__28tParticleSystemFactoryLoader",
        Ok(
            "tParticleSystemFactoryLoader::tParticleSystemFactoryLoader(void)",
        ),
    ),
    (
        "LoadObject__28tParticleSystemFactoryLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tParticleSystemFactoryLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__21tParticleSystemLoader",
        Ok(
            "tParticleSystemLoader::tParticleSystemLoader(void)",
        ),
    ),
    (
        "LoadObject__21tParticleSystemLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tParticleSystemLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf28tParticleSystemFactoryLoader",
        Ok(
            "tParticleSystemFactoryLoader type_info function",
        ),
    ),
    (
        "__tf21tParticleSystemLoader",
        Ok(
            "tParticleSystemLoader type_info function",
        ),
    ),
    (
        "_$_28tParticleSystemFactoryLoader",
        Ok(
            "tParticleSystemFactoryLoader::~tParticleSystemFactoryLoader(void)",
        ),
    ),
    (
        "_$_21tParticleSystemLoader",
        Ok(
            "tParticleSystemLoader::~tParticleSystemLoader(void)",
        ),
    ),
    (
        "__Q216radLoadInventoryt8SafeCast1Z22tParticleSystemFactory",
        Ok(
            "radLoadInventory::SafeCast<tParticleSystemFactory>::SafeCast(void)",
        ),
    ),
    (
        "__tfQ216radLoadInventoryt8SafeCast1Z22tParticleSystemFactory",
        Ok(
            "radLoadInventory::SafeCast<tParticleSystemFactory> type_info function",
        ),
    ),
    (
        "safe_cast__Q216radLoadInventoryt8SafeCast1Z22tParticleSystemFactoryP9IRefCount",
        Ok(
            "radLoadInventory::SafeCast<tParticleSystemFactory>::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_GLOBAL_$I$LoadGeneratorFactory__23tGeneratorFactoryLoaderUiP10tChunkFileP12tEntityStore",
        Ok(
            "global constructors keyed to tGeneratorFactoryLoader::LoadGeneratorFactory(unsigned int, tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__22tParticleSystemFactory",
        Ok(
            "tParticleSystemFactory::tParticleSystemFactory(void)",
        ),
    ),
    (
        "_$_22tParticleSystemFactory",
        Ok(
            "tParticleSystemFactory::~tParticleSystemFactory(void)",
        ),
    ),
    (
        "CreateEffect__22tParticleSystemFactoryP17tEffectController",
        Ok(
            "tParticleSystemFactory::CreateEffect(tEffectController *)",
        ),
    ),
    (
        "__15tParticleSystem",
        Ok(
            "tParticleSystem::tParticleSystem(void)",
        ),
    ),
    (
        "_$_15tParticleSystem",
        Ok(
            "tParticleSystem::~tParticleSystem(void)",
        ),
    ),
    (
        "SetRenderModule__15tParticleSystemP21tParticleRenderModule",
        Ok(
            "tParticleSystem::SetRenderModule(tParticleRenderModule *)",
        ),
    ),
    (
        "GetEmitter__C15tParticleSystemi",
        Ok(
            "tParticleSystem::GetEmitter(int) const",
        ),
    ),
    (
        "GetNumLiveParticles__15tParticleSystem",
        Ok(
            "tParticleSystem::GetNumLiveParticles(void)",
        ),
    ),
    (
        "ReleaseParticles__15tParticleSystem",
        Ok(
            "tParticleSystem::ReleaseParticles(void)",
        ),
    ),
    (
        "ResetParticles__15tParticleSystem",
        Ok(
            "tParticleSystem::ResetParticles(void)",
        ),
    ),
    (
        "ResetAnimation__15tParticleSystem",
        Ok(
            "tParticleSystem::ResetAnimation(void)",
        ),
    ),
    (
        "ResetBiases__15tParticleSystem",
        Ok(
            "tParticleSystem::ResetBiases(void)",
        ),
    ),
    (
        "SetBias__15tParticleSystemUif",
        Ok(
            "tParticleSystem::SetBias(unsigned int, float)",
        ),
    ),
    (
        "SetBlendRatio__15tParticleSystemf",
        Ok(
            "tParticleSystem::SetBlendRatio(float)",
        ),
    ),
    (
        "SetFrame__15tParticleSystemf",
        Ok(
            "tParticleSystem::SetFrame(float)",
        ),
    ),
    (
        "MakeValidFrame__15tParticleSystemf",
        Ok(
            "tParticleSystem::MakeValidFrame(float)",
        ),
    ),
    (
        "Advance__15tParticleSystemf",
        Ok(
            "tParticleSystem::Advance(float)",
        ),
    ),
    (
        "Update__15tParticleSystemPCQ218RadicalMathLibrary6Matrix",
        Ok(
            "tParticleSystem::Update(RadicalMathLibrary::Matrix const *)",
        ),
    ),
    (
        "Display__15tParticleSystem",
        Ok(
            "tParticleSystem::Display(void)",
        ),
    ),
    (
        "ProcessShaders__15tParticleSystemRQ29tDrawable14ShaderCallback",
        Ok(
            "tParticleSystem::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "LastFrameReached__15tParticleSystem",
        Ok(
            "tParticleSystem::LastFrameReached(void)",
        ),
    ),
    (
        "SetVelocity__15tParticleSystemRCQ218RadicalMathLibrary6Vector",
        Ok(
            "tParticleSystem::SetVelocity(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SortEmitters__15tParticleSystem",
        Ok(
            "tParticleSystem::SortEmitters(void)",
        ),
    ),
    (
        "ConvertEmittersToLocal__15tParticleSystem",
        Ok(
            "tParticleSystem::ConvertEmittersToLocal(void)",
        ),
    ),
    (
        "ComputePreciseBoundingBox__15tParticleSystemPQ218RadicalMathLibrary5Box3D",
        Ok(
            "tParticleSystem::ComputePreciseBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "__tf22tParticleSystemFactory",
        Ok(
            "tParticleSystemFactory type_info function",
        ),
    ),
    (
        "__tf15tParticleSystem",
        Ok(
            "tParticleSystem type_info function",
        ),
    ),
    (
        "_$_14tEffectFactory",
        Ok(
            "tEffectFactory::~tEffectFactory(void)",
        ),
    ),
    (
        "__14tEffectFactory",
        Ok(
            "tEffectFactory::tEffectFactory(void)",
        ),
    ),
    (
        "_$_7tEffect",
        Ok(
            "tEffect::~tEffect(void)",
        ),
    ),
    (
        "__7tEffect",
        Ok(
            "tEffect::tEffect(void)",
        ),
    ),
    (
        "GetFactory__C15tParticleSystem",
        Ok(
            "tParticleSystem::GetFactory(void) const",
        ),
    ),
    (
        "GetNumFrames__15tParticleSystem",
        Ok(
            "tParticleSystem::GetNumFrames(void)",
        ),
    ),
    (
        "GetFrame__15tParticleSystem",
        Ok(
            "tParticleSystem::GetFrame(void)",
        ),
    ),
    (
        "SetFrameRange__15tParticleSystemff",
        Ok(
            "tParticleSystem::SetFrameRange(float, float)",
        ),
    ),
    (
        "SetCycleMode__15tParticleSystem12p3dCycleMode",
        Ok(
            "tParticleSystem::SetCycleMode(p3dCycleMode)",
        ),
    ),
    (
        "GetCycleMode__15tParticleSystem",
        Ok(
            "tParticleSystem::GetCycleMode(void)",
        ),
    ),
    (
        "Reset__15tParticleSystem",
        Ok(
            "tParticleSystem::Reset(void)",
        ),
    ),
    (
        "SetVisibility__15tParticleSystemb",
        Ok(
            "tParticleSystem::SetVisibility(bool)",
        ),
    ),
    (
        "GetVisibility__15tParticleSystem",
        Ok(
            "tParticleSystem::GetVisibility(void)",
        ),
    ),
    (
        "__tf14tEffectFactory",
        Ok(
            "tEffectFactory type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__22tParticleSystemFactory",
        Ok(
            "global constructors keyed to tParticleSystemFactory::tParticleSystemFactory(void)",
        ),
    ),
    (
        "_GLOBAL_$I$_24ParticleSystemRandomData$msCurInt",
        Ok(
            "global constructors keyed to ParticleSystemRandomData::msCurInt",
        ),
    ),
    (
        "__Q210Scenegraph28TransformAnimationController",
        Ok(
            "Scenegraph::TransformAnimationController::TransformAnimationController(void)",
        ),
    ),
    (
        "__Q210Scenegraph28TransformAnimationControllerPQ210Scenegraph28TransformAnimationController",
        Ok(
            "Scenegraph::TransformAnimationController::TransformAnimationController(Scenegraph::TransformAnimationController *)",
        ),
    ),
    (
        "_$_Q210Scenegraph28TransformAnimationController",
        Ok(
            "Scenegraph::TransformAnimationController::~TransformAnimationController(void)",
        ),
    ),
    (
        "SetTransformNode__Q210Scenegraph28TransformAnimationControllerPQ210Scenegraph9Transform",
        Ok(
            "Scenegraph::TransformAnimationController::SetTransformNode(Scenegraph::Transform *)",
        ),
    ),
    (
        "Clone__Q210Scenegraph28TransformAnimationController",
        Ok(
            "Scenegraph::TransformAnimationController::Clone(void)",
        ),
    ),
    (
        "ValidateAnimation__Q210Scenegraph28TransformAnimationControllerP10tAnimation",
        Ok(
            "Scenegraph::TransformAnimationController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "UpdateNoBlending__Q210Scenegraph28TransformAnimationController",
        Ok(
            "Scenegraph::TransformAnimationController::UpdateNoBlending(void)",
        ),
    ),
    (
        "UpdateWithBlending__Q210Scenegraph28TransformAnimationController",
        Ok(
            "Scenegraph::TransformAnimationController::UpdateWithBlending(void)",
        ),
    ),
    (
        "__tfQ210Scenegraph28TransformAnimationController",
        Ok(
            "Scenegraph::TransformAnimationController type_info function",
        ),
    ),
    (
        "__Q210Scenegraph10Scenegraph",
        Ok(
            "Scenegraph::Scenegraph::Scenegraph(void)",
        ),
    ),
    (
        "_$_Q210Scenegraph10Scenegraph",
        Ok(
            "Scenegraph::Scenegraph::~Scenegraph(void)",
        ),
    ),
    (
        "SetRoot__Q210Scenegraph10ScenegraphPQ210Scenegraph4Node",
        Ok(
            "Scenegraph::Scenegraph::SetRoot(Scenegraph::Node *)",
        ),
    ),
    (
        "UpdateTransform__Q210Scenegraph10Scenegraph",
        Ok(
            "Scenegraph::Scenegraph::UpdateTransform(void)",
        ),
    ),
    (
        "Display__Q210Scenegraph10Scenegraph",
        Ok(
            "Scenegraph::Scenegraph::Display(void)",
        ),
    ),
    (
        "Search__Q210Scenegraph10ScenegraphPQ210Scenegraph4NodeG13tUidUnaligned",
        Ok(
            "Scenegraph::Scenegraph::Search(Scenegraph::Node *, tUidUnaligned)",
        ),
    ),
    (
        "ProcessShaders__Q210Scenegraph10ScenegraphRQ29tDrawable14ShaderCallback",
        Ok(
            "Scenegraph::Scenegraph::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "Visit__Q210Scenegraph15DrawableCounterPQ210Scenegraph4Node",
        Ok(
            "Scenegraph::DrawableCounter::Visit(Scenegraph::Node *)",
        ),
    ),
    (
        "Visit__Q210Scenegraph26TranslucentDrawableCounterPQ210Scenegraph4Node",
        Ok(
            "Scenegraph::TranslucentDrawableCounter::Visit(Scenegraph::Node *)",
        ),
    ),
    (
        "Traverse__Q210Scenegraph19SceneGraphTraversalPQ210Scenegraph4NodeRQ210Scenegraph17SceneGraphVisitor",
        Ok(
            "Scenegraph::SceneGraphTraversal::Traverse(Scenegraph::Node *, Scenegraph::SceneGraphVisitor &)",
        ),
    ),
    (
        "__Q210Scenegraph8IteratorPQ210Scenegraph10Scenegraph",
        Ok(
            "Scenegraph::Iterator::Iterator(Scenegraph::Scenegraph *)",
        ),
    ),
    (
        "_$_Q210Scenegraph8Iterator",
        Ok(
            "Scenegraph::Iterator::~Iterator(void)",
        ),
    ),
    (
        "First__Q210Scenegraph8Iterator",
        Ok(
            "Scenegraph::Iterator::First(void)",
        ),
    ),
    (
        "Next__Q210Scenegraph8Iterator",
        Ok(
            "Scenegraph::Iterator::Next(void)",
        ),
    ),
    (
        "First__Q210Scenegraph18LightGroupIterator",
        Ok(
            "Scenegraph::LightGroupIterator::First(void)",
        ),
    ),
    (
        "Next__Q210Scenegraph18LightGroupIterator",
        Ok(
            "Scenegraph::LightGroupIterator::Next(void)",
        ),
    ),
    (
        "GetLightGroup__Q210Scenegraph18LightGroupIterator",
        Ok(
            "Scenegraph::LightGroupIterator::GetLightGroup(void)",
        ),
    ),
    (
        "__Q210Scenegraph4Node",
        Ok(
            "Scenegraph::Node::Node(void)",
        ),
    ),
    (
        "_$_Q210Scenegraph4Node",
        Ok(
            "Scenegraph::Node::~Node(void)",
        ),
    ),
    (
        "SetParent__Q210Scenegraph4NodePQ210Scenegraph4Node",
        Ok(
            "Scenegraph::Node::SetParent(Scenegraph::Node *)",
        ),
    ),
    (
        "GetParent__Q210Scenegraph4Node",
        Ok(
            "Scenegraph::Node::GetParent(void)",
        ),
    ),
    (
        "GetTransform__Q210Scenegraph4Node",
        Ok(
            "Scenegraph::Node::GetTransform(void)",
        ),
    ),
    (
        "GetWorldTransform__Q210Scenegraph4Node",
        Ok(
            "Scenegraph::Node::GetWorldTransform(void)",
        ),
    ),
    (
        "SetFlags__Q210Scenegraph4NodebUiQ310Scenegraph4Node11PropagationT1",
        Ok(
            "Scenegraph::Node::SetFlags(bool, unsigned int, Scenegraph::Node::Propagation, bool)",
        ),
    ),
    (
        "__Q210Scenegraph6Branchi",
        Ok(
            "Scenegraph::Branch::Branch(int)",
        ),
    ),
    (
        "_$_Q210Scenegraph6Branch",
        Ok(
            "Scenegraph::Branch::~Branch(void)",
        ),
    ),
    (
        "GetNumChildren__Q210Scenegraph6Branch",
        Ok(
            "Scenegraph::Branch::GetNumChildren(void)",
        ),
    ),
    (
        "GetChild__Q210Scenegraph6BranchUi",
        Ok(
            "Scenegraph::Branch::GetChild(unsigned int)",
        ),
    ),
    (
        "AddChild__Q210Scenegraph6BranchPQ210Scenegraph4Node",
        Ok(
            "Scenegraph::Branch::AddChild(Scenegraph::Node *)",
        ),
    ),
    (
        "RemoveChild__Q210Scenegraph6BranchPQ210Scenegraph4Node",
        Ok(
            "Scenegraph::Branch::RemoveChild(Scenegraph::Node *)",
        ),
    ),
    (
        "Display__Q210Scenegraph6BranchRCQ218RadicalMathLibrary6MatrixR11DisplayList",
        Ok(
            "Scenegraph::Branch::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
        ),
    ),
    (
        "CustomDisplay__Q210Scenegraph6BranchRCQ218RadicalMathLibrary6MatrixPQ210Scenegraph21CustomDisplayCallback",
        Ok(
            "Scenegraph::Branch::CustomDisplay(RadicalMathLibrary::Matrix const &, Scenegraph::CustomDisplayCallback *)",
        ),
    ),
    (
        "UpdateTransform__Q210Scenegraph6BranchRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "Scenegraph::Branch::UpdateTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "SetFlags__Q210Scenegraph6BranchbUiQ310Scenegraph4Node11PropagationT1",
        Ok(
            "Scenegraph::Branch::SetFlags(bool, unsigned int, Scenegraph::Node::Propagation, bool)",
        ),
    ),
    (
        "Resize__Q210Scenegraph6Branchi",
        Ok(
            "Scenegraph::Branch::Resize(int)",
        ),
    ),
    (
        "__Q210Scenegraph4Leaf",
        Ok(
            "Scenegraph::Leaf::Leaf(void)",
        ),
    ),
    (
        "_$_Q210Scenegraph4Leaf",
        Ok(
            "Scenegraph::Leaf::~Leaf(void)",
        ),
    ),
    (
        "GetNumChildren__Q210Scenegraph4Leaf",
        Ok(
            "Scenegraph::Leaf::GetNumChildren(void)",
        ),
    ),
    (
        "GetChild__Q210Scenegraph4LeafUi",
        Ok(
            "Scenegraph::Leaf::GetChild(unsigned int)",
        ),
    ),
    (
        "UpdateTransform__Q210Scenegraph4LeafRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "Scenegraph::Leaf::UpdateTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Display__Q210Scenegraph4LeafRCQ218RadicalMathLibrary6MatrixR11DisplayList",
        Ok(
            "Scenegraph::Leaf::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
        ),
    ),
    (
        "CustomDisplay__Q210Scenegraph4LeafRCQ218RadicalMathLibrary6MatrixPQ210Scenegraph21CustomDisplayCallback",
        Ok(
            "Scenegraph::Leaf::CustomDisplay(RadicalMathLibrary::Matrix const &, Scenegraph::CustomDisplayCallback *)",
        ),
    ),
    (
        "__Q210Scenegraph9Transformi",
        Ok(
            "Scenegraph::Transform::Transform(int)",
        ),
    ),
    (
        "_$_Q210Scenegraph9Transform",
        Ok(
            "Scenegraph::Transform::~Transform(void)",
        ),
    ),
    (
        "GetTransform__Q210Scenegraph9Transform",
        Ok(
            "Scenegraph::Transform::GetTransform(void)",
        ),
    ),
    (
        "GetWorldTransform__Q210Scenegraph9Transform",
        Ok(
            "Scenegraph::Transform::GetWorldTransform(void)",
        ),
    ),
    (
        "ModifyTransform__Q210Scenegraph9Transform",
        Ok(
            "Scenegraph::Transform::ModifyTransform(void)",
        ),
    ),
    (
        "Display__Q210Scenegraph9TransformRCQ218RadicalMathLibrary6MatrixR11DisplayList",
        Ok(
            "Scenegraph::Transform::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
        ),
    ),
    (
        "CustomDisplay__Q210Scenegraph9TransformRCQ218RadicalMathLibrary6MatrixPQ210Scenegraph21CustomDisplayCallback",
        Ok(
            "Scenegraph::Transform::CustomDisplay(RadicalMathLibrary::Matrix const &, Scenegraph::CustomDisplayCallback *)",
        ),
    ),
    (
        "UpdateTransform__Q210Scenegraph9TransformRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "Scenegraph::Transform::UpdateTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "__Q210Scenegraph8DrawableP9tDrawable",
        Ok(
            "Scenegraph::Drawable::Drawable(tDrawable *)",
        ),
    ),
    (
        "_$_Q210Scenegraph8Drawable",
        Ok(
            "Scenegraph::Drawable::~Drawable(void)",
        ),
    ),
    (
        "Display__Q210Scenegraph8DrawableRCQ218RadicalMathLibrary6MatrixR11DisplayList",
        Ok(
            "Scenegraph::Drawable::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
        ),
    ),
    (
        "CustomDisplay__Q210Scenegraph8DrawableRCQ218RadicalMathLibrary6MatrixPQ210Scenegraph21CustomDisplayCallback",
        Ok(
            "Scenegraph::Drawable::CustomDisplay(RadicalMathLibrary::Matrix const &, Scenegraph::CustomDisplayCallback *)",
        ),
    ),
    (
        "__Q210Scenegraph10AttachmentP13tDrawablePosei",
        Ok(
            "Scenegraph::Attachment::Attachment(tDrawablePose *, int)",
        ),
    ),
    (
        "_$_Q210Scenegraph10Attachment",
        Ok(
            "Scenegraph::Attachment::~Attachment(void)",
        ),
    ),
    (
        "AddChild__Q210Scenegraph10AttachmentPQ210Scenegraph4Node",
        Ok(
            "Scenegraph::Attachment::AddChild(Scenegraph::Node *)",
        ),
    ),
    (
        "SetAttachment__Q210Scenegraph10AttachmentiPQ210Scenegraph4Node",
        Ok(
            "Scenegraph::Attachment::SetAttachment(int, Scenegraph::Node *)",
        ),
    ),
    (
        "Display__Q210Scenegraph10AttachmentRCQ218RadicalMathLibrary6MatrixR11DisplayList",
        Ok(
            "Scenegraph::Attachment::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
        ),
    ),
    (
        "EvaluateAttachments__Q210Scenegraph10Attachment",
        Ok(
            "Scenegraph::Attachment::EvaluateAttachments(void)",
        ),
    ),
    (
        "UpdateTransform__Q210Scenegraph10AttachmentRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "Scenegraph::Attachment::UpdateTransform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Resize__Q210Scenegraph10Attachmenti",
        Ok(
            "Scenegraph::Attachment::Resize(int)",
        ),
    ),
    (
        "__Q210Scenegraph10Visibilityi",
        Ok(
            "Scenegraph::Visibility::Visibility(int)",
        ),
    ),
    (
        "Display__Q210Scenegraph10VisibilityRCQ218RadicalMathLibrary6MatrixR11DisplayList",
        Ok(
            "Scenegraph::Visibility::Display(RadicalMathLibrary::Matrix const &, DisplayList &)",
        ),
    ),
    (
        "CustomDisplay__Q210Scenegraph10VisibilityRCQ218RadicalMathLibrary6MatrixPQ210Scenegraph21CustomDisplayCallback",
        Ok(
            "Scenegraph::Visibility::CustomDisplay(RadicalMathLibrary::Matrix const &, Scenegraph::CustomDisplayCallback *)",
        ),
    ),
    (
        "__Q210Scenegraph6CameraP7tCamera",
        Ok(
            "Scenegraph::Camera::Camera(tCamera *)",
        ),
    ),
    (
        "_$_Q210Scenegraph6Camera",
        Ok(
            "Scenegraph::Camera::~Camera(void)",
        ),
    ),
    (
        "__Q210Scenegraph10LightGroupP11tLightGroup",
        Ok(
            "Scenegraph::LightGroup::LightGroup(tLightGroup *)",
        ),
    ),
    (
        "_$_Q210Scenegraph10LightGroup",
        Ok(
            "Scenegraph::LightGroup::~LightGroup(void)",
        ),
    ),
    (
        "GetLights__Q210Scenegraph10LightGroup",
        Ok(
            "Scenegraph::LightGroup::GetLights(void)",
        ),
    ),
    (
        "__Q210Scenegraph6Loader",
        Ok(
            "Scenegraph::Loader::Loader(void)",
        ),
    ),
    (
        "LoadObject__Q210Scenegraph6LoaderP10tChunkFileP12tEntityStore",
        Ok(
            "Scenegraph::Loader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadObject__Q210Scenegraph23SceneGraphGenericLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "Scenegraph::SceneGraphGenericLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "LoadNode__Q210Scenegraph23SceneGraphGenericLoaderP10tChunkFileP12tEntityStorePQ218RadicalMathLibrary6Matrix",
        Ok(
            "Scenegraph::SceneGraphGenericLoader::LoadNode(tChunkFile *, tEntityStore *, RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "__tfQ210Scenegraph4Node",
        Ok(
            "Scenegraph::Node type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph6Branch",
        Ok(
            "Scenegraph::Branch type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph4Leaf",
        Ok(
            "Scenegraph::Leaf type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph9Transform",
        Ok(
            "Scenegraph::Transform type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph8Drawable",
        Ok(
            "Scenegraph::Drawable type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph10Attachment",
        Ok(
            "Scenegraph::Attachment type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph6Camera",
        Ok(
            "Scenegraph::Camera type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph10LightGroup",
        Ok(
            "Scenegraph::LightGroup type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph10Scenegraph",
        Ok(
            "Scenegraph::Scenegraph type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph10Visibility",
        Ok(
            "Scenegraph::Visibility type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph6Loader",
        Ok(
            "Scenegraph::Loader type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph15DrawableCounter",
        Ok(
            "Scenegraph::DrawableCounter type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph26TranslucentDrawableCounter",
        Ok(
            "Scenegraph::TranslucentDrawableCounter type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph8Iterator",
        Ok(
            "Scenegraph::Iterator type_info function",
        ),
    ),
    (
        "_$_Q210Scenegraph18LightGroupIterator",
        Ok(
            "Scenegraph::LightGroupIterator::~LightGroupIterator(void)",
        ),
    ),
    (
        "__tfQ210Scenegraph18LightGroupIterator",
        Ok(
            "Scenegraph::LightGroupIterator type_info function",
        ),
    ),
    (
        "__tfQ210Scenegraph13ShaderVisitor",
        Ok(
            "Scenegraph::ShaderVisitor type_info function",
        ),
    ),
    (
        "GetBoundingBox__Q210Scenegraph10ScenegraphPQ218RadicalMathLibrary5Box3D",
        Ok(
            "Scenegraph::Scenegraph::GetBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "GetBoundingSphere__Q210Scenegraph10ScenegraphPQ218RadicalMathLibrary6Sphere",
        Ok(
            "Scenegraph::Scenegraph::GetBoundingSphere(RadicalMathLibrary::Sphere *)",
        ),
    ),
    (
        "_$_Q210Scenegraph10Visibility",
        Ok(
            "Scenegraph::Visibility::~Visibility(void)",
        ),
    ),
    (
        "__Q210Scenegraph23SceneGraphGenericLoader",
        Ok(
            "Scenegraph::SceneGraphGenericLoader::SceneGraphGenericLoader(void)",
        ),
    ),
    (
        "_$_Q210Scenegraph6Loader",
        Ok(
            "Scenegraph::Loader::~Loader(void)",
        ),
    ),
    (
        "__Q210Scenegraph17SceneGraphVisitor",
        Ok(
            "Scenegraph::SceneGraphVisitor::SceneGraphVisitor(void)",
        ),
    ),
    (
        "__Q210Scenegraph26TranslucentDrawableCounter",
        Ok(
            "Scenegraph::TranslucentDrawableCounter::TranslucentDrawableCounter(void)",
        ),
    ),
    (
        "IsDone__Q210Scenegraph8Iterator",
        Ok(
            "Scenegraph::Iterator::IsDone(void)",
        ),
    ),
    (
        "GetNode__Q210Scenegraph8Iterator",
        Ok(
            "Scenegraph::Iterator::GetNode(void)",
        ),
    ),
    (
        "Visit__Q210Scenegraph13ShaderVisitorPQ210Scenegraph4Node",
        Ok(
            "Scenegraph::ShaderVisitor::Visit(Scenegraph::Node *)",
        ),
    ),
    (
        "__tfQ210Scenegraph17SceneGraphVisitor",
        Ok(
            "Scenegraph::SceneGraphVisitor type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__Q210Scenegraph10Scenegraph",
        Ok(
            "global constructors keyed to Scenegraph::Scenegraph::Scenegraph(void)",
        ),
    ),
    (
        "_$_11tPS2FileMap",
        Ok(
            "tPS2FileMap::~tPS2FileMap(void)",
        ),
    ),
    (
        "Close__11tPS2FileMap",
        Ok(
            "tPS2FileMap::Close(void)",
        ),
    ),
    (
        "__tf11tPS2FileMap",
        Ok(
            "tPS2FileMap type_info function",
        ),
    ),
    (
        "__13tAmbientLight",
        Ok(
            "tAmbientLight::tAmbientLight(void)",
        ),
    ),
    (
        "_$_13tAmbientLight",
        Ok(
            "tAmbientLight::~tAmbientLight(void)",
        ),
    ),
    (
        "Update__13tAmbientLight",
        Ok(
            "tAmbientLight::Update(void)",
        ),
    ),
    (
        "__tf13tAmbientLight",
        Ok(
            "tAmbientLight type_info function",
        ),
    ),
    (
        "__17tDirectionalLight",
        Ok(
            "tDirectionalLight::tDirectionalLight(void)",
        ),
    ),
    (
        "SetDirection__17tDirectionalLightfff",
        Ok(
            "tDirectionalLight::SetDirection(float, float, float)",
        ),
    ),
    (
        "Update__17tDirectionalLight",
        Ok(
            "tDirectionalLight::Update(void)",
        ),
    ),
    (
        "__tf17tDirectionalLight",
        Ok(
            "tDirectionalLight type_info function",
        ),
    ),
    (
        "_$_17tDirectionalLight",
        Ok(
            "tDirectionalLight::~tDirectionalLight(void)",
        ),
    ),
    (
        "__11DisplayList",
        Ok(
            "DisplayList::DisplayList(void)",
        ),
    ),
    (
        "_$_11DisplayList",
        Ok(
            "DisplayList::~DisplayList(void)",
        ),
    ),
    (
        "Display__11DisplayList",
        Ok(
            "DisplayList::Display(void)",
        ),
    ),
    (
        "Add__11DisplayListP9tDrawablePCQ218RadicalMathLibrary6Matrixf",
        Ok(
            "DisplayList::Add(tDrawable *, RadicalMathLibrary::Matrix const *, float)",
        ),
    ),
    (
        "Purge__11DisplayList",
        Ok(
            "DisplayList::Purge(void)",
        ),
    ),
    (
        "SetSize__11DisplayListi",
        Ok(
            "DisplayList::SetSize(int)",
        ),
    ),
    (
        "Sort__11DisplayList",
        Ok(
            "DisplayList::Sort(void)",
        ),
    ),
    (
        "ZSortCompare__11DisplayListPCvT1",
        Ok(
            "DisplayList::ZSortCompare(void const *, void const *)",
        ),
    ),
    (
        "__Q211DisplayList8Drawable",
        Ok(
            "DisplayList::Drawable::Drawable(void)",
        ),
    ),
    (
        "__8tFileFTTPCcb",
        Ok(
            "tFileFTT::tFileFTT(char const *, bool)",
        ),
    ),
    (
        "_$_8tFileFTT",
        Ok(
            "tFileFTT::~tFileFTT(void)",
        ),
    ),
    (
        "EndOfFile__8tFileFTT",
        Ok(
            "tFileFTT::EndOfFile(void)",
        ),
    ),
    (
        "GetSize__8tFileFTT",
        Ok(
            "tFileFTT::GetSize(void)",
        ),
    ),
    (
        "SetPosition__8tFileFTTi",
        Ok(
            "tFileFTT::SetPosition(int)",
        ),
    ),
    (
        "Advance__8tFileFTTUi",
        Ok(
            "tFileFTT::Advance(unsigned int)",
        ),
    ),
    (
        "GetPosition__8tFileFTT",
        Ok(
            "tFileFTT::GetPosition(void)",
        ),
    ),
    (
        "OnFileOperationsComplete__8tFileFTTPv",
        Ok(
            "tFileFTT::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "WaitForCompletion__8tFileFTT",
        Ok(
            "tFileFTT::WaitForCompletion(void)",
        ),
    ),
    (
        "GetData__8tFileFTTPvUiQ25tFile8DataType",
        Ok(
            "tFileFTT::GetData(void *, unsigned int, tFile::DataType)",
        ),
    ),
    (
        "SetCompressed__8tFileFTTb",
        Ok(
            "tFileFTT::SetCompressed(bool)",
        ),
    ),
    (
        "SetUncompressedSize__8tFileFTTi",
        Ok(
            "tFileFTT::SetUncompressedSize(int)",
        ),
    ),
    (
        "ReadBuffer__8tFileFTTPc",
        Ok(
            "tFileFTT::ReadBuffer(char *)",
        ),
    ),
    (
        "FillBuffer__8tFileFTT",
        Ok(
            "tFileFTT::FillBuffer(void)",
        ),
    ),
    (
        "OpenFile__8tFileFTT",
        Ok(
            "tFileFTT::OpenFile(void)",
        ),
    ),
    (
        "__tf8tFileFTT",
        Ok(
            "tFileFTT type_info function",
        ),
    ),
    (
        "AddRef__8tFileFTT",
        Ok(
            "tFileFTT::AddRef(void)",
        ),
    ),
    (
        "Release__8tFileFTT",
        Ok(
            "tFileFTT::Release(void)",
        ),
    ),
    (
        "__15tImageConverter",
        Ok(
            "tImageConverter::tImageConverter(void)",
        ),
    ),
    (
        "_$_15tImageConverter",
        Ok(
            "tImageConverter::~tImageConverter(void)",
        ),
    ),
    (
        "ImageToTexture__15tImageConverterP6tImageb",
        Ok(
            "tImageConverter::ImageToTexture(tImage *, bool)",
        ),
    ),
    (
        "ImageInToVolumeTexture__15tImageConverterPP6tImageiP8tTexturei",
        Ok(
            "tImageConverter::ImageInToVolumeTexture(tImage **, int, tTexture *, int)",
        ),
    ),
    (
        "ImageToVolumeTexture__15tImageConverterPP6tImageii20pddiTextureUsageHint",
        Ok(
            "tImageConverter::ImageToVolumeTexture(tImage **, int, int, pddiTextureUsageHint)",
        ),
    ),
    (
        "UpdateTexture__15tImageConverterP6tImageP8tTexturei",
        Ok(
            "tImageConverter::UpdateTexture(tImage *, tTexture *, int)",
        ),
    ),
    (
        "UpdateSurface__15tImageConverterP6tImageP12pddiLockInfo",
        Ok(
            "tImageConverter::UpdateSurface(tImage *, pddiLockInfo *)",
        ),
    ),
    (
        "UpdateVolumeTexture__15tImageConverterP6tImageP12pddiLockInfoi",
        Ok(
            "tImageConverter::UpdateVolumeTexture(tImage *, pddiLockInfo *, int)",
        ),
    ),
    (
        "FillLockPAL8__15tImageConverterP6tImageP12pddiLockInfo",
        Ok(
            "tImageConverter::FillLockPAL8(tImage *, pddiLockInfo *)",
        ),
    ),
    (
        "FillLockRGB16__15tImageConverterP6tImageP12pddiLockInfo",
        Ok(
            "tImageConverter::FillLockRGB16(tImage *, pddiLockInfo *)",
        ),
    ),
    (
        "FillLockRGB32__15tImageConverterP6tImageP12pddiLockInfo",
        Ok(
            "tImageConverter::FillLockRGB32(tImage *, pddiLockInfo *)",
        ),
    ),
    (
        "LockToImage__15tImageConverterP12pddiLockInfo",
        Ok(
            "tImageConverter::LockToImage(pddiLockInfo *)",
        ),
    ),
    (
        "UpdateImage__15tImageConverterP12pddiLockInfoP6tImage",
        Ok(
            "tImageConverter::UpdateImage(pddiLockInfo *, tImage *)",
        ),
    ),
    (
        "__tf15tImageConverter",
        Ok(
            "tImageConverter type_info function",
        ),
    ),
    (
        "__14TextDataParserP5tFile",
        Ok(
            "TextDataParser::TextDataParser(tFile *)",
        ),
    ),
    (
        "_$_14TextDataParser",
        Ok(
            "TextDataParser::~TextDataParser(void)",
        ),
    ),
    (
        "Reset__14TextDataParser",
        Ok(
            "TextDataParser::Reset(void)",
        ),
    ),
    (
        "Advance__14TextDataParser",
        Ok(
            "TextDataParser::Advance(void)",
        ),
    ),
    (
        "AdvanceTo__14TextDataParserPc",
        Ok(
            "TextDataParser::AdvanceTo(char *)",
        ),
    ),
    (
        "CurrentToken__14TextDataParserPci",
        Ok(
            "TextDataParser::CurrentToken(char *, int)",
        ),
    ),
    (
        "DupCurrentToken__14TextDataParser",
        Ok(
            "TextDataParser::DupCurrentToken(void)",
        ),
    ),
    (
        "TokenCountAtCurrentBracketLevel__14TextDataParserPCc",
        Ok(
            "TextDataParser::TokenCountAtCurrentBracketLevel(char const *)",
        ),
    ),
    (
        "SkipBracketedSection__14TextDataParser",
        Ok(
            "TextDataParser::SkipBracketedSection(void)",
        ),
    ),
    (
        "__16tEventController",
        Ok(
            "tEventController::tEventController(void)",
        ),
    ),
    (
        "__16tEventControllerP16tEventController",
        Ok(
            "tEventController::tEventController(tEventController *)",
        ),
    ),
    (
        "_$_16tEventController",
        Ok(
            "tEventController::~tEventController(void)",
        ),
    ),
    (
        "Clone__16tEventController",
        Ok(
            "tEventController::Clone(void)",
        ),
    ),
    (
        "ValidateAnimation__16tEventControllerP10tAnimation",
        Ok(
            "tEventController::ValidateAnimation(tAnimation *)",
        ),
    ),
    (
        "SetAnimation__16tEventControllerP10tAnimation",
        Ok(
            "tEventController::SetAnimation(tAnimation *)",
        ),
    ),
    (
        "SetAnimation__16tEventControllerP10tAnimationff",
        Ok(
            "tEventController::SetAnimation(tAnimation *, float, float)",
        ),
    ),
    (
        "SetRecipient__16tEventControllerP15tEventRecipient",
        Ok(
            "tEventController::SetRecipient(tEventRecipient *)",
        ),
    ),
    (
        "GetRecipient__16tEventController",
        Ok(
            "tEventController::GetRecipient(void)",
        ),
    ),
    (
        "SetOrigin__16tEventControllerP12tEventOrigin",
        Ok(
            "tEventController::SetOrigin(tEventOrigin *)",
        ),
    ),
    (
        "GetOrigin__16tEventController",
        Ok(
            "tEventController::GetOrigin(void)",
        ),
    ),
    (
        "Update__16tEventController",
        Ok(
            "tEventController::Update(void)",
        ),
    ),
    (
        "Load__20tEventAnimTextLoaderP5tFileP12tEntityStore",
        Ok(
            "tEventAnimTextLoader::Load(tFile *, tEntityStore *)",
        ),
    ),
    (
        "Load__20tEventAnimTextLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tEventAnimTextLoader::Load(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "CheckChunkID__20tEventAnimTextLoaderUi",
        Ok(
            "tEventAnimTextLoader::CheckChunkID(unsigned int)",
        ),
    ),
    (
        "ParseScript__20tEventAnimTextLoaderP14TextDataParser",
        Ok(
            "tEventAnimTextLoader::ParseScript(TextDataParser *)",
        ),
    ),
    (
        "ParseEventAnim__20tEventAnimTextLoaderP14TextDataParser",
        Ok(
            "tEventAnimTextLoader::ParseEventAnim(TextDataParser *)",
        ),
    ),
    (
        "ParseEventChannel__20tEventAnimTextLoaderP14TextDataParserRPc",
        Ok(
            "tEventAnimTextLoader::ParseEventChannel(TextDataParser *, char *&)",
        ),
    ),
    (
        "ParseEvent__20tEventAnimTextLoaderP14TextDataParserRs",
        Ok(
            "tEventAnimTextLoader::ParseEvent(TextDataParser *, short &)",
        ),
    ),
    (
        "ParseEventData__20tEventAnimTextLoaderP14TextDataParserP13tGenericEvent",
        Ok(
            "tEventAnimTextLoader::ParseEventData(TextDataParser *, tGenericEvent *)",
        ),
    ),
    (
        "__tf16tEventController",
        Ok(
            "tEventController type_info function",
        ),
    ),
    (
        "__tf20tEventAnimTextLoader",
        Ok(
            "tEventAnimTextLoader type_info function",
        ),
    ),
    (
        "GetChunkID__20tEventAnimTextLoader",
        Ok(
            "tEventAnimTextLoader::GetChunkID(void)",
        ),
    ),
    (
        "_$_20tEventAnimTextLoader",
        Ok(
            "tEventAnimTextLoader::~tEventAnimTextLoader(void)",
        ),
    ),
    (
        "__18tExpressionOffsets",
        Ok(
            "tExpressionOffsets::tExpressionOffsets(void)",
        ),
    ),
    (
        "GetNumVerticesForKey__18tExpressionOffsetsi",
        Ok(
            "tExpressionOffsets::GetNumVerticesForKey(int)",
        ),
    ),
    (
        "InsertList__18tExpressionOffsetsPQ218tExpressionOffsets10OffsetListi",
        Ok(
            "tExpressionOffsets::InsertList(tExpressionOffsets::OffsetList *, int)",
        ),
    ),
    (
        "hasExpression__18tExpressionOffsetsi",
        Ok(
            "tExpressionOffsets::hasExpression(int)",
        ),
    ),
    (
        "_$_18tExpressionOffsets",
        Ok(
            "tExpressionOffsets::~tExpressionOffsets(void)",
        ),
    ),
    (
        "__24tExpressionOffsetsLoader",
        Ok(
            "tExpressionOffsetsLoader::tExpressionOffsetsLoader(void)",
        ),
    ),
    (
        "LoadObject__24tExpressionOffsetsLoaderP10tChunkFileP12tEntityStore",
        Ok(
            "tExpressionOffsetsLoader::LoadObject(tChunkFile *, tEntityStore *)",
        ),
    ),
    (
        "__tf18tExpressionOffsets",
        Ok(
            "tExpressionOffsets type_info function",
        ),
    ),
    (
        "__Q218tExpressionOffsets6Offset",
        Ok(
            "tExpressionOffsets::Offset::Offset(void)",
        ),
    ),
    (
        "__15tLensFlareGroup",
        Ok(
            "tLensFlareGroup::tLensFlareGroup(void)",
        ),
    ),
    (
        "_$_15tLensFlareGroup",
        Ok(
            "tLensFlareGroup::~tLensFlareGroup(void)",
        ),
    ),
    (
        "ProcessShaders__15tLensFlareGroupRQ29tDrawable14ShaderCallback",
        Ok(
            "tLensFlareGroup::ProcessShaders(tDrawable::ShaderCallback &)",
        ),
    ),
    (
        "DisplayEffect__15tLensFlareGroup",
        Ok(
            "tLensFlareGroup::DisplayEffect(void)",
        ),
    ),
    (
        "__10tLensFlare",
        Ok(
            "tLensFlare::tLensFlare(void)",
        ),
    ),
    (
        "_$_10tLensFlare",
        Ok(
            "tLensFlare::~tLensFlare(void)",
        ),
    ),
    (
        "DisplayFlare__10tLensFlareP13ps2PrimStreamGQ218RadicalMathLibrary6Vectorf",
        Ok(
            "tLensFlare::DisplayFlare(ps2PrimStream *, RadicalMathLibrary::Vector, float)",
        ),
    ),
    (
        "__tft6tArray1ZP10tLensFlare",
        Ok(
            "tArray<tLensFlare *> type_info function",
        ),
    ),
    (
        "__tft9tPtrArray1ZP10tLensFlare",
        Ok(
            "tPtrArray<tLensFlare *> type_info function",
        ),
    ),
    (
        "__tf15tLensFlareGroup",
        Ok(
            "tLensFlareGroup type_info function",
        ),
    ),
    (
        "__tf10tLensFlare",
        Ok(
            "tLensFlare type_info function",
        ),
    ),
    (
        "_$_t9tPtrArray1ZP10tLensFlare",
        Ok(
            "tPtrArray<tLensFlare *>::~tPtrArray(void)",
        ),
    ),
    (
        "_$_t6tArray1ZP10tLensFlare",
        Ok(
            "tArray<tLensFlare *>::~tArray(void)",
        ),
    ),
    (
        "SetSize__t6tArray1ZP10tLensFlarei",
        Ok(
            "tArray<tLensFlare *>::SetSize(int)",
        ),
    ),
    (
        "SetSize__t9tPtrArray1ZP10tLensFlarei",
        Ok(
            "tPtrArray<tLensFlare *>::SetSize(int)",
        ),
    ),
    (
        "__13tParticlePoolUiUiUi",
        Ok(
            "tParticlePool::tParticlePool(unsigned int, unsigned int, unsigned int)",
        ),
    ),
    (
        "_$_13tParticlePool",
        Ok(
            "tParticlePool::~tParticlePool(void)",
        ),
    ),
    (
        "RequestParticle__13tParticlePoolPP13tBaseParticlePs",
        Ok(
            "tParticlePool::RequestParticle(tBaseParticle **, short *)",
        ),
    ),
    (
        "ReleaseParticle__13tParticlePools",
        Ok(
            "tParticlePool::ReleaseParticle(short)",
        ),
    ),
    (
        "nextFree__t4List1Z15tSpriteParticle",
        Ok(
            "List<tSpriteParticle>::nextFree(void)",
        ),
    ),
    (
        "__vc__t4List1Z15tSpriteParticles",
        Ok(
            "List<tSpriteParticle>::operator[](short)",
        ),
    ),
    (
        "remove__t4List1Z15tSpriteParticles",
        Ok(
            "List<tSpriteParticle>::remove(short)",
        ),
    ),
    (
        "__t4Node1Z15tSpriteParticle",
        Ok(
            "Node<tSpriteParticle>::Node(void)",
        ),
    ),
    (
        "__t4List1Z15tSpriteParticleUi",
        Ok(
            "List<tSpriteParticle>::List(unsigned int)",
        ),
    ),
    (
        "_$_t4Node1Z15tSpriteParticle",
        Ok(
            "Node<tSpriteParticle>::~Node(void)",
        ),
    ),
    (
        "_$_t4List1Z15tSpriteParticle",
        Ok(
            "List<tSpriteParticle>::~List(void)",
        ),
    ),
    (
        "__tf13tParticlePool",
        Ok(
            "tParticlePool type_info function",
        ),
    ),
    (
        "__tf13tBaseParticle",
        Ok(
            "tBaseParticle type_info function",
        ),
    ),
    (
        "__tf15tSpriteParticle",
        Ok(
            "tSpriteParticle type_info function",
        ),
    ),
    (
        "_$_13tBaseParticle",
        Ok(
            "tBaseParticle::~tBaseParticle(void)",
        ),
    ),
    (
        "Initialize__13tBaseParticleP12tBaseEmitter",
        Ok(
            "tBaseParticle::Initialize(tBaseEmitter *)",
        ),
    ),
    (
        "Update__13tBaseParticleffP12tBaseEmitter",
        Ok(
            "tBaseParticle::Update(float, float, tBaseEmitter *)",
        ),
    ),
    (
        "_$_15tSpriteParticle",
        Ok(
            "tSpriteParticle::~tSpriteParticle(void)",
        ),
    ),
    (
        "Initialize__15tSpriteParticleP12tBaseEmitter",
        Ok(
            "tSpriteParticle::Initialize(tBaseEmitter *)",
        ),
    ),
    (
        "Update__15tSpriteParticleffP12tBaseEmitter",
        Ok(
            "tSpriteParticle::Update(float, float, tBaseEmitter *)",
        ),
    ),
    (
        "_GLOBAL_$I$__13tParticlePool",
        Ok(
            "global constructors keyed to tParticlePool::tParticlePool(void)",
        ),
    ),
    (
        "_GLOBAL_$D$__13tParticlePool",
        Ok(
            "global destructors keyed to tParticlePool::tParticlePool(void)",
        ),
    ),
    (
        "__14tParticleArrayP13tParticlePool",
        Ok(
            "tParticleArray::tParticleArray(tParticlePool *)",
        ),
    ),
    (
        "_$_14tParticleArray",
        Ok(
            "tParticleArray::~tParticleArray(void)",
        ),
    ),
    (
        "AllocateParticles__14tParticleArray",
        Ok(
            "tParticleArray::AllocateParticles(void)",
        ),
    ),
    (
        "ReleaseParticles__14tParticleArray",
        Ok(
            "tParticleArray::ReleaseParticles(void)",
        ),
    ),
    (
        "UpdateParticles__14tParticleArrayffP12tBaseEmitter",
        Ok(
            "tParticleArray::UpdateParticles(float, float, tBaseEmitter *)",
        ),
    ),
    (
        "KillAllParticles__14tParticleArray",
        Ok(
            "tParticleArray::KillAllParticles(void)",
        ),
    ),
    (
        "RefreshParticleArray__14tParticleArray",
        Ok(
            "tParticleArray::RefreshParticleArray(void)",
        ),
    ),
    (
        "RejuenateDeadParticle__14tParticleArray",
        Ok(
            "tParticleArray::RejuenateDeadParticle(void)",
        ),
    ),
    (
        "SetNumLiveParticles__14tParticleArrayi",
        Ok(
            "tParticleArray::SetNumLiveParticles(int)",
        ),
    ),
    (
        "__tf14tParticleArray",
        Ok(
            "tParticleArray type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$__14tParticleArray",
        Ok(
            "global constructors keyed to tParticleArray::tParticleArray(void)",
        ),
    ),
    (
        "__19tBaseEmitterFactory",
        Ok(
            "tBaseEmitterFactory::tBaseEmitterFactory(void)",
        ),
    ),
    (
        "_$_19tBaseEmitterFactory",
        Ok(
            "tBaseEmitterFactory::~tBaseEmitterFactory(void)",
        ),
    ),
    (
        "SetUpEmitter__19tBaseEmitterFactoryP12tBaseEmitter",
        Ok(
            "tBaseEmitterFactory::SetUpEmitter(tBaseEmitter *)",
        ),
    ),
    (
        "__21tSpriteEmitterFactory",
        Ok(
            "tSpriteEmitterFactory::tSpriteEmitterFactory(void)",
        ),
    ),
    (
        "_$_21tSpriteEmitterFactory",
        Ok(
            "tSpriteEmitterFactory::~tSpriteEmitterFactory(void)",
        ),
    ),
    (
        "CreateEmitter__21tSpriteEmitterFactory",
        Ok(
            "tSpriteEmitterFactory::CreateEmitter(void)",
        ),
    ),
    (
        "CreateLocalEmitter__21tSpriteEmitterFactory",
        Ok(
            "tSpriteEmitterFactory::CreateLocalEmitter(void)",
        ),
    ),
    (
        "SetUpEmitter__21tSpriteEmitterFactoryP12tBaseEmitter",
        Ok(
            "tSpriteEmitterFactory::SetUpEmitter(tBaseEmitter *)",
        ),
    ),
    (
        "__12tBaseEmitter",
        Ok(
            "tBaseEmitter::tBaseEmitter(void)",
        ),
    ),
    (
        "_$_12tBaseEmitter",
        Ok(
            "tBaseEmitter::~tBaseEmitter(void)",
        ),
    ),
    (
        "ResetParticles__12tBaseEmitter",
        Ok(
            "tBaseEmitter::ResetParticles(void)",
        ),
    ),
    (
        "ResetAnimation__12tBaseEmitter",
        Ok(
            "tBaseEmitter::ResetAnimation(void)",
        ),
    ),
    (
        "ResetBiases__12tBaseEmitter",
        Ok(
            "tBaseEmitter::ResetBiases(void)",
        ),
    ),
    (
        "SetBlendRatio__12tBaseEmitterf",
        Ok(
            "tBaseEmitter::SetBlendRatio(float)",
        ),
    ),
    (
        "SetFrame__12tBaseEmitterf",
        Ok(
            "tBaseEmitter::SetFrame(float)",
        ),
    ),
    (
        "ComputePreciseBoundingBox__12tBaseEmitterPQ218RadicalMathLibrary5Box3D",
        Ok(
            "tBaseEmitter::ComputePreciseBoundingBox(RadicalMathLibrary::Box3D *)",
        ),
    ),
    (
        "Update__12tBaseEmitterffPCQ218RadicalMathLibrary6Matrix",
        Ok(
            "tBaseEmitter::Update(float, float, RadicalMathLibrary::Matrix const *)",
        ),
    ),
    (
        "SetBias__12tBaseEmitterUif",
        Ok(
            "tBaseEmitter::SetBias(unsigned int, float)",
        ),
    ),
    (
        "GetBias__C12tBaseEmitterUi",
        Ok(
            "tBaseEmitter::GetBias(unsigned int) const",
        ),
    ),
    (
        "ReconnectAnimations__12tBaseEmitter",
        Ok(
            "tBaseEmitter::ReconnectAnimations(void)",
        ),
    ),
    (
        "UpdateEmitterAttributes__12tBaseEmitter",
        Ok(
            "tBaseEmitter::UpdateEmitterAttributes(void)",
        ),
    ),
    (
        "__14tSpriteEmitter",
        Ok(
            "tSpriteEmitter::tSpriteEmitter(void)",
        ),
    ),
    (
        "_$_14tSpriteEmitter",
        Ok(
            "tSpriteEmitter::~tSpriteEmitter(void)",
        ),
    ),
    (
        "Display__14tSpriteEmitter",
        Ok(
            "tSpriteEmitter::Display(void)",
        ),
    ),
    (
        "ResetBiases__14tSpriteEmitter",
        Ok(
            "tSpriteEmitter::ResetBiases(void)",
        ),
    ),
    (
        "SetBias__14tSpriteEmitterUif",
        Ok(
            "tSpriteEmitter::SetBias(unsigned int, float)",
        ),
    ),
    (
        "GetBias__C14tSpriteEmitterUi",
        Ok(
            "tSpriteEmitter::GetBias(unsigned int) const",
        ),
    ),
    (
        "ReconnectAnimations__14tSpriteEmitter",
        Ok(
            "tSpriteEmitter::ReconnectAnimations(void)",
        ),
    ),
    (
        "UpdateEmitterAttributes__14tSpriteEmitter",
        Ok(
            "tSpriteEmitter::UpdateEmitterAttributes(void)",
        ),
    ),
    (
        "Display__19tLocalSpriteEmitter",
        Ok(
            "tLocalSpriteEmitter::Display(void)",
        ),
    ),
    (
        "__tf19tBaseEmitterFactory",
        Ok(
            "tBaseEmitterFactory type_info function",
        ),
    ),
    (
        "__tf21tSpriteEmitterFactory",
        Ok(
            "tSpriteEmitterFactory type_info function",
        ),
    ),
    (
        "__tf12tBaseEmitter",
        Ok(
            "tBaseEmitter type_info function",
        ),
    ),
    (
        "__tf14tSpriteEmitter",
        Ok(
            "tSpriteEmitter type_info function",
        ),
    ),
    (
        "_$_19tLocalSpriteEmitter",
        Ok(
            "tLocalSpriteEmitter::~tLocalSpriteEmitter(void)",
        ),
    ),
    (
        "__tf19tLocalSpriteEmitter",
        Ok(
            "tLocalSpriteEmitter type_info function",
        ),
    ),
    (
        "GetFrame__C12tBaseEmitter",
        Ok(
            "tBaseEmitter::GetFrame(void) const",
        ),
    ),
    (
        "__19tLocalSpriteEmitter",
        Ok(
            "tLocalSpriteEmitter::tLocalSpriteEmitter(void)",
        ),
    ),
    (
        "_GLOBAL_$I$__19tBaseEmitterFactory",
        Ok(
            "global constructors keyed to tBaseEmitterFactory::tBaseEmitterFactory(void)",
        ),
    ),
    (
        "__21tBaseGeneratorFactory",
        Ok(
            "tBaseGeneratorFactory::tBaseGeneratorFactory(void)",
        ),
    ),
    (
        "_$_21tBaseGeneratorFactory",
        Ok(
            "tBaseGeneratorFactory::~tBaseGeneratorFactory(void)",
        ),
    ),
    (
        "__22tPointGeneratorFactory",
        Ok(
            "tPointGeneratorFactory::tPointGeneratorFactory(void)",
        ),
    ),
    (
        "_$_22tPointGeneratorFactory",
        Ok(
            "tPointGeneratorFactory::~tPointGeneratorFactory(void)",
        ),
    ),
    (
        "CreateGenerator__22tPointGeneratorFactory",
        Ok(
            "tPointGeneratorFactory::CreateGenerator(void)",
        ),
    ),
    (
        "__22tPlaneGeneratorFactory",
        Ok(
            "tPlaneGeneratorFactory::tPlaneGeneratorFactory(void)",
        ),
    ),
    (
        "_$_22tPlaneGeneratorFactory",
        Ok(
            "tPlaneGeneratorFactory::~tPlaneGeneratorFactory(void)",
        ),
    ),
    (
        "CreateGenerator__22tPlaneGeneratorFactory",
        Ok(
            "tPlaneGeneratorFactory::CreateGenerator(void)",
        ),
    ),
    (
        "__23tSphereGeneratorFactory",
        Ok(
            "tSphereGeneratorFactory::tSphereGeneratorFactory(void)",
        ),
    ),
    (
        "_$_23tSphereGeneratorFactory",
        Ok(
            "tSphereGeneratorFactory::~tSphereGeneratorFactory(void)",
        ),
    ),
    (
        "CreateGenerator__23tSphereGeneratorFactory",
        Ok(
            "tSphereGeneratorFactory::CreateGenerator(void)",
        ),
    ),
    (
        "__14tBaseGenerator",
        Ok(
            "tBaseGenerator::tBaseGenerator(void)",
        ),
    ),
    (
        "_$_14tBaseGenerator",
        Ok(
            "tBaseGenerator::~tBaseGenerator(void)",
        ),
    ),
    (
        "SetBlendRatio__14tBaseGeneratorf",
        Ok(
            "tBaseGenerator::SetBlendRatio(float)",
        ),
    ),
    (
        "__15tPointGenerator",
        Ok(
            "tPointGenerator::tPointGenerator(void)",
        ),
    ),
    (
        "_$_15tPointGenerator",
        Ok(
            "tPointGenerator::~tPointGenerator(void)",
        ),
    ),
    (
        "Generate__15tPointGeneratorfiP12tBaseEmitter",
        Ok(
            "tPointGenerator::Generate(float, int, tBaseEmitter *)",
        ),
    ),
    (
        "SetBias__15tPointGeneratorUif",
        Ok(
            "tPointGenerator::SetBias(unsigned int, float)",
        ),
    ),
    (
        "GetBias__C15tPointGeneratorUi",
        Ok(
            "tPointGenerator::GetBias(unsigned int) const",
        ),
    ),
    (
        "ReconnectAnimations__15tPointGenerator",
        Ok(
            "tPointGenerator::ReconnectAnimations(void)",
        ),
    ),
    (
        "__15tPlaneGenerator",
        Ok(
            "tPlaneGenerator::tPlaneGenerator(void)",
        ),
    ),
    (
        "_$_15tPlaneGenerator",
        Ok(
            "tPlaneGenerator::~tPlaneGenerator(void)",
        ),
    ),
    (
        "Generate__15tPlaneGeneratorfiP12tBaseEmitter",
        Ok(
            "tPlaneGenerator::Generate(float, int, tBaseEmitter *)",
        ),
    ),
    (
        "SetBias__15tPlaneGeneratorUif",
        Ok(
            "tPlaneGenerator::SetBias(unsigned int, float)",
        ),
    ),
    (
        "GetBias__C15tPlaneGeneratorUi",
        Ok(
            "tPlaneGenerator::GetBias(unsigned int) const",
        ),
    ),
    (
        "ReconnectAnimations__15tPlaneGenerator",
        Ok(
            "tPlaneGenerator::ReconnectAnimations(void)",
        ),
    ),
    (
        "__16tSphereGenerator",
        Ok(
            "tSphereGenerator::tSphereGenerator(void)",
        ),
    ),
    (
        "_$_16tSphereGenerator",
        Ok(
            "tSphereGenerator::~tSphereGenerator(void)",
        ),
    ),
    (
        "Generate__16tSphereGeneratorfiP12tBaseEmitter",
        Ok(
            "tSphereGenerator::Generate(float, int, tBaseEmitter *)",
        ),
    ),
    (
        "SetBias__16tSphereGeneratorUif",
        Ok(
            "tSphereGenerator::SetBias(unsigned int, float)",
        ),
    ),
    (
        "GetBias__C16tSphereGeneratorUi",
        Ok(
            "tSphereGenerator::GetBias(unsigned int) const",
        ),
    ),
    (
        "ReconnectAnimations__16tSphereGenerator",
        Ok(
            "tSphereGenerator::ReconnectAnimations(void)",
        ),
    ),
    (
        "__tf21tBaseGeneratorFactory",
        Ok(
            "tBaseGeneratorFactory type_info function",
        ),
    ),
    (
        "__tf22tPointGeneratorFactory",
        Ok(
            "tPointGeneratorFactory type_info function",
        ),
    ),
    (
        "__tf22tPlaneGeneratorFactory",
        Ok(
            "tPlaneGeneratorFactory type_info function",
        ),
    ),
    (
        "__tf23tSphereGeneratorFactory",
        Ok(
            "tSphereGeneratorFactory type_info function",
        ),
    ),
    (
        "__tf14tBaseGenerator",
        Ok(
            "tBaseGenerator type_info function",
        ),
    ),
    (
        "__tf15tPointGenerator",
        Ok(
            "tPointGenerator type_info function",
        ),
    ),
    (
        "__tf15tPlaneGenerator",
        Ok(
            "tPlaneGenerator type_info function",
        ),
    ),
    (
        "__tf16tSphereGenerator",
        Ok(
            "tSphereGenerator type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$_14tBaseGenerator$randomGenerator",
        Ok(
            "global constructors keyed to tBaseGenerator::randomGenerator",
        ),
    ),
    (
        "_GLOBAL_$D$_14tBaseGenerator$randomGenerator",
        Ok(
            "global destructors keyed to tBaseGenerator::randomGenerator",
        ),
    ),
    (
        "__12tOpticEffect",
        Ok(
            "tOpticEffect::tOpticEffect(void)",
        ),
    ),
    (
        "_$_12tOpticEffect",
        Ok(
            "tOpticEffect::~tOpticEffect(void)",
        ),
    ),
    (
        "Display__12tOpticEffect",
        Ok(
            "tOpticEffect::Display(void)",
        ),
    ),
    (
        "__tf12tOpticEffect",
        Ok(
            "tOpticEffect type_info function",
        ),
    ),
    (
        "ps2Atof__FPCc",
        Ok(
            "ps2Atof(char const *)",
        ),
    ),
    (
        "pddiCreate",
        Err(
            NotMangled,
        ),
    ),
    (
        "__9ps2Device",
        Ok(
            "ps2Device::ps2Device(void)",
        ),
    ),
    (
        "_$_9ps2Device",
        Ok(
            "ps2Device::~ps2Device(void)",
        ),
    ),
    (
        "GetLibraryInfo__9ps2DeviceP11pddiLibInfo",
        Ok(
            "ps2Device::GetLibraryInfo(pddiLibInfo *)",
        ),
    ),
    (
        "SetCurrentContext__9ps2DeviceP17pddiRenderContext",
        Ok(
            "ps2Device::SetCurrentContext(pddiRenderContext *)",
        ),
    ),
    (
        "NewDisplay__9ps2Devicei",
        Ok(
            "ps2Device::NewDisplay(int)",
        ),
    ),
    (
        "NewRenderContext__9ps2DeviceP11pddiDisplay",
        Ok(
            "ps2Device::NewRenderContext(pddiDisplay *)",
        ),
    ),
    (
        "NewTexture__9ps2DeviceP15pddiTextureDesc",
        Ok(
            "ps2Device::NewTexture(pddiTextureDesc *)",
        ),
    ),
    (
        "NewShader__9ps2DevicePCcT1",
        Ok(
            "ps2Device::NewShader(char const *, char const *)",
        ),
    ),
    (
        "NewPrimBuffer__9ps2DeviceP18pddiPrimBufferDesc",
        Ok(
            "ps2Device::NewPrimBuffer(pddiPrimBufferDesc *)",
        ),
    ),
    (
        "__tf9ps2Device",
        Ok(
            "ps2Device type_info function",
        ),
    ),
    (
        "__10pddiDevice",
        Ok(
            "pddiDevice::pddiDevice(void)",
        ),
    ),
    (
        "GetCurrentContext__9ps2Device",
        Ok(
            "ps2Device::GetCurrentContext(void)",
        ),
    ),
    (
        "AddCustomShader__9ps2DevicePCcT1",
        Ok(
            "ps2Device::AddCustomShader(char const *, char const *)",
        ),
    ),
    (
        "_GLOBAL_$I$pddiCreate",
        Ok(
            "global constructors keyed to pddiCreate",
        ),
    ),
    (
        "_GLOBAL_$D$pddiCreate",
        Ok(
            "global destructors keyed to pddiCreate",
        ),
    ),
    (
        "__10ps2Display",
        Ok(
            "ps2Display::ps2Display(void)",
        ),
    ),
    (
        "_$_10ps2Display",
        Ok(
            "ps2Display::~ps2Display(void)",
        ),
    ),
    (
        "ReallySwapBuffers__10ps2Display",
        Ok(
            "ps2Display::ReallySwapBuffers(void)",
        ),
    ),
    (
        "SwapBuffers__10ps2Display",
        Ok(
            "ps2Display::SwapBuffers(void)",
        ),
    ),
    (
        "InitDisplay__10ps2DisplayPC15pddiDisplayInit",
        Ok(
            "ps2Display::InitDisplay(pddiDisplayInit const *)",
        ),
    ),
    (
        "SetupFS_AA__10ps2Displaysssss",
        Ok(
            "ps2Display::SetupFS_AA(short, short, short, short, short)",
        ),
    ),
    (
        "InitDisplay__10ps2Displayiii",
        Ok(
            "ps2Display::InitDisplay(int, int, int)",
        ),
    ),
    (
        "SetFBMask__10ps2DisplayUi",
        Ok(
            "ps2Display::SetFBMask(unsigned int)",
        ),
    ),
    (
        "GetCurrentFrame__C10ps2Display",
        Ok(
            "ps2Display::GetCurrentFrame(void) const",
        ),
    ),
    (
        "GetFrameAddr__C10ps2Displayi",
        Ok(
            "ps2Display::GetFrameAddr(int) const",
        ),
    ),
    (
        "Screenshot__10ps2DisplayP10pddiColouri",
        Ok(
            "ps2Display::Screenshot(pddiColour *, int)",
        ),
    ),
    (
        "__tf11pddiDisplay",
        Ok(
            "pddiDisplay type_info function",
        ),
    ),
    (
        "__tf10ps2Display",
        Ok(
            "ps2Display type_info function",
        ),
    ),
    (
        "__11pddiDisplay",
        Ok(
            "pddiDisplay::pddiDisplay(void)",
        ),
    ),
    (
        "IsWidescreen__11pddiDisplay",
        Ok(
            "pddiDisplay::IsWidescreen(void)",
        ),
    ),
    (
        "SetForceVSync__11pddiDisplayb",
        Ok(
            "pddiDisplay::SetForceVSync(bool)",
        ),
    ),
    (
        "GetForceVSync__11pddiDisplay",
        Ok(
            "pddiDisplay::GetForceVSync(void)",
        ),
    ),
    (
        "_$_11pddiDisplay",
        Ok(
            "pddiDisplay::~pddiDisplay(void)",
        ),
    ),
    (
        "GetHeight__10ps2Display",
        Ok(
            "ps2Display::GetHeight(void)",
        ),
    ),
    (
        "GetWidth__10ps2Display",
        Ok(
            "ps2Display::GetWidth(void)",
        ),
    ),
    (
        "GetDepth__10ps2Display",
        Ok(
            "ps2Display::GetDepth(void)",
        ),
    ),
    (
        "GetDisplayMode__10ps2Display",
        Ok(
            "ps2Display::GetDisplayMode(void)",
        ),
    ),
    (
        "GetNumColourBuffer__10ps2Display",
        Ok(
            "ps2Display::GetNumColourBuffer(void)",
        ),
    ),
    (
        "GetBufferMask__10ps2Display",
        Ok(
            "ps2Display::GetBufferMask(void)",
        ),
    ),
    (
        "GetZBufferFormat__10ps2Display",
        Ok(
            "ps2Display::GetZBufferFormat(void)",
        ),
    ),
    (
        "GetZBufferAddress__10ps2Display",
        Ok(
            "ps2Display::GetZBufferAddress(void)",
        ),
    ),
    (
        "GetFreeVideoMem__10ps2Display",
        Ok(
            "ps2Display::GetFreeVideoMem(void)",
        ),
    ),
    (
        "GetFreeTextureMem__10ps2Display",
        Ok(
            "ps2Display::GetFreeTextureMem(void)",
        ),
    ),
    (
        "GetTextureMemoryStart__10ps2Display",
        Ok(
            "ps2Display::GetTextureMemoryStart(void)",
        ),
    ),
    (
        "SetTextureMemoryStart__10ps2DisplayUi",
        Ok(
            "ps2Display::SetTextureMemoryStart(unsigned int)",
        ),
    ),
    (
        "GetTextureMemoryEnd__10ps2Display",
        Ok(
            "ps2Display::GetTextureMemoryEnd(void)",
        ),
    ),
    (
        "SetTextureMemoryEnd__10ps2DisplayUi",
        Ok(
            "ps2Display::SetTextureMemoryEnd(unsigned int)",
        ),
    ),
    (
        "GetTextureMemoryFree__10ps2Display",
        Ok(
            "ps2Display::GetTextureMemoryFree(void)",
        ),
    ),
    (
        "__13ps2VertexListR18pddiPrimBufferDesc",
        Ok(
            "ps2VertexList::ps2VertexList(pddiPrimBufferDesc &)",
        ),
    ),
    (
        "_$_13ps2VertexList",
        Ok(
            "ps2VertexList::~ps2VertexList(void)",
        ),
    ),
    (
        "SetIndices__13ps2VertexListPUsi",
        Ok(
            "ps2VertexList::SetIndices(unsigned short *, int)",
        ),
    ),
    (
        "WriteComponent__13ps2VertexListR9VifStreamPQ218RadicalMathLibrary6VectoriUiQ23VIF12UnpackFormat",
        Ok(
            "ps2VertexList::WriteComponent(VifStream &, RadicalMathLibrary::Vector *, int, unsigned int, VIF::UnpackFormat)",
        ),
    ),
    (
        "WriteComponent__13ps2VertexListR9VifStreamPQ218RadicalMathLibrary7Vector2iUiQ23VIF12UnpackFormat",
        Ok(
            "ps2VertexList::WriteComponent(VifStream &, RadicalMathLibrary::Vector2 *, int, unsigned int, VIF::UnpackFormat)",
        ),
    ),
    (
        "WriteComponent__13ps2VertexListR9VifStreamP10pddiColouriUiQ23VIF12UnpackFormatb",
        Ok(
            "ps2VertexList::WriteComponent(VifStream &, pddiColour *, int, unsigned int, VIF::UnpackFormat, bool)",
        ),
    ),
    (
        "WritePositions__13ps2VertexListR9VifStreamPQ213ps2VertexList8PositioniUi",
        Ok(
            "ps2VertexList::WritePositions(VifStream &, ps2VertexList::Position *, int, unsigned int)",
        ),
    ),
    (
        "WriteMatrixIndices__13ps2VertexListR9VifStreamPQ213ps2VertexList13MatrixIndicesiUiUi",
        Ok(
            "ps2VertexList::WriteMatrixIndices(VifStream &, ps2VertexList::MatrixIndices *, int, unsigned int, unsigned int)",
        ),
    ),
    (
        "WriteSkinWeights__13ps2VertexListR9VifStreamPQ213ps2VertexList11SkinWeightsiUi",
        Ok(
            "ps2VertexList::WriteSkinWeights(VifStream &, ps2VertexList::SkinWeights *, int, unsigned int)",
        ),
    ),
    (
        "QuadPartitionVU__13ps2VertexListPQ213ps2VertexList16VUMemDescriptionPQ213ps2VertexList11VUMemLayout",
        Ok(
            "ps2VertexList::QuadPartitionVU(ps2VertexList::VUMemDescription *, ps2VertexList::VUMemLayout *)",
        ),
    ),
    (
        "DeIndex__13ps2VertexList",
        Ok(
            "ps2VertexList::DeIndex(void)",
        ),
    ),
    (
        "ComputeDMASize__13ps2VertexListR18pddiPrimBufferDescRQ213ps2VertexList11VUMemLayoutRUiT3",
        Ok(
            "ps2VertexList::ComputeDMASize(pddiPrimBufferDesc &, ps2VertexList::VUMemLayout &, unsigned int &, unsigned int &)",
        ),
    ),
    (
        "WritePacketHeader__13ps2VertexListR9VifStreami",
        Ok(
            "ps2VertexList::WritePacketHeader(VifStream &, int)",
        ),
    ),
    (
        "CreateDMABuffer__13ps2VertexListR18pddiPrimBufferDescPvRUi",
        Ok(
            "ps2VertexList::CreateDMABuffer(pddiPrimBufferDesc &, void *, unsigned int &)",
        ),
    ),
    (
        "ComputeOneBoneRLE__13ps2VertexListPQ213ps2VertexList13MatrixIndicesUi",
        Ok(
            "ps2VertexList::ComputeOneBoneRLE(ps2VertexList::MatrixIndices *, unsigned int)",
        ),
    ),
    (
        "__13ps2PrimBufferP10ps2ContextP18pddiPrimBufferDesc",
        Ok(
            "ps2PrimBuffer::ps2PrimBuffer(ps2Context *, pddiPrimBufferDesc *)",
        ),
    ),
    (
        "_$_13ps2PrimBuffer",
        Ok(
            "ps2PrimBuffer::~ps2PrimBuffer(void)",
        ),
    ),
    (
        "LockMemImage__13ps2PrimBufferUi",
        Ok(
            "ps2PrimBuffer::LockMemImage(unsigned int)",
        ),
    ),
    (
        "UnlockMemImage__13ps2PrimBuffer",
        Ok(
            "ps2PrimBuffer::UnlockMemImage(void)",
        ),
    ),
    (
        "SetMemImageParam__13ps2PrimBufferUiUi",
        Ok(
            "ps2PrimBuffer::SetMemImageParam(unsigned int, unsigned int)",
        ),
    ),
    (
        "SetIndices__13ps2PrimBufferPUsi",
        Ok(
            "ps2PrimBuffer::SetIndices(unsigned short *, int)",
        ),
    ),
    (
        "Lock__13ps2PrimBuffer",
        Ok(
            "ps2PrimBuffer::Lock(void)",
        ),
    ),
    (
        "Unlock__13ps2PrimBufferP20pddiPrimBufferStream",
        Ok(
            "ps2PrimBuffer::Unlock(pddiPrimBufferStream *)",
        ),
    ),
    (
        "ChooseSkinningAddress__13ps2PrimBuffer",
        Ok(
            "ps2PrimBuffer::ChooseSkinningAddress(void)",
        ),
    ),
    (
        "Finalize__13ps2PrimBuffer",
        Ok(
            "ps2PrimBuffer::Finalize(void)",
        ),
    ),
    (
        "__tf14pddiPrimBuffer",
        Ok(
            "pddiPrimBuffer type_info function",
        ),
    ),
    (
        "__tf13ps2PrimBuffer",
        Ok(
            "ps2PrimBuffer type_info function",
        ),
    ),
    (
        "__20pddiPrimBufferStream",
        Ok(
            "pddiPrimBufferStream::pddiPrimBufferStream(void)",
        ),
    ),
    (
        "Binormal__20pddiPrimBufferStreamfff",
        Ok(
            "pddiPrimBufferStream::Binormal(float, float, float)",
        ),
    ),
    (
        "Tangent__20pddiPrimBufferStreamfff",
        Ok(
            "pddiPrimBufferStream::Tangent(float, float, float)",
        ),
    ),
    (
        "__14pddiPrimBuffer",
        Ok(
            "pddiPrimBuffer::pddiPrimBuffer(void)",
        ),
    ),
    (
        "Finalize__14pddiPrimBuffer",
        Ok(
            "pddiPrimBuffer::Finalize(void)",
        ),
    ),
    (
        "SetMemImageParam__14pddiPrimBufferUiUi",
        Ok(
            "pddiPrimBuffer::SetMemImageParam(unsigned int, unsigned int)",
        ),
    ),
    (
        "SetUsedSize__14pddiPrimBufferi",
        Ok(
            "pddiPrimBuffer::SetUsedSize(int)",
        ),
    ),
    (
        "_$_14pddiPrimBuffer",
        Ok(
            "pddiPrimBuffer::~pddiPrimBuffer(void)",
        ),
    ),
    (
        "GetPrimCount__13ps2PrimBuffer",
        Ok(
            "ps2PrimBuffer::GetPrimCount(void)",
        ),
    ),
    (
        "LockIndexBuffer__13ps2PrimBuffer",
        Ok(
            "ps2PrimBuffer::LockIndexBuffer(void)",
        ),
    ),
    (
        "UnlockIndexBuffer__13ps2PrimBufferi",
        Ok(
            "ps2PrimBuffer::UnlockIndexBuffer(int)",
        ),
    ),
    (
        "CheckMemImageVersion__13ps2PrimBufferi",
        Ok(
            "ps2PrimBuffer::CheckMemImageVersion(int)",
        ),
    ),
    (
        "SetUsedSize__13ps2PrimBufferi",
        Ok(
            "ps2PrimBuffer::SetUsedSize(int)",
        ),
    ),
    (
        "Position__13ps2PrimBufferfff",
        Ok(
            "ps2PrimBuffer::Position(float, float, float)",
        ),
    ),
    (
        "Normal__13ps2PrimBufferfff",
        Ok(
            "ps2PrimBuffer::Normal(float, float, float)",
        ),
    ),
    (
        "Colour__13ps2PrimBufferG10pddiColouri",
        Ok(
            "ps2PrimBuffer::Colour(pddiColour, int)",
        ),
    ),
    (
        "TexCoord4__13ps2PrimBufferffffi",
        Ok(
            "ps2PrimBuffer::TexCoord4(float, float, float, float, int)",
        ),
    ),
    (
        "TexCoord1__13ps2PrimBufferfi",
        Ok(
            "ps2PrimBuffer::TexCoord1(float, int)",
        ),
    ),
    (
        "TexCoord2__13ps2PrimBufferffi",
        Ok(
            "ps2PrimBuffer::TexCoord2(float, float, int)",
        ),
    ),
    (
        "TexCoord3__13ps2PrimBufferfffi",
        Ok(
            "ps2PrimBuffer::TexCoord3(float, float, float, int)",
        ),
    ),
    (
        "Specular__13ps2PrimBufferG10pddiColour",
        Ok(
            "ps2PrimBuffer::Specular(pddiColour)",
        ),
    ),
    (
        "SkinIndices__13ps2PrimBufferUiUiUiUi",
        Ok(
            "ps2PrimBuffer::SkinIndices(unsigned int, unsigned int, unsigned int, unsigned int)",
        ),
    ),
    (
        "SkinWeights__13ps2PrimBufferfff",
        Ok(
            "ps2PrimBuffer::SkinWeights(float, float, float)",
        ),
    ),
    (
        "Vertex__13ps2PrimBufferPQ218RadicalMathLibrary6VectorG10pddiColour",
        Ok(
            "ps2PrimBuffer::Vertex(RadicalMathLibrary::Vector *, pddiColour)",
        ),
    ),
    (
        "Vertex__13ps2PrimBufferPQ218RadicalMathLibrary6VectorT1",
        Ok(
            "ps2PrimBuffer::Vertex(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "Vertex__13ps2PrimBufferPQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary7Vector2",
        Ok(
            "ps2PrimBuffer::Vertex(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector2 *)",
        ),
    ),
    (
        "Vertex__13ps2PrimBufferPQ218RadicalMathLibrary6VectorG10pddiColourPQ218RadicalMathLibrary7Vector2",
        Ok(
            "ps2PrimBuffer::Vertex(RadicalMathLibrary::Vector *, pddiColour, RadicalMathLibrary::Vector2 *)",
        ),
    ),
    (
        "Vertex__13ps2PrimBufferPQ218RadicalMathLibrary6VectorT1PQ218RadicalMathLibrary7Vector2",
        Ok(
            "ps2PrimBuffer::Vertex(RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector *, RadicalMathLibrary::Vector2 *)",
        ),
    ),
    (
        "Next__13ps2PrimBuffer",
        Ok(
            "ps2PrimBuffer::Next(void)",
        ),
    ),
    (
        "__tf20pddiPrimBufferStream",
        Ok(
            "pddiPrimBufferStream type_info function",
        ),
    ),
    (
        "Install__14ps2ErrorShader",
        Ok(
            "ps2ErrorShader::Install(void)",
        ),
    ),
    (
        "__14ps2ErrorShaderP10ps2Context",
        Ok(
            "ps2ErrorShader::ps2ErrorShader(ps2Context *)",
        ),
    ),
    (
        "Validate__14ps2ErrorShaderUi",
        Ok(
            "ps2ErrorShader::Validate(unsigned int)",
        ),
    ),
    (
        "Bind__14ps2ErrorShaderP9GSContextR9VifStream",
        Ok(
            "ps2ErrorShader::Bind(GSContext *, VifStream &)",
        ),
    ),
    (
        "__tf14ps2ErrorShader",
        Ok(
            "ps2ErrorShader type_info function",
        ),
    ),
    (
        "CloneSimple__10pddiShader",
        Ok(
            "pddiShader::CloneSimple(void)",
        ),
    ),
    (
        "__9ps2Shader",
        Ok(
            "ps2Shader::ps2Shader(void)",
        ),
    ),
    (
        "GetType__14ps2ErrorShader",
        Ok(
            "ps2ErrorShader::GetType(void)",
        ),
    ),
    (
        "_$_14ps2ErrorShader",
        Ok(
            "ps2ErrorShader::~ps2ErrorShader(void)",
        ),
    ),
    (
        "__tf9ps2Shader",
        Ok(
            "ps2Shader type_info function",
        ),
    ),
    (
        "__10pddiShader",
        Ok(
            "pddiShader::pddiShader(void)",
        ),
    ),
    (
        "_$_9ps2Shader",
        Ok(
            "ps2Shader::~ps2Shader(void)",
        ),
    ),
    (
        "__tf10pddiShader",
        Ok(
            "pddiShader type_info function",
        ),
    ),
    (
        "_$_10pddiShader",
        Ok(
            "pddiShader::~pddiShader(void)",
        ),
    ),
    (
        "Install__16ps2LayeredShader",
        Ok(
            "ps2LayeredShader::Install(void)",
        ),
    ),
    (
        "__16ps2LayeredShaderP10ps2Context",
        Ok(
            "ps2LayeredShader::ps2LayeredShader(ps2Context *)",
        ),
    ),
    (
        "SetTopTex__16ps2LayeredShaderP11pddiTexture",
        Ok(
            "ps2LayeredShader::SetTopTex(pddiTexture *)",
        ),
    ),
    (
        "_$_16ps2LayeredShader",
        Ok(
            "ps2LayeredShader::~ps2LayeredShader(void)",
        ),
    ),
    (
        "__tf16ps2LayeredShader",
        Ok(
            "ps2LayeredShader type_info function",
        ),
    ),
    (
        "GetType__16ps2LayeredShader",
        Ok(
            "ps2LayeredShader::GetType(void)",
        ),
    ),
    (
        "Install__17ps2LightmapShader",
        Ok(
            "ps2LightmapShader::Install(void)",
        ),
    ),
    (
        "__17ps2LightmapShaderP10ps2Context",
        Ok(
            "ps2LightmapShader::ps2LightmapShader(ps2Context *)",
        ),
    ),
    (
        "_$_17ps2LightmapShader",
        Ok(
            "ps2LightmapShader::~ps2LightmapShader(void)",
        ),
    ),
    (
        "Reset__17ps2LightmapShader",
        Ok(
            "ps2LightmapShader::Reset(void)",
        ),
    ),
    (
        "Validate__17ps2LightmapShaderUi",
        Ok(
            "ps2LightmapShader::Validate(unsigned int)",
        ),
    ),
    (
        "Bind__17ps2LightmapShaderP9GSContextR9VifStream",
        Ok(
            "ps2LightmapShader::Bind(GSContext *, VifStream &)",
        ),
    ),
    (
        "SetBase__17ps2LightmapShaderP11pddiTexture",
        Ok(
            "ps2LightmapShader::SetBase(pddiTexture *)",
        ),
    ),
    (
        "SetLightmap__17ps2LightmapShaderP11pddiTexture",
        Ok(
            "ps2LightmapShader::SetLightmap(pddiTexture *)",
        ),
    ),
    (
        "SetTexture__17ps2LightmapShaderP11pddiTexturei",
        Ok(
            "ps2LightmapShader::SetTexture(pddiTexture *, int)",
        ),
    ),
    (
        "SetUVMode__17ps2LightmapShaderi",
        Ok(
            "ps2LightmapShader::SetUVMode(int)",
        ),
    ),
    (
        "SetFilterMode__17ps2LightmapShaderi",
        Ok(
            "ps2LightmapShader::SetFilterMode(int)",
        ),
    ),
    (
        "SetBlendMode__17ps2LightmapShaderi",
        Ok(
            "ps2LightmapShader::SetBlendMode(int)",
        ),
    ),
    (
        "EnableTwoLayerCBV__17ps2LightmapShaderi",
        Ok(
            "ps2LightmapShader::EnableTwoLayerCBV(int)",
        ),
    ),
    (
        "__tf17ps2LightmapShader",
        Ok(
            "ps2LightmapShader type_info function",
        ),
    ),
    (
        "GetType__17ps2LightmapShader",
        Ok(
            "ps2LightmapShader::GetType(void)",
        ),
    ),
    (
        "GetTextureTable__17ps2LightmapShader",
        Ok(
            "ps2LightmapShader::GetTextureTable(void)",
        ),
    ),
    (
        "GetIntTable__17ps2LightmapShader",
        Ok(
            "ps2LightmapShader::GetIntTable(void)",
        ),
    ),
    (
        "SetTopTex__17ps2LightmapShaderP11pddiTexture",
        Ok(
            "ps2LightmapShader::SetTopTex(pddiTexture *)",
        ),
    ),
    (
        "Install__20ps2LightweightShader",
        Ok(
            "ps2LightweightShader::Install(void)",
        ),
    ),
    (
        "__20ps2LightweightShaderP10ps2Context",
        Ok(
            "ps2LightweightShader::ps2LightweightShader(ps2Context *)",
        ),
    ),
    (
        "_$_20ps2LightweightShader",
        Ok(
            "ps2LightweightShader::~ps2LightweightShader(void)",
        ),
    ),
    (
        "Validate__20ps2LightweightShaderUi",
        Ok(
            "ps2LightweightShader::Validate(unsigned int)",
        ),
    ),
    (
        "Bind__20ps2LightweightShaderP9GSContextR9VifStream",
        Ok(
            "ps2LightweightShader::Bind(GSContext *, VifStream &)",
        ),
    ),
    (
        "SetTexture__20ps2LightweightShaderP11pddiTexture",
        Ok(
            "ps2LightweightShader::SetTexture(pddiTexture *)",
        ),
    ),
    (
        "SetMipSharpness__20ps2LightweightShaderf",
        Ok(
            "ps2LightweightShader::SetMipSharpness(float)",
        ),
    ),
    (
        "__tf20ps2LightweightShader",
        Ok(
            "ps2LightweightShader type_info function",
        ),
    ),
    (
        "GetType__20ps2LightweightShader",
        Ok(
            "ps2LightweightShader::GetType(void)",
        ),
    ),
    (
        "GetTextureTable__20ps2LightweightShader",
        Ok(
            "ps2LightweightShader::GetTextureTable(void)",
        ),
    ),
    (
        "GetFloatTable__20ps2LightweightShader",
        Ok(
            "ps2LightweightShader::GetFloatTable(void)",
        ),
    ),
    (
        "Install__13ps2ToonShader",
        Ok(
            "ps2ToonShader::Install(void)",
        ),
    ),
    (
        "__13ps2ToonShaderP10ps2Context",
        Ok(
            "ps2ToonShader::ps2ToonShader(ps2Context *)",
        ),
    ),
    (
        "SetStyle__13ps2ToonShaderi",
        Ok(
            "ps2ToonShader::SetStyle(int)",
        ),
    ),
    (
        "SetLineWidth__13ps2ToonShaderf",
        Ok(
            "ps2ToonShader::SetLineWidth(float)",
        ),
    ),
    (
        "SetOutlineColour__13ps2ToonShaderG10pddiColour",
        Ok(
            "ps2ToonShader::SetOutlineColour(pddiColour)",
        ),
    ),
    (
        "Bind__13ps2ToonShaderP9GSContextR9VifStream",
        Ok(
            "ps2ToonShader::Bind(GSContext *, VifStream &)",
        ),
    ),
    (
        "SetBlendMode__13ps2ToonShaderi",
        Ok(
            "ps2ToonShader::SetBlendMode(int)",
        ),
    ),
    (
        "Validate__13ps2ToonShaderUi",
        Ok(
            "ps2ToonShader::Validate(unsigned int)",
        ),
    ),
    (
        "_$_13ps2ToonShader",
        Ok(
            "ps2ToonShader::~ps2ToonShader(void)",
        ),
    ),
    (
        "__tf13ps2ToonShader",
        Ok(
            "ps2ToonShader type_info function",
        ),
    ),
    (
        "GetType__13ps2ToonShader",
        Ok(
            "ps2ToonShader::GetType(void)",
        ),
    ),
    (
        "GetTextureTable__13ps2ToonShader",
        Ok(
            "ps2ToonShader::GetTextureTable(void)",
        ),
    ),
    (
        "GetIntTable__13ps2ToonShader",
        Ok(
            "ps2ToonShader::GetIntTable(void)",
        ),
    ),
    (
        "GetFloatTable__13ps2ToonShader",
        Ok(
            "ps2ToonShader::GetFloatTable(void)",
        ),
    ),
    (
        "GetColourTable__13ps2ToonShader",
        Ok(
            "ps2ToonShader::GetColourTable(void)",
        ),
    ),
    (
        "SetSpecular__13ps2ToonShaderG10pddiColour",
        Ok(
            "ps2ToonShader::SetSpecular(pddiColour)",
        ),
    ),
    (
        "SetShininess__13ps2ToonShaderf",
        Ok(
            "ps2ToonShader::SetShininess(float)",
        ),
    ),
    (
        "float_to_k__Ff",
        Ok(
            "float_to_k(float)",
        ),
    ),
    (
        "Install__15ps2SimpleShader",
        Ok(
            "ps2SimpleShader::Install(void)",
        ),
    ),
    (
        "__15ps2SimpleShaderP10ps2Context",
        Ok(
            "ps2SimpleShader::ps2SimpleShader(ps2Context *)",
        ),
    ),
    (
        "_$_15ps2SimpleShader",
        Ok(
            "ps2SimpleShader::~ps2SimpleShader(void)",
        ),
    ),
    (
        "Validate__15ps2SimpleShaderUi",
        Ok(
            "ps2SimpleShader::Validate(unsigned int)",
        ),
    ),
    (
        "Bind__15ps2SimpleShaderP9GSContextR9VifStream",
        Ok(
            "ps2SimpleShader::Bind(GSContext *, VifStream &)",
        ),
    ),
    (
        "GuessVUProgram__15ps2SimpleShader",
        Ok(
            "ps2SimpleShader::GuessVUProgram(void)",
        ),
    ),
    (
        "SetTexture__15ps2SimpleShaderP11pddiTexture",
        Ok(
            "ps2SimpleShader::SetTexture(pddiTexture *)",
        ),
    ),
    (
        "SetUVMode__15ps2SimpleShaderi",
        Ok(
            "ps2SimpleShader::SetUVMode(int)",
        ),
    ),
    (
        "SetFilterMode__15ps2SimpleShaderi",
        Ok(
            "ps2SimpleShader::SetFilterMode(int)",
        ),
    ),
    (
        "SetShadeMode__15ps2SimpleShaderi",
        Ok(
            "ps2SimpleShader::SetShadeMode(int)",
        ),
    ),
    (
        "EnableLighting__15ps2SimpleShaderi",
        Ok(
            "ps2SimpleShader::EnableLighting(int)",
        ),
    ),
    (
        "SetDiffuse__15ps2SimpleShaderG10pddiColour",
        Ok(
            "ps2SimpleShader::SetDiffuse(pddiColour)",
        ),
    ),
    (
        "SetEmissive__15ps2SimpleShaderG10pddiColour",
        Ok(
            "ps2SimpleShader::SetEmissive(pddiColour)",
        ),
    ),
    (
        "SetEmissiveAlpha__15ps2SimpleShaderi",
        Ok(
            "ps2SimpleShader::SetEmissiveAlpha(int)",
        ),
    ),
    (
        "SetSpecular__15ps2SimpleShaderG10pddiColour",
        Ok(
            "ps2SimpleShader::SetSpecular(pddiColour)",
        ),
    ),
    (
        "SetShininess__15ps2SimpleShaderf",
        Ok(
            "ps2SimpleShader::SetShininess(float)",
        ),
    ),
    (
        "SetBlendMode__15ps2SimpleShaderi",
        Ok(
            "ps2SimpleShader::SetBlendMode(int)",
        ),
    ),
    (
        "EnableAlphaTest__15ps2SimpleShaderi",
        Ok(
            "ps2SimpleShader::EnableAlphaTest(int)",
        ),
    ),
    (
        "SetAlphaCompare__15ps2SimpleShaderi",
        Ok(
            "ps2SimpleShader::SetAlphaCompare(int)",
        ),
    ),
    (
        "SetAlphaThreshold__15ps2SimpleShaderf",
        Ok(
            "ps2SimpleShader::SetAlphaThreshold(float)",
        ),
    ),
    (
        "SetMipSharpness__15ps2SimpleShaderf",
        Ok(
            "ps2SimpleShader::SetMipSharpness(float)",
        ),
    ),
    (
        "CopySettings__15ps2SimpleShaderRC15ps2SimpleShader",
        Ok(
            "ps2SimpleShader::CopySettings(ps2SimpleShader const &)",
        ),
    ),
    (
        "__tf15ps2SimpleShader",
        Ok(
            "ps2SimpleShader type_info function",
        ),
    ),
    (
        "GetType__15ps2SimpleShader",
        Ok(
            "ps2SimpleShader::GetType(void)",
        ),
    ),
    (
        "GetTextureTable__15ps2SimpleShader",
        Ok(
            "ps2SimpleShader::GetTextureTable(void)",
        ),
    ),
    (
        "GetIntTable__15ps2SimpleShader",
        Ok(
            "ps2SimpleShader::GetIntTable(void)",
        ),
    ),
    (
        "GetFloatTable__15ps2SimpleShader",
        Ok(
            "ps2SimpleShader::GetFloatTable(void)",
        ),
    ),
    (
        "GetColourTable__15ps2SimpleShader",
        Ok(
            "ps2SimpleShader::GetColourTable(void)",
        ),
    ),
    (
        "Install__19ps2RefractionShader",
        Ok(
            "ps2RefractionShader::Install(void)",
        ),
    ),
    (
        "__19ps2RefractionShaderP10ps2Context",
        Ok(
            "ps2RefractionShader::ps2RefractionShader(ps2Context *)",
        ),
    ),
    (
        "_$_19ps2RefractionShader",
        Ok(
            "ps2RefractionShader::~ps2RefractionShader(void)",
        ),
    ),
    (
        "SetRefractionIndex__19ps2RefractionShaderf",
        Ok(
            "ps2RefractionShader::SetRefractionIndex(float)",
        ),
    ),
    (
        "SetRefractionColour__19ps2RefractionShaderG10pddiColour",
        Ok(
            "ps2RefractionShader::SetRefractionColour(pddiColour)",
        ),
    ),
    (
        "LowQuality__19ps2RefractionShaderb",
        Ok(
            "ps2RefractionShader::LowQuality(bool)",
        ),
    ),
    (
        "SetRefractionBlend__19ps2RefractionShaderf",
        Ok(
            "ps2RefractionShader::SetRefractionBlend(float)",
        ),
    ),
    (
        "Bind__19ps2RefractionShaderP9GSContextR9VifStream",
        Ok(
            "ps2RefractionShader::Bind(GSContext *, VifStream &)",
        ),
    ),
    (
        "Validate__19ps2RefractionShaderUi",
        Ok(
            "ps2RefractionShader::Validate(unsigned int)",
        ),
    ),
    (
        "CloneSimple__19ps2RefractionShader",
        Ok(
            "ps2RefractionShader::CloneSimple(void)",
        ),
    ),
    (
        "RefractionShadersLoaded__19ps2RefractionShader",
        Ok(
            "ps2RefractionShader::RefractionShadersLoaded(void)",
        ),
    ),
    (
        "__tf19ps2RefractionShader",
        Ok(
            "ps2RefractionShader type_info function",
        ),
    ),
    (
        "GetType__19ps2RefractionShader",
        Ok(
            "ps2RefractionShader::GetType(void)",
        ),
    ),
    (
        "GetTextureTable__19ps2RefractionShader",
        Ok(
            "ps2RefractionShader::GetTextureTable(void)",
        ),
    ),
    (
        "GetIntTable__19ps2RefractionShader",
        Ok(
            "ps2RefractionShader::GetIntTable(void)",
        ),
    ),
    (
        "GetFloatTable__19ps2RefractionShader",
        Ok(
            "ps2RefractionShader::GetFloatTable(void)",
        ),
    ),
    (
        "GetColourTable__19ps2RefractionShader",
        Ok(
            "ps2RefractionShader::GetColourTable(void)",
        ),
    ),
    (
        "Install__19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader::Install(void)",
        ),
    ),
    (
        "__19ps2ReflectionShaderP10ps2ContextQ219ps2ReflectionShader16ReflectionMethod",
        Ok(
            "ps2ReflectionShader::ps2ReflectionShader(ps2Context *, ps2ReflectionShader::ReflectionMethod)",
        ),
    ),
    (
        "_$_19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader::~ps2ReflectionShader(void)",
        ),
    ),
    (
        "Reset__19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader::Reset(void)",
        ),
    ),
    (
        "Validate__19ps2ReflectionShaderUi",
        Ok(
            "ps2ReflectionShader::Validate(unsigned int)",
        ),
    ),
    (
        "Bind__19ps2ReflectionShaderP9GSContextR9VifStream",
        Ok(
            "ps2ReflectionShader::Bind(GSContext *, VifStream &)",
        ),
    ),
    (
        "SetBase__19ps2ReflectionShaderP11pddiTexture",
        Ok(
            "ps2ReflectionShader::SetBase(pddiTexture *)",
        ),
    ),
    (
        "SetReflectionMap__19ps2ReflectionShaderP11pddiTexture",
        Ok(
            "ps2ReflectionShader::SetReflectionMap(pddiTexture *)",
        ),
    ),
    (
        "SetTexture__19ps2ReflectionShaderP11pddiTexturei",
        Ok(
            "ps2ReflectionShader::SetTexture(pddiTexture *, int)",
        ),
    ),
    (
        "SetUVMode__19ps2ReflectionShaderi",
        Ok(
            "ps2ReflectionShader::SetUVMode(int)",
        ),
    ),
    (
        "SetFilterMode__19ps2ReflectionShaderi",
        Ok(
            "ps2ReflectionShader::SetFilterMode(int)",
        ),
    ),
    (
        "SetBlendMode__19ps2ReflectionShaderi",
        Ok(
            "ps2ReflectionShader::SetBlendMode(int)",
        ),
    ),
    (
        "EnableTwoLayerCBV__19ps2ReflectionShaderi",
        Ok(
            "ps2ReflectionShader::EnableTwoLayerCBV(int)",
        ),
    ),
    (
        "EnableLighting__19ps2ReflectionShaderi",
        Ok(
            "ps2ReflectionShader::EnableLighting(int)",
        ),
    ),
    (
        "SetDiffuse__19ps2ReflectionShaderG10pddiColour",
        Ok(
            "ps2ReflectionShader::SetDiffuse(pddiColour)",
        ),
    ),
    (
        "SetEmissive__19ps2ReflectionShaderG10pddiColour",
        Ok(
            "ps2ReflectionShader::SetEmissive(pddiColour)",
        ),
    ),
    (
        "SetSpecular__19ps2ReflectionShaderG10pddiColour",
        Ok(
            "ps2ReflectionShader::SetSpecular(pddiColour)",
        ),
    ),
    (
        "SetEnvBlend__19ps2ReflectionShaderG10pddiColour",
        Ok(
            "ps2ReflectionShader::SetEnvBlend(pddiColour)",
        ),
    ),
    (
        "SetShininess__19ps2ReflectionShaderf",
        Ok(
            "ps2ReflectionShader::SetShininess(float)",
        ),
    ),
    (
        "SetRotVect__19ps2ReflectionShaderRCQ218RadicalMathLibrary6Vector",
        Ok(
            "ps2ReflectionShader::SetRotVect(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "__tf19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader type_info function",
        ),
    ),
    (
        "GetType__19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader::GetType(void)",
        ),
    ),
    (
        "GetTextureTable__19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader::GetTextureTable(void)",
        ),
    ),
    (
        "GetIntTable__19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader::GetIntTable(void)",
        ),
    ),
    (
        "GetFloatTable__19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader::GetFloatTable(void)",
        ),
    ),
    (
        "GetColourTable__19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader::GetColourTable(void)",
        ),
    ),
    (
        "GetVectorTable__19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader::GetVectorTable(void)",
        ),
    ),
    (
        "Install__15ps2ShadowShader",
        Ok(
            "ps2ShadowShader::Install(void)",
        ),
    ),
    (
        "__15ps2ShadowShaderP10ps2Context",
        Ok(
            "ps2ShadowShader::ps2ShadowShader(ps2Context *)",
        ),
    ),
    (
        "_$_15ps2ShadowShader",
        Ok(
            "ps2ShadowShader::~ps2ShadowShader(void)",
        ),
    ),
    (
        "Validate__15ps2ShadowShaderUi",
        Ok(
            "ps2ShadowShader::Validate(unsigned int)",
        ),
    ),
    (
        "Bind__15ps2ShadowShaderP9GSContextR9VifStream",
        Ok(
            "ps2ShadowShader::Bind(GSContext *, VifStream &)",
        ),
    ),
    (
        "__tf15ps2ShadowShader",
        Ok(
            "ps2ShadowShader type_info function",
        ),
    ),
    (
        "GetType__15ps2ShadowShader",
        Ok(
            "ps2ShadowShader::GetType(void)",
        ),
    ),
    (
        "__13ps2PrimStream",
        Ok(
            "ps2PrimStream::ps2PrimStream(void)",
        ),
    ),
    (
        "Begin__13ps2PrimStreamP10ps2Context12pddiPrimTypeUiUi",
        Ok(
            "ps2PrimStream::Begin(ps2Context *, pddiPrimType, unsigned int, unsigned int)",
        ),
    ),
    (
        "End__13ps2PrimStream",
        Ok(
            "ps2PrimStream::End(void)",
        ),
    ),
    (
        "NewPacket__13ps2PrimStreamP9VifStream",
        Ok(
            "ps2PrimStream::NewPacket(VifStream *)",
        ),
    ),
    (
        "Flush__13ps2PrimStream",
        Ok(
            "ps2PrimStream::Flush(void)",
        ),
    ),
    (
        "NextBuffer__13ps2PrimStream",
        Ok(
            "ps2PrimStream::NextBuffer(void)",
        ),
    ),
    (
        "GetPrimCount__13ps2PrimStream",
        Ok(
            "ps2PrimStream::GetPrimCount(void)",
        ),
    ),
    (
        "GetVertexCount__13ps2PrimStream",
        Ok(
            "ps2PrimStream::GetVertexCount(void)",
        ),
    ),
    (
        "__10ps2TextureP10ps2Context",
        Ok(
            "ps2Texture::ps2Texture(ps2Context *)",
        ),
    ),
    (
        "_$_10ps2Texture",
        Ok(
            "ps2Texture::~ps2Texture(void)",
        ),
    ),
    (
        "NextVramOffset__10ps2TextureUiUiUi",
        Ok(
            "ps2Texture::NextVramOffset(unsigned int, unsigned int, unsigned int)",
        ),
    ),
    (
        "VramAlloc__10ps2TextureUiUiUiUiPUsT5b",
        Ok(
            "ps2Texture::VramAlloc(unsigned int, unsigned int, unsigned int, unsigned int, unsigned short *, unsigned short *, bool)",
        ),
    ),
    (
        "SetPalette__10ps2TextureiP10pddiColour",
        Ok(
            "ps2Texture::SetPalette(int, pddiColour *)",
        ),
    ),
    (
        "Create__10ps2Textureiiiii15pddiTextureType20pddiTextureUsageHint",
        Ok(
            "ps2Texture::Create(int, int, int, int, int, pddiTextureType, pddiTextureUsageHint)",
        ),
    ),
    (
        "SetVideoMemoryAddress__10ps2TextureUi",
        Ok(
            "ps2Texture::SetVideoMemoryAddress(unsigned int)",
        ),
    ),
    (
        "BuildDmaChain__10ps2Texture",
        Ok(
            "ps2Texture::BuildDmaChain(void)",
        ),
    ),
    (
        "AddToPacket__C10ps2TexturePUi",
        Ok(
            "ps2Texture::AddToPacket(unsigned int *) const",
        ),
    ),
    (
        "Lock__10ps2TextureiP8pddiRect",
        Ok(
            "ps2Texture::Lock(int, pddiRect *)",
        ),
    ),
    (
        "Unlock__10ps2Texturei",
        Ok(
            "ps2Texture::Unlock(int)",
        ),
    ),
    (
        "__tf11pddiTexture",
        Ok(
            "pddiTexture type_info function",
        ),
    ),
    (
        "__tf10ps2Texture",
        Ok(
            "ps2Texture type_info function",
        ),
    ),
    (
        "__11pddiTexture",
        Ok(
            "pddiTexture::pddiTexture(void)",
        ),
    ),
    (
        "SetCompressedData__11pddiTextureiPCci",
        Ok(
            "pddiTexture::SetCompressedData(int, char const *, int)",
        ),
    ),
    (
        "_$_11pddiTexture",
        Ok(
            "pddiTexture::~pddiTexture(void)",
        ),
    ),
    (
        "GetPixelFormat__10ps2Texture",
        Ok(
            "ps2Texture::GetPixelFormat(void)",
        ),
    ),
    (
        "GetWidth__10ps2Texture",
        Ok(
            "ps2Texture::GetWidth(void)",
        ),
    ),
    (
        "GetHeight__10ps2Texture",
        Ok(
            "ps2Texture::GetHeight(void)",
        ),
    ),
    (
        "GetDepth__10ps2Texture",
        Ok(
            "ps2Texture::GetDepth(void)",
        ),
    ),
    (
        "GetNumMipMaps__10ps2Texture",
        Ok(
            "ps2Texture::GetNumMipMaps(void)",
        ),
    ),
    (
        "GetAlphaDepth__10ps2Texture",
        Ok(
            "ps2Texture::GetAlphaDepth(void)",
        ),
    ),
    (
        "GetNumPaletteEntries__10ps2Texture",
        Ok(
            "ps2Texture::GetNumPaletteEntries(void)",
        ),
    ),
    (
        "GetPalette__10ps2TextureP10pddiColour",
        Ok(
            "ps2Texture::GetPalette(pddiColour *)",
        ),
    ),
    (
        "SetPriority__10ps2Texturei",
        Ok(
            "ps2Texture::SetPriority(int)",
        ),
    ),
    (
        "GetPriority__10ps2Texture",
        Ok(
            "ps2Texture::GetPriority(void)",
        ),
    ),
    (
        "Prefetch__10ps2Texture",
        Ok(
            "ps2Texture::Prefetch(void)",
        ),
    ),
    (
        "Discard__10ps2Texture",
        Ok(
            "ps2Texture::Discard(void)",
        ),
    ),
    (
        "VIF1Handler",
        Err(
            NotMangled,
        ),
    ),
    (
        "__11ps2TexCacheUiUiP10ps2Context",
        Ok(
            "ps2TexCache::ps2TexCache(unsigned int, unsigned int, ps2Context *)",
        ),
    ),
    (
        "_$_11ps2TexCache",
        Ok(
            "ps2TexCache::~ps2TexCache(void)",
        ),
    ),
    (
        "AllocateCache__11ps2TexCacheP10ps2Texture",
        Ok(
            "ps2TexCache::AllocateCache(ps2Texture *)",
        ),
    ),
    (
        "AllocRaw__11ps2TexCacheii",
        Ok(
            "ps2TexCache::AllocRaw(int, int)",
        ),
    ),
    (
        "Insert__11ps2TexCacheP10ps2Texture",
        Ok(
            "ps2TexCache::Insert(ps2Texture *)",
        ),
    ),
    (
        "Fill__11ps2TexCacheUiUiP10ps2Texture",
        Ok(
            "ps2TexCache::Fill(unsigned int, unsigned int, ps2Texture *)",
        ),
    ),
    (
        "Overlapping__C11ps2TexCachePC10ps2TextureT1",
        Ok(
            "ps2TexCache::Overlapping(ps2Texture const *, ps2Texture const *) const",
        ),
    ),
    (
        "ResolveCacheConflict__11ps2TexCacheP10ps2TextureT1",
        Ok(
            "ps2TexCache::ResolveCacheConflict(ps2Texture *, ps2Texture *)",
        ),
    ),
    (
        "InvalidateTexCache__11ps2TexCache",
        Ok(
            "ps2TexCache::InvalidateTexCache(void)",
        ),
    ),
    (
        "EnsureResident__11ps2TexCacheR9VifStreamP10ps2Texture",
        Ok(
            "ps2TexCache::EnsureResident(VifStream &, ps2Texture *)",
        ),
    ),
    (
        "EnsureResident__11ps2TexCacheR9VifStreamP10ps2TextureT2",
        Ok(
            "ps2TexCache::EnsureResident(VifStream &, ps2Texture *, ps2Texture *)",
        ),
    ),
    (
        "EvictTex__11ps2TexCacheP10ps2Texture",
        Ok(
            "ps2TexCache::EvictTex(ps2Texture *)",
        ),
    ),
    (
        "Disable__11ps2TexCacheb",
        Ok(
            "ps2TexCache::Disable(bool)",
        ),
    ),
    (
        "__tf11ps2TexCache",
        Ok(
            "ps2TexCache type_info function",
        ),
    ),
    (
        "__7ps2VramP10ps2Context",
        Ok(
            "ps2Vram::ps2Vram(ps2Context *)",
        ),
    ),
    (
        "BuildGifStrips__7ps2VramR9VifStreamb",
        Ok(
            "ps2Vram::BuildGifStrips(VifStream &, bool)",
        ),
    ),
    (
        "BuildGifStrips__7ps2VramR9VifStreamRCQ27ps2Vram7TexRect",
        Ok(
            "ps2Vram::BuildGifStrips(VifStream &, ps2Vram::TexRect const &)",
        ),
    ),
    (
        "BlitBackToFront__7ps2Vram",
        Ok(
            "ps2Vram::BlitBackToFront(void)",
        ),
    ),
    (
        "BlitBackToTexture__7ps2VramUiUiG10pddiColour",
        Ok(
            "ps2Vram::BlitBackToTexture(unsigned int, unsigned int, pddiColour)",
        ),
    ),
    (
        "DownsampleBackbuffer__7ps2VramPC8pddiRecti",
        Ok(
            "ps2Vram::DownsampleBackbuffer(pddiRect const *, int)",
        ),
    ),
    (
        "ps2VuCodeInit__Fv",
        Ok(
            "ps2VuCodeInit(void)",
        ),
    ),
    (
        "Sync__15pddiRenderStateP17pddiRenderContext",
        Ok(
            "pddiRenderState::Sync(pddiRenderContext *)",
        ),
    ),
    (
        "Sync__13pddiViewStateP17pddiRenderContext",
        Ok(
            "pddiViewState::Sync(pddiRenderContext *)",
        ),
    ),
    (
        "Sync__17pddiLightingStateP17pddiRenderContext",
        Ok(
            "pddiLightingState::Sync(pddiRenderContext *)",
        ),
    ),
    (
        "Sync__12pddiFogStateP17pddiRenderContext",
        Ok(
            "pddiFogState::Sync(pddiRenderContext *)",
        ),
    ),
    (
        "Sync__16pddiStencilStateP17pddiRenderContext",
        Ok(
            "pddiStencilState::Sync(pddiRenderContext *)",
        ),
    ),
    (
        "__15pddiBaseContextP11pddiDisplayP10pddiDevice",
        Ok(
            "pddiBaseContext::pddiBaseContext(pddiDisplay *, pddiDevice *)",
        ),
    ),
    (
        "_$_15pddiBaseContext",
        Ok(
            "pddiBaseContext::~pddiBaseContext(void)",
        ),
    ),
    (
        "DefaultState__15pddiBaseContext",
        Ok(
            "pddiBaseContext::DefaultState(void)",
        ),
    ),
    (
        "SyncState__15pddiBaseContextUi",
        Ok(
            "pddiBaseContext::SyncState(unsigned int)",
        ),
    ),
    (
        "BuildStateStacks__15pddiBaseContext",
        Ok(
            "pddiBaseContext::BuildStateStacks(void)",
        ),
    ),
    (
        "ResetStats__15pddiBaseContext",
        Ok(
            "pddiBaseContext::ResetStats(void)",
        ),
    ),
    (
        "ComputeFrameStats__15pddiBaseContext",
        Ok(
            "pddiBaseContext::ComputeFrameStats(void)",
        ),
    ),
    (
        "BuildMatrixStacks__15pddiBaseContext",
        Ok(
            "pddiBaseContext::BuildMatrixStacks(void)",
        ),
    ),
    (
        "DisplayStats__15pddiBaseContext",
        Ok(
            "pddiBaseContext::DisplayStats(void)",
        ),
    ),
    (
        "BeginFrame__15pddiBaseContext",
        Ok(
            "pddiBaseContext::BeginFrame(void)",
        ),
    ),
    (
        "EndFrame__15pddiBaseContext",
        Ok(
            "pddiBaseContext::EndFrame(void)",
        ),
    ),
    (
        "SetClearColour__15pddiBaseContextG10pddiColour",
        Ok(
            "pddiBaseContext::SetClearColour(pddiColour)",
        ),
    ),
    (
        "GetClearColour__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetClearColour(void)",
        ),
    ),
    (
        "SetClearDepth__15pddiBaseContextf",
        Ok(
            "pddiBaseContext::SetClearDepth(float)",
        ),
    ),
    (
        "GetClearDepth__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetClearDepth(void)",
        ),
    ),
    (
        "SetClearStencil__15pddiBaseContextUi",
        Ok(
            "pddiBaseContext::SetClearStencil(unsigned int)",
        ),
    ),
    (
        "GetClearStencil__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetClearStencil(void)",
        ),
    ),
    (
        "Clear__15pddiBaseContextUi",
        Ok(
            "pddiBaseContext::Clear(unsigned int)",
        ),
    ),
    (
        "IdentityMatrix__15pddiBaseContext14pddiMatrixType",
        Ok(
            "pddiBaseContext::IdentityMatrix(pddiMatrixType)",
        ),
    ),
    (
        "LoadMatrix__15pddiBaseContext14pddiMatrixTypePQ218RadicalMathLibrary6Matrix",
        Ok(
            "pddiBaseContext::LoadMatrix(pddiMatrixType, RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "PushMatrix__15pddiBaseContext14pddiMatrixType",
        Ok(
            "pddiBaseContext::PushMatrix(pddiMatrixType)",
        ),
    ),
    (
        "PopMatrix__15pddiBaseContext14pddiMatrixType",
        Ok(
            "pddiBaseContext::PopMatrix(pddiMatrixType)",
        ),
    ),
    (
        "MultMatrix__15pddiBaseContext14pddiMatrixTypePQ218RadicalMathLibrary6Matrix",
        Ok(
            "pddiBaseContext::MultMatrix(pddiMatrixType, RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "ScaleMatrix__15pddiBaseContext14pddiMatrixTypefff",
        Ok(
            "pddiBaseContext::ScaleMatrix(pddiMatrixType, float, float, float)",
        ),
    ),
    (
        "GetMatrix__15pddiBaseContext14pddiMatrixType",
        Ok(
            "pddiBaseContext::GetMatrix(pddiMatrixType)",
        ),
    ),
    (
        "PushIdentityMatrix__15pddiBaseContext14pddiMatrixType",
        Ok(
            "pddiBaseContext::PushIdentityMatrix(pddiMatrixType)",
        ),
    ),
    (
        "PushLoadMatrix__15pddiBaseContext14pddiMatrixTypePQ218RadicalMathLibrary6Matrix",
        Ok(
            "pddiBaseContext::PushLoadMatrix(pddiMatrixType, RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "PushMultMatrix__15pddiBaseContext14pddiMatrixTypePQ218RadicalMathLibrary6Matrix",
        Ok(
            "pddiBaseContext::PushMultMatrix(pddiMatrixType, RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "SetProjectionMode__15pddiBaseContext18pddiProjectionMode",
        Ok(
            "pddiBaseContext::SetProjectionMode(pddiProjectionMode)",
        ),
    ),
    (
        "GetProjectionMode__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetProjectionMode(void)",
        ),
    ),
    (
        "SetViewWindow__15pddiBaseContextffff",
        Ok(
            "pddiBaseContext::SetViewWindow(float, float, float, float)",
        ),
    ),
    (
        "GetViewWindow__15pddiBaseContextPfN31",
        Ok(
            "pddiBaseContext::GetViewWindow(float *, float *, float *, float *)",
        ),
    ),
    (
        "SetCamera__15pddiBaseContextffff",
        Ok(
            "pddiBaseContext::SetCamera(float, float, float, float)",
        ),
    ),
    (
        "GetCamera__15pddiBaseContextPfN31",
        Ok(
            "pddiBaseContext::GetCamera(float *, float *, float *, float *)",
        ),
    ),
    (
        "SetScissor__15pddiBaseContextP8pddiRect",
        Ok(
            "pddiBaseContext::SetScissor(pddiRect *)",
        ),
    ),
    (
        "GetScissor__15pddiBaseContextP8pddiRect",
        Ok(
            "pddiBaseContext::GetScissor(pddiRect *)",
        ),
    ),
    (
        "BeginPrims__15pddiBaseContextP10pddiShader12pddiPrimTypeUiiUi",
        Ok(
            "pddiBaseContext::BeginPrims(pddiShader *, pddiPrimType, unsigned int, int, unsigned int)",
        ),
    ),
    (
        "EndPrims__15pddiBaseContextP13ps2PrimStream",
        Ok(
            "pddiBaseContext::EndPrims(ps2PrimStream *)",
        ),
    ),
    (
        "DrawPrimBuffer__15pddiBaseContextP10pddiShaderP14pddiPrimBuffer",
        Ok(
            "pddiBaseContext::DrawPrimBuffer(pddiShader *, pddiPrimBuffer *)",
        ),
    ),
    (
        "DrawString__15pddiBaseContextPCciiG10pddiColour",
        Ok(
            "pddiBaseContext::DrawString(char const *, int, int, pddiColour)",
        ),
    ),
    (
        "GetMaxLights__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetMaxLights(void)",
        ),
    ),
    (
        "SetAmbientLight__15pddiBaseContextG10pddiColour",
        Ok(
            "pddiBaseContext::SetAmbientLight(pddiColour)",
        ),
    ),
    (
        "GetAmbientLight__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetAmbientLight(void)",
        ),
    ),
    (
        "SetLight__15pddiBaseContextiP13pddiLightDesc",
        Ok(
            "pddiBaseContext::SetLight(int, pddiLightDesc *)",
        ),
    ),
    (
        "EnableLight__15pddiBaseContextib",
        Ok(
            "pddiBaseContext::EnableLight(int, bool)",
        ),
    ),
    (
        "IsLightEnabled__15pddiBaseContexti",
        Ok(
            "pddiBaseContext::IsLightEnabled(int)",
        ),
    ),
    (
        "SetLightType__15pddiBaseContexti13pddiLightType",
        Ok(
            "pddiBaseContext::SetLightType(int, pddiLightType)",
        ),
    ),
    (
        "GetLightType__15pddiBaseContexti",
        Ok(
            "pddiBaseContext::GetLightType(int)",
        ),
    ),
    (
        "SetLightColour__15pddiBaseContextiG10pddiColour",
        Ok(
            "pddiBaseContext::SetLightColour(int, pddiColour)",
        ),
    ),
    (
        "GetLightColour__15pddiBaseContexti",
        Ok(
            "pddiBaseContext::GetLightColour(int)",
        ),
    ),
    (
        "SetLightPosition__15pddiBaseContextiPQ218RadicalMathLibrary6Vector",
        Ok(
            "pddiBaseContext::SetLightPosition(int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetLightPosition__15pddiBaseContextiPQ218RadicalMathLibrary6Vector",
        Ok(
            "pddiBaseContext::GetLightPosition(int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetLightDirection__15pddiBaseContextiPQ218RadicalMathLibrary6Vector",
        Ok(
            "pddiBaseContext::SetLightDirection(int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "GetLightDirection__15pddiBaseContextiPQ218RadicalMathLibrary6Vector",
        Ok(
            "pddiBaseContext::GetLightDirection(int, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "SetLightRange__15pddiBaseContextif",
        Ok(
            "pddiBaseContext::SetLightRange(int, float)",
        ),
    ),
    (
        "GetLightRange__15pddiBaseContexti",
        Ok(
            "pddiBaseContext::GetLightRange(int)",
        ),
    ),
    (
        "SetLightAttenuation__15pddiBaseContextifff",
        Ok(
            "pddiBaseContext::SetLightAttenuation(int, float, float, float)",
        ),
    ),
    (
        "GetLightAttenuation__15pddiBaseContextiPfN22",
        Ok(
            "pddiBaseContext::GetLightAttenuation(int, float *, float *, float *)",
        ),
    ),
    (
        "SetLightCone__15pddiBaseContextifff",
        Ok(
            "pddiBaseContext::SetLightCone(int, float, float, float)",
        ),
    ),
    (
        "GetLightCone__15pddiBaseContextiPfN22",
        Ok(
            "pddiBaseContext::GetLightCone(int, float *, float *, float *)",
        ),
    ),
    (
        "SetCullMode__15pddiBaseContext12pddiCullMode",
        Ok(
            "pddiBaseContext::SetCullMode(pddiCullMode)",
        ),
    ),
    (
        "GetCullMode__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetCullMode(void)",
        ),
    ),
    (
        "SetColourWrite__15pddiBaseContextbN31",
        Ok(
            "pddiBaseContext::SetColourWrite(bool, bool, bool, bool)",
        ),
    ),
    (
        "GetColourWrite__15pddiBaseContextPbN31",
        Ok(
            "pddiBaseContext::GetColourWrite(bool *, bool *, bool *, bool *)",
        ),
    ),
    (
        "EnableZBuffer__15pddiBaseContextb",
        Ok(
            "pddiBaseContext::EnableZBuffer(bool)",
        ),
    ),
    (
        "IsZBufferEnabled__15pddiBaseContext",
        Ok(
            "pddiBaseContext::IsZBufferEnabled(void)",
        ),
    ),
    (
        "SetZCompare__15pddiBaseContext15pddiCompareMode",
        Ok(
            "pddiBaseContext::SetZCompare(pddiCompareMode)",
        ),
    ),
    (
        "GetZCompare__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetZCompare(void)",
        ),
    ),
    (
        "SetZWrite__15pddiBaseContextb",
        Ok(
            "pddiBaseContext::SetZWrite(bool)",
        ),
    ),
    (
        "GetZWrite__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetZWrite(void)",
        ),
    ),
    (
        "SetZBias__15pddiBaseContextf",
        Ok(
            "pddiBaseContext::SetZBias(float)",
        ),
    ),
    (
        "GetZBias__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetZBias(void)",
        ),
    ),
    (
        "SetZRange__15pddiBaseContextff",
        Ok(
            "pddiBaseContext::SetZRange(float, float)",
        ),
    ),
    (
        "GetZRange__15pddiBaseContextPfT1",
        Ok(
            "pddiBaseContext::GetZRange(float *, float *)",
        ),
    ),
    (
        "EnableStencilBuffer__15pddiBaseContextb",
        Ok(
            "pddiBaseContext::EnableStencilBuffer(bool)",
        ),
    ),
    (
        "IsStencilBufferEnabled__15pddiBaseContext",
        Ok(
            "pddiBaseContext::IsStencilBufferEnabled(void)",
        ),
    ),
    (
        "SetStencilCompare__15pddiBaseContext15pddiCompareMode",
        Ok(
            "pddiBaseContext::SetStencilCompare(pddiCompareMode)",
        ),
    ),
    (
        "GetStencilCompare__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetStencilCompare(void)",
        ),
    ),
    (
        "SetStencilRef__15pddiBaseContexti",
        Ok(
            "pddiBaseContext::SetStencilRef(int)",
        ),
    ),
    (
        "GetStencilRef__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetStencilRef(void)",
        ),
    ),
    (
        "SetStencilMask__15pddiBaseContextUi",
        Ok(
            "pddiBaseContext::SetStencilMask(unsigned int)",
        ),
    ),
    (
        "GetStencilMask__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetStencilMask(void)",
        ),
    ),
    (
        "SetStencilWriteMask__15pddiBaseContextUi",
        Ok(
            "pddiBaseContext::SetStencilWriteMask(unsigned int)",
        ),
    ),
    (
        "GetStencilWriteMask__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetStencilWriteMask(void)",
        ),
    ),
    (
        "SetStencilOp__15pddiBaseContext13pddiStencilOpN21",
        Ok(
            "pddiBaseContext::SetStencilOp(pddiStencilOp, pddiStencilOp, pddiStencilOp)",
        ),
    ),
    (
        "GetStencilOp__15pddiBaseContextP13pddiStencilOpN21",
        Ok(
            "pddiBaseContext::GetStencilOp(pddiStencilOp *, pddiStencilOp *, pddiStencilOp *)",
        ),
    ),
    (
        "SetFillMode__15pddiBaseContext12pddiFillMode",
        Ok(
            "pddiBaseContext::SetFillMode(pddiFillMode)",
        ),
    ),
    (
        "GetFillMode__15pddiBaseContext",
        Ok(
            "pddiBaseContext::GetFillMode(void)",
        ),
    ),
    (
        "EnableFog__15pddiBaseContextb",
        Ok(
            "pddiBaseContext::EnableFog(bool)",
        ),
    ),
    (
        "IsFogEnabled__15pddiBaseContext",
        Ok(
            "pddiBaseContext::IsFogEnabled(void)",
        ),
    ),
    (
        "SetFog__15pddiBaseContextG10pddiColourff",
        Ok(
            "pddiBaseContext::SetFog(pddiColour, float, float)",
        ),
    ),
    (
        "GetFog__15pddiBaseContextP10pddiColourPfT2",
        Ok(
            "pddiBaseContext::GetFog(pddiColour *, float *, float *)",
        ),
    ),
    (
        "GetIntStat__15pddiBaseContext12pddiStatType",
        Ok(
            "pddiBaseContext::GetIntStat(pddiStatType)",
        ),
    ),
    (
        "GetFloatStat__15pddiBaseContext12pddiStatType",
        Ok(
            "pddiBaseContext::GetFloatStat(pddiStatType)",
        ),
    ),
    (
        "EnableStatsOverlay__15pddiBaseContextb",
        Ok(
            "pddiBaseContext::EnableStatsOverlay(bool)",
        ),
    ),
    (
        "IsStatsOverlayEnabled__15pddiBaseContext",
        Ok(
            "pddiBaseContext::IsStatsOverlayEnabled(void)",
        ),
    ),
    (
        "PushState__15pddiBaseContext13pddiStateMask",
        Ok(
            "pddiBaseContext::PushState(pddiStateMask)",
        ),
    ),
    (
        "PopState__15pddiBaseContext13pddiStateMask",
        Ok(
            "pddiBaseContext::PopState(pddiStateMask)",
        ),
    ),
    (
        "pddiMemRegAlloc__FPvUi",
        Ok(
            "pddiMemRegAlloc(void *, unsigned int)",
        ),
    ),
    (
        "pddiMemRegFree__FPv",
        Ok(
            "pddiMemRegFree(void *)",
        ),
    ),
    (
        "SetMessageCallback__10pddiDevicePQ210pddiDevice15MessageCallback",
        Ok(
            "pddiDevice::SetMessageCallback(pddiDevice::MessageCallback *)",
        ),
    ),
    (
        "GetExtension__15pddiBaseContextUi",
        Ok(
            "pddiBaseContext::GetExtension(unsigned int)",
        ),
    ),
    (
        "VerifyExtension__15pddiBaseContextUi",
        Ok(
            "pddiBaseContext::VerifyExtension(unsigned int)",
        ),
    ),
    (
        "__22pddiExtMemRegistration",
        Ok(
            "pddiExtMemRegistration::pddiExtMemRegistration(void)",
        ),
    ),
    (
        "__23_pddiExtMemRegistration",
        Ok(
            "_pddiExtMemRegistration::_pddiExtMemRegistration(void)",
        ),
    ),
    (
        "_$_23_pddiExtMemRegistration",
        Ok(
            "_pddiExtMemRegistration::~_pddiExtMemRegistration(void)",
        ),
    ),
    (
        "__tf10pddiDevice",
        Ok(
            "pddiDevice type_info function",
        ),
    ),
    (
        "__tf17pddiRenderContext",
        Ok(
            "pddiRenderContext type_info function",
        ),
    ),
    (
        "__tft9pddiStack1ZQ218RadicalMathLibrary6Matrix",
        Ok(
            "pddiStack<RadicalMathLibrary::Matrix> type_info function",
        ),
    ),
    (
        "__tf15pddiMatrixStack",
        Ok(
            "pddiMatrixStack type_info function",
        ),
    ),
    (
        "__tf15pddiRenderState",
        Ok(
            "pddiRenderState type_info function",
        ),
    ),
    (
        "__tf13pddiViewState",
        Ok(
            "pddiViewState type_info function",
        ),
    ),
    (
        "__tf17pddiLightingState",
        Ok(
            "pddiLightingState type_info function",
        ),
    ),
    (
        "__tf12pddiFogState",
        Ok(
            "pddiFogState type_info function",
        ),
    ),
    (
        "__tf16pddiStencilState",
        Ok(
            "pddiStencilState type_info function",
        ),
    ),
    (
        "__tf15pddiBaseContext",
        Ok(
            "pddiBaseContext type_info function",
        ),
    ),
    (
        "__tft9pddiStack1Z13pddiViewState",
        Ok(
            "pddiStack<pddiViewState> type_info function",
        ),
    ),
    (
        "__tft9pddiStack1Z15pddiRenderState",
        Ok(
            "pddiStack<pddiRenderState> type_info function",
        ),
    ),
    (
        "__tft9pddiStack1Z17pddiLightingState",
        Ok(
            "pddiStack<pddiLightingState> type_info function",
        ),
    ),
    (
        "__tft9pddiStack1Z12pddiFogState",
        Ok(
            "pddiStack<pddiFogState> type_info function",
        ),
    ),
    (
        "__tft9pddiStack1Z16pddiStencilState",
        Ok(
            "pddiStack<pddiStencilState> type_info function",
        ),
    ),
    (
        "_$_10pddiDevice",
        Ok(
            "pddiDevice::~pddiDevice(void)",
        ),
    ),
    (
        "__17pddiRenderContext",
        Ok(
            "pddiRenderContext::pddiRenderContext(void)",
        ),
    ),
    (
        "_$_17pddiRenderContext",
        Ok(
            "pddiRenderContext::~pddiRenderContext(void)",
        ),
    ),
    (
        "__13pddiExtension",
        Ok(
            "pddiExtension::pddiExtension(void)",
        ),
    ),
    (
        "_$_15pddiMatrixStack",
        Ok(
            "pddiMatrixStack::~pddiMatrixStack(void)",
        ),
    ),
    (
        "_$_t9pddiStack1ZQ218RadicalMathLibrary6Matrix",
        Ok(
            "pddiStack<RadicalMathLibrary::Matrix>::~pddiStack(void)",
        ),
    ),
    (
        "__15pddiRenderState",
        Ok(
            "pddiRenderState::pddiRenderState(void)",
        ),
    ),
    (
        "__13pddiViewState",
        Ok(
            "pddiViewState::pddiViewState(void)",
        ),
    ),
    (
        "__17pddiLightingState",
        Ok(
            "pddiLightingState::pddiLightingState(void)",
        ),
    ),
    (
        "__12pddiFogState",
        Ok(
            "pddiFogState::pddiFogState(void)",
        ),
    ),
    (
        "__16pddiStencilState",
        Ok(
            "pddiStencilState::pddiStencilState(void)",
        ),
    ),
    (
        "DrawSync__15pddiBaseContext",
        Ok(
            "pddiBaseContext::DrawSync(void)",
        ),
    ),
    (
        "SetRenderTarget__15pddiBaseContextP11pddiTexture",
        Ok(
            "pddiBaseContext::SetRenderTarget(pddiTexture *)",
        ),
    ),
    (
        "Screenshot__15pddiBaseContextP10pddiColouri",
        Ok(
            "pddiBaseContext::Screenshot(pddiColour *, int)",
        ),
    ),
    (
        "_$_t9pddiStack1Z13pddiViewState",
        Ok(
            "pddiStack<pddiViewState>::~pddiStack(void)",
        ),
    ),
    (
        "_$_t9pddiStack1Z15pddiRenderState",
        Ok(
            "pddiStack<pddiRenderState>::~pddiStack(void)",
        ),
    ),
    (
        "_$_t9pddiStack1Z17pddiLightingState",
        Ok(
            "pddiStack<pddiLightingState>::~pddiStack(void)",
        ),
    ),
    (
        "_$_t9pddiStack1Z12pddiFogState",
        Ok(
            "pddiStack<pddiFogState>::~pddiStack(void)",
        ),
    ),
    (
        "_$_t9pddiStack1Z16pddiStencilState",
        Ok(
            "pddiStack<pddiStencilState>::~pddiStack(void)",
        ),
    ),
    (
        "__tf13pddiExtension",
        Ok(
            "pddiExtension type_info function",
        ),
    ),
    (
        "__tf22pddiExtMemRegistration",
        Ok(
            "pddiExtMemRegistration type_info function",
        ),
    ),
    (
        "__tf9pddiState",
        Ok(
            "pddiState type_info function",
        ),
    ),
    (
        "__tf23_pddiExtMemRegistration",
        Ok(
            "_pddiExtMemRegistration type_info function",
        ),
    ),
    (
        "_$_13pddiExtension",
        Ok(
            "pddiExtension::~pddiExtension(void)",
        ),
    ),
    (
        "_$_22pddiExtMemRegistration",
        Ok(
            "pddiExtMemRegistration::~pddiExtMemRegistration(void)",
        ),
    ),
    (
        "__9pddiLight",
        Ok(
            "pddiLight::pddiLight(void)",
        ),
    ),
    (
        "__9pddiState",
        Ok(
            "pddiState::pddiState(void)",
        ),
    ),
    (
        "Register__23_pddiExtMemRegistrationPQ222pddiExtMemRegistration8CallBack",
        Ok(
            "_pddiExtMemRegistration::Register(pddiExtMemRegistration::CallBack *)",
        ),
    ),
    (
        "_GLOBAL_$I$Sync__15pddiRenderStateP17pddiRenderContext",
        Ok(
            "global constructors keyed to pddiRenderState::Sync(pddiRenderContext *)",
        ),
    ),
    (
        "_GLOBAL_$D$Sync__15pddiRenderStateP17pddiRenderContext",
        Ok(
            "global destructors keyed to pddiRenderState::Sync(pddiRenderContext *)",
        ),
    ),
    (
        "SetTexture__14pddiBaseShaderUiP11pddiTexture",
        Ok(
            "pddiBaseShader::SetTexture(unsigned int, pddiTexture *)",
        ),
    ),
    (
        "SetInt__14pddiBaseShaderUii",
        Ok(
            "pddiBaseShader::SetInt(unsigned int, int)",
        ),
    ),
    (
        "SetFloat__14pddiBaseShaderUif",
        Ok(
            "pddiBaseShader::SetFloat(unsigned int, float)",
        ),
    ),
    (
        "SetColour__14pddiBaseShaderUiG10pddiColour",
        Ok(
            "pddiBaseShader::SetColour(unsigned int, pddiColour)",
        ),
    ),
    (
        "SetVector__14pddiBaseShaderUiRCQ218RadicalMathLibrary6Vector",
        Ok(
            "pddiBaseShader::SetVector(unsigned int, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetMatrix__14pddiBaseShaderUiRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "pddiBaseShader::SetMatrix(unsigned int, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "InstallShader__14pddiBaseShaderPCcPFP17pddiRenderContextPCcPCc_P14pddiBaseShaderT1",
        Ok(
            "pddiBaseShader::InstallShader(char const *, pddiBaseShader *(*)(pddiRenderContext *, char const *, char const *), char const *)",
        ),
    ),
    (
        "AllocateShader__14pddiBaseShaderP17pddiRenderContextPCcT2",
        Ok(
            "pddiBaseShader::AllocateShader(pddiRenderContext *, char const *, char const *)",
        ),
    ),
    (
        "__tf14pddiBaseShader",
        Ok(
            "pddiBaseShader type_info function",
        ),
    ),
    (
        "_$_14pddiBaseShader",
        Ok(
            "pddiBaseShader::~pddiBaseShader(void)",
        ),
    ),
    (
        "GetTextureTable__14pddiBaseShader",
        Ok(
            "pddiBaseShader::GetTextureTable(void)",
        ),
    ),
    (
        "GetIntTable__14pddiBaseShader",
        Ok(
            "pddiBaseShader::GetIntTable(void)",
        ),
    ),
    (
        "GetFloatTable__14pddiBaseShader",
        Ok(
            "pddiBaseShader::GetFloatTable(void)",
        ),
    ),
    (
        "GetColourTable__14pddiBaseShader",
        Ok(
            "pddiBaseShader::GetColourTable(void)",
        ),
    ),
    (
        "GetVectorTable__14pddiBaseShader",
        Ok(
            "pddiBaseShader::GetVectorTable(void)",
        ),
    ),
    (
        "GetMatrixTable__14pddiBaseShader",
        Ok(
            "pddiBaseShader::GetMatrixTable(void)",
        ),
    ),
    (
        "StoreTextureVIF1__FPUxsssssss",
        Ok(
            "StoreTextureVIF1(unsigned long long *, short, short, short, short, short, short, short)",
        ),
    ),
    (
        "malloc_temp__2EEi",
        Ok(
            "EE::malloc_temp(int)",
        ),
    ),
    (
        "free_temp__2EEPv",
        Ok(
            "EE::free_temp(void *)",
        ),
    ),
    (
        "__8pddiFontP17pddiRenderContext",
        Ok(
            "pddiFont::pddiFont(pddiRenderContext *)",
        ),
    ),
    (
        "_$_8pddiFont",
        Ok(
            "pddiFont::~pddiFont(void)",
        ),
    ),
    (
        "Print__8pddiFontPCciifG10pddiColour",
        Ok(
            "pddiFont::Print(char const *, int, int, float, pddiColour)",
        ),
    ),
    (
        "__8ps2MFIFOi",
        Ok(
            "ps2MFIFO::ps2MFIFO(int)",
        ),
    ),
    (
        "Enable__8ps2MFIFOb",
        Ok(
            "ps2MFIFO::Enable(bool)",
        ),
    ),
    (
        "FlushSPR__8ps2MFIFO",
        Ok(
            "ps2MFIFO::FlushSPR(void)",
        ),
    ),
    (
        "Flush__8ps2MFIFO",
        Ok(
            "ps2MFIFO::Flush(void)",
        ),
    ),
    (
        "Add__8ps2MFIFOPvUi",
        Ok(
            "ps2MFIFO::Add(void *, unsigned int)",
        ),
    ),
    (
        "__10pddiObject",
        Ok(
            "pddiObject::pddiObject(void)",
        ),
    ),
    (
        "_$_10pddiObject",
        Ok(
            "pddiObject::~pddiObject(void)",
        ),
    ),
    (
        "AddRef__10pddiObject",
        Ok(
            "pddiObject::AddRef(void)",
        ),
    ),
    (
        "Release__10pddiObject",
        Ok(
            "pddiObject::Release(void)",
        ),
    ),
    (
        "GetLastError__10pddiObject",
        Ok(
            "pddiObject::GetLastError(void)",
        ),
    ),
    (
        "__tf10pddiObject",
        Ok(
            "pddiObject type_info function",
        ),
    ),
    (
        "Unpack__9VifStreamUiUiUiPvQ23VIF17UnpackAddressMode",
        Ok(
            "VifStream::Unpack(unsigned int, unsigned int, unsigned int, void *, VIF::UnpackAddressMode)",
        ),
    ),
    (
        "__10ps2ContextP11pddiDisplayP10pddiDevice",
        Ok(
            "ps2Context::ps2Context(pddiDisplay *, pddiDevice *)",
        ),
    ),
    (
        "_$_10ps2Context",
        Ok(
            "ps2Context::~ps2Context(void)",
        ),
    ),
    (
        "RemoveIntc__10ps2Context",
        Ok(
            "ps2Context::RemoveIntc(void)",
        ),
    ),
    (
        "AddIntc__10ps2Context",
        Ok(
            "ps2Context::AddIntc(void)",
        ),
    ),
    (
        "DisplayReset__10ps2Context",
        Ok(
            "ps2Context::DisplayReset(void)",
        ),
    ),
    (
        "ClearVRAM__10ps2ContextUcUcUcUc",
        Ok(
            "ps2Context::ClearVRAM(unsigned char, unsigned char, unsigned char, unsigned char)",
        ),
    ),
    (
        "LoadMicrocode__10ps2Context",
        Ok(
            "ps2Context::LoadMicrocode(void)",
        ),
    ),
    (
        "GetFreeMicrocodeAddress__10ps2Context",
        Ok(
            "ps2Context::GetFreeMicrocodeAddress(void)",
        ),
    ),
    (
        "SyncScratchPad__10ps2Context",
        Ok(
            "ps2Context::SyncScratchPad(void)",
        ),
    ),
    (
        "Clear__10ps2ContextUi",
        Ok(
            "ps2Context::Clear(unsigned int)",
        ),
    ),
    (
        "BeginFrame__10ps2Context",
        Ok(
            "ps2Context::BeginFrame(void)",
        ),
    ),
    (
        "EndFrame__10ps2Context",
        Ok(
            "ps2Context::EndFrame(void)",
        ),
    ),
    (
        "BeginTiming__10ps2Context",
        Ok(
            "ps2Context::BeginTiming(void)",
        ),
    ),
    (
        "EndTiming__10ps2Context",
        Ok(
            "ps2Context::EndTiming(void)",
        ),
    ),
    (
        "SyncGSPath__10ps2Context",
        Ok(
            "ps2Context::SyncGSPath(void)",
        ),
    ),
    (
        "WaitVSync__10ps2Context",
        Ok(
            "ps2Context::WaitVSync(void)",
        ),
    ),
    (
        "SetGSRegister__10ps2ContextUlUl",
        Ok(
            "ps2Context::SetGSRegister(unsigned long, unsigned long)",
        ),
    ),
    (
        "LoadHardwareMatrix__10ps2Context14pddiMatrixType",
        Ok(
            "ps2Context::LoadHardwareMatrix(pddiMatrixType)",
        ),
    ),
    (
        "SetupHardwareProjection__10ps2ContextPC13pddiViewStateff",
        Ok(
            "ps2Context::SetupHardwareProjection(pddiViewState const *, float, float)",
        ),
    ),
    (
        "SetupHardwareLight__10ps2Contexti",
        Ok(
            "ps2Context::SetupHardwareLight(int)",
        ),
    ),
    (
        "LazyStateSet__10ps2Context",
        Ok(
            "ps2Context::LazyStateSet(void)",
        ),
    ),
    (
        "SetZRange__10ps2Contextff",
        Ok(
            "ps2Context::SetZRange(float, float)",
        ),
    ),
    (
        "SetViewWindow__10ps2Contextffff",
        Ok(
            "ps2Context::SetViewWindow(float, float, float, float)",
        ),
    ),
    (
        "SetColourWrite__10ps2ContextbN31",
        Ok(
            "ps2Context::SetColourWrite(bool, bool, bool, bool)",
        ),
    ),
    (
        "EnableZBuffer__10ps2Contextb",
        Ok(
            "ps2Context::EnableZBuffer(bool)",
        ),
    ),
    (
        "SetZWrite__10ps2Contextb",
        Ok(
            "ps2Context::SetZWrite(bool)",
        ),
    ),
    (
        "SetDestAlphaTest__10ps2Context20ps2DestAlphaTestMode",
        Ok(
            "ps2Context::SetDestAlphaTest(ps2DestAlphaTestMode)",
        ),
    ),
    (
        "SetFog__10ps2ContextG10pddiColourff",
        Ok(
            "ps2Context::SetFog(pddiColour, float, float)",
        ),
    ),
    (
        "SetZCompare__10ps2Context15pddiCompareMode",
        Ok(
            "ps2Context::SetZCompare(pddiCompareMode)",
        ),
    ),
    (
        "SetCullMode__10ps2Context12pddiCullMode",
        Ok(
            "ps2Context::SetCullMode(pddiCullMode)",
        ),
    ),
    (
        "GetCullMode__10ps2Context",
        Ok(
            "ps2Context::GetCullMode(void)",
        ),
    ),
    (
        "SetAmbientLight__10ps2ContextG10pddiColour",
        Ok(
            "ps2Context::SetAmbientLight(pddiColour)",
        ),
    ),
    (
        "EnableClipper__10ps2Contextb",
        Ok(
            "ps2Context::EnableClipper(bool)",
        ),
    ),
    (
        "DrawPrimBuffer__10ps2ContextP10pddiShaderP14pddiPrimBuffer",
        Ok(
            "ps2Context::DrawPrimBuffer(pddiShader *, pddiPrimBuffer *)",
        ),
    ),
    (
        "BeginPrims__10ps2ContextP10pddiShader12pddiPrimTypeUiiUi",
        Ok(
            "ps2Context::BeginPrims(pddiShader *, pddiPrimType, unsigned int, int, unsigned int)",
        ),
    ),
    (
        "EndPrims__10ps2ContextP13ps2PrimStream",
        Ok(
            "ps2Context::EndPrims(ps2PrimStream *)",
        ),
    ),
    (
        "RebuildTransformContext__10ps2ContextPC13pddiViewStateff",
        Ok(
            "ps2Context::RebuildTransformContext(pddiViewState const *, float, float)",
        ),
    ),
    (
        "GetScissorRegion__10ps2ContextPiN31",
        Ok(
            "ps2Context::GetScissorRegion(int *, int *, int *, int *)",
        ),
    ),
    (
        "PreMultiplyLights__10ps2ContextPC21ps2LightingProperties",
        Ok(
            "ps2Context::PreMultiplyLights(ps2LightingProperties const *)",
        ),
    ),
    (
        "GetExtension__10ps2ContextUi",
        Ok(
            "ps2Context::GetExtension(unsigned int)",
        ),
    ),
    (
        "VerifyExtension__10ps2ContextUi",
        Ok(
            "ps2Context::VerifyExtension(unsigned int)",
        ),
    ),
    (
        "DrawSync__10ps2Context",
        Ok(
            "ps2Context::DrawSync(void)",
        ),
    ),
    (
        "HardwareZbufferFog__10ps2Contextiiiiff",
        Ok(
            "ps2Context::HardwareZbufferFog(int, int, int, int, float, float)",
        ),
    ),
    (
        "SetShadowColour__10ps2Contextiiii",
        Ok(
            "ps2Context::SetShadowColour(int, int, int, int)",
        ),
    ),
    (
        "SwirlyEffect__10ps2Contextfffi",
        Ok(
            "ps2Context::SwirlyEffect(float, float, float, int)",
        ),
    ),
    (
        "PreSwapProcess__10ps2ContextUii",
        Ok(
            "ps2Context::PreSwapProcess(unsigned int, int)",
        ),
    ),
    (
        "ClearDestAlpha__10ps2ContextPC8pddiRect",
        Ok(
            "ps2Context::ClearDestAlpha(pddiRect const *)",
        ),
    ),
    (
        "SampleDestAlphaAndFill__10ps2ContextPC8pddiRect",
        Ok(
            "ps2Context::SampleDestAlphaAndFill(pddiRect const *)",
        ),
    ),
    (
        "TransformToScreen__10ps2ContextPCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "ps2Context::TransformToScreen(RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "MotionBlur__10ps2ContextUiUiPC8pddiRectT3",
        Ok(
            "ps2Context::MotionBlur(unsigned int, unsigned int, pddiRect const *, pddiRect const *)",
        ),
    ),
    (
        "RenderMotionBlur__10ps2Context",
        Ok(
            "ps2Context::RenderMotionBlur(void)",
        ),
    ),
    (
        "GetBackBufferVRAM__10ps2Context",
        Ok(
            "ps2Context::GetBackBufferVRAM(void)",
        ),
    ),
    (
        "__tf10ps2Context",
        Ok(
            "ps2Context type_info function",
        ),
    ),
    (
        "__tf16ps2ExtPS2Control",
        Ok(
            "ps2ExtPS2Control type_info function",
        ),
    ),
    (
        "__tf24ps2ExtFramebufferEffects",
        Ok(
            "ps2ExtFramebufferEffects type_info function",
        ),
    ),
    (
        "__25pddiExtFramebufferEffects",
        Ok(
            "pddiExtFramebufferEffects::pddiExtFramebufferEffects(void)",
        ),
    ),
    (
        "__17pddiExtPS2Control",
        Ok(
            "pddiExtPS2Control::pddiExtPS2Control(void)",
        ),
    ),
    (
        "GetMaxLights__10ps2Context",
        Ok(
            "ps2Context::GetMaxLights(void)",
        ),
    ),
    (
        "GetMaxTextureDimension__10ps2Context",
        Ok(
            "ps2Context::GetMaxTextureDimension(void)",
        ),
    ),
    (
        "SetupHardwareProjection__10ps2Context",
        Ok(
            "ps2Context::SetupHardwareProjection(void)",
        ),
    ),
    (
        "_$_16ps2ExtPS2Control",
        Ok(
            "ps2ExtPS2Control::~ps2ExtPS2Control(void)",
        ),
    ),
    (
        "LoadMicrocode__16ps2ExtPS2Control",
        Ok(
            "ps2ExtPS2Control::LoadMicrocode(void)",
        ),
    ),
    (
        "GetFreeMicrocodeAddress__16ps2ExtPS2Control",
        Ok(
            "ps2ExtPS2Control::GetFreeMicrocodeAddress(void)",
        ),
    ),
    (
        "SyncScratchPad__16ps2ExtPS2Control",
        Ok(
            "ps2ExtPS2Control::SyncScratchPad(void)",
        ),
    ),
    (
        "EnableClipper__16ps2ExtPS2Controlb",
        Ok(
            "ps2ExtPS2Control::EnableClipper(bool)",
        ),
    ),
    (
        "SetDestAlphaTest__16ps2ExtPS2Control20ps2DestAlphaTestMode",
        Ok(
            "ps2ExtPS2Control::SetDestAlphaTest(ps2DestAlphaTestMode)",
        ),
    ),
    (
        "ClearVRAM__16ps2ExtPS2ControlUcUcUcUc",
        Ok(
            "ps2ExtPS2Control::ClearVRAM(unsigned char, unsigned char, unsigned char, unsigned char)",
        ),
    ),
    (
        "EnableMotionBlur__16ps2ExtPS2Controlbfff",
        Ok(
            "ps2ExtPS2Control::EnableMotionBlur(bool, float, float, float)",
        ),
    ),
    (
        "EnableFSAA__16ps2ExtPS2Controli",
        Ok(
            "ps2ExtPS2Control::EnableFSAA(int)",
        ),
    ),
    (
        "BeginStencilPass__16ps2ExtPS2Controli",
        Ok(
            "ps2ExtPS2Control::BeginStencilPass(int)",
        ),
    ),
    (
        "EndStencilPass__16ps2ExtPS2Controli",
        Ok(
            "ps2ExtPS2Control::EndStencilPass(int)",
        ),
    ),
    (
        "HardwareZbufferFog__16ps2ExtPS2Controliiiiff",
        Ok(
            "ps2ExtPS2Control::HardwareZbufferFog(int, int, int, int, float, float)",
        ),
    ),
    (
        "SetShadowColour__16ps2ExtPS2Controliiii",
        Ok(
            "ps2ExtPS2Control::SetShadowColour(int, int, int, int)",
        ),
    ),
    (
        "SwirlyEffect__16ps2ExtPS2Controlfffi",
        Ok(
            "ps2ExtPS2Control::SwirlyEffect(float, float, float, int)",
        ),
    ),
    (
        "InvalidateTexCache__16ps2ExtPS2Control",
        Ok(
            "ps2ExtPS2Control::InvalidateTexCache(void)",
        ),
    ),
    (
        "AddVU1Program__16ps2ExtPS2ControlPCcUiib",
        Ok(
            "ps2ExtPS2Control::AddVU1Program(char const *, unsigned int, int, bool)",
        ),
    ),
    (
        "SetVU1CodePath__16ps2ExtPS2Controli",
        Ok(
            "ps2ExtPS2Control::SetVU1CodePath(int)",
        ),
    ),
    (
        "GetVU1ProgramAddress__16ps2ExtPS2Controli",
        Ok(
            "ps2ExtPS2Control::GetVU1ProgramAddress(int)",
        ),
    ),
    (
        "GetVU1ProgramAddress__16ps2ExtPS2ControlPCc",
        Ok(
            "ps2ExtPS2Control::GetVU1ProgramAddress(char const *)",
        ),
    ),
    (
        "GetBackBufferVRAM__16ps2ExtPS2Control",
        Ok(
            "ps2ExtPS2Control::GetBackBufferVRAM(void)",
        ),
    ),
    (
        "TransformToScreen__16ps2ExtPS2ControlPCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "ps2ExtPS2Control::TransformToScreen(RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "ClearDestAlpha__16ps2ExtPS2ControlPC8pddiRect",
        Ok(
            "ps2ExtPS2Control::ClearDestAlpha(pddiRect const *)",
        ),
    ),
    (
        "SampleDestAlphaAndFill__16ps2ExtPS2ControlPC8pddiRect",
        Ok(
            "ps2ExtPS2Control::SampleDestAlphaAndFill(pddiRect const *)",
        ),
    ),
    (
        "SetBrightness__16ps2ExtPS2ControlG10pddiColour",
        Ok(
            "ps2ExtPS2Control::SetBrightness(pddiColour)",
        ),
    ),
    (
        "EnableTextures__16ps2ExtPS2Controlb",
        Ok(
            "ps2ExtPS2Control::EnableTextures(bool)",
        ),
    ),
    (
        "DisableTexCache__16ps2ExtPS2Controlb",
        Ok(
            "ps2ExtPS2Control::DisableTexCache(bool)",
        ),
    ),
    (
        "DisplayVram__16ps2ExtPS2Control11ps2VramView",
        Ok(
            "ps2ExtPS2Control::DisplayVram(ps2VramView)",
        ),
    ),
    (
        "ForceMFIFOSync__16ps2ExtPS2Controlb",
        Ok(
            "ps2ExtPS2Control::ForceMFIFOSync(bool)",
        ),
    ),
    (
        "MFIFOEnable__16ps2ExtPS2Controlb",
        Ok(
            "ps2ExtPS2Control::MFIFOEnable(bool)",
        ),
    ),
    (
        "_$_24ps2ExtFramebufferEffects",
        Ok(
            "ps2ExtFramebufferEffects::~ps2ExtFramebufferEffects(void)",
        ),
    ),
    (
        "EnableMotionBlur__24ps2ExtFramebufferEffectsbffT1",
        Ok(
            "ps2ExtFramebufferEffects::EnableMotionBlur(bool, float, float, bool)",
        ),
    ),
    (
        "RenderMotionBlur__24ps2ExtFramebufferEffects",
        Ok(
            "ps2ExtFramebufferEffects::RenderMotionBlur(void)",
        ),
    ),
    (
        "SetQuality__24ps2ExtFramebufferEffectsQ225pddiExtFramebufferEffects7Quality",
        Ok(
            "ps2ExtFramebufferEffects::SetQuality(pddiExtFramebufferEffects::Quality)",
        ),
    ),
    (
        "__tf25pddiExtFramebufferEffects",
        Ok(
            "pddiExtFramebufferEffects type_info function",
        ),
    ),
    (
        "__tf17pddiExtPS2Control",
        Ok(
            "pddiExtPS2Control type_info function",
        ),
    ),
    (
        "_$_25pddiExtFramebufferEffects",
        Ok(
            "pddiExtFramebufferEffects::~pddiExtFramebufferEffects(void)",
        ),
    ),
    (
        "_$_17pddiExtPS2Control",
        Ok(
            "pddiExtPS2Control::~pddiExtPS2Control(void)",
        ),
    ),
    (
        "_GLOBAL_$I$GetContext__10ps2Context",
        Ok(
            "global constructors keyed to ps2Context::GetContext(void)",
        ),
    ),
    (
        "BuildPacket__16ps2MatrixPaletteRPUi",
        Ok(
            "ps2MatrixPalette::BuildPacket(unsigned int *&)",
        ),
    ),
    (
        "Init__16ps2MatrixPaletteUi",
        Ok(
            "ps2MatrixPalette::Init(unsigned int)",
        ),
    ),
    (
        "__22ps2ExtHardwareSkinningP10ps2Context",
        Ok(
            "ps2ExtHardwareSkinning::ps2ExtHardwareSkinning(ps2Context *)",
        ),
    ),
    (
        "SetMatrixCount__22ps2ExtHardwareSkinningUi",
        Ok(
            "ps2ExtHardwareSkinning::SetMatrixCount(unsigned int)",
        ),
    ),
    (
        "SetMatrix__22ps2ExtHardwareSkinningUiPQ218RadicalMathLibrary6Matrix",
        Ok(
            "ps2ExtHardwareSkinning::SetMatrix(unsigned int, RadicalMathLibrary::Matrix *)",
        ),
    ),
    (
        "Begin__22ps2ExtHardwareSkinning",
        Ok(
            "ps2ExtHardwareSkinning::Begin(void)",
        ),
    ),
    (
        "End__22ps2ExtHardwareSkinning",
        Ok(
            "ps2ExtHardwareSkinning::End(void)",
        ),
    ),
    (
        "DrawSkin__22ps2ExtHardwareSkinningP10pddiShaderP14pddiPrimBuffer",
        Ok(
            "ps2ExtHardwareSkinning::DrawSkin(pddiShader *, pddiPrimBuffer *)",
        ),
    ),
    (
        "_$_22ps2ExtHardwareSkinning",
        Ok(
            "ps2ExtHardwareSkinning::~ps2ExtHardwareSkinning(void)",
        ),
    ),
    (
        "__tf22ps2ExtHardwareSkinning",
        Ok(
            "ps2ExtHardwareSkinning type_info function",
        ),
    ),
    (
        "__23pddiExtHardwareSkinning",
        Ok(
            "pddiExtHardwareSkinning::pddiExtHardwareSkinning(void)",
        ),
    ),
    (
        "__16ps2MatrixPalette",
        Ok(
            "ps2MatrixPalette::ps2MatrixPalette(void)",
        ),
    ),
    (
        "MaxMatrixPaletteSize__22ps2ExtHardwareSkinningUi",
        Ok(
            "ps2ExtHardwareSkinning::MaxMatrixPaletteSize(unsigned int)",
        ),
    ),
    (
        "__tf23pddiExtHardwareSkinning",
        Ok(
            "pddiExtHardwareSkinning type_info function",
        ),
    ),
    (
        "_$_23pddiExtHardwareSkinning",
        Ok(
            "pddiExtHardwareSkinning::~pddiExtHardwareSkinning(void)",
        ),
    ),
    (
        "png_sig_cmp",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_zalloc",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_zfree",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_reset_crc",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_calculate_crc",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_create_info_struct",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_destroy_info_struct",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_info_init",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_info_destroy",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_io_ptr",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_error",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_warning",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_chunk_error",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_chunk_warning",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_error_fn",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_valid",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_rowbytes",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_image_width",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_image_height",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_bit_depth",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_color_type",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_interlace_type",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_PLTE",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_tRNS",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_create_struct_2",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_destroy_struct",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_destroy_struct_2",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_malloc",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_malloc_default",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_free",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_free_default",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_memcpy_check",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_memset_check",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_mem_fn",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_create_read_struct_2",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_read_info",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_read_update_info",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_read_row",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_destroy_read_struct",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_read_destroy",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_read_data",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_read_fn",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_crc_action",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_strip_16",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_strip_alpha",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_expand",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_init_read_transformations",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_read_transform_info",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_read_transformations",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_unpack",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_unshift",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_chop",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_read_swap_alpha",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_read_invert_alpha",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_read_filler",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_gray_to_rgb",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_rgb_to_gray",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_background",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_gamma",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_expand_palette",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_expand",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_dither",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_build_gamma_table",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_uint_32",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_int_32",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_get_uint_16",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_crc_read",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_crc_finish",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_crc_error",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_IHDR",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_PLTE",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_IEND",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_gAMA",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_sBIT",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_cHRM",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_sRGB",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_tRNS",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_bKGD",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_hIST",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_pHYs",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_oFFs",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_pCAL",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_tIME",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_tEXt",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_zTXt",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_handle_unknown",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_check_chunk_name",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_combine_row",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_read_interlace",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_read_filter_row",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_read_finish_row",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_read_start_row",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_bKGD",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_cHRM",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_gAMA",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_hIST",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_IHDR",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_oFFs",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_pCAL",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_pHYs",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_PLTE",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_sBIT",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_sRGB",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_sRGB_gAMA_and_cHRM",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_text",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_tIME",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_tRNS",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_bgr",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_set_filler",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_invert",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_swap",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_packswap",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_strip_filler",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_do_bgr",
        Err(
            NotMangled,
        ),
    ),
    (
        "crc32",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflateReset",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflateEnd",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflateInit2_",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflateInit_",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate",
        Err(
            NotMangled,
        ),
    ),
    (
        "zcalloc",
        Err(
            NotMangled,
        ),
    ),
    (
        "zcfree",
        Err(
            NotMangled,
        ),
    ),
    (
        "adler32",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_blocks_reset",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_blocks_new",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_blocks",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_blocks_free",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_codes_new",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_codes",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_codes_free",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_fast",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_trees_bits",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_trees_dynamic",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_trees_fixed",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_flush",
        Err(
            NotMangled,
        ),
    ),
    (
        "radMathInitialize__Fv",
        Ok(
            "radMathInitialize(void)",
        ),
    ),
    (
        "__Q218RadicalMathLibrary6Matrixffffffffffffffff",
        Ok(
            "RadicalMathLibrary::Matrix::Matrix(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)",
        ),
    ),
    (
        "Identity__Q218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Matrix::Identity(void)",
        ),
    ),
    (
        "IdentityRotation__Q218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Matrix::IdentityRotation(void)",
        ),
    ),
    (
        "IdentityTranslation__Q218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Matrix::IdentityTranslation(void)",
        ),
    ),
    (
        "IdentityProjection__Q218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Matrix::IdentityProjection(void)",
        ),
    ),
    (
        "FillRotation__Q218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary10Quaternion",
        Ok(
            "RadicalMathLibrary::Matrix::FillRotation(RadicalMathLibrary::Quaternion const &)",
        ),
    ),
    (
        "FillRotateX__Q218RadicalMathLibrary6Matrixf",
        Ok(
            "RadicalMathLibrary::Matrix::FillRotateX(float)",
        ),
    ),
    (
        "FillRotateY__Q218RadicalMathLibrary6Matrixf",
        Ok(
            "RadicalMathLibrary::Matrix::FillRotateY(float)",
        ),
    ),
    (
        "FillRotateZ__Q218RadicalMathLibrary6Matrixf",
        Ok(
            "RadicalMathLibrary::Matrix::FillRotateZ(float)",
        ),
    ),
    (
        "FillRotation__Q218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "RadicalMathLibrary::Matrix::FillRotation(RadicalMathLibrary::Vector const &, float)",
        ),
    ),
    (
        "FillRotateXYZ__Q218RadicalMathLibrary6Matrixfff",
        Ok(
            "RadicalMathLibrary::Matrix::FillRotateXYZ(float, float, float)",
        ),
    ),
    (
        "FillTranslate__Q218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary6Vector",
        Ok(
            "RadicalMathLibrary::Matrix::FillTranslate(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "FillScale__Q218RadicalMathLibrary6Matrixfff",
        Ok(
            "RadicalMathLibrary::Matrix::FillScale(float, float, float)",
        ),
    ),
    (
        "FillHeadingXZ__Q218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary6Vector",
        Ok(
            "RadicalMathLibrary::Matrix::FillHeadingXZ(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "FillHeadingYZ__Q218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary6Vector",
        Ok(
            "RadicalMathLibrary::Matrix::FillHeadingYZ(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "FillHeading__Q218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "RadicalMathLibrary::Matrix::FillHeading(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Transpose__Q218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Matrix::Transpose(void)",
        ),
    ),
    (
        "InvertOrtho__Q218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Matrix::InvertOrtho(void)",
        ),
    ),
    (
        "Invert__Q218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Matrix::Invert(void)",
        ),
    ),
    (
        "OrthoNormal__Q218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Matrix::OrthoNormal(void)",
        ),
    ),
    (
        "Transform__CQ218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "RadicalMathLibrary::Matrix::Transform(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "Transform__CQ218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary7Vector4PQ218RadicalMathLibrary7Vector4",
        Ok(
            "RadicalMathLibrary::Matrix::Transform(RadicalMathLibrary::Vector4 const &, RadicalMathLibrary::Vector4 *) const",
        ),
    ),
    (
        "RotateVector__CQ218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "RadicalMathLibrary::Matrix::RotateVector(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "Transform__CQ218RadicalMathLibrary6MatrixiPCQ218RadicalMathLibrary6VectorPQ218RadicalMathLibrary6Vector",
        Ok(
            "RadicalMathLibrary::Matrix::Transform(int, RadicalMathLibrary::Vector const *, RadicalMathLibrary::Vector *) const",
        ),
    ),
    (
        "Transform__CQ218RadicalMathLibrary6MatrixiPCQ218RadicalMathLibrary7Vector4PQ218RadicalMathLibrary7Vector4",
        Ok(
            "RadicalMathLibrary::Matrix::Transform(int, RadicalMathLibrary::Vector4 const *, RadicalMathLibrary::Vector4 *) const",
        ),
    ),
    (
        "Intersect__Q218RadicalMathLibrary5PlaneRCQ218RadicalMathLibrary6VectorT1PQ218RadicalMathLibrary6Vector",
        Ok(
            "RadicalMathLibrary::Plane::Intersect(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector *)",
        ),
    ),
    (
        "Transform__Q218RadicalMathLibrary5PlaneRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Plane::Transform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Transform__Q218RadicalMathLibrary5PlaneRCQ218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary5Plane",
        Ok(
            "RadicalMathLibrary::Plane::Transform(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Plane const &)",
        ),
    ),
    (
        "Identity__Q218RadicalMathLibrary10Quaternion",
        Ok(
            "RadicalMathLibrary::Quaternion::Identity(void)",
        ),
    ),
    (
        "Mult__Q218RadicalMathLibrary10QuaternionRCQ218RadicalMathLibrary10Quaternion",
        Ok(
            "RadicalMathLibrary::Quaternion::Mult(RadicalMathLibrary::Quaternion const &)",
        ),
    ),
    (
        "Inverse__Q218RadicalMathLibrary10Quaternion",
        Ok(
            "RadicalMathLibrary::Quaternion::Inverse(void)",
        ),
    ),
    (
        "Normalize__Q218RadicalMathLibrary10Quaternion",
        Ok(
            "RadicalMathLibrary::Quaternion::Normalize(void)",
        ),
    ),
    (
        "BuildFromAngleY__Q218RadicalMathLibrary10Quaternionf",
        Ok(
            "RadicalMathLibrary::Quaternion::BuildFromAngleY(float)",
        ),
    ),
    (
        "ConvertToMatrix__CQ218RadicalMathLibrary10QuaternionPQ218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Quaternion::ConvertToMatrix(RadicalMathLibrary::Matrix *) const",
        ),
    ),
    (
        "BuildFromMatrix__Q218RadicalMathLibrary10QuaternionRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Quaternion::BuildFromMatrix(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Slerp__Q218RadicalMathLibrary10QuaternionRCQ218RadicalMathLibrary10QuaternionT1f",
        Ok(
            "RadicalMathLibrary::Quaternion::Slerp(RadicalMathLibrary::Quaternion const &, RadicalMathLibrary::Quaternion const &, float)",
        ),
    ),
    (
        "__Q218RadicalMathLibrary10RandomizerUi",
        Ok(
            "RadicalMathLibrary::Randomizer::Randomizer(unsigned int)",
        ),
    ),
    (
        "_$_Q218RadicalMathLibrary10Randomizer",
        Ok(
            "RadicalMathLibrary::Randomizer::~Randomizer(void)",
        ),
    ),
    (
        "Seed__Q218RadicalMathLibrary10RandomizerUi",
        Ok(
            "RadicalMathLibrary::Randomizer::Seed(unsigned int)",
        ),
    ),
    (
        "Int__Q218RadicalMathLibrary10Randomizer",
        Ok(
            "RadicalMathLibrary::Randomizer::Int(void)",
        ),
    ),
    (
        "IntRanged__Q218RadicalMathLibrary10RandomizerUi",
        Ok(
            "RadicalMathLibrary::Randomizer::IntRanged(unsigned int)",
        ),
    ),
    (
        "IntRanged__Q218RadicalMathLibrary10RandomizerUiUi",
        Ok(
            "RadicalMathLibrary::Randomizer::IntRanged(unsigned int, unsigned int)",
        ),
    ),
    (
        "Float__Q218RadicalMathLibrary10Randomizer",
        Ok(
            "RadicalMathLibrary::Randomizer::Float(void)",
        ),
    ),
    (
        "FloatSigned__Q218RadicalMathLibrary10Randomizer",
        Ok(
            "RadicalMathLibrary::Randomizer::FloatSigned(void)",
        ),
    ),
    (
        "__as__Q218RadicalMathLibrary6SplineRCQ218RadicalMathLibrary6Spline",
        Ok(
            "RadicalMathLibrary::Spline::operator=(RadicalMathLibrary::Spline const &)",
        ),
    ),
    (
        "SetCntrlMesh__Q218RadicalMathLibrary6SplineQ318RadicalMathLibrary6Spline5BasisRCQ218RadicalMathLibrary6VectorN32",
        Ok(
            "RadicalMathLibrary::Spline::SetCntrlMesh(RadicalMathLibrary::Spline::Basis, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "SetCntrlMesh__Q218RadicalMathLibrary6SplineQ318RadicalMathLibrary6Spline5BasisRCQ218RadicalMathLibrary7Vector4N32",
        Ok(
            "RadicalMathLibrary::Spline::SetCntrlMesh(RadicalMathLibrary::Spline::Basis, RadicalMathLibrary::Vector4 const &, RadicalMathLibrary::Vector4 const &, RadicalMathLibrary::Vector4 const &, RadicalMathLibrary::Vector4 const &)",
        ),
    ),
    (
        "SetCntrlMesh__Q218RadicalMathLibrary6SplineQ318RadicalMathLibrary6Spline5BasisRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Spline::SetCntrlMesh(RadicalMathLibrary::Spline::Basis, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Evaluate__Q218RadicalMathLibrary6Splinef",
        Ok(
            "RadicalMathLibrary::Spline::Evaluate(float)",
        ),
    ),
    (
        "__Q218RadicalMathLibrary11SplineCurveiQ318RadicalMathLibrary6Spline5Basisb",
        Ok(
            "RadicalMathLibrary::SplineCurve::SplineCurve(int, RadicalMathLibrary::Spline::Basis, bool)",
        ),
    ),
    (
        "_$_Q218RadicalMathLibrary11SplineCurve",
        Ok(
            "RadicalMathLibrary::SplineCurve::~SplineCurve(void)",
        ),
    ),
    (
        "__as__Q218RadicalMathLibrary11SplineCurveRCQ218RadicalMathLibrary11SplineCurve",
        Ok(
            "RadicalMathLibrary::SplineCurve::operator=(RadicalMathLibrary::SplineCurve const &)",
        ),
    ),
    (
        "SetBasis__Q218RadicalMathLibrary11SplineCurveQ318RadicalMathLibrary6Spline5Basis",
        Ok(
            "RadicalMathLibrary::SplineCurve::SetBasis(RadicalMathLibrary::Spline::Basis)",
        ),
    ),
    (
        "SetNumVertices__Q218RadicalMathLibrary11SplineCurveUi",
        Ok(
            "RadicalMathLibrary::SplineCurve::SetNumVertices(unsigned int)",
        ),
    ),
    (
        "SetCntrlVertex__Q218RadicalMathLibrary11SplineCurveUiRCQ218RadicalMathLibrary6Vector",
        Ok(
            "RadicalMathLibrary::SplineCurve::SetCntrlVertex(unsigned int, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "GetEndParam__CQ218RadicalMathLibrary11SplineCurve",
        Ok(
            "RadicalMathLibrary::SplineCurve::GetEndParam(void) const",
        ),
    ),
    (
        "GetNumSegments__CQ218RadicalMathLibrary11SplineCurve",
        Ok(
            "RadicalMathLibrary::SplineCurve::GetNumSegments(void) const",
        ),
    ),
    (
        "GetCntrlVertex__Q218RadicalMathLibrary11SplineCurveUi",
        Ok(
            "RadicalMathLibrary::SplineCurve::GetCntrlVertex(unsigned int)",
        ),
    ),
    (
        "GetKnot__Q218RadicalMathLibrary11SplineCurveUi",
        Ok(
            "RadicalMathLibrary::SplineCurve::GetKnot(unsigned int)",
        ),
    ),
    (
        "LoadEvaluator__Q218RadicalMathLibrary11SplineCurveQ318RadicalMathLibrary11SplineCurve9Evaluatorf",
        Ok(
            "RadicalMathLibrary::SplineCurve::LoadEvaluator(RadicalMathLibrary::SplineCurve::Evaluator, float)",
        ),
    ),
    (
        "Evaluate__Q218RadicalMathLibrary11SplineCurvef",
        Ok(
            "RadicalMathLibrary::SplineCurve::Evaluate(float)",
        ),
    ),
    (
        "_GLOBAL_$I$_Q218RadicalMathLibrary6Spline$MBSpline",
        Ok(
            "global constructors keyed to RadicalMathLibrary::Spline::MBSpline",
        ),
    ),
    (
        "ATanCoords__18RadicalMathLibraryff",
        Ok(
            "RadicalMathLibrary::ATanCoords(float, float)",
        ),
    ),
    (
        "CartesianToPolar__18RadicalMathLibraryffPfT3",
        Ok(
            "RadicalMathLibrary::CartesianToPolar(float, float, float *, float *)",
        ),
    ),
    (
        "CartesianToSpherical__18RadicalMathLibraryfffPfN24",
        Ok(
            "RadicalMathLibrary::CartesianToSpherical(float, float, float, float *, float *, float *)",
        ),
    ),
    (
        "SphericalToCartesian__18RadicalMathLibraryfffPfN24",
        Ok(
            "RadicalMathLibrary::SphericalToCartesian(float, float, float, float *, float *, float *)",
        ),
    ),
    (
        "Equals__CQ218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6Vectorf",
        Ok(
            "RadicalMathLibrary::Vector::Equals(RadicalMathLibrary::Vector const &, float) const",
        ),
    ),
    (
        "CrossProduct__Q218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6Vector",
        Ok(
            "RadicalMathLibrary::Vector::CrossProduct(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "CrossProduct__Q218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6VectorT1",
        Ok(
            "RadicalMathLibrary::Vector::CrossProduct(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Normalize__Q218RadicalMathLibrary6Vector",
        Ok(
            "RadicalMathLibrary::Vector::Normalize(void)",
        ),
    ),
    (
        "Normalize__Q218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6Vector",
        Ok(
            "RadicalMathLibrary::Vector::Normalize(RadicalMathLibrary::Vector const &)",
        ),
    ),
    (
        "Transform__Q218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Vector::Transform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Transform__Q218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Vector::Transform(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Rotate__Q218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Vector::Rotate(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Rotate__Q218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Vector::Rotate(RadicalMathLibrary::Vector const &, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "ConvertToEulerYZX__Q218RadicalMathLibrary6VectorRCQ218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Vector::ConvertToEulerYZX(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Transform__Q218RadicalMathLibrary7Vector4RCQ218RadicalMathLibrary6Matrix",
        Ok(
            "RadicalMathLibrary::Vector4::Transform(RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "Mult__Q218RadicalMathLibrary6MatrixRCQ218RadicalMathLibrary6MatrixT1",
        Ok(
            "RadicalMathLibrary::Matrix::Mult(RadicalMathLibrary::Matrix const &, RadicalMathLibrary::Matrix const &)",
        ),
    ),
    (
        "initialize__8radmusicPQ28radmusic24stream_graph_descriptionUiUii",
        Ok(
            "radmusic::initialize(radmusic::stream_graph_description *, unsigned int, unsigned int, int)",
        ),
    ),
    (
        "terminate__8radmusicv",
        Ok(
            "radmusic::terminate(void)",
        ),
    ),
    (
        "composition_new__8radmusicv",
        Ok(
            "radmusic::composition_new(void)",
        ),
    ),
    (
        "composition_delete__8radmusicPPQ28radmusic11composition",
        Ok(
            "radmusic::composition_delete(radmusic::composition **)",
        ),
    ),
    (
        "LoadData__Q28radmusic23composition_data_loaderP13radLoadStreamiP16radLoadInventoryP9IRefCount",
        Ok(
            "radmusic::composition_data_loader::LoadData(radLoadStream *, int, radLoadInventory *, IRefCount *)",
        ),
    ),
    (
        "_$_Q28radmusic27radload_composition_adapter",
        Ok(
            "radmusic::radload_composition_adapter::~radload_composition_adapter(void)",
        ),
    ),
    (
        "LoadFile__Q28radmusic20radmusic_file_loaderP14radLoadOptionsP23radLoadUpdatableRequest",
        Ok(
            "radmusic::radmusic_file_loader::LoadFile(radLoadOptions *, radLoadUpdatableRequest *)",
        ),
    ),
    (
        "register_radload_loaders__8radmusicv",
        Ok(
            "radmusic::register_radload_loaders(void)",
        ),
    ),
    (
        "__tfQ28radmusic27radload_composition_adapter",
        Ok(
            "radmusic::radload_composition_adapter type_info function",
        ),
    ),
    (
        "_$_Q28radmusic20radmusic_file_loader",
        Ok(
            "radmusic::radmusic_file_loader::~radmusic_file_loader(void)",
        ),
    ),
    (
        "__tfQ28radmusic20radmusic_file_loader",
        Ok(
            "radmusic::radmusic_file_loader type_info function",
        ),
    ),
    (
        "_$_Q28radmusic23composition_data_loader",
        Ok(
            "radmusic::composition_data_loader::~composition_data_loader(void)",
        ),
    ),
    (
        "__tfQ28radmusic23composition_data_loader",
        Ok(
            "radmusic::composition_data_loader type_info function",
        ),
    ),
    (
        "__as__Q23odst13pointer_templ1ZQ23ods5_compRCQ23odst13pointer_templ1ZQ23ods5_comp",
        Ok(
            "ods::pointer_templ<ods::_comp>::operator=(ods::pointer_templ<ods::_comp> const &)",
        ),
    ),
    (
        "__Q28radmusic27radload_composition_adapter",
        Ok(
            "radmusic::radload_composition_adapter::radload_composition_adapter(void)",
        ),
    ),
    (
        "__Q28radmusic20radmusic_file_loader",
        Ok(
            "radmusic::radmusic_file_loader::radmusic_file_loader(void)",
        ),
    ),
    (
        "__Q28radmusic23composition_data_loader",
        Ok(
            "radmusic::composition_data_loader::composition_data_loader(void)",
        ),
    ),
    (
        "__Q28radmusic26radload_radmusic_inventory",
        Ok(
            "radmusic::radload_radmusic_inventory::radload_radmusic_inventory(void)",
        ),
    ),
    (
        "_$_Q28radmusic26radload_radmusic_inventory",
        Ok(
            "radmusic::radload_radmusic_inventory::~radload_radmusic_inventory(void)",
        ),
    ),
    (
        "__tfQ28radmusic26radload_radmusic_inventory",
        Ok(
            "radmusic::radload_radmusic_inventory type_info function",
        ),
    ),
    (
        "_$_16radLoadInventory",
        Ok(
            "radLoadInventory::~radLoadInventory(void)",
        ),
    ),
    (
        "__16radLoadInventory",
        Ok(
            "radLoadInventory::radLoadInventory(void)",
        ),
    ),
    (
        "Find__Q28radmusic26radload_radmusic_inventoryRQ216radLoadInventory12SafeCastBaseG13tUidUnaligned",
        Ok(
            "radmusic::radload_radmusic_inventory::Find(radLoadInventory::SafeCastBase &, tUidUnaligned)",
        ),
    ),
    (
        "__tf16radLoadInventory",
        Ok(
            "radLoadInventory type_info function",
        ),
    ),
    (
        "performance_new__8radmusicPQ28radmusic11compositionPCc14radMemorySpace",
        Ok(
            "radmusic::performance_new(radmusic::composition *, char const *, radMemorySpace)",
        ),
    ),
    (
        "performance_delete__8radmusicPPQ28radmusic11performance",
        Ok(
            "radmusic::performance_delete(radmusic::performance **)",
        ),
    ),
    (
        "performance_stop__8radmusicPQ28radmusic11performance",
        Ok(
            "radmusic::performance_stop(radmusic::performance *)",
        ),
    ),
    (
        "performance_paused__8radmusicPQ28radmusic11performance",
        Ok(
            "radmusic::performance_paused(radmusic::performance *)",
        ),
    ),
    (
        "performance_volume__8radmusicPQ28radmusic11performancef",
        Ok(
            "radmusic::performance_volume(radmusic::performance *, float)",
        ),
    ),
    (
        "performance_num_states__8radmusicPQ28radmusic11performance",
        Ok(
            "radmusic::performance_num_states(radmusic::performance *)",
        ),
    ),
    (
        "performance_state_name__8radmusicPQ28radmusic11performanceUiPcUi",
        Ok(
            "radmusic::performance_state_name(radmusic::performance *, unsigned int, char *, unsigned int)",
        ),
    ),
    (
        "performance_num_state_values__8radmusicPQ28radmusic11performanceUi",
        Ok(
            "radmusic::performance_num_state_values(radmusic::performance *, unsigned int)",
        ),
    ),
    (
        "performance_state_value_name__8radmusicPQ28radmusic11performanceUiUiPcUi",
        Ok(
            "radmusic::performance_state_value_name(radmusic::performance *, unsigned int, unsigned int, char *, unsigned int)",
        ),
    ),
    (
        "performance_state_value__8radmusicPQ28radmusic11performanceUiUi",
        Ok(
            "radmusic::performance_state_value(radmusic::performance *, unsigned int, unsigned int)",
        ),
    ),
    (
        "performance_num_events__8radmusicPQ28radmusic11performance",
        Ok(
            "radmusic::performance_num_events(radmusic::performance *)",
        ),
    ),
    (
        "performance_event_name__8radmusicPQ28radmusic11performanceUiPcUi",
        Ok(
            "radmusic::performance_event_name(radmusic::performance *, unsigned int, char *, unsigned int)",
        ),
    ),
    (
        "performance_trigger_event__8radmusicPQ28radmusic11performanceUi",
        Ok(
            "radmusic::performance_trigger_event(radmusic::performance *, unsigned int)",
        ),
    ),
    (
        "performance_update__8radmusicPQ28radmusic11performanceUi",
        Ok(
            "radmusic::performance_update(radmusic::performance *, unsigned int)",
        ),
    ),
    (
        "debug_performance_current_region_name__8radmusicPQ28radmusic11performancePcUi",
        Ok(
            "radmusic::debug_performance_current_region_name(radmusic::performance *, char *, unsigned int)",
        ),
    ),
    (
        "performance_is_state_steady_idle__8radmusicPQ28radmusic11performance",
        Ok(
            "radmusic::performance_is_state_steady_idle(radmusic::performance *)",
        ),
    ),
    (
        "debug_performance_current_beat__8radmusicPQ28radmusic11performancePf",
        Ok(
            "radmusic::debug_performance_current_beat(radmusic::performance *, float *)",
        ),
    ),
    (
        "_get_state_index__8radmusicPQ28radmusic11performanceRCQ23odst13pointer_templ1ZQ23ods6_state",
        Ok(
            "radmusic::_get_state_index(radmusic::performance *, ods::pointer_templ<ods::_state> const &)",
        ),
    ),
    (
        "_get_state_value__8radmusicPQ28radmusic11performanceRCQ23odst13pointer_templ1ZQ23ods6_state",
        Ok(
            "radmusic::_get_state_value(radmusic::performance *, ods::pointer_templ<ods::_state> const &)",
        ),
    ),
    (
        "_do_action_rand_state__8radmusicPQ28radmusic11performanceRCQ23odst13pointer_templ1ZQ23ods18_rand_state_action",
        Ok(
            "radmusic::_do_action_rand_state(radmusic::performance *, ods::pointer_templ<ods::_rand_state_action> const &)",
        ),
    ),
    (
        "_do_event_actions__8radmusicPQ28radmusic11performanceUi",
        Ok(
            "radmusic::_do_event_actions(radmusic::performance *, unsigned int)",
        ),
    ),
    (
        "group_memory_sizes_recurse__8radmusicRCQ23odst13pointer_templ1ZQ23ods6_groupPUiT2PQ23odst13pointer_templ1ZQ23ods6_groupT2T2T4",
        Ok(
            "radmusic::group_memory_sizes_recurse(ods::pointer_templ<ods::_group> const &, unsigned int *, unsigned int *, ods::pointer_templ<ods::_group> *, unsigned int *, unsigned int *, ods::pointer_templ<ods::_group> *)",
        ),
    ),
    (
        "rsd_file_length_in_samples__8radmusicRCQ23odst13pointer_templ1ZQ23ods9_rsd_file",
        Ok(
            "radmusic::rsd_file_length_in_samples(ods::pointer_templ<ods::_rsd_file> const &)",
        ),
    ),
    (
        "rsd_file_length_in_frames__8radmusicRCQ23odst13pointer_templ1ZQ23ods9_rsd_file",
        Ok(
            "radmusic::rsd_file_length_in_frames(ods::pointer_templ<ods::_rsd_file> const &)",
        ),
    ),
    (
        "audio_format_frames_to_samples__8radmusicRCQ23odst13pointer_templ1ZQ23ods13_audio_formatUi",
        Ok(
            "radmusic::audio_format_frames_to_samples(ods::pointer_templ<ods::_audio_format> const &, unsigned int)",
        ),
    ),
    (
        "audio_format_samples_to_frames__8radmusicRCQ23odst13pointer_templ1ZQ23ods13_audio_formatUi",
        Ok(
            "radmusic::audio_format_samples_to_frames(ods::pointer_templ<ods::_audio_format> const &, unsigned int)",
        ),
    ),
    (
        "rsd_file_length_in_bytes__8radmusicRCQ23odst13pointer_templ1ZQ23ods9_rsd_file",
        Ok(
            "radmusic::rsd_file_length_in_bytes(ods::pointer_templ<ods::_rsd_file> const &)",
        ),
    ),
    (
        "construct_audio_format__8radmusicRCQ23odst13pointer_templ1ZQ23ods13_audio_formatb",
        Ok(
            "radmusic::construct_audio_format(ods::pointer_templ<ods::_audio_format> const &, bool)",
        ),
    ),
    (
        "audio_format_samples_to_milliseconds__8radmusicRCQ23odst13pointer_templ1ZQ23ods13_audio_formatUi",
        Ok(
            "radmusic::audio_format_samples_to_milliseconds(ods::pointer_templ<ods::_audio_format> const &, unsigned int)",
        ),
    ),
    (
        "group_memory_sizes__8radmusicRCQ23odst13pointer_templ1ZQ23ods6_groupPUiN32",
        Ok(
            "radmusic::group_memory_sizes(ods::pointer_templ<ods::_group> const &, unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "composition_find_fade_transition__8radmusicRCQ23odst13pointer_templ1ZQ23ods5_compRCQ23odst13pointer_templ1ZQ23ods7_regionT2",
        Ok(
            "radmusic::composition_find_fade_transition(ods::pointer_templ<ods::_comp> const &, ods::pointer_templ<ods::_region> const &, ods::pointer_templ<ods::_region> const &)",
        ),
    ),
    (
        "composition_find_stitch_transition__8radmusicRCQ23odst13pointer_templ1ZQ23ods5_compRCQ23odst13pointer_templ1ZQ23ods7_regionT2",
        Ok(
            "radmusic::composition_find_stitch_transition(ods::pointer_templ<ods::_comp> const &, ods::pointer_templ<ods::_region> const &, ods::pointer_templ<ods::_region> const &)",
        ),
    ),
    (
        "group_is_child_of__8radmusicRCQ23odst13pointer_templ1ZQ23ods6_groupT1",
        Ok(
            "radmusic::group_is_child_of(ods::pointer_templ<ods::_group> const &, ods::pointer_templ<ods::_group> const &)",
        ),
    ),
    (
        "beat_in_range__8radmusicfff",
        Ok(
            "radmusic::beat_in_range(float, float, float)",
        ),
    ),
    (
        "beat_set_beat_in_range__8radmusicRCQ23odst13pointer_templ1ZQ23ods9_beat_setff",
        Ok(
            "radmusic::beat_set_beat_in_range(ods::pointer_templ<ods::_beat_set> const &, float, float)",
        ),
    ),
    (
        "tempo_track_beat__8radmusicRCQ23odst13pointer_templ1ZQ23ods12_tempo_trackUiUi",
        Ok(
            "radmusic::tempo_track_beat(ods::pointer_templ<ods::_tempo_track> const &, unsigned int, unsigned int)",
        ),
    ),
    (
        "calculate_action_offset__8radmusicRCQ23odst13pointer_templ1ZQ23ods6_eventPUi",
        Ok(
            "radmusic::calculate_action_offset(ods::pointer_templ<ods::_event> const &, unsigned int *)",
        ),
    ),
    (
        "__Q23odst13pointer_templ1ZQ23ods6_groupRCQ23odst13pointer_templ1ZQ23ods6_group",
        Ok(
            "ods::pointer_templ<ods::_group>::pointer_templ(ods::pointer_templ<ods::_group> const &)",
        ),
    ),
    (
        "__as__Q23odst13pointer_templ1ZQ23ods6_groupRCQ23odst13pointer_templ1ZQ23ods6_group",
        Ok(
            "ods::pointer_templ<ods::_group>::operator=(ods::pointer_templ<ods::_group> const &)",
        ),
    ),
    (
        "__Q23odst13pointer_templ1ZQ23ods16_fade_transitionRCQ23odst13pointer_templ1ZQ23ods16_fade_transition",
        Ok(
            "ods::pointer_templ<ods::_fade_transition>::pointer_templ(ods::pointer_templ<ods::_fade_transition> const &)",
        ),
    ),
    (
        "__as__Q23odst13pointer_templ1ZQ23ods16_fade_transitionRCQ23odst13pointer_templ1ZQ23ods16_fade_transition",
        Ok(
            "ods::pointer_templ<ods::_fade_transition>::operator=(ods::pointer_templ<ods::_fade_transition> const &)",
        ),
    ),
    (
        "__as__Q23odst13pointer_templ1ZQ23ods7_regionRCQ23odst13pointer_templ1ZQ23ods7_region",
        Ok(
            "ods::pointer_templ<ods::_region>::operator=(ods::pointer_templ<ods::_region> const &)",
        ),
    ),
    (
        "__Q23odst13pointer_templ1ZQ23ods18_stitch_transitionRCQ23odst13pointer_templ1ZQ23ods18_stitch_transition",
        Ok(
            "ods::pointer_templ<ods::_stitch_transition>::pointer_templ(ods::pointer_templ<ods::_stitch_transition> const &)",
        ),
    ),
    (
        "__as__Q23odst13pointer_templ1ZQ23ods18_stitch_transitionRCQ23odst13pointer_templ1ZQ23ods18_stitch_transition",
        Ok(
            "ods::pointer_templ<ods::_stitch_transition>::operator=(ods::pointer_templ<ods::_stitch_transition> const &)",
        ),
    ),
    (
        "resource_manager_initialize__8radmusicPQ28radmusic24stream_graph_descriptionUiUi",
        Ok(
            "radmusic::resource_manager_initialize(radmusic::stream_graph_description *, unsigned int, unsigned int)",
        ),
    ),
    (
        "resource_manager_terminate__8radmusicv",
        Ok(
            "radmusic::resource_manager_terminate(void)",
        ),
    ),
    (
        "capture_stream_graph__8radmusicPPQ28radmusic12stream_graphP23IRadSoundHalAudioFormat",
        Ok(
            "radmusic::capture_stream_graph(radmusic::stream_graph **, IRadSoundHalAudioFormat *)",
        ),
    ),
    (
        "release_stream_graph__8radmusicPPQ28radmusic12stream_graph",
        Ok(
            "radmusic::release_stream_graph(radmusic::stream_graph **)",
        ),
    ),
    (
        "capture_clip_player__8radmusicPP19IRadSoundClipPlayer",
        Ok(
            "radmusic::capture_clip_player(IRadSoundClipPlayer **)",
        ),
    ),
    (
        "release_clip_player__8radmusicPP19IRadSoundClipPlayer",
        Ok(
            "radmusic::release_clip_player(IRadSoundClipPlayer **)",
        ),
    ),
    (
        "resource_manager_new__8radmusicPCciUiUi14radMemorySpaceiUiUi",
        Ok(
            "radmusic::resource_manager_new(char const *, int, unsigned int, unsigned int, radMemorySpace, int, unsigned int, unsigned int)",
        ),
    ),
    (
        "resource_manager_delete__8radmusicPPQ28radmusic16resource_manager",
        Ok(
            "radmusic::resource_manager_delete(radmusic::resource_manager **)",
        ),
    ),
    (
        "_construct_file_data_source__8radmusicPQ28radmusic16resource_managerRCQ23odst13pointer_templ1ZQ23ods9_rsd_fileUi",
        Ok(
            "radmusic::_construct_file_data_source(radmusic::resource_manager *, ods::pointer_templ<ods::_rsd_file> const &, unsigned int)",
        ),
    ),
    (
        "resource_manager_update__8radmusicPQ28radmusic16resource_manager",
        Ok(
            "radmusic::resource_manager_update(radmusic::resource_manager *)",
        ),
    ),
    (
        "resource_manager_move_to_group__8radmusicPQ28radmusic16resource_managerRCQ23odst13pointer_templ1ZQ23ods6_groupUi",
        Ok(
            "radmusic::resource_manager_move_to_group(radmusic::resource_manager *, ods::pointer_templ<ods::_group> const &, unsigned int)",
        ),
    ),
    (
        "_queue_items_to_load__8radmusicPQ28radmusic15resource_bufferRCQ23odst13pointer_templ1ZQ23ods6_groupT2",
        Ok(
            "radmusic::_queue_items_to_load(radmusic::resource_buffer *, ods::pointer_templ<ods::_group> const &, ods::pointer_templ<ods::_group> const &)",
        ),
    ),
    (
        "_resource_buffer_move_to_group__8radmusicPQ28radmusic16resource_managerUiRCQ23odst13pointer_templ1ZQ23ods6_group",
        Ok(
            "radmusic::_resource_buffer_move_to_group(radmusic::resource_manager *, unsigned int, ods::pointer_templ<ods::_group> const &)",
        ),
    ),
    (
        "resource_manager_group_loaded__8radmusicPQ28radmusic16resource_managerUiRCQ23odst13pointer_templ1ZQ23ods6_group",
        Ok(
            "radmusic::resource_manager_group_loaded(radmusic::resource_manager *, unsigned int, ods::pointer_templ<ods::_group> const &)",
        ),
    ),
    (
        "resource_manager_get_clip__8radmusicPQ28radmusic16resource_managerRCQ23odst13pointer_templ1ZQ23ods5_clipUi",
        Ok(
            "radmusic::resource_manager_get_clip(radmusic::resource_manager *, ods::pointer_templ<ods::_clip> const &, unsigned int)",
        ),
    ),
    (
        "resource_manager_get_stream__8radmusicPQ28radmusic16resource_managerRCQ23odst13pointer_templ1ZQ23ods7_streamUiUi",
        Ok(
            "radmusic::resource_manager_get_stream(radmusic::resource_manager *, ods::pointer_templ<ods::_stream> const &, unsigned int, unsigned int)",
        ),
    ),
    (
        "__Q23odst13pointer_templ1ZQ23ods7_streamRCQ23odst13pointer_templ1ZQ23ods7_stream",
        Ok(
            "ods::pointer_templ<ods::_stream>::pointer_templ(ods::pointer_templ<ods::_stream> const &)",
        ),
    ),
    (
        "__as__Q23odst13pointer_templ1ZQ23ods7_streamRCQ23odst13pointer_templ1ZQ23ods7_stream",
        Ok(
            "ods::pointer_templ<ods::_stream>::operator=(ods::pointer_templ<ods::_stream> const &)",
        ),
    ),
    (
        "__Q23odst13pointer_templ1ZQ23ods5_clipRCQ23odst13pointer_templ1ZQ23ods5_clip",
        Ok(
            "ods::pointer_templ<ods::_clip>::pointer_templ(ods::pointer_templ<ods::_clip> const &)",
        ),
    ),
    (
        "__as__Q23odst13pointer_templ1ZQ23ods5_clipRCQ23odst13pointer_templ1ZQ23ods5_clip",
        Ok(
            "ods::pointer_templ<ods::_clip>::operator=(ods::pointer_templ<ods::_clip> const &)",
        ),
    ),
    (
        "initialize__6memoryi",
        Ok(
            "memory::initialize(int)",
        ),
    ),
    (
        "terminate__6memoryv",
        Ok(
            "memory::terminate(void)",
        ),
    ),
    (
        "allocator__6memoryv",
        Ok(
            "memory::allocator(void)",
        ),
    ),
    (
        "malloc__6memoryUiPCc",
        Ok(
            "memory::malloc(unsigned int, char const *)",
        ),
    ),
    (
        "calloc__6memoryUiPCc",
        Ok(
            "memory::calloc(unsigned int, char const *)",
        ),
    ),
    (
        "free__6memoryPv",
        Ok(
            "memory::free(void *)",
        ),
    ),
    (
        "realloc__6memoryPvUiUiPCc",
        Ok(
            "memory::realloc(void *, unsigned int, unsigned int, char const *)",
        ),
    ),
    (
        "log_error__3odsPCc",
        Ok(
            "ods::log_error(char const *)",
        ),
    ),
    (
        "project_get_built_in_type__3odsRCQ23ods7pointerUc",
        Ok(
            "ods::project_get_built_in_type(ods::pointer const &, unsigned char)",
        ),
    ),
    (
        "project_find_instance__3odsRCQ23ods7pointerPCcPQ23ods7pointer",
        Ok(
            "ods::project_find_instance(ods::pointer const &, char const *, ods::pointer *)",
        ),
    ),
    (
        "project_assemble_instance_name__3odsRCQ23ods7pointerT1PcUi",
        Ok(
            "ods::project_assemble_instance_name(ods::pointer const &, ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "type_format_name__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::type_format_name(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "uint32_type_format_name__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::uint32_type_format_name(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "bool_type_format_name__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::bool_type_format_name(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "float_type_format_name__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::float_type_format_name(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "string_type_format_name__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::string_type_format_name(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "char_type_format_name__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::char_type_format_name(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "cls_type_name__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::cls_type_name(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "cls_type_num_attributes__3odsRCQ23ods7pointer",
        Ok(
            "ods::cls_type_num_attributes(ods::pointer const &)",
        ),
    ),
    (
        "cls_type_attribute_name__3odsRCQ23ods7pointerUiPcUi",
        Ok(
            "ods::cls_type_attribute_name(ods::pointer const &, unsigned int, char *, unsigned int)",
        ),
    ),
    (
        "cls_type_find_attribute__3odsRCQ23ods7pointerPCc",
        Ok(
            "ods::cls_type_find_attribute(ods::pointer const &, char const *)",
        ),
    ),
    (
        "cls_type_attribute_type__3odsRCQ23ods7pointerUi",
        Ok(
            "ods::cls_type_attribute_type(ods::pointer const &, unsigned int)",
        ),
    ),
    (
        "cls_type_attribute_offset__3odsRCQ23ods7pointerUi",
        Ok(
            "ods::cls_type_attribute_offset(ods::pointer const &, unsigned int)",
        ),
    ),
    (
        "type_id__3odsRCQ23ods7pointer",
        Ok(
            "ods::type_id(ods::pointer const &)",
        ),
    ),
    (
        "cls_type_format_name__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::cls_type_format_name(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "_cls_type_attribute_name__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::_cls_type_attribute_name(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "_cls_type_attribute_type__3odsRCQ23ods7pointer",
        Ok(
            "ods::_cls_type_attribute_type(ods::pointer const &)",
        ),
    ),
    (
        "ref_type_format_name__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::ref_type_format_name(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "ref_type_get_type__3odsRCQ23ods7pointer",
        Ok(
            "ods::ref_type_get_type(ods::pointer const &)",
        ),
    ),
    (
        "array_type_format_name__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::array_type_format_name(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "array_type_get_type__3odsRCQ23ods7pointer",
        Ok(
            "ods::array_type_get_type(ods::pointer const &)",
        ),
    ),
    (
        "instance_destroy__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::instance_destroy(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "instance_construct__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::instance_construct(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "instance_size__3odsRCQ23ods7pointer",
        Ok(
            "ods::instance_size(ods::pointer const &)",
        ),
    ),
    (
        "instance_write_text__3odsRCQ23ods7pointerN21PQ23ods11stream_infoUi",
        Ok(
            "ods::instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
        ),
    ),
    (
        "instance_read_text__3odsRCQ23ods7pointerT1R6Parser",
        Ok(
            "ods::instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
        ),
    ),
    (
        "instance_compare_text__3odsRCQ23ods7pointerT1R6ParserPb",
        Ok(
            "ods::instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
        ),
    ),
    (
        "uint32_instance_write_text__3odsRCQ23ods7pointerN21PQ23ods11stream_infoUi",
        Ok(
            "ods::uint32_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
        ),
    ),
    (
        "uint32_instance_read_text__3odsRCQ23ods7pointerT1R6Parser",
        Ok(
            "ods::uint32_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
        ),
    ),
    (
        "uint32_instance_compare_text__3odsRCQ23ods7pointerT1R6ParserPb",
        Ok(
            "ods::uint32_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
        ),
    ),
    (
        "uint32_instance_write__3odsGQ23ods7pointerUi",
        Ok(
            "ods::uint32_instance_write(ods::pointer, unsigned int)",
        ),
    ),
    (
        "uint32_instance_read__3odsGQ23ods7pointer",
        Ok(
            "ods::uint32_instance_read(ods::pointer)",
        ),
    ),
    (
        "uint32_instance_construct__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::uint32_instance_construct(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "uint32_instance_construct__3odsRCQ23ods7pointer",
        Ok(
            "ods::uint32_instance_construct(ods::pointer const &)",
        ),
    ),
    (
        "uint32_instance_destroy__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::uint32_instance_destroy(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "uint32_instance_size__3odsRCQ23ods7pointer",
        Ok(
            "ods::uint32_instance_size(ods::pointer const &)",
        ),
    ),
    (
        "string_instance_write_text__3odsRCQ23ods7pointerN21PQ23ods11stream_infoUi",
        Ok(
            "ods::string_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
        ),
    ),
    (
        "string_instance_read_text__3odsRCQ23ods7pointerT1R6Parser",
        Ok(
            "ods::string_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
        ),
    ),
    (
        "string_instance_compare_text__3odsRCQ23ods7pointerT1R6ParserPb",
        Ok(
            "ods::string_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
        ),
    ),
    (
        "string_instance_construct__3odsRCQ23ods7pointer",
        Ok(
            "ods::string_instance_construct(ods::pointer const &)",
        ),
    ),
    (
        "string_instance_construct__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::string_instance_construct(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "string_instance_write__3odsRCQ23ods7pointerPCc",
        Ok(
            "ods::string_instance_write(ods::pointer const &, char const *)",
        ),
    ),
    (
        "string_instance_read__3odsRCQ23ods7pointerPcUi",
        Ok(
            "ods::string_instance_read(ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "string_instance_destroy__3odsRCQ23ods7pointer",
        Ok(
            "ods::string_instance_destroy(ods::pointer const &)",
        ),
    ),
    (
        "string_instance_destroy__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::string_instance_destroy(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "string_instance_size__3odsRCQ23ods7pointer",
        Ok(
            "ods::string_instance_size(ods::pointer const &)",
        ),
    ),
    (
        "ref_instance_write_text__3odsRCQ23ods7pointerN21PQ23ods11stream_infoUi",
        Ok(
            "ods::ref_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
        ),
    ),
    (
        "ref_instance_read_text__3odsRCQ23ods7pointerT1R6Parser",
        Ok(
            "ods::ref_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
        ),
    ),
    (
        "ref_instance_compare_text__3odsRCQ23ods7pointerT1R6ParserPb",
        Ok(
            "ods::ref_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
        ),
    ),
    (
        "ref_instance_construct__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::ref_instance_construct(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "ref_instance_construct__3odsRCQ23ods7pointer",
        Ok(
            "ods::ref_instance_construct(ods::pointer const &)",
        ),
    ),
    (
        "ref_instance_read__3odsRCQ23ods7pointer",
        Ok(
            "ods::ref_instance_read(ods::pointer const &)",
        ),
    ),
    (
        "ref_instance_destroy__3odsRCQ23ods7pointer",
        Ok(
            "ods::ref_instance_destroy(ods::pointer const &)",
        ),
    ),
    (
        "ref_instance_destroy__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::ref_instance_destroy(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "ref_instance_size__3odsRCQ23ods7pointer",
        Ok(
            "ods::ref_instance_size(ods::pointer const &)",
        ),
    ),
    (
        "bool_instance_write_text__3odsRCQ23ods7pointerN21PQ23ods11stream_infoUi",
        Ok(
            "ods::bool_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
        ),
    ),
    (
        "bool_instance_read_text__3odsRCQ23ods7pointerT1R6Parser",
        Ok(
            "ods::bool_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
        ),
    ),
    (
        "bool_instance_compare_text__3odsRCQ23ods7pointerT1R6ParserPb",
        Ok(
            "ods::bool_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
        ),
    ),
    (
        "bool_instance_construct__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::bool_instance_construct(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "bool_instance_construct__3odsRCQ23ods7pointer",
        Ok(
            "ods::bool_instance_construct(ods::pointer const &)",
        ),
    ),
    (
        "bool_instance_destroy__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::bool_instance_destroy(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "bool_instance_size__3odsRCQ23ods7pointer",
        Ok(
            "ods::bool_instance_size(ods::pointer const &)",
        ),
    ),
    (
        "bool_instance_write__3odsRCQ23ods7pointerb",
        Ok(
            "ods::bool_instance_write(ods::pointer const &, bool)",
        ),
    ),
    (
        "bool_instance_read__3odsRCQ23ods7pointer",
        Ok(
            "ods::bool_instance_read(ods::pointer const &)",
        ),
    ),
    (
        "float_instance_write_text__3odsRCQ23ods7pointerN21PQ23ods11stream_infoUi",
        Ok(
            "ods::float_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
        ),
    ),
    (
        "float_instance_read_text__3odsRCQ23ods7pointerT1R6Parser",
        Ok(
            "ods::float_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
        ),
    ),
    (
        "float_instance_compare_text__3odsRCQ23ods7pointerT1R6ParserPb",
        Ok(
            "ods::float_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
        ),
    ),
    (
        "float_instance_construct__3odsRCQ23ods7pointer",
        Ok(
            "ods::float_instance_construct(ods::pointer const &)",
        ),
    ),
    (
        "float_instance_construct__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::float_instance_construct(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "float_instance_size__3odsRCQ23ods7pointer",
        Ok(
            "ods::float_instance_size(ods::pointer const &)",
        ),
    ),
    (
        "float_instance_destroy__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::float_instance_destroy(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "float_instance_write__3odsRCQ23ods7pointerf",
        Ok(
            "ods::float_instance_write(ods::pointer const &, float)",
        ),
    ),
    (
        "float_instance_read__3odsRCQ23ods7pointer",
        Ok(
            "ods::float_instance_read(ods::pointer const &)",
        ),
    ),
    (
        "char_instance_write_text__3odsRCQ23ods7pointerN21PQ23ods11stream_infoUi",
        Ok(
            "ods::char_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
        ),
    ),
    (
        "char_instance_read_text__3odsRCQ23ods7pointerT1R6Parser",
        Ok(
            "ods::char_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
        ),
    ),
    (
        "char_instance_compare_text__3odsRCQ23ods7pointerT1R6ParserPb",
        Ok(
            "ods::char_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
        ),
    ),
    (
        "char_instance_construct__3odsRCQ23ods7pointer",
        Ok(
            "ods::char_instance_construct(ods::pointer const &)",
        ),
    ),
    (
        "char_instance_construct__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::char_instance_construct(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "char_instance_destroy__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::char_instance_destroy(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "char_instance_size__3odsRCQ23ods7pointer",
        Ok(
            "ods::char_instance_size(ods::pointer const &)",
        ),
    ),
    (
        "char_instance_write__3odsRCQ23ods7pointerc",
        Ok(
            "ods::char_instance_write(ods::pointer const &, char)",
        ),
    ),
    (
        "char_instance_read__3odsRCQ23ods7pointer",
        Ok(
            "ods::char_instance_read(ods::pointer const &)",
        ),
    ),
    (
        "array_instance_write_text__3odsRCQ23ods7pointerN21PQ23ods11stream_infoUi",
        Ok(
            "ods::array_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
        ),
    ),
    (
        "array_instance_read_text__3odsRCQ23ods7pointerT1R6Parser",
        Ok(
            "ods::array_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
        ),
    ),
    (
        "array_instance_compare_text__3odsRCQ23ods7pointerT1R6ParserPb",
        Ok(
            "ods::array_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
        ),
    ),
    (
        "array_instance_assemble_name__3odsRCQ23ods7pointerN31PcUi",
        Ok(
            "ods::array_instance_assemble_name(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "array_instance_construct__3odsRCQ23ods7pointerUi",
        Ok(
            "ods::array_instance_construct(ods::pointer const &, unsigned int)",
        ),
    ),
    (
        "array_instance_construct__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::array_instance_construct(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "array_instance_destroy__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::array_instance_destroy(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "array_instance_size__3odsRCQ23ods7pointer",
        Ok(
            "ods::array_instance_size(ods::pointer const &)",
        ),
    ),
    (
        "array_instance_num_items__3odsRCQ23ods7pointer",
        Ok(
            "ods::array_instance_num_items(ods::pointer const &)",
        ),
    ),
    (
        "array_instance_add_item__3odsRCQ23ods7pointerUi",
        Ok(
            "ods::array_instance_add_item(ods::pointer const &, unsigned int)",
        ),
    ),
    (
        "array_instance_item_at__3odsRCQ23ods7pointerUiUi",
        Ok(
            "ods::array_instance_item_at(ods::pointer const &, unsigned int, unsigned int)",
        ),
    ),
    (
        "cls_instance_write_text__3odsRCQ23ods7pointerN21PQ23ods11stream_infoUi",
        Ok(
            "ods::cls_instance_write_text(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::stream_info *, unsigned int)",
        ),
    ),
    (
        "cls_instance_compare_text__3odsRCQ23ods7pointerT1R6ParserPb",
        Ok(
            "ods::cls_instance_compare_text(ods::pointer const &, ods::pointer const &, Parser &, bool *)",
        ),
    ),
    (
        "cls_instance_read_text__3odsRCQ23ods7pointerT1R6Parser",
        Ok(
            "ods::cls_instance_read_text(ods::pointer const &, ods::pointer const &, Parser &)",
        ),
    ),
    (
        "cls_instance_assemble_name__3odsRCQ23ods7pointerN31PcUi",
        Ok(
            "ods::cls_instance_assemble_name(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "cls_instance_construct__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::cls_instance_construct(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "cls_instance_destroy__3odsRCQ23ods7pointerT1",
        Ok(
            "ods::cls_instance_destroy(ods::pointer const &, ods::pointer const &)",
        ),
    ),
    (
        "cls_instance_size__3odsRCQ23ods7pointer",
        Ok(
            "ods::cls_instance_size(ods::pointer const &)",
        ),
    ),
    (
        "indent__3odsPQ23ods11stream_infoUi",
        Ok(
            "ods::indent(ods::stream_info *, unsigned int)",
        ),
    ),
    (
        "primitive_assemble_name__3odsRCQ23ods7pointerN31PcUi",
        Ok(
            "ods::primitive_assemble_name(ods::pointer const &, ods::pointer const &, ods::pointer const &, ods::pointer const &, char *, unsigned int)",
        ),
    ),
    (
        "block_construct__3odsPQ23ods5blockPQ23ods12memory_hooksb",
        Ok(
            "ods::block_construct(ods::block *, ods::memory_hooks *, bool)",
        ),
    ),
    (
        "block_destroy__3odsPQ23ods5block",
        Ok(
            "ods::block_destroy(ods::block *)",
        ),
    ),
    (
        "block_construct_from_stream_synch__3odsPQ23ods5blockPQ23ods11stream_infoPQ23ods7pointerPQ23ods12memory_hooksb",
        Ok(
            "ods::block_construct_from_stream_synch(ods::block *, ods::stream_info *, ods::pointer *, ods::memory_hooks *, bool)",
        ),
    ),
    (
        "block_alloc__3odsPQ23ods5blockUiPCc",
        Ok(
            "ods::block_alloc(ods::block *, unsigned int, char const *)",
        ),
    ),
    (
        "block_write__3odsbRCQ23ods7pointerPCvUi",
        Ok(
            "ods::block_write(bool, ods::pointer const &, void const *, unsigned int)",
        ),
    ),
    (
        "block_write__3odsbGQ23ods7pointerUiPCvUi",
        Ok(
            "ods::block_write(bool, ods::pointer, unsigned int, void const *, unsigned int)",
        ),
    ),
    (
        "_get_reference_value__3odsPQ23ods5blockUi",
        Ok(
            "ods::_get_reference_value(ods::block *, unsigned int)",
        ),
    ),
    (
        "_set_reference_value__3odsPQ23ods5blockUiUi",
        Ok(
            "ods::_set_reference_value(ods::block *, unsigned int, unsigned int)",
        ),
    ),
    (
        "block_add_reference__3odsPQ23ods5blockUi",
        Ok(
            "ods::block_add_reference(ods::block *, unsigned int)",
        ),
    ),
    (
        "block_revoke_reference__3odsPQ23ods5blockUi",
        Ok(
            "ods::block_revoke_reference(ods::block *, unsigned int)",
        ),
    ),
    (
        "block_write_reference__3odsRCQ23ods7pointerUiUi",
        Ok(
            "ods::block_write_reference(ods::pointer const &, unsigned int, unsigned int)",
        ),
    ),
    (
        "block_read_reference__3odsRCQ23ods7pointerUi",
        Ok(
            "ods::block_read_reference(ods::pointer const &, unsigned int)",
        ),
    ),
    (
        "block_read_reference__3odsRCQ23ods7pointer",
        Ok(
            "ods::block_read_reference(ods::pointer const &)",
        ),
    ),
    (
        "block_read__3odsbRCQ23ods7pointerPvUi",
        Ok(
            "ods::block_read(bool, ods::pointer const &, void *, unsigned int)",
        ),
    ),
    (
        "block_read__3odsbRCQ23ods7pointerUiPvUi",
        Ok(
            "ods::block_read(bool, ods::pointer const &, unsigned int, void *, unsigned int)",
        ),
    ),
    (
        "block_insert__3odsRCQ23ods7pointerUiUi",
        Ok(
            "ods::block_insert(ods::pointer const &, unsigned int, unsigned int)",
        ),
    ),
    (
        "block_delete__3odsGQ23ods7pointerUi",
        Ok(
            "ods::block_delete(ods::pointer, unsigned int)",
        ),
    ),
    (
        "block_free__3odsRCQ23ods7pointerUi",
        Ok(
            "ods::block_free(ods::pointer const &, unsigned int)",
        ),
    ),
    (
        "_add_to_list__Q23ods7pointerPCQ23ods7pointer",
        Ok(
            "ods::pointer::_add_to_list(ods::pointer const *)",
        ),
    ),
    (
        "_remove_from_list__Q23ods7pointerPCQ23ods7pointer",
        Ok(
            "ods::pointer::_remove_from_list(ods::pointer const *)",
        ),
    ),
    (
        "pointer_construct__3odsPQ23ods7pointer",
        Ok(
            "ods::pointer_construct(ods::pointer *)",
        ),
    ),
    (
        "pointer_destroy__3odsPQ23ods7pointer",
        Ok(
            "ods::pointer_destroy(ods::pointer *)",
        ),
    ),
    (
        "construct__Q23ods7pointerPQ23ods7pointer",
        Ok(
            "ods::pointer::construct(ods::pointer *)",
        ),
    ),
    (
        "destroy__Q23ods7pointerPQ23ods7pointer",
        Ok(
            "ods::pointer::destroy(ods::pointer *)",
        ),
    ),
    (
        "__Q23ods7pointer",
        Ok(
            "ods::pointer::pointer(void)",
        ),
    ),
    (
        "__Q23ods7pointerPCQ23ods5blockUi",
        Ok(
            "ods::pointer::pointer(ods::block const *, unsigned int)",
        ),
    ),
    (
        "__Q23ods7pointerRCQ23ods7pointer",
        Ok(
            "ods::pointer::pointer(ods::pointer const &)",
        ),
    ),
    (
        "__Q23ods7pointerRCQ23ods13null_ptr_type",
        Ok(
            "ods::pointer::pointer(ods::null_ptr_type const &)",
        ),
    ),
    (
        "__as__Q23ods7pointerRCQ23ods13null_ptr_type",
        Ok(
            "ods::pointer::operator=(ods::null_ptr_type const &)",
        ),
    ),
    (
        "__as__Q23ods7pointerRCQ23ods7pointer",
        Ok(
            "ods::pointer::operator=(ods::pointer const &)",
        ),
    ),
    (
        "__eq__CQ23ods7pointerRCQ23ods7pointer",
        Ok(
            "ods::pointer::operator==(ods::pointer const &) const",
        ),
    ),
    (
        "__ne__CQ23ods7pointerRCQ23ods7pointer",
        Ok(
            "ods::pointer::operator!=(ods::pointer const &) const",
        ),
    ),
    (
        "offset__CQ23ods7pointer",
        Ok(
            "ods::pointer::offset(void) const",
        ),
    ),
    (
        "offset__CQ23ods7pointerUi",
        Ok(
            "ods::pointer::offset(unsigned int) const",
        ),
    ),
    (
        "memory__CQ23ods7pointer",
        Ok(
            "ods::pointer::memory(void) const",
        ),
    ),
    (
        "_$_Q23ods7pointer",
        Ok(
            "ods::pointer::~pointer(void)",
        ),
    ),
    (
        "array_construct__3odsPQ23ods5blockUi",
        Ok(
            "ods::array_construct(ods::block *, unsigned int)",
        ),
    ),
    (
        "array_destroy__3odsGQ23ods7pointer",
        Ok(
            "ods::array_destroy(ods::pointer)",
        ),
    ),
    (
        "array_size__3odsGQ23ods7pointer",
        Ok(
            "ods::array_size(ods::pointer)",
        ),
    ),
    (
        "array_get_pointer_at__3odsGQ23ods7pointerUi",
        Ok(
            "ods::array_get_pointer_at(ods::pointer, unsigned int)",
        ),
    ),
    (
        "array_add_tail__3odsRCQ23ods7pointer",
        Ok(
            "ods::array_add_tail(ods::pointer const &)",
        ),
    ),
    (
        "reference_array_item_at__3odsGQ23ods7pointerUi",
        Ok(
            "ods::reference_array_item_at(ods::pointer, unsigned int)",
        ),
    ),
    (
        "reference_array_num_items__3odsGQ23ods7pointer",
        Ok(
            "ods::reference_array_num_items(ods::pointer)",
        ),
    ),
    (
        "string_construct__3odsPQ23ods5blockPCc",
        Ok(
            "ods::string_construct(ods::block *, char const *)",
        ),
    ),
    (
        "string_get__3odsGQ23ods7pointerPcUi",
        Ok(
            "ods::string_get(ods::pointer, char *, unsigned int)",
        ),
    ),
    (
        "string_len__3odsGQ23ods7pointer",
        Ok(
            "ods::string_len(ods::pointer)",
        ),
    ),
    (
        "string_destroy__3odsGQ23ods7pointer",
        Ok(
            "ods::string_destroy(ods::pointer)",
        ),
    ),
    (
        "stdio_stream_write__3odsPvPCvUi",
        Ok(
            "ods::stdio_stream_write(void *, void const *, unsigned int)",
        ),
    ),
    (
        "stdio_stream_read__3odsPvT1Ui",
        Ok(
            "ods::stdio_stream_read(void *, void *, unsigned int)",
        ),
    ),
    (
        "radfile_write__3odsPvPCvUi",
        Ok(
            "ods::radfile_write(void *, void const *, unsigned int)",
        ),
    ),
    (
        "radfile_read__3odsPvT1Ui",
        Ok(
            "ods::radfile_read(void *, void *, unsigned int)",
        ),
    ),
    (
        "radload_write__3odsPvPCvUi",
        Ok(
            "ods::radload_write(void *, void const *, unsigned int)",
        ),
    ),
    (
        "radload_read__3odsPvT1Ui",
        Ok(
            "ods::radload_read(void *, void *, unsigned int)",
        ),
    ),
    (
        "memory_stream_write__3odsPvPCvUi",
        Ok(
            "ods::memory_stream_write(void *, void const *, unsigned int)",
        ),
    ),
    (
        "memory_stream_read__3odsPvT1Ui",
        Ok(
            "ods::memory_stream_read(void *, void *, unsigned int)",
        ),
    ),
    (
        "debug_printf_write__3odsPvPCvUi",
        Ok(
            "ods::debug_printf_write(void *, void const *, unsigned int)",
        ),
    ),
    (
        "debug_printf_read__3odsPvT1Ui",
        Ok(
            "ods::debug_printf_read(void *, void *, unsigned int)",
        ),
    ),
    (
        "VsnPrintf__3odsPcUiPCcT1",
        Ok(
            "ods::VsnPrintf(char *, unsigned int, char const *, char *)",
        ),
    ),
    (
        "stream_printf__3odsPQ23ods11stream_infoPCce",
        Ok(
            "ods::stream_printf(ods::stream_info *, char const *, ...)",
        ),
    ),
    (
        "IsLetter__6Parserc",
        Ok(
            "Parser::IsLetter(char)",
        ),
    ),
    (
        "IsStartOfVarName__6Parserc",
        Ok(
            "Parser::IsStartOfVarName(char)",
        ),
    ),
    (
        "IsMiddleOfVarName__6Parserc",
        Ok(
            "Parser::IsMiddleOfVarName(char)",
        ),
    ),
    (
        "IsWhite__6Parserc",
        Ok(
            "Parser::IsWhite(char)",
        ),
    ),
    (
        "IsNumber__6Parserc",
        Ok(
            "Parser::IsNumber(char)",
        ),
    ),
    (
        "SkipWhite__6Parser",
        Ok(
            "Parser::SkipWhite(void)",
        ),
    ),
    (
        "IsTokenNsw__6ParserPCc",
        Ok(
            "Parser::IsTokenNsw(char const *)",
        ),
    ),
    (
        "SkipToken__6ParserPCc",
        Ok(
            "Parser::SkipToken(char const *)",
        ),
    ),
    (
        "SkipTokenNsw__6ParserPCc",
        Ok(
            "Parser::SkipTokenNsw(char const *)",
        ),
    ),
    (
        "GetChar__6ParserPc",
        Ok(
            "Parser::GetChar(char *)",
        ),
    ),
    (
        "GetQuotedString__6ParserPci",
        Ok(
            "Parser::GetQuotedString(char *, int)",
        ),
    ),
    (
        "GetInteger__6Parser",
        Ok(
            "Parser::GetInteger(void)",
        ),
    ),
    (
        "GetFloat__6Parser",
        Ok(
            "Parser::GetFloat(void)",
        ),
    ),
    (
        "IsNumber__6Parser",
        Ok(
            "Parser::IsNumber(void)",
        ),
    ),
    (
        "GetVariableName__6ParserPci",
        Ok(
            "Parser::GetVariableName(char *, int)",
        ),
    ),
    (
        "NextChar__6Parser",
        Ok(
            "Parser::NextChar(void)",
        ),
    ),
    (
        "music_engine_construct__8radmusicPQ28radmusic19struct_music_enginePQ28radmusic11performance",
        Ok(
            "radmusic::music_engine_construct(radmusic::struct_music_engine *, radmusic::performance *)",
        ),
    ),
    (
        "music_engine_destroy__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::music_engine_destroy(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "_construct_region_controllers__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::_construct_region_controllers(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "_destroy_region_controllers__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::_destroy_region_controllers(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "music_engine_region_controller__8radmusicPQ28radmusic19struct_music_engineRCQ23odst13pointer_templ1ZQ23ods7_region",
        Ok(
            "radmusic::music_engine_region_controller(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> const &)",
        ),
    ),
    (
        "music_engine_peek_region__8radmusicPQ28radmusic19struct_music_enginePQ28radmusic23enum_region_resume_type",
        Ok(
            "radmusic::music_engine_peek_region(radmusic::struct_music_engine *, radmusic::enum_region_resume_type *)",
        ),
    ),
    (
        "music_engine_flush_region_stack__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::music_engine_flush_region_stack(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "music_engine_push_region__8radmusicPQ28radmusic19struct_music_engineRQ23odst13pointer_templ1ZQ23ods7_regionQ28radmusic23enum_region_resume_type",
        Ok(
            "radmusic::music_engine_push_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, radmusic::enum_region_resume_type)",
        ),
    ),
    (
        "music_engine_pop_region__8radmusicPQ28radmusic19struct_music_enginePQ23odst13pointer_templ1ZQ23ods7_regionPQ28radmusic23enum_region_resume_type",
        Ok(
            "radmusic::music_engine_pop_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> *, radmusic::enum_region_resume_type *)",
        ),
    ),
    (
        "music_engine_current_region_name__8radmusicPQ28radmusic19struct_music_enginePcUi",
        Ok(
            "radmusic::music_engine_current_region_name(radmusic::struct_music_engine *, char *, unsigned int)",
        ),
    ),
    (
        "music_engine_is_state_steady_and_idle__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::music_engine_is_state_steady_and_idle(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "music_engine_current_beat__8radmusicPQ28radmusic19struct_music_enginePf",
        Ok(
            "radmusic::music_engine_current_beat(radmusic::struct_music_engine *, float *)",
        ),
    ),
    (
        "music_engine_update__8radmusicPQ28radmusic19struct_music_engineUi",
        Ok(
            "radmusic::music_engine_update(radmusic::struct_music_engine *, unsigned int)",
        ),
    ),
    (
        "music_engine_stop__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::music_engine_stop(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "music_engine_paused__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::music_engine_paused(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "music_engine_volume__8radmusicPQ28radmusic19struct_music_enginef",
        Ok(
            "radmusic::music_engine_volume(radmusic::struct_music_engine *, float)",
        ),
    ),
    (
        "_do_action_push_region__8radmusicPQ28radmusic19struct_music_engineRCQ23odst13pointer_templ1ZQ23ods19_push_region_action",
        Ok(
            "radmusic::_do_action_push_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_push_region_action> const &)",
        ),
    ),
    (
        "_do_action_pop_region__8radmusicPQ28radmusic19struct_music_engineRCQ23odst13pointer_templ1ZQ23ods18_pop_region_action",
        Ok(
            "radmusic::_do_action_pop_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_pop_region_action> const &)",
        ),
    ),
    (
        "_do_action_play_region__8radmusicPQ28radmusic19struct_music_engineRCQ23odst13pointer_templ1ZQ23ods19_play_region_action",
        Ok(
            "radmusic::_do_action_play_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_play_region_action> const &)",
        ),
    ),
    (
        "_do_action_start_layer__8radmusicPQ28radmusic19struct_music_engineRCQ23odst13pointer_templ1ZQ23ods19_start_layer_action",
        Ok(
            "radmusic::_do_action_start_layer(radmusic::struct_music_engine *, ods::pointer_templ<ods::_start_layer_action> const &)",
        ),
    ),
    (
        "_do_action_stop_layer__8radmusicPQ28radmusic19struct_music_engineRCQ23odst13pointer_templ1ZQ23ods18_stop_layer_action",
        Ok(
            "radmusic::_do_action_stop_layer(radmusic::struct_music_engine *, ods::pointer_templ<ods::_stop_layer_action> const &)",
        ),
    ),
    (
        "music_engine_do_action__8radmusicPQ28radmusic19struct_music_engineRCQ23odst13pointer_templ1ZQ23ods7_action",
        Ok(
            "radmusic::music_engine_do_action(radmusic::struct_music_engine *, ods::pointer_templ<ods::_action> const &)",
        ),
    ),
    (
        "__Q23odst13pointer_templ1ZQ23ods7_regionRCQ23odst13pointer_templ1ZQ23ods7_region",
        Ok(
            "ods::pointer_templ<ods::_region>::pointer_templ(ods::pointer_templ<ods::_region> const &)",
        ),
    ),
    (
        "__Q23odst13pointer_templ1ZQ23ods7_actionRCQ23odst13pointer_templ1ZQ23ods7_action",
        Ok(
            "ods::pointer_templ<ods::_action>::pointer_templ(ods::pointer_templ<ods::_action> const &)",
        ),
    ),
    (
        "__as__Q23odst13pointer_templ1ZQ23ods7_actionRCQ23odst13pointer_templ1ZQ23ods7_action",
        Ok(
            "ods::pointer_templ<ods::_action>::operator=(ods::pointer_templ<ods::_action> const &)",
        ),
    ),
    (
        "state_fade_construct__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_fade_construct(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_fade_destroy__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_fade_destroy(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_fade_kill__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_fade_kill(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_fade_paused__8radmusicPQ28radmusic19struct_music_engineb",
        Ok(
            "radmusic::state_fade_paused(radmusic::struct_music_engine *, bool)",
        ),
    ),
    (
        "state_fade_update__8radmusicPQ28radmusic19struct_music_engineUi",
        Ok(
            "radmusic::state_fade_update(radmusic::struct_music_engine *, unsigned int)",
        ),
    ),
    (
        "state_fade_initialize__8radmusicPQ28radmusic19struct_music_engineRQ23odst13pointer_templ1ZQ23ods7_regionbT2RQ23odst13pointer_templ1ZQ23ods16_fade_transition",
        Ok(
            "radmusic::state_fade_initialize(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool, ods::pointer_templ<ods::_region> &, ods::pointer_templ<ods::_fade_transition> &)",
        ),
    ),
    (
        "state_fade_current_region__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_fade_current_region(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_fade_initialized__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_fade_initialized(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_fade_cancel_init__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_fade_cancel_init(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_fade_enter__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_fade_enter(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_fade_start_layer__8radmusicPQ28radmusic19struct_music_enginePCc",
        Ok(
            "radmusic::state_fade_start_layer(radmusic::struct_music_engine *, char const *)",
        ),
    ),
    (
        "state_fade_stop_layer__8radmusicPQ28radmusic19struct_music_enginePCc",
        Ok(
            "radmusic::state_fade_stop_layer(radmusic::struct_music_engine *, char const *)",
        ),
    ),
    (
        "state_fade_set_volume__8radmusicPQ28radmusic19struct_music_enginef",
        Ok(
            "radmusic::state_fade_set_volume(radmusic::struct_music_engine *, float)",
        ),
    ),
    (
        "state_fade_set_pitch__8radmusicPQ28radmusic19struct_music_enginef",
        Ok(
            "radmusic::state_fade_set_pitch(radmusic::struct_music_engine *, float)",
        ),
    ),
    (
        "correct_vol__8radmusicff",
        Ok(
            "radmusic::correct_vol(float, float)",
        ),
    ),
    (
        "_state_fade_update_fade_volumes__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::_state_fade_update_fade_volumes(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_fade_fade_transition__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_fade_fade_transition(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_fade_set_target_region__8radmusicPQ28radmusic19struct_music_engineRQ23odst13pointer_templ1ZQ23ods7_regionb",
        Ok(
            "radmusic::state_fade_set_target_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool)",
        ),
    ),
    (
        "state_steady_construct__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_steady_construct(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_steady_destroy__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_steady_destroy(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "_state_steady_reset__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::_state_steady_reset(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_steady_is_idle__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_steady_is_idle(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_steady_initialize__8radmusicPQ28radmusic19struct_music_engineRQ23odst13pointer_templ1ZQ23ods7_region",
        Ok(
            "radmusic::state_steady_initialize(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &)",
        ),
    ),
    (
        "state_steady_current_region__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_steady_current_region(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_steady_enter__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_steady_enter(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_steady_set_volume__8radmusicPQ28radmusic19struct_music_enginef",
        Ok(
            "radmusic::state_steady_set_volume(radmusic::struct_music_engine *, float)",
        ),
    ),
    (
        "state_steady_set_pitch__8radmusicPQ28radmusic19struct_music_enginef",
        Ok(
            "radmusic::state_steady_set_pitch(radmusic::struct_music_engine *, float)",
        ),
    ),
    (
        "state_steady_kill__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_steady_kill(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_steady_paused__8radmusicPQ28radmusic19struct_music_engineb",
        Ok(
            "radmusic::state_steady_paused(radmusic::struct_music_engine *, bool)",
        ),
    ),
    (
        "state_steady_start_layer__8radmusicPQ28radmusic19struct_music_enginePCc",
        Ok(
            "radmusic::state_steady_start_layer(radmusic::struct_music_engine *, char const *)",
        ),
    ),
    (
        "state_steady_stop_layer__8radmusicPQ28radmusic19struct_music_enginePCc",
        Ok(
            "radmusic::state_steady_stop_layer(radmusic::struct_music_engine *, char const *)",
        ),
    ),
    (
        "state_steady_set_target_region__8radmusicPQ28radmusic19struct_music_engineRQ23odst13pointer_templ1ZQ23ods7_regionb",
        Ok(
            "radmusic::state_steady_set_target_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool)",
        ),
    ),
    (
        "_state_steady_clear_transition__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::_state_steady_clear_transition(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "_state_steady_init_transition__8radmusicPQ28radmusic19struct_music_engineRQ23odst13pointer_templ1ZQ23ods7_regionb",
        Ok(
            "radmusic::_state_steady_init_transition(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool)",
        ),
    ),
    (
        "_state_steady_do_transition__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::_state_steady_do_transition(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "_state_steady_check_for_transition__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::_state_steady_check_for_transition(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_steady_update__8radmusicPQ28radmusic19struct_music_engineUi",
        Ok(
            "radmusic::state_steady_update(radmusic::struct_music_engine *, unsigned int)",
        ),
    ),
    (
        "state_stitch_construct__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_stitch_construct(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_stitch_destroy__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_stitch_destroy(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_stitch_initialize__8radmusicPQ28radmusic19struct_music_engineRQ23odst13pointer_templ1ZQ23ods7_regionT2RQ23odst13pointer_templ1ZQ23ods18_stitch_transition",
        Ok(
            "radmusic::state_stitch_initialize(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, ods::pointer_templ<ods::_region> &, ods::pointer_templ<ods::_stitch_transition> &)",
        ),
    ),
    (
        "state_stitch_initialized__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_stitch_initialized(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_stitch_current_region__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_stitch_current_region(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_stitch_enter__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_stitch_enter(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_stitch_kill__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_stitch_kill(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_stitch_paused__8radmusicPQ28radmusic19struct_music_engineb",
        Ok(
            "radmusic::state_stitch_paused(radmusic::struct_music_engine *, bool)",
        ),
    ),
    (
        "state_stitch_start_layer__8radmusicPQ28radmusic19struct_music_enginePCc",
        Ok(
            "radmusic::state_stitch_start_layer(radmusic::struct_music_engine *, char const *)",
        ),
    ),
    (
        "state_stitch_stop_layer__8radmusicPQ28radmusic19struct_music_enginePCc",
        Ok(
            "radmusic::state_stitch_stop_layer(radmusic::struct_music_engine *, char const *)",
        ),
    ),
    (
        "state_stitch_update__8radmusicPQ28radmusic19struct_music_engineUi",
        Ok(
            "radmusic::state_stitch_update(radmusic::struct_music_engine *, unsigned int)",
        ),
    ),
    (
        "state_stitch_set_volume__8radmusicPQ28radmusic19struct_music_enginef",
        Ok(
            "radmusic::state_stitch_set_volume(radmusic::struct_music_engine *, float)",
        ),
    ),
    (
        "state_stitch_set_pitch__8radmusicPQ28radmusic19struct_music_enginef",
        Ok(
            "radmusic::state_stitch_set_pitch(radmusic::struct_music_engine *, float)",
        ),
    ),
    (
        "state_stitch_set_target_region__8radmusicPQ28radmusic19struct_music_engineRQ23odst13pointer_templ1ZQ23ods7_regionb",
        Ok(
            "radmusic::state_stitch_set_target_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool)",
        ),
    ),
    (
        "state_stopped_construct__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_stopped_construct(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_stopped_destroy__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_stopped_destroy(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_stopped_set_target_region__8radmusicPQ28radmusic19struct_music_engineRQ23odst13pointer_templ1ZQ23ods7_regionb",
        Ok(
            "radmusic::state_stopped_set_target_region(radmusic::struct_music_engine *, ods::pointer_templ<ods::_region> &, bool)",
        ),
    ),
    (
        "state_stopped_current_region__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_stopped_current_region(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_stopped_update__8radmusicPQ28radmusic19struct_music_engineUi",
        Ok(
            "radmusic::state_stopped_update(radmusic::struct_music_engine *, unsigned int)",
        ),
    ),
    (
        "state_stopped_enter__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_stopped_enter(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_stopped_kill__8radmusicPQ28radmusic19struct_music_engine",
        Ok(
            "radmusic::state_stopped_kill(radmusic::struct_music_engine *)",
        ),
    ),
    (
        "state_stopped_paused__8radmusicPQ28radmusic19struct_music_engineb",
        Ok(
            "radmusic::state_stopped_paused(radmusic::struct_music_engine *, bool)",
        ),
    ),
    (
        "state_stopped_set_pitch__8radmusicPQ28radmusic19struct_music_enginef",
        Ok(
            "radmusic::state_stopped_set_pitch(radmusic::struct_music_engine *, float)",
        ),
    ),
    (
        "state_stopped_set_volume__8radmusicPQ28radmusic19struct_music_enginef",
        Ok(
            "radmusic::state_stopped_set_volume(radmusic::struct_music_engine *, float)",
        ),
    ),
    (
        "state_stopped_start_layer__8radmusicPQ28radmusic19struct_music_enginePCc",
        Ok(
            "radmusic::state_stopped_start_layer(radmusic::struct_music_engine *, char const *)",
        ),
    ),
    (
        "state_stopped_stop_layer__8radmusicPQ28radmusic19struct_music_enginePCc",
        Ok(
            "radmusic::state_stopped_stop_layer(radmusic::struct_music_engine *, char const *)",
        ),
    ),
    (
        "sequence_player_new__8radmusicRQ23odst13pointer_templ1ZQ23ods9_sequencePQ28radmusic16resource_managerPCc",
        Ok(
            "radmusic::sequence_player_new(ods::pointer_templ<ods::_sequence> &, radmusic::resource_manager *, char const *)",
        ),
    ),
    (
        "sequence_player_delete__8radmusicPPQ28radmusic15sequence_player",
        Ok(
            "radmusic::sequence_player_delete(radmusic::sequence_player **)",
        ),
    ),
    (
        "sequence_player_state__8radmusicPQ28radmusic15sequence_player",
        Ok(
            "radmusic::sequence_player_state(radmusic::sequence_player *)",
        ),
    ),
    (
        "sequence_player_paused__8radmusicPQ28radmusic15sequence_playerb",
        Ok(
            "radmusic::sequence_player_paused(radmusic::sequence_player *, bool)",
        ),
    ),
    (
        "sequence_player_queue__8radmusicPQ28radmusic15sequence_playerUiPQ28radmusic12stream_graphb",
        Ok(
            "radmusic::sequence_player_queue(radmusic::sequence_player *, unsigned int, radmusic::stream_graph *, bool)",
        ),
    ),
    (
        "sequence_player_dequeue__8radmusicPQ28radmusic15sequence_playerPPQ28radmusic12stream_graph",
        Ok(
            "radmusic::sequence_player_dequeue(radmusic::sequence_player *, radmusic::stream_graph **)",
        ),
    ),
    (
        "sequence_player_beat__8radmusicPQ28radmusic15sequence_playerPf",
        Ok(
            "radmusic::sequence_player_beat(radmusic::sequence_player *, float *)",
        ),
    ),
    (
        "sequence_player_remaining_time__8radmusicPQ28radmusic15sequence_player",
        Ok(
            "radmusic::sequence_player_remaining_time(radmusic::sequence_player *)",
        ),
    ),
    (
        "sequence_player_volume__8radmusicPQ28radmusic15sequence_playerf",
        Ok(
            "radmusic::sequence_player_volume(radmusic::sequence_player *, float)",
        ),
    ),
    (
        "sequence_player_pitch__8radmusicPQ28radmusic15sequence_playerf",
        Ok(
            "radmusic::sequence_player_pitch(radmusic::sequence_player *, float)",
        ),
    ),
    (
        "sequence_player_play__8radmusicPQ28radmusic15sequence_player",
        Ok(
            "radmusic::sequence_player_play(radmusic::sequence_player *)",
        ),
    ),
    (
        "sequence_player_update__8radmusicPQ28radmusic15sequence_player",
        Ok(
            "radmusic::sequence_player_update(radmusic::sequence_player *)",
        ),
    ),
    (
        "__as__Q23odst13pointer_templ1ZQ23ods9_sequenceRCQ23odst13pointer_templ1ZQ23ods9_sequence",
        Ok(
            "ods::pointer_templ<ods::_sequence>::operator=(ods::pointer_templ<ods::_sequence> const &)",
        ),
    ),
    (
        "__as__Q23odst13pointer_templ1ZQ23ods15_sequence_eventRCQ23odst13pointer_templ1ZQ23ods15_sequence_event",
        Ok(
            "ods::pointer_templ<ods::_sequence_event>::operator=(ods::pointer_templ<ods::_sequence_event> const &)",
        ),
    ),
    (
        "_$_Q28radmusic21sequence_player_event",
        Ok(
            "radmusic::sequence_player_event::~sequence_player_event(void)",
        ),
    ),
    (
        "__Q28radmusic21sequence_player_event",
        Ok(
            "radmusic::sequence_player_event::sequence_player_event(void)",
        ),
    ),
    (
        "__as__Q28radmusic21sequence_player_eventRCQ28radmusic21sequence_player_event",
        Ok(
            "radmusic::sequence_player_event::operator=(radmusic::sequence_player_event const &)",
        ),
    ),
    (
        "region_controller_construct__8radmusicPQ28radmusic24struct_region_controllerPQ28radmusic16resource_managerRCQ23odst13pointer_templ1ZQ23ods7_region",
        Ok(
            "radmusic::region_controller_construct(radmusic::struct_region_controller *, radmusic::resource_manager *, ods::pointer_templ<ods::_region> const &)",
        ),
    ),
    (
        "region_controller_destroy__8radmusicPQ28radmusic24struct_region_controller",
        Ok(
            "radmusic::region_controller_destroy(radmusic::struct_region_controller *)",
        ),
    ),
    (
        "region_controller_region__8radmusicPQ28radmusic24struct_region_controller",
        Ok(
            "radmusic::region_controller_region(radmusic::struct_region_controller *)",
        ),
    ),
    (
        "region_controller_start_layer__8radmusicPQ28radmusic24struct_region_controllerPCc",
        Ok(
            "radmusic::region_controller_start_layer(radmusic::struct_region_controller *, char const *)",
        ),
    ),
    (
        "region_controller_stop_layer__8radmusicPQ28radmusic24struct_region_controllerPCc",
        Ok(
            "radmusic::region_controller_stop_layer(radmusic::struct_region_controller *, char const *)",
        ),
    ),
    (
        "region_controller_queue_stream__8radmusicPQ28radmusic24struct_region_controllerPQ28radmusic12stream_graphbff",
        Ok(
            "radmusic::region_controller_queue_stream(radmusic::struct_region_controller *, radmusic::stream_graph *, bool, float, float)",
        ),
    ),
    (
        "region_controller_kill__8radmusicPQ28radmusic24struct_region_controller",
        Ok(
            "radmusic::region_controller_kill(radmusic::struct_region_controller *)",
        ),
    ),
    (
        "region_controller_paused__8radmusicPQ28radmusic24struct_region_controllerb",
        Ok(
            "radmusic::region_controller_paused(radmusic::struct_region_controller *, bool)",
        ),
    ),
    (
        "region_controller_play__8radmusicPQ28radmusic24struct_region_controller",
        Ok(
            "radmusic::region_controller_play(radmusic::struct_region_controller *)",
        ),
    ),
    (
        "region_controller_update__8radmusicPQ28radmusic24struct_region_controller",
        Ok(
            "radmusic::region_controller_update(radmusic::struct_region_controller *)",
        ),
    ),
    (
        "region_controller_volume__8radmusicPQ28radmusic24struct_region_controllerf",
        Ok(
            "radmusic::region_controller_volume(radmusic::struct_region_controller *, float)",
        ),
    ),
    (
        "region_controller_volume__8radmusicPQ28radmusic24struct_region_controller",
        Ok(
            "radmusic::region_controller_volume(radmusic::struct_region_controller *)",
        ),
    ),
    (
        "region_controller_pitch__8radmusicPQ28radmusic24struct_region_controllerf",
        Ok(
            "radmusic::region_controller_pitch(radmusic::struct_region_controller *, float)",
        ),
    ),
    (
        "region_controller_dequeue_stream__8radmusicPQ28radmusic24struct_region_controllerPPQ28radmusic12stream_graph",
        Ok(
            "radmusic::region_controller_dequeue_stream(radmusic::struct_region_controller *, radmusic::stream_graph **)",
        ),
    ),
    (
        "region_controller_resource_buffer__8radmusicPQ28radmusic24struct_region_controllerUi",
        Ok(
            "radmusic::region_controller_resource_buffer(radmusic::struct_region_controller *, unsigned int)",
        ),
    ),
    (
        "region_controller_resource_buffer__8radmusicPQ28radmusic24struct_region_controller",
        Ok(
            "radmusic::region_controller_resource_buffer(radmusic::struct_region_controller *)",
        ),
    ),
    (
        "region_controller_primary_sequence__8radmusicPQ28radmusic24struct_region_controller",
        Ok(
            "radmusic::region_controller_primary_sequence(radmusic::struct_region_controller *)",
        ),
    ),
    (
        "region_controller_is_queued__8radmusicPQ28radmusic24struct_region_controller",
        Ok(
            "radmusic::region_controller_is_queued(radmusic::struct_region_controller *)",
        ),
    ),
    (
        "stream_graph_construct__8radmusicPQ28radmusic12stream_graphP23IRadSoundHalAudioFormatb14radMemorySpaceP19IRadMemoryAllocatorUiUii",
        Ok(
            "radmusic::stream_graph_construct(radmusic::stream_graph *, IRadSoundHalAudioFormat *, bool, radMemorySpace, IRadMemoryAllocator *, unsigned int, unsigned int, int)",
        ),
    ),
    (
        "stream_graph_destroy__8radmusicPQ28radmusic12stream_graph",
        Ok(
            "radmusic::stream_graph_destroy(radmusic::stream_graph *)",
        ),
    ),
    (
        "stream_graph_state__8radmusicPQ28radmusic12stream_graph",
        Ok(
            "radmusic::stream_graph_state(radmusic::stream_graph *)",
        ),
    ),
    (
        "stream_graph_paused__8radmusicPQ28radmusic12stream_graphb",
        Ok(
            "radmusic::stream_graph_paused(radmusic::stream_graph *, bool)",
        ),
    ),
    (
        "stream_graph_queue_data_source__8radmusicPQ28radmusic12stream_graphP22IRadSoundHalDataSourceUi",
        Ok(
            "radmusic::stream_graph_queue_data_source(radmusic::stream_graph *, IRadSoundHalDataSource *, unsigned int)",
        ),
    ),
    (
        "stream_graph_queue_full__8radmusicPQ28radmusic12stream_graph",
        Ok(
            "radmusic::stream_graph_queue_full(radmusic::stream_graph *)",
        ),
    ),
    (
        "stream_graph_queue_flush__8radmusicPQ28radmusic12stream_graph",
        Ok(
            "radmusic::stream_graph_queue_flush(radmusic::stream_graph *)",
        ),
    ),
    (
        "stream_graph_queue__8radmusicPQ28radmusic12stream_graph",
        Ok(
            "radmusic::stream_graph_queue(radmusic::stream_graph *)",
        ),
    ),
    (
        "stream_graph_run__8radmusicPQ28radmusic12stream_graph",
        Ok(
            "radmusic::stream_graph_run(radmusic::stream_graph *)",
        ),
    ),
    (
        "stream_graph_dequeue__8radmusicPQ28radmusic12stream_graph",
        Ok(
            "radmusic::stream_graph_dequeue(radmusic::stream_graph *)",
        ),
    ),
    (
        "stream_graph_volume__8radmusicPQ28radmusic12stream_graphf",
        Ok(
            "radmusic::stream_graph_volume(radmusic::stream_graph *, float)",
        ),
    ),
    (
        "stream_graph_pitch__8radmusicPQ28radmusic12stream_graphf",
        Ok(
            "radmusic::stream_graph_pitch(radmusic::stream_graph *, float)",
        ),
    ),
    (
        "stream_graph_aux__8radmusicPQ28radmusic12stream_graphUif",
        Ok(
            "radmusic::stream_graph_aux(radmusic::stream_graph *, unsigned int, float)",
        ),
    ),
    (
        "stream_graph_positional_group__8radmusicPQ28radmusic12stream_graphP27IRadSoundHalPositionalGroup",
        Ok(
            "radmusic::stream_graph_positional_group(radmusic::stream_graph *, IRadSoundHalPositionalGroup *)",
        ),
    ),
    (
        "stream_graph_position__8radmusicPQ28radmusic12stream_graph",
        Ok(
            "radmusic::stream_graph_position(radmusic::stream_graph *)",
        ),
    ),
    (
        "stream_graph_format__8radmusicPQ28radmusic12stream_graph",
        Ok(
            "radmusic::stream_graph_format(radmusic::stream_graph *)",
        ),
    ),
    (
        "__Q28radmusic21stream_graph_callback",
        Ok(
            "radmusic::stream_graph_callback::stream_graph_callback(void)",
        ),
    ),
    (
        "__tfQ28radmusic21stream_graph_callback",
        Ok(
            "radmusic::stream_graph_callback type_info function",
        ),
    ),
    (
        "AddRef__Q28radmusic21stream_graph_callback",
        Ok(
            "radmusic::stream_graph_callback::AddRef(void)",
        ),
    ),
    (
        "Release__Q28radmusic21stream_graph_callback",
        Ok(
            "radmusic::stream_graph_callback::Release(void)",
        ),
    ),
    (
        "OnStitch__Q28radmusic21stream_graph_callbackPP22IRadSoundHalDataSourceUiPv",
        Ok(
            "radmusic::stream_graph_callback::OnStitch(IRadSoundHalDataSource **, unsigned int, void *)",
        ),
    ),
    (
        "_GLOBAL_$I$_8radmusic$g_stream_graph_stitch_callback",
        Ok(
            "global constructors keyed to radmusic::g_stream_graph_stitch_callback",
        ),
    ),
    (
        "__22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::radSoundHalAudioFormat(void)",
        ),
    ),
    (
        "_$_22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::~radSoundHalAudioFormat(void)",
        ),
    ),
    (
        "Initialize__22radSoundHalAudioFormatQ223IRadSoundHalAudioFormat8EncodingP9IRefCountUiUiUi",
        Ok(
            "radSoundHalAudioFormat::Initialize(IRadSoundHalAudioFormat::Encoding, IRefCount *, unsigned int, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetEncoding__22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::GetEncoding(void)",
        ),
    ),
    (
        "GetCustomEncodingInfo__22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::GetCustomEncodingInfo(void)",
        ),
    ),
    (
        "GetNumberOfChannels__22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::GetNumberOfChannels(void)",
        ),
    ),
    (
        "GetFrameSizeInSamples__22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::GetFrameSizeInSamples(void)",
        ),
    ),
    (
        "GetFrameSizeInBytes__22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::GetFrameSizeInBytes(void)",
        ),
    ),
    (
        "GetSampleRate__22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::GetSampleRate(void)",
        ),
    ),
    (
        "GetSampleSizeInBits__22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::GetSampleSizeInBits(void)",
        ),
    ),
    (
        "Matches__22radSoundHalAudioFormatP23IRadSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::Matches(IRadSoundHalAudioFormat *)",
        ),
    ),
    (
        "SamplesToBytes__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::SamplesToBytes(unsigned int)",
        ),
    ),
    (
        "BytesToSamples__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::BytesToSamples(unsigned int)",
        ),
    ),
    (
        "SamplesToFrames__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::SamplesToFrames(unsigned int)",
        ),
    ),
    (
        "FramesToSamples__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::FramesToSamples(unsigned int)",
        ),
    ),
    (
        "FramesToBytes__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::FramesToBytes(unsigned int)",
        ),
    ),
    (
        "BytesToFrames__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::BytesToFrames(unsigned int)",
        ),
    ),
    (
        "GetBitResolution__22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::GetBitResolution(void)",
        ),
    ),
    (
        "ConvertSizeType__22radSoundHalAudioFormatQ223IRadSoundHalAudioFormat8SizeTypeUiT1",
        Ok(
            "radSoundHalAudioFormat::ConvertSizeType(IRadSoundHalAudioFormat::SizeType, unsigned int, IRadSoundHalAudioFormat::SizeType)",
        ),
    ),
    (
        "BytesToMilliseconds__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::BytesToMilliseconds(unsigned int)",
        ),
    ),
    (
        "MillisecondsToBytes__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::MillisecondsToBytes(unsigned int)",
        ),
    ),
    (
        "SamplesToMilliseconds__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::SamplesToMilliseconds(unsigned int)",
        ),
    ),
    (
        "FramesToMilliseconds__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::FramesToMilliseconds(unsigned int)",
        ),
    ),
    (
        "MillisecondsToFrames__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::MillisecondsToFrames(unsigned int)",
        ),
    ),
    (
        "MillisecondsToSamples__22radSoundHalAudioFormatUi",
        Ok(
            "radSoundHalAudioFormat::MillisecondsToSamples(unsigned int)",
        ),
    ),
    (
        "radSoundHalAudioFormatCreate__Fi",
        Ok(
            "radSoundHalAudioFormatCreate(int)",
        ),
    ),
    (
        "__tf14radSoundObject",
        Ok(
            "radSoundObject type_info function",
        ),
    ),
    (
        "__tf22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat type_info function",
        ),
    ),
    (
        "__23IRadSoundHalAudioFormat",
        Ok(
            "IRadSoundHalAudioFormat::IRadSoundHalAudioFormat(void)",
        ),
    ),
    (
        "_$_14radSoundObject",
        Ok(
            "radSoundObject::~radSoundObject(void)",
        ),
    ),
    (
        "AddRef__22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::AddRef(void)",
        ),
    ),
    (
        "Release__22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat::Release(void)",
        ),
    ),
    (
        "__tf23IRadSoundHalAudioFormat",
        Ok(
            "IRadSoundHalAudioFormat type_info function",
        ),
    ),
    (
        "__19radSoundHalListeneri",
        Ok(
            "radSoundHalListener::radSoundHalListener(int)",
        ),
    ),
    (
        "_$_19radSoundHalListener",
        Ok(
            "radSoundHalListener::~radSoundHalListener(void)",
        ),
    ),
    (
        "SetPosition__19radSoundHalListenerP14radSoundVector",
        Ok(
            "radSoundHalListener::SetPosition(radSoundVector *)",
        ),
    ),
    (
        "GetPosition__19radSoundHalListenerP14radSoundVector",
        Ok(
            "radSoundHalListener::GetPosition(radSoundVector *)",
        ),
    ),
    (
        "SetVelocity__19radSoundHalListenerP14radSoundVector",
        Ok(
            "radSoundHalListener::SetVelocity(radSoundVector *)",
        ),
    ),
    (
        "GetVelocity__19radSoundHalListenerP14radSoundVector",
        Ok(
            "radSoundHalListener::GetVelocity(radSoundVector *)",
        ),
    ),
    (
        "SetOrientation__19radSoundHalListenerP14radSoundVectorT1",
        Ok(
            "radSoundHalListener::SetOrientation(radSoundVector *, radSoundVector *)",
        ),
    ),
    (
        "GetOrientation__19radSoundHalListenerP14radSoundVectorT1",
        Ok(
            "radSoundHalListener::GetOrientation(radSoundVector *, radSoundVector *)",
        ),
    ),
    (
        "SetDistanceFactor__19radSoundHalListenerf",
        Ok(
            "radSoundHalListener::SetDistanceFactor(float)",
        ),
    ),
    (
        "GetDistanceFactor__19radSoundHalListener",
        Ok(
            "radSoundHalListener::GetDistanceFactor(void)",
        ),
    ),
    (
        "SetDopplerFactor__19radSoundHalListenerf",
        Ok(
            "radSoundHalListener::SetDopplerFactor(float)",
        ),
    ),
    (
        "GetDopplerFactor__19radSoundHalListener",
        Ok(
            "radSoundHalListener::GetDopplerFactor(void)",
        ),
    ),
    (
        "SetRollOffFactor__19radSoundHalListenerf",
        Ok(
            "radSoundHalListener::SetRollOffFactor(float)",
        ),
    ),
    (
        "GetRollOffFactor__19radSoundHalListener",
        Ok(
            "radSoundHalListener::GetRollOffFactor(void)",
        ),
    ),
    (
        "SetEnvEffectsEnabled__19radSoundHalListenerb",
        Ok(
            "radSoundHalListener::SetEnvEffectsEnabled(bool)",
        ),
    ),
    (
        "GetEnvEffectsEnabled__19radSoundHalListener",
        Ok(
            "radSoundHalListener::GetEnvEffectsEnabled(void)",
        ),
    ),
    (
        "SetEnvironmentAuxSend__19radSoundHalListenerUi",
        Ok(
            "radSoundHalListener::SetEnvironmentAuxSend(unsigned int)",
        ),
    ),
    (
        "GetEnvironmentAuxSend__19radSoundHalListener",
        Ok(
            "radSoundHalListener::GetEnvironmentAuxSend(void)",
        ),
    ),
    (
        "CalculatePositionalPitchFactor__19radSoundHalListenerPC32radSoundHalPositionalInformation",
        Ok(
            "radSoundHalListener::CalculatePositionalPitchFactor(radSoundHalPositionalInformation const *)",
        ),
    ),
    (
        "CalculatePositionalPanFactor__19radSoundHalListenerPC32radSoundHalPositionalInformationPfT2",
        Ok(
            "radSoundHalListener::CalculatePositionalPanFactor(radSoundHalPositionalInformation const *, float *, float *)",
        ),
    ),
    (
        "CalculatePositionalVolumeFactor__19radSoundHalListenerPC32radSoundHalPositionalInformation",
        Ok(
            "radSoundHalListener::CalculatePositionalVolumeFactor(radSoundHalPositionalInformation const *)",
        ),
    ),
    (
        "UpdatePositionalSettings__19radSoundHalListener",
        Ok(
            "radSoundHalListener::UpdatePositionalSettings(void)",
        ),
    ),
    (
        "CalculatePositionalInformation__19radSoundHalListenerP32radSoundHalPositionalInformation",
        Ok(
            "radSoundHalListener::CalculatePositionalInformation(radSoundHalPositionalInformation *)",
        ),
    ),
    (
        "SetSupportSurround__19radSoundHalListenerb",
        Ok(
            "radSoundHalListener::SetSupportSurround(bool)",
        ),
    ),
    (
        "GetSupportSurround__19radSoundHalListener",
        Ok(
            "radSoundHalListener::GetSupportSurround(void)",
        ),
    ),
    (
        "GetInstance__19radSoundHalListener",
        Ok(
            "radSoundHalListener::GetInstance(void)",
        ),
    ),
    (
        "Initialize__19radSoundHalListeneri",
        Ok(
            "radSoundHalListener::Initialize(int)",
        ),
    ),
    (
        "Terminate__19radSoundHalListener",
        Ok(
            "radSoundHalListener::Terminate(void)",
        ),
    ),
    (
        "radSoundHalListenerGet__Fv",
        Ok(
            "radSoundHalListenerGet(void)",
        ),
    ),
    (
        "__tf19radSoundHalListener",
        Ok(
            "radSoundHalListener type_info function",
        ),
    ),
    (
        "__20IRadSoundHalListener",
        Ok(
            "IRadSoundHalListener::IRadSoundHalListener(void)",
        ),
    ),
    (
        "AddRef__19radSoundHalListener",
        Ok(
            "radSoundHalListener::AddRef(void)",
        ),
    ),
    (
        "Release__19radSoundHalListener",
        Ok(
            "radSoundHalListener::Release(void)",
        ),
    ),
    (
        "__tf20IRadSoundHalListener",
        Ok(
            "IRadSoundHalListener type_info function",
        ),
    ),
    (
        "radSoundHalPositionalGroupCreate__Fi",
        Ok(
            "radSoundHalPositionalGroupCreate(int)",
        ),
    ),
    (
        "__26radSoundHalPositionalGroup",
        Ok(
            "radSoundHalPositionalGroup::radSoundHalPositionalGroup(void)",
        ),
    ),
    (
        "_$_26radSoundHalPositionalGroup",
        Ok(
            "radSoundHalPositionalGroup::~radSoundHalPositionalGroup(void)",
        ),
    ),
    (
        "SetPosition__26radSoundHalPositionalGroupP14radSoundVector",
        Ok(
            "radSoundHalPositionalGroup::SetPosition(radSoundVector *)",
        ),
    ),
    (
        "GetPosition__26radSoundHalPositionalGroupP14radSoundVector",
        Ok(
            "radSoundHalPositionalGroup::GetPosition(radSoundVector *)",
        ),
    ),
    (
        "SetVelocity__26radSoundHalPositionalGroupP14radSoundVector",
        Ok(
            "radSoundHalPositionalGroup::SetVelocity(radSoundVector *)",
        ),
    ),
    (
        "GetVelocity__26radSoundHalPositionalGroupP14radSoundVector",
        Ok(
            "radSoundHalPositionalGroup::GetVelocity(radSoundVector *)",
        ),
    ),
    (
        "SetOrientation__26radSoundHalPositionalGroupP14radSoundVectorT1",
        Ok(
            "radSoundHalPositionalGroup::SetOrientation(radSoundVector *, radSoundVector *)",
        ),
    ),
    (
        "GetOrientation__26radSoundHalPositionalGroupP14radSoundVectorT1",
        Ok(
            "radSoundHalPositionalGroup::GetOrientation(radSoundVector *, radSoundVector *)",
        ),
    ),
    (
        "SetConeAngles__26radSoundHalPositionalGroupff",
        Ok(
            "radSoundHalPositionalGroup::SetConeAngles(float, float)",
        ),
    ),
    (
        "GetConeAngles__26radSoundHalPositionalGroupPfT1",
        Ok(
            "radSoundHalPositionalGroup::GetConeAngles(float *, float *)",
        ),
    ),
    (
        "SetConeOutsideVolume__26radSoundHalPositionalGroupf",
        Ok(
            "radSoundHalPositionalGroup::SetConeOutsideVolume(float)",
        ),
    ),
    (
        "GetConeOutsideVolume__26radSoundHalPositionalGroup",
        Ok(
            "radSoundHalPositionalGroup::GetConeOutsideVolume(void)",
        ),
    ),
    (
        "SetMinMaxDistance__26radSoundHalPositionalGroupff",
        Ok(
            "radSoundHalPositionalGroup::SetMinMaxDistance(float, float)",
        ),
    ),
    (
        "GetMinMaxDistance__26radSoundHalPositionalGroupPfT1",
        Ok(
            "radSoundHalPositionalGroup::GetMinMaxDistance(float *, float *)",
        ),
    ),
    (
        "SetOcclusion__26radSoundHalPositionalGroupf",
        Ok(
            "radSoundHalPositionalGroup::SetOcclusion(float)",
        ),
    ),
    (
        "GetOcclusion__26radSoundHalPositionalGroup",
        Ok(
            "radSoundHalPositionalGroup::GetOcclusion(void)",
        ),
    ),
    (
        "SetObstruction__26radSoundHalPositionalGroupf",
        Ok(
            "radSoundHalPositionalGroup::SetObstruction(float)",
        ),
    ),
    (
        "GetObstruction__26radSoundHalPositionalGroup",
        Ok(
            "radSoundHalPositionalGroup::GetObstruction(void)",
        ),
    ),
    (
        "AddPositionalEntity__26radSoundHalPositionalGroupP27radSoundHalPositionalEntity",
        Ok(
            "radSoundHalPositionalGroup::AddPositionalEntity(radSoundHalPositionalEntity *)",
        ),
    ),
    (
        "RemovePositionalEntity__26radSoundHalPositionalGroupP27radSoundHalPositionalEntity",
        Ok(
            "radSoundHalPositionalGroup::RemovePositionalEntity(radSoundHalPositionalEntity *)",
        ),
    ),
    (
        "UpdatePositionalSettings__26radSoundHalPositionalGroup",
        Ok(
            "radSoundHalPositionalGroup::UpdatePositionalSettings(void)",
        ),
    ),
    (
        "__tf32radSoundHalPositionalInformation",
        Ok(
            "radSoundHalPositionalInformation type_info function",
        ),
    ),
    (
        "__tf26radSoundHalPositionalGroup",
        Ok(
            "radSoundHalPositionalGroup type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1Z26radSoundHalPositionalGroup",
        Ok(
            "radLinkedClass<radSoundHalPositionalGroup> type_info function",
        ),
    ),
    (
        "__27IRadSoundHalPositionalGroup",
        Ok(
            "IRadSoundHalPositionalGroup::IRadSoundHalPositionalGroup(void)",
        ),
    ),
    (
        "_$_32radSoundHalPositionalInformation",
        Ok(
            "radSoundHalPositionalInformation::~radSoundHalPositionalInformation(void)",
        ),
    ),
    (
        "AddRef__26radSoundHalPositionalGroup",
        Ok(
            "radSoundHalPositionalGroup::AddRef(void)",
        ),
    ),
    (
        "Release__26radSoundHalPositionalGroup",
        Ok(
            "radSoundHalPositionalGroup::Release(void)",
        ),
    ),
    (
        "__tf27IRadSoundHalPositionalGroup",
        Ok(
            "IRadSoundHalPositionalGroup type_info function",
        ),
    ),
    (
        "Initialize__23radSoundHalMemoryRegionPvUiUiUi14radMemorySpacei",
        Ok(
            "radSoundHalMemoryRegion::Initialize(void *, unsigned int, unsigned int, unsigned int, radMemorySpace, int)",
        ),
    ),
    (
        "Terminate__23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion::Terminate(void)",
        ),
    ),
    (
        "GetRootRegion__23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion::GetRootRegion(void)",
        ),
    ),
    (
        "__23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion::radSoundHalMemoryRegion(void)",
        ),
    ),
    (
        "Create__23radSoundHalMemoryRegionP23radSoundHalMemoryRegionP16IRadMemoryObjectUi",
        Ok(
            "radSoundHalMemoryRegion::Create(radSoundHalMemoryRegion *, IRadMemoryObject *, unsigned int)",
        ),
    ),
    (
        "CreateChildRegion__23radSoundHalMemoryRegionUiUiPCc",
        Ok(
            "radSoundHalMemoryRegion::CreateChildRegion(unsigned int, unsigned int, char const *)",
        ),
    ),
    (
        "CreateRoot__23radSoundHalMemoryRegionPvUiUi",
        Ok(
            "radSoundHalMemoryRegion::CreateRoot(void *, unsigned int, unsigned int)",
        ),
    ),
    (
        "_$_23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion::~radSoundHalMemoryRegion(void)",
        ),
    ),
    (
        "CreateMemoryObject__23radSoundHalMemoryRegionPP16IRadMemoryObjectUiPCc",
        Ok(
            "radSoundHalMemoryRegion::CreateMemoryObject(IRadMemoryObject **, unsigned int, char const *)",
        ),
    ),
    (
        "GetSize__23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion::GetSize(void)",
        ),
    ),
    (
        "GetParent__23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion::GetParent(void)",
        ),
    ),
    (
        "GetFirstChild__23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion::GetFirstChild(void)",
        ),
    ),
    (
        "GetNextChild__23radSoundHalMemoryRegionP24IRadSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion::GetNextChild(IRadSoundHalMemoryRegion *)",
        ),
    ),
    (
        "GetStats__23radSoundHalMemoryRegionPUiN21b",
        Ok(
            "radSoundHalMemoryRegion::GetStats(unsigned int *, unsigned int *, unsigned int *, bool)",
        ),
    ),
    (
        "GetStats_Recurse__23radSoundHalMemoryRegionP23radSoundHalMemoryRegionPUiN22b",
        Ok(
            "radSoundHalMemoryRegion::GetStats_Recurse(radSoundHalMemoryRegion *, unsigned int *, unsigned int *, unsigned int *, bool)",
        ),
    ),
    (
        "radSoundHalBufferCalculateMemorySize__FQ223IRadSoundHalAudioFormat8SizeTypeUiT0P23IRadSoundHalAudioFormat",
        Ok(
            "radSoundHalBufferCalculateMemorySize(IRadSoundHalAudioFormat::SizeType, unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalAudioFormat *)",
        ),
    ),
    (
        "radSoundHalDataSourceReadAlignmentGet__Fv",
        Ok(
            "radSoundHalDataSourceReadAlignmentGet(void)",
        ),
    ),
    (
        "radSoundHalDataSourceReadMultipleGet__Fv",
        Ok(
            "radSoundHalDataSourceReadMultipleGet(void)",
        ),
    ),
    (
        "__tf23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion type_info function",
        ),
    ),
    (
        "__24IRadSoundHalMemoryRegion",
        Ok(
            "IRadSoundHalMemoryRegion::IRadSoundHalMemoryRegion(void)",
        ),
    ),
    (
        "AddRef__23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion::AddRef(void)",
        ),
    ),
    (
        "Release__23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion::Release(void)",
        ),
    ),
    (
        "__tf24IRadSoundHalMemoryRegion",
        Ok(
            "IRadSoundHalMemoryRegion type_info function",
        ),
    ),
    (
        "__17radSoundHalSystemi",
        Ok(
            "radSoundHalSystem::radSoundHalSystem(int)",
        ),
    ),
    (
        "_$_17radSoundHalSystem",
        Ok(
            "radSoundHalSystem::~radSoundHalSystem(void)",
        ),
    ),
    (
        "Initialize__17radSoundHalSystemRCQ218IRadSoundHalSystem17SystemDescription",
        Ok(
            "radSoundHalSystem::Initialize(IRadSoundHalSystem::SystemDescription const &)",
        ),
    ),
    (
        "GetRootMemoryRegion__17radSoundHalSystem",
        Ok(
            "radSoundHalSystem::GetRootMemoryRegion(void)",
        ),
    ),
    (
        "GetNumAuxSends__17radSoundHalSystem",
        Ok(
            "radSoundHalSystem::GetNumAuxSends(void)",
        ),
    ),
    (
        "SetOutputMode__17radSoundHalSystem18radSoundOutputMode",
        Ok(
            "radSoundHalSystem::SetOutputMode(radSoundOutputMode)",
        ),
    ),
    (
        "GetOutputMode__17radSoundHalSystem",
        Ok(
            "radSoundHalSystem::GetOutputMode(void)",
        ),
    ),
    (
        "GetReferenceClock__17radSoundHalSystem",
        Ok(
            "radSoundHalSystem::GetReferenceClock(void)",
        ),
    ),
    (
        "GetStats__17radSoundHalSystemPQ218IRadSoundHalSystem5Stats",
        Ok(
            "radSoundHalSystem::GetStats(IRadSoundHalSystem::Stats *)",
        ),
    ),
    (
        "UpdateEffects__17radSoundHalSystem",
        Ok(
            "radSoundHalSystem::UpdateEffects(void)",
        ),
    ),
    (
        "SetAuxEffect__17radSoundHalSystemUiP18IRadSoundHalEffect",
        Ok(
            "radSoundHalSystem::SetAuxEffect(unsigned int, IRadSoundHalEffect *)",
        ),
    ),
    (
        "GetAuxEffect__17radSoundHalSystemUi",
        Ok(
            "radSoundHalSystem::GetAuxEffect(unsigned int)",
        ),
    ),
    (
        "SetAuxGain__17radSoundHalSystemUif",
        Ok(
            "radSoundHalSystem::SetAuxGain(unsigned int, float)",
        ),
    ),
    (
        "GetAuxGain__17radSoundHalSystemUi",
        Ok(
            "radSoundHalSystem::GetAuxGain(unsigned int)",
        ),
    ),
    (
        "Service__17radSoundHalSystem",
        Ok(
            "radSoundHalSystem::Service(void)",
        ),
    ),
    (
        "ServiceOncePerFrame__17radSoundHalSystem",
        Ok(
            "radSoundHalSystem::ServiceOncePerFrame(void)",
        ),
    ),
    (
        "radSoundHalSystemGet__Fv",
        Ok(
            "radSoundHalSystemGet(void)",
        ),
    ),
    (
        "radSoundHalSystemInitialize__Fi",
        Ok(
            "radSoundHalSystemInitialize(int)",
        ),
    ),
    (
        "radSoundHalSystemTerminate__Fv",
        Ok(
            "radSoundHalSystemTerminate(void)",
        ),
    ),
    (
        "__tf17radSoundHalSystem",
        Ok(
            "radSoundHalSystem type_info function",
        ),
    ),
    (
        "__18IRadSoundHalSystem",
        Ok(
            "IRadSoundHalSystem::IRadSoundHalSystem(void)",
        ),
    ),
    (
        "AddRef__17radSoundHalSystem",
        Ok(
            "radSoundHalSystem::AddRef(void)",
        ),
    ),
    (
        "Release__17radSoundHalSystem",
        Ok(
            "radSoundHalSystem::Release(void)",
        ),
    ),
    (
        "__tf18IRadSoundHalSystem",
        Ok(
            "IRadSoundHalSystem type_info function",
        ),
    ),
    (
        "__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::radSoundEffectPs2(void)",
        ),
    ),
    (
        "_$_17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::~radSoundEffectPs2(void)",
        ),
    ),
    (
        "Update__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::Update(void)",
        ),
    ),
    (
        "SetMasterGain__17radSoundEffectPs2f",
        Ok(
            "radSoundEffectPs2::SetMasterGain(float)",
        ),
    ),
    (
        "GetMasterGain__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::GetMasterGain(void)",
        ),
    ),
    (
        "SetMode__17radSoundEffectPs2Q218IRadSoundEffectPs24Mode",
        Ok(
            "radSoundEffectPs2::SetMode(IRadSoundEffectPs2::Mode)",
        ),
    ),
    (
        "GetMode__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::GetMode(void)",
        ),
    ),
    (
        "SetDelay__17radSoundEffectPs2f",
        Ok(
            "radSoundEffectPs2::SetDelay(float)",
        ),
    ),
    (
        "GetDelayTime__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::GetDelayTime(void)",
        ),
    ),
    (
        "SetFeedback__17radSoundEffectPs2f",
        Ok(
            "radSoundEffectPs2::SetFeedback(float)",
        ),
    ),
    (
        "GetFeedback__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::GetFeedback(void)",
        ),
    ),
    (
        "SetGain__17radSoundEffectPs2f",
        Ok(
            "radSoundEffectPs2::SetGain(float)",
        ),
    ),
    (
        "GetGain__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::GetGain(void)",
        ),
    ),
    (
        "SetEnabled__17radSoundEffectPs2b",
        Ok(
            "radSoundEffectPs2::SetEnabled(bool)",
        ),
    ),
    (
        "GetEnabled__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::GetEnabled(void)",
        ),
    ),
    (
        "FindSonyModeInfo__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::FindSonyModeInfo(void)",
        ),
    ),
    (
        "SetHardware__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::SetHardware(void)",
        ),
    ),
    (
        "Attach__17radSoundEffectPs2Ui",
        Ok(
            "radSoundEffectPs2::Attach(unsigned int)",
        ),
    ),
    (
        "Detach__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::Detach(void)",
        ),
    ),
    (
        "radSoundCreateEffectPs2__Fi",
        Ok(
            "radSoundCreateEffectPs2(int)",
        ),
    ),
    (
        "__tf17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2 type_info function",
        ),
    ),
    (
        "__18IRadSoundEffectPs2",
        Ok(
            "IRadSoundEffectPs2::IRadSoundEffectPs2(void)",
        ),
    ),
    (
        "AddRef__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::AddRef(void)",
        ),
    ),
    (
        "Release__17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2::Release(void)",
        ),
    ),
    (
        "__tf18IRadSoundEffectPs2",
        Ok(
            "IRadSoundEffectPs2 type_info function",
        ),
    ),
    (
        "__18IRadSoundHalEffect",
        Ok(
            "IRadSoundHalEffect::IRadSoundHalEffect(void)",
        ),
    ),
    (
        "__tf18IRadSoundHalEffect",
        Ok(
            "IRadSoundHalEffect type_info function",
        ),
    ),
    (
        "__14radSoundIopPs2UiUi",
        Ok(
            "radSoundIopPs2::radSoundIopPs2(unsigned int, unsigned int)",
        ),
    ),
    (
        "_$_14radSoundIopPs2",
        Ok(
            "radSoundIopPs2::~radSoundIopPs2(void)",
        ),
    ),
    (
        "ThreadProc_RpcLoadReceive__14radSoundIopPs2Pv",
        Ok(
            "radSoundIopPs2::ThreadProc_RpcLoadReceive(void *)",
        ),
    ),
    (
        "ThreadProc_RpcVoiceReceive__14radSoundIopPs2Pv",
        Ok(
            "radSoundIopPs2::ThreadProc_RpcVoiceReceive(void *)",
        ),
    ),
    (
        "RpcLoadHandler__14radSoundIopPs2UiPvi",
        Ok(
            "radSoundIopPs2::RpcLoadHandler(unsigned int, void *, int)",
        ),
    ),
    (
        "RpcVoiceHandler__14radSoundIopPs2UiPvi",
        Ok(
            "radSoundIopPs2::RpcVoiceHandler(unsigned int, void *, int)",
        ),
    ),
    (
        "LoadBufferAsync__14radSoundIopPs2UiP18IRadSoundHalBufferUiUi",
        Ok(
            "radSoundIopPs2::LoadBufferAsync(unsigned int, IRadSoundHalBuffer *, unsigned int, unsigned int)",
        ),
    ),
    (
        "ClearBufferAsync__14radSoundIopPs2P18IRadSoundHalBufferUiUi",
        Ok(
            "radSoundIopPs2::ClearBufferAsync(IRadSoundHalBuffer *, unsigned int, unsigned int)",
        ),
    ),
    (
        "Service__14radSoundIopPs2",
        Ok(
            "radSoundIopPs2::Service(void)",
        ),
    ),
    (
        "LoadBufferComplete__14radSoundIopPs2",
        Ok(
            "radSoundIopPs2::LoadBufferComplete(void)",
        ),
    ),
    (
        "ClearBufferComplete__14radSoundIopPs2",
        Ok(
            "radSoundIopPs2::ClearBufferComplete(void)",
        ),
    ),
    (
        "BindToIopLoadServer__14radSoundIopPs2Ui",
        Ok(
            "radSoundIopPs2::BindToIopLoadServer(unsigned int)",
        ),
    ),
    (
        "BindToIopVoiceServer__14radSoundIopPs2",
        Ok(
            "radSoundIopPs2::BindToIopVoiceServer(void)",
        ),
    ),
    (
        "GetWriteCommandPacket__14radSoundIopPs2",
        Ok(
            "radSoundIopPs2::GetWriteCommandPacket(void)",
        ),
    ),
    (
        "GetReadCommandPacket__14radSoundIopPs2",
        Ok(
            "radSoundIopPs2::GetReadCommandPacket(void)",
        ),
    ),
    (
        "GetInstance__14radSoundIopPs2",
        Ok(
            "radSoundIopPs2::GetInstance(void)",
        ),
    ),
    (
        "Initialize__14radSoundIopPs2UiUii",
        Ok(
            "radSoundIopPs2::Initialize(unsigned int, unsigned int, int)",
        ),
    ),
    (
        "Terminate__14radSoundIopPs2",
        Ok(
            "radSoundIopPs2::Terminate(void)",
        ),
    ),
    (
        "__tf14radSoundIopPs2",
        Ok(
            "radSoundIopPs2 type_info function",
        ),
    ),
    (
        "AddRef__14radSoundIopPs2",
        Ok(
            "radSoundIopPs2::AddRef(void)",
        ),
    ),
    (
        "Release__14radSoundIopPs2",
        Ok(
            "radSoundIopPs2::Release(void)",
        ),
    ),
    (
        "radSoundVolumeAnalogToHardwareAdpcmPs2__Ff",
        Ok(
            "radSoundVolumeAnalogToHardwareAdpcmPs2(float)",
        ),
    ),
    (
        "radSoundVolumeAmplitudeToHardwareAdpcmPs2__Ff",
        Ok(
            "radSoundVolumeAmplitudeToHardwareAdpcmPs2(float)",
        ),
    ),
    (
        "radSoundPitchPercentageToHardwareAdpcmPs2__FfUi",
        Ok(
            "radSoundPitchPercentageToHardwareAdpcmPs2(float, unsigned int)",
        ),
    ),
    (
        "__37radSoundHalBufferAsyncRequestAdpcmPs2P9IRefCount",
        Ok(
            "radSoundHalBufferAsyncRequestAdpcmPs2::radSoundHalBufferAsyncRequestAdpcmPs2(IRefCount *)",
        ),
    ),
    (
        "_$_37radSoundHalBufferAsyncRequestAdpcmPs2",
        Ok(
            "radSoundHalBufferAsyncRequestAdpcmPs2::~radSoundHalBufferAsyncRequestAdpcmPs2(void)",
        ),
    ),
    (
        "Initialize__37radSoundHalBufferAsyncRequestAdpcmPs2",
        Ok(
            "radSoundHalBufferAsyncRequestAdpcmPs2::Initialize(void)",
        ),
    ),
    (
        "Service__37radSoundHalBufferAsyncRequestAdpcmPs2",
        Ok(
            "radSoundHalBufferAsyncRequestAdpcmPs2::Service(void)",
        ),
    ),
    (
        "CancelAllRequests__37radSoundHalBufferAsyncRequestAdpcmPs2P9IRefCount",
        Ok(
            "radSoundHalBufferAsyncRequestAdpcmPs2::CancelAllRequests(IRefCount *)",
        ),
    ),
    (
        "__tf37radSoundHalBufferAsyncRequestAdpcmPs2",
        Ok(
            "radSoundHalBufferAsyncRequestAdpcmPs2 type_info function",
        ),
    ),
    (
        "AddRef__37radSoundHalBufferAsyncRequestAdpcmPs2",
        Ok(
            "radSoundHalBufferAsyncRequestAdpcmPs2::AddRef(void)",
        ),
    ),
    (
        "Release__37radSoundHalBufferAsyncRequestAdpcmPs2",
        Ok(
            "radSoundHalBufferAsyncRequestAdpcmPs2::Release(void)",
        ),
    ),
    (
        "Initialize__22radSoundBufferAdpcmPs2P23IRadSoundHalAudioFormatP16IRadMemoryObjectUibT4",
        Ok(
            "radSoundBufferAdpcmPs2::Initialize(IRadSoundHalAudioFormat *, IRadMemoryObject *, unsigned int, bool, bool)",
        ),
    ),
    (
        "GetMemoryObject__22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2::GetMemoryObject(void)",
        ),
    ),
    (
        "ClearAsync__22radSoundBufferAdpcmPs2UiUiP31IRadSoundHalBufferClearCallback",
        Ok(
            "radSoundBufferAdpcmPs2::ClearAsync(unsigned int, unsigned int, IRadSoundHalBufferClearCallback *)",
        ),
    ),
    (
        "LoadAsync__22radSoundBufferAdpcmPs2P22IRadSoundHalDataSourceUiUiP30IRadSoundHalBufferLoadCallback",
        Ok(
            "radSoundBufferAdpcmPs2::LoadAsync(IRadSoundHalDataSource *, unsigned int, unsigned int, IRadSoundHalBufferLoadCallback *)",
        ),
    ),
    (
        "GetSizeInFrames__22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2::GetSizeInFrames(void)",
        ),
    ),
    (
        "GetFormat__22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2::GetFormat(void)",
        ),
    ),
    (
        "IsLooping__22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2::IsLooping(void)",
        ),
    ),
    (
        "GetStartAddress__22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2::GetStartAddress(void)",
        ),
    ),
    (
        "GetSizeInBytes__22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2::GetSizeInBytes(void)",
        ),
    ),
    (
        "__22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2::radSoundBufferAdpcmPs2(void)",
        ),
    ),
    (
        "_$_22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2::~radSoundBufferAdpcmPs2(void)",
        ),
    ),
    (
        "CancelAsyncOperations__22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2::CancelAsyncOperations(void)",
        ),
    ),
    (
        "GetMinTransferSize__22radSoundBufferAdpcmPs2Q223IRadSoundHalAudioFormat8SizeType",
        Ok(
            "radSoundBufferAdpcmPs2::GetMinTransferSize(IRadSoundHalAudioFormat::SizeType)",
        ),
    ),
    (
        "radSoundHalBufferCreate__Fi",
        Ok(
            "radSoundHalBufferCreate(int)",
        ),
    ),
    (
        "__tf22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2 type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1Z22radSoundBufferAdpcmPs2",
        Ok(
            "radLinkedClass<radSoundBufferAdpcmPs2> type_info function",
        ),
    ),
    (
        "__18IRadSoundHalBuffer",
        Ok(
            "IRadSoundHalBuffer::IRadSoundHalBuffer(void)",
        ),
    ),
    (
        "AddRef__22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2::AddRef(void)",
        ),
    ),
    (
        "Release__22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2::Release(void)",
        ),
    ),
    (
        "ReSetAudioFormat__22radSoundBufferAdpcmPs2P23IRadSoundHalAudioFormat",
        Ok(
            "radSoundBufferAdpcmPs2::ReSetAudioFormat(IRadSoundHalAudioFormat *)",
        ),
    ),
    (
        "__tf18IRadSoundHalBuffer",
        Ok(
            "IRadSoundHalBuffer type_info function",
        ),
    ),
    (
        "__29radSoundHalAdpcmBufferClearerP18IRadSoundHalBufferUiUiP31IRadSoundHalBufferClearCallback",
        Ok(
            "radSoundHalAdpcmBufferClearer::radSoundHalAdpcmBufferClearer(IRadSoundHalBuffer *, unsigned int, unsigned int, IRadSoundHalBufferClearCallback *)",
        ),
    ),
    (
        "_$_29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer::~radSoundHalAdpcmBufferClearer(void)",
        ),
    ),
    (
        "BeginRequest__29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer::BeginRequest(void)",
        ),
    ),
    (
        "ServiceRequest__29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer::ServiceRequest(void)",
        ),
    ),
    (
        "CallbackClient__29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer::CallbackClient(void)",
        ),
    ),
    (
        "CancelRequest__29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer::CancelRequest(void)",
        ),
    ),
    (
        "EndRequest__29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer::EndRequest(void)",
        ),
    ),
    (
        "__tf29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer type_info function",
        ),
    ),
    (
        "_$_t18radSoundPoolObject1Z29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundPoolObject<radSoundHalAdpcmBufferClearer>::~radSoundPoolObject(void)",
        ),
    ),
    (
        "__t18radSoundPoolObject1Z29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundPoolObject<radSoundHalAdpcmBufferClearer>::radSoundPoolObject(void)",
        ),
    ),
    (
        "AddRef__29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer::AddRef(void)",
        ),
    ),
    (
        "Release__29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer::Release(void)",
        ),
    ),
    (
        "__tft18radSoundPoolObject1Z29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundPoolObject<radSoundHalAdpcmBufferClearer> type_info function",
        ),
    ),
    (
        "OnDataSourceFramesLoaded__33radSoundBufferAsyncLoaderAdpcmPs2Ui",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::OnDataSourceFramesLoaded(unsigned int)",
        ),
    ),
    (
        "ServiceRequest__33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::ServiceRequest(void)",
        ),
    ),
    (
        "__33radSoundBufferAsyncLoaderAdpcmPs2P22IRadSoundHalDataSourceP18IRadSoundHalBufferUiUiP30IRadSoundHalBufferLoadCallback",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::radSoundBufferAsyncLoaderAdpcmPs2(IRadSoundHalDataSource *, IRadSoundHalBuffer *, unsigned int, unsigned int, IRadSoundHalBufferLoadCallback *)",
        ),
    ),
    (
        "BeginRequest__33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::BeginRequest(void)",
        ),
    ),
    (
        "InternalService__33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::InternalService(void)",
        ),
    ),
    (
        "CancelRequest__33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::CancelRequest(void)",
        ),
    ),
    (
        "_$_33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::~radSoundBufferAsyncLoaderAdpcmPs2(void)",
        ),
    ),
    (
        "__tf33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2 type_info function",
        ),
    ),
    (
        "__30IRadSoundHalDataSourceCallback",
        Ok(
            "IRadSoundHalDataSourceCallback::IRadSoundHalDataSourceCallback(void)",
        ),
    ),
    (
        "_$_t18radSoundPoolObject1Z33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2>::~radSoundPoolObject(void)",
        ),
    ),
    (
        "__t18radSoundPoolObject1Z33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2>::radSoundPoolObject(void)",
        ),
    ),
    (
        "AddRef__33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::AddRef(void)",
        ),
    ),
    (
        "Release__33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::Release(void)",
        ),
    ),
    (
        "EndRequest__33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::EndRequest(void)",
        ),
    ),
    (
        "__tf30IRadSoundHalDataSourceCallback",
        Ok(
            "IRadSoundHalDataSourceCallback type_info function",
        ),
    ),
    (
        "__tft18radSoundPoolObject1Z33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2> type_info function",
        ),
    ),
    (
        "Play__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::Play(void)",
        ),
    ),
    (
        "Stop__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::Stop(void)",
        ),
    ),
    (
        "StopAndFreeHardwareVoices__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::StopAndFreeHardwareVoices(void)",
        ),
    ),
    (
        "IsPlaying__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::IsPlaying(void)",
        ),
    ),
    (
        "SetVoiceLoopAddresses__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::SetVoiceLoopAddresses(void)",
        ),
    ),
    (
        "IsHardwarePlaying__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::IsHardwarePlaying(void)",
        ),
    ),
    (
        "GetPlaybackPositionInSamples__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::GetPlaybackPositionInSamples(void)",
        ),
    ),
    (
        "SetPlaybackPositionInSamples__21radSoundVoiceAdpcmPs2Ui",
        Ok(
            "radSoundVoiceAdpcmPs2::SetPlaybackPositionInSamples(unsigned int)",
        ),
    ),
    (
        "SetStartAddressInSamples__21radSoundVoiceAdpcmPs2Ui",
        Ok(
            "radSoundVoiceAdpcmPs2::SetStartAddressInSamples(unsigned int)",
        ),
    ),
    (
        "FreeHardwareVoices__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::FreeHardwareVoices(void)",
        ),
    ),
    (
        "GetCoreVoices__21radSoundVoiceAdpcmPs2UiPUiUi",
        Ok(
            "radSoundVoiceAdpcmPs2::GetCoreVoices(unsigned int, unsigned int *, unsigned int)",
        ),
    ),
    (
        "GetHardwareVoices__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::GetHardwareVoices(void)",
        ),
    ),
    (
        "GetVoiceSwitchMask__21radSoundVoiceAdpcmPs2PUi",
        Ok(
            "radSoundVoiceAdpcmPs2::GetVoiceSwitchMask(unsigned int *)",
        ),
    ),
    (
        "SetVoiceVolumes__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::SetVoiceVolumes(void)",
        ),
    ),
    (
        "SetVoiceEffects__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::SetVoiceEffects(void)",
        ),
    ),
    (
        "SetVoicePitches__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::SetVoicePitches(void)",
        ),
    ),
    (
        "OcclusionAnalogToMultiplier__21radSoundVoiceAdpcmPs2f",
        Ok(
            "radSoundVoiceAdpcmPs2::OcclusionAnalogToMultiplier(float)",
        ),
    ),
    (
        "ObstructionAnalogToMultiplier__21radSoundVoiceAdpcmPs2f",
        Ok(
            "radSoundVoiceAdpcmPs2::ObstructionAnalogToMultiplier(float)",
        ),
    ),
    (
        "CalculateSurroundMultipliers__21radSoundVoiceAdpcmPs2PfT1",
        Ok(
            "radSoundVoiceAdpcmPs2::CalculateSurroundMultipliers(float *, float *)",
        ),
    ),
    (
        "CaculateSurroundPanAmpFactor__21radSoundVoiceAdpcmPs2ffPfT3",
        Ok(
            "radSoundVoiceAdpcmPs2::CaculateSurroundPanAmpFactor(float, float, float *, float *)",
        ),
    ),
    (
        "__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::radSoundVoiceAdpcmPs2(void)",
        ),
    ),
    (
        "_$_21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::~radSoundVoiceAdpcmPs2(void)",
        ),
    ),
    (
        "SetBuffer__21radSoundVoiceAdpcmPs2P18IRadSoundHalBuffer",
        Ok(
            "radSoundVoiceAdpcmPs2::SetBuffer(IRadSoundHalBuffer *)",
        ),
    ),
    (
        "GetBuffer__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::GetBuffer(void)",
        ),
    ),
    (
        "SetPositionalGroup__21radSoundVoiceAdpcmPs2P27IRadSoundHalPositionalGroup",
        Ok(
            "radSoundVoiceAdpcmPs2::SetPositionalGroup(IRadSoundHalPositionalGroup *)",
        ),
    ),
    (
        "GetPositionalGroup__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::GetPositionalGroup(void)",
        ),
    ),
    (
        "OnApplyPositionalSettings__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::OnApplyPositionalSettings(void)",
        ),
    ),
    (
        "GetLeadVoice__21radSoundVoiceAdpcmPs2PUi",
        Ok(
            "radSoundVoiceAdpcmPs2::GetLeadVoice(unsigned int *)",
        ),
    ),
    (
        "AttemptVoiceKill__21radSoundVoiceAdpcmPs2Ui",
        Ok(
            "radSoundVoiceAdpcmPs2::AttemptVoiceKill(unsigned int)",
        ),
    ),
    (
        "HasVoiceOnCore__21radSoundVoiceAdpcmPs2Ui",
        Ok(
            "radSoundVoiceAdpcmPs2::HasVoiceOnCore(unsigned int)",
        ),
    ),
    (
        "GetCoreWithMostFreeVoices__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::GetCoreWithMostFreeVoices(void)",
        ),
    ),
    (
        "GetNumberOfUsedCoreVoices__21radSoundVoiceAdpcmPs2Ui",
        Ok(
            "radSoundVoiceAdpcmPs2::GetNumberOfUsedCoreVoices(unsigned int)",
        ),
    ),
    (
        "Service__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::Service(void)",
        ),
    ),
    (
        "radSoundHalVoiceCreate__Fi",
        Ok(
            "radSoundHalVoiceCreate(int)",
        ),
    ),
    (
        "__tf21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2 type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1Z21radSoundVoiceAdpcmPs2",
        Ok(
            "radLinkedClass<radSoundVoiceAdpcmPs2> type_info function",
        ),
    ),
    (
        "__17IRadSoundHalVoice",
        Ok(
            "IRadSoundHalVoice::IRadSoundHalVoice(void)",
        ),
    ),
    (
        "__27radSoundHalPositionalEntity",
        Ok(
            "radSoundHalPositionalEntity::radSoundHalPositionalEntity(void)",
        ),
    ),
    (
        "AddRef__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::AddRef(void)",
        ),
    ),
    (
        "Release__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::Release(void)",
        ),
    ),
    (
        "SetPriority__21radSoundVoiceAdpcmPs2Ui",
        Ok(
            "radSoundVoiceAdpcmPs2::SetPriority(unsigned int)",
        ),
    ),
    (
        "GetPriority__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::GetPriority(void)",
        ),
    ),
    (
        "SetPitch__21radSoundVoiceAdpcmPs2f",
        Ok(
            "radSoundVoiceAdpcmPs2::SetPitch(float)",
        ),
    ),
    (
        "GetPitch__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::GetPitch(void)",
        ),
    ),
    (
        "GetMuted__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::GetMuted(void)",
        ),
    ),
    (
        "SetMuted__21radSoundVoiceAdpcmPs2b",
        Ok(
            "radSoundVoiceAdpcmPs2::SetMuted(bool)",
        ),
    ),
    (
        "SetTrim__21radSoundVoiceAdpcmPs2f",
        Ok(
            "radSoundVoiceAdpcmPs2::SetTrim(float)",
        ),
    ),
    (
        "GetTrim__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::GetTrim(void)",
        ),
    ),
    (
        "SetPan__21radSoundVoiceAdpcmPs2f",
        Ok(
            "radSoundVoiceAdpcmPs2::SetPan(float)",
        ),
    ),
    (
        "GetPan__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::GetPan(void)",
        ),
    ),
    (
        "SetAuxGain__21radSoundVoiceAdpcmPs2Uif",
        Ok(
            "radSoundVoiceAdpcmPs2::SetAuxGain(unsigned int, float)",
        ),
    ),
    (
        "GetAuxGain__21radSoundVoiceAdpcmPs2Ui",
        Ok(
            "radSoundVoiceAdpcmPs2::GetAuxGain(unsigned int)",
        ),
    ),
    (
        "SetAuxMode__21radSoundVoiceAdpcmPs2Ui15radSoundAuxMode",
        Ok(
            "radSoundVoiceAdpcmPs2::SetAuxMode(unsigned int, radSoundAuxMode)",
        ),
    ),
    (
        "GetAuxMode__21radSoundVoiceAdpcmPs2Ui",
        Ok(
            "radSoundVoiceAdpcmPs2::GetAuxMode(unsigned int)",
        ),
    ),
    (
        "SetVolume__21radSoundVoiceAdpcmPs2f",
        Ok(
            "radSoundVoiceAdpcmPs2::SetVolume(float)",
        ),
    ),
    (
        "GetVolume__21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2::GetVolume(void)",
        ),
    ),
    (
        "__tf17IRadSoundHalVoice",
        Ok(
            "IRadSoundHalVoice type_info function",
        ),
    ),
    (
        "__tf27radSoundHalPositionalEntity",
        Ok(
            "radSoundHalPositionalEntity type_info function",
        ),
    ),
    (
        "__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::radSoundBufferedDataSource(void)",
        ),
    ),
    (
        "_$_26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::~radSoundBufferedDataSource(void)",
        ),
    ),
    (
        "GetState__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::GetState(void)",
        ),
    ),
    (
        "SetInputDataSource__26radSoundBufferedDataSourceP22IRadSoundHalDataSource",
        Ok(
            "radSoundBufferedDataSource::SetInputDataSource(IRadSoundHalDataSource *)",
        ),
    ),
    (
        "Initialize__26radSoundBufferedDataSource14radMemorySpaceP19IRadMemoryAllocatorUiQ223IRadSoundHalAudioFormat8SizeTypeP23IRadSoundHalAudioFormatPCc",
        Ok(
            "radSoundBufferedDataSource::Initialize(radMemorySpace, IRadMemoryAllocator *, unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalAudioFormat *, char const *)",
        ),
    ),
    (
        "SetLowWaterMark__26radSoundBufferedDataSourcef",
        Ok(
            "radSoundBufferedDataSource::SetLowWaterMark(float)",
        ),
    ),
    (
        "GetLowWaterMark__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::GetLowWaterMark(void)",
        ),
    ),
    (
        "GetFormat__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::GetFormat(void)",
        ),
    ),
    (
        "GetInputDataSource__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::GetInputDataSource(void)",
        ),
    ),
    (
        "GetAvailableFrames__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::GetAvailableFrames(void)",
        ),
    ),
    (
        "OnDataSourceFramesLoaded__26radSoundBufferedDataSourceUi",
        Ok(
            "radSoundBufferedDataSource::OnDataSourceFramesLoaded(unsigned int)",
        ),
    ),
    (
        "GetRemainingFrames__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::GetRemainingFrames(void)",
        ),
    ),
    (
        "GetFramesAsync__26radSoundBufferedDataSourcePv14radMemorySpaceUiP30IRadSoundHalDataSourceCallback",
        Ok(
            "radSoundBufferedDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
        ),
    ),
    (
        "ServiceCopy__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::ServiceCopy(void)",
        ),
    ),
    (
        "OnMemoryCopyAsyncComplete__26radSoundBufferedDataSourcePv",
        Ok(
            "radSoundBufferedDataSource::OnMemoryCopyAsyncComplete(void *)",
        ),
    ),
    (
        "Update__26radSoundBufferedDataSourceUi",
        Ok(
            "radSoundBufferedDataSource::Update(unsigned int)",
        ),
    ),
    (
        "Service__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::Service(void)",
        ),
    ),
    (
        "ServiceInitializingSource__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::ServiceInitializingSource(void)",
        ),
    ),
    (
        "AllocateResources__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::AllocateResources(void)",
        ),
    ),
    (
        "ServiceRead__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::ServiceRead(void)",
        ),
    ),
    (
        "IsBufferFull__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::IsBufferFull(void)",
        ),
    ),
    (
        "radSoundBufferedDataSourceCreate__Fi",
        Ok(
            "radSoundBufferedDataSourceCreate(int)",
        ),
    ),
    (
        "__tf23radSoundUpdatableObject",
        Ok(
            "radSoundUpdatableObject type_info function",
        ),
    ),
    (
        "__tf26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource type_info function",
        ),
    ),
    (
        "__27IRadSoundBufferedDataSource",
        Ok(
            "IRadSoundBufferedDataSource::IRadSoundBufferedDataSource(void)",
        ),
    ),
    (
        "_$_23radSoundUpdatableObject",
        Ok(
            "radSoundUpdatableObject::~radSoundUpdatableObject(void)",
        ),
    ),
    (
        "AddRef__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::AddRef(void)",
        ),
    ),
    (
        "Release__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::Release(void)",
        ),
    ),
    (
        "GetName__26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource::GetName(void)",
        ),
    ),
    (
        "__tf27IRadSoundBufferedDataSource",
        Ok(
            "IRadSoundBufferedDataSource type_info function",
        ),
    ),
    (
        "__22IRadSoundHalDataSource",
        Ok(
            "IRadSoundHalDataSource::IRadSoundHalDataSource(void)",
        ),
    ),
    (
        "__tf22IRadSoundHalDataSource",
        Ok(
            "IRadSoundHalDataSource type_info function",
        ),
    ),
    (
        "__12radSoundClip",
        Ok(
            "radSoundClip::radSoundClip(void)",
        ),
    ),
    (
        "_$_12radSoundClip",
        Ok(
            "radSoundClip::~radSoundClip(void)",
        ),
    ),
    (
        "GetMemoryRegion__12radSoundClip",
        Ok(
            "radSoundClip::GetMemoryRegion(void)",
        ),
    ),
    (
        "Initialize__12radSoundClipP22IRadSoundHalDataSourceP24IRadSoundHalMemoryRegionbPCc",
        Ok(
            "radSoundClip::Initialize(IRadSoundHalDataSource *, IRadSoundHalMemoryRegion *, bool, char const *)",
        ),
    ),
    (
        "GetLooping__12radSoundClip",
        Ok(
            "radSoundClip::GetLooping(void)",
        ),
    ),
    (
        "GetFormat__12radSoundClip",
        Ok(
            "radSoundClip::GetFormat(void)",
        ),
    ),
    (
        "SetTrim__12radSoundClipf",
        Ok(
            "radSoundClip::SetTrim(float)",
        ),
    ),
    (
        "GetTrim__12radSoundClip",
        Ok(
            "radSoundClip::GetTrim(void)",
        ),
    ),
    (
        "SetState__12radSoundClipQ213IRadSoundClip5State",
        Ok(
            "radSoundClip::SetState(IRadSoundClip::State)",
        ),
    ),
    (
        "GetState__12radSoundClip",
        Ok(
            "radSoundClip::GetState(void)",
        ),
    ),
    (
        "WillRelease__12radSoundClip",
        Ok(
            "radSoundClip::WillRelease(void)",
        ),
    ),
    (
        "Update__12radSoundClipUi",
        Ok(
            "radSoundClip::Update(unsigned int)",
        ),
    ),
    (
        "OnBufferLoadComplete__12radSoundClipUi",
        Ok(
            "radSoundClip::OnBufferLoadComplete(unsigned int)",
        ),
    ),
    (
        "OnBufferClearComplete__12radSoundClip",
        Ok(
            "radSoundClip::OnBufferClearComplete(void)",
        ),
    ),
    (
        "radSoundClipCreate__Fi",
        Ok(
            "radSoundClipCreate(int)",
        ),
    ),
    (
        "GetBuffer__12radSoundClip",
        Ok(
            "radSoundClip::GetBuffer(void)",
        ),
    ),
    (
        "__tf12radSoundClip",
        Ok(
            "radSoundClip type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1Z12radSoundClip",
        Ok(
            "radLinkedClass<radSoundClip> type_info function",
        ),
    ),
    (
        "__30IRadSoundHalBufferLoadCallback",
        Ok(
            "IRadSoundHalBufferLoadCallback::IRadSoundHalBufferLoadCallback(void)",
        ),
    ),
    (
        "__31IRadSoundHalBufferClearCallback",
        Ok(
            "IRadSoundHalBufferClearCallback::IRadSoundHalBufferClearCallback(void)",
        ),
    ),
    (
        "__13IRadSoundClip",
        Ok(
            "IRadSoundClip::IRadSoundClip(void)",
        ),
    ),
    (
        "AddRef__12radSoundClip",
        Ok(
            "radSoundClip::AddRef(void)",
        ),
    ),
    (
        "Release__12radSoundClip",
        Ok(
            "radSoundClip::Release(void)",
        ),
    ),
    (
        "__tf30IRadSoundHalBufferLoadCallback",
        Ok(
            "IRadSoundHalBufferLoadCallback type_info function",
        ),
    ),
    (
        "__tf31IRadSoundHalBufferClearCallback",
        Ok(
            "IRadSoundHalBufferClearCallback type_info function",
        ),
    ),
    (
        "__tf13IRadSoundClip",
        Ok(
            "IRadSoundClip type_info function",
        ),
    ),
    (
        "__18radSoundClipPlayeri",
        Ok(
            "radSoundClipPlayer::radSoundClipPlayer(int)",
        ),
    ),
    (
        "_$_18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::~radSoundClipPlayer(void)",
        ),
    ),
    (
        "SetPriority__18radSoundClipPlayerUi",
        Ok(
            "radSoundClipPlayer::SetPriority(unsigned int)",
        ),
    ),
    (
        "GetPriority__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::GetPriority(void)",
        ),
    ),
    (
        "SetClip__18radSoundClipPlayerP13IRadSoundClip",
        Ok(
            "radSoundClipPlayer::SetClip(IRadSoundClip *)",
        ),
    ),
    (
        "GetClip__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::GetClip(void)",
        ),
    ),
    (
        "IsPlaying__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::IsPlaying(void)",
        ),
    ),
    (
        "Play__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::Play(void)",
        ),
    ),
    (
        "Stop__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::Stop(void)",
        ),
    ),
    (
        "SetPlaybackPosition__18radSoundClipPlayerUiQ223IRadSoundHalAudioFormat8SizeType",
        Ok(
            "radSoundClipPlayer::SetPlaybackPosition(unsigned int, IRadSoundHalAudioFormat::SizeType)",
        ),
    ),
    (
        "SetState__18radSoundClipPlayerQ219IRadSoundClipPlayer5State",
        Ok(
            "radSoundClipPlayer::SetState(IRadSoundClipPlayer::State)",
        ),
    ),
    (
        "GetState__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::GetState(void)",
        ),
    ),
    (
        "SetTrim__18radSoundClipPlayerf",
        Ok(
            "radSoundClipPlayer::SetTrim(float)",
        ),
    ),
    (
        "GetTrim__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::GetTrim(void)",
        ),
    ),
    (
        "StartVoice__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::StartVoice(void)",
        ),
    ),
    (
        "StopVoice__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::StopVoice(void)",
        ),
    ),
    (
        "SetVoiceBuffer__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::SetVoiceBuffer(void)",
        ),
    ),
    (
        "Update__18radSoundClipPlayerUi",
        Ok(
            "radSoundClipPlayer::Update(unsigned int)",
        ),
    ),
    (
        "SetPitch__18radSoundClipPlayerf",
        Ok(
            "radSoundClipPlayer::SetPitch(float)",
        ),
    ),
    (
        "GetPitch__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::GetPitch(void)",
        ),
    ),
    (
        "SetPan__18radSoundClipPlayerf",
        Ok(
            "radSoundClipPlayer::SetPan(float)",
        ),
    ),
    (
        "GetPan__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::GetPan(void)",
        ),
    ),
    (
        "SetAuxMode__18radSoundClipPlayerUi15radSoundAuxMode",
        Ok(
            "radSoundClipPlayer::SetAuxMode(unsigned int, radSoundAuxMode)",
        ),
    ),
    (
        "GetAuxMode__18radSoundClipPlayerUi",
        Ok(
            "radSoundClipPlayer::GetAuxMode(unsigned int)",
        ),
    ),
    (
        "SetAuxGain__18radSoundClipPlayerUif",
        Ok(
            "radSoundClipPlayer::SetAuxGain(unsigned int, float)",
        ),
    ),
    (
        "GetAuxGain__18radSoundClipPlayerUi",
        Ok(
            "radSoundClipPlayer::GetAuxGain(unsigned int)",
        ),
    ),
    (
        "GetPlaybackTimeInSamples__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::GetPlaybackTimeInSamples(void)",
        ),
    ),
    (
        "SetMuted__18radSoundClipPlayerb",
        Ok(
            "radSoundClipPlayer::SetMuted(bool)",
        ),
    ),
    (
        "GetMuted__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::GetMuted(void)",
        ),
    ),
    (
        "SetVolume__18radSoundClipPlayerf",
        Ok(
            "radSoundClipPlayer::SetVolume(float)",
        ),
    ),
    (
        "GetVolume__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::GetVolume(void)",
        ),
    ),
    (
        "SetPositionalGroup__18radSoundClipPlayerP27IRadSoundHalPositionalGroup",
        Ok(
            "radSoundClipPlayer::SetPositionalGroup(IRadSoundHalPositionalGroup *)",
        ),
    ),
    (
        "GetPositionalGroup__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::GetPositionalGroup(void)",
        ),
    ),
    (
        "radSoundClipPlayerCreate__Fi",
        Ok(
            "radSoundClipPlayerCreate(int)",
        ),
    ),
    (
        "__tf18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer type_info function",
        ),
    ),
    (
        "__19IRadSoundClipPlayer",
        Ok(
            "IRadSoundClipPlayer::IRadSoundClipPlayer(void)",
        ),
    ),
    (
        "AddRef__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::AddRef(void)",
        ),
    ),
    (
        "Release__18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer::Release(void)",
        ),
    ),
    (
        "__tf19IRadSoundClipPlayer",
        Ok(
            "IRadSoundClipPlayer type_info function",
        ),
    ),
    (
        "__15IRadSoundPlayer",
        Ok(
            "IRadSoundPlayer::IRadSoundPlayer(void)",
        ),
    ),
    (
        "__tf15IRadSoundPlayer",
        Ok(
            "IRadSoundPlayer type_info function",
        ),
    ),
    (
        "__17radSoundDataCache",
        Ok(
            "radSoundDataCache::radSoundDataCache(void)",
        ),
    ),
    (
        "_$_17radSoundDataCache",
        Ok(
            "radSoundDataCache::~radSoundDataCache(void)",
        ),
    ),
    (
        "InitializeAsync__17radSoundDataCache14radMemorySpaceP19IRadMemoryAllocatorP22IRadSoundHalDataSourcePCc",
        Ok(
            "radSoundDataCache::InitializeAsync(radMemorySpace, IRadMemoryAllocator *, IRadSoundHalDataSource *, char const *)",
        ),
    ),
    (
        "Update__17radSoundDataCacheUi",
        Ok(
            "radSoundDataCache::Update(unsigned int)",
        ),
    ),
    (
        "OnDataSourceFramesLoaded__17radSoundDataCacheUi",
        Ok(
            "radSoundDataCache::OnDataSourceFramesLoaded(unsigned int)",
        ),
    ),
    (
        "CreateDataSource__17radSoundDataCacheUii",
        Ok(
            "radSoundDataCache::CreateDataSource(unsigned int, int)",
        ),
    ),
    (
        "GetState__17radSoundDataCache",
        Ok(
            "radSoundDataCache::GetState(void)",
        ),
    ),
    (
        "radSoundDataCacheCreate__Fi",
        Ok(
            "radSoundDataCacheCreate(int)",
        ),
    ),
    (
        "__27radSoundDataCacheDataSourceP17radSoundDataCacheUi",
        Ok(
            "radSoundDataCacheDataSource::radSoundDataCacheDataSource(radSoundDataCache *, unsigned int)",
        ),
    ),
    (
        "GetState__27radSoundDataCacheDataSource",
        Ok(
            "radSoundDataCacheDataSource::GetState(void)",
        ),
    ),
    (
        "GetFormat__27radSoundDataCacheDataSource",
        Ok(
            "radSoundDataCacheDataSource::GetFormat(void)",
        ),
    ),
    (
        "GetRemainingFrames__27radSoundDataCacheDataSource",
        Ok(
            "radSoundDataCacheDataSource::GetRemainingFrames(void)",
        ),
    ),
    (
        "GetFramesAsync__27radSoundDataCacheDataSourcePv14radMemorySpaceUiP30IRadSoundHalDataSourceCallback",
        Ok(
            "radSoundDataCacheDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
        ),
    ),
    (
        "__tf17radSoundDataCache",
        Ok(
            "radSoundDataCache type_info function",
        ),
    ),
    (
        "_$_27radSoundDataCacheDataSource",
        Ok(
            "radSoundDataCacheDataSource::~radSoundDataCacheDataSource(void)",
        ),
    ),
    (
        "__tf27radSoundDataCacheDataSource",
        Ok(
            "radSoundDataCacheDataSource type_info function",
        ),
    ),
    (
        "__18IRadSoundDataCache",
        Ok(
            "IRadSoundDataCache::IRadSoundDataCache(void)",
        ),
    ),
    (
        "AddRef__17radSoundDataCache",
        Ok(
            "radSoundDataCache::AddRef(void)",
        ),
    ),
    (
        "Release__17radSoundDataCache",
        Ok(
            "radSoundDataCache::Release(void)",
        ),
    ),
    (
        "WillRelease__17radSoundDataCache",
        Ok(
            "radSoundDataCache::WillRelease(void)",
        ),
    ),
    (
        "AddRef__27radSoundDataCacheDataSource",
        Ok(
            "radSoundDataCacheDataSource::AddRef(void)",
        ),
    ),
    (
        "Release__27radSoundDataCacheDataSource",
        Ok(
            "radSoundDataCacheDataSource::Release(void)",
        ),
    ),
    (
        "GetAvailableFrames__27radSoundDataCacheDataSource",
        Ok(
            "radSoundDataCacheDataSource::GetAvailableFrames(void)",
        ),
    ),
    (
        "GetName__27radSoundDataCacheDataSource",
        Ok(
            "radSoundDataCacheDataSource::GetName(void)",
        ),
    ),
    (
        "__tf18IRadSoundDataCache",
        Ok(
            "IRadSoundDataCache type_info function",
        ),
    ),
    (
        "Log__FbPCcUi",
        Ok(
            "Log(bool, char const *, unsigned int)",
        ),
    ),
    (
        "RadSoundSetFilePerformanceCallback__FPFbPCcUi_v",
        Ok(
            "RadSoundSetFilePerformanceCallback(void (*)(bool, char const *, unsigned int))",
        ),
    ),
    (
        "__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::radSoundRsdFileDataSource(void)",
        ),
    ),
    (
        "_$_25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::~radSoundRsdFileDataSource(void)",
        ),
    ),
    (
        "GetState__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::GetState(void)",
        ),
    ),
    (
        "InitializeFromFile__25radSoundRsdFileDataSourceP8IRadFileUiQ223IRadSoundHalAudioFormat8SizeTypeP23IRadSoundHalAudioFormat",
        Ok(
            "radSoundRsdFileDataSource::InitializeFromFile(IRadFile *, unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalAudioFormat *)",
        ),
    ),
    (
        "InitializeFromFileName__25radSoundRsdFileDataSourcePCcbUiQ223IRadSoundHalAudioFormat8SizeTypeP23IRadSoundHalAudioFormat",
        Ok(
            "radSoundRsdFileDataSource::InitializeFromFileName(char const *, bool, unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalAudioFormat *)",
        ),
    ),
    (
        "GetFormat__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::GetFormat(void)",
        ),
    ),
    (
        "GetRemainingFrames__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::GetRemainingFrames(void)",
        ),
    ),
    (
        "GetFramesAsync__25radSoundRsdFileDataSourcePv14radMemorySpaceUiP30IRadSoundHalDataSourceCallback",
        Ok(
            "radSoundRsdFileDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
        ),
    ),
    (
        "OnFileOperationsComplete__25radSoundRsdFileDataSourcePv",
        Ok(
            "radSoundRsdFileDataSource::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "_StateOpeningFile__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::_StateOpeningFile(void)",
        ),
    ),
    (
        "_StateReadingHeader__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::_StateReadingHeader(void)",
        ),
    ),
    (
        "InitFile__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::InitFile(void)",
        ),
    ),
    (
        "_StateIdle__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::_StateIdle(void)",
        ),
    ),
    (
        "_StateReadingData__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::_StateReadingData(void)",
        ),
    ),
    (
        "radSoundRsdFileDataSourceCreate__Fi",
        Ok(
            "radSoundRsdFileDataSourceCreate(int)",
        ),
    ),
    (
        "__tf25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource type_info function",
        ),
    ),
    (
        "__26IRadSoundRsdFileDataSource",
        Ok(
            "IRadSoundRsdFileDataSource::IRadSoundRsdFileDataSource(void)",
        ),
    ),
    (
        "AddRef__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::AddRef(void)",
        ),
    ),
    (
        "Release__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::Release(void)",
        ),
    ),
    (
        "GetName__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::GetName(void)",
        ),
    ),
    (
        "GetAvailableFrames__25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource::GetAvailableFrames(void)",
        ),
    ),
    (
        "__tf26IRadSoundRsdFileDataSource",
        Ok(
            "IRadSoundRsdFileDataSource type_info function",
        ),
    ),
    (
        "__24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource::radSoundMemoryDataSource(void)",
        ),
    ),
    (
        "_$_24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource::~radSoundMemoryDataSource(void)",
        ),
    ),
    (
        "Initialize__24radSoundMemoryDataSourceP23IRadSoundHalAudioFormatP26IRadSoundMemorySpaceObjectUiUiQ223IRadSoundHalAudioFormat8SizeType",
        Ok(
            "radSoundMemoryDataSource::Initialize(IRadSoundHalAudioFormat *, IRadSoundMemorySpaceObject *, unsigned int, unsigned int, IRadSoundHalAudioFormat::SizeType)",
        ),
    ),
    (
        "GetState__24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource::GetState(void)",
        ),
    ),
    (
        "GetFormat__24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource::GetFormat(void)",
        ),
    ),
    (
        "GetRemainingFrames__24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource::GetRemainingFrames(void)",
        ),
    ),
    (
        "Update__24radSoundMemoryDataSourceUi",
        Ok(
            "radSoundMemoryDataSource::Update(unsigned int)",
        ),
    ),
    (
        "GetFramesAsync__24radSoundMemoryDataSourcePv14radMemorySpaceUiP30IRadSoundHalDataSourceCallback",
        Ok(
            "radSoundMemoryDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
        ),
    ),
    (
        "radSoundMemoryDataSourceCreate__Fi",
        Ok(
            "radSoundMemoryDataSourceCreate(int)",
        ),
    ),
    (
        "__tf24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource type_info function",
        ),
    ),
    (
        "__25IRadSoundMemoryDataSource",
        Ok(
            "IRadSoundMemoryDataSource::IRadSoundMemoryDataSource(void)",
        ),
    ),
    (
        "AddRef__24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource::AddRef(void)",
        ),
    ),
    (
        "Release__24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource::Release(void)",
        ),
    ),
    (
        "GetAvailableFrames__24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource::GetAvailableFrames(void)",
        ),
    ),
    (
        "GetName__24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource::GetName(void)",
        ),
    ),
    (
        "__tf25IRadSoundMemoryDataSource",
        Ok(
            "IRadSoundMemoryDataSource type_info function",
        ),
    ),
    (
        "__25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject::radSoundMemorySpaceObject(void)",
        ),
    ),
    (
        "_$_25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject::~radSoundMemorySpaceObject(void)",
        ),
    ),
    (
        "Initialize__25radSoundMemorySpaceObject14radMemorySpaceP19IRadMemoryAllocatorUiUiPCc",
        Ok(
            "radSoundMemorySpaceObject::Initialize(radMemorySpace, IRadMemoryAllocator *, unsigned int, unsigned int, char const *)",
        ),
    ),
    (
        "GetAddress__25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject::GetAddress(void)",
        ),
    ),
    (
        "GetAllocator__25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject::GetAllocator(void)",
        ),
    ),
    (
        "GetMemorySpace__25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject::GetMemorySpace(void)",
        ),
    ),
    (
        "GetSizeInBytes__25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject::GetSizeInBytes(void)",
        ),
    ),
    (
        "GetIdentifier__25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject::GetIdentifier(void)",
        ),
    ),
    (
        "radSoundMemorySpaceObjectCreate__Fi",
        Ok(
            "radSoundMemorySpaceObjectCreate(int)",
        ),
    ),
    (
        "__tf25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject type_info function",
        ),
    ),
    (
        "__26IRadSoundMemorySpaceObject",
        Ok(
            "IRadSoundMemorySpaceObject::IRadSoundMemorySpaceObject(void)",
        ),
    ),
    (
        "AddRef__25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject::AddRef(void)",
        ),
    ),
    (
        "Release__25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject::Release(void)",
        ),
    ),
    (
        "__tf26IRadSoundMemorySpaceObject",
        Ok(
            "IRadSoundMemorySpaceObject type_info function",
        ),
    ),
    (
        "__26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource::radSoundStitchedDataSource(void)",
        ),
    ),
    (
        "_$_26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource::~radSoundStitchedDataSource(void)",
        ),
    ),
    (
        "InitializeFromAudioFormat__26radSoundStitchedDataSourceP23IRadSoundHalAudioFormat",
        Ok(
            "radSoundStitchedDataSource::InitializeFromAudioFormat(IRadSoundHalAudioFormat *)",
        ),
    ),
    (
        "InitializeFromDataSource__26radSoundStitchedDataSourceP22IRadSoundHalDataSource",
        Ok(
            "radSoundStitchedDataSource::InitializeFromDataSource(IRadSoundHalDataSource *)",
        ),
    ),
    (
        "SetStitchCallback__26radSoundStitchedDataSourceP23IRadSoundStitchCallbackPv",
        Ok(
            "radSoundStitchedDataSource::SetStitchCallback(IRadSoundStitchCallback *, void *)",
        ),
    ),
    (
        "GetState__26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource::GetState(void)",
        ),
    ),
    (
        "GetFormat__26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource::GetFormat(void)",
        ),
    ),
    (
        "GetRemainingFrames__26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource::GetRemainingFrames(void)",
        ),
    ),
    (
        "Update__26radSoundStitchedDataSourceUi",
        Ok(
            "radSoundStitchedDataSource::Update(unsigned int)",
        ),
    ),
    (
        "ResetAudioFormat__26radSoundStitchedDataSourceP23IRadSoundHalAudioFormat",
        Ok(
            "radSoundStitchedDataSource::ResetAudioFormat(IRadSoundHalAudioFormat *)",
        ),
    ),
    (
        "Reset__26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource::Reset(void)",
        ),
    ),
    (
        "Service__26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource::Service(void)",
        ),
    ),
    (
        "OnDataSourceFramesLoaded__26radSoundStitchedDataSourceUi",
        Ok(
            "radSoundStitchedDataSource::OnDataSourceFramesLoaded(unsigned int)",
        ),
    ),
    (
        "GetFramesAsync__26radSoundStitchedDataSourcePv14radMemorySpaceUiP30IRadSoundHalDataSourceCallback",
        Ok(
            "radSoundStitchedDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
        ),
    ),
    (
        "radSoundStitchedDataSourceCreate__Fi",
        Ok(
            "radSoundStitchedDataSourceCreate(int)",
        ),
    ),
    (
        "__tf26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource type_info function",
        ),
    ),
    (
        "__27IRadSoundStitchedDataSource",
        Ok(
            "IRadSoundStitchedDataSource::IRadSoundStitchedDataSource(void)",
        ),
    ),
    (
        "AddRef__26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource::AddRef(void)",
        ),
    ),
    (
        "Release__26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource::Release(void)",
        ),
    ),
    (
        "GetAvailableFrames__26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource::GetAvailableFrames(void)",
        ),
    ),
    (
        "GetName__26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource::GetName(void)",
        ),
    ),
    (
        "__tf27IRadSoundStitchedDataSource",
        Ok(
            "IRadSoundStitchedDataSource type_info function",
        ),
    ),
    (
        "__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::radSoundStreamPlayer(void)",
        ),
    ),
    (
        "_$_20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::~radSoundStreamPlayer(void)",
        ),
    ),
    (
        "InitializeAsync__20radSoundStreamPlayerUiQ223IRadSoundHalAudioFormat8SizeTypeP24IRadSoundHalMemoryRegionPCc",
        Ok(
            "radSoundStreamPlayer::InitializeAsync(unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalMemoryRegion *, char const *)",
        ),
    ),
    (
        "Initialize__20radSoundStreamPlayerP23IRadSoundHalAudioFormatUiQ223IRadSoundHalAudioFormat8SizeTypeP24IRadSoundHalMemoryRegionPCc",
        Ok(
            "radSoundStreamPlayer::Initialize(IRadSoundHalAudioFormat *, unsigned int, IRadSoundHalAudioFormat::SizeType, IRadSoundHalMemoryRegion *, char const *)",
        ),
    ),
    (
        "SetLowWaterMark__20radSoundStreamPlayerf",
        Ok(
            "radSoundStreamPlayer::SetLowWaterMark(float)",
        ),
    ),
    (
        "GetLowWaterMark__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetLowWaterMark(void)",
        ),
    ),
    (
        "AllocateResources__20radSoundStreamPlayerP23IRadSoundHalAudioFormat",
        Ok(
            "radSoundStreamPlayer::AllocateResources(IRadSoundHalAudioFormat *)",
        ),
    ),
    (
        "Play__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::Play(void)",
        ),
    ),
    (
        "SetState__20radSoundStreamPlayerQ221IRadSoundStreamPlayer5State",
        Ok(
            "radSoundStreamPlayer::SetState(IRadSoundStreamPlayer::State)",
        ),
    ),
    (
        "Stop__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::Stop(void)",
        ),
    ),
    (
        "StopVoice__20radSoundStreamPlayerb",
        Ok(
            "radSoundStreamPlayer::StopVoice(bool)",
        ),
    ),
    (
        "IsPlaying__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::IsPlaying(void)",
        ),
    ),
    (
        "SetDataSource__20radSoundStreamPlayerP22IRadSoundHalDataSource",
        Ok(
            "radSoundStreamPlayer::SetDataSource(IRadSoundHalDataSource *)",
        ),
    ),
    (
        "OnBufferLoadComplete__20radSoundStreamPlayerUi",
        Ok(
            "radSoundStreamPlayer::OnBufferLoadComplete(unsigned int)",
        ),
    ),
    (
        "OnBufferClearComplete__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::OnBufferClearComplete(void)",
        ),
    ),
    (
        "Update__20radSoundStreamPlayerUi",
        Ok(
            "radSoundStreamPlayer::Update(unsigned int)",
        ),
    ),
    (
        "ServiceStateMachine__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::ServiceStateMachine(void)",
        ),
    ),
    (
        "ServicePlay__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::ServicePlay(void)",
        ),
    ),
    (
        "ServiceLoad__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::ServiceLoad(void)",
        ),
    ),
    (
        "GetPlaybackTimeInSamples__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetPlaybackTimeInSamples(void)",
        ),
    ),
    (
        "SetPriority__20radSoundStreamPlayerUi",
        Ok(
            "radSoundStreamPlayer::SetPriority(unsigned int)",
        ),
    ),
    (
        "GetPriority__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetPriority(void)",
        ),
    ),
    (
        "SetMuted__20radSoundStreamPlayerb",
        Ok(
            "radSoundStreamPlayer::SetMuted(bool)",
        ),
    ),
    (
        "GetMuted__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetMuted(void)",
        ),
    ),
    (
        "SetVolume__20radSoundStreamPlayerf",
        Ok(
            "radSoundStreamPlayer::SetVolume(float)",
        ),
    ),
    (
        "GetVolume__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetVolume(void)",
        ),
    ),
    (
        "SetTrim__20radSoundStreamPlayerf",
        Ok(
            "radSoundStreamPlayer::SetTrim(float)",
        ),
    ),
    (
        "GetTrim__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetTrim(void)",
        ),
    ),
    (
        "SetPitch__20radSoundStreamPlayerf",
        Ok(
            "radSoundStreamPlayer::SetPitch(float)",
        ),
    ),
    (
        "GetPitch__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetPitch(void)",
        ),
    ),
    (
        "SetPan__20radSoundStreamPlayerf",
        Ok(
            "radSoundStreamPlayer::SetPan(float)",
        ),
    ),
    (
        "GetPan__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetPan(void)",
        ),
    ),
    (
        "SetAuxMode__20radSoundStreamPlayerUi15radSoundAuxMode",
        Ok(
            "radSoundStreamPlayer::SetAuxMode(unsigned int, radSoundAuxMode)",
        ),
    ),
    (
        "GetAuxMode__20radSoundStreamPlayerUi",
        Ok(
            "radSoundStreamPlayer::GetAuxMode(unsigned int)",
        ),
    ),
    (
        "SetAuxGain__20radSoundStreamPlayerUif",
        Ok(
            "radSoundStreamPlayer::SetAuxGain(unsigned int, float)",
        ),
    ),
    (
        "GetAuxGain__20radSoundStreamPlayerUi",
        Ok(
            "radSoundStreamPlayer::GetAuxGain(unsigned int)",
        ),
    ),
    (
        "SetPositionalGroup__20radSoundStreamPlayerP27IRadSoundHalPositionalGroup",
        Ok(
            "radSoundStreamPlayer::SetPositionalGroup(IRadSoundHalPositionalGroup *)",
        ),
    ),
    (
        "GetPositionalGroup__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetPositionalGroup(void)",
        ),
    ),
    (
        "GetDataSource__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetDataSource(void)",
        ),
    ),
    (
        "GetFormat__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetFormat(void)",
        ),
    ),
    (
        "GetState__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::GetState(void)",
        ),
    ),
    (
        "radSoundStreamPlayerCreate__Fi",
        Ok(
            "radSoundStreamPlayerCreate(int)",
        ),
    ),
    (
        "__tf20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer type_info function",
        ),
    ),
    (
        "__21IRadSoundStreamPlayer",
        Ok(
            "IRadSoundStreamPlayer::IRadSoundStreamPlayer(void)",
        ),
    ),
    (
        "AddRef__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::AddRef(void)",
        ),
    ),
    (
        "Release__20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer::Release(void)",
        ),
    ),
    (
        "__tf21IRadSoundStreamPlayer",
        Ok(
            "IRadSoundStreamPlayer type_info function",
        ),
    ),
    (
        "radSoundPrintBanner__Fv",
        Ok(
            "radSoundPrintBanner(void)",
        ),
    ),
    (
        "ConvertToPlatformEndian__21radSoundHalFileHeader",
        Ok(
            "radSoundHalFileHeader::ConvertToPlatformEndian(void)",
        ),
    ),
    (
        "GetEncodingFromChars__21radSoundHalFileHeaderPc",
        Ok(
            "radSoundHalFileHeader::GetEncodingFromChars(char *)",
        ),
    ),
    (
        "InitializeAudioFormat__21radSoundHalFileHeaderP23IRadSoundHalAudioFormati",
        Ok(
            "radSoundHalFileHeader::InitializeAudioFormat(IRadSoundHalAudioFormat *, int)",
        ),
    ),
    (
        "radSoundHalCreateRollOffTable__FfPfUi",
        Ok(
            "radSoundHalCreateRollOffTable(float, float *, unsigned int)",
        ),
    ),
    (
        "__10IRadScripti",
        Ok(
            "IRadScript::IRadScript(int)",
        ),
    ),
    (
        "_$_10IRadScript",
        Ok(
            "IRadScript::~IRadScript(void)",
        ),
    ),
    (
        "UnLoad__10IRadScript",
        Ok(
            "IRadScript::UnLoad(void)",
        ),
    ),
    (
        "SetContext__10IRadScriptP13IRadNameSpace",
        Ok(
            "IRadScript::SetContext(IRadNameSpace *)",
        ),
    ),
    (
        "SetAllocator__10IRadScripti",
        Ok(
            "IRadScript::SetAllocator(int)",
        ),
    ),
    (
        "Load__10IRadScriptPCcPFPv_vPvi",
        Ok(
            "IRadScript::Load(char const *, void (*)(void *), void *, int)",
        ),
    ),
    (
        "TokenizeScript__10IRadScript",
        Ok(
            "IRadScript::TokenizeScript(void)",
        ),
    ),
    (
        "OnFileOperationsComplete__10IRadScriptPv",
        Ok(
            "IRadScript::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "radScriptInitialize__Fi",
        Ok(
            "radScriptInitialize(int)",
        ),
    ),
    (
        "radScriptTerminate__Fv",
        Ok(
            "radScriptTerminate(void)",
        ),
    ),
    (
        "__tf10IRadScript",
        Ok(
            "IRadScript type_info function",
        ),
    ),
    (
        "AddRef__10IRadScript",
        Ok(
            "IRadScript::AddRef(void)",
        ),
    ),
    (
        "Release__10IRadScript",
        Ok(
            "IRadScript::Release(void)",
        ),
    ),
    (
        "radNameSpaceCreate__FUi",
        Ok(
            "radNameSpaceCreate(unsigned int)",
        ),
    ),
    (
        "__tf13IRadNameSpace",
        Ok(
            "IRadNameSpace type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1Z13IRadNameSpace",
        Ok(
            "radLinkedClass<IRadNameSpace> type_info function",
        ),
    ),
    (
        "AddRef__13IRadNameSpace",
        Ok(
            "IRadNameSpace::AddRef(void)",
        ),
    ),
    (
        "Release__13IRadNameSpace",
        Ok(
            "IRadNameSpace::Release(void)",
        ),
    ),
    (
        "_$_13IRadNameSpace",
        Ok(
            "IRadNameSpace::~IRadNameSpace(void)",
        ),
    ),
    (
        "radFactoryInitialize__Fi",
        Ok(
            "radFactoryInitialize(int)",
        ),
    ),
    (
        "radFactoryTerminate__Fv",
        Ok(
            "radFactoryTerminate(void)",
        ),
    ),
    (
        "radFactoryRegister__FPCcPFi_P9IRefCount",
        Ok(
            "radFactoryRegister(char const *, IRefCount *(*)(int))",
        ),
    ),
    (
        "radFactoryRegister__FUiPFi_P9IRefCount",
        Ok(
            "radFactoryRegister(unsigned int, IRefCount *(*)(int))",
        ),
    ),
    (
        "radFactoryRegister__FPCcPFPP9IRefCounti_v",
        Ok(
            "radFactoryRegister(char const *, void (*)(IRefCount **, int))",
        ),
    ),
    (
        "radFactoryRegister__FUiPFPP9IRefCounti_v",
        Ok(
            "radFactoryRegister(unsigned int, void (*)(IRefCount **, int))",
        ),
    ),
    (
        "radFactoryCreateInstance__FPCcPP9IRefCounti",
        Ok(
            "radFactoryCreateInstance(char const *, IRefCount **, int)",
        ),
    ),
    (
        "radFactoryCreateInstance__FUiPP9IRefCounti",
        Ok(
            "radFactoryCreateInstance(unsigned int, IRefCount **, int)",
        ),
    ),
    (
        "__tf14radFactoryNode",
        Ok(
            "radFactoryNode type_info function",
        ),
    ),
    (
        "_$_14radFactoryNode",
        Ok(
            "radFactoryNode::~radFactoryNode(void)",
        ),
    ),
    (
        "radTypeInfoLoaderCreate__Fi",
        Ok(
            "radTypeInfoLoaderCreate(int)",
        ),
    ),
    (
        "__tf17radTypeInfoLoader",
        Ok(
            "radTypeInfoLoader type_info function",
        ),
    ),
    (
        "__18IRadTypeInfoLoader",
        Ok(
            "IRadTypeInfoLoader::IRadTypeInfoLoader(void)",
        ),
    ),
    (
        "AddRef__17radTypeInfoLoader",
        Ok(
            "radTypeInfoLoader::AddRef(void)",
        ),
    ),
    (
        "Release__17radTypeInfoLoader",
        Ok(
            "radTypeInfoLoader::Release(void)",
        ),
    ),
    (
        "Initialize__17radTypeInfoLoaderP18IRadTypeInfoSystemiPCcPFPv_vPvb",
        Ok(
            "radTypeInfoLoader::Initialize(IRadTypeInfoSystem *, int, char const *, void (*)(void *), void *, bool)",
        ),
    ),
    (
        "_$_17radTypeInfoLoader",
        Ok(
            "radTypeInfoLoader::~radTypeInfoLoader(void)",
        ),
    ),
    (
        "OnFileOperationsComplete__17radTypeInfoLoaderPv",
        Ok(
            "radTypeInfoLoader::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "__tf17radObjectListNode",
        Ok(
            "radObjectListNode type_info function",
        ),
    ),
    (
        "__tf14IRadObjectList",
        Ok(
            "IRadObjectList type_info function",
        ),
    ),
    (
        "__tf18IRadTypeInfoLoader",
        Ok(
            "IRadTypeInfoLoader type_info function",
        ),
    ),
    (
        "__tf12IRadTypeInfo",
        Ok(
            "IRadTypeInfo type_info function",
        ),
    ),
    (
        "__tf22IRadTypeInfoIntLiteral",
        Ok(
            "IRadTypeInfoIntLiteral type_info function",
        ),
    ),
    (
        "__tf16IRadTypeInfoEnum",
        Ok(
            "IRadTypeInfoEnum type_info function",
        ),
    ),
    (
        "_$_17IRadTypeInfoParam",
        Ok(
            "IRadTypeInfoParam::~IRadTypeInfoParam(void)",
        ),
    ),
    (
        "__tf17IRadTypeInfoParam",
        Ok(
            "IRadTypeInfoParam type_info function",
        ),
    ),
    (
        "__tf18IRadTypeInfoMethod",
        Ok(
            "IRadTypeInfoMethod type_info function",
        ),
    ),
    (
        "_$_17radObjectListNode",
        Ok(
            "radObjectListNode::~radObjectListNode(void)",
        ),
    ),
    (
        "AddRef__14IRadObjectList",
        Ok(
            "IRadObjectList::AddRef(void)",
        ),
    ),
    (
        "Release__14IRadObjectList",
        Ok(
            "IRadObjectList::Release(void)",
        ),
    ),
    (
        "_$_14IRadObjectList",
        Ok(
            "IRadObjectList::~IRadObjectList(void)",
        ),
    ),
    (
        "AddRef__12IRadTypeInfo",
        Ok(
            "IRadTypeInfo::AddRef(void)",
        ),
    ),
    (
        "Release__12IRadTypeInfo",
        Ok(
            "IRadTypeInfo::Release(void)",
        ),
    ),
    (
        "AddRef__22IRadTypeInfoIntLiteral",
        Ok(
            "IRadTypeInfoIntLiteral::AddRef(void)",
        ),
    ),
    (
        "Release__22IRadTypeInfoIntLiteral",
        Ok(
            "IRadTypeInfoIntLiteral::Release(void)",
        ),
    ),
    (
        "AddRef__16IRadTypeInfoEnum",
        Ok(
            "IRadTypeInfoEnum::AddRef(void)",
        ),
    ),
    (
        "Release__16IRadTypeInfoEnum",
        Ok(
            "IRadTypeInfoEnum::Release(void)",
        ),
    ),
    (
        "AddRef__17IRadTypeInfoParam",
        Ok(
            "IRadTypeInfoParam::AddRef(void)",
        ),
    ),
    (
        "Release__17IRadTypeInfoParam",
        Ok(
            "IRadTypeInfoParam::Release(void)",
        ),
    ),
    (
        "AddRef__18IRadTypeInfoMethod",
        Ok(
            "IRadTypeInfoMethod::AddRef(void)",
        ),
    ),
    (
        "Release__18IRadTypeInfoMethod",
        Ok(
            "IRadTypeInfoMethod::Release(void)",
        ),
    ),
    (
        "_$_16IRadTypeInfoEnum",
        Ok(
            "IRadTypeInfoEnum::~IRadTypeInfoEnum(void)",
        ),
    ),
    (
        "_$_22IRadTypeInfoIntLiteral",
        Ok(
            "IRadTypeInfoIntLiteral::~IRadTypeInfoIntLiteral(void)",
        ),
    ),
    (
        "Initialize__17IRadTypeInfoParamPCcT1i",
        Ok(
            "IRadTypeInfoParam::Initialize(char const *, char const *, int)",
        ),
    ),
    (
        "_$_18IRadTypeInfoMethod",
        Ok(
            "IRadTypeInfoMethod::~IRadTypeInfoMethod(void)",
        ),
    ),
    (
        "_$_12IRadTypeInfo",
        Ok(
            "IRadTypeInfo::~IRadTypeInfo(void)",
        ),
    ),
    (
        "Invoke__18IRadTypeInfoMethodPvT1Ui",
        Ok(
            "IRadTypeInfoMethod::Invoke(void *, void *, unsigned int)",
        ),
    ),
    (
        "InvokeVf",
        Err(
            NotMangled,
        ),
    ),
    (
        "radTypeInfoSystemGet__Fv",
        Ok(
            "radTypeInfoSystemGet(void)",
        ),
    ),
    (
        "radTypeInfoSystemInitialize__Fi",
        Ok(
            "radTypeInfoSystemInitialize(int)",
        ),
    ),
    (
        "radTypeInfoSystemTerminate__Fv",
        Ok(
            "radTypeInfoSystemTerminate(void)",
        ),
    ),
    (
        "radScriptUnLoadAllTypeInfo__Fv",
        Ok(
            "radScriptUnLoadAllTypeInfo(void)",
        ),
    ),
    (
        "__tf18IRadTypeInfoSystem",
        Ok(
            "IRadTypeInfoSystem type_info function",
        ),
    ),
    (
        "AddRef__18IRadTypeInfoSystem",
        Ok(
            "IRadTypeInfoSystem::AddRef(void)",
        ),
    ),
    (
        "Release__18IRadTypeInfoSystem",
        Ok(
            "IRadTypeInfoSystem::Release(void)",
        ),
    ),
    (
        "_$_18IRadTypeInfoSystem",
        Ok(
            "IRadTypeInfoSystem::~IRadTypeInfoSystem(void)",
        ),
    ),
    (
        "_GLOBAL_$I$_11ParserConst$TOK_CREATE",
        Ok(
            "global constructors keyed to ParserConst::TOK_CREATE",
        ),
    ),
    (
        "_GLOBAL_$D$_11ParserConst$TOK_CREATE",
        Ok(
            "global destructors keyed to ParserConst::TOK_CREATE",
        ),
    ),
    (
        "__14radMoviePlayer",
        Ok(
            "radMoviePlayer::radMoviePlayer(void)",
        ),
    ),
    (
        "_$_14radMoviePlayer",
        Ok(
            "radMoviePlayer::~radMoviePlayer(void)",
        ),
    ),
    (
        "Initialize__14radMoviePlayerP19IRadMovieRenderLoopP23IRadMovieRenderStrategyUiUiUiUiUiQ223IRadSoundHalAudioFormat8SizeType",
        Ok(
            "radMoviePlayer::Initialize(IRadMovieRenderLoop *, IRadMovieRenderStrategy *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, IRadSoundHalAudioFormat::SizeType)",
        ),
    ),
    (
        "Render__14radMoviePlayer",
        Ok(
            "radMoviePlayer::Render(void)",
        ),
    ),
    (
        "Load__14radMoviePlayerPCcUi",
        Ok(
            "radMoviePlayer::Load(char const *, unsigned int)",
        ),
    ),
    (
        "Unload__14radMoviePlayer",
        Ok(
            "radMoviePlayer::Unload(void)",
        ),
    ),
    (
        "Play__14radMoviePlayer",
        Ok(
            "radMoviePlayer::Play(void)",
        ),
    ),
    (
        "Pause__14radMoviePlayer",
        Ok(
            "radMoviePlayer::Pause(void)",
        ),
    ),
    (
        "SetPan__14radMoviePlayerf",
        Ok(
            "radMoviePlayer::SetPan(float)",
        ),
    ),
    (
        "GetPan__14radMoviePlayer",
        Ok(
            "radMoviePlayer::GetPan(void)",
        ),
    ),
    (
        "SetVolume__14radMoviePlayerf",
        Ok(
            "radMoviePlayer::SetVolume(float)",
        ),
    ),
    (
        "GetVolume__14radMoviePlayer",
        Ok(
            "radMoviePlayer::GetVolume(void)",
        ),
    ),
    (
        "GetState__14radMoviePlayer",
        Ok(
            "radMoviePlayer::GetState(void)",
        ),
    ),
    (
        "GetVideoFrameInfo__14radMoviePlayerPQ216IRadMoviePlayer214VideoFrameInfo",
        Ok(
            "radMoviePlayer::GetVideoFrameInfo(IRadMoviePlayer2::VideoFrameInfo *)",
        ),
    ),
    (
        "GetFrameRate__14radMoviePlayer",
        Ok(
            "radMoviePlayer::GetFrameRate(void)",
        ),
    ),
    (
        "GetCurrentFrameNumber__14radMoviePlayer",
        Ok(
            "radMoviePlayer::GetCurrentFrameNumber(void)",
        ),
    ),
    (
        "OnFileOperationsComplete__14radMoviePlayerPv",
        Ok(
            "radMoviePlayer::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "Service__14radMoviePlayer",
        Ok(
            "radMoviePlayer::Service(void)",
        ),
    ),
    (
        "GetCurrentTime__14radMoviePlayer",
        Ok(
            "radMoviePlayer::GetCurrentTime(void)",
        ),
    ),
    (
        "SetState__14radMoviePlayerQ216IRadMoviePlayer25State",
        Ok(
            "radMoviePlayer::SetState(IRadMoviePlayer2::State)",
        ),
    ),
    (
        "InternalPlay__14radMoviePlayer",
        Ok(
            "radMoviePlayer::InternalPlay(void)",
        ),
    ),
    (
        "radMoviePlayerCreate2__Fi",
        Ok(
            "radMoviePlayerCreate2(int)",
        ),
    ),
    (
        "radMovieInitialize2__Fi",
        Ok(
            "radMovieInitialize2(int)",
        ),
    ),
    (
        "radMovieTerminate2__Fv",
        Ok(
            "radMovieTerminate2(void)",
        ),
    ),
    (
        "radMovieService2__Fv",
        Ok(
            "radMovieService2(void)",
        ),
    ),
    (
        "__tf14radMoviePlayer",
        Ok(
            "radMoviePlayer type_info function",
        ),
    ),
    (
        "__tft14radLinkedClass1Z14radMoviePlayer",
        Ok(
            "radLinkedClass<radMoviePlayer> type_info function",
        ),
    ),
    (
        "__16IRadMoviePlayer2",
        Ok(
            "IRadMoviePlayer2::IRadMoviePlayer2(void)",
        ),
    ),
    (
        "AddRef__14radMoviePlayer",
        Ok(
            "radMoviePlayer::AddRef(void)",
        ),
    ),
    (
        "Release__14radMoviePlayer",
        Ok(
            "radMoviePlayer::Release(void)",
        ),
    ),
    (
        "__tf16IRadMoviePlayer2",
        Ok(
            "IRadMoviePlayer2 type_info function",
        ),
    ),
    (
        "__14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::radMovieIpuPs2(void)",
        ),
    ),
    (
        "_$_14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::~radMovieIpuPs2(void)",
        ),
    ),
    (
        "Service__14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::Service(void)",
        ),
    ),
    (
        "InputAsync__14radMovieIpuPs2PvUi",
        Ok(
            "radMovieIpuPs2::InputAsync(void *, unsigned int)",
        ),
    ),
    (
        "IsInputRequired__14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::IsInputRequired(void)",
        ),
    ),
    (
        "DecodeFrameAsync__14radMovieIpuPs2PvUi",
        Ok(
            "radMovieIpuPs2::DecodeFrameAsync(void *, unsigned int)",
        ),
    ),
    (
        "GetState__14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::GetState(void)",
        ),
    ),
    (
        "Flush__14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::Flush(void)",
        ),
    ),
    (
        "DmaFromIpuHandler__14radMovieIpuPs2iPvT2",
        Ok(
            "radMovieIpuPs2::DmaFromIpuHandler(int, void *, void *)",
        ),
    ),
    (
        "OnDmaInterruptFromIpu__14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::OnDmaInterruptFromIpu(void)",
        ),
    ),
    (
        "Initialize__14radMovieIpuPs2i",
        Ok(
            "radMovieIpuPs2::Initialize(int)",
        ),
    ),
    (
        "Terminate__14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::Terminate(void)",
        ),
    ),
    (
        "GetInstance__14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::GetInstance(void)",
        ),
    ),
    (
        "radMovieVideoDecoderInitialize__Fi",
        Ok(
            "radMovieVideoDecoderInitialize(int)",
        ),
    ),
    (
        "radMovieVideoDecoderTerminate__Fv",
        Ok(
            "radMovieVideoDecoderTerminate(void)",
        ),
    ),
    (
        "__tf14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2 type_info function",
        ),
    ),
    (
        "AddRef__14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::AddRef(void)",
        ),
    ),
    (
        "Release__14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::Release(void)",
        ),
    ),
    (
        "_GLOBAL_$I$_14radMovieIpuPs2$s_refTheRadMovieIpuPs2",
        Ok(
            "global constructors keyed to radMovieIpuPs2::s_refTheRadMovieIpuPs2",
        ),
    ),
    (
        "_GLOBAL_$D$_14radMovieIpuPs2$s_refTheRadMovieIpuPs2",
        Ok(
            "global destructors keyed to radMovieIpuPs2::s_refTheRadMovieIpuPs2",
        ),
    ),
    (
        "__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::radMovieVideoDecoderPs2(void)",
        ),
    ),
    (
        "_$_23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::~radMovieVideoDecoderPs2(void)",
        ),
    ),
    (
        "Initialize__23radMovieVideoDecoderPs2UiUiUi",
        Ok(
            "radMovieVideoDecoderPs2::Initialize(unsigned int, unsigned int, unsigned int)",
        ),
    ),
    (
        "SetSource__23radMovieVideoDecoderPs2P8IRadFileUiUiUiUi",
        Ok(
            "radMovieVideoDecoderPs2::SetSource(IRadFile *, unsigned int, unsigned int, unsigned int, unsigned int)",
        ),
    ),
    (
        "Reset__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::Reset(void)",
        ),
    ),
    (
        "Service__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::Service(void)",
        ),
    ),
    (
        "MonitorDecoder__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::MonitorDecoder(void)",
        ),
    ),
    (
        "AddDataToBuffer__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::AddDataToBuffer(void)",
        ),
    ),
    (
        "AddDataToDecoder__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::AddDataToDecoder(void)",
        ),
    ),
    (
        "GetState__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::GetState(void)",
        ),
    ),
    (
        "GetFrameRate__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::GetFrameRate(void)",
        ),
    ),
    (
        "GetCurrentFrameNumber__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::GetCurrentFrameNumber(void)",
        ),
    ),
    (
        "GetLockedVideoFrame__23radMovieVideoDecoderPs2PUi",
        Ok(
            "radMovieVideoDecoderPs2::GetLockedVideoFrame(unsigned int *)",
        ),
    ),
    (
        "UnlockVideoFrame__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::UnlockVideoFrame(void)",
        ),
    ),
    (
        "OnFileOperationsComplete__23radMovieVideoDecoderPs2Pv",
        Ok(
            "radMovieVideoDecoderPs2::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "DecodeNextFrame__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::DecodeNextFrame(void)",
        ),
    ),
    (
        "SetState__23radMovieVideoDecoderPs2Q221IRadMovieVideoDecoder5State",
        Ok(
            "radMovieVideoDecoderPs2::SetState(IRadMovieVideoDecoder::State)",
        ),
    ),
    (
        "SetFileState__23radMovieVideoDecoderPs2Q223radMovieVideoDecoderPs29FileState",
        Ok(
            "radMovieVideoDecoderPs2::SetFileState(radMovieVideoDecoderPs2::FileState)",
        ),
    ),
    (
        "radMovieVideoDecoderCreate__Fi",
        Ok(
            "radMovieVideoDecoderCreate(int)",
        ),
    ),
    (
        "__tf23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2 type_info function",
        ),
    ),
    (
        "__21IRadMovieVideoDecoder",
        Ok(
            "IRadMovieVideoDecoder::IRadMovieVideoDecoder(void)",
        ),
    ),
    (
        "AddRef__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::AddRef(void)",
        ),
    ),
    (
        "Release__23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2::Release(void)",
        ),
    ),
    (
        "__tf21IRadMovieVideoDecoder",
        Ok(
            "IRadMovieVideoDecoder type_info function",
        ),
    ),
    (
        "__25radMovieRenderStrategyPs2",
        Ok(
            "radMovieRenderStrategyPs2::radMovieRenderStrategyPs2(void)",
        ),
    ),
    (
        "_$_25radMovieRenderStrategyPs2",
        Ok(
            "radMovieRenderStrategyPs2::~radMovieRenderStrategyPs2(void)",
        ),
    ),
    (
        "SetParameters__25radMovieRenderStrategyPs2UiUi",
        Ok(
            "radMovieRenderStrategyPs2::SetParameters(unsigned int, unsigned int)",
        ),
    ),
    (
        "Render__25radMovieRenderStrategyPs2Pv",
        Ok(
            "radMovieRenderStrategyPs2::Render(void *)",
        ),
    ),
    (
        "PrepareImageTags__25radMovieRenderStrategyPs2PvPUi",
        Ok(
            "radMovieRenderStrategyPs2::PrepareImageTags(void *, unsigned int *)",
        ),
    ),
    (
        "radMovieSimpleFullScreenRenderStrategyCreate__Fi",
        Ok(
            "radMovieSimpleFullScreenRenderStrategyCreate(int)",
        ),
    ),
    (
        "__tf25radMovieRenderStrategyPs2",
        Ok(
            "radMovieRenderStrategyPs2 type_info function",
        ),
    ),
    (
        "__23IRadMovieRenderStrategy",
        Ok(
            "IRadMovieRenderStrategy::IRadMovieRenderStrategy(void)",
        ),
    ),
    (
        "AddRef__25radMovieRenderStrategyPs2",
        Ok(
            "radMovieRenderStrategyPs2::AddRef(void)",
        ),
    ),
    (
        "Release__25radMovieRenderStrategyPs2",
        Ok(
            "radMovieRenderStrategyPs2::Release(void)",
        ),
    ),
    (
        "__tf23IRadMovieRenderStrategy",
        Ok(
            "IRadMovieRenderStrategy type_info function",
        ),
    ),
    (
        "__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::radMovieAudioDataSource(void)",
        ),
    ),
    (
        "_$_23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::~radMovieAudioDataSource(void)",
        ),
    ),
    (
        "GetState__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::GetState(void)",
        ),
    ),
    (
        "Initialize__23radMovieAudioDataSourceP8IRadFileUiUi",
        Ok(
            "radMovieAudioDataSource::Initialize(IRadFile *, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetFormat__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::GetFormat(void)",
        ),
    ),
    (
        "GetRemainingFrames__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::GetRemainingFrames(void)",
        ),
    ),
    (
        "GetFramesAsync__23radMovieAudioDataSourcePv14radMemorySpaceUiP30IRadSoundHalDataSourceCallback",
        Ok(
            "radMovieAudioDataSource::GetFramesAsync(void *, radMemorySpace, unsigned int, IRadSoundHalDataSourceCallback *)",
        ),
    ),
    (
        "OnFileOperationsComplete__23radMovieAudioDataSourcePv",
        Ok(
            "radMovieAudioDataSource::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "_StateOpeningFile__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::_StateOpeningFile(void)",
        ),
    ),
    (
        "_StateReadingHeader__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::_StateReadingHeader(void)",
        ),
    ),
    (
        "InitFile__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::InitFile(void)",
        ),
    ),
    (
        "_StateIdle__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::_StateIdle(void)",
        ),
    ),
    (
        "_StateReadingData__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::_StateReadingData(void)",
        ),
    ),
    (
        "radMovieAudioDataSourceCreate__Fi",
        Ok(
            "radMovieAudioDataSourceCreate(int)",
        ),
    ),
    (
        "__tf23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource type_info function",
        ),
    ),
    (
        "AddRef__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::AddRef(void)",
        ),
    ),
    (
        "Release__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::Release(void)",
        ),
    ),
    (
        "GetName__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::GetName(void)",
        ),
    ),
    (
        "GetAvailableFrames__23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource::GetAvailableFrames(void)",
        ),
    ),
    (
        "rDebugVsnPrintf__FPcUiPCcT0",
        Ok(
            "rDebugVsnPrintf(char *, unsigned int, char const *, char *)",
        ),
    ),
    (
        "rDebugSnPrintf__FPcUiPCce",
        Ok(
            "rDebugSnPrintf(char *, unsigned int, char const *, ...)",
        ),
    ),
    (
        "rDebugAssertFail_Implementation__FPCcT0Ui",
        Ok(
            "rDebugAssertFail_Implementation(char const *, char const *, unsigned int)",
        ),
    ),
    (
        "rDebugWarningFail_Implementation__FPCcT0Ui",
        Ok(
            "rDebugWarningFail_Implementation(char const *, char const *, unsigned int)",
        ),
    ),
    (
        "rDebugString_Implementation__FPCc",
        Ok(
            "rDebugString_Implementation(char const *)",
        ),
    ),
    (
        "rDebuggerString_Implementation__FPCc",
        Ok(
            "rDebuggerString_Implementation(char const *)",
        ),
    ),
    (
        "rReleasePrintf__FPCce",
        Ok(
            "rReleasePrintf(char const *, ...)",
        ),
    ),
    (
        "_GLOBAL_$I$rDebugVsnPrintf__FPcUiPCcT0",
        Ok(
            "global constructors keyed to rDebugVsnPrintf(char *, unsigned int, char const *, char *)",
        ),
    ),
    (
        "_GLOBAL_$D$rDebugVsnPrintf__FPcUiPCcT0",
        Ok(
            "global destructors keyed to rDebugVsnPrintf(char *, unsigned int, char const *, char *)",
        ),
    ),
    (
        "radTimeInitialize__Fv",
        Ok(
            "radTimeInitialize(void)",
        ),
    ),
    (
        "radTimeTerminate__Fv",
        Ok(
            "radTimeTerminate(void)",
        ),
    ),
    (
        "radTimeGetMicroseconds__Fv",
        Ok(
            "radTimeGetMicroseconds(void)",
        ),
    ),
    (
        "radTimeGetMicroseconds64__Fv",
        Ok(
            "radTimeGetMicroseconds64(void)",
        ),
    ),
    (
        "radTimeGetMilliseconds__Fv",
        Ok(
            "radTimeGetMilliseconds(void)",
        ),
    ),
    (
        "radTimeGetSeconds__Fv",
        Ok(
            "radTimeGetSeconds(void)",
        ),
    ),
    (
        "radTimeGetDate__FP7radDate",
        Ok(
            "radTimeGetDate(radDate *)",
        ),
    ),
    (
        "radTimeGetWeekday__FUsUcUc",
        Ok(
            "radTimeGetWeekday(unsigned short, unsigned char, unsigned char)",
        ),
    ),
    (
        "radTimeCreateList__FPP13IRadTimerListUii",
        Ok(
            "radTimeCreateList(IRadTimerList **, unsigned int, int)",
        ),
    ),
    (
        "__12radTimerListUii",
        Ok(
            "radTimerList::radTimerList(unsigned int, int)",
        ),
    ),
    (
        "_$_12radTimerList",
        Ok(
            "radTimerList::~radTimerList(void)",
        ),
    ),
    (
        "AddRef__12radTimerList",
        Ok(
            "radTimerList::AddRef(void)",
        ),
    ),
    (
        "Release__12radTimerList",
        Ok(
            "radTimerList::Release(void)",
        ),
    ),
    (
        "CreateTimer__12radTimerListPP9IRadTimerUiP17IRadTimerCallbackPvbQ29IRadTimer9ResetMode",
        Ok(
            "radTimerList::CreateTimer(IRadTimer **, unsigned int, IRadTimerCallback *, void *, bool, IRadTimer::ResetMode)",
        ),
    ),
    (
        "Service__12radTimerList",
        Ok(
            "radTimerList::Service(void)",
        ),
    ),
    (
        "Service__12radTimerListUi",
        Ok(
            "radTimerList::Service(unsigned int)",
        ),
    ),
    (
        "AllocateTimerMemory__12radTimerList",
        Ok(
            "radTimerList::AllocateTimerMemory(void)",
        ),
    ),
    (
        "FreeTimerMemory__12radTimerListPv",
        Ok(
            "radTimerList::FreeTimerMemory(void *)",
        ),
    ),
    (
        "__8radTimerP12radTimerListUiP17IRadTimerCallbackPvbQ29IRadTimer9ResetMode",
        Ok(
            "radTimer::radTimer(radTimerList *, unsigned int, IRadTimerCallback *, void *, bool, IRadTimer::ResetMode)",
        ),
    ),
    (
        "_$_8radTimer",
        Ok(
            "radTimer::~radTimer(void)",
        ),
    ),
    (
        "__nw__8radTimerUiP12radTimerList",
        Ok(
            "radTimer::operator new(unsigned int, radTimerList *)",
        ),
    ),
    (
        "AddRef__8radTimer",
        Ok(
            "radTimer::AddRef(void)",
        ),
    ),
    (
        "Release__8radTimer",
        Ok(
            "radTimer::Release(void)",
        ),
    ),
    (
        "Start__8radTimer",
        Ok(
            "radTimer::Start(void)",
        ),
    ),
    (
        "Stop__8radTimer",
        Ok(
            "radTimer::Stop(void)",
        ),
    ),
    (
        "RegisterCallback__8radTimerP17IRadTimerCallbackPv",
        Ok(
            "radTimer::RegisterCallback(IRadTimerCallback *, void *)",
        ),
    ),
    (
        "UnregisterCallback__8radTimerP17IRadTimerCallback",
        Ok(
            "radTimer::UnregisterCallback(IRadTimerCallback *)",
        ),
    ),
    (
        "GetTimeout__8radTimer",
        Ok(
            "radTimer::GetTimeout(void)",
        ),
    ),
    (
        "SetTimeout__8radTimerUi",
        Ok(
            "radTimer::SetTimeout(unsigned int)",
        ),
    ),
    (
        "GetResetMode__8radTimer",
        Ok(
            "radTimer::GetResetMode(void)",
        ),
    ),
    (
        "SetResetMode__8radTimerQ29IRadTimer9ResetMode",
        Ok(
            "radTimer::SetResetMode(IRadTimer::ResetMode)",
        ),
    ),
    (
        "HasTimerExpired__8radTimer",
        Ok(
            "radTimer::HasTimerExpired(void)",
        ),
    ),
    (
        "__tf12radTimerList",
        Ok(
            "radTimerList type_info function",
        ),
    ),
    (
        "__tf8radTimer",
        Ok(
            "radTimer type_info function",
        ),
    ),
    (
        "__9IRadTimer",
        Ok(
            "IRadTimer::IRadTimer(void)",
        ),
    ),
    (
        "__13IRadTimerList",
        Ok(
            "IRadTimerList::IRadTimerList(void)",
        ),
    ),
    (
        "__tf9IRadTimer",
        Ok(
            "IRadTimer type_info function",
        ),
    ),
    (
        "__tf13IRadTimerList",
        Ok(
            "IRadTimerList type_info function",
        ),
    ),
    (
        "radTimeCreateStopwatch__FPP13IRadStopwatch11radTimeUniti",
        Ok(
            "radTimeCreateStopwatch(IRadStopwatch **, radTimeUnit, int)",
        ),
    ),
    (
        "radTimeGetUnitName__F11radTimeUnitPc",
        Ok(
            "radTimeGetUnitName(radTimeUnit, char *)",
        ),
    ),
    (
        "__12radStopwatch",
        Ok(
            "radStopwatch::radStopwatch(void)",
        ),
    ),
    (
        "_$_12radStopwatch",
        Ok(
            "radStopwatch::~radStopwatch(void)",
        ),
    ),
    (
        "AddRef__12radStopwatch",
        Ok(
            "radStopwatch::AddRef(void)",
        ),
    ),
    (
        "Release__12radStopwatch",
        Ok(
            "radStopwatch::Release(void)",
        ),
    ),
    (
        "Start__12radStopwatch",
        Ok(
            "radStopwatch::Start(void)",
        ),
    ),
    (
        "Stop__12radStopwatch",
        Ok(
            "radStopwatch::Stop(void)",
        ),
    ),
    (
        "GetElapsedTime__C12radStopwatch",
        Ok(
            "radStopwatch::GetElapsedTime(void) const",
        ),
    ),
    (
        "GetElapsedTime__C12radStopwatch11radTimeUnit",
        Ok(
            "radStopwatch::GetElapsedTime(radTimeUnit) const",
        ),
    ),
    (
        "IsRunning__C12radStopwatch",
        Ok(
            "radStopwatch::IsRunning(void) const",
        ),
    ),
    (
        "Reset__12radStopwatch",
        Ok(
            "radStopwatch::Reset(void)",
        ),
    ),
    (
        "SetTimeUnits__12radStopwatch11radTimeUnit",
        Ok(
            "radStopwatch::SetTimeUnits(radTimeUnit)",
        ),
    ),
    (
        "GetTimeUnits__C12radStopwatch",
        Ok(
            "radStopwatch::GetTimeUnits(void) const",
        ),
    ),
    (
        "GetConversionFactor__12radStopwatch11radTimeUnitT1PUiT3",
        Ok(
            "radStopwatch::GetConversionFactor(radTimeUnit, radTimeUnit, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "GetTime__C12radStopwatch",
        Ok(
            "radStopwatch::GetTime(void) const",
        ),
    ),
    (
        "__tf12radStopwatch",
        Ok(
            "radStopwatch type_info function",
        ),
    ),
    (
        "__13IRadStopwatch",
        Ok(
            "IRadStopwatch::IRadStopwatch(void)",
        ),
    ),
    (
        "__tf13IRadStopwatch",
        Ok(
            "IRadStopwatch type_info function",
        ),
    ),
    (
        "radMemoryRoundUp__FUiUi",
        Ok(
            "radMemoryRoundUp(unsigned int, unsigned int)",
        ),
    ),
    (
        "radMemoryRoundDown__FUiUi",
        Ok(
            "radMemoryRoundDown(unsigned int, unsigned int)",
        ),
    ),
    (
        "radMemoryIsAligned__FUiUi",
        Ok(
            "radMemoryIsAligned(unsigned int, unsigned int)",
        ),
    ),
    (
        "dlmalloc",
        Err(
            NotMangled,
        ),
    ),
    (
        "dlfree",
        Err(
            NotMangled,
        ),
    ),
    (
        "dlmemalign",
        Err(
            NotMangled,
        ),
    ),
    (
        "dlmallinfo",
        Err(
            NotMangled,
        ),
    ),
    (
        "dlmallopt",
        Err(
            NotMangled,
        ),
    ),
    (
        "fake_sbrk",
        Err(
            NotMangled,
        ),
    ),
    (
        "radMemoryCreateDougLeaHeap__FUiiPCc",
        Ok(
            "radMemoryCreateDougLeaHeap(unsigned int, int, char const *)",
        ),
    ),
    (
        "__tf20radMemoryDlAllocator",
        Ok(
            "radMemoryDlAllocator type_info function",
        ),
    ),
    (
        "__14IRadMemoryHeap",
        Ok(
            "IRadMemoryHeap::IRadMemoryHeap(void)",
        ),
    ),
    (
        "AllowFreeing__14IRadMemoryHeapb",
        Ok(
            "IRadMemoryHeap::AllowFreeing(bool)",
        ),
    ),
    (
        "AddRef__20radMemoryDlAllocator",
        Ok(
            "radMemoryDlAllocator::AddRef(void)",
        ),
    ),
    (
        "Release__20radMemoryDlAllocator",
        Ok(
            "radMemoryDlAllocator::Release(void)",
        ),
    ),
    (
        "ValidateHeap__20radMemoryDlAllocator",
        Ok(
            "radMemoryDlAllocator::ValidateHeap(void)",
        ),
    ),
    (
        "GetMemoryObject__20radMemoryDlAllocatorPP16IRadMemoryObjectUi",
        Ok(
            "radMemoryDlAllocator::GetMemoryObject(IRadMemoryObject **, unsigned int)",
        ),
    ),
    (
        "GetMemoryObjectAligned__20radMemoryDlAllocatorPP16IRadMemoryObjectUiUi",
        Ok(
            "radMemoryDlAllocator::GetMemoryObjectAligned(IRadMemoryObject **, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetMemory__20radMemoryDlAllocatorUi",
        Ok(
            "radMemoryDlAllocator::GetMemory(unsigned int)",
        ),
    ),
    (
        "GetMemoryAligned__20radMemoryDlAllocatorUiUi",
        Ok(
            "radMemoryDlAllocator::GetMemoryAligned(unsigned int, unsigned int)",
        ),
    ),
    (
        "FreeMemoryAligned__20radMemoryDlAllocatorPv",
        Ok(
            "radMemoryDlAllocator::FreeMemoryAligned(void *)",
        ),
    ),
    (
        "FreeMemory__20radMemoryDlAllocatorPv",
        Ok(
            "radMemoryDlAllocator::FreeMemory(void *)",
        ),
    ),
    (
        "CanFreeMemory__20radMemoryDlAllocatorPv",
        Ok(
            "radMemoryDlAllocator::CanFreeMemory(void *)",
        ),
    ),
    (
        "CanFreeMemoryAligned__20radMemoryDlAllocatorPv",
        Ok(
            "radMemoryDlAllocator::CanFreeMemoryAligned(void *)",
        ),
    ),
    (
        "GetStatus__20radMemoryDlAllocatorPUiN31",
        Ok(
            "radMemoryDlAllocator::GetStatus(unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "GetSize__20radMemoryDlAllocator",
        Ok(
            "radMemoryDlAllocator::GetSize(void)",
        ),
    ),
    (
        "Chain__20radMemoryDlAllocatorP14IRadMemoryHeap",
        Ok(
            "radMemoryDlAllocator::Chain(IRadMemoryHeap *)",
        ),
    ),
    (
        "_$_20radMemoryDlAllocator",
        Ok(
            "radMemoryDlAllocator::~radMemoryDlAllocator(void)",
        ),
    ),
    (
        "__19IRadMemoryAllocator",
        Ok(
            "IRadMemoryAllocator::IRadMemoryAllocator(void)",
        ),
    ),
    (
        "radMemoryExternalHeapCreate__FPP14IRadMemoryHeapPvUi14radMemorySpaceUiUiiPCc",
        Ok(
            "radMemoryExternalHeapCreate(IRadMemoryHeap **, void *, unsigned int, radMemorySpace, unsigned int, unsigned int, int, char const *)",
        ),
    ),
    (
        "__nw__18ExternalMemoryHeapUii",
        Ok(
            "ExternalMemoryHeap::operator new(unsigned int, int)",
        ),
    ),
    (
        "__dl__18ExternalMemoryHeapPv",
        Ok(
            "ExternalMemoryHeap::operator delete(void *)",
        ),
    ),
    (
        "AddRef__18ExternalMemoryHeap",
        Ok(
            "ExternalMemoryHeap::AddRef(void)",
        ),
    ),
    (
        "Release__18ExternalMemoryHeap",
        Ok(
            "ExternalMemoryHeap::Release(void)",
        ),
    ),
    (
        "GetMemoryObject__18ExternalMemoryHeapPP16IRadMemoryObjectUi",
        Ok(
            "ExternalMemoryHeap::GetMemoryObject(IRadMemoryObject **, unsigned int)",
        ),
    ),
    (
        "GetMemoryObjectAligned__18ExternalMemoryHeapPP16IRadMemoryObjectUiUi",
        Ok(
            "ExternalMemoryHeap::GetMemoryObjectAligned(IRadMemoryObject **, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetMemory__18ExternalMemoryHeapUi",
        Ok(
            "ExternalMemoryHeap::GetMemory(unsigned int)",
        ),
    ),
    (
        "GetMemoryAligned__18ExternalMemoryHeapUiUi",
        Ok(
            "ExternalMemoryHeap::GetMemoryAligned(unsigned int, unsigned int)",
        ),
    ),
    (
        "CanFree__18ExternalMemoryHeapPv",
        Ok(
            "ExternalMemoryHeap::CanFree(void *)",
        ),
    ),
    (
        "FreeMemory__18ExternalMemoryHeapPv",
        Ok(
            "ExternalMemoryHeap::FreeMemory(void *)",
        ),
    ),
    (
        "FreeMemoryAligned__18ExternalMemoryHeapPv",
        Ok(
            "ExternalMemoryHeap::FreeMemoryAligned(void *)",
        ),
    ),
    (
        "CanFreeMemory__18ExternalMemoryHeapPv",
        Ok(
            "ExternalMemoryHeap::CanFreeMemory(void *)",
        ),
    ),
    (
        "CanFreeMemoryAligned__18ExternalMemoryHeapPv",
        Ok(
            "ExternalMemoryHeap::CanFreeMemoryAligned(void *)",
        ),
    ),
    (
        "GetStatus__18ExternalMemoryHeapPUiN31",
        Ok(
            "ExternalMemoryHeap::GetStatus(unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "Map__18ExternalMemoryHeap",
        Ok(
            "ExternalMemoryHeap::Map(void)",
        ),
    ),
    (
        "Initialize__18ExternalMemoryHeapPvUi14radMemorySpaceUiUiiPCc",
        Ok(
            "ExternalMemoryHeap::Initialize(void *, unsigned int, radMemorySpace, unsigned int, unsigned int, int, char const *)",
        ),
    ),
    (
        "__18ExternalMemoryHeap",
        Ok(
            "ExternalMemoryHeap::ExternalMemoryHeap(void)",
        ),
    ),
    (
        "_$_18ExternalMemoryHeap",
        Ok(
            "ExternalMemoryHeap::~ExternalMemoryHeap(void)",
        ),
    ),
    (
        "Allocate__18ExternalMemoryHeapUiUi",
        Ok(
            "ExternalMemoryHeap::Allocate(unsigned int, unsigned int)",
        ),
    ),
    (
        "AllocateFirstFit__18ExternalMemoryHeapUiUi",
        Ok(
            "ExternalMemoryHeap::AllocateFirstFit(unsigned int, unsigned int)",
        ),
    ),
    (
        "SplitBlockBottom__18ExternalMemoryHeapP20ExternalMemoryObjectUiUi",
        Ok(
            "ExternalMemoryHeap::SplitBlockBottom(ExternalMemoryObject *, unsigned int, unsigned int)",
        ),
    ),
    (
        "Free__18ExternalMemoryHeapP20ExternalMemoryObject",
        Ok(
            "ExternalMemoryHeap::Free(ExternalMemoryObject *)",
        ),
    ),
    (
        "GetSize__18ExternalMemoryHeap",
        Ok(
            "ExternalMemoryHeap::GetSize(void)",
        ),
    ),
    (
        "ValidateHeap__18ExternalMemoryHeap",
        Ok(
            "ExternalMemoryHeap::ValidateHeap(void)",
        ),
    ),
    (
        "__tf18ExternalMemoryHeap",
        Ok(
            "ExternalMemoryHeap type_info function",
        ),
    ),
    (
        "__16IRadMemoryObject",
        Ok(
            "IRadMemoryObject::IRadMemoryObject(void)",
        ),
    ),
    (
        "Chain__18ExternalMemoryHeapP14IRadMemoryHeap",
        Ok(
            "ExternalMemoryHeap::Chain(IRadMemoryHeap *)",
        ),
    ),
    (
        "__tf16IRadMemoryObject",
        Ok(
            "IRadMemoryObject type_info function",
        ),
    ),
    (
        "AddRef__20ExternalMemoryObject",
        Ok(
            "ExternalMemoryObject::AddRef(void)",
        ),
    ),
    (
        "Release__20ExternalMemoryObject",
        Ok(
            "ExternalMemoryObject::Release(void)",
        ),
    ),
    (
        "GetMemoryAddress__20ExternalMemoryObject",
        Ok(
            "ExternalMemoryObject::GetMemoryAddress(void)",
        ),
    ),
    (
        "GetMemorySize__20ExternalMemoryObject",
        Ok(
            "ExternalMemoryObject::GetMemorySize(void)",
        ),
    ),
    (
        "__tf20ExternalMemoryObject",
        Ok(
            "ExternalMemoryObject type_info function",
        ),
    ),
    (
        "_$_20ExternalMemoryObject",
        Ok(
            "ExternalMemoryObject::~ExternalMemoryObject(void)",
        ),
    ),
    (
        "GetStatus__19IRadMemoryAllocatorPUiN31",
        Ok(
            "IRadMemoryAllocator::GetStatus(unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "GetSize__19IRadMemoryAllocator",
        Ok(
            "IRadMemoryAllocator::GetSize(void)",
        ),
    ),
    (
        "radMemorySetUsableAllocators__FPiUi",
        Ok(
            "radMemorySetUsableAllocators(int *, unsigned int)",
        ),
    ),
    (
        "radMemoryInitialize__Fv",
        Ok(
            "radMemoryInitialize(void)",
        ),
    ),
    (
        "radMemoryTerminate__Fv",
        Ok(
            "radMemoryTerminate(void)",
        ),
    ),
    (
        "radMemorySetOutOfMemoryCallback__FPFPviUi_vPv",
        Ok(
            "radMemorySetOutOfMemoryCallback(void (*)(void *, int, unsigned int), void *)",
        ),
    ),
    (
        "SetMemoryIdentification__FPCc",
        Ok(
            "SetMemoryIdentification(char const *)",
        ),
    ),
    (
        "radMemoryAlloc__FiUi",
        Ok(
            "radMemoryAlloc(int, unsigned int)",
        ),
    ),
    (
        "radMemoryAllocAligned__FiUiUi",
        Ok(
            "radMemoryAllocAligned(int, unsigned int, unsigned int)",
        ),
    ),
    (
        "radMemoryFree__FiPv",
        Ok(
            "radMemoryFree(int, void *)",
        ),
    ),
    (
        "radMemoryFreeAligned__FiPv",
        Ok(
            "radMemoryFreeAligned(int, void *)",
        ),
    ),
    (
        "radMemoryFreeAligned__FPv",
        Ok(
            "radMemoryFreeAligned(void *)",
        ),
    ),
    (
        "radMemoryFree__FPv",
        Ok(
            "radMemoryFree(void *)",
        ),
    ),
    (
        "radMemoryRegisterAllocator__FiiP19IRadMemoryAllocator",
        Ok(
            "radMemoryRegisterAllocator(int, int, IRadMemoryAllocator *)",
        ),
    ),
    (
        "radMemoryGetAllocator__Fi",
        Ok(
            "radMemoryGetAllocator(int)",
        ),
    ),
    (
        "radMemoryGetAllocatorID__FP19IRadMemoryAllocator",
        Ok(
            "radMemoryGetAllocatorID(IRadMemoryAllocator *)",
        ),
    ),
    (
        "radMemoryUnregisterAllocator__Fi",
        Ok(
            "radMemoryUnregisterAllocator(int)",
        ),
    ),
    (
        "radMemoryFindAllocatorRecursive__FP26radMemoryAllocatorTreeNodePv",
        Ok(
            "radMemoryFindAllocatorRecursive(radMemoryAllocatorTreeNode *, void *)",
        ),
    ),
    (
        "radMemoryFindAllocatorAlignedRecursive__FP26radMemoryAllocatorTreeNodePv",
        Ok(
            "radMemoryFindAllocatorAlignedRecursive(radMemoryAllocatorTreeNode *, void *)",
        ),
    ),
    (
        "radMemorySetAllocatorCallback__FP30IRadMemorySetAllocatorCallback",
        Ok(
            "radMemorySetAllocatorCallback(IRadMemorySetAllocatorCallback *)",
        ),
    ),
    (
        "radMemoryGetAllocatorCallback__Fv",
        Ok(
            "radMemoryGetAllocatorCallback(void)",
        ),
    ),
    (
        "radMemoryGetCurrentAllocator__Fv",
        Ok(
            "radMemoryGetCurrentAllocator(void)",
        ),
    ),
    (
        "radMemorySetCurrentAllocator__Fi",
        Ok(
            "radMemorySetCurrentAllocator(int)",
        ),
    ),
    (
        "radMemorySetAllocationName__FPCc",
        Ok(
            "radMemorySetAllocationName(char const *)",
        ),
    ),
    (
        "radMemoryGetAllocationName__Fv",
        Ok(
            "radMemoryGetAllocationName(void)",
        ),
    ),
    (
        "__tf19IRadMemoryAllocator",
        Ok(
            "IRadMemoryAllocator type_info function",
        ),
    ),
    (
        "__tf24radMemoryAllocatorMalloc",
        Ok(
            "radMemoryAllocatorMalloc type_info function",
        ),
    ),
    (
        "AddRef__24radMemoryAllocatorMalloc",
        Ok(
            "radMemoryAllocatorMalloc::AddRef(void)",
        ),
    ),
    (
        "Release__24radMemoryAllocatorMalloc",
        Ok(
            "radMemoryAllocatorMalloc::Release(void)",
        ),
    ),
    (
        "GetMemory__24radMemoryAllocatorMallocUi",
        Ok(
            "radMemoryAllocatorMalloc::GetMemory(unsigned int)",
        ),
    ),
    (
        "FreeMemory__24radMemoryAllocatorMallocPv",
        Ok(
            "radMemoryAllocatorMalloc::FreeMemory(void *)",
        ),
    ),
    (
        "GetMemoryAligned__24radMemoryAllocatorMallocUiUi",
        Ok(
            "radMemoryAllocatorMalloc::GetMemoryAligned(unsigned int, unsigned int)",
        ),
    ),
    (
        "FreeMemoryAligned__24radMemoryAllocatorMallocPv",
        Ok(
            "radMemoryAllocatorMalloc::FreeMemoryAligned(void *)",
        ),
    ),
    (
        "CanFreeMemory__24radMemoryAllocatorMallocPv",
        Ok(
            "radMemoryAllocatorMalloc::CanFreeMemory(void *)",
        ),
    ),
    (
        "CanFreeMemoryAligned__24radMemoryAllocatorMallocPv",
        Ok(
            "radMemoryAllocatorMalloc::CanFreeMemoryAligned(void *)",
        ),
    ),
    (
        "radMemorySpaceGetAllocator__F14radMemorySpacei",
        Ok(
            "radMemorySpaceGetAllocator(radMemorySpace, int)",
        ),
    ),
    (
        "radMemorySpaceInitialize__Fv",
        Ok(
            "radMemorySpaceInitialize(void)",
        ),
    ),
    (
        "radMemorySpaceTerminate__Fv",
        Ok(
            "radMemorySpaceTerminate(void)",
        ),
    ),
    (
        "radMemorySpaceAlloc__F14radMemorySpaceiUi",
        Ok(
            "radMemorySpaceAlloc(radMemorySpace, int, unsigned int)",
        ),
    ),
    (
        "radMemorySpaceFree__F14radMemorySpaceiPv",
        Ok(
            "radMemorySpaceFree(radMemorySpace, int, void *)",
        ),
    ),
    (
        "radMemorySpaceCopyAsync__FPv14radMemorySpacePCvT1Ui",
        Ok(
            "radMemorySpaceCopyAsync(void *, radMemorySpace, void const *, radMemorySpace, unsigned int)",
        ),
    ),
    (
        "__34MemorySpaceAsyncRequest_CopyEeToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToEe::MemorySpaceAsyncRequest_CopyEeToEe(void)",
        ),
    ),
    (
        "_$_34MemorySpaceAsyncRequest_CopyEeToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToEe::~MemorySpaceAsyncRequest_CopyEeToEe(void)",
        ),
    ),
    (
        "IsDone__34MemorySpaceAsyncRequest_CopyEeToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToEe::IsDone(void)",
        ),
    ),
    (
        "AddRef__34MemorySpaceAsyncRequest_CopyEeToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToEe::AddRef(void)",
        ),
    ),
    (
        "Release__34MemorySpaceAsyncRequest_CopyEeToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToEe::Release(void)",
        ),
    ),
    (
        "__23MemorySpaceAsyncRequest",
        Ok(
            "MemorySpaceAsyncRequest::MemorySpaceAsyncRequest(void)",
        ),
    ),
    (
        "_$_23MemorySpaceAsyncRequest",
        Ok(
            "MemorySpaceAsyncRequest::~MemorySpaceAsyncRequest(void)",
        ),
    ),
    (
        "__nw__23MemorySpaceAsyncRequestUiPCc",
        Ok(
            "MemorySpaceAsyncRequest::operator new(unsigned int, char const *)",
        ),
    ),
    (
        "__dl__23MemorySpaceAsyncRequestPv",
        Ok(
            "MemorySpaceAsyncRequest::operator delete(void *)",
        ),
    ),
    (
        "ServiceHead__23MemorySpaceAsyncRequest",
        Ok(
            "MemorySpaceAsyncRequest::ServiceHead(void)",
        ),
    ),
    (
        "QueueRequest__23MemorySpaceAsyncRequestP23MemorySpaceAsyncRequest",
        Ok(
            "MemorySpaceAsyncRequest::QueueRequest(MemorySpaceAsyncRequest *)",
        ),
    ),
    (
        "__35MemorySpaceAsyncRequest_CopyEeToIopPvPCvUi",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToIop::MemorySpaceAsyncRequest_CopyEeToIop(void *, void const *, unsigned int)",
        ),
    ),
    (
        "_$_35MemorySpaceAsyncRequest_CopyEeToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToIop::~MemorySpaceAsyncRequest_CopyEeToIop(void)",
        ),
    ),
    (
        "DoRequest__35MemorySpaceAsyncRequest_CopyEeToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToIop::DoRequest(void)",
        ),
    ),
    (
        "Service__35MemorySpaceAsyncRequest_CopyEeToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToIop::Service(void)",
        ),
    ),
    (
        "IsDone__35MemorySpaceAsyncRequest_CopyEeToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToIop::IsDone(void)",
        ),
    ),
    (
        "__35MemorySpaceAsyncRequest_CopyIopToEePvPCvUi",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToEe::MemorySpaceAsyncRequest_CopyIopToEe(void *, void const *, unsigned int)",
        ),
    ),
    (
        "DoRequest__35MemorySpaceAsyncRequest_CopyIopToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToEe::DoRequest(void)",
        ),
    ),
    (
        "_$_35MemorySpaceAsyncRequest_CopyIopToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToEe::~MemorySpaceAsyncRequest_CopyIopToEe(void)",
        ),
    ),
    (
        "Service__35MemorySpaceAsyncRequest_CopyIopToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToEe::Service(void)",
        ),
    ),
    (
        "IsDone__35MemorySpaceAsyncRequest_CopyIopToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToEe::IsDone(void)",
        ),
    ),
    (
        "Initialize__36MemorySpaceAsyncRequest_CopyIopToIopUi",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::Initialize(unsigned int)",
        ),
    ),
    (
        "Terminate__36MemorySpaceAsyncRequest_CopyIopToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::Terminate(void)",
        ),
    ),
    (
        "__36MemorySpaceAsyncRequest_CopyIopToIopPvPCvUi",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::MemorySpaceAsyncRequest_CopyIopToIop(void *, void const *, unsigned int)",
        ),
    ),
    (
        "_$_36MemorySpaceAsyncRequest_CopyIopToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::~MemorySpaceAsyncRequest_CopyIopToIop(void)",
        ),
    ),
    (
        "DoRequest__36MemorySpaceAsyncRequest_CopyIopToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::DoRequest(void)",
        ),
    ),
    (
        "IsDone__36MemorySpaceAsyncRequest_CopyIopToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::IsDone(void)",
        ),
    ),
    (
        "Service__36MemorySpaceAsyncRequest_CopyIopToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::Service(void)",
        ),
    ),
    (
        "__22radMemoryAllocator_Iop",
        Ok(
            "radMemoryAllocator_Iop::radMemoryAllocator_Iop(void)",
        ),
    ),
    (
        "__tf34MemorySpaceAsyncRequest_CopyEeToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToEe type_info function",
        ),
    ),
    (
        "__tf23MemorySpaceAsyncRequest",
        Ok(
            "MemorySpaceAsyncRequest type_info function",
        ),
    ),
    (
        "__tf35MemorySpaceAsyncRequest_CopyEeToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToIop type_info function",
        ),
    ),
    (
        "__tf35MemorySpaceAsyncRequest_CopyIopToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToEe type_info function",
        ),
    ),
    (
        "__tf36MemorySpaceAsyncRequest_CopyIopToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop type_info function",
        ),
    ),
    (
        "__26IRadMemorySpaceCopyRequest",
        Ok(
            "IRadMemorySpaceCopyRequest::IRadMemorySpaceCopyRequest(void)",
        ),
    ),
    (
        "AddRef__35MemorySpaceAsyncRequest_CopyEeToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToIop::AddRef(void)",
        ),
    ),
    (
        "Release__35MemorySpaceAsyncRequest_CopyEeToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToIop::Release(void)",
        ),
    ),
    (
        "AddRef__35MemorySpaceAsyncRequest_CopyIopToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToEe::AddRef(void)",
        ),
    ),
    (
        "Release__35MemorySpaceAsyncRequest_CopyIopToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToEe::Release(void)",
        ),
    ),
    (
        "AddRef__36MemorySpaceAsyncRequest_CopyIopToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::AddRef(void)",
        ),
    ),
    (
        "Release__36MemorySpaceAsyncRequest_CopyIopToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::Release(void)",
        ),
    ),
    (
        "__tf26IRadMemorySpaceCopyRequest",
        Ok(
            "IRadMemorySpaceCopyRequest type_info function",
        ),
    ),
    (
        "__tf22radMemoryAllocator_Iop",
        Ok(
            "radMemoryAllocator_Iop type_info function",
        ),
    ),
    (
        "AddRef__22radMemoryAllocator_Iop",
        Ok(
            "radMemoryAllocator_Iop::AddRef(void)",
        ),
    ),
    (
        "Release__22radMemoryAllocator_Iop",
        Ok(
            "radMemoryAllocator_Iop::Release(void)",
        ),
    ),
    (
        "GetMemory__22radMemoryAllocator_IopUi",
        Ok(
            "radMemoryAllocator_Iop::GetMemory(unsigned int)",
        ),
    ),
    (
        "FreeMemory__22radMemoryAllocator_IopPv",
        Ok(
            "radMemoryAllocator_Iop::FreeMemory(void *)",
        ),
    ),
    (
        "CanFreeMemory__22radMemoryAllocator_IopPv",
        Ok(
            "radMemoryAllocator_Iop::CanFreeMemory(void *)",
        ),
    ),
    (
        "GetMemoryAligned__22radMemoryAllocator_IopUiUi",
        Ok(
            "radMemoryAllocator_Iop::GetMemoryAligned(unsigned int, unsigned int)",
        ),
    ),
    (
        "FreeMemoryAligned__22radMemoryAllocator_IopPv",
        Ok(
            "radMemoryAllocator_Iop::FreeMemoryAligned(void *)",
        ),
    ),
    (
        "CanFreeMemoryAligned__22radMemoryAllocator_IopPv",
        Ok(
            "radMemoryAllocator_Iop::CanFreeMemoryAligned(void *)",
        ),
    ),
    (
        "_GLOBAL_$I$radMemorySpace_OptimalAlignment",
        Ok(
            "global constructors keyed to radMemorySpace_OptimalAlignment",
        ),
    ),
    (
        "_GLOBAL_$D$radMemorySpace_OptimalAlignment",
        Ok(
            "global destructors keyed to radMemorySpace_OptimalAlignment",
        ),
    ),
    (
        "radMemoryCreatePool__FPP14IRadMemoryPoolUiUiUib19radMemoryDebugLeveliPCc",
        Ok(
            "radMemoryCreatePool(IRadMemoryPool **, unsigned int, unsigned int, unsigned int, bool, radMemoryDebugLevel, int, char const *)",
        ),
    ),
    (
        "__10MemoryPool",
        Ok(
            "MemoryPool::MemoryPool(void)",
        ),
    ),
    (
        "Initialize__10MemoryPoolPvUiUiUib19radMemoryDebugLeveliPCc",
        Ok(
            "MemoryPool::Initialize(void *, unsigned int, unsigned int, unsigned int, bool, radMemoryDebugLevel, int, char const *)",
        ),
    ),
    (
        "GetMemory__10MemoryPool",
        Ok(
            "MemoryPool::GetMemory(void)",
        ),
    ),
    (
        "GetMemory__10MemoryPoolUi",
        Ok(
            "MemoryPool::GetMemory(unsigned int)",
        ),
    ),
    (
        "FreeMemory__10MemoryPoolPv",
        Ok(
            "MemoryPool::FreeMemory(void *)",
        ),
    ),
    (
        "CanFreeMemory__10MemoryPoolPv",
        Ok(
            "MemoryPool::CanFreeMemory(void *)",
        ),
    ),
    (
        "GetMemoryAligned__10MemoryPoolUiUi",
        Ok(
            "MemoryPool::GetMemoryAligned(unsigned int, unsigned int)",
        ),
    ),
    (
        "FreeMemoryAligned__10MemoryPoolPv",
        Ok(
            "MemoryPool::FreeMemoryAligned(void *)",
        ),
    ),
    (
        "CanFreeMemoryAligned__10MemoryPoolPv",
        Ok(
            "MemoryPool::CanFreeMemoryAligned(void *)",
        ),
    ),
    (
        "GetStatus__10MemoryPoolPUiN21",
        Ok(
            "MemoryPool::GetStatus(unsigned int *, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "Chain__10MemoryPoolP14IRadMemoryPool",
        Ok(
            "MemoryPool::Chain(IRadMemoryPool *)",
        ),
    ),
    (
        "AddRef__10MemoryPool",
        Ok(
            "MemoryPool::AddRef(void)",
        ),
    ),
    (
        "Release__10MemoryPool",
        Ok(
            "MemoryPool::Release(void)",
        ),
    ),
    (
        "_$_10MemoryPool",
        Ok(
            "MemoryPool::~MemoryPool(void)",
        ),
    ),
    (
        "__nw__10MemoryPoolUii",
        Ok(
            "MemoryPool::operator new(unsigned int, int)",
        ),
    ),
    (
        "__dl__10MemoryPoolPv",
        Ok(
            "MemoryPool::operator delete(void *)",
        ),
    ),
    (
        "WithinRange__10MemoryPoolPv",
        Ok(
            "MemoryPool::WithinRange(void *)",
        ),
    ),
    (
        "RoundUpAlignment__FUiUi",
        Ok(
            "RoundUpAlignment(unsigned int, unsigned int)",
        ),
    ),
    (
        "__tf10MemoryPool",
        Ok(
            "MemoryPool type_info function",
        ),
    ),
    (
        "__14IRadMemoryPool",
        Ok(
            "IRadMemoryPool::IRadMemoryPool(void)",
        ),
    ),
    (
        "__tf14IRadMemoryPool",
        Ok(
            "IRadMemoryPool type_info function",
        ),
    ),
    (
        "radMemoryPlatInitialize__Fv",
        Ok(
            "radMemoryPlatInitialize(void)",
        ),
    ),
    (
        "radMemoryPlatTerminate__Fv",
        Ok(
            "radMemoryPlatTerminate(void)",
        ),
    ),
    (
        "radMemoryPlatAlloc__FUi",
        Ok(
            "radMemoryPlatAlloc(unsigned int)",
        ),
    ),
    (
        "radMemoryPlatFree__FPv",
        Ok(
            "radMemoryPlatFree(void *)",
        ),
    ),
    (
        "radMemoryPlatAllocAligned__FUiUi",
        Ok(
            "radMemoryPlatAllocAligned(unsigned int, unsigned int)",
        ),
    ),
    (
        "radMemoryPlatFreeAligned__FPv",
        Ok(
            "radMemoryPlatFreeAligned(void *)",
        ),
    ),
    (
        "AddRef__10StaticHeap",
        Ok(
            "StaticHeap::AddRef(void)",
        ),
    ),
    (
        "Align__10StaticHeapUiUi",
        Ok(
            "StaticHeap::Align(unsigned int, unsigned int)",
        ),
    ),
    (
        "Align__10StaticHeapPCcUi",
        Ok(
            "StaticHeap::Align(char const *, unsigned int)",
        ),
    ),
    (
        "AllowFreeing__10StaticHeapb",
        Ok(
            "StaticHeap::AllowFreeing(bool)",
        ),
    ),
    (
        "CanFreeMemory__10StaticHeapPv",
        Ok(
            "StaticHeap::CanFreeMemory(void *)",
        ),
    ),
    (
        "CanFreeMemoryAligned__10StaticHeapPv",
        Ok(
            "StaticHeap::CanFreeMemoryAligned(void *)",
        ),
    ),
    (
        "Contains__10StaticHeapPCv",
        Ok(
            "StaticHeap::Contains(void const *)",
        ),
    ),
    (
        "CreateHeap__10StaticHeapUi",
        Ok(
            "StaticHeap::CreateHeap(unsigned int)",
        ),
    ),
    (
        "FreeMemory__10StaticHeapPv",
        Ok(
            "StaticHeap::FreeMemory(void *)",
        ),
    ),
    (
        "FreeMemoryAligned__10StaticHeapPv",
        Ok(
            "StaticHeap::FreeMemoryAligned(void *)",
        ),
    ),
    (
        "FreeMemorySize__C10StaticHeap",
        Ok(
            "StaticHeap::FreeMemorySize(void) const",
        ),
    ),
    (
        "GetMemory__10StaticHeapUi",
        Ok(
            "StaticHeap::GetMemory(unsigned int)",
        ),
    ),
    (
        "GetMemoryAligned__10StaticHeapUiUi",
        Ok(
            "StaticHeap::GetMemoryAligned(unsigned int, unsigned int)",
        ),
    ),
    (
        "GetMemoryObject__10StaticHeapPP16IRadMemoryObjectUi",
        Ok(
            "StaticHeap::GetMemoryObject(IRadMemoryObject **, unsigned int)",
        ),
    ),
    (
        "GetMemoryObjectAligned__10StaticHeapPP16IRadMemoryObjectUiUi",
        Ok(
            "StaticHeap::GetMemoryObjectAligned(IRadMemoryObject **, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetSize__10StaticHeap",
        Ok(
            "StaticHeap::GetSize(void)",
        ),
    ),
    (
        "GetStatus__10StaticHeapPUiN31",
        Ok(
            "StaticHeap::GetStatus(unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "PrintOutOfMemoryMessage__10StaticHeapUi",
        Ok(
            "StaticHeap::PrintOutOfMemoryMessage(unsigned int)",
        ),
    ),
    (
        "Release__10StaticHeap",
        Ok(
            "StaticHeap::Release(void)",
        ),
    ),
    (
        "ValidateHeap__10StaticHeap",
        Ok(
            "StaticHeap::ValidateHeap(void)",
        ),
    ),
    (
        "radMemoryCreateStaticHeap__FUiiPCc",
        Ok(
            "radMemoryCreateStaticHeap(unsigned int, int, char const *)",
        ),
    ),
    (
        "_$_10StaticHeap",
        Ok(
            "StaticHeap::~StaticHeap(void)",
        ),
    ),
    (
        "__tf10StaticHeap",
        Ok(
            "StaticHeap type_info function",
        ),
    ),
    (
        "__10StaticHeap",
        Ok(
            "StaticHeap::StaticHeap(void)",
        ),
    ),
    (
        "__12TrackingHeap",
        Ok(
            "TrackingHeap::TrackingHeap(void)",
        ),
    ),
    (
        "_$_12TrackingHeap",
        Ok(
            "TrackingHeap::~TrackingHeap(void)",
        ),
    ),
    (
        "AddRef__12TrackingHeap",
        Ok(
            "TrackingHeap::AddRef(void)",
        ),
    ),
    (
        "CanFreeMemory__12TrackingHeapPv",
        Ok(
            "TrackingHeap::CanFreeMemory(void *)",
        ),
    ),
    (
        "CanFreeMemoryAligned__12TrackingHeapPv",
        Ok(
            "TrackingHeap::CanFreeMemoryAligned(void *)",
        ),
    ),
    (
        "FreeMemory__12TrackingHeapPv",
        Ok(
            "TrackingHeap::FreeMemory(void *)",
        ),
    ),
    (
        "FreeMemoryAligned__12TrackingHeapPv",
        Ok(
            "TrackingHeap::FreeMemoryAligned(void *)",
        ),
    ),
    (
        "GetMemory__12TrackingHeapUi",
        Ok(
            "TrackingHeap::GetMemory(unsigned int)",
        ),
    ),
    (
        "GetMemoryAligned__12TrackingHeapUiUi",
        Ok(
            "TrackingHeap::GetMemoryAligned(unsigned int, unsigned int)",
        ),
    ),
    (
        "GetMemoryObject__12TrackingHeapPP16IRadMemoryObjectUi",
        Ok(
            "TrackingHeap::GetMemoryObject(IRadMemoryObject **, unsigned int)",
        ),
    ),
    (
        "GetMemoryObjectAligned__12TrackingHeapPP16IRadMemoryObjectUiUi",
        Ok(
            "TrackingHeap::GetMemoryObjectAligned(IRadMemoryObject **, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetSize__12TrackingHeap",
        Ok(
            "TrackingHeap::GetSize(void)",
        ),
    ),
    (
        "GetStatus__12TrackingHeapPUiN31",
        Ok(
            "TrackingHeap::GetStatus(unsigned int *, unsigned int *, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "RecordAllocation__12TrackingHeapPvUi",
        Ok(
            "TrackingHeap::RecordAllocation(void *, unsigned int)",
        ),
    ),
    (
        "Release__12TrackingHeap",
        Ok(
            "TrackingHeap::Release(void)",
        ),
    ),
    (
        "SetSize__12TrackingHeapUi",
        Ok(
            "TrackingHeap::SetSize(unsigned int)",
        ),
    ),
    (
        "ValidateHeap__12TrackingHeap",
        Ok(
            "TrackingHeap::ValidateHeap(void)",
        ),
    ),
    (
        "radMemoryCreateTrackingHeap__FUiiPCc",
        Ok(
            "radMemoryCreateTrackingHeap(unsigned int, int, char const *)",
        ),
    ),
    (
        "_M_erase__t8_Rb_tree5ZPvZt4pair2ZCPvZUiZt10_Select1st1Zt4pair2ZCPvZUiZt4less1ZPvZt9allocator1ZUiPt13_Rb_tree_node1Zt4pair2ZCPvZUi",
        Ok(
            "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::_M_erase(_Rb_tree_node<pair<void *const, unsigned int> > *)",
        ),
    ),
    (
        "find__t8_Rb_tree5ZPvZt4pair2ZCPvZUiZt10_Select1st1Zt4pair2ZCPvZUiZt4less1ZPvZt9allocator1ZUiRCPv",
        Ok(
            "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::find(void *const &)",
        ),
    ),
    (
        "lower_bound__t8_Rb_tree5ZPvZt4pair2ZCPvZUiZt10_Select1st1Zt4pair2ZCPvZUiZt4less1ZPvZt9allocator1ZUiRCPv",
        Ok(
            "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::lower_bound(void *const &)",
        ),
    ),
    (
        "upper_bound__t8_Rb_tree5ZPvZt4pair2ZCPvZUiZt10_Select1st1Zt4pair2ZCPvZUiZt4less1ZPvZt9allocator1ZUiRCPv",
        Ok(
            "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::upper_bound(void *const &)",
        ),
    ),
    (
        "erase__t8_Rb_tree5ZPvZt4pair2ZCPvZUiZt10_Select1st1Zt4pair2ZCPvZUiZt4less1ZPvZt9allocator1ZUiGt17_Rb_tree_iterator3Zt4pair2ZCPvZUiZRt4pair2ZCPvZUiZPt4pair2ZCPvZUiT1",
        Ok(
            "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::erase(_Rb_tree_iterator<pair<void *const, unsigned int>, pair<void *const, unsigned int> &, pair<void *const, unsigned int> *>, _Rb_tree_iterator<pair<void *const, unsigned int>, pair<void *const, unsigned int> &, pair<void *const, unsigned int> *>)",
        ),
    ),
    (
        "erase__t8_Rb_tree5ZPvZt4pair2ZCPvZUiZt10_Select1st1Zt4pair2ZCPvZUiZt4less1ZPvZt9allocator1ZUiRCPv",
        Ok(
            "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::erase(void *const &)",
        ),
    ),
    (
        "_M_insert__t8_Rb_tree5ZPvZt4pair2ZCPvZUiZt10_Select1st1Zt4pair2ZCPvZUiZt4less1ZPvZt9allocator1ZUiP18_Rb_tree_node_baseT1RCt4pair2ZCPvZUi",
        Ok(
            "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::_M_insert(_Rb_tree_node_base *, _Rb_tree_node_base *, pair<void *const, unsigned int> const &)",
        ),
    ),
    (
        "insert_unique__t8_Rb_tree5ZPvZt4pair2ZCPvZUiZt10_Select1st1Zt4pair2ZCPvZUiZt4less1ZPvZt9allocator1ZUiRCt4pair2ZCPvZUi",
        Ok(
            "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::insert_unique(pair<void *const, unsigned int> const &)",
        ),
    ),
    (
        "insert_unique__t8_Rb_tree5ZPvZt4pair2ZCPvZUiZt10_Select1st1Zt4pair2ZCPvZUiZt4less1ZPvZt9allocator1ZUiGt17_Rb_tree_iterator3Zt4pair2ZCPvZUiZRt4pair2ZCPvZUiZPt4pair2ZCPvZUiRCt4pair2ZCPvZUi",
        Ok(
            "_Rb_tree<void *, pair<void *const, unsigned int>, _Select1st<pair<void *const, unsigned int> >, less<void *>, allocator<unsigned int> >::insert_unique(_Rb_tree_iterator<pair<void *const, unsigned int>, pair<void *const, unsigned int> &, pair<void *const, unsigned int> *>, pair<void *const, unsigned int> const &)",
        ),
    ),
    (
        "__tf12TrackingHeap",
        Ok(
            "TrackingHeap type_info function",
        ),
    ),
    (
        "_$_t3map4ZPvZUiZt4less1ZPvZt9allocator1ZUi",
        Ok(
            "map<void *, unsigned int, less<void *>, allocator<unsigned int> >::~map(void)",
        ),
    ),
    (
        "radStringCreate__FPP10IRadStringi",
        Ok(
            "radStringCreate(IRadString **, int)",
        ),
    ),
    (
        "radStringMatchesWildCardPattern__FPCcT0",
        Ok(
            "radStringMatchesWildCardPattern(char const *, char const *)",
        ),
    ),
    (
        "radAsciiToSjis__FP11radSJISCharPCc",
        Ok(
            "radAsciiToSjis(radSJISChar *, char const *)",
        ),
    ),
    (
        "radSjisStrncpy__FP11radSJISCharPC11radSJISCharUi",
        Ok(
            "radSjisStrncpy(radSJISChar *, radSJISChar const *, unsigned int)",
        ),
    ),
    (
        "__tf9radString",
        Ok(
            "radString type_info function",
        ),
    ),
    (
        "__10IRadString",
        Ok(
            "IRadString::IRadString(void)",
        ),
    ),
    (
        "AddRef__9radString",
        Ok(
            "radString::AddRef(void)",
        ),
    ),
    (
        "Release__9radString",
        Ok(
            "radString::Release(void)",
        ),
    ),
    (
        "Equals__9radStringPCc",
        Ok(
            "radString::Equals(char const *)",
        ),
    ),
    (
        "Equals__9radStringP10IRadString",
        Ok(
            "radString::Equals(IRadString *)",
        ),
    ),
    (
        "GetSize__9radString",
        Ok(
            "radString::GetSize(void)",
        ),
    ),
    (
        "SetSize__9radStringUi",
        Ok(
            "radString::SetSize(unsigned int)",
        ),
    ),
    (
        "Copy__9radStringPCc",
        Ok(
            "radString::Copy(char const *)",
        ),
    ),
    (
        "Copy__9radStringPC10IRadString",
        Ok(
            "radString::Copy(IRadString const *)",
        ),
    ),
    (
        "GetChars__C9radStringPcUi",
        Ok(
            "radString::GetChars(char *, unsigned int) const",
        ),
    ),
    (
        "GetChars__C9radString",
        Ok(
            "radString::GetChars(void) const",
        ),
    ),
    (
        "GetLength__C9radString",
        Ok(
            "radString::GetLength(void) const",
        ),
    ),
    (
        "Append__9radStringP10IRadString",
        Ok(
            "radString::Append(IRadString *)",
        ),
    ),
    (
        "Append__9radStringPCc",
        Ok(
            "radString::Append(char const *)",
        ),
    ),
    (
        "Append__9radStringUi",
        Ok(
            "radString::Append(unsigned int)",
        ),
    ),
    (
        "Append__9radStringi",
        Ok(
            "radString::Append(int)",
        ),
    ),
    (
        "Append__9radStringc",
        Ok(
            "radString::Append(char)",
        ),
    ),
    (
        "Append__9radStringPCv",
        Ok(
            "radString::Append(void const *)",
        ),
    ),
    (
        "Append__9radStringf",
        Ok(
            "radString::Append(float)",
        ),
    ),
    (
        "Append__9radStringb",
        Ok(
            "radString::Append(bool)",
        ),
    ),
    (
        "ToLowercase__9radString",
        Ok(
            "radString::ToLowercase(void)",
        ),
    ),
    (
        "ToUppercase__9radString",
        Ok(
            "radString::ToUppercase(void)",
        ),
    ),
    (
        "MatchesWildCardPattern__9radStringPCc",
        Ok(
            "radString::MatchesWildCardPattern(char const *)",
        ),
    ),
    (
        "MatchesWildCardPattern__9radStringPC10IRadString",
        Ok(
            "radString::MatchesWildCardPattern(IRadString const *)",
        ),
    ),
    (
        "Compact__9radString",
        Ok(
            "radString::Compact(void)",
        ),
    ),
    (
        "_$_9radString",
        Ok(
            "radString::~radString(void)",
        ),
    ),
    (
        "__tf10IRadString",
        Ok(
            "IRadString type_info function",
        ),
    ),
    (
        "Initialize__14radObjectBTreeP18radObjectBTreeNodeUi",
        Ok(
            "radObjectBTree::Initialize(radObjectBTreeNode *, unsigned int)",
        ),
    ),
    (
        "__14radObjectBTree",
        Ok(
            "radObjectBTree::radObjectBTree(void)",
        ),
    ),
    (
        "_$_14radObjectBTree",
        Ok(
            "radObjectBTree::~radObjectBTree(void)",
        ),
    ),
    (
        "AddObject__14radObjectBTreeRCUiP9IRefCount",
        Ok(
            "radObjectBTree::AddObject(unsigned int const &, IRefCount *)",
        ),
    ),
    (
        "RemoveObject__14radObjectBTreeRCUi",
        Ok(
            "radObjectBTree::RemoveObject(unsigned int const &)",
        ),
    ),
    (
        "RemoveAll__14radObjectBTree",
        Ok(
            "radObjectBTree::RemoveAll(void)",
        ),
    ),
    (
        "RemoveAll_Helper__14radObjectBTreeP18radObjectBTreeNode",
        Ok(
            "radObjectBTree::RemoveAll_Helper(radObjectBTreeNode *)",
        ),
    ),
    (
        "FindObject__14radObjectBTreeRCUi",
        Ok(
            "radObjectBTree::FindObject(unsigned int const &)",
        ),
    ),
    (
        "GetFirst__14radObjectBTreeQ214radObjectBTree14TraversalOrderPUi",
        Ok(
            "radObjectBTree::GetFirst(radObjectBTree::TraversalOrder, unsigned int *)",
        ),
    ),
    (
        "GetNext__14radObjectBTreePUi",
        Ok(
            "radObjectBTree::GetNext(unsigned int *)",
        ),
    ),
    (
        "GetNextNode__14radObjectBTree",
        Ok(
            "radObjectBTree::GetNextNode(void)",
        ),
    ),
    (
        "find__14radObjectBTreeRCUiPP18radObjectBTreeNodeT2Pi",
        Ok(
            "radObjectBTree::find(unsigned int const &, radObjectBTreeNode **, radObjectBTreeNode **, int *)",
        ),
    ),
    (
        "copyNode__14radObjectBTreeP18radObjectBTreeNodeT1",
        Ok(
            "radObjectBTree::copyNode(radObjectBTreeNode *, radObjectBTreeNode *)",
        ),
    ),
    (
        "__tf14radObjectBTree",
        Ok(
            "radObjectBTree type_info function",
        ),
    ),
    (
        "AddRef__14radObjectBTree",
        Ok(
            "radObjectBTree::AddRef(void)",
        ),
    ),
    (
        "Release__14radObjectBTree",
        Ok(
            "radObjectBTree::Release(void)",
        ),
    ),
    (
        "radDbgComTargetInitialize__F13radDbgComTypeUsPvi",
        Ok(
            "radDbgComTargetInitialize(radDbgComType, unsigned short, void *, int)",
        ),
    ),
    (
        "radDbgComTargetTerminate__Fv",
        Ok(
            "radDbgComTargetTerminate(void)",
        ),
    ),
    (
        "radDbgComService__Fv",
        Ok(
            "radDbgComService(void)",
        ),
    ),
    (
        "radDbgComTargetCreateChannel__FUsPP17IRadDbgComChanneli",
        Ok(
            "radDbgComTargetCreateChannel(unsigned short, IRadDbgComChannel **, int)",
        ),
    ),
    (
        "radDebugConsoleService__Fv",
        Ok(
            "radDebugConsoleService(void)",
        ),
    ),
    (
        "_$_12DebugConsole",
        Ok(
            "DebugConsole::~DebugConsole(void)",
        ),
    ),
    (
        "AddRef__12DebugConsole",
        Ok(
            "DebugConsole::AddRef(void)",
        ),
    ),
    (
        "Release__12DebugConsole",
        Ok(
            "DebugConsole::Release(void)",
        ),
    ),
    (
        "SetTitle__12DebugConsolePCc",
        Ok(
            "DebugConsole::SetTitle(char const *)",
        ),
    ),
    (
        "SetBackgroundColor__12DebugConsoleUi",
        Ok(
            "DebugConsole::SetBackgroundColor(unsigned int)",
        ),
    ),
    (
        "Clear__12DebugConsole",
        Ok(
            "DebugConsole::Clear(void)",
        ),
    ),
    (
        "SetCursorPosition__12DebugConsoleUiUi",
        Ok(
            "DebugConsole::SetCursorPosition(unsigned int, unsigned int)",
        ),
    ),
    (
        "SetTextColor__12DebugConsoleUi",
        Ok(
            "DebugConsole::SetTextColor(unsigned int)",
        ),
    ),
    (
        "TextOutAt__12DebugConsolePCcii",
        Ok(
            "DebugConsole::TextOutAt(char const *, int, int)",
        ),
    ),
    (
        "TextOut__12DebugConsolePCc",
        Ok(
            "DebugConsole::TextOut(char const *)",
        ),
    ),
    (
        "SetKeyboardInputCallback__12DebugConsoleP37IRadDebugConsoleKeyboardInputCallback",
        Ok(
            "DebugConsole::SetKeyboardInputCallback(IRadDebugConsoleKeyboardInputCallback *)",
        ),
    ),
    (
        "SetPointerInputCallback__12DebugConsoleP36IRadDebugConsolePointerInputCallback",
        Ok(
            "DebugConsole::SetPointerInputCallback(IRadDebugConsolePointerInputCallback *)",
        ),
    ),
    (
        "OnKeyPress__12DebugConsolei",
        Ok(
            "DebugConsole::OnKeyPress(int)",
        ),
    ),
    (
        "OnVirtualKeyPress__12DebugConsoleibN22",
        Ok(
            "DebugConsole::OnVirtualKeyPress(int, bool, bool, bool)",
        ),
    ),
    (
        "OnMouseEvent__12DebugConsoleiiiiccccc",
        Ok(
            "DebugConsole::OnMouseEvent(int, int, int, int, char, char, char, char, char)",
        ),
    ),
    (
        "ProcessInputBuffer__12DebugConsole",
        Ok(
            "DebugConsole::ProcessInputBuffer(void)",
        ),
    ),
    (
        "AddInputBuffer__12DebugConsoleRCQ212DebugConsole16InputBufferEntry",
        Ok(
            "DebugConsole::AddInputBuffer(DebugConsole::InputBufferEntry const &)",
        ),
    ),
    (
        "IsBufferFull__12DebugConsole",
        Ok(
            "DebugConsole::IsBufferFull(void)",
        ),
    ),
    (
        "_$_13ConsoleClient",
        Ok(
            "ConsoleClient::~ConsoleClient(void)",
        ),
    ),
    (
        "DeleteConsole__13ConsoleClientP12DebugConsole",
        Ok(
            "ConsoleClient::DeleteConsole(DebugConsole *)",
        ),
    ),
    (
        "OnStatusChange__13ConsoleClientQ217IRadDbgComChannel15ConnectionStatePCc",
        Ok(
            "ConsoleClient::OnStatusChange(IRadDbgComChannel::ConnectionState, char const *)",
        ),
    ),
    (
        "OnReceiveComplete__13ConsoleClientbUi",
        Ok(
            "ConsoleClient::OnReceiveComplete(bool, unsigned int)",
        ),
    ),
    (
        "OnSendComplete__13ConsoleClientb",
        Ok(
            "ConsoleClient::OnSendComplete(bool)",
        ),
    ),
    (
        "SendClientRecvReadyCommand__13ConsoleClient",
        Ok(
            "ConsoleClient::SendClientRecvReadyCommand(void)",
        ),
    ),
    (
        "IsCompletePacket__13ConsoleClientUiPUc",
        Ok(
            "ConsoleClient::IsCompletePacket(unsigned int, unsigned char *)",
        ),
    ),
    (
        "SendCreate__13ConsoleClientP12DebugConsole",
        Ok(
            "ConsoleClient::SendCreate(DebugConsole *)",
        ),
    ),
    (
        "SendDestroy__13ConsoleClientP12DebugConsole",
        Ok(
            "ConsoleClient::SendDestroy(DebugConsole *)",
        ),
    ),
    (
        "SendTitle__13ConsoleClientP12DebugConsolePCc",
        Ok(
            "ConsoleClient::SendTitle(DebugConsole *, char const *)",
        ),
    ),
    (
        "SendBackgroundColor__13ConsoleClientP12DebugConsoleUi",
        Ok(
            "ConsoleClient::SendBackgroundColor(DebugConsole *, unsigned int)",
        ),
    ),
    (
        "SendClear__13ConsoleClientP12DebugConsole",
        Ok(
            "ConsoleClient::SendClear(DebugConsole *)",
        ),
    ),
    (
        "SendCursorPosition__13ConsoleClientP12DebugConsoleUiUi",
        Ok(
            "ConsoleClient::SendCursorPosition(DebugConsole *, unsigned int, unsigned int)",
        ),
    ),
    (
        "SendTextColor__13ConsoleClientP12DebugConsoleUi",
        Ok(
            "ConsoleClient::SendTextColor(DebugConsole *, unsigned int)",
        ),
    ),
    (
        "SendTextOutAt__13ConsoleClientP12DebugConsolePCcii",
        Ok(
            "ConsoleClient::SendTextOutAt(DebugConsole *, char const *, int, int)",
        ),
    ),
    (
        "SendTextOut__13ConsoleClientP12DebugConsolePCc",
        Ok(
            "ConsoleClient::SendTextOut(DebugConsole *, char const *)",
        ),
    ),
    (
        "InitiateTransmission__13ConsoleClient",
        Ok(
            "ConsoleClient::InitiateTransmission(void)",
        ),
    ),
    (
        "IsValidConsole__13ConsoleClientP12DebugConsole",
        Ok(
            "ConsoleClient::IsValidConsole(DebugConsole *)",
        ),
    ),
    (
        "AddRef__13ConsoleClient",
        Ok(
            "ConsoleClient::AddRef(void)",
        ),
    ),
    (
        "Service__13ConsoleClient",
        Ok(
            "ConsoleClient::Service(void)",
        ),
    ),
    (
        "Release__13ConsoleClient",
        Ok(
            "ConsoleClient::Release(void)",
        ),
    ),
    (
        "__tf12DebugConsole",
        Ok(
            "DebugConsole type_info function",
        ),
    ),
    (
        "__tf13ConsoleClient",
        Ok(
            "ConsoleClient type_info function",
        ),
    ),
    (
        "__29IRadDbgComChannelSendCallback",
        Ok(
            "IRadDbgComChannelSendCallback::IRadDbgComChannelSendCallback(void)",
        ),
    ),
    (
        "__32IRadDbgComChannelReceiveCallback",
        Ok(
            "IRadDbgComChannelReceiveCallback::IRadDbgComChannelReceiveCallback(void)",
        ),
    ),
    (
        "__tf31IRadDbgComChannelStatusCallback",
        Ok(
            "IRadDbgComChannelStatusCallback type_info function",
        ),
    ),
    (
        "__tf29IRadDbgComChannelSendCallback",
        Ok(
            "IRadDbgComChannelSendCallback type_info function",
        ),
    ),
    (
        "__tf32IRadDbgComChannelReceiveCallback",
        Ok(
            "IRadDbgComChannelReceiveCallback type_info function",
        ),
    ),
    (
        "__tf16IRadDebugConsole",
        Ok(
            "IRadDebugConsole type_info function",
        ),
    ),
    (
        "radControllerInitialize__FP38IRadControllerConnectionChangeCallbacki",
        Ok(
            "radControllerInitialize(IRadControllerConnectionChangeCallback *, int)",
        ),
    ),
    (
        "radControllerTerminate__Fv",
        Ok(
            "radControllerTerminate(void)",
        ),
    ),
    (
        "radControllerSystemGet__Fv",
        Ok(
            "radControllerSystemGet(void)",
        ),
    ),
    (
        "radControllerSystemService__Fv",
        Ok(
            "radControllerSystemService(void)",
        ),
    ),
    (
        "__18rControllerSystem2P38IRadControllerConnectionChangeCallback",
        Ok(
            "rControllerSystem2::rControllerSystem2(IRadControllerConnectionChangeCallback *)",
        ),
    ),
    (
        "_$_18rControllerSystem2",
        Ok(
            "rControllerSystem2::~rControllerSystem2(void)",
        ),
    ),
    (
        "Service__18rControllerSystem2",
        Ok(
            "rControllerSystem2::Service(void)",
        ),
    ),
    (
        "AddRef__18rControllerSystem2",
        Ok(
            "rControllerSystem2::AddRef(void)",
        ),
    ),
    (
        "Release__18rControllerSystem2",
        Ok(
            "rControllerSystem2::Release(void)",
        ),
    ),
    (
        "GetNumberOfControllers__18rControllerSystem2",
        Ok(
            "rControllerSystem2::GetNumberOfControllers(void)",
        ),
    ),
    (
        "GetControllerByIndex__18rControllerSystem2Ui",
        Ok(
            "rControllerSystem2::GetControllerByIndex(unsigned int)",
        ),
    ),
    (
        "GetControllerAtLocation__18rControllerSystem2PCc",
        Ok(
            "rControllerSystem2::GetControllerAtLocation(char const *)",
        ),
    ),
    (
        "SetBufferTime__18rControllerSystem2Ui",
        Ok(
            "rControllerSystem2::SetBufferTime(unsigned int)",
        ),
    ),
    (
        "MapVirtualTime__18rControllerSystem2UiUi",
        Ok(
            "rControllerSystem2::MapVirtualTime(unsigned int, unsigned int)",
        ),
    ),
    (
        "SetVirtualTime__18rControllerSystem2Ui",
        Ok(
            "rControllerSystem2::SetVirtualTime(unsigned int)",
        ),
    ),
    (
        "SetCaptureRate__18rControllerSystem2Ui",
        Ok(
            "rControllerSystem2::SetCaptureRate(unsigned int)",
        ),
    ),
    (
        "RegisterConnectionChangeCallback__18rControllerSystem2P38IRadControllerConnectionChangeCallback",
        Ok(
            "rControllerSystem2::RegisterConnectionChangeCallback(IRadControllerConnectionChangeCallback *)",
        ),
    ),
    (
        "UnRegisterConnectionChangeCallback__18rControllerSystem2P38IRadControllerConnectionChangeCallback",
        Ok(
            "rControllerSystem2::UnRegisterConnectionChangeCallback(IRadControllerConnectionChangeCallback *)",
        ),
    ),
    (
        "OnTimerDone__18rControllerSystem2UiPv",
        Ok(
            "rControllerSystem2::OnTimerDone(unsigned int, void *)",
        ),
    ),
    (
        "InitializeLocations__18rControllerSystem2",
        Ok(
            "rControllerSystem2::InitializeLocations(void)",
        ),
    ),
    (
        "CreateController__18rControllerSystem2iP20iControllerLocation2PP12rController2",
        Ok(
            "rControllerSystem2::CreateController(int, iControllerLocation2 *, rController2 **)",
        ),
    ),
    (
        "_StartControllerInitialization__18rControllerSystem2P20iControllerLocation2i",
        Ok(
            "rControllerSystem2::_StartControllerInitialization(iControllerLocation2 *, int)",
        ),
    ),
    (
        "_RequestControllerMode__18rControllerSystem2P20iControllerLocation2",
        Ok(
            "rControllerSystem2::_RequestControllerMode(iControllerLocation2 *)",
        ),
    ),
    (
        "_RequestControllerModeDone__18rControllerSystem2P20iControllerLocation2i",
        Ok(
            "rControllerSystem2::_RequestControllerModeDone(iControllerLocation2 *, int)",
        ),
    ),
    (
        "_RequestControllerActuator__18rControllerSystem2P20iControllerLocation2",
        Ok(
            "rControllerSystem2::_RequestControllerActuator(iControllerLocation2 *)",
        ),
    ),
    (
        "_RequestControllerActuatorDone__18rControllerSystem2P20iControllerLocation2i",
        Ok(
            "rControllerSystem2::_RequestControllerActuatorDone(iControllerLocation2 *, int)",
        ),
    ),
    (
        "_RequestControllerPressure__18rControllerSystem2P20iControllerLocation2",
        Ok(
            "rControllerSystem2::_RequestControllerPressure(iControllerLocation2 *)",
        ),
    ),
    (
        "_RequestControllerPressureDone__18rControllerSystem2P20iControllerLocation2i",
        Ok(
            "rControllerSystem2::_RequestControllerPressureDone(iControllerLocation2 *, int)",
        ),
    ),
    (
        "_CheckControllerAsyncProcessing__18rControllerSystem2P20iControllerLocation2",
        Ok(
            "rControllerSystem2::_CheckControllerAsyncProcessing(iControllerLocation2 *)",
        ),
    ),
    (
        "_ControllerAlmostReady__18rControllerSystem2P20iControllerLocation2ii",
        Ok(
            "rControllerSystem2::_ControllerAlmostReady(iControllerLocation2 *, int, int)",
        ),
    ),
    (
        "_ControllerReady__18rControllerSystem2P20iControllerLocation2ii",
        Ok(
            "rControllerSystem2::_ControllerReady(iControllerLocation2 *, int, int)",
        ),
    ),
    (
        "SetupControllers__18rControllerSystem2",
        Ok(
            "rControllerSystem2::SetupControllers(void)",
        ),
    ),
    (
        "iGetVirtualTime__18rControllerSystem2",
        Ok(
            "rControllerSystem2::iGetVirtualTime(void)",
        ),
    ),
    (
        "iGetVirtualTimeAdjust__18rControllerSystem2",
        Ok(
            "rControllerSystem2::iGetVirtualTimeAdjust(void)",
        ),
    ),
    (
        "__20iControllerLocation2ii",
        Ok(
            "iControllerLocation2::iControllerLocation2(int, int)",
        ),
    ),
    (
        "_$_20iControllerLocation2",
        Ok(
            "iControllerLocation2::~iControllerLocation2(void)",
        ),
    ),
    (
        "AddRef__20iControllerLocation2",
        Ok(
            "iControllerLocation2::AddRef(void)",
        ),
    ),
    (
        "Release__20iControllerLocation2",
        Ok(
            "iControllerLocation2::Release(void)",
        ),
    ),
    (
        "GetPort__20iControllerLocation2",
        Ok(
            "iControllerLocation2::GetPort(void)",
        ),
    ),
    (
        "GetSlot__20iControllerLocation2",
        Ok(
            "iControllerLocation2::GetSlot(void)",
        ),
    ),
    (
        "GetName__20iControllerLocation2",
        Ok(
            "iControllerLocation2::GetName(void)",
        ),
    ),
    (
        "GetNameBString__20iControllerLocation2PP10IRadString",
        Ok(
            "iControllerLocation2::GetNameBString(IRadString **)",
        ),
    ),
    (
        "AttachController__20iControllerLocation2P12rController2",
        Ok(
            "iControllerLocation2::AttachController(rController2 *)",
        ),
    ),
    (
        "GetAttachedController__20iControllerLocation2PP12rController2",
        Ok(
            "iControllerLocation2::GetAttachedController(rController2 **)",
        ),
    ),
    (
        "SetControllerState__20iControllerLocation2Q221iIControllerLocation213LocationState",
        Ok(
            "iControllerLocation2::SetControllerState(iIControllerLocation2::LocationState)",
        ),
    ),
    (
        "GetControllerState__20iControllerLocation2",
        Ok(
            "iControllerLocation2::GetControllerState(void)",
        ),
    ),
    (
        "SetControllerPrevState__20iControllerLocation2Q221iIControllerLocation213LocationState",
        Ok(
            "iControllerLocation2::SetControllerPrevState(iIControllerLocation2::LocationState)",
        ),
    ),
    (
        "GetControllerPrevState__20iControllerLocation2",
        Ok(
            "iControllerLocation2::GetControllerPrevState(void)",
        ),
    ),
    (
        "SetTotalNumModes__20iControllerLocation2i",
        Ok(
            "iControllerLocation2::SetTotalNumModes(int)",
        ),
    ),
    (
        "GetTotalNumModes__20iControllerLocation2",
        Ok(
            "iControllerLocation2::GetTotalNumModes(void)",
        ),
    ),
    (
        "SetCurrentMode__20iControllerLocation2i",
        Ok(
            "iControllerLocation2::SetCurrentMode(int)",
        ),
    ),
    (
        "GetCurrentMode__20iControllerLocation2",
        Ok(
            "iControllerLocation2::GetCurrentMode(void)",
        ),
    ),
    (
        "SetModeQueryResult__20iControllerLocation2ii",
        Ok(
            "iControllerLocation2::SetModeQueryResult(int, int)",
        ),
    ),
    (
        "GetModeQueryResult__20iControllerLocation2i",
        Ok(
            "iControllerLocation2::GetModeQueryResult(int)",
        ),
    ),
    (
        "SetActAlign__20iControllerLocation2ii",
        Ok(
            "iControllerLocation2::SetActAlign(int, int)",
        ),
    ),
    (
        "SetActDirect__20iControllerLocation2ii",
        Ok(
            "iControllerLocation2::SetActDirect(int, int)",
        ),
    ),
    (
        "GetActAlignBuffer__20iControllerLocation2",
        Ok(
            "iControllerLocation2::GetActAlignBuffer(void)",
        ),
    ),
    (
        "GetActDirectBuffer__20iControllerLocation2",
        Ok(
            "iControllerLocation2::GetActDirectBuffer(void)",
        ),
    ),
    (
        "ReconnectIfControllerMatches__20iControllerLocation2iPP12rController2Ui",
        Ok(
            "iControllerLocation2::ReconnectIfControllerMatches(int, rController2 **, unsigned int)",
        ),
    ),
    (
        "GetNumActuators__20iControllerLocation2",
        Ok(
            "iControllerLocation2::GetNumActuators(void)",
        ),
    ),
    (
        "SetNumActuators__20iControllerLocation2i",
        Ok(
            "iControllerLocation2::SetNumActuators(int)",
        ),
    ),
    (
        "__12rController2iiiP10IRadStringPUcT5iUi",
        Ok(
            "rController2::rController2(int, int, int, IRadString *, unsigned char *, unsigned char *, int, unsigned int)",
        ),
    ),
    (
        "_$_12rController2",
        Ok(
            "rController2::~rController2(void)",
        ),
    ),
    (
        "AddRef__12rController2",
        Ok(
            "rController2::AddRef(void)",
        ),
    ),
    (
        "Release__12rController2",
        Ok(
            "rController2::Release(void)",
        ),
    ),
    (
        "IsConnected__12rController2",
        Ok(
            "rController2::IsConnected(void)",
        ),
    ),
    (
        "GetClassification__12rController2",
        Ok(
            "rController2::GetClassification(void)",
        ),
    ),
    (
        "GetType__12rController2",
        Ok(
            "rController2::GetType(void)",
        ),
    ),
    (
        "GetNumberOfInputPointsOfType__12rController2PCc",
        Ok(
            "rController2::GetNumberOfInputPointsOfType(char const *)",
        ),
    ),
    (
        "GetNumberOfOutputPointsOfType__12rController2PCc",
        Ok(
            "rController2::GetNumberOfOutputPointsOfType(char const *)",
        ),
    ),
    (
        "GetInputPointByTypeAndIndex__12rController2PCcUi",
        Ok(
            "rController2::GetInputPointByTypeAndIndex(char const *, unsigned int)",
        ),
    ),
    (
        "GetOutputPointByTypeAndIndex__12rController2PCcUi",
        Ok(
            "rController2::GetOutputPointByTypeAndIndex(char const *, unsigned int)",
        ),
    ),
    (
        "GetInputPointByName__12rController2PCc",
        Ok(
            "rController2::GetInputPointByName(char const *)",
        ),
    ),
    (
        "GetOutputPointByName__12rController2PCc",
        Ok(
            "rController2::GetOutputPointByName(char const *)",
        ),
    ),
    (
        "GetLocation__12rController2",
        Ok(
            "rController2::GetLocation(void)",
        ),
    ),
    (
        "GetNumberOfInputPoints__12rController2",
        Ok(
            "rController2::GetNumberOfInputPoints(void)",
        ),
    ),
    (
        "GetInputPointByIndex__12rController2Ui",
        Ok(
            "rController2::GetInputPointByIndex(unsigned int)",
        ),
    ),
    (
        "GetNumberOfOutputPoints__12rController2",
        Ok(
            "rController2::GetNumberOfOutputPoints(void)",
        ),
    ),
    (
        "GetOutputPointByIndex__12rController2Ui",
        Ok(
            "rController2::GetOutputPointByIndex(unsigned int)",
        ),
    ),
    (
        "GetDataBuffer__12rController2",
        Ok(
            "rController2::GetDataBuffer(void)",
        ),
    ),
    (
        "Disconnect__12rController2",
        Ok(
            "rController2::Disconnect(void)",
        ),
    ),
    (
        "Connect__12rController2",
        Ok(
            "rController2::Connect(void)",
        ),
    ),
    (
        "iVirtualTimeChanged__12rController2",
        Ok(
            "rController2::iVirtualTimeChanged(void)",
        ),
    ),
    (
        "iPoll__12rController2Ui",
        Ok(
            "rController2::iPoll(unsigned int)",
        ),
    ),
    (
        "iSetBufferTime__12rController2Ui",
        Ok(
            "rController2::iSetBufferTime(unsigned int)",
        ),
    ),
    (
        "GetId__12rController2",
        Ok(
            "rController2::GetId(void)",
        ),
    ),
    (
        "__25iControllerOutputHandler2iiPUc",
        Ok(
            "iControllerOutputHandler2::iControllerOutputHandler2(int, int, unsigned char *)",
        ),
    ),
    (
        "_$_25iControllerOutputHandler2",
        Ok(
            "iControllerOutputHandler2::~iControllerOutputHandler2(void)",
        ),
    ),
    (
        "AddRef__25iControllerOutputHandler2",
        Ok(
            "iControllerOutputHandler2::AddRef(void)",
        ),
    ),
    (
        "Release__25iControllerOutputHandler2",
        Ok(
            "iControllerOutputHandler2::Release(void)",
        ),
    ),
    (
        "Connect__25iControllerOutputHandler2",
        Ok(
            "iControllerOutputHandler2::Connect(void)",
        ),
    ),
    (
        "Disconnect__25iControllerOutputHandler2",
        Ok(
            "iControllerOutputHandler2::Disconnect(void)",
        ),
    ),
    (
        "iOnControllerGainChange__25iControllerOutputHandler2P25IRadControllerOutputPoint",
        Ok(
            "iControllerOutputHandler2::iOnControllerGainChange(IRadControllerOutputPoint *)",
        ),
    ),
    (
        "__23rControllerOutputPoint2P33iRIControllerOutputPointCallback2P10IRadStringT2",
        Ok(
            "rControllerOutputPoint2::rControllerOutputPoint2(iRIControllerOutputPointCallback2 *, IRadString *, IRadString *)",
        ),
    ),
    (
        "_$_23rControllerOutputPoint2",
        Ok(
            "rControllerOutputPoint2::~rControllerOutputPoint2(void)",
        ),
    ),
    (
        "AddRef__23rControllerOutputPoint2",
        Ok(
            "rControllerOutputPoint2::AddRef(void)",
        ),
    ),
    (
        "Release__23rControllerOutputPoint2",
        Ok(
            "rControllerOutputPoint2::Release(void)",
        ),
    ),
    (
        "GetName__23rControllerOutputPoint2",
        Ok(
            "rControllerOutputPoint2::GetName(void)",
        ),
    ),
    (
        "GetType__23rControllerOutputPoint2",
        Ok(
            "rControllerOutputPoint2::GetType(void)",
        ),
    ),
    (
        "GetGain__23rControllerOutputPoint2",
        Ok(
            "rControllerOutputPoint2::GetGain(void)",
        ),
    ),
    (
        "SetGain__23rControllerOutputPoint2f",
        Ok(
            "rControllerOutputPoint2::SetGain(float)",
        ),
    ),
    (
        "__22rControllerInputPoint2P9IRefCountP10IRadStringiUiUi",
        Ok(
            "rControllerInputPoint2::rControllerInputPoint2(IRefCount *, IRadString *, int, unsigned int, unsigned int)",
        ),
    ),
    (
        "_$_22rControllerInputPoint2",
        Ok(
            "rControllerInputPoint2::~rControllerInputPoint2(void)",
        ),
    ),
    (
        "AddRef__22rControllerInputPoint2",
        Ok(
            "rControllerInputPoint2::AddRef(void)",
        ),
    ),
    (
        "Release__22rControllerInputPoint2",
        Ok(
            "rControllerInputPoint2::Release(void)",
        ),
    ),
    (
        "GetName__22rControllerInputPoint2",
        Ok(
            "rControllerInputPoint2::GetName(void)",
        ),
    ),
    (
        "GetType__22rControllerInputPoint2",
        Ok(
            "rControllerInputPoint2::GetType(void)",
        ),
    ),
    (
        "SetTolerance__22rControllerInputPoint2f",
        Ok(
            "rControllerInputPoint2::SetTolerance(float)",
        ),
    ),
    (
        "GetTolerance__22rControllerInputPoint2",
        Ok(
            "rControllerInputPoint2::GetTolerance(void)",
        ),
    ),
    (
        "RegisterControllerInputPointCallback__22rControllerInputPoint2P32IRadControllerInputPointCallbackUi",
        Ok(
            "rControllerInputPoint2::RegisterControllerInputPointCallback(IRadControllerInputPointCallback *, unsigned int)",
        ),
    ),
    (
        "UnRegisterControllerInputPointCallback__22rControllerInputPoint2P32IRadControllerInputPointCallback",
        Ok(
            "rControllerInputPoint2::UnRegisterControllerInputPointCallback(IRadControllerInputPointCallback *)",
        ),
    ),
    (
        "GetCurrentValue__22rControllerInputPoint2PUi",
        Ok(
            "rControllerInputPoint2::GetCurrentValue(unsigned int *)",
        ),
    ),
    (
        "SetRange__22rControllerInputPoint2ff",
        Ok(
            "rControllerInputPoint2::SetRange(float, float)",
        ),
    ),
    (
        "GetRange__22rControllerInputPoint2PfT1",
        Ok(
            "rControllerInputPoint2::GetRange(float *, float *)",
        ),
    ),
    (
        "CalculateNewValue__22rControllerInputPoint2PUc",
        Ok(
            "rControllerInputPoint2::CalculateNewValue(unsigned char *)",
        ),
    ),
    (
        "iInitialize__22rControllerInputPoint2PUc",
        Ok(
            "rControllerInputPoint2::iInitialize(unsigned char *)",
        ),
    ),
    (
        "iHandleEvent__22rControllerInputPoint2PUcUi",
        Ok(
            "rControllerInputPoint2::iHandleEvent(unsigned char *, unsigned int)",
        ),
    ),
    (
        "__20LGDevWheelInputPointPC19LGDevInputPointData",
        Ok(
            "LGDevWheelInputPoint::LGDevWheelInputPoint(LGDevInputPointData const *)",
        ),
    ),
    (
        "_$_20LGDevWheelInputPoint",
        Ok(
            "LGDevWheelInputPoint::~LGDevWheelInputPoint(void)",
        ),
    ),
    (
        "CalculateNewValue__20LGDevWheelInputPointP13lgDevPosition",
        Ok(
            "LGDevWheelInputPoint::CalculateNewValue(lgDevPosition *)",
        ),
    ),
    (
        "HandleEvent__20LGDevWheelInputPointP13lgDevPositionUi",
        Ok(
            "LGDevWheelInputPoint::HandleEvent(lgDevPosition *, unsigned int)",
        ),
    ),
    (
        "SetTolerance__20LGDevWheelInputPointf",
        Ok(
            "LGDevWheelInputPoint::SetTolerance(float)",
        ),
    ),
    (
        "RegisterControllerInputPointCallback__20LGDevWheelInputPointP32IRadControllerInputPointCallbackUi",
        Ok(
            "LGDevWheelInputPoint::RegisterControllerInputPointCallback(IRadControllerInputPointCallback *, unsigned int)",
        ),
    ),
    (
        "UnRegisterControllerInputPointCallback__20LGDevWheelInputPointP32IRadControllerInputPointCallback",
        Ok(
            "LGDevWheelInputPoint::UnRegisterControllerInputPointCallback(IRadControllerInputPointCallback *)",
        ),
    ),
    (
        "GetCurrentValue__20LGDevWheelInputPointPUi",
        Ok(
            "LGDevWheelInputPoint::GetCurrentValue(unsigned int *)",
        ),
    ),
    (
        "GetRange__20LGDevWheelInputPointPfT1",
        Ok(
            "LGDevWheelInputPoint::GetRange(float *, float *)",
        ),
    ),
    (
        "__20LGDevWheelControllerP15lgDevDeviceDesc",
        Ok(
            "LGDevWheelController::LGDevWheelController(lgDevDeviceDesc *)",
        ),
    ),
    (
        "iPoll__20LGDevWheelControllerUi",
        Ok(
            "LGDevWheelController::iPoll(unsigned int)",
        ),
    ),
    (
        "iVirtualTimeChanged__20LGDevWheelController",
        Ok(
            "LGDevWheelController::iVirtualTimeChanged(void)",
        ),
    ),
    (
        "iSetBufferTime__20LGDevWheelControllerUi",
        Ok(
            "LGDevWheelController::iSetBufferTime(unsigned int)",
        ),
    ),
    (
        "Disconnect__20LGDevWheelController",
        Ok(
            "LGDevWheelController::Disconnect(void)",
        ),
    ),
    (
        "Connect__20LGDevWheelController",
        Ok(
            "LGDevWheelController::Connect(void)",
        ),
    ),
    (
        "IsConnected__20LGDevWheelController",
        Ok(
            "LGDevWheelController::IsConnected(void)",
        ),
    ),
    (
        "GetNumberOfInputPointsOfType__20LGDevWheelControllerPCc",
        Ok(
            "LGDevWheelController::GetNumberOfInputPointsOfType(char const *)",
        ),
    ),
    (
        "GetNumberOfOutputPointsOfType__20LGDevWheelControllerPCc",
        Ok(
            "LGDevWheelController::GetNumberOfOutputPointsOfType(char const *)",
        ),
    ),
    (
        "GetInputPointByTypeAndIndex__20LGDevWheelControllerPCcUi",
        Ok(
            "LGDevWheelController::GetInputPointByTypeAndIndex(char const *, unsigned int)",
        ),
    ),
    (
        "GetOutputPointByTypeAndIndex__20LGDevWheelControllerPCcUi",
        Ok(
            "LGDevWheelController::GetOutputPointByTypeAndIndex(char const *, unsigned int)",
        ),
    ),
    (
        "GetInputPointByName__20LGDevWheelControllerPCc",
        Ok(
            "LGDevWheelController::GetInputPointByName(char const *)",
        ),
    ),
    (
        "GetOutputPointByName__20LGDevWheelControllerPCc",
        Ok(
            "LGDevWheelController::GetOutputPointByName(char const *)",
        ),
    ),
    (
        "GetInputPointByIndex__20LGDevWheelControllerUi",
        Ok(
            "LGDevWheelController::GetInputPointByIndex(unsigned int)",
        ),
    ),
    (
        "GetOutputPointByIndex__20LGDevWheelControllerUi",
        Ok(
            "LGDevWheelController::GetOutputPointByIndex(unsigned int)",
        ),
    ),
    (
        "__21LGDevWheelOutputPointPCcUc",
        Ok(
            "LGDevWheelOutputPoint::LGDevWheelOutputPoint(char const *, unsigned char)",
        ),
    ),
    (
        "_$_21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint::~LGDevWheelOutputPoint(void)",
        ),
    ),
    (
        "GetGain__21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint::GetGain(void)",
        ),
    ),
    (
        "SetGain__21LGDevWheelOutputPointf",
        Ok(
            "LGDevWheelOutputPoint::SetGain(float)",
        ),
    ),
    (
        "GetEffect__C21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint::GetEffect(void) const",
        ),
    ),
    (
        "UpdateEffect__21LGDevWheelOutputPointPC16lgDevForceEffect",
        Ok(
            "LGDevWheelOutputPoint::UpdateEffect(lgDevForceEffect const *)",
        ),
    ),
    (
        "Update__21LGDevWheelOutputPointUi",
        Ok(
            "LGDevWheelOutputPoint::Update(unsigned int)",
        ),
    ),
    (
        "__tf18rControllerSystem2",
        Ok(
            "rControllerSystem2 type_info function",
        ),
    ),
    (
        "__tf20iControllerLocation2",
        Ok(
            "iControllerLocation2 type_info function",
        ),
    ),
    (
        "__tf12rController2",
        Ok(
            "rController2 type_info function",
        ),
    ),
    (
        "__tf25iControllerOutputHandler2",
        Ok(
            "iControllerOutputHandler2 type_info function",
        ),
    ),
    (
        "__tf23rControllerOutputPoint2",
        Ok(
            "rControllerOutputPoint2 type_info function",
        ),
    ),
    (
        "__tf22rControllerInputPoint2",
        Ok(
            "rControllerInputPoint2 type_info function",
        ),
    ),
    (
        "__tf20LGDevWheelInputPoint",
        Ok(
            "LGDevWheelInputPoint type_info function",
        ),
    ),
    (
        "__tf21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint type_info function",
        ),
    ),
    (
        "__tf20LGDevWheelController",
        Ok(
            "LGDevWheelController type_info function",
        ),
    ),
    (
        "__20IRadControllerSystem",
        Ok(
            "IRadControllerSystem::IRadControllerSystem(void)",
        ),
    ),
    (
        "__25IRadControllerOutputPoint",
        Ok(
            "IRadControllerOutputPoint::IRadControllerOutputPoint(void)",
        ),
    ),
    (
        "GetEffect__C25IRadControllerOutputPoint",
        Ok(
            "IRadControllerOutputPoint::GetEffect(void) const",
        ),
    ),
    (
        "UpdateEffect__25IRadControllerOutputPointPC16lgDevForceEffect",
        Ok(
            "IRadControllerOutputPoint::UpdateEffect(lgDevForceEffect const *)",
        ),
    ),
    (
        "Start__25IRadControllerOutputPoint",
        Ok(
            "IRadControllerOutputPoint::Start(void)",
        ),
    ),
    (
        "Stop__25IRadControllerOutputPoint",
        Ok(
            "IRadControllerOutputPoint::Stop(void)",
        ),
    ),
    (
        "Update__25IRadControllerOutputPointUi",
        Ok(
            "IRadControllerOutputPoint::Update(unsigned int)",
        ),
    ),
    (
        "__24IRadControllerInputPoint",
        Ok(
            "IRadControllerInputPoint::IRadControllerInputPoint(void)",
        ),
    ),
    (
        "__21iIControllerLocation2",
        Ok(
            "iIControllerLocation2::iIControllerLocation2(void)",
        ),
    ),
    (
        "__13iIController2",
        Ok(
            "iIController2::iIController2(void)",
        ),
    ),
    (
        "__33iRIControllerOutputPointCallback2",
        Ok(
            "iRIControllerOutputPointCallback2::iRIControllerOutputPointCallback2(void)",
        ),
    ),
    (
        "__23iIControllerInputPoint2",
        Ok(
            "iIControllerInputPoint2::iIControllerInputPoint2(void)",
        ),
    ),
    (
        "AddRef__20LGDevWheelInputPoint",
        Ok(
            "LGDevWheelInputPoint::AddRef(void)",
        ),
    ),
    (
        "Release__20LGDevWheelInputPoint",
        Ok(
            "LGDevWheelInputPoint::Release(void)",
        ),
    ),
    (
        "GetName__20LGDevWheelInputPoint",
        Ok(
            "LGDevWheelInputPoint::GetName(void)",
        ),
    ),
    (
        "GetType__20LGDevWheelInputPoint",
        Ok(
            "LGDevWheelInputPoint::GetType(void)",
        ),
    ),
    (
        "GetTolerance__20LGDevWheelInputPoint",
        Ok(
            "LGDevWheelInputPoint::GetTolerance(void)",
        ),
    ),
    (
        "SetRange__20LGDevWheelInputPointff",
        Ok(
            "LGDevWheelInputPoint::SetRange(float, float)",
        ),
    ),
    (
        "AddRef__21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint::AddRef(void)",
        ),
    ),
    (
        "Release__21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint::Release(void)",
        ),
    ),
    (
        "GetName__21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint::GetName(void)",
        ),
    ),
    (
        "GetType__21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint::GetType(void)",
        ),
    ),
    (
        "Start__21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint::Start(void)",
        ),
    ),
    (
        "Stop__21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint::Stop(void)",
        ),
    ),
    (
        "AddRef__20LGDevWheelController",
        Ok(
            "LGDevWheelController::AddRef(void)",
        ),
    ),
    (
        "Release__20LGDevWheelController",
        Ok(
            "LGDevWheelController::Release(void)",
        ),
    ),
    (
        "_$_20LGDevWheelController",
        Ok(
            "LGDevWheelController::~LGDevWheelController(void)",
        ),
    ),
    (
        "GetType__20LGDevWheelController",
        Ok(
            "LGDevWheelController::GetType(void)",
        ),
    ),
    (
        "GetClassification__20LGDevWheelController",
        Ok(
            "LGDevWheelController::GetClassification(void)",
        ),
    ),
    (
        "GetLocation__20LGDevWheelController",
        Ok(
            "LGDevWheelController::GetLocation(void)",
        ),
    ),
    (
        "GetNumberOfInputPoints__20LGDevWheelController",
        Ok(
            "LGDevWheelController::GetNumberOfInputPoints(void)",
        ),
    ),
    (
        "GetNumberOfOutputPoints__20LGDevWheelController",
        Ok(
            "LGDevWheelController::GetNumberOfOutputPoints(void)",
        ),
    ),
    (
        "__tf20IRadControllerSystem",
        Ok(
            "IRadControllerSystem type_info function",
        ),
    ),
    (
        "__tf25IRadControllerOutputPoint",
        Ok(
            "IRadControllerOutputPoint type_info function",
        ),
    ),
    (
        "__tf24IRadControllerInputPoint",
        Ok(
            "IRadControllerInputPoint type_info function",
        ),
    ),
    (
        "__tf21iIControllerLocation2",
        Ok(
            "iIControllerLocation2 type_info function",
        ),
    ),
    (
        "__tf13iIController2",
        Ok(
            "iIController2 type_info function",
        ),
    ),
    (
        "__tf33iRIControllerOutputPointCallback2",
        Ok(
            "iRIControllerOutputPointCallback2 type_info function",
        ),
    ),
    (
        "__tf23iIControllerInputPoint2",
        Ok(
            "iIControllerInputPoint2 type_info function",
        ),
    ),
    (
        "__14IRadController",
        Ok(
            "IRadController::IRadController(void)",
        ),
    ),
    (
        "__tf14IRadController",
        Ok(
            "IRadController type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$radControllerInitialize__FP38IRadControllerConnectionChangeCallbacki",
        Ok(
            "global constructors keyed to radControllerInitialize(IRadControllerConnectionChangeCallback *, int)",
        ),
    ),
    (
        "radMakeIconSys__FP13radPs2IconSysP11radSJISCharUs",
        Ok(
            "radMakeIconSys(radPs2IconSys *, radSJISChar *, unsigned short)",
        ),
    ),
    (
        "radSetIconSysTitle__FP13radPs2IconSysP11radSJISCharUs",
        Ok(
            "radSetIconSysTitle(radPs2IconSys *, radSJISChar *, unsigned short)",
        ),
    ),
    (
        "radFileInitialize__FUiUii",
        Ok(
            "radFileInitialize(unsigned int, unsigned int, int)",
        ),
    ),
    (
        "radFileTerminate__Fv",
        Ok(
            "radFileTerminate(void)",
        ),
    ),
    (
        "radFileService__Fv",
        Ok(
            "radFileService(void)",
        ),
    ),
    (
        "radFileOpenAsync__FPP8IRadFilePCcb16radFileOpenFlags15radFilePriorityUii14radMemorySpace",
        Ok(
            "radFileOpenAsync(IRadFile **, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
        ),
    ),
    (
        "radDriveOpenAsync__FPP9IRadDrivePCc15radFilePriorityi",
        Ok(
            "radDriveOpenAsync(IRadDrive **, char const *, radFilePriority, int)",
        ),
    ),
    (
        "radSetDefaultDrive__FPCc",
        Ok(
            "radSetDefaultDrive(char const *)",
        ),
    ),
    (
        "radFileRegisterCementLibraryAsync__FPP17IRadCementLibraryPCc24radCementLibraryPriorityUii14radMemorySpace",
        Ok(
            "radFileRegisterCementLibraryAsync(IRadCementLibrary **, char const *, radCementLibraryPriority, unsigned int, int, radMemorySpace)",
        ),
    ),
    (
        "radFileRegisterCementLibrarySync__FPP17IRadCementLibraryPCc24radCementLibraryPriorityUii14radMemorySpace",
        Ok(
            "radFileRegisterCementLibrarySync(IRadCementLibrary **, char const *, radCementLibraryPriority, unsigned int, int, radMemorySpace)",
        ),
    ),
    (
        "radDriveMount__FPCci",
        Ok(
            "radDriveMount(char const *, int)",
        ),
    ),
    (
        "radDriveUnmount__FPCc",
        Ok(
            "radDriveUnmount(char const *)",
        ),
    ),
    (
        "radPlatformInitialize__FPCc19radPlatformIOPMedia24radPlatformGameMediaTypeT0i",
        Ok(
            "radPlatformInitialize(char const *, radPlatformIOPMedia, radPlatformGameMediaType, char const *, int)",
        ),
    ),
    (
        "radPlatformTerminate__Fv",
        Ok(
            "radPlatformTerminate(void)",
        ),
    ),
    (
        "radPlatformGet__Fv",
        Ok(
            "radPlatformGet(void)",
        ),
    ),
    (
        "__tf11radPlatform",
        Ok(
            "radPlatform type_info function",
        ),
    ),
    (
        "__11radPlatform",
        Ok(
            "radPlatform::radPlatform(void)",
        ),
    ),
    (
        "AddRef__11radPlatform",
        Ok(
            "radPlatform::AddRef(void)",
        ),
    ),
    (
        "Release__11radPlatform",
        Ok(
            "radPlatform::Release(void)",
        ),
    ),
    (
        "LoadIrxModule__11radPlatformPCciPc",
        Ok(
            "radPlatform::LoadIrxModule(char const *, int, char *)",
        ),
    ),
    (
        "UnloadIrxModule__11radPlatformPCc",
        Ok(
            "radPlatform::UnloadIrxModule(char const *)",
        ),
    ),
    (
        "GetMediaType__11radPlatform",
        Ok(
            "radPlatform::GetMediaType(void)",
        ),
    ),
    (
        "__tf12IRadPlatform",
        Ok(
            "IRadPlatform type_info function",
        ),
    ),
    (
        "__12IRadPlatform",
        Ok(
            "IRadPlatform::IRadPlatform(void)",
        ),
    ),
    (
        "radThreadInitialize__FUi",
        Ok(
            "radThreadInitialize(unsigned int)",
        ),
    ),
    (
        "radThreadTerminate__Fv",
        Ok(
            "radThreadTerminate(void)",
        ),
    ),
    (
        "radThreadInternalLock__Fv",
        Ok(
            "radThreadInternalLock(void)",
        ),
    ),
    (
        "radThreadInternalUnlock__Fv",
        Ok(
            "radThreadInternalUnlock(void)",
        ),
    ),
    (
        "radThreadCreateMutex__FPP15IRadThreadMutexi",
        Ok(
            "radThreadCreateMutex(IRadThreadMutex **, int)",
        ),
    ),
    (
        "__14radThreadMutex",
        Ok(
            "radThreadMutex::radThreadMutex(void)",
        ),
    ),
    (
        "_$_14radThreadMutex",
        Ok(
            "radThreadMutex::~radThreadMutex(void)",
        ),
    ),
    (
        "Lock__14radThreadMutex",
        Ok(
            "radThreadMutex::Lock(void)",
        ),
    ),
    (
        "Unlock__14radThreadMutex",
        Ok(
            "radThreadMutex::Unlock(void)",
        ),
    ),
    (
        "AddRef__14radThreadMutex",
        Ok(
            "radThreadMutex::AddRef(void)",
        ),
    ),
    (
        "Release__14radThreadMutex",
        Ok(
            "radThreadMutex::Release(void)",
        ),
    ),
    (
        "__tf14radThreadMutex",
        Ok(
            "radThreadMutex type_info function",
        ),
    ),
    (
        "__15IRadThreadMutex",
        Ok(
            "IRadThreadMutex::IRadThreadMutex(void)",
        ),
    ),
    (
        "__tf15IRadThreadMutex",
        Ok(
            "IRadThreadMutex type_info function",
        ),
    ),
    (
        "radThreadCreateSemaphore__FPP19IRadThreadSemaphoreUii",
        Ok(
            "radThreadCreateSemaphore(IRadThreadSemaphore **, unsigned int, int)",
        ),
    ),
    (
        "__18radThreadSemaphoreUi",
        Ok(
            "radThreadSemaphore::radThreadSemaphore(unsigned int)",
        ),
    ),
    (
        "_$_18radThreadSemaphore",
        Ok(
            "radThreadSemaphore::~radThreadSemaphore(void)",
        ),
    ),
    (
        "Wait__18radThreadSemaphore",
        Ok(
            "radThreadSemaphore::Wait(void)",
        ),
    ),
    (
        "Signal__18radThreadSemaphore",
        Ok(
            "radThreadSemaphore::Signal(void)",
        ),
    ),
    (
        "AddRef__18radThreadSemaphore",
        Ok(
            "radThreadSemaphore::AddRef(void)",
        ),
    ),
    (
        "Release__18radThreadSemaphore",
        Ok(
            "radThreadSemaphore::Release(void)",
        ),
    ),
    (
        "__tf18radThreadSemaphore",
        Ok(
            "radThreadSemaphore type_info function",
        ),
    ),
    (
        "__19IRadThreadSemaphore",
        Ok(
            "IRadThreadSemaphore::IRadThreadSemaphore(void)",
        ),
    ),
    (
        "__tf19IRadThreadSemaphore",
        Ok(
            "IRadThreadSemaphore type_info function",
        ),
    ),
    (
        "radThreadCreateThread__FPP10IRadThreadPFPv_UiPvQ210IRadThread8PriorityUii",
        Ok(
            "radThreadCreateThread(IRadThread **, unsigned int (*)(void *), void *, IRadThread::Priority, unsigned int, int)",
        ),
    ),
    (
        "radThreadGetActiveThread__Fv",
        Ok(
            "radThreadGetActiveThread(void)",
        ),
    ),
    (
        "radThreadSleep__FUi",
        Ok(
            "radThreadSleep(unsigned int)",
        ),
    ),
    (
        "radThreadCreateLocalStorage__FPP22IRadThreadLocalStoragei",
        Ok(
            "radThreadCreateLocalStorage(IRadThreadLocalStorage **, int)",
        ),
    ),
    (
        "radThreadGetActiveFiber__Fv",
        Ok(
            "radThreadGetActiveFiber(void)",
        ),
    ),
    (
        "Initialize__9radThreadUi",
        Ok(
            "radThread::Initialize(unsigned int)",
        ),
    ),
    (
        "Terminate__9radThread",
        Ok(
            "radThread::Terminate(void)",
        ),
    ),
    (
        "AlarmHandler__9radThreadiUsPv",
        Ok(
            "radThread::AlarmHandler(int, unsigned short, void *)",
        ),
    ),
    (
        "__9radThread",
        Ok(
            "radThread::radThread(void)",
        ),
    ),
    (
        "__9radThreadPFPv_UiPvQ210IRadThread8PriorityUi",
        Ok(
            "radThread::radThread(unsigned int (*)(void *), void *, IRadThread::Priority, unsigned int)",
        ),
    ),
    (
        "_$_9radThread",
        Ok(
            "radThread::~radThread(void)",
        ),
    ),
    (
        "InternalThreadEntry__9radThreadPv",
        Ok(
            "radThread::InternalThreadEntry(void *)",
        ),
    ),
    (
        "SetPriority__9radThreadQ210IRadThread8Priority",
        Ok(
            "radThread::SetPriority(IRadThread::Priority)",
        ),
    ),
    (
        "GetPriority__9radThread",
        Ok(
            "radThread::GetPriority(void)",
        ),
    ),
    (
        "Suspend__9radThread",
        Ok(
            "radThread::Suspend(void)",
        ),
    ),
    (
        "Resume__9radThread",
        Ok(
            "radThread::Resume(void)",
        ),
    ),
    (
        "IsRunning__9radThreadPUi",
        Ok(
            "radThread::IsRunning(unsigned int *)",
        ),
    ),
    (
        "WaitForTermination__9radThread",
        Ok(
            "radThread::WaitForTermination(void)",
        ),
    ),
    (
        "IsActive__9radThread",
        Ok(
            "radThread::IsActive(void)",
        ),
    ),
    (
        "GetActiveThread__9radThread",
        Ok(
            "radThread::GetActiveThread(void)",
        ),
    ),
    (
        "SetLocalStorage__9radThreadUiPv",
        Ok(
            "radThread::SetLocalStorage(unsigned int, void *)",
        ),
    ),
    (
        "GetLocalStorage__9radThreadUi",
        Ok(
            "radThread::GetLocalStorage(unsigned int)",
        ),
    ),
    (
        "SetDefaultLocalStorage__9radThreadUi",
        Ok(
            "radThread::SetDefaultLocalStorage(unsigned int)",
        ),
    ),
    (
        "GetActiveFiber__9radThread",
        Ok(
            "radThread::GetActiveFiber(void)",
        ),
    ),
    (
        "AddRef__9radThread",
        Ok(
            "radThread::AddRef(void)",
        ),
    ),
    (
        "Release__9radThread",
        Ok(
            "radThread::Release(void)",
        ),
    ),
    (
        "__21radThreadLocalStorage",
        Ok(
            "radThreadLocalStorage::radThreadLocalStorage(void)",
        ),
    ),
    (
        "_$_21radThreadLocalStorage",
        Ok(
            "radThreadLocalStorage::~radThreadLocalStorage(void)",
        ),
    ),
    (
        "GetValue__21radThreadLocalStorage",
        Ok(
            "radThreadLocalStorage::GetValue(void)",
        ),
    ),
    (
        "SetValue__21radThreadLocalStoragePv",
        Ok(
            "radThreadLocalStorage::SetValue(void *)",
        ),
    ),
    (
        "AddRef__21radThreadLocalStorage",
        Ok(
            "radThreadLocalStorage::AddRef(void)",
        ),
    ),
    (
        "Release__21radThreadLocalStorage",
        Ok(
            "radThreadLocalStorage::Release(void)",
        ),
    ),
    (
        "__14radThreadFiber",
        Ok(
            "radThreadFiber::radThreadFiber(void)",
        ),
    ),
    (
        "_$_14radThreadFiber",
        Ok(
            "radThreadFiber::~radThreadFiber(void)",
        ),
    ),
    (
        "SwitchTo__14radThreadFiber",
        Ok(
            "radThreadFiber::SwitchTo(void)",
        ),
    ),
    (
        "GetValue__14radThreadFiber",
        Ok(
            "radThreadFiber::GetValue(void)",
        ),
    ),
    (
        "SetValue__14radThreadFiberPv",
        Ok(
            "radThreadFiber::SetValue(void *)",
        ),
    ),
    (
        "AddRef__14radThreadFiber",
        Ok(
            "radThreadFiber::AddRef(void)",
        ),
    ),
    (
        "Release__14radThreadFiber",
        Ok(
            "radThreadFiber::Release(void)",
        ),
    ),
    (
        "PS2SwitchToFiber__14radThreadFiberPUiT1UiUi",
        Ok(
            "radThreadFiber::PS2SwitchToFiber(unsigned int *, unsigned int *, unsigned int, unsigned int)",
        ),
    ),
    (
        "__tf14radThreadFiber",
        Ok(
            "radThreadFiber type_info function",
        ),
    ),
    (
        "__tf9radThread",
        Ok(
            "radThread type_info function",
        ),
    ),
    (
        "__tf21radThreadLocalStorage",
        Ok(
            "radThreadLocalStorage type_info function",
        ),
    ),
    (
        "__10IRadThread",
        Ok(
            "IRadThread::IRadThread(void)",
        ),
    ),
    (
        "__22IRadThreadLocalStorage",
        Ok(
            "IRadThreadLocalStorage::IRadThreadLocalStorage(void)",
        ),
    ),
    (
        "__15IRadThreadFiber",
        Ok(
            "IRadThreadFiber::IRadThreadFiber(void)",
        ),
    ),
    (
        "__tf10IRadThread",
        Ok(
            "IRadThread type_info function",
        ),
    ),
    (
        "__tf22IRadThreadLocalStorage",
        Ok(
            "IRadThreadLocalStorage type_info function",
        ),
    ),
    (
        "__tf15IRadThreadFiber",
        Ok(
            "IRadThreadFiber type_info function",
        ),
    ),
    (
        "radTextDisplayGet__FPP15IRadTextDisplayi",
        Ok(
            "radTextDisplayGet(IRadTextDisplay **, int)",
        ),
    ),
    (
        "Initialize__14radTextDisplayi",
        Ok(
            "radTextDisplay::Initialize(int)",
        ),
    ),
    (
        "Terminate__14radTextDisplay",
        Ok(
            "radTextDisplay::Terminate(void)",
        ),
    ),
    (
        "SetAutoSwap__14radTextDisplayb",
        Ok(
            "radTextDisplay::SetAutoSwap(bool)",
        ),
    ),
    (
        "SwapBuffers__14radTextDisplay",
        Ok(
            "radTextDisplay::SwapBuffers(void)",
        ),
    ),
    (
        "AddRef__14radTextDisplay",
        Ok(
            "radTextDisplay::AddRef(void)",
        ),
    ),
    (
        "Release__14radTextDisplay",
        Ok(
            "radTextDisplay::Release(void)",
        ),
    ),
    (
        "SetBackgroundColor__14radTextDisplayUi",
        Ok(
            "radTextDisplay::SetBackgroundColor(unsigned int)",
        ),
    ),
    (
        "SetTextColor__14radTextDisplayUi",
        Ok(
            "radTextDisplay::SetTextColor(unsigned int)",
        ),
    ),
    (
        "Clear__14radTextDisplay",
        Ok(
            "radTextDisplay::Clear(void)",
        ),
    ),
    (
        "GetDimensions__C14radTextDisplayPUiT1",
        Ok(
            "radTextDisplay::GetDimensions(unsigned int *, unsigned int *) const",
        ),
    ),
    (
        "SetCursorPosition__14radTextDisplayUiUi",
        Ok(
            "radTextDisplay::SetCursorPosition(unsigned int, unsigned int)",
        ),
    ),
    (
        "TextOut__14radTextDisplayPCc",
        Ok(
            "radTextDisplay::TextOut(char const *)",
        ),
    ),
    (
        "TextOutAt__14radTextDisplayPCcii",
        Ok(
            "radTextDisplay::TextOutAt(char const *, int, int)",
        ),
    ),
    (
        "WriteLetter__14radTextDisplayiic",
        Ok(
            "radTextDisplay::WriteLetter(int, int, char)",
        ),
    ),
    (
        "ScrollUp__14radTextDisplay",
        Ok(
            "radTextDisplay::ScrollUp(void)",
        ),
    ),
    (
        "PaintIfAutoSwapOn__14radTextDisplay",
        Ok(
            "radTextDisplay::PaintIfAutoSwapOn(void)",
        ),
    ),
    (
        "Paint__14radTextDisplay",
        Ok(
            "radTextDisplay::Paint(void)",
        ),
    ),
    (
        "InitDisplay__14radTextDisplay",
        Ok(
            "radTextDisplay::InitDisplay(void)",
        ),
    ),
    (
        "CloseDisplay__14radTextDisplay",
        Ok(
            "radTextDisplay::CloseDisplay(void)",
        ),
    ),
    (
        "Ps2InitConsole__14radTextDisplay",
        Ok(
            "radTextDisplay::Ps2InitConsole(void)",
        ),
    ),
    (
        "Ps2SwapBuffers__14radTextDisplay",
        Ok(
            "radTextDisplay::Ps2SwapBuffers(void)",
        ),
    ),
    (
        "__15IRadTextDisplay",
        Ok(
            "IRadTextDisplay::IRadTextDisplay(void)",
        ),
    ),
    (
        "__14radTextDisplay",
        Ok(
            "radTextDisplay::radTextDisplay(void)",
        ),
    ),
    (
        "__tf14radTextDisplay",
        Ok(
            "radTextDisplay type_info function",
        ),
    ),
    (
        "__tf15IRadTextDisplay",
        Ok(
            "IRadTextDisplay type_info function",
        ),
    ),
    (
        "_GLOBAL_$I$_14radTextDisplay$m_Initialized",
        Ok(
            "global constructors keyed to radTextDisplay::m_Initialized",
        ),
    ),
    (
        "radWeakCallbackWrapperCreate__FPP23IRadWeakCallbackWrapperi",
        Ok(
            "radWeakCallbackWrapperCreate(IRadWeakCallbackWrapper **, int)",
        ),
    ),
    (
        "_$_22radWeakCallbackWrapper",
        Ok(
            "radWeakCallbackWrapper::~radWeakCallbackWrapper(void)",
        ),
    ),
    (
        "__tf22radWeakCallbackWrapper",
        Ok(
            "radWeakCallbackWrapper type_info function",
        ),
    ),
    (
        "__23IRadWeakCallbackWrapper",
        Ok(
            "IRadWeakCallbackWrapper::IRadWeakCallbackWrapper(void)",
        ),
    ),
    (
        "AddRef__22radWeakCallbackWrapper",
        Ok(
            "radWeakCallbackWrapper::AddRef(void)",
        ),
    ),
    (
        "Release__22radWeakCallbackWrapper",
        Ok(
            "radWeakCallbackWrapper::Release(void)",
        ),
    ),
    (
        "SetWeakInterface__22radWeakCallbackWrapperPv",
        Ok(
            "radWeakCallbackWrapper::SetWeakInterface(void *)",
        ),
    ),
    (
        "GetWeakInterface__22radWeakCallbackWrapper",
        Ok(
            "radWeakCallbackWrapper::GetWeakInterface(void)",
        ),
    ),
    (
        "SetUserData__22radWeakCallbackWrapperPv",
        Ok(
            "radWeakCallbackWrapper::SetUserData(void *)",
        ),
    ),
    (
        "GetUserData__22radWeakCallbackWrapper",
        Ok(
            "radWeakCallbackWrapper::GetUserData(void)",
        ),
    ),
    (
        "__tf23IRadWeakCallbackWrapper",
        Ok(
            "IRadWeakCallbackWrapper type_info function",
        ),
    ),
    (
        "radControllerBufferCreate__FPP20IRadControllerBufferi",
        Ok(
            "radControllerBufferCreate(IRadControllerBuffer **, int)",
        ),
    ),
    (
        "__16ControllerBufferi",
        Ok(
            "ControllerBuffer::ControllerBuffer(int)",
        ),
    ),
    (
        "_$_16ControllerBuffer",
        Ok(
            "ControllerBuffer::~ControllerBuffer(void)",
        ),
    ),
    (
        "AddRef__16ControllerBuffer",
        Ok(
            "ControllerBuffer::AddRef(void)",
        ),
    ),
    (
        "Release__16ControllerBuffer",
        Ok(
            "ControllerBuffer::Release(void)",
        ),
    ),
    (
        "Initialize__16ControllerBufferUiUi",
        Ok(
            "ControllerBuffer::Initialize(unsigned int, unsigned int)",
        ),
    ),
    (
        "SetQueueSize__16ControllerBufferUi",
        Ok(
            "ControllerBuffer::SetQueueSize(unsigned int)",
        ),
    ),
    (
        "EnqueuePacket__16ControllerBufferPv",
        Ok(
            "ControllerBuffer::EnqueuePacket(void *)",
        ),
    ),
    (
        "PeekNextPacket__16ControllerBufferPvi",
        Ok(
            "ControllerBuffer::PeekNextPacket(void *, int)",
        ),
    ),
    (
        "DequeuePacket__16ControllerBufferPv",
        Ok(
            "ControllerBuffer::DequeuePacket(void *)",
        ),
    ),
    (
        "Flush__16ControllerBuffer",
        Ok(
            "ControllerBuffer::Flush(void)",
        ),
    ),
    (
        "__tf16ControllerBuffer",
        Ok(
            "ControllerBuffer type_info function",
        ),
    ),
    (
        "__20IRadControllerBuffer",
        Ok(
            "IRadControllerBuffer::IRadControllerBuffer(void)",
        ),
    ),
    (
        "__tf20IRadControllerBuffer",
        Ok(
            "IRadControllerBuffer type_info function",
        ),
    ),
    (
        "Initialize__13radFileSystemUiUii",
        Ok(
            "radFileSystem::Initialize(unsigned int, unsigned int, int)",
        ),
    ),
    (
        "Terminate__13radFileSystem",
        Ok(
            "radFileSystem::Terminate(void)",
        ),
    ),
    (
        "Lock__13radFileSystem",
        Ok(
            "radFileSystem::Lock(void)",
        ),
    ),
    (
        "Unlock__13radFileSystem",
        Ok(
            "radFileSystem::Unlock(void)",
        ),
    ),
    (
        "Service__13radFileSystem",
        Ok(
            "radFileSystem::Service(void)",
        ),
    ),
    (
        "ProcessFileName__13radFileSystemPCcPcT2PPcb",
        Ok(
            "radFileSystem::ProcessFileName(char const *, char *, char *, char **, bool)",
        ),
    ),
    (
        "FileOpen__13radFileSystemPP8IRadFilePCcb16radFileOpenFlags15radFilePriorityUii14radMemorySpace",
        Ok(
            "radFileSystem::FileOpen(IRadFile **, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
        ),
    ),
    (
        "DriveOpen__13radFileSystemPP9IRadDrivePCc15radFilePriorityi",
        Ok(
            "radFileSystem::DriveOpen(IRadDrive **, char const *, radFilePriority, int)",
        ),
    ),
    (
        "SetDefaultDrive__13radFileSystemPCc",
        Ok(
            "radFileSystem::SetDefaultDrive(char const *)",
        ),
    ),
    (
        "RegisterCementLibrary__13radFileSystemPP17IRadCementLibraryPCc24radCementLibraryPriorityUii14radMemorySpace",
        Ok(
            "radFileSystem::RegisterCementLibrary(IRadCementLibrary **, char const *, radCementLibraryPriority, unsigned int, int, radMemorySpace)",
        ),
    ),
    (
        "RegisterCementLibrarySync__13radFileSystemPP17IRadCementLibraryPCc24radCementLibraryPriorityUii14radMemorySpace",
        Ok(
            "radFileSystem::RegisterCementLibrarySync(IRadCementLibrary **, char const *, radCementLibraryPriority, unsigned int, int, radMemorySpace)",
        ),
    ),
    (
        "GetConnectTimeOut__13radFileSystem",
        Ok(
            "radFileSystem::GetConnectTimeOut(void)",
        ),
    ),
    (
        "DriveMount__13radFileSystemPCci",
        Ok(
            "radFileSystem::DriveMount(char const *, int)",
        ),
    ),
    (
        "DriveUnmount__13radFileSystemPCc",
        Ok(
            "radFileSystem::DriveUnmount(char const *)",
        ),
    ),
    (
        "GetDriveIndex__13radFileSystemPCc",
        Ok(
            "radFileSystem::GetDriveIndex(char const *)",
        ),
    ),
    (
        "ConstructDrive__13radFileSystemPP8radDrivePCci",
        Ok(
            "radFileSystem::ConstructDrive(radDrive **, char const *, int)",
        ),
    ),
    (
        "PlatformDrivesGetDefaultDrive__FPc",
        Ok(
            "PlatformDrivesGetDefaultDrive(char *)",
        ),
    ),
    (
        "PlatformDrivesValidateDriveName__FPCc",
        Ok(
            "PlatformDrivesValidateDriveName(char const *)",
        ),
    ),
    (
        "PlatformDrivesFactory__FPP8radDrivePCci",
        Ok(
            "PlatformDrivesFactory(radDrive **, char const *, int)",
        ),
    ),
    (
        "radRemoteDriveFactory__FPP8radDrivePCci",
        Ok(
            "radRemoteDriveFactory(radDrive **, char const *, int)",
        ),
    ),
    (
        "__14radRemoteDriveiP17IRadDbgComChannel",
        Ok(
            "radRemoteDrive::radRemoteDrive(int, IRadDbgComChannel *)",
        ),
    ),
    (
        "_$_14radRemoteDrive",
        Ok(
            "radRemoteDrive::~radRemoteDrive(void)",
        ),
    ),
    (
        "Lock__14radRemoteDrive",
        Ok(
            "radRemoteDrive::Lock(void)",
        ),
    ),
    (
        "Unlock__14radRemoteDrive",
        Ok(
            "radRemoteDrive::Unlock(void)",
        ),
    ),
    (
        "GetDriveName__14radRemoteDrive",
        Ok(
            "radRemoteDrive::GetDriveName(void)",
        ),
    ),
    (
        "GetCapabilities__14radRemoteDrive",
        Ok(
            "radRemoteDrive::GetCapabilities(void)",
        ),
    ),
    (
        "Initialize__14radRemoteDrive",
        Ok(
            "radRemoteDrive::Initialize(void)",
        ),
    ),
    (
        "DoInitialize__14radRemoteDrive",
        Ok(
            "radRemoteDrive::DoInitialize(void)",
        ),
    ),
    (
        "OpenFile__14radRemoteDrivePCc16radFileOpenFlagsbPUiT4",
        Ok(
            "radRemoteDrive::OpenFile(char const *, radFileOpenFlags, bool, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "DoOpen__14radRemoteDrive",
        Ok(
            "radRemoteDrive::DoOpen(void)",
        ),
    ),
    (
        "ReceiveOpen__14radRemoteDriveUi",
        Ok(
            "radRemoteDrive::ReceiveOpen(unsigned int)",
        ),
    ),
    (
        "CloseFile__14radRemoteDriveUiPCc",
        Ok(
            "radRemoteDrive::CloseFile(unsigned int, char const *)",
        ),
    ),
    (
        "DoClose__14radRemoteDrive",
        Ok(
            "radRemoteDrive::DoClose(void)",
        ),
    ),
    (
        "ReceiveClose__14radRemoteDriveUi",
        Ok(
            "radRemoteDrive::ReceiveClose(unsigned int)",
        ),
    ),
    (
        "DestroyFile__14radRemoteDrivePCc",
        Ok(
            "radRemoteDrive::DestroyFile(char const *)",
        ),
    ),
    (
        "DoDestroy__14radRemoteDrive",
        Ok(
            "radRemoteDrive::DoDestroy(void)",
        ),
    ),
    (
        "ReceiveDestroy__14radRemoteDriveUi",
        Ok(
            "radRemoteDrive::ReceiveDestroy(unsigned int)",
        ),
    ),
    (
        "ReadFile__14radRemoteDriveUiPCcQ28IRadFile17BufferedReadStateUiPvUiPUi14radMemorySpace",
        Ok(
            "radRemoteDrive::ReadFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "DoRead__14radRemoteDrive",
        Ok(
            "radRemoteDrive::DoRead(void)",
        ),
    ),
    (
        "ReceiveRead__14radRemoteDriveUi",
        Ok(
            "radRemoteDrive::ReceiveRead(unsigned int)",
        ),
    ),
    (
        "WriteFile__14radRemoteDriveUiPCcQ28IRadFile17BufferedReadStateUiPCvUiPUiT714radMemorySpace",
        Ok(
            "radRemoteDrive::WriteFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void const *, unsigned int, unsigned int *, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "DoWrite__14radRemoteDrive",
        Ok(
            "radRemoteDrive::DoWrite(void)",
        ),
    ),
    (
        "ReceiveWrite__14radRemoteDriveUi",
        Ok(
            "radRemoteDrive::ReceiveWrite(unsigned int)",
        ),
    ),
    (
        "FindFirst__14radRemoteDrivePCcPQ29IRadDrive13DirectoryInfoP16radFileDirHandleb",
        Ok(
            "radRemoteDrive::FindFirst(char const *, IRadDrive::DirectoryInfo *, radFileDirHandle *, bool)",
        ),
    ),
    (
        "DoFindFirst__14radRemoteDrive",
        Ok(
            "radRemoteDrive::DoFindFirst(void)",
        ),
    ),
    (
        "ReceiveFindFirst__14radRemoteDriveUi",
        Ok(
            "radRemoteDrive::ReceiveFindFirst(unsigned int)",
        ),
    ),
    (
        "FindNext__14radRemoteDriveP16radFileDirHandlePQ29IRadDrive13DirectoryInfo",
        Ok(
            "radRemoteDrive::FindNext(radFileDirHandle *, IRadDrive::DirectoryInfo *)",
        ),
    ),
    (
        "DoFindNext__14radRemoteDrive",
        Ok(
            "radRemoteDrive::DoFindNext(void)",
        ),
    ),
    (
        "ReceiveFindNext__14radRemoteDriveUi",
        Ok(
            "radRemoteDrive::ReceiveFindNext(unsigned int)",
        ),
    ),
    (
        "FindClose__14radRemoteDriveP16radFileDirHandle",
        Ok(
            "radRemoteDrive::FindClose(radFileDirHandle *)",
        ),
    ),
    (
        "DoFindClose__14radRemoteDrive",
        Ok(
            "radRemoteDrive::DoFindClose(void)",
        ),
    ),
    (
        "ReceiveFindClose__14radRemoteDriveUi",
        Ok(
            "radRemoteDrive::ReceiveFindClose(unsigned int)",
        ),
    ),
    (
        "Service__14radRemoteDrive",
        Ok(
            "radRemoteDrive::Service(void)",
        ),
    ),
    (
        "OnSendComplete__14radRemoteDriveb",
        Ok(
            "radRemoteDrive::OnSendComplete(bool)",
        ),
    ),
    (
        "OnReceiveComplete__14radRemoteDrivebUi",
        Ok(
            "radRemoteDrive::OnReceiveComplete(bool, unsigned int)",
        ),
    ),
    (
        "ProcessDisconnect__14radRemoteDrive",
        Ok(
            "radRemoteDrive::ProcessDisconnect(void)",
        ),
    ),
    (
        "__tf14radRemoteDrive",
        Ok(
            "radRemoteDrive type_info function",
        ),
    ),
    (
        "AddRef__14radRemoteDrive",
        Ok(
            "radRemoteDrive::AddRef(void)",
        ),
    ),
    (
        "Release__14radRemoteDrive",
        Ok(
            "radRemoteDrive::Release(void)",
        ),
    ),
    (
        "radCementLibraryCreate__FPP17IRadCementLibraryP8radDrivePCc24radCementLibraryPriorityUii14radMemorySpace",
        Ok(
            "radCementLibraryCreate(IRadCementLibrary **, radDrive *, char const *, radCementLibraryPriority, unsigned int, int, radMemorySpace)",
        ),
    ),
    (
        "__16radCementLibraryP8radDriveP7radFile24radCementLibraryPriority",
        Ok(
            "radCementLibrary::radCementLibrary(radDrive *, radFile *, radCementLibraryPriority)",
        ),
    ),
    (
        "_$_16radCementLibrary",
        Ok(
            "radCementLibrary::~radCementLibrary(void)",
        ),
    ),
    (
        "Lock__16radCementLibrary",
        Ok(
            "radCementLibrary::Lock(void)",
        ),
    ),
    (
        "Unlock__16radCementLibrary",
        Ok(
            "radCementLibrary::Unlock(void)",
        ),
    ),
    (
        "GetStatus__16radCementLibrary",
        Ok(
            "radCementLibrary::GetStatus(void)",
        ),
    ),
    (
        "WaitForCompletion__16radCementLibrary",
        Ok(
            "radCementLibrary::WaitForCompletion(void)",
        ),
    ),
    (
        "IsOpen__16radCementLibrary",
        Ok(
            "radCementLibrary::IsOpen(void)",
        ),
    ),
    (
        "SetCompletionCallback__16radCementLibraryP35IRadCementLibraryCompletionCallbackPv",
        Ok(
            "radCementLibrary::SetCompletionCallback(IRadCementLibraryCompletionCallback *, void *)",
        ),
    ),
    (
        "OnFileOperationsComplete__16radCementLibraryPv",
        Ok(
            "radCementLibrary::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "OpenFile__16radCementLibraryPCcPUiT2",
        Ok(
            "radCementLibrary::OpenFile(char const *, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "CompleteRegister__16radCementLibraryQ217IRadCementLibrary19CementLibraryStatus",
        Ok(
            "radCementLibrary::CompleteRegister(IRadCementLibrary::CementLibraryStatus)",
        ),
    ),
    (
        "GetPriority__C16radCementLibrary",
        Ok(
            "radCementLibrary::GetPriority(void) const",
        ),
    ),
    (
        "__20radCementLibraryList",
        Ok(
            "radCementLibraryList::radCementLibraryList(void)",
        ),
    ),
    (
        "_$_20radCementLibraryList",
        Ok(
            "radCementLibraryList::~radCementLibraryList(void)",
        ),
    ),
    (
        "AddLibrary__20radCementLibraryListP16radCementLibrary",
        Ok(
            "radCementLibraryList::AddLibrary(radCementLibrary *)",
        ),
    ),
    (
        "RemoveLibrary__20radCementLibraryListPC16radCementLibrary",
        Ok(
            "radCementLibraryList::RemoveLibrary(radCementLibrary const *)",
        ),
    ),
    (
        "BeginIteration__20radCementLibraryList24radCementLibraryPriority",
        Ok(
            "radCementLibraryList::BeginIteration(radCementLibraryPriority)",
        ),
    ),
    (
        "GetNext__20radCementLibraryList",
        Ok(
            "radCementLibraryList::GetNext(void)",
        ),
    ),
    (
        "__tf15radSafeRefCount",
        Ok(
            "radSafeRefCount type_info function",
        ),
    ),
    (
        "__tf16radCementLibrary",
        Ok(
            "radCementLibrary type_info function",
        ),
    ),
    (
        "__17IRadCementLibrary",
        Ok(
            "IRadCementLibrary::IRadCementLibrary(void)",
        ),
    ),
    (
        "__11IRadMutable",
        Ok(
            "IRadMutable::IRadMutable(void)",
        ),
    ),
    (
        "_$_15radSafeRefCount",
        Ok(
            "radSafeRefCount::~radSafeRefCount(void)",
        ),
    ),
    (
        "AddRef__16radCementLibrary",
        Ok(
            "radCementLibrary::AddRef(void)",
        ),
    ),
    (
        "Release__16radCementLibrary",
        Ok(
            "radCementLibrary::Release(void)",
        ),
    ),
    (
        "__tf17IRadCementLibrary",
        Ok(
            "IRadCementLibrary type_info function",
        ),
    ),
    (
        "__tf11IRadMutable",
        Ok(
            "IRadMutable type_info function",
        ),
    ),
    (
        "radPs2CdDriveFactory__FPP8radDrivePCci",
        Ok(
            "radPs2CdDriveFactory(radDrive **, char const *, int)",
        ),
    ),
    (
        "__13radPs2CdDrivei",
        Ok(
            "radPs2CdDrive::radPs2CdDrive(int)",
        ),
    ),
    (
        "_$_13radPs2CdDrive",
        Ok(
            "radPs2CdDrive::~radPs2CdDrive(void)",
        ),
    ),
    (
        "Lock__13radPs2CdDrive",
        Ok(
            "radPs2CdDrive::Lock(void)",
        ),
    ),
    (
        "Unlock__13radPs2CdDrive",
        Ok(
            "radPs2CdDrive::Unlock(void)",
        ),
    ),
    (
        "GetCapabilities__13radPs2CdDrive",
        Ok(
            "radPs2CdDrive::GetCapabilities(void)",
        ),
    ),
    (
        "GetDriveName__13radPs2CdDrive",
        Ok(
            "radPs2CdDrive::GetDriveName(void)",
        ),
    ),
    (
        "GetReadBufferSectors__13radPs2CdDrive",
        Ok(
            "radPs2CdDrive::GetReadBufferSectors(void)",
        ),
    ),
    (
        "Initialize__13radPs2CdDrive",
        Ok(
            "radPs2CdDrive::Initialize(void)",
        ),
    ),
    (
        "OpenFile__13radPs2CdDrivePCc16radFileOpenFlagsbPUiT4",
        Ok(
            "radPs2CdDrive::OpenFile(char const *, radFileOpenFlags, bool, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "CloseFile__13radPs2CdDriveUiPCc",
        Ok(
            "radPs2CdDrive::CloseFile(unsigned int, char const *)",
        ),
    ),
    (
        "ReadAligned__13radPs2CdDriveUiPCcUiUiPv14radMemorySpace",
        Ok(
            "radPs2CdDrive::ReadAligned(unsigned int, char const *, unsigned int, unsigned int, void *, radMemorySpace)",
        ),
    ),
    (
        "ReadBuffered__13radPs2CdDriveUiPCcUiUiUiUiPv14radMemorySpace",
        Ok(
            "radPs2CdDrive::ReadBuffered(unsigned int, char const *, unsigned int, unsigned int, unsigned int, unsigned int, void *, radMemorySpace)",
        ),
    ),
    (
        "FindFirst__13radPs2CdDrivePCcPQ29IRadDrive13DirectoryInfoP16radFileDirHandleb",
        Ok(
            "radPs2CdDrive::FindFirst(char const *, IRadDrive::DirectoryInfo *, radFileDirHandle *, bool)",
        ),
    ),
    (
        "FindNext__13radPs2CdDriveP16radFileDirHandlePQ29IRadDrive13DirectoryInfo",
        Ok(
            "radPs2CdDrive::FindNext(radFileDirHandle *, IRadDrive::DirectoryInfo *)",
        ),
    ),
    (
        "FindClose__13radPs2CdDriveP16radFileDirHandle",
        Ok(
            "radPs2CdDrive::FindClose(radFileDirHandle *)",
        ),
    ),
    (
        "ErrorToMediaState__F12radFileError",
        Ok(
            "ErrorToMediaState(radFileError)",
        ),
    ),
    (
        "SetMediaInfo__13radPs2CdDrive",
        Ok(
            "radPs2CdDrive::SetMediaInfo(void)",
        ),
    ),
    (
        "ReadVolumeName__13radPs2CdDrivePc",
        Ok(
            "radPs2CdDrive::ReadVolumeName(char *)",
        ),
    ),
    (
        "LoadDirectory__13radPs2CdDrive",
        Ok(
            "radPs2CdDrive::LoadDirectory(void)",
        ),
    ),
    (
        "BuildDirectory__13radPs2CdDriveUiUiPcUi",
        Ok(
            "radPs2CdDrive::BuildDirectory(unsigned int, unsigned int, char *, unsigned int)",
        ),
    ),
    (
        "FindDirectorySector__13radPs2CdDrivePCcUiPUiT3",
        Ok(
            "radPs2CdDrive::FindDirectorySector(char const *, unsigned int, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "BuildFileSpec__13radPs2CdDrivePCcPcUiPPc",
        Ok(
            "radPs2CdDrive::BuildFileSpec(char const *, char *, unsigned int, char **)",
        ),
    ),
    (
        "Read__13radPs2CdDriveUiPvUib",
        Ok(
            "radPs2CdDrive::Read(unsigned int, void *, unsigned int, bool)",
        ),
    ),
    (
        "DiskChanged__13radPs2CdDrive",
        Ok(
            "radPs2CdDrive::DiskChanged(void)",
        ),
    ),
    (
        "FileNameMatchesSearch__13radPs2CdDrivePCcT1",
        Ok(
            "radPs2CdDrive::FileNameMatchesSearch(char const *, char const *)",
        ),
    ),
    (
        "radBinarySearch__H1ZQ213radPs2CdDrive14DirectoryEntry_RCX01PCX01iPUi_b",
        Ok(
            "bool radBinarySearch<radPs2CdDrive::DirectoryEntry>(radPs2CdDrive::DirectoryEntry const &, radPs2CdDrive::DirectoryEntry const *, int, unsigned int *)",
        ),
    ),
    (
        "__tf13radPs2CdDrive",
        Ok(
            "radPs2CdDrive type_info function",
        ),
    ),
    (
        "__17radBufferedReader",
        Ok(
            "radBufferedReader::radBufferedReader(void)",
        ),
    ),
    (
        "ReadFile__13radPs2CdDriveUiPCcQ28IRadFile17BufferedReadStateUiPvUiPUi14radMemorySpace",
        Ok(
            "radPs2CdDrive::ReadFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "compare__Q213radPs2CdDrive14DirectoryEntryPCvT1",
        Ok(
            "radPs2CdDrive::DirectoryEntry::compare(void const *, void const *)",
        ),
    ),
    (
        "__tf17radBufferedReader",
        Ok(
            "radBufferedReader type_info function",
        ),
    ),
    (
        "radPs2HostDriveFactory__FPP8radDrivePCci",
        Ok(
            "radPs2HostDriveFactory(radDrive **, char const *, int)",
        ),
    ),
    (
        "__15radPs2HostDrivei",
        Ok(
            "radPs2HostDrive::radPs2HostDrive(int)",
        ),
    ),
    (
        "_$_15radPs2HostDrive",
        Ok(
            "radPs2HostDrive::~radPs2HostDrive(void)",
        ),
    ),
    (
        "Lock__15radPs2HostDrive",
        Ok(
            "radPs2HostDrive::Lock(void)",
        ),
    ),
    (
        "Unlock__15radPs2HostDrive",
        Ok(
            "radPs2HostDrive::Unlock(void)",
        ),
    ),
    (
        "GetCapabilities__15radPs2HostDrive",
        Ok(
            "radPs2HostDrive::GetCapabilities(void)",
        ),
    ),
    (
        "GetDriveName__15radPs2HostDrive",
        Ok(
            "radPs2HostDrive::GetDriveName(void)",
        ),
    ),
    (
        "GetReadBufferSectors__15radPs2HostDrive",
        Ok(
            "radPs2HostDrive::GetReadBufferSectors(void)",
        ),
    ),
    (
        "Initialize__15radPs2HostDrive",
        Ok(
            "radPs2HostDrive::Initialize(void)",
        ),
    ),
    (
        "OpenFile__15radPs2HostDrivePCc16radFileOpenFlagsbPUiT4",
        Ok(
            "radPs2HostDrive::OpenFile(char const *, radFileOpenFlags, bool, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "CloseFile__15radPs2HostDriveUiPCc",
        Ok(
            "radPs2HostDrive::CloseFile(unsigned int, char const *)",
        ),
    ),
    (
        "ReadAligned__15radPs2HostDriveUiPCcUiUiPv14radMemorySpace",
        Ok(
            "radPs2HostDrive::ReadAligned(unsigned int, char const *, unsigned int, unsigned int, void *, radMemorySpace)",
        ),
    ),
    (
        "ReadBuffered__15radPs2HostDriveUiPCcUiUiUiUiPv14radMemorySpace",
        Ok(
            "radPs2HostDrive::ReadBuffered(unsigned int, char const *, unsigned int, unsigned int, unsigned int, unsigned int, void *, radMemorySpace)",
        ),
    ),
    (
        "DestroyFile__15radPs2HostDrivePCc",
        Ok(
            "radPs2HostDrive::DestroyFile(char const *)",
        ),
    ),
    (
        "BuildFileSpec__15radPs2HostDrivePCcPcUiPPc",
        Ok(
            "radPs2HostDrive::BuildFileSpec(char const *, char *, unsigned int, char **)",
        ),
    ),
    (
        "__tf15radPs2HostDrive",
        Ok(
            "radPs2HostDrive type_info function",
        ),
    ),
    (
        "ReadFile__15radPs2HostDriveUiPCcQ28IRadFile17BufferedReadStateUiPvUiPUi14radMemorySpace",
        Ok(
            "radPs2HostDrive::ReadFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "radPs2MemcardDriveFactory__FPP8radDrivePCci",
        Ok(
            "radPs2MemcardDriveFactory(radDrive **, char const *, int)",
        ),
    ),
    (
        "__18radPs2MemcardDrivePCci",
        Ok(
            "radPs2MemcardDrive::radPs2MemcardDrive(char const *, int)",
        ),
    ),
    (
        "_$_18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::~radPs2MemcardDrive(void)",
        ),
    ),
    (
        "Lock__18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::Lock(void)",
        ),
    ),
    (
        "Unlock__18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::Unlock(void)",
        ),
    ),
    (
        "GetCapabilities__18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::GetCapabilities(void)",
        ),
    ),
    (
        "GetDriveName__18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::GetDriveName(void)",
        ),
    ),
    (
        "Initialize__18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::Initialize(void)",
        ),
    ),
    (
        "OpenSaveGame__18radPs2MemcardDrivePCc16radFileOpenFlagsbP14radMemcardInfoUiPUiT6",
        Ok(
            "radPs2MemcardDrive::OpenSaveGame(char const *, radFileOpenFlags, bool, radMemcardInfo *, unsigned int, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "CloseFile__18radPs2MemcardDriveUiPCc",
        Ok(
            "radPs2MemcardDrive::CloseFile(unsigned int, char const *)",
        ),
    ),
    (
        "CommitFile__18radPs2MemcardDriveUiPCc",
        Ok(
            "radPs2MemcardDrive::CommitFile(unsigned int, char const *)",
        ),
    ),
    (
        "GetReadBlockSize__18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::GetReadBlockSize(void)",
        ),
    ),
    (
        "GetReadHeaderSize__18radPs2MemcardDriveUi",
        Ok(
            "radPs2MemcardDrive::GetReadHeaderSize(unsigned int)",
        ),
    ),
    (
        "GetWriteBlockSize__18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::GetWriteBlockSize(void)",
        ),
    ),
    (
        "GetWriteHeaderSize__18radPs2MemcardDriveUi",
        Ok(
            "radPs2MemcardDrive::GetWriteHeaderSize(unsigned int)",
        ),
    ),
    (
        "ReadSignedBlock__18radPs2MemcardDriveUiPCcUiUiUiPv14radMemorySpace",
        Ok(
            "radPs2MemcardDrive::ReadSignedBlock(unsigned int, char const *, unsigned int, unsigned int, unsigned int, void *, radMemorySpace)",
        ),
    ),
    (
        "WriteSignedBlock__18radPs2MemcardDriveUiPCcUiUiUiPCvPUi14radMemorySpace",
        Ok(
            "radPs2MemcardDrive::WriteSignedBlock(unsigned int, char const *, unsigned int, unsigned int, unsigned int, void const *, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "DestroyFile__18radPs2MemcardDrivePCc",
        Ok(
            "radPs2MemcardDrive::DestroyFile(char const *)",
        ),
    ),
    (
        "Format__18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::Format(void)",
        ),
    ),
    (
        "FindFirst__18radPs2MemcardDrivePCcPQ29IRadDrive13DirectoryInfoP16radFileDirHandleb",
        Ok(
            "radPs2MemcardDrive::FindFirst(char const *, IRadDrive::DirectoryInfo *, radFileDirHandle *, bool)",
        ),
    ),
    (
        "FindNext__18radPs2MemcardDriveP16radFileDirHandlePQ29IRadDrive13DirectoryInfo",
        Ok(
            "radPs2MemcardDrive::FindNext(radFileDirHandle *, IRadDrive::DirectoryInfo *)",
        ),
    ),
    (
        "FindClose__18radPs2MemcardDriveP16radFileDirHandle",
        Ok(
            "radPs2MemcardDrive::FindClose(radFileDirHandle *)",
        ),
    ),
    (
        "GetCreationSize__18radPs2MemcardDriveP14radMemcardInfoUi",
        Ok(
            "radPs2MemcardDrive::GetCreationSize(radMemcardInfo *, unsigned int)",
        ),
    ),
    (
        "DeleteFiles__18radPs2MemcardDrivePCcii",
        Ok(
            "radPs2MemcardDrive::DeleteFiles(char const *, int, int)",
        ),
    ),
    (
        "SetMediaInfo__18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::SetMediaInfo(void)",
        ),
    ),
    (
        "GetPort__18radPs2MemcardDrivePiT1",
        Ok(
            "radPs2MemcardDrive::GetPort(int *, int *)",
        ),
    ),
    (
        "BuildFileSpec__18radPs2MemcardDrivePCcPcUiPPc",
        Ok(
            "radPs2MemcardDrive::BuildFileSpec(char const *, char *, unsigned int, char **)",
        ),
    ),
    (
        "WaitForResult__18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::WaitForResult(void)",
        ),
    ),
    (
        "SyncFunction__18radPs2MemcardDrivei",
        Ok(
            "radPs2MemcardDrive::SyncFunction(int)",
        ),
    ),
    (
        "ProcessError__18radPs2MemcardDrivei",
        Ok(
            "radPs2MemcardDrive::ProcessError(int)",
        ),
    ),
    (
        "CreateIcons__18radPs2MemcardDriveP14radMemcardInfoPcii",
        Ok(
            "radPs2MemcardDrive::CreateIcons(radMemcardInfo *, char *, int, int)",
        ),
    ),
    (
        "ReadIcons__18radPs2MemcardDriveP14radMemcardInfoPcii",
        Ok(
            "radPs2MemcardDrive::ReadIcons(radMemcardInfo *, char *, int, int)",
        ),
    ),
    (
        "Open__18radPs2MemcardDrivePUiT1Pciiib",
        Ok(
            "radPs2MemcardDrive::Open(unsigned int *, unsigned int *, char *, int, int, int, bool)",
        ),
    ),
    (
        "LoadBlock__18radPs2MemcardDriveUiUi",
        Ok(
            "radPs2MemcardDrive::LoadBlock(unsigned int, unsigned int)",
        ),
    ),
    (
        "FlushBlock__18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive::FlushBlock(void)",
        ),
    ),
    (
        "GetTableSize__18radPs2MemcardDriveUi",
        Ok(
            "radPs2MemcardDrive::GetTableSize(unsigned int)",
        ),
    ),
    (
        "CalculateCRC__18radPs2MemcardDriveUi",
        Ok(
            "radPs2MemcardDrive::CalculateCRC(unsigned int)",
        ),
    ),
    (
        "GetSizeFromHandle__18radPs2MemcardDriveUiPUi",
        Ok(
            "radPs2MemcardDrive::GetSizeFromHandle(unsigned int, unsigned int *)",
        ),
    ),
    (
        "InitializeFile__18radPs2MemcardDriveUiUi",
        Ok(
            "radPs2MemcardDrive::InitializeFile(unsigned int, unsigned int)",
        ),
    ),
    (
        "__tf18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive type_info function",
        ),
    ),
    (
        "__15radSignedReader",
        Ok(
            "radSignedReader::radSignedReader(void)",
        ),
    ),
    (
        "__15radSignedWriter",
        Ok(
            "radSignedWriter::radSignedWriter(void)",
        ),
    ),
    (
        "ReadFile__18radPs2MemcardDriveUiPCcQ28IRadFile17BufferedReadStateUiPvUiPUi14radMemorySpace",
        Ok(
            "radPs2MemcardDrive::ReadFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "WriteFile__18radPs2MemcardDriveUiPCcQ28IRadFile17BufferedReadStateUiPCvUiPUiT714radMemorySpace",
        Ok(
            "radPs2MemcardDrive::WriteFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void const *, unsigned int, unsigned int *, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "__tf15radSignedReader",
        Ok(
            "radSignedReader type_info function",
        ),
    ),
    (
        "__tf15radSignedWriter",
        Ok(
            "radSignedWriter type_info function",
        ),
    ),
    (
        "radRequestPoolInitialize__FUii",
        Ok(
            "radRequestPoolInitialize(unsigned int, int)",
        ),
    ),
    (
        "radRequestPoolTerminate__Fv",
        Ok(
            "radRequestPoolTerminate(void)",
        ),
    ),
    (
        "__nw__10radRequestUi",
        Ok(
            "radRequest::operator new(unsigned int)",
        ),
    ),
    (
        "__dl__10radRequestPv",
        Ok(
            "radRequest::operator delete(void *)",
        ),
    ),
    (
        "__10radRequest",
        Ok(
            "radRequest::radRequest(void)",
        ),
    ),
    (
        "_$_10radRequest",
        Ok(
            "radRequest::~radRequest(void)",
        ),
    ),
    (
        "__22CompletionEventRequestP19IRadThreadSemaphoreP8radDrive",
        Ok(
            "CompletionEventRequest::CompletionEventRequest(IRadThreadSemaphore *, radDrive *)",
        ),
    ),
    (
        "_$_22CompletionEventRequest",
        Ok(
            "CompletionEventRequest::~CompletionEventRequest(void)",
        ),
    ),
    (
        "DoRequest__22CompletionEventRequest",
        Ok(
            "CompletionEventRequest::DoRequest(void)",
        ),
    ),
    (
        "ShouldCancel__22CompletionEventRequestPv",
        Ok(
            "CompletionEventRequest::ShouldCancel(void *)",
        ),
    ),
    (
        "GetOwner__22CompletionEventRequest",
        Ok(
            "CompletionEventRequest::GetOwner(void)",
        ),
    ),
    (
        "ReInit__22CompletionEventRequest",
        Ok(
            "CompletionEventRequest::ReInit(void)",
        ),
    ),
    (
        "__25CompletionCallbackRequestP10IRadThread",
        Ok(
            "CompletionCallbackRequest::CompletionCallbackRequest(IRadThread *)",
        ),
    ),
    (
        "ShouldCancel__25CompletionCallbackRequestPv",
        Ok(
            "CompletionCallbackRequest::ShouldCancel(void *)",
        ),
    ),
    (
        "IsRegisteredThread__25CompletionCallbackRequestP10IRadThread",
        Ok(
            "CompletionCallbackRequest::IsRegisteredThread(IRadThread *)",
        ),
    ),
    (
        "ReInit__25CompletionCallbackRequest",
        Ok(
            "CompletionCallbackRequest::ReInit(void)",
        ),
    ),
    (
        "__21FileCompletionRequestP10IRadThreadP7radFileP26IRadFileCompletionCallbackPv",
        Ok(
            "FileCompletionRequest::FileCompletionRequest(IRadThread *, radFile *, IRadFileCompletionCallback *, void *)",
        ),
    ),
    (
        "_$_21FileCompletionRequest",
        Ok(
            "FileCompletionRequest::~FileCompletionRequest(void)",
        ),
    ),
    (
        "DoRequest__21FileCompletionRequest",
        Ok(
            "FileCompletionRequest::DoRequest(void)",
        ),
    ),
    (
        "callback__21FileCompletionRequest",
        Ok(
            "FileCompletionRequest::callback(void)",
        ),
    ),
    (
        "GetOwner__21FileCompletionRequest",
        Ok(
            "FileCompletionRequest::GetOwner(void)",
        ),
    ),
    (
        "__22DriveCompletionRequestP10IRadThreadP16radInstanceDriveP27IRadDriveCompletionCallbackPv",
        Ok(
            "DriveCompletionRequest::DriveCompletionRequest(IRadThread *, radInstanceDrive *, IRadDriveCompletionCallback *, void *)",
        ),
    ),
    (
        "_$_22DriveCompletionRequest",
        Ok(
            "DriveCompletionRequest::~DriveCompletionRequest(void)",
        ),
    ),
    (
        "DoRequest__22DriveCompletionRequest",
        Ok(
            "DriveCompletionRequest::DoRequest(void)",
        ),
    ),
    (
        "callback__22DriveCompletionRequest",
        Ok(
            "DriveCompletionRequest::callback(void)",
        ),
    ),
    (
        "GetOwner__22DriveCompletionRequest",
        Ok(
            "DriveCompletionRequest::GetOwner(void)",
        ),
    ),
    (
        "__14radFileRequestP7radFile",
        Ok(
            "radFileRequest::radFileRequest(radFile *)",
        ),
    ),
    (
        "_$_14radFileRequest",
        Ok(
            "radFileRequest::~radFileRequest(void)",
        ),
    ),
    (
        "handleError__14radFileRequestQ28radDrive16CompletionStatus12radFileError",
        Ok(
            "radFileRequest::handleError(radDrive::CompletionStatus, radFileError)",
        ),
    ),
    (
        "ShouldCancel__14radFileRequestPv",
        Ok(
            "radFileRequest::ShouldCancel(void *)",
        ),
    ),
    (
        "GetOwner__14radFileRequest",
        Ok(
            "radFileRequest::GetOwner(void)",
        ),
    ),
    (
        "ReInit__14radFileRequest",
        Ok(
            "radFileRequest::ReInit(void)",
        ),
    ),
    (
        "GetFilename__14radFileRequest",
        Ok(
            "radFileRequest::GetFilename(void)",
        ),
    ),
    (
        "__15FileOpenRequestP7radFile16radFileOpenFlagsb",
        Ok(
            "FileOpenRequest::FileOpenRequest(radFile *, radFileOpenFlags, bool)",
        ),
    ),
    (
        "DoRequest__15FileOpenRequest",
        Ok(
            "FileOpenRequest::DoRequest(void)",
        ),
    ),
    (
        "__19SaveGameOpenRequestP7radFile16radFileOpenFlagsbP14radMemcardInfoUi",
        Ok(
            "SaveGameOpenRequest::SaveGameOpenRequest(radFile *, radFileOpenFlags, bool, radMemcardInfo *, unsigned int)",
        ),
    ),
    (
        "DoRequest__19SaveGameOpenRequest",
        Ok(
            "SaveGameOpenRequest::DoRequest(void)",
        ),
    ),
    (
        "__16FileCloseRequestP7radFile",
        Ok(
            "FileCloseRequest::FileCloseRequest(radFile *)",
        ),
    ),
    (
        "ReInit__16FileCloseRequest",
        Ok(
            "FileCloseRequest::ReInit(void)",
        ),
    ),
    (
        "DoRequest__16FileCloseRequest",
        Ok(
            "FileCloseRequest::DoRequest(void)",
        ),
    ),
    (
        "__17FileCommitRequestP7radFile",
        Ok(
            "FileCommitRequest::FileCommitRequest(radFile *)",
        ),
    ),
    (
        "DoRequest__17FileCommitRequest",
        Ok(
            "FileCommitRequest::DoRequest(void)",
        ),
    ),
    (
        "__15FileReadRequestP7radFilePvUi14radMemorySpace",
        Ok(
            "FileReadRequest::FileReadRequest(radFile *, void *, unsigned int, radMemorySpace)",
        ),
    ),
    (
        "DoRequest__15FileReadRequest",
        Ok(
            "FileReadRequest::DoRequest(void)",
        ),
    ),
    (
        "__16FileWriteRequestP7radFilePCvUi14radMemorySpace",
        Ok(
            "FileWriteRequest::FileWriteRequest(radFile *, void const *, unsigned int, radMemorySpace)",
        ),
    ),
    (
        "DoRequest__16FileWriteRequest",
        Ok(
            "FileWriteRequest::DoRequest(void)",
        ),
    ),
    (
        "__22FileSetPositionRequestP7radFileUi",
        Ok(
            "FileSetPositionRequest::FileSetPositionRequest(radFile *, unsigned int)",
        ),
    ),
    (
        "DoRequest__22FileSetPositionRequest",
        Ok(
            "FileSetPositionRequest::DoRequest(void)",
        ),
    ),
    (
        "__22FileGetPositionRequestP7radFilePUi",
        Ok(
            "FileGetPositionRequest::FileGetPositionRequest(radFile *, unsigned int *)",
        ),
    ),
    (
        "DoRequest__22FileGetPositionRequest",
        Ok(
            "FileGetPositionRequest::DoRequest(void)",
        ),
    ),
    (
        "__18FileGetSizeRequestP7radFilePUi",
        Ok(
            "FileGetSizeRequest::FileGetSizeRequest(radFile *, unsigned int *)",
        ),
    ),
    (
        "DoRequest__18FileGetSizeRequest",
        Ok(
            "FileGetSizeRequest::DoRequest(void)",
        ),
    ),
    (
        "__17FileCancelRequestP7radFile",
        Ok(
            "FileCancelRequest::FileCancelRequest(radFile *)",
        ),
    ),
    (
        "DoRequest__17FileCancelRequest",
        Ok(
            "FileCancelRequest::DoRequest(void)",
        ),
    ),
    (
        "ReInit__17FileCancelRequest",
        Ok(
            "FileCancelRequest::ReInit(void)",
        ),
    ),
    (
        "__15radDriveRequestP16radInstanceDrive",
        Ok(
            "radDriveRequest::radDriveRequest(radInstanceDrive *)",
        ),
    ),
    (
        "_$_15radDriveRequest",
        Ok(
            "radDriveRequest::~radDriveRequest(void)",
        ),
    ),
    (
        "ShouldCancel__15radDriveRequestPv",
        Ok(
            "radDriveRequest::ShouldCancel(void *)",
        ),
    ),
    (
        "GetOwner__15radDriveRequest",
        Ok(
            "radDriveRequest::GetOwner(void)",
        ),
    ),
    (
        "ReInit__15radDriveRequest",
        Ok(
            "radDriveRequest::ReInit(void)",
        ),
    ),
    (
        "__16DriveOpenRequestP16radInstanceDrive",
        Ok(
            "DriveOpenRequest::DriveOpenRequest(radInstanceDrive *)",
        ),
    ),
    (
        "DoRequest__16DriveOpenRequest",
        Ok(
            "DriveOpenRequest::DoRequest(void)",
        ),
    ),
    (
        "ReInit__16DriveOpenRequest",
        Ok(
            "DriveOpenRequest::ReInit(void)",
        ),
    ),
    (
        "__17DriveMediaRequestP16radInstanceDrivePQ29IRadDrive9MediaInfo",
        Ok(
            "DriveMediaRequest::DriveMediaRequest(radInstanceDrive *, IRadDrive::MediaInfo *)",
        ),
    ),
    (
        "DoRequest__17DriveMediaRequest",
        Ok(
            "DriveMediaRequest::DoRequest(void)",
        ),
    ),
    (
        "ReInit__17DriveMediaRequest",
        Ok(
            "DriveMediaRequest::ReInit(void)",
        ),
    ),
    (
        "__18DriveFormatRequestP16radInstanceDrive",
        Ok(
            "DriveFormatRequest::DriveFormatRequest(radInstanceDrive *)",
        ),
    ),
    (
        "DoRequest__18DriveFormatRequest",
        Ok(
            "DriveFormatRequest::DoRequest(void)",
        ),
    ),
    (
        "__27DriveCreateDirectoryRequestP16radInstanceDrivePCc",
        Ok(
            "DriveCreateDirectoryRequest::DriveCreateDirectoryRequest(radInstanceDrive *, char const *)",
        ),
    ),
    (
        "DoRequest__27DriveCreateDirectoryRequest",
        Ok(
            "DriveCreateDirectoryRequest::DoRequest(void)",
        ),
    ),
    (
        "__28DriveDestroyDirectoryRequestP16radInstanceDrivePCc",
        Ok(
            "DriveDestroyDirectoryRequest::DriveDestroyDirectoryRequest(radInstanceDrive *, char const *)",
        ),
    ),
    (
        "DoRequest__28DriveDestroyDirectoryRequest",
        Ok(
            "DriveDestroyDirectoryRequest::DoRequest(void)",
        ),
    ),
    (
        "__21DriveFindFirstRequestP16radInstanceDrivePCcPQ29IRadDrive13DirectoryInfo",
        Ok(
            "DriveFindFirstRequest::DriveFindFirstRequest(radInstanceDrive *, char const *, IRadDrive::DirectoryInfo *)",
        ),
    ),
    (
        "DoRequest__21DriveFindFirstRequest",
        Ok(
            "DriveFindFirstRequest::DoRequest(void)",
        ),
    ),
    (
        "__20DriveFindNextRequestP16radInstanceDrivePQ29IRadDrive13DirectoryInfo",
        Ok(
            "DriveFindNextRequest::DriveFindNextRequest(radInstanceDrive *, IRadDrive::DirectoryInfo *)",
        ),
    ),
    (
        "DoRequest__20DriveFindNextRequest",
        Ok(
            "DriveFindNextRequest::DoRequest(void)",
        ),
    ),
    (
        "__21DriveFindCloseRequestP16radInstanceDrive",
        Ok(
            "DriveFindCloseRequest::DriveFindCloseRequest(radInstanceDrive *)",
        ),
    ),
    (
        "DoRequest__21DriveFindCloseRequest",
        Ok(
            "DriveFindCloseRequest::DoRequest(void)",
        ),
    ),
    (
        "ReInit__21DriveFindCloseRequest",
        Ok(
            "DriveFindCloseRequest::ReInit(void)",
        ),
    ),
    (
        "__23DriveFileDestroyRequestP16radInstanceDrivePCc",
        Ok(
            "DriveFileDestroyRequest::DriveFileDestroyRequest(radInstanceDrive *, char const *)",
        ),
    ),
    (
        "DoRequest__23DriveFileDestroyRequest",
        Ok(
            "DriveFileDestroyRequest::DoRequest(void)",
        ),
    ),
    (
        "__18DriveCancelRequestP16radInstanceDrive",
        Ok(
            "DriveCancelRequest::DriveCancelRequest(radInstanceDrive *)",
        ),
    ),
    (
        "DoRequest__18DriveCancelRequest",
        Ok(
            "DriveCancelRequest::DoRequest(void)",
        ),
    ),
    (
        "ReInit__18DriveCancelRequest",
        Ok(
            "DriveCancelRequest::ReInit(void)",
        ),
    ),
    (
        "__tf10radRequest",
        Ok(
            "radRequest type_info function",
        ),
    ),
    (
        "__tf22CompletionEventRequest",
        Ok(
            "CompletionEventRequest type_info function",
        ),
    ),
    (
        "__tf25CompletionCallbackRequest",
        Ok(
            "CompletionCallbackRequest type_info function",
        ),
    ),
    (
        "__tf21FileCompletionRequest",
        Ok(
            "FileCompletionRequest type_info function",
        ),
    ),
    (
        "__tf22DriveCompletionRequest",
        Ok(
            "DriveCompletionRequest type_info function",
        ),
    ),
    (
        "__tf14radFileRequest",
        Ok(
            "radFileRequest type_info function",
        ),
    ),
    (
        "_$_15FileOpenRequest",
        Ok(
            "FileOpenRequest::~FileOpenRequest(void)",
        ),
    ),
    (
        "__tf15FileOpenRequest",
        Ok(
            "FileOpenRequest type_info function",
        ),
    ),
    (
        "_$_19SaveGameOpenRequest",
        Ok(
            "SaveGameOpenRequest::~SaveGameOpenRequest(void)",
        ),
    ),
    (
        "__tf19SaveGameOpenRequest",
        Ok(
            "SaveGameOpenRequest type_info function",
        ),
    ),
    (
        "_$_16FileCloseRequest",
        Ok(
            "FileCloseRequest::~FileCloseRequest(void)",
        ),
    ),
    (
        "__tf16FileCloseRequest",
        Ok(
            "FileCloseRequest type_info function",
        ),
    ),
    (
        "_$_17FileCommitRequest",
        Ok(
            "FileCommitRequest::~FileCommitRequest(void)",
        ),
    ),
    (
        "__tf17FileCommitRequest",
        Ok(
            "FileCommitRequest type_info function",
        ),
    ),
    (
        "_$_15FileReadRequest",
        Ok(
            "FileReadRequest::~FileReadRequest(void)",
        ),
    ),
    (
        "__tf15FileReadRequest",
        Ok(
            "FileReadRequest type_info function",
        ),
    ),
    (
        "_$_16FileWriteRequest",
        Ok(
            "FileWriteRequest::~FileWriteRequest(void)",
        ),
    ),
    (
        "__tf16FileWriteRequest",
        Ok(
            "FileWriteRequest type_info function",
        ),
    ),
    (
        "_$_22FileSetPositionRequest",
        Ok(
            "FileSetPositionRequest::~FileSetPositionRequest(void)",
        ),
    ),
    (
        "__tf22FileSetPositionRequest",
        Ok(
            "FileSetPositionRequest type_info function",
        ),
    ),
    (
        "_$_22FileGetPositionRequest",
        Ok(
            "FileGetPositionRequest::~FileGetPositionRequest(void)",
        ),
    ),
    (
        "__tf22FileGetPositionRequest",
        Ok(
            "FileGetPositionRequest type_info function",
        ),
    ),
    (
        "_$_18FileGetSizeRequest",
        Ok(
            "FileGetSizeRequest::~FileGetSizeRequest(void)",
        ),
    ),
    (
        "__tf18FileGetSizeRequest",
        Ok(
            "FileGetSizeRequest type_info function",
        ),
    ),
    (
        "_$_17FileCancelRequest",
        Ok(
            "FileCancelRequest::~FileCancelRequest(void)",
        ),
    ),
    (
        "__tf17FileCancelRequest",
        Ok(
            "FileCancelRequest type_info function",
        ),
    ),
    (
        "__tf15radDriveRequest",
        Ok(
            "radDriveRequest type_info function",
        ),
    ),
    (
        "_$_16DriveOpenRequest",
        Ok(
            "DriveOpenRequest::~DriveOpenRequest(void)",
        ),
    ),
    (
        "__tf16DriveOpenRequest",
        Ok(
            "DriveOpenRequest type_info function",
        ),
    ),
    (
        "_$_17DriveMediaRequest",
        Ok(
            "DriveMediaRequest::~DriveMediaRequest(void)",
        ),
    ),
    (
        "__tf17DriveMediaRequest",
        Ok(
            "DriveMediaRequest type_info function",
        ),
    ),
    (
        "_$_18DriveFormatRequest",
        Ok(
            "DriveFormatRequest::~DriveFormatRequest(void)",
        ),
    ),
    (
        "__tf18DriveFormatRequest",
        Ok(
            "DriveFormatRequest type_info function",
        ),
    ),
    (
        "_$_27DriveCreateDirectoryRequest",
        Ok(
            "DriveCreateDirectoryRequest::~DriveCreateDirectoryRequest(void)",
        ),
    ),
    (
        "__tf27DriveCreateDirectoryRequest",
        Ok(
            "DriveCreateDirectoryRequest type_info function",
        ),
    ),
    (
        "_$_28DriveDestroyDirectoryRequest",
        Ok(
            "DriveDestroyDirectoryRequest::~DriveDestroyDirectoryRequest(void)",
        ),
    ),
    (
        "__tf28DriveDestroyDirectoryRequest",
        Ok(
            "DriveDestroyDirectoryRequest type_info function",
        ),
    ),
    (
        "_$_21DriveFindFirstRequest",
        Ok(
            "DriveFindFirstRequest::~DriveFindFirstRequest(void)",
        ),
    ),
    (
        "__tf21DriveFindFirstRequest",
        Ok(
            "DriveFindFirstRequest type_info function",
        ),
    ),
    (
        "_$_20DriveFindNextRequest",
        Ok(
            "DriveFindNextRequest::~DriveFindNextRequest(void)",
        ),
    ),
    (
        "__tf20DriveFindNextRequest",
        Ok(
            "DriveFindNextRequest type_info function",
        ),
    ),
    (
        "_$_21DriveFindCloseRequest",
        Ok(
            "DriveFindCloseRequest::~DriveFindCloseRequest(void)",
        ),
    ),
    (
        "__tf21DriveFindCloseRequest",
        Ok(
            "DriveFindCloseRequest type_info function",
        ),
    ),
    (
        "_$_23DriveFileDestroyRequest",
        Ok(
            "DriveFileDestroyRequest::~DriveFileDestroyRequest(void)",
        ),
    ),
    (
        "__tf23DriveFileDestroyRequest",
        Ok(
            "DriveFileDestroyRequest type_info function",
        ),
    ),
    (
        "_$_18DriveCancelRequest",
        Ok(
            "DriveCancelRequest::~DriveCancelRequest(void)",
        ),
    ),
    (
        "__tf18DriveCancelRequest",
        Ok(
            "DriveCancelRequest type_info function",
        ),
    ),
    (
        "_$_25CompletionCallbackRequest",
        Ok(
            "CompletionCallbackRequest::~CompletionCallbackRequest(void)",
        ),
    ),
    (
        "radFilePoolInitialize__FUii",
        Ok(
            "radFilePoolInitialize(unsigned int, int)",
        ),
    ),
    (
        "radFilePoolTerminate__Fv",
        Ok(
            "radFilePoolTerminate(void)",
        ),
    ),
    (
        "__nw__7radFileUi",
        Ok(
            "radFile::operator new(unsigned int)",
        ),
    ),
    (
        "__dl__7radFilePv",
        Ok(
            "radFile::operator delete(void *)",
        ),
    ),
    (
        "__7radFileP8radDrivePCcb16radFileOpenFlags15radFilePriorityUii14radMemorySpace",
        Ok(
            "radFile::radFile(radDrive *, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
        ),
    ),
    (
        "__7radFileP8radDrivePCcb16radFileOpenFlagsP14radMemcardInfoUi15radFilePriority",
        Ok(
            "radFile::radFile(radDrive *, char const *, bool, radFileOpenFlags, radMemcardInfo *, unsigned int, radFilePriority)",
        ),
    ),
    (
        "_$_7radFile",
        Ok(
            "radFile::~radFile(void)",
        ),
    ),
    (
        "AddRef__7radFile",
        Ok(
            "radFile::AddRef(void)",
        ),
    ),
    (
        "Release__7radFile",
        Ok(
            "radFile::Release(void)",
        ),
    ),
    (
        "Lock__7radFile",
        Ok(
            "radFile::Lock(void)",
        ),
    ),
    (
        "Unlock__7radFile",
        Ok(
            "radFile::Unlock(void)",
        ),
    ),
    (
        "CommitAsync__7radFile",
        Ok(
            "radFile::CommitAsync(void)",
        ),
    ),
    (
        "ReadAsync__7radFilePvUi14radMemorySpace",
        Ok(
            "radFile::ReadAsync(void *, unsigned int, radMemorySpace)",
        ),
    ),
    (
        "WriteAsync__7radFilePCvUi14radMemorySpace",
        Ok(
            "radFile::WriteAsync(void const *, unsigned int, radMemorySpace)",
        ),
    ),
    (
        "SetPositionAsync__7radFileUi",
        Ok(
            "radFile::SetPositionAsync(unsigned int)",
        ),
    ),
    (
        "GetPositionAsync__7radFilePUi",
        Ok(
            "radFile::GetPositionAsync(unsigned int *)",
        ),
    ),
    (
        "GetSizeAsync__7radFilePUi",
        Ok(
            "radFile::GetSizeAsync(unsigned int *)",
        ),
    ),
    (
        "ReadSync__7radFilePvUi14radMemorySpace",
        Ok(
            "radFile::ReadSync(void *, unsigned int, radMemorySpace)",
        ),
    ),
    (
        "WriteSync__7radFilePCvUi14radMemorySpace",
        Ok(
            "radFile::WriteSync(void const *, unsigned int, radMemorySpace)",
        ),
    ),
    (
        "SetPositionSync__7radFileUi",
        Ok(
            "radFile::SetPositionSync(unsigned int)",
        ),
    ),
    (
        "GetPositionSync__7radFilePUi",
        Ok(
            "radFile::GetPositionSync(unsigned int *)",
        ),
    ),
    (
        "GetSizeSync__7radFilePUi",
        Ok(
            "radFile::GetSizeSync(unsigned int *)",
        ),
    ),
    (
        "CommitSync__7radFile",
        Ok(
            "radFile::CommitSync(void)",
        ),
    ),
    (
        "GetSize__7radFile",
        Ok(
            "radFile::GetSize(void)",
        ),
    ),
    (
        "CancelAsync__7radFile",
        Ok(
            "radFile::CancelAsync(void)",
        ),
    ),
    (
        "AddCompletionCallback__7radFileP26IRadFileCompletionCallbackPv",
        Ok(
            "radFile::AddCompletionCallback(IRadFileCompletionCallback *, void *)",
        ),
    ),
    (
        "AddCompletionEvent__7radFileP19IRadThreadSemaphore",
        Ok(
            "radFile::AddCompletionEvent(IRadThreadSemaphore *)",
        ),
    ),
    (
        "CheckForCompletion__7radFile",
        Ok(
            "radFile::CheckForCompletion(void)",
        ),
    ),
    (
        "WaitForCompletion__7radFile",
        Ok(
            "radFile::WaitForCompletion(void)",
        ),
    ),
    (
        "GetLastError__7radFile",
        Ok(
            "radFile::GetLastError(void)",
        ),
    ),
    (
        "IsOpen__7radFile",
        Ok(
            "radFile::IsOpen(void)",
        ),
    ),
    (
        "GetFilename__7radFile",
        Ok(
            "radFile::GetFilename(void)",
        ),
    ),
    (
        "GetDrivename__7radFile",
        Ok(
            "radFile::GetDrivename(void)",
        ),
    ),
    (
        "SetPriority__7radFile15radFilePriority",
        Ok(
            "radFile::SetPriority(radFilePriority)",
        ),
    ),
    (
        "GetPriority__7radFile",
        Ok(
            "radFile::GetPriority(void)",
        ),
    ),
    (
        "IsSaveGame__7radFile",
        Ok(
            "radFile::IsSaveGame(void)",
        ),
    ),
    (
        "GetOptimalSize__7radFile",
        Ok(
            "radFile::GetOptimalSize(void)",
        ),
    ),
    (
        "SetBufferedRead__7radFileQ28IRadFile17BufferedReadState",
        Ok(
            "radFile::SetBufferedRead(IRadFile::BufferedReadState)",
        ),
    ),
    (
        "GetHandle__7radFile",
        Ok(
            "radFile::GetHandle(void)",
        ),
    ),
    (
        "__tf7radFile",
        Ok(
            "radFile type_info function",
        ),
    ),
    (
        "__8IRadFile",
        Ok(
            "IRadFile::IRadFile(void)",
        ),
    ),
    (
        "__tf8IRadFile",
        Ok(
            "IRadFile type_info function",
        ),
    ),
    (
        "radDrivePoolInitialize__FUii",
        Ok(
            "radDrivePoolInitialize(unsigned int, int)",
        ),
    ),
    (
        "radDrivePoolTerminate__Fv",
        Ok(
            "radDrivePoolTerminate(void)",
        ),
    ),
    (
        "__nw__16radInstanceDriveUi",
        Ok(
            "radInstanceDrive::operator new(unsigned int)",
        ),
    ),
    (
        "__dl__16radInstanceDrivePv",
        Ok(
            "radInstanceDrive::operator delete(void *)",
        ),
    ),
    (
        "__16radInstanceDriveP8radDrive15radFilePriority",
        Ok(
            "radInstanceDrive::radInstanceDrive(radDrive *, radFilePriority)",
        ),
    ),
    (
        "_$_16radInstanceDrive",
        Ok(
            "radInstanceDrive::~radInstanceDrive(void)",
        ),
    ),
    (
        "AddRef__16radInstanceDrive",
        Ok(
            "radInstanceDrive::AddRef(void)",
        ),
    ),
    (
        "Release__16radInstanceDrive",
        Ok(
            "radInstanceDrive::Release(void)",
        ),
    ),
    (
        "Lock__16radInstanceDrive",
        Ok(
            "radInstanceDrive::Lock(void)",
        ),
    ),
    (
        "Unlock__16radInstanceDrive",
        Ok(
            "radInstanceDrive::Unlock(void)",
        ),
    ),
    (
        "GetCapabilities__16radInstanceDrive",
        Ok(
            "radInstanceDrive::GetCapabilities(void)",
        ),
    ),
    (
        "GetMediaInfoAsync__16radInstanceDrivePQ29IRadDrive9MediaInfo",
        Ok(
            "radInstanceDrive::GetMediaInfoAsync(IRadDrive::MediaInfo *)",
        ),
    ),
    (
        "FormatAsync__16radInstanceDrive",
        Ok(
            "radInstanceDrive::FormatAsync(void)",
        ),
    ),
    (
        "CreateDirectoryAsync__16radInstanceDrivePCc",
        Ok(
            "radInstanceDrive::CreateDirectoryAsync(char const *)",
        ),
    ),
    (
        "DestroyDirectoryAsync__16radInstanceDrivePCc",
        Ok(
            "radInstanceDrive::DestroyDirectoryAsync(char const *)",
        ),
    ),
    (
        "FindFirstAsync__16radInstanceDrivePCcPQ29IRadDrive13DirectoryInfo",
        Ok(
            "radInstanceDrive::FindFirstAsync(char const *, IRadDrive::DirectoryInfo *)",
        ),
    ),
    (
        "FindNextAsync__16radInstanceDrivePQ29IRadDrive13DirectoryInfo",
        Ok(
            "radInstanceDrive::FindNextAsync(IRadDrive::DirectoryInfo *)",
        ),
    ),
    (
        "DestroyFileAsync__16radInstanceDrivePCcb",
        Ok(
            "radInstanceDrive::DestroyFileAsync(char const *, bool)",
        ),
    ),
    (
        "GetMediaInfoSync__16radInstanceDrivePQ29IRadDrive9MediaInfo",
        Ok(
            "radInstanceDrive::GetMediaInfoSync(IRadDrive::MediaInfo *)",
        ),
    ),
    (
        "FormatSync__16radInstanceDrive",
        Ok(
            "radInstanceDrive::FormatSync(void)",
        ),
    ),
    (
        "CreateDirectorySync__16radInstanceDrivePCc",
        Ok(
            "radInstanceDrive::CreateDirectorySync(char const *)",
        ),
    ),
    (
        "DestroyDirectorySync__16radInstanceDrivePCc",
        Ok(
            "radInstanceDrive::DestroyDirectorySync(char const *)",
        ),
    ),
    (
        "FindFirstSync__16radInstanceDrivePCcPQ29IRadDrive13DirectoryInfo",
        Ok(
            "radInstanceDrive::FindFirstSync(char const *, IRadDrive::DirectoryInfo *)",
        ),
    ),
    (
        "FindNextSync__16radInstanceDrivePQ29IRadDrive13DirectoryInfo",
        Ok(
            "radInstanceDrive::FindNextSync(IRadDrive::DirectoryInfo *)",
        ),
    ),
    (
        "DestroyFileSync__16radInstanceDrivePCcb",
        Ok(
            "radInstanceDrive::DestroyFileSync(char const *, bool)",
        ),
    ),
    (
        "CancelAsync__16radInstanceDrive",
        Ok(
            "radInstanceDrive::CancelAsync(void)",
        ),
    ),
    (
        "AddCompletionCallback__16radInstanceDriveP27IRadDriveCompletionCallbackPv",
        Ok(
            "radInstanceDrive::AddCompletionCallback(IRadDriveCompletionCallback *, void *)",
        ),
    ),
    (
        "AddCompletionEvent__16radInstanceDriveP19IRadThreadSemaphore",
        Ok(
            "radInstanceDrive::AddCompletionEvent(IRadThreadSemaphore *)",
        ),
    ),
    (
        "CheckForCompletion__16radInstanceDrive",
        Ok(
            "radInstanceDrive::CheckForCompletion(void)",
        ),
    ),
    (
        "WaitForCompletion__16radInstanceDrive",
        Ok(
            "radInstanceDrive::WaitForCompletion(void)",
        ),
    ),
    (
        "GetLastError__16radInstanceDrive",
        Ok(
            "radInstanceDrive::GetLastError(void)",
        ),
    ),
    (
        "RegisterErrorHandler__16radInstanceDriveP22IRadDriveErrorCallbackPv",
        Ok(
            "radInstanceDrive::RegisterErrorHandler(IRadDriveErrorCallback *, void *)",
        ),
    ),
    (
        "UnregisterErrorHandler__16radInstanceDriveP22IRadDriveErrorCallback",
        Ok(
            "radInstanceDrive::UnregisterErrorHandler(IRadDriveErrorCallback *)",
        ),
    ),
    (
        "RegisterErrorEvent__16radInstanceDriveP19IRadThreadSemaphore",
        Ok(
            "radInstanceDrive::RegisterErrorEvent(IRadThreadSemaphore *)",
        ),
    ),
    (
        "UnregisterErrorEvent__16radInstanceDriveP19IRadThreadSemaphore",
        Ok(
            "radInstanceDrive::UnregisterErrorEvent(IRadThreadSemaphore *)",
        ),
    ),
    (
        "CheckForErrorState__16radInstanceDrive",
        Ok(
            "radInstanceDrive::CheckForErrorState(void)",
        ),
    ),
    (
        "ResumeRequest__16radInstanceDriveb",
        Ok(
            "radInstanceDrive::ResumeRequest(bool)",
        ),
    ),
    (
        "SetDefaultErrorBehaviour__16radInstanceDriveQ29IRadDrive14ErrorBehaviour",
        Ok(
            "radInstanceDrive::SetDefaultErrorBehaviour(IRadDrive::ErrorBehaviour)",
        ),
    ),
    (
        "SetErrorClearReporting__16radInstanceDriveb",
        Ok(
            "radInstanceDrive::SetErrorClearReporting(bool)",
        ),
    ),
    (
        "SetReadWriteGranularity__16radInstanceDriveUi",
        Ok(
            "radInstanceDrive::SetReadWriteGranularity(unsigned int)",
        ),
    ),
    (
        "GetReadWriteGranularity__16radInstanceDrive",
        Ok(
            "radInstanceDrive::GetReadWriteGranularity(void)",
        ),
    ),
    (
        "FileOpenAsync__16radInstanceDrivePP8IRadFilePCcb16radFileOpenFlags15radFilePriorityUii14radMemorySpace",
        Ok(
            "radInstanceDrive::FileOpenAsync(IRadFile **, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
        ),
    ),
    (
        "FileOpenSync__16radInstanceDrivePP8IRadFilePCcb16radFileOpenFlags15radFilePriorityUii14radMemorySpace",
        Ok(
            "radInstanceDrive::FileOpenSync(IRadFile **, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
        ),
    ),
    (
        "SaveGameOpenAsync__16radInstanceDrivePP8IRadFilePCcb16radFileOpenFlagsP14radMemcardInfoUiT315radFilePriority",
        Ok(
            "radInstanceDrive::SaveGameOpenAsync(IRadFile **, char const *, bool, radFileOpenFlags, radMemcardInfo *, unsigned int, bool, radFilePriority)",
        ),
    ),
    (
        "SaveGameOpenSync__16radInstanceDrivePP8IRadFilePCcb16radFileOpenFlagsP14radMemcardInfoUiT315radFilePriority",
        Ok(
            "radInstanceDrive::SaveGameOpenSync(IRadFile **, char const *, bool, radFileOpenFlags, radMemcardInfo *, unsigned int, bool, radFilePriority)",
        ),
    ),
    (
        "SetPriority__16radInstanceDrive15radFilePriority",
        Ok(
            "radInstanceDrive::SetPriority(radFilePriority)",
        ),
    ),
    (
        "GetPriority__16radInstanceDrive",
        Ok(
            "radInstanceDrive::GetPriority(void)",
        ),
    ),
    (
        "GetDriveName__16radInstanceDrive",
        Ok(
            "radInstanceDrive::GetDriveName(void)",
        ),
    ),
    (
        "GetCreationSize__16radInstanceDriveP14radMemcardInfoUi",
        Ok(
            "radInstanceDrive::GetCreationSize(radMemcardInfo *, unsigned int)",
        ),
    ),
    (
        "__tf16radInstanceDrive",
        Ok(
            "radInstanceDrive type_info function",
        ),
    ),
    (
        "__9IRadDrive",
        Ok(
            "IRadDrive::IRadDrive(void)",
        ),
    ),
    (
        "FileOpen__16radInstanceDrivePP8IRadFilePCcb16radFileOpenFlags15radFilePriorityUii14radMemorySpace",
        Ok(
            "radInstanceDrive::FileOpen(IRadFile **, char const *, bool, radFileOpenFlags, radFilePriority, unsigned int, int, radMemorySpace)",
        ),
    ),
    (
        "__tf9IRadDrive",
        Ok(
            "IRadDrive type_info function",
        ),
    ),
    (
        "__8radDrive",
        Ok(
            "radDrive::radDrive(void)",
        ),
    ),
    (
        "_$_8radDrive",
        Ok(
            "radDrive::~radDrive(void)",
        ),
    ),
    (
        "GetLastError__8radDrive",
        Ok(
            "radDrive::GetLastError(void)",
        ),
    ),
    (
        "GetMediaInfo__8radDrive",
        Ok(
            "radDrive::GetMediaInfo(void)",
        ),
    ),
    (
        "AddCallback__8radDriveP25CompletionCallbackRequest",
        Ok(
            "radDrive::AddCallback(CompletionCallbackRequest *)",
        ),
    ),
    (
        "Service__8radDrive",
        Ok(
            "radDrive::Service(void)",
        ),
    ),
    (
        "RegisterErrorHandler__8radDriveP22IRadDriveErrorCallbackPv",
        Ok(
            "radDrive::RegisterErrorHandler(IRadDriveErrorCallback *, void *)",
        ),
    ),
    (
        "UnregisterErrorHandler__8radDriveP22IRadDriveErrorCallback",
        Ok(
            "radDrive::UnregisterErrorHandler(IRadDriveErrorCallback *)",
        ),
    ),
    (
        "RegisterErrorEvent__8radDriveP19IRadThreadSemaphore",
        Ok(
            "radDrive::RegisterErrorEvent(IRadThreadSemaphore *)",
        ),
    ),
    (
        "SetDefaultErrorBehaviour__8radDriveQ29IRadDrive14ErrorBehaviour",
        Ok(
            "radDrive::SetDefaultErrorBehaviour(IRadDrive::ErrorBehaviour)",
        ),
    ),
    (
        "GetDefaultErrorBehaviour__8radDrive",
        Ok(
            "radDrive::GetDefaultErrorBehaviour(void)",
        ),
    ),
    (
        "ResumeRequest__8radDriveb",
        Ok(
            "radDrive::ResumeRequest(bool)",
        ),
    ),
    (
        "CheckForErrorState__8radDrive",
        Ok(
            "radDrive::CheckForErrorState(void)",
        ),
    ),
    (
        "SetErrorState__8radDrive",
        Ok(
            "radDrive::SetErrorState(void)",
        ),
    ),
    (
        "SetErrorClearReporting__8radDriveb",
        Ok(
            "radDrive::SetErrorClearReporting(bool)",
        ),
    ),
    (
        "GetErrorClearReporting__8radDrive",
        Ok(
            "radDrive::GetErrorClearReporting(void)",
        ),
    ),
    (
        "QueueRequest__8radDriveP10radRequest15radFilePriorityb",
        Ok(
            "radDrive::QueueRequest(radRequest *, radFilePriority, bool)",
        ),
    ),
    (
        "CancelRequests__8radDrivePv15radFilePriority",
        Ok(
            "radDrive::CancelRequests(void *, radFilePriority)",
        ),
    ),
    (
        "OutstandingRequests__8radDrive",
        Ok(
            "radDrive::OutstandingRequests(void)",
        ),
    ),
    (
        "RegisterCementLibrary__8radDriveP16radCementLibrary",
        Ok(
            "radDrive::RegisterCementLibrary(radCementLibrary *)",
        ),
    ),
    (
        "UnregisterCementLibrary__8radDriveP16radCementLibrary",
        Ok(
            "radDrive::UnregisterCementLibrary(radCementLibrary *)",
        ),
    ),
    (
        "GetLibraryList__8radDrive",
        Ok(
            "radDrive::GetLibraryList(void)",
        ),
    ),
    (
        "GetCreationSize__8radDriveP14radMemcardInfoUi",
        Ok(
            "radDrive::GetCreationSize(radMemcardInfo *, unsigned int)",
        ),
    ),
    (
        "CommitFile__8radDriveUiPCc",
        Ok(
            "radDrive::CommitFile(unsigned int, char const *)",
        ),
    ),
    (
        "OpenFile__8radDrivePCc16radFileOpenFlagsbPUiT4",
        Ok(
            "radDrive::OpenFile(char const *, radFileOpenFlags, bool, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "OpenSaveGame__8radDrivePCc16radFileOpenFlagsbP14radMemcardInfoUiPUiT6",
        Ok(
            "radDrive::OpenSaveGame(char const *, radFileOpenFlags, bool, radMemcardInfo *, unsigned int, unsigned int *, unsigned int *)",
        ),
    ),
    (
        "WriteFile__8radDriveUiPCcQ28IRadFile17BufferedReadStateUiPCvUiPUiT714radMemorySpace",
        Ok(
            "radDrive::WriteFile(unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void const *, unsigned int, unsigned int *, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "Format__8radDrive",
        Ok(
            "radDrive::Format(void)",
        ),
    ),
    (
        "CreateDir__8radDrivePCc",
        Ok(
            "radDrive::CreateDir(char const *)",
        ),
    ),
    (
        "DestroyDir__8radDrivePCc",
        Ok(
            "radDrive::DestroyDir(char const *)",
        ),
    ),
    (
        "DestroyFile__8radDrivePCc",
        Ok(
            "radDrive::DestroyFile(char const *)",
        ),
    ),
    (
        "FindFirst__8radDrivePCcPQ29IRadDrive13DirectoryInfoP16radFileDirHandleb",
        Ok(
            "radDrive::FindFirst(char const *, IRadDrive::DirectoryInfo *, radFileDirHandle *, bool)",
        ),
    ),
    (
        "FindNext__8radDriveP16radFileDirHandlePQ29IRadDrive13DirectoryInfo",
        Ok(
            "radDrive::FindNext(radFileDirHandle *, IRadDrive::DirectoryInfo *)",
        ),
    ),
    (
        "FindClose__8radDriveP16radFileDirHandle",
        Ok(
            "radDrive::FindClose(radFileDirHandle *)",
        ),
    ),
    (
        "__tf8radDrive",
        Ok(
            "radDrive type_info function",
        ),
    ),
    (
        "AddRef__8radDrive",
        Ok(
            "radDrive::AddRef(void)",
        ),
    ),
    (
        "Release__8radDrive",
        Ok(
            "radDrive::Release(void)",
        ),
    ),
    (
        "BufferedReadFile__17radBufferedReaderP8radDriveUiPCcQ28IRadFile17BufferedReadStateUiPvUiPUi14radMemorySpace",
        Ok(
            "radBufferedReader::BufferedReadFile(radDrive *, unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "DriveThreadEntry__14radDriveThreadPv",
        Ok(
            "radDriveThread::DriveThreadEntry(void *)",
        ),
    ),
    (
        "__14radDriveThreadP15IRadThreadMutexiUi",
        Ok(
            "radDriveThread::radDriveThread(IRadThreadMutex *, int, unsigned int)",
        ),
    ),
    (
        "_$_14radDriveThread",
        Ok(
            "radDriveThread::~radDriveThread(void)",
        ),
    ),
    (
        "Lock__14radDriveThread",
        Ok(
            "radDriveThread::Lock(void)",
        ),
    ),
    (
        "Unlock__14radDriveThread",
        Ok(
            "radDriveThread::Unlock(void)",
        ),
    ),
    (
        "QueueRequest__14radDriveThreadP10radRequest15radFilePriorityb",
        Ok(
            "radDriveThread::QueueRequest(radRequest *, radFilePriority, bool)",
        ),
    ),
    (
        "CancelRequests__14radDriveThreadPv15radFilePriority",
        Ok(
            "radDriveThread::CancelRequests(void *, radFilePriority)",
        ),
    ),
    (
        "GetCurrentRequest__C14radDriveThread",
        Ok(
            "radDriveThread::GetCurrentRequest(void) const",
        ),
    ),
    (
        "OutstandingRequests__14radDriveThread",
        Ok(
            "radDriveThread::OutstandingRequests(void)",
        ),
    ),
    (
        "WaitGlobalError__14radDriveThreadP8radDrive",
        Ok(
            "radDriveThread::WaitGlobalError(radDrive *)",
        ),
    ),
    (
        "ResumeRequest__14radDriveThreadb",
        Ok(
            "radDriveThread::ResumeRequest(bool)",
        ),
    ),
    (
        "NextRequest__14radDriveThreadP15radFilePriority",
        Ok(
            "radDriveThread::NextRequest(radFilePriority *)",
        ),
    ),
    (
        "SetCurrentRequest__14radDriveThreadP10radRequest",
        Ok(
            "radDriveThread::SetCurrentRequest(radRequest *)",
        ),
    ),
    (
        "__tf14radDriveThread",
        Ok(
            "radDriveThread type_info function",
        ),
    ),
    (
        "AddRef__14radDriveThread",
        Ok(
            "radDriveThread::AddRef(void)",
        ),
    ),
    (
        "Release__14radDriveThread",
        Ok(
            "radDriveThread::Release(void)",
        ),
    ),
    (
        "SignedReadFile__15radSignedReaderP8radDriveUiPCcUiPvUiPUi14radMemorySpace",
        Ok(
            "radSignedReader::SignedReadFile(radDrive *, unsigned int, char const *, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "SignedWriteFile__15radSignedWriterP8radDriveUiPCcUiPCvUiPUiT714radMemorySpace",
        Ok(
            "radSignedWriter::SignedWriteFile(radDrive *, unsigned int, char const *, unsigned int, void const *, unsigned int, unsigned int *, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "__9FileCache",
        Ok(
            "FileCache::FileCache(void)",
        ),
    ),
    (
        "_$_9FileCache",
        Ok(
            "FileCache::~FileCache(void)",
        ),
    ),
    (
        "InitCache__9FileCachePUcUi14radMemorySpace",
        Ok(
            "FileCache::InitCache(unsigned char *, unsigned int, radMemorySpace)",
        ),
    ),
    (
        "DoInit__9FileCacheUiPCc",
        Ok(
            "FileCache::DoInit(unsigned int, char const *)",
        ),
    ),
    (
        "GetCacheMemorySpace__9FileCache",
        Ok(
            "FileCache::GetCacheMemorySpace(void)",
        ),
    ),
    (
        "ShouldUseCache__9FileCacheUiUi",
        Ok(
            "FileCache::ShouldUseCache(unsigned int, unsigned int)",
        ),
    ),
    (
        "Read__9FileCacheP8radDriveUiUiUiPCcQ28IRadFile17BufferedReadStateUiPvUiPUi14radMemorySpace",
        Ok(
            "FileCache::Read(radDrive *, unsigned int, unsigned int, unsigned int, char const *, IRadFile::BufferedReadState, unsigned int, void *, unsigned int, unsigned int *, radMemorySpace)",
        ),
    ),
    (
        "InvalidateCache__9FileCacheUiUi",
        Ok(
            "FileCache::InvalidateCache(unsigned int, unsigned int)",
        ),
    ),
    (
        "lgDevInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevEnumHint",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevEnumerate",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevOpen",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevClose",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevSetDeviceProperty",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevRead",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevDownloadForceEffect",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevStartForceEffect",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevStopForceEffect",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevASync",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevAEnumHint",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevAUpdateForceEffect",
        Err(
            NotMangled,
        ),
    ),
    (
        "lgDevAStartForceEffect",
        Err(
            NotMangled,
        ),
    ),
    (
        "__12PtrHashTableUiUiUi",
        Ok(
            "PtrHashTable::PtrHashTable(unsigned int, unsigned int, unsigned int)",
        ),
    ),
    (
        "_$_12PtrHashTable",
        Ok(
            "PtrHashTable::~PtrHashTable(void)",
        ),
    ),
    (
        "Remove__12PtrHashTablePv",
        Ok(
            "PtrHashTable::Remove(void *)",
        ),
    ),
    (
        "RemoveAll__12PtrHashTable",
        Ok(
            "PtrHashTable::RemoveAll(void)",
        ),
    ),
    (
        "RePack__12PtrHashTable",
        Ok(
            "PtrHashTable::RePack(void)",
        ),
    ),
    (
        "ReSize__12PtrHashTableUi",
        Ok(
            "PtrHashTable::ReSize(unsigned int)",
        ),
    ),
    (
        "Store__12PtrHashTableG13tUidUnalignedPv",
        Ok(
            "PtrHashTable::Store(tUidUnaligned, void *)",
        ),
    ),
    (
        "__Q212PtrHashTable8IteratorP12PtrHashTable",
        Ok(
            "PtrHashTable::Iterator::Iterator(PtrHashTable *)",
        ),
    ),
    (
        "_$_Q212PtrHashTable8Iterator",
        Ok(
            "PtrHashTable::Iterator::~Iterator(void)",
        ),
    ),
    (
        "PtrFirst__Q212PtrHashTable8IteratorG13tUidUnaligned",
        Ok(
            "PtrHashTable::Iterator::PtrFirst(tUidUnaligned)",
        ),
    ),
    (
        "PtrNext__Q212PtrHashTable8Iterator",
        Ok(
            "PtrHashTable::Iterator::PtrNext(void)",
        ),
    ),
    (
        "FirstFree__Q212PtrHashTable8IteratorG13tUidUnaligned",
        Ok(
            "PtrHashTable::Iterator::FirstFree(tUidUnaligned)",
        ),
    ),
    (
        "__Q212PtrHashTable11RawIteratorP12PtrHashTable",
        Ok(
            "PtrHashTable::RawIterator::RawIterator(PtrHashTable *)",
        ),
    ),
    (
        "_$_Q212PtrHashTable11RawIterator",
        Ok(
            "PtrHashTable::RawIterator::~RawIterator(void)",
        ),
    ),
    (
        "PtrFirst__Q212PtrHashTable11RawIterator",
        Ok(
            "PtrHashTable::RawIterator::PtrFirst(void)",
        ),
    ),
    (
        "PtrLast__Q212PtrHashTable11RawIterator",
        Ok(
            "PtrHashTable::RawIterator::PtrLast(void)",
        ),
    ),
    (
        "PtrNext__Q212PtrHashTable11RawIterator",
        Ok(
            "PtrHashTable::RawIterator::PtrNext(void)",
        ),
    ),
    (
        "PtrPrev__Q212PtrHashTable11RawIterator",
        Ok(
            "PtrHashTable::RawIterator::PtrPrev(void)",
        ),
    ),
    (
        "GetKey__Q212PtrHashTable11RawIterator",
        Ok(
            "PtrHashTable::RawIterator::GetKey(void)",
        ),
    ),
    (
        "GetMemoryAllocator__C12PtrHashTable",
        Ok(
            "PtrHashTable::GetMemoryAllocator(void) const",
        ),
    ),
    (
        "SetInternalMemoryAllocator__12PtrHashTablei",
        Ok(
            "PtrHashTable::SetInternalMemoryAllocator(int)",
        ),
    ),
    (
        "__tf12PtrHashTable",
        Ok(
            "PtrHashTable type_info function",
        ),
    ),
    (
        "__18radLoadHashedStorei",
        Ok(
            "radLoadHashedStore::radLoadHashedStore(int)",
        ),
    ),
    (
        "_$_18radLoadHashedStore",
        Ok(
            "radLoadHashedStore::~radLoadHashedStore(void)",
        ),
    ),
    (
        "Dump__18radLoadHashedStoreP12radLoadStore",
        Ok(
            "radLoadHashedStore::Dump(radLoadStore *)",
        ),
    ),
    (
        "Find__18radLoadHashedStoreRQ216radLoadInventory12SafeCastBaseG13tUidUnaligned",
        Ok(
            "radLoadHashedStore::Find(radLoadInventory::SafeCastBase &, tUidUnaligned)",
        ),
    ),
    (
        "GetElementCount__18radLoadHashedStore",
        Ok(
            "radLoadHashedStore::GetElementCount(void)",
        ),
    ),
    (
        "Store__18radLoadHashedStoreG13tUidUnalignedP9IRefCount",
        Ok(
            "radLoadHashedStore::Store(tUidUnaligned, IRefCount *)",
        ),
    ),
    (
        "StoreHandlingCollisions__18radLoadHashedStoreG13tUidUnalignedP9IRefCount",
        Ok(
            "radLoadHashedStore::StoreHandlingCollisions(tUidUnaligned, IRefCount *)",
        ),
    ),
    (
        "Remove__18radLoadHashedStoreP9IRefCount",
        Ok(
            "radLoadHashedStore::Remove(IRefCount *)",
        ),
    ),
    (
        "RemoveAll__18radLoadHashedStore",
        Ok(
            "radLoadHashedStore::RemoveAll(void)",
        ),
    ),
    (
        "RePack__18radLoadHashedStore",
        Ok(
            "radLoadHashedStore::RePack(void)",
        ),
    ),
    (
        "SetAutoRepack__18radLoadHashedStoreb",
        Ok(
            "radLoadHashedStore::SetAutoRepack(bool)",
        ),
    ),
    (
        "GetAutoRepack__18radLoadHashedStore",
        Ok(
            "radLoadHashedStore::GetAutoRepack(void)",
        ),
    ),
    (
        "SetAutoCollisionTest__18radLoadHashedStoreb",
        Ok(
            "radLoadHashedStore::SetAutoCollisionTest(bool)",
        ),
    ),
    (
        "TestCollision__18radLoadHashedStoreG13tUidUnalignedP9IRefCount",
        Ok(
            "radLoadHashedStore::TestCollision(tUidUnaligned, IRefCount *)",
        ),
    ),
    (
        "__tft12RefHashTable1Z9IRefCount",
        Ok(
            "RefHashTable<IRefCount> type_info function",
        ),
    ),
    (
        "__tf18radLoadHashedStore",
        Ok(
            "radLoadHashedStore type_info function",
        ),
    ),
    (
        "__tf13SafeCasterObj",
        Ok(
            "SafeCasterObj type_info function",
        ),
    ),
    (
        "_$_12radLoadStore",
        Ok(
            "radLoadStore::~radLoadStore(void)",
        ),
    ),
    (
        "__12radLoadStore",
        Ok(
            "radLoadStore::radLoadStore(void)",
        ),
    ),
    (
        "safe_cast__13SafeCasterObjP9IRefCount",
        Ok(
            "SafeCasterObj::safe_cast(IRefCount *)",
        ),
    ),
    (
        "_$_t12RefHashTable1Z9IRefCount",
        Ok(
            "RefHashTable<IRefCount>::~RefHashTable(void)",
        ),
    ),
    (
        "__tf12radLoadStore",
        Ok(
            "radLoadStore type_info function",
        ),
    ),
    (
        "__tft9HashTable1Z9IRefCount",
        Ok(
            "HashTable<IRefCount> type_info function",
        ),
    ),
    (
        "_$_t9HashTable1Z9IRefCount",
        Ok(
            "HashTable<IRefCount>::~HashTable(void)",
        ),
    ),
    (
        "radLoadInitialize__FP11radLoadInit",
        Ok(
            "radLoadInitialize(radLoadInit *)",
        ),
    ),
    (
        "radLoadInstance__Fv",
        Ok(
            "radLoadInstance(void)",
        ),
    ),
    (
        "__14radLoadManagerR11radLoadInit",
        Ok(
            "radLoadManager::radLoadManager(radLoadInit &)",
        ),
    ),
    (
        "_$_14radLoadManager",
        Ok(
            "radLoadManager::~radLoadManager(void)",
        ),
    ),
    (
        "AddCallback__14radLoadManagerP15radLoadCallback",
        Ok(
            "radLoadManager::AddCallback(radLoadCallback *)",
        ),
    ),
    (
        "AddDataLoader__14radLoadManagerP17radLoadDataLoaderUi",
        Ok(
            "radLoadManager::AddDataLoader(radLoadDataLoader *, unsigned int)",
        ),
    ),
    (
        "AddFileLoader__14radLoadManagerP17radLoadFileLoaderPCc",
        Ok(
            "radLoadManager::AddFileLoader(radLoadFileLoader *, char const *)",
        ),
    ),
    (
        "Cancel__14radLoadManager",
        Ok(
            "radLoadManager::Cancel(void)",
        ),
    ),
    (
        "GetDataLoader__14radLoadManagerUi",
        Ok(
            "radLoadManager::GetDataLoader(unsigned int)",
        ),
    ),
    (
        "GetFileLoader__14radLoadManagerPCc",
        Ok(
            "radLoadManager::GetFileLoader(char const *)",
        ),
    ),
    (
        "InternalService__14radLoadManager",
        Ok(
            "radLoadManager::InternalService(void)",
        ),
    ),
    (
        "IsLoadPending__14radLoadManager",
        Ok(
            "radLoadManager::IsLoadPending(void)",
        ),
    ),
    (
        "IsSyncLoading__14radLoadManager",
        Ok(
            "radLoadManager::IsSyncLoading(void)",
        ),
    ),
    (
        "Load__14radLoadManagerP14radLoadOptionsPP14radLoadRequest",
        Ok(
            "radLoadManager::Load(radLoadOptions *, radLoadRequest **)",
        ),
    ),
    (
        "Load__14radLoadManagerPCcPP14radLoadRequest",
        Ok(
            "radLoadManager::Load(char const *, radLoadRequest **)",
        ),
    ),
    (
        "LoadThreadEntry__14radLoadManagerPv",
        Ok(
            "radLoadManager::LoadThreadEntry(void *)",
        ),
    ),
    (
        "PercentDone__14radLoadManager",
        Ok(
            "radLoadManager::PercentDone(void)",
        ),
    ),
    (
        "PrintStats__14radLoadManager",
        Ok(
            "radLoadManager::PrintStats(void)",
        ),
    ),
    (
        "RemoveDataLoader__14radLoadManagerUi",
        Ok(
            "radLoadManager::RemoveDataLoader(unsigned int)",
        ),
    ),
    (
        "RemoveDataLoader__14radLoadManagerP17radLoadDataLoader",
        Ok(
            "radLoadManager::RemoveDataLoader(radLoadDataLoader *)",
        ),
    ),
    (
        "RemoveFileLoader__14radLoadManagerPCc",
        Ok(
            "radLoadManager::RemoveFileLoader(char const *)",
        ),
    ),
    (
        "RemoveFileLoader__14radLoadManagerP17radLoadFileLoader",
        Ok(
            "radLoadManager::RemoveFileLoader(radLoadFileLoader *)",
        ),
    ),
    (
        "Service__14radLoadManager",
        Ok(
            "radLoadManager::Service(void)",
        ),
    ),
    (
        "SetSyncLoading__14radLoadManagerb",
        Ok(
            "radLoadManager::SetSyncLoading(bool)",
        ),
    ),
    (
        "SwitchTasks__14radLoadManager",
        Ok(
            "radLoadManager::SwitchTasks(void)",
        ),
    ),
    (
        "Terminate__14radLoadManager",
        Ok(
            "radLoadManager::Terminate(void)",
        ),
    ),
    (
        "_$_Q2t9HashTable1Z17radLoadDataLoader11RawIterator",
        Ok(
            "HashTable<radLoadDataLoader>::RawIterator::~RawIterator(void)",
        ),
    ),
    (
        "_$_Q2t9HashTable1Z17radLoadFileLoader11RawIterator",
        Ok(
            "HashTable<radLoadFileLoader>::RawIterator::~RawIterator(void)",
        ),
    ),
    (
        "_$_Q214radLoadManager9QueueItem",
        Ok(
            "radLoadManager::QueueItem::~QueueItem(void)",
        ),
    ),
    (
        "__tfQ214radLoadManager9QueueItem",
        Ok(
            "radLoadManager::QueueItem type_info function",
        ),
    ),
    (
        "__tf14radLoadManager",
        Ok(
            "radLoadManager type_info function",
        ),
    ),
    (
        "__tft12RefHashTable1Z17radLoadFileLoader",
        Ok(
            "RefHashTable<radLoadFileLoader> type_info function",
        ),
    ),
    (
        "__tft12RefHashTable1Z17radLoadDataLoader",
        Ok(
            "RefHashTable<radLoadDataLoader> type_info function",
        ),
    ),
    (
        "__tft8RefQueue1Z13radLoadObject",
        Ok(
            "RefQueue<radLoadObject> type_info function",
        ),
    ),
    (
        "__tft8RefQueue1Z15radLoadCallback",
        Ok(
            "RefQueue<radLoadCallback> type_info function",
        ),
    ),
    (
        "__12ILoadManager",
        Ok(
            "ILoadManager::ILoadManager(void)",
        ),
    ),
    (
        "_$_Q2t9HashTable1Z17radLoadDataLoader8Iterator",
        Ok(
            "HashTable<radLoadDataLoader>::Iterator::~Iterator(void)",
        ),
    ),
    (
        "_$_Q2t9HashTable1Z17radLoadFileLoader8Iterator",
        Ok(
            "HashTable<radLoadFileLoader>::Iterator::~Iterator(void)",
        ),
    ),
    (
        "_$_t8RefQueue1Z15radLoadCallback",
        Ok(
            "RefQueue<radLoadCallback>::~RefQueue(void)",
        ),
    ),
    (
        "_$_t8RefQueue1Z13radLoadObject",
        Ok(
            "RefQueue<radLoadObject>::~RefQueue(void)",
        ),
    ),
    (
        "_$_t12RefHashTable1Z17radLoadDataLoader",
        Ok(
            "RefHashTable<radLoadDataLoader>::~RefHashTable(void)",
        ),
    ),
    (
        "_$_t12RefHashTable1Z17radLoadFileLoader",
        Ok(
            "RefHashTable<radLoadFileLoader>::~RefHashTable(void)",
        ),
    ),
    (
        "__tf12ILoadManager",
        Ok(
            "ILoadManager type_info function",
        ),
    ),
    (
        "__tft9HashTable1Z17radLoadFileLoader",
        Ok(
            "HashTable<radLoadFileLoader> type_info function",
        ),
    ),
    (
        "__tft9HashTable1Z17radLoadDataLoader",
        Ok(
            "HashTable<radLoadDataLoader> type_info function",
        ),
    ),
    (
        "__tft5Queue1Z13radLoadObject",
        Ok(
            "Queue<radLoadObject> type_info function",
        ),
    ),
    (
        "__tft5Queue1Z15radLoadCallback",
        Ok(
            "Queue<radLoadCallback> type_info function",
        ),
    ),
    (
        "_$_t9HashTable1Z17radLoadFileLoader",
        Ok(
            "HashTable<radLoadFileLoader>::~HashTable(void)",
        ),
    ),
    (
        "_$_t9HashTable1Z17radLoadDataLoader",
        Ok(
            "HashTable<radLoadDataLoader>::~HashTable(void)",
        ),
    ),
    (
        "_$_t5Queue1Z13radLoadObject",
        Ok(
            "Queue<radLoadObject>::~Queue(void)",
        ),
    ),
    (
        "_$_t5Queue1Z15radLoadCallback",
        Ok(
            "Queue<radLoadCallback>::~Queue(void)",
        ),
    ),
    (
        "__13radLoadObject",
        Ok(
            "radLoadObject::radLoadObject(void)",
        ),
    ),
    (
        "_$_13radLoadObject",
        Ok(
            "radLoadObject::~radLoadObject(void)",
        ),
    ),
    (
        "AddRef__13radLoadObject",
        Ok(
            "radLoadObject::AddRef(void)",
        ),
    ),
    (
        "Release__13radLoadObject",
        Ok(
            "radLoadObject::Release(void)",
        ),
    ),
    (
        "ReleaseVerified__13radLoadObject",
        Ok(
            "radLoadObject::ReleaseVerified(void)",
        ),
    ),
    (
        "__nw__13radLoadObjectUi",
        Ok(
            "radLoadObject::operator new(unsigned int)",
        ),
    ),
    (
        "__nw__13radLoadObjectUii",
        Ok(
            "radLoadObject::operator new(unsigned int, int)",
        ),
    ),
    (
        "__dl__13radLoadObjectPv",
        Ok(
            "radLoadObject::operator delete(void *)",
        ),
    ),
    (
        "__tf13radLoadObject",
        Ok(
            "radLoadObject type_info function",
        ),
    ),
    (
        "__8PtrQueueUi",
        Ok(
            "PtrQueue::PtrQueue(unsigned int)",
        ),
    ),
    (
        "_$_8PtrQueue",
        Ok(
            "PtrQueue::~PtrQueue(void)",
        ),
    ),
    (
        "PtrPush__8PtrQueuePv",
        Ok(
            "PtrQueue::PtrPush(void *)",
        ),
    ),
    (
        "PtrPop__8PtrQueue",
        Ok(
            "PtrQueue::PtrPop(void)",
        ),
    ),
    (
        "GetMemoryAllocator__C8PtrQueue",
        Ok(
            "PtrQueue::GetMemoryAllocator(void) const",
        ),
    ),
    (
        "SetInternalMemoryAllocator__8PtrQueuei",
        Ok(
            "PtrQueue::SetInternalMemoryAllocator(int)",
        ),
    ),
    (
        "__tf8PtrQueue",
        Ok(
            "PtrQueue type_info function",
        ),
    ),
    (
        "__14radLoadRequest",
        Ok(
            "radLoadRequest::radLoadRequest(void)",
        ),
    ),
    (
        "_$_14radLoadRequest",
        Ok(
            "radLoadRequest::~radLoadRequest(void)",
        ),
    ),
    (
        "Cancel__14radLoadRequest",
        Ok(
            "radLoadRequest::Cancel(void)",
        ),
    ),
    (
        "GetPercentDone__14radLoadRequest",
        Ok(
            "radLoadRequest::GetPercentDone(void)",
        ),
    ),
    (
        "GetInventory__14radLoadRequest",
        Ok(
            "radLoadRequest::GetInventory(void)",
        ),
    ),
    (
        "GetState__14radLoadRequest",
        Ok(
            "radLoadRequest::GetState(void)",
        ),
    ),
    (
        "GetTotalLoadTime__14radLoadRequest",
        Ok(
            "radLoadRequest::GetTotalLoadTime(void)",
        ),
    ),
    (
        "GetTotalQueuedTime__14radLoadRequest",
        Ok(
            "radLoadRequest::GetTotalQueuedTime(void)",
        ),
    ),
    (
        "IsComplete__14radLoadRequest",
        Ok(
            "radLoadRequest::IsComplete(void)",
        ),
    ),
    (
        "__23radLoadUpdatableRequest",
        Ok(
            "radLoadUpdatableRequest::radLoadUpdatableRequest(void)",
        ),
    ),
    (
        "_$_23radLoadUpdatableRequest",
        Ok(
            "radLoadUpdatableRequest::~radLoadUpdatableRequest(void)",
        ),
    ),
    (
        "GetPercentDone__23radLoadUpdatableRequest",
        Ok(
            "radLoadUpdatableRequest::GetPercentDone(void)",
        ),
    ),
    (
        "SetInventory__23radLoadUpdatableRequestP16radLoadInventory",
        Ok(
            "radLoadUpdatableRequest::SetInventory(radLoadInventory *)",
        ),
    ),
    (
        "SetState__23radLoadUpdatableRequest12radLoadState",
        Ok(
            "radLoadUpdatableRequest::SetState(radLoadState)",
        ),
    ),
    (
        "SetStream__23radLoadUpdatableRequestP13radLoadStream",
        Ok(
            "radLoadUpdatableRequest::SetStream(radLoadStream *)",
        ),
    ),
    (
        "GetStream__23radLoadUpdatableRequest",
        Ok(
            "radLoadUpdatableRequest::GetStream(void)",
        ),
    ),
    (
        "__tf14radLoadRequest",
        Ok(
            "radLoadRequest type_info function",
        ),
    ),
    (
        "__tf23radLoadUpdatableRequest",
        Ok(
            "radLoadUpdatableRequest type_info function",
        ),
    ),
    (
        "radLoadCreateFileStream__FPP13radLoadStreamPCcP23radLoadUpdatableRequest",
        Ok(
            "radLoadCreateFileStream(radLoadStream **, char const *, radLoadUpdatableRequest *)",
        ),
    ),
    (
        "EndianSwap__13radLoadStreamPvUiUi",
        Ok(
            "radLoadStream::EndianSwap(void *, unsigned int, unsigned int)",
        ),
    ),
    (
        "__17radLoadBaseStreamUiP23radLoadUpdatableRequest",
        Ok(
            "radLoadBaseStream::radLoadBaseStream(unsigned int, radLoadUpdatableRequest *)",
        ),
    ),
    (
        "__17radLoadDataStreamPUcUibP23radLoadUpdatableRequest",
        Ok(
            "radLoadDataStream::radLoadDataStream(unsigned char *, unsigned int, bool, radLoadUpdatableRequest *)",
        ),
    ),
    (
        "_$_17radLoadDataStream",
        Ok(
            "radLoadDataStream::~radLoadDataStream(void)",
        ),
    ),
    (
        "Read__17radLoadDataStreamPvUiUi",
        Ok(
            "radLoadDataStream::Read(void *, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetMemory__17radLoadDataStream",
        Ok(
            "radLoadDataStream::GetMemory(void)",
        ),
    ),
    (
        "__17radLoadFileStreamPCcP23radLoadUpdatableRequest",
        Ok(
            "radLoadFileStream::radLoadFileStream(char const *, radLoadUpdatableRequest *)",
        ),
    ),
    (
        "_$_17radLoadFileStream",
        Ok(
            "radLoadFileStream::~radLoadFileStream(void)",
        ),
    ),
    (
        "Read__17radLoadFileStreamPvUiUi",
        Ok(
            "radLoadFileStream::Read(void *, unsigned int, unsigned int)",
        ),
    ),
    (
        "GetSize__17radLoadFileStream",
        Ok(
            "radLoadFileStream::GetSize(void)",
        ),
    ),
    (
        "GetPosition__17radLoadFileStream",
        Ok(
            "radLoadFileStream::GetPosition(void)",
        ),
    ),
    (
        "OnFileOperationsComplete__Q217radLoadFileStream8CallbackPv",
        Ok(
            "radLoadFileStream::Callback::OnFileOperationsComplete(void *)",
        ),
    ),
    (
        "WaitForCompletion__17radLoadFileStream",
        Ok(
            "radLoadFileStream::WaitForCompletion(void)",
        ),
    ),
    (
        "_$_19radLoadLoaderStream",
        Ok(
            "radLoadLoaderStream::~radLoadLoaderStream(void)",
        ),
    ),
    (
        "__tf17radLoadBaseStream",
        Ok(
            "radLoadBaseStream type_info function",
        ),
    ),
    (
        "__tf17radLoadDataStream",
        Ok(
            "radLoadDataStream type_info function",
        ),
    ),
    (
        "__tf17radLoadFileStream",
        Ok(
            "radLoadFileStream type_info function",
        ),
    ),
    (
        "__tf19radLoadLoaderStream",
        Ok(
            "radLoadLoaderStream type_info function",
        ),
    ),
    (
        "_$_Q217radLoadFileStream8Callback",
        Ok(
            "radLoadFileStream::Callback::~Callback(void)",
        ),
    ),
    (
        "__tfQ217radLoadFileStream8Callback",
        Ok(
            "radLoadFileStream::Callback type_info function",
        ),
    ),
    (
        "_$_17radLoadBaseStream",
        Ok(
            "radLoadBaseStream::~radLoadBaseStream(void)",
        ),
    ),
    (
        "GetSize__17radLoadBaseStream",
        Ok(
            "radLoadBaseStream::GetSize(void)",
        ),
    ),
    (
        "GetPosition__17radLoadBaseStream",
        Ok(
            "radLoadBaseStream::GetPosition(void)",
        ),
    ),
    (
        "AddRef__Q217radLoadFileStream8Callback",
        Ok(
            "radLoadFileStream::Callback::AddRef(void)",
        ),
    ),
    (
        "Release__Q217radLoadFileStream8Callback",
        Ok(
            "radLoadFileStream::Callback::Release(void)",
        ),
    ),
    (
        "__assert",
        Err(
            InvalidSpecialMethod(
                "assert",
            ),
        ),
    ),
    (
        "atexit",
        Err(
            NotMangled,
        ),
    ),
    (
        "atof",
        Err(
            NotMangled,
        ),
    ),
    (
        "atoi",
        Err(
            NotMangled,
        ),
    ),
    (
        "calloc",
        Err(
            NotMangled,
        ),
    ),
    (
        "_calloc_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "exit",
        Err(
            NotMangled,
        ),
    ),
    (
        "fclose",
        Err(
            NotMangled,
        ),
    ),
    (
        "fflush",
        Err(
            NotMangled,
        ),
    ),
    (
        "__sfmoreglue",
        Err(
            InvalidSpecialMethod(
                "sfmoreglue",
            ),
        ),
    ),
    (
        "__sfp",
        Err(
            InvalidSpecialMethod(
                "sfp",
            ),
        ),
    ),
    (
        "_cleanup_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "__sinit",
        Err(
            InvalidSpecialMethod(
                "sinit",
            ),
        ),
    ),
    (
        "fiprintf",
        Err(
            NotMangled,
        ),
    ),
    (
        "_fopen_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "fopen",
        Err(
            NotMangled,
        ),
    ),
    (
        "fprintf",
        Err(
            NotMangled,
        ),
    ),
    (
        "fread",
        Err(
            NotMangled,
        ),
    ),
    (
        "_free_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "_malloc_trim_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "fseek",
        Err(
            NotMangled,
        ),
    ),
    (
        "_fstat_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "_fwalk",
        Err(
            NotMangled,
        ),
    ),
    (
        "fwrite",
        Err(
            NotMangled,
        ),
    ),
    (
        "__smakebuf",
        Err(
            InvalidSpecialMethod(
                "smakebuf",
            ),
        ),
    ),
    (
        "memalign",
        Err(
            NotMangled,
        ),
    ),
    (
        "_memalign_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "malloc",
        Err(
            NotMangled,
        ),
    ),
    (
        "free",
        Err(
            NotMangled,
        ),
    ),
    (
        "_malloc_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "memcmp",
        Err(
            NotMangled,
        ),
    ),
    (
        "memcpy",
        Err(
            NotMangled,
        ),
    ),
    (
        "memmove",
        Err(
            NotMangled,
        ),
    ),
    (
        "memset",
        Err(
            NotMangled,
        ),
    ),
    (
        "__malloc_lock",
        Err(
            InvalidSpecialMethod(
                "malloc_lock",
            ),
        ),
    ),
    (
        "__malloc_unlock",
        Err(
            InvalidSpecialMethod(
                "malloc_unlock",
            ),
        ),
    ),
    (
        "mallinfo",
        Err(
            NotMangled,
        ),
    ),
    (
        "_open_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "printf",
        Err(
            NotMangled,
        ),
    ),
    (
        "qsort",
        Err(
            NotMangled,
        ),
    ),
    (
        "srand",
        Err(
            NotMangled,
        ),
    ),
    (
        "rand",
        Err(
            NotMangled,
        ),
    ),
    (
        "__srefill",
        Err(
            InvalidSpecialMethod(
                "srefill",
            ),
        ),
    ),
    (
        "_sbrk_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "setjmp",
        Err(
            NotMangled,
        ),
    ),
    (
        "longjmp",
        Err(
            NotMangled,
        ),
    ),
    (
        "isnanf",
        Err(
            NotMangled,
        ),
    ),
    (
        "sprintf",
        Err(
            NotMangled,
        ),
    ),
    (
        "__sread",
        Err(
            InvalidSpecialMethod(
                "sread",
            ),
        ),
    ),
    (
        "__swrite",
        Err(
            InvalidSpecialMethod(
                "swrite",
            ),
        ),
    ),
    (
        "__sseek",
        Err(
            InvalidSpecialMethod(
                "sseek",
            ),
        ),
    ),
    (
        "__sclose",
        Err(
            InvalidSpecialMethod(
                "sclose",
            ),
        ),
    ),
    (
        "strcasecmp",
        Err(
            NotMangled,
        ),
    ),
    (
        "strcat",
        Err(
            NotMangled,
        ),
    ),
    (
        "strchr",
        Err(
            NotMangled,
        ),
    ),
    (
        "strcmp",
        Err(
            NotMangled,
        ),
    ),
    (
        "strcpy",
        Err(
            NotMangled,
        ),
    ),
    (
        "strlen",
        Err(
            NotMangled,
        ),
    ),
    (
        "strlwr",
        Err(
            NotMangled,
        ),
    ),
    (
        "strncat",
        Err(
            NotMangled,
        ),
    ),
    (
        "strncmp",
        Err(
            NotMangled,
        ),
    ),
    (
        "strncpy",
        Err(
            NotMangled,
        ),
    ),
    (
        "strrchr",
        Err(
            NotMangled,
        ),
    ),
    (
        "strstr",
        Err(
            NotMangled,
        ),
    ),
    (
        "_strtod_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "strtod",
        Err(
            NotMangled,
        ),
    ),
    (
        "_strtol_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "strtol",
        Err(
            NotMangled,
        ),
    ),
    (
        "strupr",
        Err(
            NotMangled,
        ),
    ),
    (
        "vfiprintf",
        Err(
            NotMangled,
        ),
    ),
    (
        "_vfiprintf_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "vfprintf",
        Err(
            NotMangled,
        ),
    ),
    (
        "_vfprintf_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "vsprintf",
        Err(
            NotMangled,
        ),
    ),
    (
        "_write_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "__swsetup",
        Err(
            InvalidSpecialMethod(
                "swsetup",
            ),
        ),
    ),
    (
        "abort",
        Err(
            NotMangled,
        ),
    ),
    (
        "_close_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "_dtoa_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "__sflags",
        Err(
            InvalidSpecialMethod(
                "sflags",
            ),
        ),
    ),
    (
        "__sfvwrite",
        Err(
            InvalidSpecialMethod(
                "sfvwrite",
            ),
        ),
    ),
    (
        "_localeconv_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "localeconv",
        Err(
            NotMangled,
        ),
    ),
    (
        "_lseek_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "__malloc_update_mallinfo",
        Err(
            InvalidSpecialMethod(
                "malloc_update_mallinfo",
            ),
        ),
    ),
    (
        "_mallinfo_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "_mbtowc_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "memchr",
        Err(
            NotMangled,
        ),
    ),
    (
        "_Balloc",
        Err(
            NotMangled,
        ),
    ),
    (
        "_Bfree",
        Err(
            NotMangled,
        ),
    ),
    (
        "_multadd",
        Err(
            NotMangled,
        ),
    ),
    (
        "_s2b",
        Err(
            NotMangled,
        ),
    ),
    (
        "_hi0bits",
        Err(
            NotMangled,
        ),
    ),
    (
        "_lo0bits",
        Err(
            NotMangled,
        ),
    ),
    (
        "_i2b",
        Err(
            NotMangled,
        ),
    ),
    (
        "_multiply",
        Err(
            NotMangled,
        ),
    ),
    (
        "_pow5mult",
        Err(
            NotMangled,
        ),
    ),
    (
        "_lshift",
        Err(
            NotMangled,
        ),
    ),
    (
        "__mcmp",
        Err(
            InvalidSpecialMethod(
                "mcmp",
            ),
        ),
    ),
    (
        "__mdiff",
        Err(
            InvalidSpecialMethod(
                "mdiff",
            ),
        ),
    ),
    (
        "_ulp",
        Err(
            NotMangled,
        ),
    ),
    (
        "_b2d",
        Err(
            NotMangled,
        ),
    ),
    (
        "_d2b",
        Err(
            NotMangled,
        ),
    ),
    (
        "_ratio",
        Err(
            NotMangled,
        ),
    ),
    (
        "_read_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "isinf",
        Err(
            NotMangled,
        ),
    ),
    (
        "isnan",
        Err(
            NotMangled,
        ),
    ),
    (
        "_init_signal_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "_raise_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "raise",
        Err(
            NotMangled,
        ),
    ),
    (
        "_kill_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "_getpid_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "__7istreamiP9streambufP7ostream",
        Ok(
            "istream::istream(int, streambuf *, ostream *)",
        ),
    ),
    (
        "skip_ws__FP9streambuf",
        Ok(
            "skip_ws(streambuf *)",
        ),
    ),
    (
        "get__7istreamRc",
        Ok(
            "istream::get(char &)",
        ),
    ),
    (
        "peek__7istream",
        Ok(
            "istream::peek(void)",
        ),
    ),
    (
        "ignore__7istreamii",
        Ok(
            "istream::ignore(int, int)",
        ),
    ),
    (
        "read__7istreamPci",
        Ok(
            "istream::read(char *, int)",
        ),
    ),
    (
        "sync__7istream",
        Ok(
            "istream::sync(void)",
        ),
    ),
    (
        "seekg__7istreaml",
        Ok(
            "istream::seekg(long)",
        ),
    ),
    (
        "seekg__7istreamlQ23ios8seek_dir",
        Ok(
            "istream::seekg(long, ios::seek_dir)",
        ),
    ),
    (
        "tellg__7istream",
        Ok(
            "istream::tellg(void)",
        ),
    ),
    (
        "__rs__7istreamRc",
        Ok(
            "istream::operator>>(char &)",
        ),
    ),
    (
        "__rs__7istreamPc",
        Ok(
            "istream::operator>>(char *)",
        ),
    ),
    (
        "__rs__7istreamRs",
        Ok(
            "istream::operator>>(short &)",
        ),
    ),
    (
        "__rs__7istreamRUs",
        Ok(
            "istream::operator>>(unsigned short &)",
        ),
    ),
    (
        "__rs__7istreamRi",
        Ok(
            "istream::operator>>(int &)",
        ),
    ),
    (
        "__rs__7istreamRUi",
        Ok(
            "istream::operator>>(unsigned int &)",
        ),
    ),
    (
        "__rs__7istreamRl",
        Ok(
            "istream::operator>>(long &)",
        ),
    ),
    (
        "__rs__7istreamRUl",
        Ok(
            "istream::operator>>(unsigned long &)",
        ),
    ),
    (
        "__rs__7istreamRx",
        Ok(
            "istream::operator>>(long long &)",
        ),
    ),
    (
        "__rs__7istreamRUx",
        Ok(
            "istream::operator>>(unsigned long long &)",
        ),
    ),
    (
        "__rs__7istreamRb",
        Ok(
            "istream::operator>>(bool &)",
        ),
    ),
    (
        "__rs__7istreamRr",
        Ok(
            "istream::operator>>(long double &)",
        ),
    ),
    (
        "__rs__7istreamRd",
        Ok(
            "istream::operator>>(double &)",
        ),
    ),
    (
        "__rs__7istreamRf",
        Ok(
            "istream::operator>>(float &)",
        ),
    ),
    (
        "__rs__7istreamP9streambuf",
        Ok(
            "istream::operator>>(streambuf *)",
        ),
    ),
    (
        "__ls__7ostreamc",
        Ok(
            "ostream::operator<<(char)",
        ),
    ),
    (
        "__ls__7ostreami",
        Ok(
            "ostream::operator<<(int)",
        ),
    ),
    (
        "__ls__7ostreamUi",
        Ok(
            "ostream::operator<<(unsigned int)",
        ),
    ),
    (
        "__ls__7ostreaml",
        Ok(
            "ostream::operator<<(long)",
        ),
    ),
    (
        "__ls__7ostreamUl",
        Ok(
            "ostream::operator<<(unsigned long)",
        ),
    ),
    (
        "__ls__7ostreamx",
        Ok(
            "ostream::operator<<(long long)",
        ),
    ),
    (
        "__ls__7ostreamUx",
        Ok(
            "ostream::operator<<(unsigned long long)",
        ),
    ),
    (
        "__ls__7ostreamd",
        Ok(
            "ostream::operator<<(double)",
        ),
    ),
    (
        "__ls__7ostreamPCc",
        Ok(
            "ostream::operator<<(char const *)",
        ),
    ),
    (
        "__ls__7ostreamP9streambuf",
        Ok(
            "ostream::operator<<(streambuf *)",
        ),
    ),
    (
        "__7ostreamiP9streambufP7ostream",
        Ok(
            "ostream::ostream(int, streambuf *, ostream *)",
        ),
    ),
    (
        "seekp__7ostreaml",
        Ok(
            "ostream::seekp(long)",
        ),
    ),
    (
        "seekp__7ostreamlQ23ios8seek_dir",
        Ok(
            "ostream::seekp(long, ios::seek_dir)",
        ),
    ),
    (
        "tellp__7ostream",
        Ok(
            "ostream::tellp(void)",
        ),
    ),
    (
        "flush__7ostream",
        Ok(
            "ostream::flush(void)",
        ),
    ),
    (
        "flush__FR7ostream",
        Ok(
            "flush(ostream &)",
        ),
    ),
    (
        "ws__FR7istream",
        Ok(
            "ws(istream &)",
        ),
    ),
    (
        "_skip_ws__7istream",
        Ok(
            "istream::_skip_ws(void)",
        ),
    ),
    (
        "ends__FR7ostream",
        Ok(
            "ends(ostream &)",
        ),
    ),
    (
        "endl__FR7ostream",
        Ok(
            "endl(ostream &)",
        ),
    ),
    (
        "lock__FR7istream",
        Ok(
            "lock(istream &)",
        ),
    ),
    (
        "unlock__FR7istream",
        Ok(
            "unlock(istream &)",
        ),
    ),
    (
        "lock__FR7ostream",
        Ok(
            "lock(ostream &)",
        ),
    ),
    (
        "unlock__FR7ostream",
        Ok(
            "unlock(ostream &)",
        ),
    ),
    (
        "write__7ostreamPCci",
        Ok(
            "ostream::write(char const *, int)",
        ),
    ),
    (
        "do_osfx__7ostream",
        Ok(
            "ostream::do_osfx(void)",
        ),
    ),
    (
        "__8iostreamiP9streambufP7ostream",
        Ok(
            "iostream::iostream(int, streambuf *, ostream *)",
        ),
    ),
    (
        "close__3ios",
        Ok(
            "ios::close(void)",
        ),
    ),
    (
        "skip__7istreami",
        Ok(
            "istream::skip(int)",
        ),
    ),
    (
        "oct__FR3ios",
        Ok(
            "oct(ios &)",
        ),
    ),
    (
        "hex__FR3ios",
        Ok(
            "hex(ios &)",
        ),
    ),
    (
        "dec__FR3ios",
        Ok(
            "dec(ios &)",
        ),
    ),
    (
        "__as__22_IO_ostream_withassignR22_IO_ostream_withassign",
        Ok(
            "_IO_ostream_withassign::operator=(_IO_ostream_withassign &)",
        ),
    ),
    (
        "__tf22_IO_ostream_withassign",
        Ok(
            "_IO_ostream_withassign type_info function",
        ),
    ),
    (
        "_$_22_IO_ostream_withassign",
        Ok(
            "_IO_ostream_withassign::~_IO_ostream_withassign(void)",
        ),
    ),
    (
        "__as__22_IO_istream_withassignR22_IO_istream_withassign",
        Ok(
            "_IO_istream_withassign::operator=(_IO_istream_withassign &)",
        ),
    ),
    (
        "__tf22_IO_istream_withassign",
        Ok(
            "_IO_istream_withassign type_info function",
        ),
    ),
    (
        "_$_22_IO_istream_withassign",
        Ok(
            "_IO_istream_withassign::~_IO_istream_withassign(void)",
        ),
    ),
    (
        "__8iostreami",
        Ok(
            "iostream::iostream(int)",
        ),
    ),
    (
        "__tf8iostream",
        Ok(
            "iostream type_info function",
        ),
    ),
    (
        "_$_8iostream",
        Ok(
            "iostream::~iostream(void)",
        ),
    ),
    (
        "__rs__7istreamPFR7istream_R7istream",
        Ok(
            "istream::operator>>(istream &(*)(istream &))",
        ),
    ),
    (
        "__rs__7istreamPFR3ios_R3ios",
        Ok(
            "istream::operator>>(ios &(*)(ios &))",
        ),
    ),
    (
        "__rs__7istreamRSc",
        Ok(
            "istream::operator>>(signed char &)",
        ),
    ),
    (
        "__rs__7istreamRUc",
        Ok(
            "istream::operator>>(unsigned char &)",
        ),
    ),
    (
        "__rs__7istreamPSc",
        Ok(
            "istream::operator>>(signed char *)",
        ),
    ),
    (
        "__rs__7istreamPUc",
        Ok(
            "istream::operator>>(unsigned char *)",
        ),
    ),
    (
        "istreambuf__C7istream",
        Ok(
            "istream::istreambuf(void) const",
        ),
    ),
    (
        "unget__7istreamc",
        Ok(
            "istream::unget(char)",
        ),
    ),
    (
        "unget__7istream",
        Ok(
            "istream::unget(void)",
        ),
    ),
    (
        "putback__7istreamc",
        Ok(
            "istream::putback(char)",
        ),
    ),
    (
        "gcount__7istream",
        Ok(
            "istream::gcount(void)",
        ),
    ),
    (
        "get__7istream",
        Ok(
            "istream::get(void)",
        ),
    ),
    (
        "isfx__7istream",
        Ok(
            "istream::isfx(void)",
        ),
    ),
    (
        "ipfx1__7istream",
        Ok(
            "istream::ipfx1(void)",
        ),
    ),
    (
        "ipfx0__7istream",
        Ok(
            "istream::ipfx0(void)",
        ),
    ),
    (
        "ipfx__7istreami",
        Ok(
            "istream::ipfx(int)",
        ),
    ),
    (
        "read__7istreamPvi",
        Ok(
            "istream::read(void *, int)",
        ),
    ),
    (
        "read__7istreamPSci",
        Ok(
            "istream::read(signed char *, int)",
        ),
    ),
    (
        "read__7istreamPUci",
        Ok(
            "istream::read(unsigned char *, int)",
        ),
    ),
    (
        "getline__7istreamPScic",
        Ok(
            "istream::getline(signed char *, int, char)",
        ),
    ),
    (
        "get__7istreamPScic",
        Ok(
            "istream::get(signed char *, int, char)",
        ),
    ),
    (
        "get__7istreamRSc",
        Ok(
            "istream::get(signed char &)",
        ),
    ),
    (
        "getline__7istreamPUcic",
        Ok(
            "istream::getline(unsigned char *, int, char)",
        ),
    ),
    (
        "get__7istreamRUc",
        Ok(
            "istream::get(unsigned char &)",
        ),
    ),
    (
        "get__7istreamPUcic",
        Ok(
            "istream::get(unsigned char *, int, char)",
        ),
    ),
    (
        "__7istreami",
        Ok(
            "istream::istream(int)",
        ),
    ),
    (
        "__tf7istream",
        Ok(
            "istream type_info function",
        ),
    ),
    (
        "_$_7istream",
        Ok(
            "istream::~istream(void)",
        ),
    ),
    (
        "ostreambuf__C7ostream",
        Ok(
            "ostream::ostreambuf(void) const",
        ),
    ),
    (
        "__ls__7ostreamPFR3ios_R3ios",
        Ok(
            "ostream::operator<<(ios &(*)(ios &))",
        ),
    ),
    (
        "__ls__7ostreamPFR7ostream_R7ostream",
        Ok(
            "ostream::operator<<(ostream &(*)(ostream &))",
        ),
    ),
    (
        "__ls__7ostreamr",
        Ok(
            "ostream::operator<<(long double)",
        ),
    ),
    (
        "__ls__7ostreamf",
        Ok(
            "ostream::operator<<(float)",
        ),
    ),
    (
        "__ls__7ostreamb",
        Ok(
            "ostream::operator<<(bool)",
        ),
    ),
    (
        "__ls__7ostreamUs",
        Ok(
            "ostream::operator<<(unsigned short)",
        ),
    ),
    (
        "__ls__7ostreams",
        Ok(
            "ostream::operator<<(short)",
        ),
    ),
    (
        "__ls__7ostreamPCSc",
        Ok(
            "ostream::operator<<(signed char const *)",
        ),
    ),
    (
        "__ls__7ostreamPCUc",
        Ok(
            "ostream::operator<<(unsigned char const *)",
        ),
    ),
    (
        "__ls__7ostreamSc",
        Ok(
            "ostream::operator<<(signed char)",
        ),
    ),
    (
        "__ls__7ostreamUc",
        Ok(
            "ostream::operator<<(unsigned char)",
        ),
    ),
    (
        "write__7ostreamPCvi",
        Ok(
            "ostream::write(void const *, int)",
        ),
    ),
    (
        "write__7ostreamPCSci",
        Ok(
            "ostream::write(signed char const *, int)",
        ),
    ),
    (
        "write__7ostreamPCUci",
        Ok(
            "ostream::write(unsigned char const *, int)",
        ),
    ),
    (
        "put__7ostreamSc",
        Ok(
            "ostream::put(signed char)",
        ),
    ),
    (
        "put__7ostreamUc",
        Ok(
            "ostream::put(unsigned char)",
        ),
    ),
    (
        "put__7ostreamc",
        Ok(
            "ostream::put(char)",
        ),
    ),
    (
        "osfx__7ostream",
        Ok(
            "ostream::osfx(void)",
        ),
    ),
    (
        "opfx__7ostream",
        Ok(
            "ostream::opfx(void)",
        ),
    ),
    (
        "__7ostreami",
        Ok(
            "ostream::ostream(int)",
        ),
    ),
    (
        "__tf7ostream",
        Ok(
            "ostream type_info function",
        ),
    ),
    (
        "_$_7ostream",
        Ok(
            "ostream::~ostream(void)",
        ),
    ),
    (
        "getline__7istreamPcic",
        Ok(
            "istream::getline(char *, int, char)",
        ),
    ),
    (
        "get__7istreamPcic",
        Ok(
            "istream::get(char *, int, char)",
        ),
    ),
    (
        "_sb_readline__FP9streambufRlc",
        Ok(
            "_sb_readline(streambuf *, long &, char)",
        ),
    ),
    (
        "gets__7istreamPPcc",
        Ok(
            "istream::gets(char **, char)",
        ),
    ),
    (
        "scan__7istreamPCce",
        Ok(
            "istream::scan(char const *, ...)",
        ),
    ),
    (
        "vscan__7istreamPCcPc",
        Ok(
            "istream::vscan(char const *, char *)",
        ),
    ),
    (
        "vscan__9streambufPCcPcP3ios",
        Ok(
            "streambuf::vscan(char const *, char *, ios *)",
        ),
    ),
    (
        "scan__9streambufPCce",
        Ok(
            "streambuf::scan(char const *, ...)",
        ),
    ),
    (
        "sync_with_stdio__3iosi",
        Ok(
            "ios::sync_with_stdio(int)",
        ),
    ),
    (
        "_un_link__9streambuf",
        Ok(
            "streambuf::_un_link(void)",
        ),
    ),
    (
        "_link_in__9streambuf",
        Ok(
            "streambuf::_link_in(void)",
        ),
    ),
    (
        "switch_to_get_mode__9streambuf",
        Ok(
            "streambuf::switch_to_get_mode(void)",
        ),
    ),
    (
        "free_backup_area__9streambuf",
        Ok(
            "streambuf::free_backup_area(void)",
        ),
    ),
    (
        "__overflow__FP9streambufi",
        Ok(
            "__overflow(streambuf *, int)",
        ),
    ),
    (
        "underflow__9streambuf",
        Ok(
            "streambuf::underflow(void)",
        ),
    ),
    (
        "uflow__9streambuf",
        Ok(
            "streambuf::uflow(void)",
        ),
    ),
    (
        "overflow__9streambufi",
        Ok(
            "streambuf::overflow(int)",
        ),
    ),
    (
        "xsputn__9streambufPCcl",
        Ok(
            "streambuf::xsputn(char const *, long)",
        ),
    ),
    (
        "xsgetn__9streambufPcl",
        Ok(
            "streambuf::xsgetn(char *, long)",
        ),
    ),
    (
        "ignore__9streambufi",
        Ok(
            "streambuf::ignore(int)",
        ),
    ),
    (
        "sync__9streambuf",
        Ok(
            "streambuf::sync(void)",
        ),
    ),
    (
        "pbackfail__9streambufi",
        Ok(
            "streambuf::pbackfail(int)",
        ),
    ),
    (
        "setbuf__9streambufPci",
        Ok(
            "streambuf::setbuf(char *, int)",
        ),
    ),
    (
        "seekpos__9streambufli",
        Ok(
            "streambuf::seekpos(long, int)",
        ),
    ),
    (
        "sseekpos__9streambufli",
        Ok(
            "streambuf::sseekpos(long, int)",
        ),
    ),
    (
        "setb__9streambufPcT1i",
        Ok(
            "streambuf::setb(char *, char *, int)",
        ),
    ),
    (
        "doallocate__9streambuf",
        Ok(
            "streambuf::doallocate(void)",
        ),
    ),
    (
        "doallocbuf__9streambuf",
        Ok(
            "streambuf::doallocbuf(void)",
        ),
    ),
    (
        "__9streambufi",
        Ok(
            "streambuf::streambuf(int)",
        ),
    ),
    (
        "_$_9streambuf",
        Ok(
            "streambuf::~streambuf(void)",
        ),
    ),
    (
        "seekoff__9streambuflQ23ios8seek_diri",
        Ok(
            "streambuf::seekoff(long, ios::seek_dir, int)",
        ),
    ),
    (
        "sseekoff__9streambuflQ23ios8seek_diri",
        Ok(
            "streambuf::sseekoff(long, ios::seek_dir, int)",
        ),
    ),
    (
        "sputbackc__9streambufc",
        Ok(
            "streambuf::sputbackc(char)",
        ),
    ),
    (
        "sungetc__9streambuf",
        Ok(
            "streambuf::sungetc(void)",
        ),
    ),
    (
        "get_column__9streambuf",
        Ok(
            "streambuf::get_column(void)",
        ),
    ),
    (
        "set_column__9streambufi",
        Ok(
            "streambuf::set_column(int)",
        ),
    ),
    (
        "flush_all__9streambuf",
        Ok(
            "streambuf::flush_all(void)",
        ),
    ),
    (
        "flush_all_linebuffered__9streambuf",
        Ok(
            "streambuf::flush_all_linebuffered(void)",
        ),
    ),
    (
        "sys_stat__9streambufPv",
        Ok(
            "streambuf::sys_stat(void *)",
        ),
    ),
    (
        "sys_read__9streambufPcl",
        Ok(
            "streambuf::sys_read(char *, long)",
        ),
    ),
    (
        "sys_write__9streambufPCcl",
        Ok(
            "streambuf::sys_write(char const *, long)",
        ),
    ),
    (
        "sys_seek__9streambuflQ23ios8seek_dir",
        Ok(
            "streambuf::sys_seek(long, ios::seek_dir)",
        ),
    ),
    (
        "sys_close__9streambuf",
        Ok(
            "streambuf::sys_close(void)",
        ),
    ),
    (
        "__12streammarkerP9streambuf",
        Ok(
            "streammarker::streammarker(streambuf *)",
        ),
    ),
    (
        "_$_12streammarker",
        Ok(
            "streammarker::~streammarker(void)",
        ),
    ),
    (
        "delta__12streammarkerR12streammarker",
        Ok(
            "streammarker::delta(streammarker &)",
        ),
    ),
    (
        "delta__12streammarker",
        Ok(
            "streammarker::delta(void)",
        ),
    ),
    (
        "seekmark__9streambufR12streammarkeri",
        Ok(
            "streambuf::seekmark(streammarker &, int)",
        ),
    ),
    (
        "unsave_markers__9streambuf",
        Ok(
            "streambuf::unsave_markers(void)",
        ),
    ),
    (
        "readable__3ios",
        Ok(
            "ios::readable(void)",
        ),
    ),
    (
        "writable__3ios",
        Ok(
            "ios::writable(void)",
        ),
    ),
    (
        "is_open__3ios",
        Ok(
            "ios::is_open(void)",
        ),
    ),
    (
        "_GLOBAL_$D$_un_link__9streambuf",
        Ok(
            "global destructors keyed to streambuf::_un_link(void)",
        ),
    ),
    (
        "_GLOBAL_$I$_un_link__9streambuf",
        Ok(
            "global constructors keyed to streambuf::_un_link(void)",
        ),
    ),
    (
        "_$_3ios",
        Ok(
            "ios::~ios(void)",
        ),
    ),
    (
        "__3iosP9streambufP7ostream",
        Ok(
            "ios::ios(streambuf *, ostream *)",
        ),
    ),
    (
        "init__3iosP9streambufP7ostream",
        Ok(
            "ios::init(streambuf *, ostream *)",
        ),
    ),
    (
        "file_ptr__7filebuf",
        Ok(
            "filebuf::file_ptr(void)",
        ),
    ),
    (
        "cur_ptr__7filebuf",
        Ok(
            "filebuf::cur_ptr(void)",
        ),
    ),
    (
        "is_reading__7filebuf",
        Ok(
            "filebuf::is_reading(void)",
        ),
    ),
    (
        "fd__C7filebuf",
        Ok(
            "filebuf::fd(void) const",
        ),
    ),
    (
        "is_open__C7filebuf",
        Ok(
            "filebuf::is_open(void) const",
        ),
    ),
    (
        "__tf7filebuf",
        Ok(
            "filebuf type_info function",
        ),
    ),
    (
        "stossc__9streambuf",
        Ok(
            "streambuf::stossc(void)",
        ),
    ),
    (
        "snextc__9streambuf",
        Ok(
            "streambuf::snextc(void)",
        ),
    ),
    (
        "sgetc__9streambuf",
        Ok(
            "streambuf::sgetc(void)",
        ),
    ),
    (
        "sbumpc__9streambuf",
        Ok(
            "streambuf::sbumpc(void)",
        ),
    ),
    (
        "sputc__9streambufi",
        Ok(
            "streambuf::sputc(int)",
        ),
    ),
    (
        "sgetn__9streambufPcl",
        Ok(
            "streambuf::sgetn(char *, long)",
        ),
    ),
    (
        "padn__9streambufcl",
        Ok(
            "streambuf::padn(char, long)",
        ),
    ),
    (
        "sputn__9streambufPCcl",
        Ok(
            "streambuf::sputn(char const *, long)",
        ),
    ),
    (
        "out_waiting__9streambuf",
        Ok(
            "streambuf::out_waiting(void)",
        ),
    ),
    (
        "in_avail__9streambuf",
        Ok(
            "streambuf::in_avail(void)",
        ),
    ),
    (
        "allocbuf__9streambuf",
        Ok(
            "streambuf::allocbuf(void)",
        ),
    ),
    (
        "allocate__9streambuf",
        Ok(
            "streambuf::allocate(void)",
        ),
    ),
    (
        "linebuffered__9streambufi",
        Ok(
            "streambuf::linebuffered(int)",
        ),
    ),
    (
        "unbuffered__9streambufi",
        Ok(
            "streambuf::unbuffered(int)",
        ),
    ),
    (
        "linebuffered__9streambuf",
        Ok(
            "streambuf::linebuffered(void)",
        ),
    ),
    (
        "unbuffered__9streambuf",
        Ok(
            "streambuf::unbuffered(void)",
        ),
    ),
    (
        "pubseekpos__9streambufli",
        Ok(
            "streambuf::pubseekpos(long, int)",
        ),
    ),
    (
        "pubseekoff__9streambuflQ23ios8seek_diri",
        Ok(
            "streambuf::pubseekoff(long, ios::seek_dir, int)",
        ),
    ),
    (
        "put_mode__9streambuf",
        Ok(
            "streambuf::put_mode(void)",
        ),
    ),
    (
        "have_markers__9streambuf",
        Ok(
            "streambuf::have_markers(void)",
        ),
    ),
    (
        "have_backup__9streambuf",
        Ok(
            "streambuf::have_backup(void)",
        ),
    ),
    (
        "eNptr__9streambuf",
        Ok(
            "streambuf::eNptr(void)",
        ),
    ),
    (
        "Nbase__9streambuf",
        Ok(
            "streambuf::Nbase(void)",
        ),
    ),
    (
        "eBptr__9streambuf",
        Ok(
            "streambuf::eBptr(void)",
        ),
    ),
    (
        "Bptr__9streambuf",
        Ok(
            "streambuf::Bptr(void)",
        ),
    ),
    (
        "Bbase__9streambuf",
        Ok(
            "streambuf::Bbase(void)",
        ),
    ),
    (
        "eGptr__9streambuf",
        Ok(
            "streambuf::eGptr(void)",
        ),
    ),
    (
        "Gbase__9streambuf",
        Ok(
            "streambuf::Gbase(void)",
        ),
    ),
    (
        "in_backup__9streambuf",
        Ok(
            "streambuf::in_backup(void)",
        ),
    ),
    (
        "shortbuf__9streambuf",
        Ok(
            "streambuf::shortbuf(void)",
        ),
    ),
    (
        "setg__9streambufPcT1T1",
        Ok(
            "streambuf::setg(char *, char *, char *)",
        ),
    ),
    (
        "setp__9streambufPcT1",
        Ok(
            "streambuf::setp(char *, char *)",
        ),
    ),
    (
        "pbump__9streambufi",
        Ok(
            "streambuf::pbump(int)",
        ),
    ),
    (
        "gbump__9streambufi",
        Ok(
            "streambuf::gbump(int)",
        ),
    ),
    (
        "xsetflags__9streambufii",
        Ok(
            "streambuf::xsetflags(int, int)",
        ),
    ),
    (
        "xsetflags__9streambufi",
        Ok(
            "streambuf::xsetflags(int)",
        ),
    ),
    (
        "xflags__9streambufi",
        Ok(
            "streambuf::xflags(int)",
        ),
    ),
    (
        "xflags__9streambuf",
        Ok(
            "streambuf::xflags(void)",
        ),
    ),
    (
        "xput_char__9streambufc",
        Ok(
            "streambuf::xput_char(char)",
        ),
    ),
    (
        "blen__C9streambuf",
        Ok(
            "streambuf::blen(void) const",
        ),
    ),
    (
        "ebuf__C9streambuf",
        Ok(
            "streambuf::ebuf(void) const",
        ),
    ),
    (
        "base__C9streambuf",
        Ok(
            "streambuf::base(void) const",
        ),
    ),
    (
        "eback__C9streambuf",
        Ok(
            "streambuf::eback(void) const",
        ),
    ),
    (
        "pbase__C9streambuf",
        Ok(
            "streambuf::pbase(void) const",
        ),
    ),
    (
        "epptr__C9streambuf",
        Ok(
            "streambuf::epptr(void) const",
        ),
    ),
    (
        "egptr__C9streambuf",
        Ok(
            "streambuf::egptr(void) const",
        ),
    ),
    (
        "pptr__C9streambuf",
        Ok(
            "streambuf::pptr(void) const",
        ),
    ),
    (
        "gptr__C9streambuf",
        Ok(
            "streambuf::gptr(void) const",
        ),
    ),
    (
        "xchain__9streambuf",
        Ok(
            "streambuf::xchain(void)",
        ),
    ),
    (
        "_vtable__9streambuf",
        Ok(
            "streambuf::_vtable(void)",
        ),
    ),
    (
        "__tf9streambuf",
        Ok(
            "streambuf type_info function",
        ),
    ),
    (
        "saving__12streammarker",
        Ok(
            "streammarker::saving(void)",
        ),
    ),
    (
        "set_offset__12streammarkeri",
        Ok(
            "streammarker::set_offset(int)",
        ),
    ),
    (
        "__Q23ios4Init",
        Ok(
            "ios::Init::Init(void)",
        ),
    ),
    (
        "unset__3ios11state_value",
        Ok(
            "ios::unset(state_value)",
        ),
    ),
    (
        "sync_with_stdio__3ios",
        Ok(
            "ios::sync_with_stdio(void)",
        ),
    ),
    (
        "rdbuf__3iosP9streambuf",
        Ok(
            "ios::rdbuf(streambuf *)",
        ),
    ),
    (
        "rdbuf__C3ios",
        Ok(
            "ios::rdbuf(void) const",
        ),
    ),
    (
        "exceptions__3iosi",
        Ok(
            "ios::exceptions(int)",
        ),
    ),
    (
        "exceptions__C3ios",
        Ok(
            "ios::exceptions(void) const",
        ),
    ),
    (
        "__nt__C3ios",
        Ok(
            "ios::operator!(void) const",
        ),
    ),
    (
        "__opPv__C3ios",
        Ok(
            "ios::operator void *(void) const",
        ),
    ),
    (
        "rdstate__C3ios",
        Ok(
            "ios::rdstate(void) const",
        ),
    ),
    (
        "bad__C3ios",
        Ok(
            "ios::bad(void) const",
        ),
    ),
    (
        "fail__C3ios",
        Ok(
            "ios::fail(void) const",
        ),
    ),
    (
        "eof__C3ios",
        Ok(
            "ios::eof(void) const",
        ),
    ),
    (
        "good__C3ios",
        Ok(
            "ios::good(void) const",
        ),
    ),
    (
        "setstate__3iosi",
        Ok(
            "ios::setstate(int)",
        ),
    ),
    (
        "set__3iosi",
        Ok(
            "ios::set(int)",
        ),
    ),
    (
        "clear__3iosi",
        Ok(
            "ios::clear(int)",
        ),
    ),
    (
        "_throw_failure__C3ios",
        Ok(
            "ios::_throw_failure(void) const",
        ),
    ),
    (
        "width__3iosi",
        Ok(
            "ios::width(int)",
        ),
    ),
    (
        "width__C3ios",
        Ok(
            "ios::width(void) const",
        ),
    ),
    (
        "unsetf__3iosUl",
        Ok(
            "ios::unsetf(unsigned long)",
        ),
    ),
    (
        "setf__3iosUlUl",
        Ok(
            "ios::setf(unsigned long, unsigned long)",
        ),
    ),
    (
        "setf__3iosUl",
        Ok(
            "ios::setf(unsigned long)",
        ),
    ),
    (
        "precision__3iosi",
        Ok(
            "ios::precision(int)",
        ),
    ),
    (
        "precision__C3ios",
        Ok(
            "ios::precision(void) const",
        ),
    ),
    (
        "flags__3iosUl",
        Ok(
            "ios::flags(unsigned long)",
        ),
    ),
    (
        "flags__C3ios",
        Ok(
            "ios::flags(void) const",
        ),
    ),
    (
        "fill__3ioss",
        Ok(
            "ios::fill(short)",
        ),
    ),
    (
        "fill__C3ios",
        Ok(
            "ios::fill(void) const",
        ),
    ),
    (
        "tie__3iosP7ostream",
        Ok(
            "ios::tie(ostream *)",
        ),
    ),
    (
        "tie__C3ios",
        Ok(
            "ios::tie(void) const",
        ),
    ),
    (
        "__tf3ios",
        Ok(
            "ios type_info function",
        ),
    ),
    (
        "__tf11_ios_fields",
        Ok(
            "_ios_fields type_info function",
        ),
    ),
    (
        "__tf8_IO_FILE",
        Ok(
            "_IO_FILE type_info function",
        ),
    ),
    (
        "_IO_un_link",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_link_in",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_switch_to_main_get_area",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_switch_to_backup_area",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_switch_to_get_mode",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_free_backup_area",
        Err(
            NotMangled,
        ),
    ),
    (
        "__overflow",
        Err(
            InvalidSpecialMethod(
                "overflow",
            ),
        ),
    ),
    (
        "__underflow",
        Err(
            InvalidSpecialMethod(
                "underflow",
            ),
        ),
    ),
    (
        "__uflow",
        Err(
            InvalidSpecialMethod(
                "uflow",
            ),
        ),
    ),
    (
        "_IO_setb",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_doallocbuf",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_default_uflow",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_default_xsputn",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_sgetn",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_default_xsgetn",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_default_setbuf",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_default_seekpos",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_default_doallocate",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_init",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_default_finish",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_sputbackc",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_sungetc",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_adjust_column",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_flush_all",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_flush_all_linebuffered",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_cleanup",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_init_marker",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_remove_marker",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_marker_difference",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_marker_delta",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_seekmark",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_unsave_markers",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_default_pbackfail",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_vfscanf",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_padn",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_getline_info",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_seekoff",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_seekpos",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_outfloat",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_ungetc",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_getc",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_putc",
        Err(
            NotMangled,
        ),
    ),
    (
        "init__7filebuf",
        Ok(
            "filebuf::init(void)",
        ),
    ),
    (
        "__7filebuf",
        Ok(
            "filebuf::filebuf(void)",
        ),
    ),
    (
        "__7filebufi",
        Ok(
            "filebuf::filebuf(int)",
        ),
    ),
    (
        "__7filebufiPci",
        Ok(
            "filebuf::filebuf(int, char *, int)",
        ),
    ),
    (
        "_$_7filebuf",
        Ok(
            "filebuf::~filebuf(void)",
        ),
    ),
    (
        "open__7filebufPCcii",
        Ok(
            "filebuf::open(char const *, int, int)",
        ),
    ),
    (
        "open__7filebufPCcT1",
        Ok(
            "filebuf::open(char const *, char const *)",
        ),
    ),
    (
        "attach__7filebufi",
        Ok(
            "filebuf::attach(int)",
        ),
    ),
    (
        "setbuf__7filebufPci",
        Ok(
            "filebuf::setbuf(char *, int)",
        ),
    ),
    (
        "doallocate__7filebuf",
        Ok(
            "filebuf::doallocate(void)",
        ),
    ),
    (
        "overflow__7filebufi",
        Ok(
            "filebuf::overflow(int)",
        ),
    ),
    (
        "underflow__7filebuf",
        Ok(
            "filebuf::underflow(void)",
        ),
    ),
    (
        "sync__7filebuf",
        Ok(
            "filebuf::sync(void)",
        ),
    ),
    (
        "seekoff__7filebuflQ23ios8seek_diri",
        Ok(
            "filebuf::seekoff(long, ios::seek_dir, int)",
        ),
    ),
    (
        "close__7filebuf",
        Ok(
            "filebuf::close(void)",
        ),
    ),
    (
        "sys_read__7filebufPcl",
        Ok(
            "filebuf::sys_read(char *, long)",
        ),
    ),
    (
        "sys_seek__7filebuflQ23ios8seek_dir",
        Ok(
            "filebuf::sys_seek(long, ios::seek_dir)",
        ),
    ),
    (
        "sys_write__7filebufPCcl",
        Ok(
            "filebuf::sys_write(char const *, long)",
        ),
    ),
    (
        "sys_stat__7filebufPv",
        Ok(
            "filebuf::sys_stat(void *)",
        ),
    ),
    (
        "sys_close__7filebuf",
        Ok(
            "filebuf::sys_close(void)",
        ),
    ),
    (
        "xsputn__7filebufPCcl",
        Ok(
            "filebuf::xsputn(char const *, long)",
        ),
    ),
    (
        "xsgetn__7filebufPcl",
        Ok(
            "filebuf::xsgetn(char *, long)",
        ),
    ),
    (
        "__as__22_IO_istream_withassignR7istream",
        Ok(
            "_IO_istream_withassign::operator=(istream &)",
        ),
    ),
    (
        "__as__22_IO_ostream_withassignR7ostream",
        Ok(
            "_IO_ostream_withassign::operator=(ostream &)",
        ),
    ),
    (
        "_GLOBAL_$I$_IO_stdin_",
        Ok(
            "global constructors keyed to _IO_stdin_",
        ),
    ),
    (
        "_IO_file_doallocate",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_strtod",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_dtoa",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_init",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_close_it",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_finish",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_fopen",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_attach",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_setbuf",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_do_write",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_underflow",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_overflow",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_sync",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_seekoff",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_read",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_seek",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_stat",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_close",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_write",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_file_xsputn",
        Err(
            NotMangled,
        ),
    ),
    (
        "__8stdiobufP7__sFILE",
        Ok(
            "stdiobuf::stdiobuf(__sFILE *)",
        ),
    ),
    (
        "_$_8stdiobuf",
        Ok(
            "stdiobuf::~stdiobuf(void)",
        ),
    ),
    (
        "sys_read__8stdiobufPcl",
        Ok(
            "stdiobuf::sys_read(char *, long)",
        ),
    ),
    (
        "sys_write__8stdiobufPCcl",
        Ok(
            "stdiobuf::sys_write(char const *, long)",
        ),
    ),
    (
        "sys_seek__8stdiobuflQ23ios8seek_dir",
        Ok(
            "stdiobuf::sys_seek(long, ios::seek_dir)",
        ),
    ),
    (
        "sys_close__8stdiobuf",
        Ok(
            "stdiobuf::sys_close(void)",
        ),
    ),
    (
        "sync__8stdiobuf",
        Ok(
            "stdiobuf::sync(void)",
        ),
    ),
    (
        "overflow__8stdiobufi",
        Ok(
            "stdiobuf::overflow(int)",
        ),
    ),
    (
        "xsputn__8stdiobufPCcl",
        Ok(
            "stdiobuf::xsputn(char const *, long)",
        ),
    ),
    (
        "buffered__8stdiobufi",
        Ok(
            "stdiobuf::buffered(int)",
        ),
    ),
    (
        "buffered__12ostdiostreami",
        Ok(
            "ostdiostream::buffered(int)",
        ),
    ),
    (
        "buffered__C12ostdiostream",
        Ok(
            "ostdiostream::buffered(void) const",
        ),
    ),
    (
        "rdbuf__12ostdiostream",
        Ok(
            "ostdiostream::rdbuf(void)",
        ),
    ),
    (
        "__12ostdiostreamiP7__sFILE",
        Ok(
            "ostdiostream::ostdiostream(int, __sFILE *)",
        ),
    ),
    (
        "__tf12ostdiostream",
        Ok(
            "ostdiostream type_info function",
        ),
    ),
    (
        "_$_12ostdiostream",
        Ok(
            "ostdiostream::~ostdiostream(void)",
        ),
    ),
    (
        "buffered__12istdiostreami",
        Ok(
            "istdiostream::buffered(int)",
        ),
    ),
    (
        "buffered__C12istdiostream",
        Ok(
            "istdiostream::buffered(void) const",
        ),
    ),
    (
        "rdbuf__12istdiostream",
        Ok(
            "istdiostream::rdbuf(void)",
        ),
    ),
    (
        "__12istdiostreamiP7__sFILE",
        Ok(
            "istdiostream::istdiostream(int, __sFILE *)",
        ),
    ),
    (
        "__tf12istdiostream",
        Ok(
            "istdiostream type_info function",
        ),
    ),
    (
        "_$_12istdiostream",
        Ok(
            "istdiostream::~istdiostream(void)",
        ),
    ),
    (
        "buffered__C8stdiobuf",
        Ok(
            "stdiobuf::buffered(void) const",
        ),
    ),
    (
        "stdiofile__C8stdiobuf",
        Ok(
            "stdiobuf::stdiofile(void) const",
        ),
    ),
    (
        "__tf8stdiobuf",
        Ok(
            "stdiobuf type_info function",
        ),
    ),
    (
        "sceGsResetGraph",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsGetGParam",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsResetPath",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsSetDefDBuff",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsSwapDBuff",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsSyncV",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsSyncPath",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsSetDefAlphaEnv",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsPutIMR",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsSetHalfOffset",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsGetIMR",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsSetDefDispEnv",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsPutDispEnv",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGszbufaddr",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsSetDefDrawEnv",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsSetDefClear",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGsPutDrawEnv",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDmaGetChan",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDmaReset",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDmaPutEnv",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDmaGetEnv",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDmaSend",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDmaSync",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDmaPause",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevVu0Reset",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevVu0Pause",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevVif0Reset",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsOpen",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsClose",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsDraw",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsClear",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsSetColor",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsPrintf",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsLocate",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsPut",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsClearBox",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsMove",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDevConsRollup",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGifPkInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGifPkReset",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGifPkTerminate",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGifPkCnt",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGifPkEnd",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGifPkCloseGifTag",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceGifPkAddGsData",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkReset",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkTerminate",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkCnt",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkEnd",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkOpenDirectCode",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkCloseDirectCode",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkOpenGifTag",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkCloseGifTag",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkReserve",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkAlign",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkAddCode",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceVif1PkAddGsData",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadEnd",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadPortOpen",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadRead",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadGetState",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadGetReqState",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadInfoAct",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadInfoMode",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadSetMainMode",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadSetActDirect",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadSetActAlign",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadInfoPressMode",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadEnterPressMode",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePadGetSlotMax",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceIpuSync",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceIpuInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSdRemoteInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSdRemote",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdDelayThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_cd_callback",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_cd_read_intr",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_ncmd_prechk",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdNcmdDiskReady",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdSync",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdSyncS",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_scmd_prechk",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdDiskReady",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdMmode",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdRead",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdReadIOPm",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdGetDiskType",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdGetError",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdStatus",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdReadClock",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdTrayReq",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMtapInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMtapPortOpen",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMtapGetConnection",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMtapGetModVersion",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceScfGetLanguage",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceScfGetTimeZone",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceScfGetSummerTime",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceScfGetLocalTimefromRTC",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcGetSlotMax",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcOpen",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcMkdir",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcClose",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcSeek",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcRead",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcWrite",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcSync",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcGetInfo",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcGetDir",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcFormat",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcDelete",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcFlush",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceMcRename",
        Err(
            NotMangled,
        ),
    ),
    (
        "SetGsCrt",
        Err(
            NotMangled,
        ),
    ),
    (
        "_Exit",
        Err(
            NotMangled,
        ),
    ),
    (
        "_LoadExecPS2",
        Err(
            NotMangled,
        ),
    ),
    (
        "AddIntcHandler",
        Err(
            NotMangled,
        ),
    ),
    (
        "RemoveIntcHandler",
        Err(
            NotMangled,
        ),
    ),
    (
        "AddDmacHandler",
        Err(
            NotMangled,
        ),
    ),
    (
        "AddDmacHandler2",
        Err(
            NotMangled,
        ),
    ),
    (
        "RemoveDmacHandler",
        Err(
            NotMangled,
        ),
    ),
    (
        "_EnableIntc",
        Err(
            NotMangled,
        ),
    ),
    (
        "_DisableIntc",
        Err(
            NotMangled,
        ),
    ),
    (
        "_EnableDmac",
        Err(
            NotMangled,
        ),
    ),
    (
        "_DisableDmac",
        Err(
            NotMangled,
        ),
    ),
    (
        "SetAlarm",
        Err(
            NotMangled,
        ),
    ),
    (
        "ReleaseAlarm",
        Err(
            NotMangled,
        ),
    ),
    (
        "iSetAlarm",
        Err(
            NotMangled,
        ),
    ),
    (
        "CreateThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "DeleteThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "StartThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "ExitDeleteThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "TerminateThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "ChangeThreadPriority",
        Err(
            NotMangled,
        ),
    ),
    (
        "RotateThreadReadyQueue",
        Err(
            NotMangled,
        ),
    ),
    (
        "GetThreadId",
        Err(
            NotMangled,
        ),
    ),
    (
        "ReferThreadStatus",
        Err(
            NotMangled,
        ),
    ),
    (
        "SleepThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "WakeupThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "_iWakeupThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "SuspendThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "ResumeThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "EndOfHeap",
        Err(
            NotMangled,
        ),
    ),
    (
        "CreateSema",
        Err(
            NotMangled,
        ),
    ),
    (
        "DeleteSema",
        Err(
            NotMangled,
        ),
    ),
    (
        "SignalSema",
        Err(
            NotMangled,
        ),
    ),
    (
        "iSignalSema",
        Err(
            NotMangled,
        ),
    ),
    (
        "WaitSema",
        Err(
            NotMangled,
        ),
    ),
    (
        "PollSema",
        Err(
            NotMangled,
        ),
    ),
    (
        "SetOsdConfigParam",
        Err(
            NotMangled,
        ),
    ),
    (
        "GetOsdConfigParam",
        Err(
            NotMangled,
        ),
    ),
    (
        "FlushCache",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifStopDma",
        Err(
            NotMangled,
        ),
    ),
    (
        "GetOsdConfigParam2",
        Err(
            NotMangled,
        ),
    ),
    (
        "GsGetIMR",
        Err(
            NotMangled,
        ),
    ),
    (
        "GsPutIMR",
        Err(
            NotMangled,
        ),
    ),
    (
        "SetVSyncFlag",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifDmaStat",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifSetDma",
        Err(
            NotMangled,
        ),
    ),
    (
        "isceSifSetDma",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifSetDChain",
        Err(
            NotMangled,
        ),
    ),
    (
        "isceSifSetDChain",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifSetReg",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifGetReg",
        Err(
            NotMangled,
        ),
    ),
    (
        "Deci2Call",
        Err(
            NotMangled,
        ),
    ),
    (
        "GetMemorySize",
        Err(
            NotMangled,
        ),
    ),
    (
        "_InitTLB",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceResetttyinit",
        Err(
            NotMangled,
        ),
    ),
    (
        "VSync",
        Err(
            NotMangled,
        ),
    ),
    (
        "VSync2",
        Err(
            NotMangled,
        ),
    ),
    (
        "write",
        Err(
            NotMangled,
        ),
    ),
    (
        "read",
        Err(
            NotMangled,
        ),
    ),
    (
        "open",
        Err(
            NotMangled,
        ),
    ),
    (
        "close",
        Err(
            NotMangled,
        ),
    ),
    (
        "lseek",
        Err(
            NotMangled,
        ),
    ),
    (
        "sbrk",
        Err(
            NotMangled,
        ),
    ),
    (
        "isatty",
        Err(
            NotMangled,
        ),
    ),
    (
        "fstat",
        Err(
            NotMangled,
        ),
    ),
    (
        "getpid",
        Err(
            NotMangled,
        ),
    ),
    (
        "kill",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceSDC",
        Err(
            NotMangled,
        ),
    ),
    (
        "SyncDCache",
        Err(
            NotMangled,
        ),
    ),
    (
        "DisableIntc",
        Err(
            NotMangled,
        ),
    ),
    (
        "EnableIntc",
        Err(
            NotMangled,
        ),
    ),
    (
        "DisableDmac",
        Err(
            NotMangled,
        ),
    ),
    (
        "EnableDmac",
        Err(
            NotMangled,
        ),
    ),
    (
        "InitThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "iWakeupThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "iRotateThreadReadyQueue",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceTtyWrite",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceTtyRead",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceTtyInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "_printf",
        Err(
            NotMangled,
        ),
    ),
    (
        "kprintf",
        Err(
            NotMangled,
        ),
    ),
    (
        "scePrintf",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifGetSreg",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifInitCmd",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifExitCmd",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifAddCmdHandler",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifRemoveCmdHandler",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifSendCmd",
        Err(
            NotMangled,
        ),
    ),
    (
        "isceSifSendCmd",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifWriteBackDCache",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifInitRpc",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifExitRpc",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifGetOtherData",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifBindRpc",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifCallRpc",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifCheckStatRpc",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifSetRpcQueue",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifRegisterRpc",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifGetNextRequest",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifExecRequest",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifRpcLoop",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceFsInit",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceOpen",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceClose",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceLseek",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceRead",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifInitIopHeap",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifAllocIopHeap",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifFreeSysMemory",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifFreeIopHeap",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifQueryMaxFreeMemSize",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifLoadModule",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifResetIop",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifSyncIop",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceSifRebootIop",
        Err(
            NotMangled,
        ),
    ),
    (
        "DIntr",
        Err(
            NotMangled,
        ),
    ),
    (
        "EIntr",
        Err(
            NotMangled,
        ),
    ),
    (
        "_InitSys",
        Err(
            NotMangled,
        ),
    ),
    (
        "InitExecPS2",
        Err(
            NotMangled,
        ),
    ),
    (
        "LoadExecPS2",
        Err(
            NotMangled,
        ),
    ),
    (
        "Exit",
        Err(
            NotMangled,
        ),
    ),
    (
        "InitAlarm",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDeci2Open",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDeci2ReqSend",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDeci2Poll",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDeci2ExRecv",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceDeci2ExSend",
        Err(
            NotMangled,
        ),
    ),
    (
        "kputs",
        Err(
            NotMangled,
        ),
    ),
    (
        "InitTLBFunctions",
        Err(
            NotMangled,
        ),
    ),
    (
        "InitTLB",
        Err(
            NotMangled,
        ),
    ),
    (
        "_xlaunch",
        Err(
            NotMangled,
        ),
    ),
    (
        "_kExitTLBHandler",
        Err(
            NotMangled,
        ),
    ),
    (
        "cos",
        Err(
            NotMangled,
        ),
    ),
    (
        "atanf",
        Err(
            NotMangled,
        ),
    ),
    (
        "ceilf",
        Err(
            NotMangled,
        ),
    ),
    (
        "cosf",
        Err(
            NotMangled,
        ),
    ),
    (
        "fabsf",
        Err(
            NotMangled,
        ),
    ),
    (
        "floorf",
        Err(
            NotMangled,
        ),
    ),
    (
        "tanf",
        Err(
            NotMangled,
        ),
    ),
    (
        "pow",
        Err(
            NotMangled,
        ),
    ),
    (
        "acosf",
        Err(
            NotMangled,
        ),
    ),
    (
        "asinf",
        Err(
            NotMangled,
        ),
    ),
    (
        "atan2f",
        Err(
            NotMangled,
        ),
    ),
    (
        "expf",
        Err(
            NotMangled,
        ),
    ),
    (
        "fmodf",
        Err(
            NotMangled,
        ),
    ),
    (
        "logf",
        Err(
            NotMangled,
        ),
    ),
    (
        "powf",
        Err(
            NotMangled,
        ),
    ),
    (
        "__ieee754_pow",
        Err(
            InvalidSpecialMethod(
                "ieee754_pow",
            ),
        ),
    ),
    (
        "__ieee754_rem_pio2",
        Err(
            InvalidSpecialMethod(
                "ieee754_rem_pio2",
            ),
        ),
    ),
    (
        "__ieee754_sqrt",
        Err(
            InvalidSpecialMethod(
                "ieee754_sqrt",
            ),
        ),
    ),
    (
        "__ieee754_acosf",
        Err(
            InvalidSpecialMethod(
                "ieee754_acosf",
            ),
        ),
    ),
    (
        "__ieee754_asinf",
        Err(
            InvalidSpecialMethod(
                "ieee754_asinf",
            ),
        ),
    ),
    (
        "__ieee754_atan2f",
        Err(
            InvalidSpecialMethod(
                "ieee754_atan2f",
            ),
        ),
    ),
    (
        "__ieee754_expf",
        Err(
            InvalidSpecialMethod(
                "ieee754_expf",
            ),
        ),
    ),
    (
        "__ieee754_fmodf",
        Err(
            InvalidSpecialMethod(
                "ieee754_fmodf",
            ),
        ),
    ),
    (
        "__ieee754_logf",
        Err(
            InvalidSpecialMethod(
                "ieee754_logf",
            ),
        ),
    ),
    (
        "__ieee754_powf",
        Err(
            InvalidSpecialMethod(
                "ieee754_powf",
            ),
        ),
    ),
    (
        "__ieee754_rem_pio2f",
        Err(
            InvalidSpecialMethod(
                "ieee754_rem_pio2f",
            ),
        ),
    ),
    (
        "__ieee754_sqrtf",
        Err(
            InvalidSpecialMethod(
                "ieee754_sqrtf",
            ),
        ),
    ),
    (
        "__kernel_cos",
        Err(
            InvalidSpecialMethod(
                "kernel_cos",
            ),
        ),
    ),
    (
        "__kernel_rem_pio2",
        Err(
            InvalidSpecialMethod(
                "kernel_rem_pio2",
            ),
        ),
    ),
    (
        "__kernel_sin",
        Err(
            InvalidSpecialMethod(
                "kernel_sin",
            ),
        ),
    ),
    (
        "__kernel_cosf",
        Err(
            InvalidSpecialMethod(
                "kernel_cosf",
            ),
        ),
    ),
    (
        "__kernel_rem_pio2f",
        Err(
            InvalidSpecialMethod(
                "kernel_rem_pio2f",
            ),
        ),
    ),
    (
        "__kernel_sinf",
        Err(
            InvalidSpecialMethod(
                "kernel_sinf",
            ),
        ),
    ),
    (
        "__kernel_tanf",
        Err(
            InvalidSpecialMethod(
                "kernel_tanf",
            ),
        ),
    ),
    (
        "fabs",
        Err(
            NotMangled,
        ),
    ),
    (
        "finite",
        Err(
            NotMangled,
        ),
    ),
    (
        "floor",
        Err(
            NotMangled,
        ),
    ),
    (
        "matherr",
        Err(
            NotMangled,
        ),
    ),
    (
        "rint",
        Err(
            NotMangled,
        ),
    ),
    (
        "scalbn",
        Err(
            NotMangled,
        ),
    ),
    (
        "finitef",
        Err(
            NotMangled,
        ),
    ),
    (
        "scalbnf",
        Err(
            NotMangled,
        ),
    ),
    (
        "copysign",
        Err(
            NotMangled,
        ),
    ),
    (
        "copysignf",
        Err(
            NotMangled,
        ),
    ),
    (
        "__errno",
        Err(
            InvalidSpecialMethod(
                "errno",
            ),
        ),
    ),
    (
        "fileno",
        Err(
            NotMangled,
        ),
    ),
    (
        "__srget",
        Err(
            InvalidSpecialMethod(
                "srget",
            ),
        ),
    ),
    (
        "_strtoul_r",
        Err(
            NotMangled,
        ),
    ),
    (
        "strtoul",
        Err(
            NotMangled,
        ),
    ),
    (
        "__do_global_ctors",
        Err(
            InvalidSpecialMethod(
                "do_global_ctors",
            ),
        ),
    ),
    (
        "__main",
        Err(
            InvalidSpecialMethod(
                "main",
            ),
        ),
    ),
    (
        "__divdi3",
        Err(
            InvalidSpecialMethod(
                "divdi3",
            ),
        ),
    ),
    (
        "__default_terminate",
        Err(
            InvalidSpecialMethod(
                "default_terminate",
            ),
        ),
    ),
    (
        "__terminate",
        Err(
            InvalidCustomNameOnTemplate(
                "erminate",
            ),
        ),
    ),
    (
        "__throw_type_match",
        Err(
            InvalidCustomNameOnTemplate(
                "hrow_type_match",
            ),
        ),
    ),
    (
        "__empty",
        Err(
            InvalidSpecialMethod(
                "empty",
            ),
        ),
    ),
    (
        "__get_eh_context",
        Err(
            InvalidSpecialMethod(
                "get_eh_context",
            ),
        ),
    ),
    (
        "__get_eh_info",
        Err(
            InvalidSpecialMethod(
                "get_eh_info",
            ),
        ),
    ),
    (
        "__get_dynamic_handler_chain",
        Err(
            InvalidSpecialMethod(
                "get_dynamic_handler_chain",
            ),
        ),
    ),
    (
        "__sjthrow",
        Err(
            InvalidSpecialMethod(
                "sjthrow",
            ),
        ),
    ),
    (
        "__sjpopnthrow",
        Err(
            InvalidSpecialMethod(
                "sjpopnthrow",
            ),
        ),
    ),
    (
        "__eh_rtime_match",
        Err(
            InvalidSpecialMethod(
                "eh_rtime_match",
            ),
        ),
    ),
    (
        "__get_eh_table_version",
        Err(
            InvalidSpecialMethod(
                "get_eh_table_version",
            ),
        ),
    ),
    (
        "__get_eh_table_language",
        Err(
            InvalidSpecialMethod(
                "get_eh_table_language",
            ),
        ),
    ),
    (
        "__unwinding_cleanup",
        Err(
            InvalidSpecialMethod(
                "unwinding_cleanup",
            ),
        ),
    ),
    (
        "__throw",
        Err(
            InvalidCustomNameOnTemplate(
                "hrow",
            ),
        ),
    ),
    (
        "__rethrow",
        Err(
            InvalidSpecialMethod(
                "rethrow",
            ),
        ),
    ),
    (
        "__fixdfdi",
        Err(
            InvalidSpecialMethod(
                "fixdfdi",
            ),
        ),
    ),
    (
        "__fixunsdfdi",
        Err(
            InvalidSpecialMethod(
                "fixunsdfdi",
            ),
        ),
    ),
    (
        "__floatdidf",
        Err(
            InvalidSpecialMethod(
                "floatdidf",
            ),
        ),
    ),
    (
        "__moddi3",
        Err(
            InvalidSpecialMethod(
                "moddi3",
            ),
        ),
    ),
    (
        "__muldi3",
        Err(
            InvalidSpecialMethod(
                "muldi3",
            ),
        ),
    ),
    (
        "__pure_virtual",
        Err(
            InvalidSpecialMethod(
                "pure_virtual",
            ),
        ),
    ),
    (
        "__udivdi3",
        Err(
            InvalidSpecialMethod(
                "udivdi3",
            ),
        ),
    ),
    (
        "__umoddi3",
        Err(
            InvalidSpecialMethod(
                "umoddi3",
            ),
        ),
    ),
    (
        "__pack_d",
        Err(
            InvalidSpecialMethod(
                "pack_d",
            ),
        ),
    ),
    (
        "__unpack_d",
        Err(
            InvalidSpecialMethod(
                "unpack_d",
            ),
        ),
    ),
    (
        "dpadd",
        Err(
            NotMangled,
        ),
    ),
    (
        "dpsub",
        Err(
            NotMangled,
        ),
    ),
    (
        "dpmul",
        Err(
            NotMangled,
        ),
    ),
    (
        "dpdiv",
        Err(
            NotMangled,
        ),
    ),
    (
        "__fpcmp_parts_d",
        Err(
            InvalidSpecialMethod(
                "fpcmp_parts_d",
            ),
        ),
    ),
    (
        "dpcmp",
        Err(
            NotMangled,
        ),
    ),
    (
        "litodp",
        Err(
            NotMangled,
        ),
    ),
    (
        "dptoli",
        Err(
            NotMangled,
        ),
    ),
    (
        "dptoul",
        Err(
            NotMangled,
        ),
    ),
    (
        "__make_dp",
        Err(
            InvalidSpecialMethod(
                "make_dp",
            ),
        ),
    ),
    (
        "dptofp",
        Err(
            NotMangled,
        ),
    ),
    (
        "terminate__Fv",
        Ok(
            "terminate(void)",
        ),
    ),
    (
        "__default_unexpected__Fv",
        Ok(
            "__default_unexpected(void)",
        ),
    ),
    (
        "set_terminate__FPFv_v",
        Ok(
            "set_terminate(void (*)(void))",
        ),
    ),
    (
        "set_unexpected__FPFv_v",
        Ok(
            "set_unexpected(void (*)(void))",
        ),
    ),
    (
        "unexpected__Fv",
        Ok(
            "unexpected(void)",
        ),
    ),
    (
        "__cp_exception_info",
        Err(
            InvalidSpecialMethod(
                "cp_exception_info",
            ),
        ),
    ),
    (
        "__cp_eh_info",
        Err(
            InvalidSpecialMethod(
                "cp_eh_info",
            ),
        ),
    ),
    (
        "__start_cp_handler",
        Err(
            InvalidSpecialMethod(
                "start_cp_handler",
            ),
        ),
    ),
    (
        "__eh_alloc",
        Err(
            InvalidSpecialMethod(
                "eh_alloc",
            ),
        ),
    ),
    (
        "__eh_free",
        Err(
            InvalidSpecialMethod(
                "eh_free",
            ),
        ),
    ),
    (
        "__cplus_type_matcher",
        Err(
            InvalidSpecialMethod(
                "cplus_type_matcher",
            ),
        ),
    ),
    (
        "__cp_push_exception",
        Err(
            InvalidSpecialMethod(
                "cp_push_exception",
            ),
        ),
    ),
    (
        "__cp_pop_exception",
        Err(
            InvalidSpecialMethod(
                "cp_pop_exception",
            ),
        ),
    ),
    (
        "__uncatch_exception",
        Err(
            InvalidSpecialMethod(
                "uncatch_exception",
            ),
        ),
    ),
    (
        "__check_eh_spec",
        Err(
            InvalidSpecialMethod(
                "check_eh_spec",
            ),
        ),
    ),
    (
        "__throw_bad_cast",
        Err(
            InvalidCustomNameOnTemplate(
                "hrow_bad_cast",
            ),
        ),
    ),
    (
        "__throw_bad_typeid",
        Err(
            InvalidCustomNameOnTemplate(
                "hrow_bad_typeid",
            ),
        ),
    ),
    (
        "uncaught_exception__Fv",
        Ok(
            "uncaught_exception(void)",
        ),
    ),
    (
        "what__C9exception",
        Ok(
            "exception::what(void) const",
        ),
    ),
    (
        "_$_13bad_exception",
        Ok(
            "bad_exception::~bad_exception(void)",
        ),
    ),
    (
        "__13bad_exception",
        Ok(
            "bad_exception::bad_exception(void)",
        ),
    ),
    (
        "__tf13bad_exception",
        Ok(
            "bad_exception type_info function",
        ),
    ),
    (
        "_$_9exception",
        Ok(
            "exception::~exception(void)",
        ),
    ),
    (
        "__9exception",
        Ok(
            "exception::exception(void)",
        ),
    ),
    (
        "__tf9exception",
        Ok(
            "exception type_info function",
        ),
    ),
    (
        "__pack_f",
        Err(
            InvalidSpecialMethod(
                "pack_f",
            ),
        ),
    ),
    (
        "__unpack_f",
        Err(
            InvalidSpecialMethod(
                "unpack_f",
            ),
        ),
    ),
    (
        "fptoui",
        Err(
            NotMangled,
        ),
    ),
    (
        "__make_fp",
        Err(
            InvalidSpecialMethod(
                "make_fp",
            ),
        ),
    ),
    (
        "fptodp",
        Err(
            NotMangled,
        ),
    ),
    (
        "__register_frame_info_table",
        Err(
            InvalidSpecialMethod(
                "register_frame_info_table",
            ),
        ),
    ),
    (
        "__deregister_frame_info",
        Err(
            InvalidSpecialMethod(
                "deregister_frame_info",
            ),
        ),
    ),
    (
        "__frame_state_for",
        Err(
            InvalidSpecialMethod(
                "frame_state_for",
            ),
        ),
    ),
    (
        "_$_9type_info",
        Ok(
            "type_info::~type_info(void)",
        ),
    ),
    (
        "__eq__C9type_infoRC9type_info",
        Ok(
            "type_info::operator==(type_info const &) const",
        ),
    ),
    (
        "__rtti_class",
        Err(
            InvalidSpecialMethod(
                "rtti_class",
            ),
        ),
    ),
    (
        "__rtti_si",
        Err(
            InvalidSpecialMethod(
                "rtti_si",
            ),
        ),
    ),
    (
        "__rtti_user",
        Err(
            InvalidSpecialMethod(
                "rtti_user",
            ),
        ),
    ),
    (
        "dcast__C16__user_type_infoRC9type_infoiPvPC9type_infoT3",
        Ok(
            "__user_type_info::dcast(type_info const &, int, void *, type_info const *, void *) const",
        ),
    ),
    (
        "dcast__C14__si_type_infoRC9type_infoiPvPC9type_infoT3",
        Ok(
            "__si_type_info::dcast(type_info const &, int, void *, type_info const *, void *) const",
        ),
    ),
    (
        "dcast__C17__class_type_infoRC9type_infoiPvPC9type_infoT3",
        Ok(
            "__class_type_info::dcast(type_info const &, int, void *, type_info const *, void *) const",
        ),
    ),
    (
        "__17__class_type_infoPCcPCQ217__class_type_info9base_infoUi",
        Ok(
            "__class_type_info::__class_type_info(char const *, __class_type_info::base_info const *, unsigned int)",
        ),
    ),
    (
        "__tf17__class_type_info",
        Ok(
            "__class_type_info type_info function",
        ),
    ),
    (
        "_$_17__class_type_info",
        Ok(
            "__class_type_info::~__class_type_info(void)",
        ),
    ),
    (
        "__14__si_type_infoPCcRC16__user_type_info",
        Ok(
            "__si_type_info::__si_type_info(char const *, __user_type_info const &)",
        ),
    ),
    (
        "__tf14__si_type_info",
        Ok(
            "__si_type_info type_info function",
        ),
    ),
    (
        "_$_14__si_type_info",
        Ok(
            "__si_type_info::~__si_type_info(void)",
        ),
    ),
    (
        "__16__user_type_infoPCc",
        Ok(
            "__user_type_info::__user_type_info(char const *)",
        ),
    ),
    (
        "__tf16__user_type_info",
        Ok(
            "__user_type_info type_info function",
        ),
    ),
    (
        "_$_16__user_type_info",
        Ok(
            "__user_type_info::~__user_type_info(void)",
        ),
    ),
    (
        "_$_10bad_typeid",
        Ok(
            "bad_typeid::~bad_typeid(void)",
        ),
    ),
    (
        "__10bad_typeid",
        Ok(
            "bad_typeid::bad_typeid(void)",
        ),
    ),
    (
        "__tf10bad_typeid",
        Ok(
            "bad_typeid type_info function",
        ),
    ),
    (
        "_$_8bad_cast",
        Ok(
            "bad_cast::~bad_cast(void)",
        ),
    ),
    (
        "__8bad_cast",
        Ok(
            "bad_cast::bad_cast(void)",
        ),
    ),
    (
        "__tf8bad_cast",
        Ok(
            "bad_cast type_info function",
        ),
    ),
    (
        "__ne__C9type_infoRC9type_info",
        Ok(
            "type_info::operator!=(type_info const &) const",
        ),
    ),
    (
        "name__C9type_info",
        Ok(
            "type_info::name(void) const",
        ),
    ),
    (
        "__9type_infoPCc",
        Ok(
            "type_info::type_info(char const *)",
        ),
    ),
    (
        "__tf9type_info",
        Ok(
            "type_info type_info function",
        ),
    ),
    (
        "before__C9type_infoRC9type_info",
        Ok(
            "type_info::before(type_info const &) const",
        ),
    ),
    (
        "__throw_type_match_rtti",
        Err(
            InvalidCustomNameOnTemplate(
                "hrow_type_match_rtti",
            ),
        ),
    ),
    (
        "__is_pointer__FPv",
        Ok(
            "__is_pointer(void *)",
        ),
    ),
    (
        "__rtti_ptr",
        Err(
            InvalidSpecialMethod(
                "rtti_ptr",
            ),
        ),
    ),
    (
        "__rtti_attr",
        Err(
            InvalidSpecialMethod(
                "rtti_attr",
            ),
        ),
    ),
    (
        "__rtti_func",
        Err(
            InvalidSpecialMethod(
                "rtti_func",
            ),
        ),
    ),
    (
        "__rtti_ptmf",
        Err(
            InvalidSpecialMethod(
                "rtti_ptmf",
            ),
        ),
    ),
    (
        "__rtti_ptmd",
        Err(
            InvalidSpecialMethod(
                "rtti_ptmd",
            ),
        ),
    ),
    (
        "__rtti_array",
        Err(
            InvalidSpecialMethod(
                "rtti_array",
            ),
        ),
    ),
    (
        "__dynamic_cast",
        Err(
            InvalidSpecialMethod(
                "dynamic_cast",
            ),
        ),
    ),
    (
        "__tfv",
        Ok(
            "void type_info function",
        ),
    ),
    (
        "__tfx",
        Ok(
            "long long type_info function",
        ),
    ),
    (
        "__tfl",
        Ok(
            "long type_info function",
        ),
    ),
    (
        "__tfi",
        Ok(
            "int type_info function",
        ),
    ),
    (
        "__tfs",
        Ok(
            "short type_info function",
        ),
    ),
    (
        "__tfb",
        Ok(
            "bool type_info function",
        ),
    ),
    (
        "__tfc",
        Ok(
            "char type_info function",
        ),
    ),
    (
        "__tfw",
        Ok(
            "wchar_t type_info function",
        ),
    ),
    (
        "__tfr",
        Ok(
            "long double type_info function",
        ),
    ),
    (
        "__tfd",
        Ok(
            "double type_info function",
        ),
    ),
    (
        "__tff",
        Ok(
            "float type_info function",
        ),
    ),
    (
        "__tfUi",
        Ok(
            "unsigned int type_info function",
        ),
    ),
    (
        "__tfUl",
        Ok(
            "unsigned long type_info function",
        ),
    ),
    (
        "__tfUx",
        Ok(
            "unsigned long long type_info function",
        ),
    ),
    (
        "__tfUs",
        Ok(
            "unsigned short type_info function",
        ),
    ),
    (
        "__tfUc",
        Ok(
            "unsigned char type_info function",
        ),
    ),
    (
        "__tfSc",
        Ok(
            "signed char type_info function",
        ),
    ),
    (
        "__tf17__array_type_info",
        Ok(
            "__array_type_info type_info function",
        ),
    ),
    (
        "_$_17__array_type_info",
        Ok(
            "__array_type_info::~__array_type_info(void)",
        ),
    ),
    (
        "__tf16__ptmd_type_info",
        Ok(
            "__ptmd_type_info type_info function",
        ),
    ),
    (
        "_$_16__ptmd_type_info",
        Ok(
            "__ptmd_type_info::~__ptmd_type_info(void)",
        ),
    ),
    (
        "__tf16__ptmf_type_info",
        Ok(
            "__ptmf_type_info type_info function",
        ),
    ),
    (
        "_$_16__ptmf_type_info",
        Ok(
            "__ptmf_type_info::~__ptmf_type_info(void)",
        ),
    ),
    (
        "__tf16__func_type_info",
        Ok(
            "__func_type_info type_info function",
        ),
    ),
    (
        "_$_16__func_type_info",
        Ok(
            "__func_type_info::~__func_type_info(void)",
        ),
    ),
    (
        "__tf19__builtin_type_info",
        Ok(
            "__builtin_type_info type_info function",
        ),
    ),
    (
        "_$_19__builtin_type_info",
        Ok(
            "__builtin_type_info::~__builtin_type_info(void)",
        ),
    ),
    (
        "__tf16__attr_type_info",
        Ok(
            "__attr_type_info type_info function",
        ),
    ),
    (
        "_$_16__attr_type_info",
        Ok(
            "__attr_type_info::~__attr_type_info(void)",
        ),
    ),
    (
        "__tf19__pointer_type_info",
        Ok(
            "__pointer_type_info type_info function",
        ),
    ),
    (
        "_$_19__pointer_type_info",
        Ok(
            "__pointer_type_info::~__pointer_type_info(void)",
        ),
    ),
    (
        "sn_reg_frame",
        Err(
            NotMangled,
        ),
    ),
    (
        "sn_dereg_frame",
        Err(
            NotMangled,
        ),
    ),
    (
        "_Q212ActionButton18SummonVehiclePhone$sbEnabled",
        Ok(
            "ActionButton::SummonVehiclePhone::sbEnabled",
        ),
    ),
    (
        "_Q312ActionButton18SummonVehiclePhone16CarSelectionInfo$sNumUsedSlots",
        Ok(
            "ActionButton::SummonVehiclePhone::CarSelectionInfo::sNumUsedSlots",
        ),
    ),
    (
        "_Q212ActionButton18SummonVehiclePhone$sCallback",
        Ok(
            "ActionButton::SummonVehiclePhone::sCallback",
        ),
    ),
    (
        "_Q212ActionButton15CollectibleFood$sfSmallTurboGain",
        Ok(
            "ActionButton::CollectibleFood::sfSmallTurboGain",
        ),
    ),
    (
        "_Q212ActionButton15CollectibleFood$sfLargeTurboGain",
        Ok(
            "ActionButton::CollectibleFood::sfLargeTurboGain",
        ),
    ),
    (
        "_Q212ActionButton15CollectibleCard$mAnimatedCollectionThing",
        Ok(
            "ActionButton::CollectibleCard::mAnimatedCollectionThing",
        ),
    ),
    (
        "_Q212ActionButton15CollectibleCard$mCollectibleCardCount",
        Ok(
            "ActionButton::CollectibleCard::mCollectibleCardCount",
        ),
    ),
    (
        "_Q212ActionButton10WrenchIcon$mWrenchCount",
        Ok(
            "ActionButton::WrenchIcon::mWrenchCount",
        ),
    ),
    (
        "_Q212ActionButton10WrenchIcon$mAnimatedCollectionThing",
        Ok(
            "ActionButton::WrenchIcon::mAnimatedCollectionThing",
        ),
    ),
    (
        "_Q212ActionButton9NitroIcon$mNitroCount",
        Ok(
            "ActionButton::NitroIcon::mNitroCount",
        ),
    ),
    (
        "_Q212ActionButton9NitroIcon$mAnimatedCollectionThing",
        Ok(
            "ActionButton::NitroIcon::mAnimatedCollectionThing",
        ),
    ),
    (
        "_Q212ActionButton14PurchaseReward$sbEnabled",
        Ok(
            "ActionButton::PurchaseReward::sbEnabled",
        ),
    ),
    (
        "_12ActionButton$theListOfActions",
        Ok(
            "ActionButton::theListOfActions",
        ),
    ),
    (
        "_19ActionButtonManager$spActionButtonManager",
        Ok(
            "ActionButtonManager::spActionButtonManager",
        ),
    ),
    (
        "_Q211CharacterAi5State$sMemoryPool",
        Ok(
            "CharacterAi::State::sMemoryPool",
        ),
    ),
    (
        "_12ActorManager$ActorRemovalRangeSqr",
        Ok(
            "ActorManager::ActorRemovalRangeSqr",
        ),
    ),
    (
        "_12ActorManager$sp_Instance",
        Ok(
            "ActorManager::sp_Instance",
        ),
    ),
    (
        "_11FlyingActor$s_Randomizer",
        Ok(
            "FlyingActor::s_Randomizer",
        ),
    ),
    (
        "_11FlyingActor$s_RandomizerSeeded",
        Ok(
            "FlyingActor::s_RandomizerSeeded",
        ),
    ),
    (
        "_15AttackBehaviour$s_Randomizer",
        Ok(
            "AttackBehaviour::s_Randomizer",
        ),
    ),
    (
        "_15AttackBehaviour$s_RandomizerSeeded",
        Ok(
            "AttackBehaviour::s_RandomizerSeeded",
        ),
    ),
    (
        "_16EvasionBehaviour$s_Randomizer",
        Ok(
            "EvasionBehaviour::s_Randomizer",
        ),
    ),
    (
        "_16EvasionBehaviour$s_RandomizerSeeded",
        Ok(
            "EvasionBehaviour::s_RandomizerSeeded",
        ),
    ),
    (
        "_10Projectile$s_Speed",
        Ok(
            "Projectile::s_Speed",
        ),
    ),
    (
        "_8ActorDSG$s_IDCounter",
        Ok(
            "ActorDSG::s_IDCounter",
        ),
    ),
    (
        "_18UFOAttackBehaviour$s_Randomizer",
        Ok(
            "UFOAttackBehaviour::s_Randomizer",
        ),
    ),
    (
        "_18UFOAttackBehaviour$s_RandomizerSeeded",
        Ok(
            "UFOAttackBehaviour::s_RandomizerSeeded",
        ),
    ),
    (
        "_t12basic_string3ZcZt18string_char_traits1ZcZt24__default_alloc_template2b0i0$nilRep",
        Ok(
            "basic_string<char, string_char_traits<char>, __default_alloc_template<false, 0> >::nilRep",
        ),
    ),
    (
        "_t23__malloc_alloc_template1i0$__malloc_alloc_oom_handler",
        Ok(
            "__malloc_alloc_template<0>::__malloc_alloc_oom_handler",
        ),
    ),
    (
        "_t24__default_alloc_template2b0i0$_S_free_list",
        Ok(
            "__default_alloc_template<false, 0>::_S_free_list",
        ),
    ),
    (
        "_t24__default_alloc_template2b0i0$_S_start_free",
        Ok(
            "__default_alloc_template<false, 0>::_S_start_free",
        ),
    ),
    (
        "_t24__default_alloc_template2b0i0$_S_end_free",
        Ok(
            "__default_alloc_template<false, 0>::_S_end_free",
        ),
    ),
    (
        "_t24__default_alloc_template2b0i0$_S_heap_size",
        Ok(
            "__default_alloc_template<false, 0>::_S_heap_size",
        ),
    ),
    (
        "_6Action$sMemoryPool",
        Ok(
            "Action::sMemoryPool",
        ),
    ),
    (
        "_22WalkerLocomotionAction$sRandom",
        Ok(
            "WalkerLocomotionAction::sRandom",
        ),
    ),
    (
        "_22WalkerLocomotionAction$sRandomSeeded",
        Ok(
            "WalkerLocomotionAction::sRandomSeeded",
        ),
    ),
    (
        "TRAFFICAI_NAMESPACE",
        Err(
            NotMangled,
        ),
    ),
    (
        "_15VehicleAIRender$spInstance",
        Ok(
            "VehicleAIRender::spInstance",
        ),
    ),
    (
        "_10ATCManager$spInstance",
        Ok(
            "ATCManager::spInstance",
        ),
    ),
    (
        "_15ConversationCam$sInstCount",
        Ok(
            "ConversationCam::sInstCount",
        ),
    ),
    (
        "_8SuperCam$s_secondaryControllerID",
        Ok(
            "SuperCam::s_secondaryControllerID",
        ),
    ),
    (
        "CAMERAS_FOR_DRIVING",
        Err(
            NotMangled,
        ),
    ),
    (
        "CAMERAS_FOR_WALKING",
        Err(
            NotMangled,
        ),
    ),
    (
        "SUPER_SPRINT_CAMERAS",
        Err(
            NotMangled,
        ),
    ),
    (
        "_15SuperCamCentral$mTotalSuperCamCentrals",
        Ok(
            "SuperCamCentral::mTotalSuperCamCentrals",
        ),
    ),
    (
        "_15SuperCamCentral$CAMERA_INVENTORY_SECTION",
        Ok(
            "SuperCamCentral::CAMERA_INVENTORY_SECTION",
        ),
    ),
    (
        "_15SuperCamCentral$mFollowCamDataChunks",
        Ok(
            "SuperCamCentral::mFollowCamDataChunks",
        ),
    ),
    (
        "_15SuperCamCentral$mNumUsedFDC",
        Ok(
            "SuperCamCentral::mNumUsedFDC",
        ),
    ),
    (
        "_15SuperCamManager$mspInstance",
        Ok(
            "SuperCamManager::mspInstance",
        ),
    ),
    (
        "_14SuperSprintCam$mSprintCamCount",
        Ok(
            "SuperSprintCam::mSprintCamCount",
        ),
    ),
    (
        "_11CardGallery$spInstance",
        Ok(
            "CardGallery::spInstance",
        ),
    ),
    (
        "_16CheatInputSystem$spInstance",
        Ok(
            "CheatInputSystem::spInstance",
        ),
    ),
    (
        "_16CheatInputSystem$s_cheatsEnabled",
        Ok(
            "CheatInputSystem::s_cheatsEnabled",
        ),
    ),
    (
        "_8CheatsDB$s_maxNumPossibleCheats",
        Ok(
            "CheatsDB::s_maxNumPossibleCheats",
        ),
    ),
    (
        "gErrFileName",
        Err(
            NotMangled,
        ),
    ),
    (
        "gErrLineNum",
        Err(
            NotMangled,
        ),
    ),
    (
        "_7Console$spInstance",
        Ok(
            "Console::spInstance",
        ),
    ),
    (
        "_Q27Console18FunctionTableEntry$sMemoryPool",
        Ok(
            "Console::FunctionTableEntry::sMemoryPool",
        ),
    ),
    (
        "_Q27Console15AliasTableEntry$sMemoryPool",
        Ok(
            "Console::AliasTableEntry::sMemoryPool",
        ),
    ),
    (
        "_13BootupContext$spInstance",
        Ok(
            "BootupContext::spInstance",
        ),
    ),
    (
        "_12EntryContext$spInstance",
        Ok(
            "EntryContext::spInstance",
        ),
    ),
    (
        "_11ExitContext$spInstance",
        Ok(
            "ExitContext::spInstance",
        ),
    ),
    (
        "_15FrontEndContext$spInstance",
        Ok(
            "FrontEndContext::spInstance",
        ),
    ),
    (
        "_12PauseContext$spInstance",
        Ok(
            "PauseContext::spInstance",
        ),
    ),
    (
        "_22LoadingGameplayContext$spInstance",
        Ok(
            "LoadingGameplayContext::spInstance",
        ),
    ),
    (
        "_15GameplayContext$spInstance",
        Ok(
            "GameplayContext::spInstance",
        ),
    ),
    (
        "_18LoadingDemoContext$spInstance",
        Ok(
            "LoadingDemoContext::spInstance",
        ),
    ),
    (
        "_11DemoContext$spInstance",
        Ok(
            "DemoContext::spInstance",
        ),
    ),
    (
        "_15GameDataManager$spInstance",
        Ok(
            "GameDataManager::spInstance",
        ),
    ),
    (
        "SAVED_GAME_TITLE",
        Err(
            NotMangled,
        ),
    ),
    (
        "_22PersistentWorldManager$spInstance",
        Ok(
            "PersistentWorldManager::spInstance",
        ),
    ),
    (
        "sSectorMap",
        Err(
            NotMangled,
        ),
    ),
    (
        "_17MemoryCardManager$spInstance",
        Ok(
            "MemoryCardManager::spInstance",
        ),
    ),
    (
        "SAVE_GAME_DRIVE",
        Err(
            NotMangled,
        ),
    ),
    (
        "PS2_LIST_ICON_FILE",
        Err(
            NotMangled,
        ),
    ),
    (
        "PS2_COPY_ICON_FILE",
        Err(
            NotMangled,
        ),
    ),
    (
        "PS2_DELETE_ICON_FILE",
        Err(
            NotMangled,
        ),
    ),
    (
        "_12EventManager$spInstance",
        Ok(
            "EventManager::spInstance",
        ),
    ),
    (
        "_8GameFlow$spInstance",
        Ok(
            "GameFlow::spInstance",
        ),
    ),
    (
        "_6Button$mTickCount",
        Ok(
            "Button::mTickCount",
        ),
    ),
    (
        "RESET_BUTTONS",
        Err(
            NotMangled,
        ),
    ),
    (
        "_12InputManager$spInstance",
        Ok(
            "InputManager::spInstance",
        ),
    ),
    (
        "gRandomButtoners",
        Err(
            NotMangled,
        ),
    ),
    (
        "GAIN_FUDGE",
        Err(
            NotMangled,
        ),
    ),
    (
        "VALUES",
        Err(
            NotMangled,
        ),
    ),
    (
        "DYNA_VALUES",
        Err(
            NotMangled,
        ),
    ),
    (
        "_15InteriorManager$spInstance",
        Ok(
            "InteriorManager::spInstance",
        ),
    ),
    (
        "_15InteriorManager$sRandom",
        Ok(
            "InteriorManager::sRandom",
        ),
    ),
    (
        "_15InteriorManager$sRandomSeeded",
        Ok(
            "InteriorManager::sRandomSeeded",
        ),
    ),
    (
        "_15InteriorManager$sPersistGagIndex",
        Ok(
            "InteriorManager::sPersistGagIndex",
        ),
    ),
    (
        "_14LoadingManager$spInstance",
        Ok(
            "LoadingManager::spInstance",
        ),
    ),
    (
        "_13LocatorLoader$msZoneNameCount",
        Ok(
            "LocatorLoader::msZoneNameCount",
        ),
    ),
    (
        "_18CommandLineOptions$sOptions",
        Ok(
            "CommandLineOptions::sOptions",
        ),
    ),
    (
        "_18CommandLineOptions$s_defaultLevel",
        Ok(
            "CommandLineOptions::s_defaultLevel",
        ),
    ),
    (
        "_18CommandLineOptions$s_defaultMission",
        Ok(
            "CommandLineOptions::s_defaultMission",
        ),
    ),
    (
        "_4Game$spInstance",
        Ok(
            "Game::spInstance",
        ),
    ),
    (
        "g_inDemoMode",
        Err(
            NotMangled,
        ),
    ),
    (
        "ERROR_STRINGS",
        Err(
            NotMangled,
        ),
    ),
    (
        "_11PS2Platform$s_MainCement",
        Ok(
            "PS2Platform::s_MainCement",
        ),
    ),
    (
        "_11PS2Platform$spInstance",
        Ok(
            "PS2Platform::spInstance",
        ),
    ),
    (
        "gFont",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_HeapCreationData",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_LockedPersistentHeap",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_HeapManagerCreated",
        Err(
            NotMangled,
        ),
    ),
    (
        "gMemorySystemInitialized",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_NoHeapRoute",
        Err(
            NotMangled,
        ),
    ),
    (
        "HeapNames",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_HeapActivityTracker",
        Err(
            NotMangled,
        ),
    ),
    (
        "_11HeapManager$s_Instance",
        Ok(
            "HeapManager::s_Instance",
        ),
    ),
    (
        "g_HeapArray",
        Err(
            NotMangled,
        ),
    ),
    (
        "ALLOWED_AI_EVENTS",
        Err(
            NotMangled,
        ),
    ),
    (
        "NUM_ALLOWED_AI_EVENTS",
        Err(
            NotMangled,
        ),
    ),
    (
        "_20TriggerVolumeTracker$spInstance",
        Ok(
            "TriggerVolumeTracker::spInstance",
        ),
    ),
    (
        "_20TriggerVolumeTracker$sP1",
        Ok(
            "TriggerVolumeTracker::sP1",
        ),
    ),
    (
        "_20TriggerVolumeTracker$sP2",
        Ok(
            "TriggerVolumeTracker::sP2",
        ),
    ),
    (
        "_20TriggerVolumeTracker$sP3",
        Ok(
            "TriggerVolumeTracker::sP3",
        ),
    ),
    (
        "_20TriggerVolumeTracker$sP4",
        Ok(
            "TriggerVolumeTracker::sP4",
        ),
    ),
    (
        "_15GameplayManager$spInstance",
        Ok(
            "GameplayManager::spInstance",
        ),
    ),
    (
        "NUM_CONTINUITY_ERRORS",
        Err(
            NotMangled,
        ),
    ),
    (
        "_14MissionManager$spInstance",
        Ok(
            "MissionManager::spInstance",
        ),
    ),
    (
        "_19MissionScriptLoader$spInstance",
        Ok(
            "MissionScriptLoader::spInstance",
        ),
    ),
    (
        "_12AnimatedIcon$sAnimatedIconPool",
        Ok(
            "AnimatedIcon::sAnimatedIconPool",
        ),
    ),
    (
        "_12AnimatedIcon$sNumAllocated",
        Ok(
            "AnimatedIcon::sNumAllocated",
        ),
    ),
    (
        "STATEPROP_SHAKE_FORCE",
        Err(
            NotMangled,
        ),
    ),
    (
        "_21CharacterSheetManager$spInstance",
        Ok(
            "CharacterSheetManager::spInstance",
        ),
    ),
    (
        "REWARDS_SCRIPT_FILE",
        Err(
            NotMangled,
        ),
    ),
    (
        "_14RewardsManager$spInstance",
        Ok(
            "RewardsManager::spInstance",
        ),
    ),
    (
        "_16MissionCondition$mFailedHitNRun",
        Ok(
            "MissionCondition::mFailedHitNRun",
        ),
    ),
    (
        "gDefaultSetting",
        Err(
            NotMangled,
        ),
    ),
    (
        "gDefaultSettings",
        Err(
            NotMangled,
        ),
    ),
    (
        "gWatcherNMnameSpace",
        Err(
            NotMangled,
        ),
    ),
    (
        "_19PresentationManager$spInstance",
        Ok(
            "PresentationManager::spInstance",
        ),
    ),
    (
        "_15TutorialManager$spInstance",
        Ok(
            "TutorialManager::spInstance",
        ),
    ),
    (
        "_11CGuiManager$s_memcardCheckState",
        Ok(
            "CGuiManager::s_memcardCheckState",
        ),
    ),
    (
        "FOREGROUND_LAYER",
        Err(
            NotMangled,
        ),
    ),
    (
        "BACKGROUND_LAYER",
        Err(
            NotMangled,
        ),
    ),
    (
        "FE_PURE3D_OBJECT",
        Err(
            NotMangled,
        ),
    ),
    (
        "ACCEPT_PAGES",
        Err(
            NotMangled,
        ),
    ),
    (
        "BACK_PAGES",
        Err(
            NotMangled,
        ),
    ),
    (
        "_10CGuiScreen$s_p3dMultiController",
        Ok(
            "CGuiScreen::s_p3dMultiController",
        ),
    ),
    (
        "_10CGuiScreen$s_numIrisFrames",
        Ok(
            "CGuiScreen::s_numIrisFrames",
        ),
    ),
    (
        "_18CGuiScreenLoadSave$s_forceGotoMemoryCardScreen",
        Ok(
            "CGuiScreenLoadSave::s_forceGotoMemoryCardScreen",
        ),
    ),
    (
        "_20CGuiScreenMemoryCard$s_currentMemoryCardSlot",
        Ok(
            "CGuiScreenMemoryCard::s_currentMemoryCardSlot",
        ),
    ),
    (
        "_17CGuiScreenMessage$s_ControllerDisconnectedPort",
        Ok(
            "CGuiScreenMessage::s_ControllerDisconnectedPort",
        ),
    ),
    (
        "_17CGuiScreenMessage$s_messageIndex",
        Ok(
            "CGuiScreenMessage::s_messageIndex",
        ),
    ),
    (
        "_17CGuiScreenMessage$s_pMessageCallback",
        Ok(
            "CGuiScreenMessage::s_pMessageCallback",
        ),
    ),
    (
        "_16CGuiScreenPrompt$s_messageIndex",
        Ok(
            "CGuiScreenPrompt::s_messageIndex",
        ),
    ),
    (
        "_16CGuiScreenPrompt$s_numResponses",
        Ok(
            "CGuiScreenPrompt::s_numResponses",
        ),
    ),
    (
        "_16CGuiScreenPrompt$s_pPromptCallback",
        Ok(
            "CGuiScreenPrompt::s_pPromptCallback",
        ),
    ),
    (
        "_16CGuiScreenPrompt$s_defaultToNo",
        Ok(
            "CGuiScreenPrompt::s_defaultToNo",
        ),
    ),
    (
        "_10CGuiSystem$spInstance",
        Ok(
            "CGuiSystem::spInstance",
        ),
    ),
    (
        "g_scroobySimulationTime",
        Err(
            NotMangled,
        ),
    ),
    (
        "PROJECT_FILE_LANGUAGE",
        Err(
            NotMangled,
        ),
    ),
    (
        "PROJECT_FILE_BOOTUP",
        Err(
            NotMangled,
        ),
    ),
    (
        "PROJECT_FILE_BACKEND",
        Err(
            NotMangled,
        ),
    ),
    (
        "PROJECT_FILE_FRONTEND",
        Err(
            NotMangled,
        ),
    ),
    (
        "PROJECT_FILE_MINIGAME",
        Err(
            NotMangled,
        ),
    ),
    (
        "PROJECT_FILE_INGAME",
        Err(
            NotMangled,
        ),
    ),
    (
        "INGAME_LEVEL_PROJECT_FILES",
        Err(
            NotMangled,
        ),
    ),
    (
        "TEXT_BIBLE_NAME",
        Err(
            NotMangled,
        ),
    ),
    (
        "_13CGuiTextBible$s_textBible",
        Ok(
            "CGuiTextBible::s_textBible",
        ),
    ),
    (
        "_13CGuiTextBible$s_currentLanguage",
        Ok(
            "CGuiTextBible::s_currentLanguage",
        ),
    ),
    (
        "DYNAMIC_RESOURCES_DIR",
        Err(
            NotMangled,
        ),
    ),
    (
        "DYNA_LOAD_INVENTORY_SECTION",
        Err(
            NotMangled,
        ),
    ),
    (
        "LOADING_FE_PURE3D_FILE",
        Err(
            NotMangled,
        ),
    ),
    (
        "LOADING_FE_INVENTORY",
        Err(
            NotMangled,
        ),
    ),
    (
        "LOADING_FE_DRAWABLE",
        Err(
            NotMangled,
        ),
    ),
    (
        "LOADING_FE_CAMERA",
        Err(
            NotMangled,
        ),
    ),
    (
        "LOADING_FE_MULTICONTROLLER",
        Err(
            NotMangled,
        ),
    ),
    (
        "_18CGuiScreenAutoLoad$s_autoLoadGameSlot",
        Ok(
            "CGuiScreenAutoLoad::s_autoLoadGameSlot",
        ),
    ),
    (
        "HOMER_GAG_ANIMATION",
        Err(
            NotMangled,
        ),
    ),
    (
        "NUM_HOMER_GAG_ANIMATIONS",
        Err(
            NotMangled,
        ),
    ),
    (
        "_25CGuiScreenIntroTransition$s_introTransitionPlayed",
        Ok(
            "CGuiScreenIntroTransition::s_introTransitionPlayed",
        ),
    ),
    (
        "MISSION_GALLERY_IMAGES_DIR",
        Err(
            NotMangled,
        ),
    ),
    (
        "MISSION_GALLERY_INVENTORY_SECTION",
        Err(
            NotMangled,
        ),
    ),
    (
        "SKIN_GALLERY_INVENTORY_SECTION",
        Err(
            NotMangled,
        ),
    ),
    (
        "SKIN_GALLERY_IMAGES_DIR",
        Err(
            NotMangled,
        ),
    ),
    (
        "VEHICLE_GALLERY_INVENTORY_SECTION",
        Err(
            NotMangled,
        ),
    ),
    (
        "VEHICLE_GALLERY_IMAGES_DIR",
        Err(
            NotMangled,
        ),
    ),
    (
        "MOVIES_INGAME",
        Err(
            NotMangled,
        ),
    ),
    (
        "SOUND_MENU_ITEMS",
        Err(
            NotMangled,
        ),
    ),
    (
        "_16CGuiScreenSplash$s_demoPlaybackToggle",
        Ok(
            "CGuiScreenSplash::s_demoPlaybackToggle",
        ),
    ),
    (
        "_21CGuiScreenViewCredits$s_totalTranslateY",
        Ok(
            "CGuiScreenViewCredits::s_totalTranslateY",
        ),
    ),
    (
        "_21CGuiScreenViewCredits$s_numPixelsPerLine",
        Ok(
            "CGuiScreenViewCredits::s_numPixelsPerLine",
        ),
    ),
    (
        "MOVIES_MENU_ITEMS",
        Err(
            NotMangled,
        ),
    ),
    (
        "MOVIES_SELECTION",
        Err(
            NotMangled,
        ),
    ),
    (
        "MINIGAME_CHARACTERS_INVENTORY",
        Err(
            NotMangled,
        ),
    ),
    (
        "CHARACTER_FILES",
        Err(
            NotMangled,
        ),
    ),
    (
        "_17CGuiScreenMiniHud$s_pausedControllerID",
        Ok(
            "CGuiScreenMiniHud::s_pausedControllerID",
        ),
    ),
    (
        "INGAME_PROJECT_FILES",
        Err(
            NotMangled,
        ),
    ),
    (
        "_17CGuiManagerInGame$s_currentHUD",
        Ok(
            "CGuiManagerInGame::s_currentHUD",
        ),
    ),
    (
        "cGuiManagerInGameActive",
        Err(
            NotMangled,
        ),
    ),
    (
        "_13CGuiScreenHud$s_numCoinsDisplay",
        Ok(
            "CGuiScreenHud::s_numCoinsDisplay",
        ),
    ),
    (
        "_18CGuiScreenIrisWipe$g_IsIrisClosed",
        Ok(
            "CGuiScreenIrisWipe::g_IsIrisClosed",
        ),
    ),
    (
        "_19CGuiScreenLetterBox$m_enableReopen",
        Ok(
            "CGuiScreenLetterBox::m_enableReopen",
        ),
    ),
    (
        "_19CGuiScreenLetterBox$m_forceOpen",
        Ok(
            "CGuiScreenLetterBox::m_forceOpen",
        ),
    ),
    (
        "g_TopIn",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BottomIn",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_TopOut",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BottomOut",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_TopClose",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BottomClose",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ClosedEvent",
        Err(
            NotMangled,
        ),
    ),
    (
        "s_OutroPauseBetweenCloseAndIris",
        Err(
            NotMangled,
        ),
    ),
    (
        "s_OutroIrisOpen",
        Err(
            NotMangled,
        ),
    ),
    (
        "_19CGuiScreenLetterBox$s_suppressAcceptCancelButtons",
        Ok(
            "CGuiScreenLetterBox::s_suppressAcceptCancelButtons",
        ),
    ),
    (
        "_21CGuiScreenMissionBase$s_AnimatedBitmapName",
        Ok(
            "CGuiScreenMissionBase::s_AnimatedBitmapName",
        ),
    ),
    (
        "_21CGuiScreenMissionBase$s_AnimatedBitmapShortName",
        Ok(
            "CGuiScreenMissionBase::s_AnimatedBitmapShortName",
        ),
    ),
    (
        "_21CGuiScreenMissionBase$s_AnimatedBitmapSprite",
        Ok(
            "CGuiScreenMissionBase::s_AnimatedBitmapSprite",
        ),
    ),
    (
        "_21CGuiScreenMissionBase$s_BitmapLoadPending",
        Ok(
            "CGuiScreenMissionBase::s_BitmapLoadPending",
        ),
    ),
    (
        "g_IntroStart",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_IntroJunction",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ForegroundShow",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ClipLeftShow",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_IntroPause",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ScreenSlideIn",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ClipLeftPause",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ClipLeftSlideOut",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ClipLeftHide",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BackgroundShow",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_DarkenPolyFade",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_OutroStart",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_OutroJunction",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_OutroBottomOut",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_OutroTopOut",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ClipRightShow",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ClipRightPause",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ClipRightSlideIn",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ScreenSlideOut",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_OutroHideEverything",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_OutroDone",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_IrisOpen",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_IrisClose",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_TitlePulse",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BitmapPositionWagerX",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BitmapPositionWagerY",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BitmapSizeWagerX",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BitmapSizeWagerY",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_TitlePositionWagerX",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_TitlePositionWagerY",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_LoadCompletedShow",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_LoadCompletedTransitionIn",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_WhiteWash",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_WhiteWashShow",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_WhiteWashIn",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_WhiteWashPause",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_WhiteWashHide",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_WhiteWashResumeGame",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_TutorialPulse",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_TimeSinceLastDeathVolume",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_Vehicle",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_ResetCar",
        Err(
            NotMangled,
        ),
    ),
    (
        "PAUSE_SETTINGS_MENU_ITEMS",
        Err(
            NotMangled,
        ),
    ),
    (
        "REWARDS_INVENTORY_SECTION",
        Err(
            NotMangled,
        ),
    ),
    (
        "PHONE_BOOTH_3DMODEL_CARS_DIR",
        Err(
            NotMangled,
        ),
    ),
    (
        "PHONE_BOOTH_2DMODEL_CARS_DIR",
        Err(
            NotMangled,
        ),
    ),
    (
        "OVERRIDE_VEHICLE_NAMES",
        Err(
            NotMangled,
        ),
    ),
    (
        "VEHICLES_DIR",
        Err(
            NotMangled,
        ),
    ),
    (
        "_20CGuiScreenPhoneBooth$s_currentDebugVehicleSelection",
        Ok(
            "CGuiScreenPhoneBooth::s_currentDebugVehicleSelection",
        ),
    ),
    (
        "_20CGuiScreenPhoneBooth$s_currentTeleportSelection",
        Ok(
            "CGuiScreenPhoneBooth::s_currentTeleportSelection",
        ),
    ),
    (
        "PURCHASE_REWARDS_INVENTORY_SECTION",
        Err(
            NotMangled,
        ),
    ),
    (
        "PURCHASE_REWARDS_BGD",
        Err(
            NotMangled,
        ),
    ),
    (
        "PURCHASE_REWARDS_BGD_DRAWABLE",
        Err(
            NotMangled,
        ),
    ),
    (
        "PURCHASE_REWARDS_BGD_CAMERA",
        Err(
            NotMangled,
        ),
    ),
    (
        "PURCHASE_REWARDS_BGD_MULTICONTROLLER",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BitmapPositionX",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BitmapPositionY",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BitmapSizeX",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_BitmapSizeY",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_TitlePositionX",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_TitlePositionY",
        Err(
            NotMangled,
        ),
    ),
    (
        "_7CHudMap$s_registeredIcons",
        Ok(
            "CHudMap::s_registeredIcons",
        ),
    ),
    (
        "_7CHudMap$s_numRegisteredIcons",
        Ok(
            "CHudMap::s_numRegisteredIcons",
        ),
    ),
    (
        "_7CHudMap$s_fpIconID",
        Ok(
            "CHudMap::s_fpIconID",
        ),
    ),
    (
        "_15ISpatialProxyAA$msIntersectionEpsilon",
        Ok(
            "ISpatialProxyAA::msIntersectionEpsilon",
        ),
    ),
    (
        "_10DSGFactory$mspInstance",
        Ok(
            "DSGFactory::mspInstance",
        ),
    ),
    (
        "_10IEntityDSG$msDeletionsSafe",
        Ok(
            "IEntityDSG::msDeletionsSafe",
        ),
    ),
    (
        "_12IntersectDSG$mspIndexData",
        Ok(
            "IntersectDSG::mspIndexData",
        ),
    ),
    (
        "_12IntersectDSG$mspTerrainData",
        Ok(
            "IntersectDSG::mspTerrainData",
        ),
    ),
    (
        "_12IntersectDSG$mspVertexData",
        Ok(
            "IntersectDSG::mspVertexData",
        ),
    ),
    (
        "_12IntersectDSG$mspNormalData",
        Ok(
            "IntersectDSG::mspNormalData",
        ),
    ),
    (
        "_12LensFlareDSG$spDrawQueue",
        Ok(
            "LensFlareDSG::spDrawQueue",
        ),
    ),
    (
        "_12LensFlareDSG$spVisTestQueue",
        Ok(
            "LensFlareDSG::spVisTestQueue",
        ),
    ),
    (
        "_12LensFlareDSG$sP3DVisibilityCounter",
        Ok(
            "LensFlareDSG::sP3DVisibilityCounter",
        ),
    ),
    (
        "_17BreakablesManager$spInstance",
        Ok(
            "BreakablesManager::spInstance",
        ),
    ),
    (
        "_17BreakablesManager$sInventorySectionName",
        Ok(
            "BreakablesManager::sInventorySectionName",
        ),
    ),
    (
        "PAVEMENT_SKIDMARK_SHADERNAME",
        Err(
            NotMangled,
        ),
    ),
    (
        "DIRT_SKIDMARK_SHADERNAME",
        Err(
            NotMangled,
        ),
    ),
    (
        "GRASS_SKIDMARK_SHADERNAME",
        Err(
            NotMangled,
        ),
    ),
    (
        "_15SkidmarkManager$spInstance",
        Ok(
            "SkidmarkManager::spInstance",
        ),
    ),
    (
        "_16IntersectManager$mspInstance",
        Ok(
            "IntersectManager::mspInstance",
        ),
    ),
    (
        "_11AllWrappers$mspInstance",
        Ok(
            "AllWrappers::mspInstance",
        ),
    ),
    (
        "_22BillboardWrappedLoader$mOverrideWrapper",
        Ok(
            "BillboardWrappedLoader::mOverrideWrapper",
        ),
    ),
    (
        "_11FenceLoader$mFenceCount",
        Ok(
            "FenceLoader::mFenceCount",
        ),
    ),
    (
        "VIS_TEST_NAME",
        Err(
            NotMangled,
        ),
    ),
    (
        "_18AnimDynaPhysLoader$s_ShadowList",
        Ok(
            "AnimDynaPhysLoader::s_ShadowList",
        ),
    ),
    (
        "_15ParticleManager$spInstance",
        Ok(
            "ParticleManager::spInstance",
        ),
    ),
    (
        "PIGEON_IDLE_ANIM_DSG",
        Err(
            NotMangled,
        ),
    ),
    (
        "PIGEON_FLY_ANIM_DSG",
        Err(
            NotMangled,
        ),
    ),
    (
        "_20AnimEntityDSGManager$spInstance",
        Ok(
            "AnimEntityDSGManager::spInstance",
        ),
    ),
    (
        "_10RenderFlow$spInstance",
        Ok(
            "RenderFlow::spInstance",
        ),
    ),
    (
        "_10RenderFlow$sDrawStatsOverlay",
        Ok(
            "RenderFlow::sDrawStatsOverlay",
        ),
    ),
    (
        "_13RenderManager$mspInstance",
        Ok(
            "RenderManager::mspInstance",
        ),
    ),
    (
        "ENABLE_MOTION_BLUR",
        Err(
            NotMangled,
        ),
    ),
    (
        "BLUR_SCALE",
        Err(
            NotMangled,
        ),
    ),
    (
        "BLUR_START",
        Err(
            NotMangled,
        ),
    ),
    (
        "MAX_BLUR",
        Err(
            NotMangled,
        ),
    ),
    (
        "BLUR_GRADIENT",
        Err(
            NotMangled,
        ),
    ),
    (
        "MIN_PS2_BLUR",
        Err(
            NotMangled,
        ),
    ),
    (
        "MIN_PS2_BLUR_CHEAT",
        Err(
            NotMangled,
        ),
    ),
    (
        "_11CubicBezier$sIsInitialized",
        Ok(
            "CubicBezier::sIsInitialized",
        ),
    ),
    (
        "_11CubicBezier$B0",
        Ok(
            "CubicBezier::B0",
        ),
    ),
    (
        "_11CubicBezier$B1",
        Ok(
            "CubicBezier::B1",
        ),
    ),
    (
        "_11CubicBezier$B2",
        Ok(
            "CubicBezier::B2",
        ),
    ),
    (
        "_11CubicBezier$B3",
        Ok(
            "CubicBezier::B3",
        ),
    ),
    (
        "_11RoadManager$mInstance",
        Ok(
            "RoadManager::mInstance",
        ),
    ),
    (
        "gpShader",
        Err(
            NotMangled,
        ),
    ),
    (
        "_19SimpsonsSoundPlayer$s_playersCreated",
        Ok(
            "SimpsonsSoundPlayer::s_playersCreated",
        ),
    ),
    (
        "_19SimpsonsSoundPlayer$s_clipPlayersInUse",
        Ok(
            "SimpsonsSoundPlayer::s_clipPlayersInUse",
        ),
    ),
    (
        "_19SimpsonsSoundPlayer$s_streamPlayersInUse",
        Ok(
            "SimpsonsSoundPlayer::s_streamPlayersInUse",
        ),
    ),
    (
        "_19SimpsonsSoundPlayer$s_resourceManager",
        Ok(
            "SimpsonsSoundPlayer::s_resourceManager",
        ),
    ),
    (
        "_19SimpsonsSoundPlayer$s_playerManager",
        Ok(
            "SimpsonsSoundPlayer::s_playerManager",
        ),
    ),
    (
        "_19SimpsonsSoundPlayer$s_soundLoader",
        Ok(
            "SimpsonsSoundPlayer::s_soundLoader",
        ),
    ),
    (
        "_12SoundManager$spInstance",
        Ok(
            "SoundManager::spInstance",
        ),
    ),
    (
        "RADSCRIPT_TYPE_INFO_FILE",
        Err(
            NotMangled,
        ),
    ),
    (
        "RADSCRIPT_SCRIPT_FILE",
        Err(
            NotMangled,
        ),
    ),
    (
        "RADMUSIC_SCRIPT_FILE",
        Err(
            NotMangled,
        ),
    ),
    (
        "_t14radLinkedClass1Z28SoundRenderingPlayerCallback$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<SoundRenderingPlayerCallback>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z28SoundRenderingPlayerCallback$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<SoundRenderingPlayerCallback>::s_pLinkedClassTail",
        ),
    ),
    (
        "_t14radLinkedClass1Z18carSoundParameters$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<carSoundParameters>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z18carSoundParameters$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<carSoundParameters>::s_pLinkedClassTail",
        ),
    ),
    (
        "tutorialConvNames",
        Err(
            NotMangled,
        ),
    ),
    (
        "eventTable",
        Err(
            NotMangled,
        ),
    ),
    (
        "characterTable",
        Err(
            NotMangled,
        ),
    ),
    (
        "_10DialogList$s_introKey",
        Ok(
            "DialogList::s_introKey",
        ),
    ),
    (
        "_10DialogList$s_aztecKey",
        Ok(
            "DialogList::s_aztecKey",
        ),
    ),
    (
        "_10DialogList$s_milhouseKey",
        Ok(
            "DialogList::s_milhouseKey",
        ),
    ),
    (
        "_10DialogList$s_nelsonKey",
        Ok(
            "DialogList::s_nelsonKey",
        ),
    ),
    (
        "_10DialogList$s_raceZombie1",
        Ok(
            "DialogList::s_raceZombie1",
        ),
    ),
    (
        "_10DialogList$s_raceZombie2",
        Ok(
            "DialogList::s_raceZombie2",
        ),
    ),
    (
        "_10DialogList$s_showDialogSpew",
        Ok(
            "DialogList::s_showDialogSpew",
        ),
    ),
    (
        "_18DialogQueueElement$s_timerList",
        Ok(
            "DialogQueueElement::s_timerList",
        ),
    ),
    (
        "_18DialogQueueElement$s_watcherInitialized",
        Ok(
            "DialogQueueElement::s_watcherInitialized",
        ),
    ),
    (
        "priorityTable",
        Err(
            NotMangled,
        ),
    ),
    (
        "_t14radLinkedClass1Z14reverbSettings$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<reverbSettings>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z14reverbSettings$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<reverbSettings>::s_pLinkedClassTail",
        ),
    ),
    (
        "_t14radLinkedClass1Z23positionalSoundSettings$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<positionalSoundSettings>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z23positionalSoundSettings$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<positionalSoundSettings>::s_pLinkedClassTail",
        ),
    ),
    (
        "_t14radLinkedClass1ZQ25Sound17daSoundPlayerBase$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<Sound::daSoundPlayerBase>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1ZQ25Sound17daSoundPlayerBase$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<Sound::daSoundPlayerBase>::s_pLinkedClassTail",
        ),
    ),
    (
        "_t14radLinkedClass1ZQ25Sound23daSoundClipStreamPlayer$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<Sound::daSoundClipStreamPlayer>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1ZQ25Sound23daSoundClipStreamPlayer$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<Sound::daSoundClipStreamPlayer>::s_pLinkedClassTail",
        ),
    ),
    (
        "_5Fader$s_faderUpdateList",
        Ok(
            "Fader::s_faderUpdateList",
        ),
    ),
    (
        "_5Sound$gCompressedStreamAudioFormat",
        Ok(
            "Sound::gCompressedStreamAudioFormat",
        ),
    ),
    (
        "_5Sound$gUnCompressedStreamAudioFormat",
        Ok(
            "Sound::gUnCompressedStreamAudioFormat",
        ),
    ),
    (
        "_5Sound$gClipFileAudioFormat",
        Ok(
            "Sound::gClipFileAudioFormat",
        ),
    ),
    (
        "_5Sound$gMusicAudioFormat",
        Ok(
            "Sound::gMusicAudioFormat",
        ),
    ),
    (
        "_5Sound$gStreamers",
        Ok(
            "Sound::gStreamers",
        ),
    ),
    (
        "_Q25Sound20daSoundPlayerManager$s_pInstance",
        Ok(
            "Sound::daSoundPlayerManager::s_pInstance",
        ),
    ),
    (
        "_t14radLinkedClass1ZQ25Sound21daSoundDynaLoadRegion$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<Sound::daSoundDynaLoadRegion>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1ZQ25Sound21daSoundDynaLoadRegion$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<Sound::daSoundDynaLoadRegion>::s_pLinkedClassTail",
        ),
    ),
    (
        "_Q25Sound22daSoundDynaLoadManager$s_pSingleton",
        Ok(
            "Sound::daSoundDynaLoadManager::s_pSingleton",
        ),
    ),
    (
        "_Q25Sound21daSoundDynaLoadRegion$s_pActiveRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion::s_pActiveRegion",
        ),
    ),
    (
        "_Q25Sound21daSoundDynaLoadRegion$s_ActiveSlot",
        Ok(
            "Sound::daSoundDynaLoadRegion::s_ActiveSlot",
        ),
    ),
    (
        "_Q25Sound21daSoundDynaLoadRegion$s_GlobalPendingSwapCount",
        Ok(
            "Sound::daSoundDynaLoadRegion::s_GlobalPendingSwapCount",
        ),
    ),
    (
        "gDaSoundStats",
        Err(
            NotMangled,
        ),
    ),
    (
        "gTuneSound",
        Err(
            NotMangled,
        ),
    ),
    (
        "_5Sound$gpBTreeNodePool",
        Ok(
            "Sound::gpBTreeNodePool",
        ),
    ),
    (
        "_5Sound$gTotalMicrosecondsWastedParsingScripts",
        Ok(
            "Sound::gTotalMicrosecondsWastedParsingScripts",
        ),
    ),
    (
        "_5Sound$DAMEMORY_ALLOC_SOUND",
        Ok(
            "Sound::DAMEMORY_ALLOC_SOUND",
        ),
    ),
    (
        "_Q25Sound23daSoundRenderingManager$s_Singleton",
        Ok(
            "Sound::daSoundRenderingManager::s_Singleton",
        ),
    ),
    (
        "_t14radLinkedClass1Z19daSoundResourceData$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<daSoundResourceData>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z19daSoundResourceData$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<daSoundResourceData>::s_pLinkedClassTail",
        ),
    ),
    (
        "_19daSoundResourceData$s_fileDescUsedCount",
        Ok(
            "daSoundResourceData::s_fileDescUsedCount",
        ),
    ),
    (
        "_Q25Sound22daSoundResourceManager$s_pSingleton",
        Ok(
            "Sound::daSoundResourceManager::s_pSingleton",
        ),
    ),
    (
        "s_duckNames",
        Err(
            NotMangled,
        ),
    ),
    (
        "_5Sound$gClipLoadInfo",
        Ok(
            "Sound::gClipLoadInfo",
        ),
    ),
    (
        "_5Sound$gClipPlayerArray",
        Ok(
            "Sound::gClipPlayerArray",
        ),
    ),
    (
        "_5Sound$gStreamPlayerArray",
        Ok(
            "Sound::gStreamPlayerArray",
        ),
    ),
    (
        "_t14radLinkedClass1Z14globalSettings$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<globalSettings>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z14globalSettings$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<globalSettings>::s_pLinkedClassTail",
        ),
    ),
    (
        "_17SoundDebugDisplay$s_isVisible",
        Ok(
            "SoundDebugDisplay::s_isVisible",
        ),
    ),
    (
        "_17SoundDebugDisplay$s_red",
        Ok(
            "SoundDebugDisplay::s_red",
        ),
    ),
    (
        "_17SoundDebugDisplay$s_green",
        Ok(
            "SoundDebugDisplay::s_green",
        ),
    ),
    (
        "_17SoundDebugDisplay$s_blue",
        Ok(
            "SoundDebugDisplay::s_blue",
        ),
    ),
    (
        "_17SoundDebugDisplay$s_leftOffset",
        Ok(
            "SoundDebugDisplay::s_leftOffset",
        ),
    ),
    (
        "_17SoundDebugDisplay$s_topOffset",
        Ok(
            "SoundDebugDisplay::s_topOffset",
        ),
    ),
    (
        "_17SoundDebugDisplay$s_page",
        Ok(
            "SoundDebugDisplay::s_page",
        ),
    ),
    (
        "_17SoundDebugDisplay$s_dumpToWindow",
        Ok(
            "SoundDebugDisplay::s_dumpToWindow",
        ),
    ),
    (
        "_17SoundDebugDisplay$s_radius",
        Ok(
            "SoundDebugDisplay::s_radius",
        ),
    ),
    (
        "_17SoundDebugDisplay$s_dumpTypeInfoToWindow",
        Ok(
            "SoundDebugDisplay::s_dumpTypeInfoToWindow",
        ),
    ),
    (
        "_18MovingSoundManager$s_waspUID",
        Ok(
            "MovingSoundManager::s_waspUID",
        ),
    ),
    (
        "_18TrafficSoundPlayer$s_timerList",
        Ok(
            "TrafficSoundPlayer::s_timerList",
        ),
    ),
    (
        "_6Avatar$s_displayCoordinates",
        Ok(
            "Avatar::s_displayCoordinates",
        ),
    ),
    (
        "_13AvatarManager$spAvatarManager",
        Ok(
            "AvatarManager::spAvatarManager",
        ),
    ),
    (
        "_14HitnRunManager$smpHitnRunManager",
        Ok(
            "HitnRunManager::smpHitnRunManager",
        ),
    ),
    (
        "_14VehicleCentral$spInstance",
        Ok(
            "VehicleCentral::spInstance",
        ),
    ),
    (
        "_14VehicleCentral$spGenericAI",
        Ok(
            "VehicleCentral::spGenericAI",
        ),
    ),
    (
        "_19WorldPhysicsManager$spInstance",
        Ok(
            "WorldPhysicsManager::spInstance",
        ),
    ),
    (
        "_11CoinManager$spCoinManager",
        Ok(
            "CoinManager::spCoinManager",
        ),
    ),
    (
        "_7Sparkle$sRandom",
        Ok(
            "Sparkle::sRandom",
        ),
    ),
    (
        "_7Sparkle$sRandomSeeded",
        Ok(
            "Sparkle::sRandomSeeded",
        ),
    ),
    (
        "_7Sparkle$spInstance",
        Ok(
            "Sparkle::spInstance",
        ),
    ),
    (
        "_9Character$msIntersectInfo",
        Ok(
            "Character::msIntersectInfo",
        ),
    ),
    (
        "_Q29Character4Prop$spSkeleton",
        Ok(
            "Character::Prop::spSkeleton",
        ),
    ),
    (
        "_Q29Character4Prop$sSkelRefs",
        Ok(
            "Character::Prop::sSkelRefs",
        ),
    ),
    (
        "_16CharacterManager$spCharacterManager",
        Ok(
            "CharacterManager::spCharacterManager",
        ),
    ),
    (
        "_13CharacterTune$sGetInPosition",
        Ok(
            "CharacterTune::sGetInPosition",
        ),
    ),
    (
        "g_Blinkers",
        Err(
            NotMangled,
        ),
    ),
    (
        "_16CharacterManager$sInitialWalkLocator",
        Ok(
            "CharacterManager::sInitialWalkLocator",
        ),
    ),
    (
        "_16CharacterManager$sCharacterToSpawn",
        Ok(
            "CharacterManager::sCharacterToSpawn",
        ),
    ),
    (
        "_16CharacterManager$sSpawnedCharacter",
        Ok(
            "CharacterManager::sSpawnedCharacter",
        ),
    ),
    (
        "s_teleportDests",
        Err(
            NotMangled,
        ),
    ),
    (
        "_7Vehicle$s_DamageFromExplosion",
        Ok(
            "Vehicle::s_DamageFromExplosion",
        ),
    ),
    (
        "_7Vehicle$s_DamageFromExplosionPlayer",
        Ok(
            "Vehicle::s_DamageFromExplosionPlayer",
        ),
    ),
    (
        "_7Vehicle$sDoBounce",
        Ok(
            "Vehicle::sDoBounce",
        ),
    ),
    (
        "_14TrafficManager$mInstance",
        Ok(
            "TrafficManager::mInstance",
        ),
    ),
    (
        "_14TrafficManager$sSwatchColours",
        Ok(
            "TrafficManager::sSwatchColours",
        ),
    ),
    (
        "_11PathManager$mInstance",
        Ok(
            "PathManager::mInstance",
        ),
    ),
    (
        "_17PedestrianManager$mDefaultModelGroup",
        Ok(
            "PedestrianManager::mDefaultModelGroup",
        ),
    ),
    (
        "_17PedestrianManager$mInstance",
        Ok(
            "PedestrianManager::mInstance",
        ),
    ),
    (
        "_16ParkedCarManager$spInstance",
        Ok(
            "ParkedCarManager::spInstance",
        ),
    ),
    (
        "_25LoadingSuperSprintContext$spInstance",
        Ok(
            "LoadingSuperSprintContext::spInstance",
        ),
    ),
    (
        "_18SuperSprintContext$spInstance",
        Ok(
            "SuperSprintContext::spInstance",
        ),
    ),
    (
        "_20SuperSprintFEContext$spInstance",
        Ok(
            "SuperSprintFEContext::spInstance",
        ),
    ),
    (
        "_18SuperSprintManager$spInstance",
        Ok(
            "SuperSprintManager::spInstance",
        ),
    ),
    (
        "_15SuperSprintData$CHARACTER_NAMES",
        Ok(
            "SuperSprintData::CHARACTER_NAMES",
        ),
    ),
    (
        "_16FootprintManager$spFootprintManager",
        Ok(
            "FootprintManager::spFootprintManager",
        ),
    ),
    (
        "_Q26choreo4Bank$m_DefaultScriptReadHandlersRegistered",
        Ok(
            "choreo::Bank::m_DefaultScriptReadHandlersRegistered",
        ),
    ),
    (
        "_Q26choreo4Bank$m_ScriptReadHandlerCount",
        Ok(
            "choreo::Bank::m_ScriptReadHandlerCount",
        ),
    ),
    (
        "_6choreo$DEFAULT_FACING_VECTOR",
        Ok(
            "choreo::DEFAULT_FACING_VECTOR",
        ),
    ),
    (
        "_Q26choreo12ScriptReader$m_ErrorHandler",
        Ok(
            "choreo::ScriptReader::m_ErrorHandler",
        ),
    ),
    (
        "_Q26choreo12ScriptReader$m_ErrorHandlerContext",
        Ok(
            "choreo::ScriptReader::m_ErrorHandlerContext",
        ),
    ),
    (
        "_3sim$MAXLEVEL",
        Ok(
            "sim::MAXLEVEL",
        ),
    ),
    (
        "_Q23sim16CollisionManager$sInstance",
        Ok(
            "sim::CollisionManager::sInstance",
        ),
    ),
    (
        "_Q33sim16CollisionManager4Area$sUpdateSimStateSTBC",
        Ok(
            "sim::CollisionManager::Area::sUpdateSimStateSTBC",
        ),
    ),
    (
        "_3sim$FACTMINV",
        Ok(
            "sim::FACTMINV",
        ),
    ),
    (
        "_3sim$MAXREST",
        Ok(
            "sim::MAXREST",
        ),
    ),
    (
        "_3sim$MINREST",
        Ok(
            "sim::MINREST",
        ),
    ),
    (
        "_3sim$maxFactRest",
        Ok(
            "sim::maxFactRest",
        ),
    ),
    (
        "_3sim$minFactRest",
        Ok(
            "sim::minFactRest",
        ),
    ),
    (
        "_3sim$useCorrectPosition",
        Ok(
            "sim::useCorrectPosition",
        ),
    ),
    (
        "_Q23sim19RayIntersectionInfo$sMethod",
        Ok(
            "sim::RayIntersectionInfo::sMethod",
        ),
    ),
    (
        "_Q23sim19RayIntersectionInfo$sRayThickness",
        Ok(
            "sim::RayIntersectionInfo::sRayThickness",
        ),
    ),
    (
        "_Q23sim19RayIntersectionInfo$sReturnClosestOnly",
        Ok(
            "sim::RayIntersectionInfo::sReturnClosestOnly",
        ),
    ),
    (
        "_Q23sim19RayIntersectionInfo$sRootOnly",
        Ok(
            "sim::RayIntersectionInfo::sRootOnly",
        ),
    ),
    (
        "_3sim$g_pLineElemArray",
        Ok(
            "sim::g_pLineElemArray",
        ),
    ),
    (
        "_3sim$g_pDefaultShader",
        Ok(
            "sim::g_pDefaultShader",
        ),
    ),
    (
        "_3sim$g_LineStreamCounter",
        Ok(
            "sim::g_LineStreamCounter",
        ),
    ),
    (
        "_Q23sim8SimUnits$sUnitSet",
        Ok(
            "sim::SimUnits::sUnitSet",
        ),
    ),
    (
        "_Q23sim8SimUnits$sM",
        Ok(
            "sim::SimUnits::sM",
        ),
    ),
    (
        "_Q23sim8SimUnits$sL",
        Ok(
            "sim::SimUnits::sL",
        ),
    ),
    (
        "_Q23sim8SimUnits$sT",
        Ok(
            "sim::SimUnits::sT",
        ),
    ),
    (
        "_Q23sim8SimUnits$sList",
        Ok(
            "sim::SimUnits::sList",
        ),
    ),
    (
        "_Q23sim14SimEnvironment$sDefaultSimEnvironment",
        Ok(
            "sim::SimEnvironment::sDefaultSimEnvironment",
        ),
    ),
    (
        "_Q23sim14SimEnvironment$sCollisionDistanceCGS",
        Ok(
            "sim::SimEnvironment::sCollisionDistanceCGS",
        ),
    ),
    (
        "_Q23sim14SimEnvironment$sCollisionDistance",
        Ok(
            "sim::SimEnvironment::sCollisionDistance",
        ),
    ),
    (
        "_Q23sim8SimState$sApproxSpeedMagnitudeFactor",
        Ok(
            "sim::SimState::sApproxSpeedMagnitudeFactor",
        ),
    ),
    (
        "_Q23sim14ManualSimState$sIdentity",
        Ok(
            "sim::ManualSimState::sIdentity",
        ),
    ),
    (
        "_Q23sim19SimStateArticulated$sUseInventoryObject",
        Ok(
            "sim::SimStateArticulated::sUseInventoryObject",
        ),
    ),
    (
        "_Q23sim15SimulatedObject$sSimulatedObjectRefIndex",
        Ok(
            "sim::SimulatedObject::sSimulatedObjectRefIndex",
        ),
    ),
    (
        "_Q23sim13PhysicsObject$sSmall_Speed",
        Ok(
            "sim::PhysicsObject::sSmall_Speed",
        ),
    ),
    (
        "_Q23sim13PhysicsObject$sThresholdTimeForRestingTest",
        Ok(
            "sim::PhysicsObject::sThresholdTimeForRestingTest",
        ),
    ),
    (
        "_Q23sim13PhysicsObject$sThresholdTimeForContactFriction",
        Ok(
            "sim::PhysicsObject::sThresholdTimeForContactFriction",
        ),
    ),
    (
        "_Q23sim9VirtualCM$sDefault_invTA",
        Ok(
            "sim::VirtualCM::sDefault_invTA",
        ),
    ),
    (
        "_Q23sim9VirtualCM$sDefault_invTV",
        Ok(
            "sim::VirtualCM::sDefault_invTV",
        ),
    ),
    (
        "_Q23sim9VirtualCM$sDefault_invTP",
        Ok(
            "sim::VirtualCM::sDefault_invTP",
        ),
    ),
    (
        "_Q23sim9VirtualCM$sDefault_restP",
        Ok(
            "sim::VirtualCM::sDefault_restP",
        ),
    ),
    (
        "_Q23sim9VirtualCM$sDefault_restV",
        Ok(
            "sim::VirtualCM::sDefault_restV",
        ),
    ),
    (
        "_Q23sim21CollisionAnalyserData$sDefaultCollisionType",
        Ok(
            "sim::CollisionAnalyserData::sDefaultCollisionType",
        ),
    ),
    (
        "_Q23sim21CollisionAnalyserInfo$sDefaultBounceSpeedThreshold",
        Ok(
            "sim::CollisionAnalyserInfo::sDefaultBounceSpeedThreshold",
        ),
    ),
    (
        "_Q23sim21CollisionAnalyserInfo$sDefaultBounceTimeThreshold",
        Ok(
            "sim::CollisionAnalyserInfo::sDefaultBounceTimeThreshold",
        ),
    ),
    (
        "_Q23sim21CollisionAnalyserInfo$sDefaultRollingThreshold",
        Ok(
            "sim::CollisionAnalyserInfo::sDefaultRollingThreshold",
        ),
    ),
    (
        "_Q23sim21CollisionAnalyserInfo$sDefaultLowerThresholdFactor",
        Ok(
            "sim::CollisionAnalyserInfo::sDefaultLowerThresholdFactor",
        ),
    ),
    (
        "_Q23sim21CollisionAnalyserInfo$sDefaultUpperThresholdFactor",
        Ok(
            "sim::CollisionAnalyserInfo::sDefaultUpperThresholdFactor",
        ),
    ),
    (
        "_Q23sim17CollisionDetector$sSafeTimeBeforeCollision",
        Ok(
            "sim::CollisionDetector::sSafeTimeBeforeCollision",
        ),
    ),
    (
        "_17FeTextBibleLoader$s_onlyLoadCurrentLanguage",
        Ok(
            "FeTextBibleLoader::s_onlyLoadCurrentLanguage",
        ),
    ),
    (
        "_7Scrooby$g_CameraNearPlane",
        Ok(
            "Scrooby::g_CameraNearPlane",
        ),
    ),
    (
        "_7Scrooby$g_CameraFarPlane",
        Ok(
            "Scrooby::g_CameraFarPlane",
        ),
    ),
    (
        "g_screenScalingEnabled",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_screenScaleX",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_screenScaleY",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_screenScaleZ",
        Err(
            NotMangled,
        ),
    ),
    (
        "_11FeTextBible$m_index",
        Ok(
            "FeTextBible::m_index",
        ),
    ),
    (
        "FILENAME_SUFFIX_FOR_HALLOWEEN",
        Err(
            NotMangled,
        ),
    ),
    (
        "FILENAME_SUFFIX_FOR_THANKSGIVING",
        Err(
            NotMangled,
        ),
    ),
    (
        "FILENAME_SUFFIX_FOR_CHRISTMAS",
        Err(
            NotMangled,
        ),
    ),
    (
        "_Q27Scrooby3App$sInstance",
        Ok(
            "Scrooby::App::sInstance",
        ),
    ),
    (
        "g_ScroobyMemoryCount",
        Err(
            NotMangled,
        ),
    ),
    (
        "_5FeApp$s_Instance",
        Ok(
            "FeApp::s_Instance",
        ),
    ),
    (
        "_20BillboardQuadManager$spInstance",
        Ok(
            "BillboardQuadManager::spInstance",
        ),
    ),
    (
        "_20BillboardQuadManager$sCollectPass",
        Ok(
            "BillboardQuadManager::sCollectPass",
        ),
    ),
    (
        "_20BillboardQuadManager$sEnabled",
        Ok(
            "BillboardQuadManager::sEnabled",
        ),
    ),
    (
        "_5tName$s_allocator",
        Ok(
            "tName::s_allocator",
        ),
    ),
    (
        "_12tMatrixStack$tmp",
        Ok(
            "tMatrixStack::tmp",
        ),
    ),
    (
        "_12tMatrixStack$tmpv",
        Ok(
            "tMatrixStack::tmpv",
        ),
    ),
    (
        "_7tSprite$createLinear",
        Ok(
            "tSprite::createLinear",
        ),
    ),
    (
        "_10tSetLoader$m_Random",
        Ok(
            "tSetLoader::m_Random",
        ),
    ),
    (
        "gFruitless",
        Err(
            NotMangled,
        ),
    ),
    (
        "_3p3d$platform",
        Ok(
            "p3d::platform",
        ),
    ),
    (
        "_3p3d$context",
        Ok(
            "p3d::context",
        ),
    ),
    (
        "_3p3d$inventory",
        Ok(
            "p3d::inventory",
        ),
    ),
    (
        "_3p3d$stack",
        Ok(
            "p3d::stack",
        ),
    ),
    (
        "_3p3d$loadManager",
        Ok(
            "p3d::loadManager",
        ),
    ),
    (
        "_3p3d$pddi",
        Ok(
            "p3d::pddi",
        ),
    ),
    (
        "_3p3d$device",
        Ok(
            "p3d::device",
        ),
    ),
    (
        "_3p3d$display",
        Ok(
            "p3d::display",
        ),
    ),
    (
        "_24ParticleSystemRandomData$msCurInt",
        Ok(
            "ParticleSystemRandomData::msCurInt",
        ),
    ),
    (
        "_24ParticleSystemRandomData$msCurFloat",
        Ok(
            "ParticleSystemRandomData::msCurFloat",
        ),
    ),
    (
        "_8tFileFTT$mTaskedOutTime",
        Ok(
            "tFileFTT::mTaskedOutTime",
        ),
    ),
    (
        "_14tBaseGenerator$randomGenerator",
        Ok(
            "tBaseGenerator::randomGenerator",
        ),
    ),
    (
        "_17ps2LightmapShader$textureTable",
        Ok(
            "ps2LightmapShader::textureTable",
        ),
    ),
    (
        "_17ps2LightmapShader$intTable",
        Ok(
            "ps2LightmapShader::intTable",
        ),
    ),
    (
        "_17ps2LightmapShader$g_context",
        Ok(
            "ps2LightmapShader::g_context",
        ),
    ),
    (
        "_20ps2LightweightShader$g_context",
        Ok(
            "ps2LightweightShader::g_context",
        ),
    ),
    (
        "_20ps2LightweightShader$textureTable",
        Ok(
            "ps2LightweightShader::textureTable",
        ),
    ),
    (
        "_20ps2LightweightShader$floatTable",
        Ok(
            "ps2LightweightShader::floatTable",
        ),
    ),
    (
        "_13ps2ToonShader$colourTable",
        Ok(
            "ps2ToonShader::colourTable",
        ),
    ),
    (
        "_13ps2ToonShader$textureTable",
        Ok(
            "ps2ToonShader::textureTable",
        ),
    ),
    (
        "_13ps2ToonShader$intTable",
        Ok(
            "ps2ToonShader::intTable",
        ),
    ),
    (
        "_13ps2ToonShader$floatTable",
        Ok(
            "ps2ToonShader::floatTable",
        ),
    ),
    (
        "_13ps2ToonShader$toonProgram",
        Ok(
            "ps2ToonShader::toonProgram",
        ),
    ),
    (
        "_15ps2SimpleShader$colourTable",
        Ok(
            "ps2SimpleShader::colourTable",
        ),
    ),
    (
        "_15ps2SimpleShader$textureTable",
        Ok(
            "ps2SimpleShader::textureTable",
        ),
    ),
    (
        "_15ps2SimpleShader$intTable",
        Ok(
            "ps2SimpleShader::intTable",
        ),
    ),
    (
        "_15ps2SimpleShader$floatTable",
        Ok(
            "ps2SimpleShader::floatTable",
        ),
    ),
    (
        "_15ps2SimpleShader$g_context",
        Ok(
            "ps2SimpleShader::g_context",
        ),
    ),
    (
        "g_MipL",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_MipK",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_RefractionShadersLoaded",
        Err(
            NotMangled,
        ),
    ),
    (
        "_19ps2RefractionShader$colourTable",
        Ok(
            "ps2RefractionShader::colourTable",
        ),
    ),
    (
        "_19ps2RefractionShader$textureTable",
        Ok(
            "ps2RefractionShader::textureTable",
        ),
    ),
    (
        "_19ps2RefractionShader$intTable",
        Ok(
            "ps2RefractionShader::intTable",
        ),
    ),
    (
        "_19ps2RefractionShader$floatTable",
        Ok(
            "ps2RefractionShader::floatTable",
        ),
    ),
    (
        "_19ps2ReflectionShader$colourTable",
        Ok(
            "ps2ReflectionShader::colourTable",
        ),
    ),
    (
        "_19ps2ReflectionShader$textureTable",
        Ok(
            "ps2ReflectionShader::textureTable",
        ),
    ),
    (
        "_19ps2ReflectionShader$intTable",
        Ok(
            "ps2ReflectionShader::intTable",
        ),
    ),
    (
        "_19ps2ReflectionShader$floatTable",
        Ok(
            "ps2ReflectionShader::floatTable",
        ),
    ),
    (
        "_19ps2ReflectionShader$vectorTable",
        Ok(
            "ps2ReflectionShader::vectorTable",
        ),
    ),
    (
        "VU1_BASE",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_UNLIT_TRI",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_LIT_TRI",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_DONOTHING",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_UNLIT_TRI_MT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_LOAD_CONTEXT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_REFRACT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_TOON",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_LINE",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_SKINBLEND_NT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_SKINBLEND1B_NT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_SKINBLEND_CT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_SKINBLEND1B_CT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_SHADOW_VOL",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_REFLECT",
        Err(
            NotMangled,
        ),
    ),
    (
        "VU1_REFRACT_LIT",
        Err(
            NotMangled,
        ),
    ),
    (
        "_14pddiBaseShader$currentUID",
        Ok(
            "pddiBaseShader::currentUID",
        ),
    ),
    (
        "_14pddiBaseShader$newUID",
        Ok(
            "pddiBaseShader::newUID",
        ),
    ),
    (
        "_14pddiBaseShader$lastShader",
        Ok(
            "pddiBaseShader::lastShader",
        ),
    ),
    (
        "_8pddiFont$xscale",
        Ok(
            "pddiFont::xscale",
        ),
    ),
    (
        "_8pddiFont$yscale",
        Ok(
            "pddiFont::yscale",
        ),
    ),
    (
        "png_libpng_ver",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_sig",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_IHDR",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_IDAT",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_IEND",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_PLTE",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_bKGD",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_cHRM",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_gAMA",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_hIST",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_oFFs",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_pCAL",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_pHYs",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_sBIT",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_sRGB",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_tEXt",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_tIME",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_tRNS",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_zTXt",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_pass_start",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_pass_inc",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_pass_ystart",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_pass_yinc",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_pass_mask",
        Err(
            NotMangled,
        ),
    ),
    (
        "png_pass_dsp_mask",
        Err(
            NotMangled,
        ),
    ),
    (
        "z_errmsg",
        Err(
            NotMangled,
        ),
    ),
    (
        "inflate_mask",
        Err(
            NotMangled,
        ),
    ),
    (
        "_Q218RadicalMathLibrary6Spline$MBSpline",
        Ok(
            "RadicalMathLibrary::Spline::MBSpline",
        ),
    ),
    (
        "_Q218RadicalMathLibrary6Spline$MBezier",
        Ok(
            "RadicalMathLibrary::Spline::MBezier",
        ),
    ),
    (
        "_Q218RadicalMathLibrary6Spline$MHermite",
        Ok(
            "RadicalMathLibrary::Spline::MHermite",
        ),
    ),
    (
        "_Q218RadicalMathLibrary6Spline$MBSplineD1",
        Ok(
            "RadicalMathLibrary::Spline::MBSplineD1",
        ),
    ),
    (
        "_Q218RadicalMathLibrary6Spline$MBezierD1",
        Ok(
            "RadicalMathLibrary::Spline::MBezierD1",
        ),
    ),
    (
        "_Q218RadicalMathLibrary6Spline$MHermiteD1",
        Ok(
            "RadicalMathLibrary::Spline::MHermiteD1",
        ),
    ),
    (
        "_Q218RadicalMathLibrary6Spline$MBSplineD2",
        Ok(
            "RadicalMathLibrary::Spline::MBSplineD2",
        ),
    ),
    (
        "_Q218RadicalMathLibrary6Spline$MBezierD2",
        Ok(
            "RadicalMathLibrary::Spline::MBezierD2",
        ),
    ),
    (
        "_Q218RadicalMathLibrary6Spline$MHermiteD2",
        Ok(
            "RadicalMathLibrary::Spline::MHermiteD2",
        ),
    ),
    (
        "_8radmusic$debug_channel",
        Ok(
            "radmusic::debug_channel",
        ),
    ),
    (
        "_8radmusic$g_p_performance_list_head",
        Ok(
            "radmusic::g_p_performance_list_head",
        ),
    ),
    (
        "_8radmusic$g_audio_format_info",
        Ok(
            "radmusic::g_audio_format_info",
        ),
    ),
    (
        "_8radmusic$g_p_stream_graph_nodes",
        Ok(
            "radmusic::g_p_stream_graph_nodes",
        ),
    ),
    (
        "_8radmusic$g_p_clip_player_nodes",
        Ok(
            "radmusic::g_p_clip_player_nodes",
        ),
    ),
    (
        "_8radmusic$g_num_stream_graphs",
        Ok(
            "radmusic::g_num_stream_graphs",
        ),
    ),
    (
        "_8radmusic$g_num_clip_players",
        Ok(
            "radmusic::g_num_clip_players",
        ),
    ),
    (
        "_6memory$g_allocator",
        Ok(
            "memory::g_allocator",
        ),
    ),
    (
        "_6memory$g_p_tag",
        Ok(
            "memory::g_p_tag",
        ),
    ),
    (
        "_3ods$g_type_functions",
        Ok(
            "ods::g_type_functions",
        ),
    ),
    (
        "_3ods$stdio_stream_functions",
        Ok(
            "ods::stdio_stream_functions",
        ),
    ),
    (
        "_3ods$radfile_stream_functions",
        Ok(
            "ods::radfile_stream_functions",
        ),
    ),
    (
        "_3ods$radload_stream_functions",
        Ok(
            "ods::radload_stream_functions",
        ),
    ),
    (
        "_3ods$memory_stream_functions",
        Ok(
            "ods::memory_stream_functions",
        ),
    ),
    (
        "_3ods$debug_printf_stream_functions",
        Ok(
            "ods::debug_printf_stream_functions",
        ),
    ),
    (
        "_8radmusic$g_state_functions",
        Ok(
            "radmusic::g_state_functions",
        ),
    ),
    (
        "_8radmusic$g_p_event_handlers",
        Ok(
            "radmusic::g_p_event_handlers",
        ),
    ),
    (
        "_8radmusic$g_stream_graph_stitch_callback",
        Ok(
            "radmusic::g_stream_graph_stitch_callback",
        ),
    ),
    (
        "_19radSoundHalListener$s_pTheRadSoundSoftwareListener",
        Ok(
            "radSoundHalListener::s_pTheRadSoundSoftwareListener",
        ),
    ),
    (
        "_t14radLinkedClass1Z26radSoundHalPositionalGroup$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<radSoundHalPositionalGroup>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z26radSoundHalPositionalGroup$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<radSoundHalPositionalGroup>::s_pLinkedClassTail",
        ),
    ),
    (
        "_23radSoundHalMemoryRegion$s_MemorySpace",
        Ok(
            "radSoundHalMemoryRegion::s_MemorySpace",
        ),
    ),
    (
        "_23radSoundHalMemoryRegion$s_pRadSoundMemoryRegion_Root",
        Ok(
            "radSoundHalMemoryRegion::s_pRadSoundMemoryRegion_Root",
        ),
    ),
    (
        "_23radSoundHalMemoryRegion$s_Alignment",
        Ok(
            "radSoundHalMemoryRegion::s_Alignment",
        ),
    ),
    (
        "_17radSoundHalSystem$s_pRsdSystem",
        Ok(
            "radSoundHalSystem::s_pRsdSystem",
        ),
    ),
    (
        "_17radSoundEffectPs2$s_aEffectModeInfo",
        Ok(
            "radSoundEffectPs2::s_aEffectModeInfo",
        ),
    ),
    (
        "_17radSoundEffectPs2$s_NumberOfEffectModes",
        Ok(
            "radSoundEffectPs2::s_NumberOfEffectModes",
        ),
    ),
    (
        "g_pRadSoundIopVoiceServerFx_Initialize_Ret",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_pRadSoundIopVoiceServerFx_Initialize_Params",
        Err(
            NotMangled,
        ),
    ),
    (
        "_14radSoundIopPs2$s_pTheSoundRpcClient",
        Ok(
            "radSoundIopPs2::s_pTheSoundRpcClient",
        ),
    ),
    (
        "g_SifClientData_Load",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_IopLoadServerFxParamBuffer",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_IopLoadServerFxRetBuffer",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_SifClientData_Voice",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_IopVoiceServerFxParamBuffer",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_RadSoundIopVoiceServerFx_WriteVoiceState_Params_Sending",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_RadSoundIopVoiceServerFx_WriteVoiceState_Params_Current",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_RadSoundEeVoiceServerFx_ReadVoiceState_Params_Receiving",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_RadSoundEeVoiceServerFx_ReadVoiceState_Params_Current",
        Err(
            NotMangled,
        ),
    ),
    (
        "_37radSoundHalBufferAsyncRequestAdpcmPs2$s_pRequestHead",
        Ok(
            "radSoundHalBufferAsyncRequestAdpcmPs2::s_pRequestHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z22radSoundBufferAdpcmPs2$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<radSoundBufferAdpcmPs2>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z22radSoundBufferAdpcmPs2$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<radSoundBufferAdpcmPs2>::s_pLinkedClassTail",
        ),
    ),
    (
        "_t18radSoundPoolObject1Z29radSoundHalAdpcmBufferClearer$s_pIRadMemoryPool",
        Ok(
            "radSoundPoolObject<radSoundHalAdpcmBufferClearer>::s_pIRadMemoryPool",
        ),
    ),
    (
        "_t18radSoundPoolObject1Z33radSoundBufferAsyncLoaderAdpcmPs2$s_pIRadMemoryPool",
        Ok(
            "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2>::s_pIRadMemoryPool",
        ),
    ),
    (
        "g_UsedCoreVoiceBitMask",
        Err(
            NotMangled,
        ),
    ),
    (
        "_t14radLinkedClass1Z21radSoundVoiceAdpcmPs2$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<radSoundVoiceAdpcmPs2>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z21radSoundVoiceAdpcmPs2$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<radSoundVoiceAdpcmPs2>::s_pLinkedClassTail",
        ),
    ),
    (
        "_t14radLinkedClass1Z12radSoundClip$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<radSoundClip>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z12radSoundClip$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<radSoundClip>::s_pLinkedClassTail",
        ),
    ),
    (
        "gpFpc",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_VoiceStoppingPlayingSilence",
        Err(
            NotMangled,
        ),
    ),
    (
        "_14radSoundObject$s_SoundObjectName",
        Ok(
            "radSoundObject::s_SoundObjectName",
        ),
    ),
    (
        "_14radSoundObject$s_SoundObjectCount",
        Ok(
            "radSoundObject::s_SoundObjectCount",
        ),
    ),
    (
        "_23radSoundUpdatableObject$s_Updating",
        Ok(
            "radSoundUpdatableObject::s_Updating",
        ),
    ),
    (
        "_23radSoundUpdatableObject$s_ListWasChanged",
        Ok(
            "radSoundUpdatableObject::s_ListWasChanged",
        ),
    ),
    (
        "_23radSoundUpdatableObject$s_pRadSoundUpdateHead",
        Ok(
            "radSoundUpdatableObject::s_pRadSoundUpdateHead",
        ),
    ),
    (
        "_23radSoundUpdatableObject$s_UpdatableCount",
        Ok(
            "radSoundUpdatableObject::s_UpdatableCount",
        ),
    ),
    (
        "_23radSoundUpdatableObject$s_UpdatingCount",
        Ok(
            "radSoundUpdatableObject::s_UpdatingCount",
        ),
    ),
    (
        "radSoundDebugChannel",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_pRotPoints",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_NumRotPoints",
        Err(
            NotMangled,
        ),
    ),
    (
        "_t14radLinkedClass1Z13IRadNameSpace$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<IRadNameSpace>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z13IRadNameSpace$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<IRadNameSpace>::s_pLinkedClassTail",
        ),
    ),
    (
        "_11ParserConst$TOK_CREATE",
        Ok(
            "ParserConst::TOK_CREATE",
        ),
    ),
    (
        "_11ParserConst$TOK_WITH",
        Ok(
            "ParserConst::TOK_WITH",
        ),
    ),
    (
        "_11ParserConst$TOK_NAMED",
        Ok(
            "ParserConst::TOK_NAMED",
        ),
    ),
    (
        "_11ParserConst$TOK_OPTION",
        Ok(
            "ParserConst::TOK_OPTION",
        ),
    ),
    (
        "_11ParserConst$TOK_PC",
        Ok(
            "ParserConst::TOK_PC",
        ),
    ),
    (
        "_11ParserConst$TOK_PS2",
        Ok(
            "ParserConst::TOK_PS2",
        ),
    ),
    (
        "_11ParserConst$TOK_XBOX",
        Ok(
            "ParserConst::TOK_XBOX",
        ),
    ),
    (
        "_11ParserConst$TOK_GCN",
        Ok(
            "ParserConst::TOK_GCN",
        ),
    ),
    (
        "_11ParserConst$TOK_REF",
        Ok(
            "ParserConst::TOK_REF",
        ),
    ),
    (
        "_11ParserConst$TOK_LCURLY",
        Ok(
            "ParserConst::TOK_LCURLY",
        ),
    ),
    (
        "_11ParserConst$TOK_RCURLY",
        Ok(
            "ParserConst::TOK_RCURLY",
        ),
    ),
    (
        "_11ParserConst$TOK_LPAREN",
        Ok(
            "ParserConst::TOK_LPAREN",
        ),
    ),
    (
        "_11ParserConst$TOK_RPAREN",
        Ok(
            "ParserConst::TOK_RPAREN",
        ),
    ),
    (
        "_11ParserConst$TOK_BOOL",
        Ok(
            "ParserConst::TOK_BOOL",
        ),
    ),
    (
        "_11ParserConst$TOK_CHAR",
        Ok(
            "ParserConst::TOK_CHAR",
        ),
    ),
    (
        "_11ParserConst$TOK_UCHAR",
        Ok(
            "ParserConst::TOK_UCHAR",
        ),
    ),
    (
        "_11ParserConst$TOK_SHORT",
        Ok(
            "ParserConst::TOK_SHORT",
        ),
    ),
    (
        "_11ParserConst$TOK_USHORT",
        Ok(
            "ParserConst::TOK_USHORT",
        ),
    ),
    (
        "_11ParserConst$TOK_INT",
        Ok(
            "ParserConst::TOK_INT",
        ),
    ),
    (
        "_11ParserConst$TOK_UINT",
        Ok(
            "ParserConst::TOK_UINT",
        ),
    ),
    (
        "_11ParserConst$TOK_LONG",
        Ok(
            "ParserConst::TOK_LONG",
        ),
    ),
    (
        "_11ParserConst$TOK_ULONG",
        Ok(
            "ParserConst::TOK_ULONG",
        ),
    ),
    (
        "_11ParserConst$TOK_FLOAT",
        Ok(
            "ParserConst::TOK_FLOAT",
        ),
    ),
    (
        "_11ParserConst$TOK_DOUBLE",
        Ok(
            "ParserConst::TOK_DOUBLE",
        ),
    ),
    (
        "_11ParserConst$TOK_IREFCOUNT",
        Ok(
            "ParserConst::TOK_IREFCOUNT",
        ),
    ),
    (
        "_18IRadTypeInfoSystem$ms_pEmptyString",
        Ok(
            "IRadTypeInfoSystem::ms_pEmptyString",
        ),
    ),
    (
        "_18IRadTypeInfoSystem$s_pTheTypeInfoSystem",
        Ok(
            "IRadTypeInfoSystem::s_pTheTypeInfoSystem",
        ),
    ),
    (
        "radMovieDebugChannel2",
        Err(
            NotMangled,
        ),
    ),
    (
        "_t14radLinkedClass1Z14radMoviePlayer$s_pLinkedClassHead",
        Ok(
            "radLinkedClass<radMoviePlayer>::s_pLinkedClassHead",
        ),
    ),
    (
        "_t14radLinkedClass1Z14radMoviePlayer$s_pLinkedClassTail",
        Ok(
            "radLinkedClass<radMoviePlayer>::s_pLinkedClassTail",
        ),
    ),
    (
        "_14radMovieIpuPs2$s_refTheRadMovieIpuPs2",
        Ok(
            "radMovieIpuPs2::s_refTheRadMovieIpuPs2",
        ),
    ),
    (
        "g_rDebugHaltOnAsserts",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_pDebugHandler",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_AllowDebugOutput",
        Err(
            NotMangled,
        ),
    ),
    (
        "_9radObject$s_Allocator",
        Ok(
            "radObject::s_Allocator",
        ),
    ),
    (
        "g_StartOfMemory",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_SizeOfMemory",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_EndOfMemory",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_pSBrkPointer",
        Err(
            NotMangled,
        ),
    ),
    (
        "gEmergencyMemory",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_pRadMemoryAllocator_Malloc",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_pRadMemoryOutOfMemoryCallback",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_pRadMemoryOutOfMemoryCallbackUserData",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_CurrentMemoryIdentification",
        Err(
            NotMangled,
        ),
    ),
    (
        "g_pAllocationName",
        Err(
            NotMangled,
        ),
    ),
    (
        "radMemorySpace_OptimalAlignment",
        Err(
            NotMangled,
        ),
    ),
    (
        "radMemorySpace_OptimalMultiple",
        Err(
            NotMangled,
        ),
    ),
    (
        "_36MemorySpaceAsyncRequest_CopyIopToIop$s_pTransferBuffer",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::s_pTransferBuffer",
        ),
    ),
    (
        "_36MemorySpaceAsyncRequest_CopyIopToIop$s_TransferBufferSize",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::s_TransferBufferSize",
        ),
    ),
    (
        "_23MemorySpaceAsyncRequest$s_pRequest_Head",
        Ok(
            "MemorySpaceAsyncRequest::s_pRequest_Head",
        ),
    ),
    (
        "g_RadMemoryAllocator_Iop",
        Err(
            NotMangled,
        ),
    ),
    (
        "_9radThread$s_PriorityMap",
        Ok(
            "radThread::s_PriorityMap",
        ),
    ),
    (
        "_9radThread$s_AlarmId",
        Ok(
            "radThread::s_AlarmId",
        ),
    ),
    (
        "_14radTextDisplay$m_Initialized",
        Ok(
            "radTextDisplay::m_Initialized",
        ),
    ),
    (
        "_14radTextDisplay$m_Alloc",
        Ok(
            "radTextDisplay::m_Alloc",
        ),
    ),
    (
        "_13radFileSystem$s_Initialized",
        Ok(
            "radFileSystem::s_Initialized",
        ),
    ),
    (
        "_13radFileSystem$s_Allocator",
        Ok(
            "radFileSystem::s_Allocator",
        ),
    ),
    (
        "_13radFileSystem$s_RemoteDriveConnectTimeout",
        Ok(
            "radFileSystem::s_RemoteDriveConnectTimeout",
        ),
    ),
    (
        "_13radFileSystem$s_TotalDriveCount",
        Ok(
            "radFileSystem::s_TotalDriveCount",
        ),
    ),
    (
        "_13radFileSystem$s_AutoMount",
        Ok(
            "radFileSystem::s_AutoMount",
        ),
    ),
    (
        "_13radFileSystem$s_pMutex",
        Ok(
            "radFileSystem::s_pMutex",
        ),
    ),
    (
        "s_pDriveThread",
        Err(
            NotMangled,
        ),
    ),
    (
        "s_pMutex",
        Err(
            NotMangled,
        ),
    ),
    (
        "s_TransferBuffer",
        Err(
            NotMangled,
        ),
    ),
    (
        "s_CacheHandle",
        Err(
            NotMangled,
        ),
    ),
    (
        "s_CachePosition",
        Err(
            NotMangled,
        ),
    ),
    (
        "s_CacheState",
        Err(
            NotMangled,
        ),
    ),
    (
        "iconSys",
        Err(
            NotMangled,
        ),
    ),
    (
        "tmpIconSys",
        Err(
            NotMangled,
        ),
    ),
    (
        "s_TransferBufferSpace",
        Err(
            NotMangled,
        ),
    ),
    (
        "s_CRCIsInitialized",
        Err(
            NotMangled,
        ),
    ),
    (
        "s_CRCTable",
        Err(
            NotMangled,
        ),
    ),
    (
        "devARpcData",
        Err(
            NotMangled,
        ),
    ),
    (
        "_12ILoadManager$s_instance",
        Ok(
            "ILoadManager::s_instance",
        ),
    ),
    (
        "radLoad",
        Err(
            NotMangled,
        ),
    ),
    (
        "_13radLoadObject$s_allocator",
        Ok(
            "radLoadObject::s_allocator",
        ),
    ),
    (
        "_impure_ptr",
        Err(
            NotMangled,
        ),
    ),
    (
        "__malloc_av_",
        Err(
            InvalidSpecialMethod(
                "malloc_av_",
            ),
        ),
    ),
    (
        "__malloc_trim_threshold",
        Err(
            InvalidSpecialMethod(
                "malloc_trim_threshold",
            ),
        ),
    ),
    (
        "__malloc_top_pad",
        Err(
            InvalidSpecialMethod(
                "malloc_top_pad",
            ),
        ),
    ),
    (
        "__malloc_sbrk_base",
        Err(
            InvalidSpecialMethod(
                "malloc_sbrk_base",
            ),
        ),
    ),
    (
        "__malloc_max_sbrked_mem",
        Err(
            InvalidSpecialMethod(
                "malloc_max_sbrked_mem",
            ),
        ),
    ),
    (
        "__malloc_max_total_mem",
        Err(
            InvalidSpecialMethod(
                "malloc_max_total_mem",
            ),
        ),
    ),
    (
        "__malloc_current_mallinfo",
        Err(
            InvalidSpecialMethod(
                "malloc_current_mallinfo",
            ),
        ),
    ),
    (
        "__mb_cur_max",
        Err(
            InvalidSpecialMethod(
                "mb_cur_max",
            ),
        ),
    ),
    (
        "_GLOBAL_$F$__7istreamiP9streambufP7ostream",
        Ok(
            "global frames keyed to istream::istream(int, streambuf *, ostream *)",
        ),
    ),
    (
        "_GLOBAL_$F$getline__7istreamPcic",
        Ok(
            "global frames keyed to istream::getline(char *, int, char)",
        ),
    ),
    (
        "_GLOBAL_$F$scan__7istreamPCce",
        Ok(
            "global frames keyed to istream::scan(char const *, ...)",
        ),
    ),
    (
        "_GLOBAL_$F$vscan__9streambufPCcPcP3ios",
        Ok(
            "global frames keyed to streambuf::vscan(char const *, char *, ios *)",
        ),
    ),
    (
        "cout",
        Err(
            NotMangled,
        ),
    ),
    (
        "cerr",
        Err(
            NotMangled,
        ),
    ),
    (
        "cin",
        Err(
            NotMangled,
        ),
    ),
    (
        "clog",
        Err(
            NotMangled,
        ),
    ),
    (
        "_GLOBAL_$F$cout",
        Ok(
            "global frames keyed to cout",
        ),
    ),
    (
        "io_defs__",
        Err(
            NotMangled,
        ),
    ),
    (
        "_GLOBAL_$F$_un_link__9streambuf",
        Ok(
            "global frames keyed to streambuf::_un_link(void)",
        ),
    ),
    (
        "_GLOBAL_$F$init__7filebuf",
        Ok(
            "global frames keyed to filebuf::init(void)",
        ),
    ),
    (
        "_GLOBAL_$F$__as__22_IO_istream_withassignR7istream",
        Ok(
            "global frames keyed to _IO_istream_withassign::operator=(istream &)",
        ),
    ),
    (
        "_IO_stdin_",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_stdout_",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_stderr_",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_stdin_buf",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_stdout_buf",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_stderr_buf",
        Err(
            NotMangled,
        ),
    ),
    (
        "_IO_list_all",
        Err(
            NotMangled,
        ),
    ),
    (
        "_GLOBAL_$F$_IO_stdin_",
        Ok(
            "global frames keyed to _IO_stdin_",
        ),
    ),
    (
        "_IO_file_jumps",
        Err(
            NotMangled,
        ),
    ),
    (
        "_GLOBAL_$F$__8stdiobufP7__sFILE",
        Ok(
            "global frames keyed to stdiobuf::stdiobuf(__sFILE *)",
        ),
    ),
    (
        "_IO_cleanup_registration_needed",
        Err(
            NotMangled,
        ),
    ),
    (
        "dch",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sce_sdr_gDMA0CB",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sce_sdr_gDMA1CB",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sce_sdr_gIRQCB",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sce_sdr_transIntr0Hdr",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sce_sdr_transIntr1Hdr",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sce_sdr_spu2IntrHdr",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sce_sdr_transIntr0Arg",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sce_sdr_transIntr1Arg",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sce_sdr_spu2IntrArg",
        Err(
            NotMangled,
        ),
    ),
    (
        "SCE_CD_debug",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_ncmd_semid",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_scmd_semid",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_c_cb_sem",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_ee_read_mode",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdCbfunc_num",
        Err(
            NotMangled,
        ),
    ),
    (
        "sceCdCbfunc_number",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_ncmdrdata",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_ncmdsdata",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_rd_intr_data",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_Read_cur_pos",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_cd_ncmd",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_scmdrdata",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_scmdsdata",
        Err(
            NotMangled,
        ),
    ),
    (
        "_sceCd_cd_scmd",
        Err(
            NotMangled,
        ),
    ),
    (
        "__ps2_klibinfo__",
        Err(
            UnrecognizedSpecialMethod(
                "ps2_klibinfo",
            ),
        ),
    ),
    (
        "_sceFs_q",
        Err(
            NotMangled,
        ),
    ),
    (
        "__sce_sema_id",
        Err(
            InvalidSpecialMethod(
                "sce_sema_id",
            ),
        ),
    ),
    (
        "__sce_eh_sema_id",
        Err(
            InvalidSpecialMethod(
                "sce_eh_sema_id",
            ),
        ),
    ),
    (
        "SysExecPS2Entry",
        Err(
            NotMangled,
        ),
    ),
    (
        "_kTLBRefillHandler",
        Err(
            NotMangled,
        ),
    ),
    (
        "_kDebugHandler",
        Err(
            NotMangled,
        ),
    ),
    (
        "_kExecArg",
        Err(
            NotMangled,
        ),
    ),
    (
        "TLBInfo",
        Err(
            NotMangled,
        ),
    ),
    (
        "__terminate_func",
        Err(
            InvalidCustomNameOnTemplate(
                "erminate_func",
            ),
        ),
    ),
    (
        "_GLOBAL_$F$__default_terminate",
        Ok(
            "global frames keyed to __default_terminate",
        ),
    ),
    (
        "_GLOBAL_$F$terminate__Fv",
        Ok(
            "global frames keyed to terminate(void)",
        ),
    ),
    (
        "_GLOBAL_$F$_$_9type_info",
        Ok(
            "global frames keyed to type_info::~type_info(void)",
        ),
    ),
    (
        "__tiv",
        Ok(
            "void type_info node",
        ),
    ),
    (
        "__tix",
        Ok(
            "long long type_info node",
        ),
    ),
    (
        "__til",
        Ok(
            "long type_info node",
        ),
    ),
    (
        "__tii",
        Ok(
            "int type_info node",
        ),
    ),
    (
        "__tis",
        Ok(
            "short type_info node",
        ),
    ),
    (
        "__tib",
        Ok(
            "bool type_info node",
        ),
    ),
    (
        "__tic",
        Ok(
            "char type_info node",
        ),
    ),
    (
        "__tiw",
        Ok(
            "wchar_t type_info node",
        ),
    ),
    (
        "__tir",
        Ok(
            "long double type_info node",
        ),
    ),
    (
        "__tid",
        Ok(
            "double type_info node",
        ),
    ),
    (
        "__tif",
        Ok(
            "float type_info node",
        ),
    ),
    (
        "__tiUi",
        Ok(
            "unsigned int type_info node",
        ),
    ),
    (
        "__tiUl",
        Ok(
            "unsigned long type_info node",
        ),
    ),
    (
        "__tiUx",
        Ok(
            "unsigned long long type_info node",
        ),
    ),
    (
        "__tiUs",
        Ok(
            "unsigned short type_info node",
        ),
    ),
    (
        "__tiUc",
        Ok(
            "unsigned char type_info node",
        ),
    ),
    (
        "__tiSc",
        Ok(
            "signed char type_info node",
        ),
    ),
    (
        "_GLOBAL_$F$before__C9type_infoRC9type_info",
        Ok(
            "global frames keyed to type_info::before(type_info const &) const",
        ),
    ),
    (
        "__CTOR_LIST__",
        Err(
            UnrecognizedSpecialMethod(
                "CTOR_LIST",
            ),
        ),
    ),
    (
        "__DTOR_LIST__",
        Err(
            UnrecognizedSpecialMethod(
                "DTOR_LIST",
            ),
        ),
    ),
    (
        "sn_frame_table",
        Err(
            NotMangled,
        ),
    ),
    (
        "_vt$t11ChangeState1ZQ211CharacterAi4Loco",
        Ok(
            "ChangeState<CharacterAi::Loco> virtual table",
        ),
    ),
    (
        "_vt$t11ChangeState1ZQ211CharacterAi5InCar",
        Ok(
            "ChangeState<CharacterAi::InCar> virtual table",
        ),
    ),
    (
        "_vt$15ISpatialProxyAA",
        Ok(
            "ISpatialProxyAA virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton13AutomaticDoor",
        Ok(
            "ActionButton::AutomaticDoor virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton12PlayAnimOnce",
        Ok(
            "ActionButton::PlayAnimOnce virtual table",
        ),
    ),
    (
        "_vt$18AssignValueToFloat",
        Ok(
            "AssignValueToFloat virtual table",
        ),
    ),
    (
        "_vt$11DelayAction",
        Ok(
            "DelayAction virtual table",
        ),
    ),
    (
        "_vt$18TriggerEventAction",
        Ok(
            "TriggerEventAction virtual table",
        ),
    ),
    (
        "_vt$Q211CharacterAi6GetOut$13EventListener",
        Ok(
            "CharacterAi::GetOut::EventListener virtual table",
        ),
    ),
    (
        "_vt$Q211CharacterAi6GetOut",
        Ok(
            "CharacterAi::GetOut virtual table",
        ),
    ),
    (
        "_vt$Q211CharacterAi5GetIn$13EventListener",
        Ok(
            "CharacterAi::GetIn::EventListener virtual table",
        ),
    ),
    (
        "_vt$Q211CharacterAi5GetIn",
        Ok(
            "CharacterAi::GetIn virtual table",
        ),
    ),
    (
        "_vt$Q211CharacterAi5InSim",
        Ok(
            "CharacterAi::InSim virtual table",
        ),
    ),
    (
        "_vt$Q211CharacterAi4Loco",
        Ok(
            "CharacterAi::Loco virtual table",
        ),
    ),
    (
        "_vt$Q211CharacterAi5InCar",
        Ok(
            "CharacterAi::InCar virtual table",
        ),
    ),
    (
        "_vt$Q211CharacterAi7NoState",
        Ok(
            "CharacterAi::NoState virtual table",
        ),
    ),
    (
        "_vt$Q211CharacterAi5State",
        Ok(
            "CharacterAi::State virtual table",
        ),
    ),
    (
        "_vt$19ActionButtonManager$13EventListener",
        Ok(
            "ActionButtonManager::EventListener virtual table",
        ),
    ),
    (
        "_vt$19ActionButtonManager",
        Ok(
            "ActionButtonManager virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton12PurchaseSkin",
        Ok(
            "ActionButton::PurchaseSkin virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton11PurchaseCar",
        Ok(
            "ActionButton::PurchaseCar virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton14PurchaseReward",
        Ok(
            "ActionButton::PurchaseReward virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton14TeleportAction$13EventListener",
        Ok(
            "ActionButton::TeleportAction::EventListener virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton14TeleportAction",
        Ok(
            "ActionButton::TeleportAction virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton25GenericEventButtonHandler",
        Ok(
            "ActionButton::GenericEventButtonHandler virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton9NitroIcon$13RespawnEntity",
        Ok(
            "ActionButton::NitroIcon::RespawnEntity virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton9NitroIcon",
        Ok(
            "ActionButton::NitroIcon virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton10WrenchIcon$13RespawnEntity",
        Ok(
            "ActionButton::WrenchIcon::RespawnEntity virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton10WrenchIcon",
        Ok(
            "ActionButton::WrenchIcon virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton15CollectibleCard",
        Ok(
            "ActionButton::CollectibleCard virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton15CollectibleFood",
        Ok(
            "ActionButton::CollectibleFood virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton18RespawnCollectible",
        Ok(
            "ActionButton::RespawnCollectible virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton11Collectible",
        Ok(
            "ActionButton::Collectible virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton8Doorbell",
        Ok(
            "ActionButton::Doorbell virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton6Bounce",
        Ok(
            "ActionButton::Bounce virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton18SummonVehiclePhone",
        Ok(
            "ActionButton::SummonVehiclePhone virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton32SummonVehiclePhoneStaticCallback",
        Ok(
            "ActionButton::SummonVehiclePhoneStaticCallback virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton10PrankPhone",
        Ok(
            "ActionButton::PrankPhone virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton17UseVendingMachine",
        Ok(
            "ActionButton::UseVendingMachine virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton13DestroyObject$18CStatePropListener",
        Ok(
            "ActionButton::DestroyObject::CStatePropListener virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton13DestroyObject",
        Ok(
            "ActionButton::DestroyObject virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton17AutoPlayAnimInOut",
        Ok(
            "ActionButton::AutoPlayAnimInOut virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton16AutoPlayAnimLoop",
        Ok(
            "ActionButton::AutoPlayAnimLoop virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton12AutoPlayAnim",
        Ok(
            "ActionButton::AutoPlayAnim virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton12PlayAnimLoop",
        Ok(
            "ActionButton::PlayAnimLoop virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton8PlayAnim",
        Ok(
            "ActionButton::PlayAnim virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton11ReverseAnim",
        Ok(
            "ActionButton::ReverseAnim virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton10ToggleAnim",
        Ok(
            "ActionButton::ToggleAnim virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton18ActionEventHandler",
        Ok(
            "ActionButton::ActionEventHandler virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton8GetInCar",
        Ok(
            "ActionButton::GetInCar virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton13EnterInterior",
        Ok(
            "ActionButton::EnterInterior virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton10AttachProp",
        Ok(
            "ActionButton::AttachProp virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton11PropHandler",
        Ok(
            "ActionButton::PropHandler virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton13ButtonHandler",
        Ok(
            "ActionButton::ButtonHandler virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton20AnimEntityDSGWrapper",
        Ok(
            "ActionButton::AnimEntityDSGWrapper virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper virtual table",
        ),
    ),
    (
        "_t13_Alloc_traits2Z11ContextEnumZt7s2alloc1Z11ContextEnum$_S_instanceless",
        Ok(
            "_Alloc_traits<ContextEnum, s2alloc<ContextEnum> >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2Z5tNameZt7s2alloc1Z5tName$_S_instanceless",
        Ok(
            "_Alloc_traits<tName, s2alloc<tName> >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2ZP13EventListenerZt7s2alloc1ZP13EventListener$_S_instanceless",
        Ok(
            "_Alloc_traits<EventListener *, s2alloc<EventListener *> >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2ZbZt7s2alloc1Zb$_S_instanceless",
        Ok(
            "_Alloc_traits<bool, s2alloc<bool> >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2ZPQ23sim15CollisionObjectZt7s2alloc1ZPQ23sim15CollisionObject$_S_instanceless",
        Ok(
            "_Alloc_traits<sim::CollisionObject *, s2alloc<sim::CollisionObject *> >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2Zt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSGZt7s2alloc1Zt10MapElement2ZPQ23sim15CollisionObjectZP11DynaPhysDSG$_S_instanceless",
        Ok(
            "_Alloc_traits<MapElement<sim::CollisionObject *, DynaPhysDSG *>, s2alloc<MapElement<sim::CollisionObject *, DynaPhysDSG *> > >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2ZQ216IntersectionList13LineSegment2DZt7s2alloc1ZQ216IntersectionList13LineSegment2D$_S_instanceless",
        Ok(
            "_Alloc_traits<IntersectionList::LineSegment2D, s2alloc<IntersectionList::LineSegment2D> >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2Zt10MapElement2Z13tUidUnalignedZP5tPoseZt7s2alloc1Zt10MapElement2Z13tUidUnalignedZP5tPose$_S_instanceless",
        Ok(
            "_Alloc_traits<MapElement<tUidUnaligned, tPose *>, s2alloc<MapElement<tUidUnaligned, tPose *> > >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2ZP10IEntityDSGZt7s2alloc1ZP10IEntityDSG$_S_instanceless",
        Ok(
            "_Alloc_traits<IEntityDSG *, s2alloc<IEntityDSG *> >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2ZQ210WorldScene9zSortBlahZt7s2alloc1ZQ210WorldScene9zSortBlah$_S_instanceless",
        Ok(
            "_Alloc_traits<WorldScene::zSortBlah, s2alloc<WorldScene::zSortBlah> >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2Zt10MapElement2ZQ212ParticleEnum10ParticleIDZiZt7s2alloc1Zt10MapElement2ZQ212ParticleEnum10ParticleIDZi$_S_instanceless",
        Ok(
            "_Alloc_traits<MapElement<ParticleEnum::ParticleID, int>, s2alloc<MapElement<ParticleEnum::ParticleID, int> > >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2ZQ215GeometryVehicle22VehicleFrameControllerZt7s2alloc1ZQ215GeometryVehicle22VehicleFrameController$_S_instanceless",
        Ok(
            "_Alloc_traits<GeometryVehicle::VehicleFrameController, s2alloc<GeometryVehicle::VehicleFrameController> >::_S_instanceless",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z18ActionEventLocator",
        Ok(
            "radLoadInventory::SafeCast<ActionEventLocator> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z15CarStartLocator",
        Ok(
            "radLoadInventory::SafeCast<CarStartLocator> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z12StatePropDSG",
        Ok(
            "radLoadInventory::SafeCast<StatePropDSG> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z22AnimCollisionEntityDSG",
        Ok(
            "radLoadInventory::SafeCast<AnimCollisionEntityDSG> virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton11TalkMission",
        Ok(
            "ActionButton::TalkMission virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton10TalkDialog",
        Ok(
            "ActionButton::TalkDialog virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton8TalkFood",
        Ok(
            "ActionButton::TalkFood virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton8OpenDoor",
        Ok(
            "ActionButton::OpenDoor virtual table",
        ),
    ),
    (
        "_vt$Q212ActionButton18IGameObjectWrapper",
        Ok(
            "ActionButton::IGameObjectWrapper virtual table",
        ),
    ),
    (
        "_vt$18CStatePropListener",
        Ok(
            "CStatePropListener virtual table",
        ),
    ),
    (
        "_vt$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$11tRefCounted",
        Ok(
            "tRefCounted virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventory12SafeCastBase",
        Ok(
            "radLoadInventory::SafeCastBase virtual table",
        ),
    ),
    (
        "_vt$13ProjectileDSG$18CStatePropListener",
        Ok(
            "ProjectileDSG::CStatePropListener virtual table",
        ),
    ),
    (
        "_vt$13ProjectileDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "ProjectileDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$13ProjectileDSG",
        Ok(
            "ProjectileDSG virtual table",
        ),
    ),
    (
        "_vt$17ActorAnimationUFO",
        Ok(
            "ActorAnimationUFO virtual table",
        ),
    ),
    (
        "_vt$12WingAnimator",
        Ok(
            "WingAnimator virtual table",
        ),
    ),
    (
        "_vt$18ActorAnimationWasp",
        Ok(
            "ActorAnimationWasp virtual table",
        ),
    ),
    (
        "_vt$24StatePropDSGProcAnimator",
        Ok(
            "StatePropDSGProcAnimator virtual table",
        ),
    ),
    (
        "_vt$14ActorAnimation",
        Ok(
            "ActorAnimation virtual table",
        ),
    ),
    (
        "_vt$8ActorDSG$18CStatePropListener",
        Ok(
            "ActorDSG::CStatePropListener virtual table",
        ),
    ),
    (
        "_vt$8ActorDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "ActorDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$8ActorDSG",
        Ok(
            "ActorDSG virtual table",
        ),
    ),
    (
        "_vt$15UFOBeamAlwaysOn",
        Ok(
            "UFOBeamAlwaysOn virtual table",
        ),
    ),
    (
        "_vt$19AttractionBehaviour$13EventListener",
        Ok(
            "AttractionBehaviour::EventListener virtual table",
        ),
    ),
    (
        "_vt$19AttractionBehaviour",
        Ok(
            "AttractionBehaviour virtual table",
        ),
    ),
    (
        "_vt$18UFOAttackBehaviour",
        Ok(
            "UFOAttackBehaviour virtual table",
        ),
    ),
    (
        "_vt$12UFOBehaviour",
        Ok(
            "UFOBehaviour virtual table",
        ),
    ),
    (
        "_vt$16EvasionBehaviour",
        Ok(
            "EvasionBehaviour virtual table",
        ),
    ),
    (
        "_vt$15AttackBehaviour$13EventListener",
        Ok(
            "AttackBehaviour::EventListener virtual table",
        ),
    ),
    (
        "_vt$15AttackBehaviour",
        Ok(
            "AttackBehaviour virtual table",
        ),
    ),
    (
        "_vt$10Projectile",
        Ok(
            "Projectile virtual table",
        ),
    ),
    (
        "_vt$11FlyingActor$18CStatePropListener",
        Ok(
            "FlyingActor::CStatePropListener virtual table",
        ),
    ),
    (
        "_vt$11FlyingActor",
        Ok(
            "FlyingActor virtual table",
        ),
    ),
    (
        "_vt$9Behaviour",
        Ok(
            "Behaviour virtual table",
        ),
    ),
    (
        "_vt$5Actor",
        Ok(
            "Actor virtual table",
        ),
    ),
    (
        "_vt$16IntersectionList",
        Ok(
            "IntersectionList virtual table",
        ),
    ),
    (
        "_vt$12ActorManager",
        Ok(
            "ActorManager virtual table",
        ),
    ),
    (
        "_vt$10SpawnPoint$13EventListener",
        Ok(
            "SpawnPoint::EventListener virtual table",
        ),
    ),
    (
        "_vt$10SpawnPoint$18IHudMapIconLocator",
        Ok(
            "SpawnPoint::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$10SpawnPoint",
        Ok(
            "SpawnPoint virtual table",
        ),
    ),
    (
        "_t13_Alloc_traits2ZQ218RadicalMathLibrary6VectorZt7s2alloc1ZQ218RadicalMathLibrary6Vector$_S_instanceless",
        Ok(
            "_Alloc_traits<RadicalMathLibrary::Vector, s2alloc<RadicalMathLibrary::Vector> >::_S_instanceless",
        ),
    ),
    (
        "_t12basic_string3ZcZt18string_char_traits1ZcZt24__default_alloc_template2b0i0$npos",
        Ok(
            "basic_string<char, string_char_traits<char>, __default_alloc_template<false, 0> >::npos",
        ),
    ),
    (
        "_t13_Alloc_traits2ZP5ActorZt7s2alloc1ZP5Actor$_S_instanceless",
        Ok(
            "_Alloc_traits<Actor *, s2alloc<Actor *> >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2ZQ217BreakablesManager18BreakableInstancesZt7s2alloc1ZQ217BreakablesManager18BreakableInstances$_S_instanceless",
        Ok(
            "_Alloc_traits<BreakablesManager::BreakableInstances, s2alloc<BreakablesManager::BreakableInstances> >::_S_instanceless",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z12EventLocator",
        Ok(
            "radLoadInventory::SafeCast<EventLocator> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z9tDrawable",
        Ok(
            "radLoadInventory::SafeCast<tDrawable> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z14CStatePropData",
        Ok(
            "radLoadInventory::SafeCast<CStatePropData> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z7Locator",
        Ok(
            "radLoadInventory::SafeCast<Locator> virtual table",
        ),
    ),
    (
        "_vt$16ActionController",
        Ok(
            "ActionController virtual table",
        ),
    ),
    (
        "_vt$9Sequencer",
        Ok(
            "Sequencer virtual table",
        ),
    ),
    (
        "_vt$10SurfAction",
        Ok(
            "SurfAction virtual table",
        ),
    ),
    (
        "_vt$10KickAction",
        Ok(
            "KickAction virtual table",
        ),
    ),
    (
        "_vt$24ChangeNPCControllerState",
        Ok(
            "ChangeNPCControllerState virtual table",
        ),
    ),
    (
        "_vt$16ChangeLocomotion",
        Ok(
            "ChangeLocomotion virtual table",
        ),
    ),
    (
        "_vt$10GroundSnap",
        Ok(
            "GroundSnap virtual table",
        ),
    ),
    (
        "_vt$8Position",
        Ok(
            "Position virtual table",
        ),
    ),
    (
        "_vt$6Orient",
        Ok(
            "Orient virtual table",
        ),
    ),
    (
        "_vt$6Arrive",
        Ok(
            "Arrive virtual table",
        ),
    ),
    (
        "_vt$18ReleaseDoorsAction",
        Ok(
            "ReleaseDoorsAction virtual table",
        ),
    ),
    (
        "_vt$13CarDoorAction",
        Ok(
            "CarDoorAction virtual table",
        ),
    ),
    (
        "_vt$23PlayIdleAnimationAction",
        Ok(
            "PlayIdleAnimationAction virtual table",
        ),
    ),
    (
        "_vt$19PlayAnimationAction",
        Ok(
            "PlayAnimationAction virtual table",
        ),
    ),
    (
        "_vt$11GetUpAction",
        Ok(
            "GetUpAction virtual table",
        ),
    ),
    (
        "_vt$11FlailAction",
        Ok(
            "FlailAction virtual table",
        ),
    ),
    (
        "_vt$12CringeAction",
        Ok(
            "CringeAction virtual table",
        ),
    ),
    (
        "_vt$11DodgeAction",
        Ok(
            "DodgeAction virtual table",
        ),
    ),
    (
        "_vt$10JumpAction",
        Ok(
            "JumpAction virtual table",
        ),
    ),
    (
        "_vt$11DecelAction",
        Ok(
            "DecelAction virtual table",
        ),
    ),
    (
        "_vt$11AccelAction",
        Ok(
            "AccelAction virtual table",
        ),
    ),
    (
        "_vt$13ReverseAction",
        Ok(
            "ReverseAction virtual table",
        ),
    ),
    (
        "_vt$11SteerAction",
        Ok(
            "SteerAction virtual table",
        ),
    ),
    (
        "_vt$19HoldAnimationAction",
        Ok(
            "HoldAnimationAction virtual table",
        ),
    ),
    (
        "_vt$11InCarAction",
        Ok(
            "InCarAction virtual table",
        ),
    ),
    (
        "_vt$22WalkerLocomotionAction",
        Ok(
            "WalkerLocomotionAction virtual table",
        ),
    ),
    (
        "_vt$11SlaveAction",
        Ok(
            "SlaveAction virtual table",
        ),
    ),
    (
        "_vt$6Action",
        Ok(
            "Action virtual table",
        ),
    ),
    (
        "_vt$4Task",
        Ok(
            "Task virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ26choreo10Locomotion",
        Ok(
            "radLoadInventory::SafeCast<choreo::Locomotion> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ26choreo9Animation",
        Ok(
            "radLoadInventory::SafeCast<choreo::Animation> virtual table",
        ),
    ),
    (
        "_9TrafficAI$SECONDS_LOOKAHEAD",
        Ok(
            "TrafficAI::SECONDS_LOOKAHEAD",
        ),
    ),
    (
        "_9TrafficAI$LOOKAHEAD_MIN",
        Ok(
            "TrafficAI::LOOKAHEAD_MIN",
        ),
    ),
    (
        "_9VehicleAI$DEFAULT_MIN_SHORTCUT_SKILL",
        Ok(
            "VehicleAI::DEFAULT_MIN_SHORTCUT_SKILL",
        ),
    ),
    (
        "_9VehicleAI$DEFAULT_MAX_SHORTCUT_SKILL",
        Ok(
            "VehicleAI::DEFAULT_MAX_SHORTCUT_SKILL",
        ),
    ),
    (
        "_9VehicleAI$CATCHUP_NORMAL_DRIVING_PERCENTAGE_OF_TOPSPEED",
        Ok(
            "VehicleAI::CATCHUP_NORMAL_DRIVING_PERCENTAGE_OF_TOPSPEED",
        ),
    ),
    (
        "_9VehicleAI$CATCHUP_MAX_SHORTCUTSKILL_MOD",
        Ok(
            "VehicleAI::CATCHUP_MAX_SHORTCUTSKILL_MOD",
        ),
    ),
    (
        "_10WaypointAI$DEFAULT_TRIGGER_RADIUS",
        Ok(
            "WaypointAI::DEFAULT_TRIGGER_RADIUS",
        ),
    ),
    (
        "_vt$15VehicleAIRender",
        Ok(
            "VehicleAIRender virtual table",
        ),
    ),
    (
        "_vt$9TrafficAI",
        Ok(
            "TrafficAI virtual table",
        ),
    ),
    (
        "_vt$10WaypointAI$18IHudMapIconLocator",
        Ok(
            "WaypointAI::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$10WaypointAI",
        Ok(
            "WaypointAI virtual table",
        ),
    ),
    (
        "_vt$7ChaseAI$18IHudMapIconLocator",
        Ok(
            "ChaseAI::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$7ChaseAI",
        Ok(
            "ChaseAI virtual table",
        ),
    ),
    (
        "_vt$9VehicleAI$18IHudMapIconLocator",
        Ok(
            "VehicleAI::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$9VehicleAI",
        Ok(
            "VehicleAI virtual table",
        ),
    ),
    (
        "_vt$14PotentialField",
        Ok(
            "PotentialField virtual table",
        ),
    ),
    (
        "_vt$10Potentials",
        Ok(
            "Potentials virtual table",
        ),
    ),
    (
        "_vt$18IHudMapIconLocator",
        Ok(
            "IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$9ATCLoader",
        Ok(
            "ATCLoader virtual table",
        ),
    ),
    (
        "_vt$17radLoadDataLoader",
        Ok(
            "radLoadDataLoader virtual table",
        ),
    ),
    (
        "_7RailCam$BehaviourNames",
        Ok(
            "RailCam::BehaviourNames",
        ),
    ),
    (
        "NUM_CAMERAS_FOR_DRIVING",
        Err(
            NotMangled,
        ),
    ),
    (
        "NUM_CAMERAS_FOR_DRIVING_WITHOUT_CHEAT",
        Err(
            NotMangled,
        ),
    ),
    (
        "NUM_CAMERAS_FOR_WALKING",
        Err(
            NotMangled,
        ),
    ),
    (
        "NUM_CAMERAS_FOR_WALKING_WITHOUT_CHEAT",
        Err(
            NotMangled,
        ),
    ),
    (
        "NUM_SUPERSPRINT_CAMS",
        Err(
            NotMangled,
        ),
    ),
    (
        "_vt$14SuperSprintCam",
        Ok(
            "SuperSprintCam virtual table",
        ),
    ),
    (
        "_vt$15SurveillanceCam",
        Ok(
            "SurveillanceCam virtual table",
        ),
    ),
    (
        "_vt$10ReverseCam",
        Ok(
            "ReverseCam virtual table",
        ),
    ),
    (
        "_vt$9StaticCam",
        Ok(
            "StaticCam virtual table",
        ),
    ),
    (
        "_vt$9WalkerCam",
        Ok(
            "WalkerCam virtual table",
        ),
    ),
    (
        "_vt$13WalkerCamData",
        Ok(
            "WalkerCamData virtual table",
        ),
    ),
    (
        "_vt$10TrackerCam",
        Ok(
            "TrackerCam virtual table",
        ),
    ),
    (
        "_vt$14TrackerCamData",
        Ok(
            "TrackerCamData virtual table",
        ),
    ),
    (
        "_vt$12WrecklessCam",
        Ok(
            "WrecklessCam virtual table",
        ),
    ),
    (
        "_vt$22WrecklessEventListener",
        Ok(
            "WrecklessEventListener virtual table",
        ),
    ),
    (
        "_vt$7RailCam",
        Ok(
            "RailCam virtual table",
        ),
    ),
    (
        "_vt$19RelativeAnimatedCam",
        Ok(
            "RelativeAnimatedCam virtual table",
        ),
    ),
    (
        "_vt$7KullCam",
        Ok(
            "KullCam virtual table",
        ),
    ),
    (
        "_vt$18SuperCamController",
        Ok(
            "SuperCamController virtual table",
        ),
    ),
    (
        "_vt$9FollowCam",
        Ok(
            "FollowCam virtual table",
        ),
    ),
    (
        "_vt$13FollowCamData",
        Ok(
            "FollowCamData virtual table",
        ),
    ),
    (
        "_vt$8DebugCam",
        Ok(
            "DebugCam virtual table",
        ),
    ),
    (
        "_vt$15ConversationCam",
        Ok(
            "ConversationCam virtual table",
        ),
    ),
    (
        "_vt$19ConversationCamData",
        Ok(
            "ConversationCamData virtual table",
        ),
    ),
    (
        "_vt$8ChaseCam",
        Ok(
            "ChaseCam virtual table",
        ),
    ),
    (
        "_vt$12ChaseCamData",
        Ok(
            "ChaseCamData virtual table",
        ),
    ),
    (
        "_vt$9BumperCam",
        Ok(
            "BumperCam virtual table",
        ),
    ),
    (
        "_vt$13BumperCamData",
        Ok(
            "BumperCamData virtual table",
        ),
    ),
    (
        "_vt$15SuperCamCentral$15GameDataHandler",
        Ok(
            "SuperCamCentral::GameDataHandler virtual table",
        ),
    ),
    (
        "_vt$15SuperCamCentral",
        Ok(
            "SuperCamCentral virtual table",
        ),
    ),
    (
        "_vt$11AnimatedCam",
        Ok(
            "AnimatedCam virtual table",
        ),
    ),
    (
        "_vt$8SuperCam",
        Ok(
            "SuperCam virtual table",
        ),
    ),
    (
        "_vt$13SineCosShaker",
        Ok(
            "SineCosShaker virtual table",
        ),
    ),
    (
        "_vt$13ICameraShaker",
        Ok(
            "ICameraShaker virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z13tVectorCamera",
        Ok(
            "radLoadInventory::SafeCast<tVectorCamera> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z18WalkerCamDataChunk",
        Ok(
            "radLoadInventory::SafeCast<WalkerCamDataChunk> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z16tMultiController",
        Ok(
            "radLoadInventory::SafeCast<tMultiController> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z7tCamera",
        Ok(
            "radLoadInventory::SafeCast<tCamera> virtual table",
        ),
    ),
    (
        "_vt$18FollowCamDataChunk",
        Ok(
            "FollowCamDataChunk virtual table",
        ),
    ),
    (
        "_vt$15GameDataHandler",
        Ok(
            "GameDataHandler virtual table",
        ),
    ),
    (
        "_vt$13CollectorCard",
        Ok(
            "CollectorCard virtual table",
        ),
    ),
    (
        "_vt$7CardsDB",
        Ok(
            "CardsDB virtual table",
        ),
    ),
    (
        "_vt$11CardGallery$21ICheatEnteredCallback",
        Ok(
            "CardGallery::ICheatEnteredCallback virtual table",
        ),
    ),
    (
        "_vt$11CardGallery",
        Ok(
            "CardGallery virtual table",
        ),
    ),
    (
        "_vt$9BonusCard",
        Ok(
            "BonusCard virtual table",
        ),
    ),
    (
        "_vt$4Card",
        Ok(
            "Card virtual table",
        ),
    ),
    (
        "_vt$21ICheatEnteredCallback",
        Ok(
            "ICheatEnteredCallback virtual table",
        ),
    ),
    (
        "_vt$17CheatInputHandler",
        Ok(
            "CheatInputHandler virtual table",
        ),
    ),
    (
        "_vt$16CheatInputSystem",
        Ok(
            "CheatInputSystem virtual table",
        ),
    ),
    (
        "_vt$8CheatsDB",
        Ok(
            "CheatsDB virtual table",
        ),
    ),
    (
        "_vt$20DebugConsoleCallback$36IRadDebugConsolePointerInputCallback",
        Ok(
            "DebugConsoleCallback::IRadDebugConsolePointerInputCallback virtual table",
        ),
    ),
    (
        "_vt$20DebugConsoleCallback",
        Ok(
            "DebugConsoleCallback virtual table",
        ),
    ),
    (
        "_vt$7Console",
        Ok(
            "Console virtual table",
        ),
    ),
    (
        "_vt$37IRadDebugConsoleKeyboardInputCallback",
        Ok(
            "IRadDebugConsoleKeyboardInputCallback virtual table",
        ),
    ),
    (
        "_vt$36IRadDebugConsolePointerInputCallback",
        Ok(
            "IRadDebugConsolePointerInputCallback virtual table",
        ),
    ),
    (
        "_vt$14LoadingContext$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "LoadingContext::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$14LoadingContext",
        Ok(
            "LoadingContext virtual table",
        ),
    ),
    (
        "_vt$14PlayingContext",
        Ok(
            "PlayingContext virtual table",
        ),
    ),
    (
        "_vt$15FrontEndContext$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "FrontEndContext::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$15FrontEndContext",
        Ok(
            "FrontEndContext virtual table",
        ),
    ),
    (
        "_vt$11ExitContext",
        Ok(
            "ExitContext virtual table",
        ),
    ),
    (
        "_vt$12PauseContext",
        Ok(
            "PauseContext virtual table",
        ),
    ),
    (
        "_vt$12EntryContext",
        Ok(
            "EntryContext virtual table",
        ),
    ),
    (
        "_vt$13BootupContext$Q217PresentationEvent25PresentationEventCallBack",
        Ok(
            "BootupContext::PresentationEvent::PresentationEventCallBack virtual table",
        ),
    ),
    (
        "_vt$13BootupContext$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "BootupContext::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$13BootupContext",
        Ok(
            "BootupContext virtual table",
        ),
    ),
    (
        "_vt$7Context",
        Ok(
            "Context virtual table",
        ),
    ),
    (
        "_t13_Alloc_traits2Z12TutorialModeZt7s2alloc1Z12TutorialMode$_S_instanceless",
        Ok(
            "_Alloc_traits<TutorialMode, s2alloc<TutorialMode> >::_S_instanceless",
        ),
    ),
    (
        "_t13_Alloc_traits2Zt10MapElement2Z13tUidUnalignedZ13tUidUnalignedZt7s2alloc1Zt10MapElement2Z13tUidUnalignedZ13tUidUnaligned$_S_instanceless",
        Ok(
            "_Alloc_traits<MapElement<tUidUnaligned, tUidUnaligned>, s2alloc<MapElement<tUidUnaligned, tUidUnaligned> > >::_S_instanceless",
        ),
    ),
    (
        "_vt$Q217PresentationEvent25PresentationEventCallBack",
        Ok(
            "PresentationEvent::PresentationEventCallBack virtual table",
        ),
    ),
    (
        "_vt$15GameplayContext",
        Ok(
            "GameplayContext virtual table",
        ),
    ),
    (
        "_vt$9ComedyCam",
        Ok(
            "ComedyCam virtual table",
        ),
    ),
    (
        "_vt$22LoadingGameplayContext$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "LoadingGameplayContext::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$22LoadingGameplayContext",
        Ok(
            "LoadingGameplayContext virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z11tLightGroup",
        Ok(
            "radLoadInventory::SafeCast<tLightGroup> virtual table",
        ),
    ),
    (
        "_vt$11DemoContext",
        Ok(
            "DemoContext virtual table",
        ),
    ),
    (
        "_vt$18LoadingDemoContext$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "LoadingDemoContext::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$18LoadingDemoContext",
        Ok(
            "LoadingDemoContext virtual table",
        ),
    ),
    (
        "_vt$12SaveGameInfo",
        Ok(
            "SaveGameInfo virtual table",
        ),
    ),
    (
        "_vt$15GameDataManager$22IRadDriveErrorCallback",
        Ok(
            "GameDataManager::IRadDriveErrorCallback virtual table",
        ),
    ),
    (
        "_vt$15GameDataManager",
        Ok(
            "GameDataManager virtual table",
        ),
    ),
    (
        "_vt$22IRadDriveErrorCallback",
        Ok(
            "IRadDriveErrorCallback virtual table",
        ),
    ),
    (
        "_vt$26IRadFileCompletionCallback",
        Ok(
            "IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$9IRefCount",
        Ok(
            "IRefCount virtual table",
        ),
    ),
    (
        "_vt$17MemoryCardManager$22IRadDriveErrorCallback",
        Ok(
            "MemoryCardManager::IRadDriveErrorCallback virtual table",
        ),
    ),
    (
        "_vt$17MemoryCardManager$27IRadDriveCompletionCallback",
        Ok(
            "MemoryCardManager::IRadDriveCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$17MemoryCardManager",
        Ok(
            "MemoryCardManager virtual table",
        ),
    ),
    (
        "_vt$27IRadDriveCompletionCallback",
        Ok(
            "IRadDriveCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$13EventListener",
        Ok(
            "EventListener virtual table",
        ),
    ),
    (
        "_vt$8GameFlow",
        Ok(
            "GameFlow virtual table",
        ),
    ),
    (
        "_vt$17IRadTimerCallback",
        Ok(
            "IRadTimerCallback virtual table",
        ),
    ),
    (
        "_vt$8Mappable",
        Ok(
            "Mappable virtual table",
        ),
    ),
    (
        "_vt$12InputManager$15GameDataHandler",
        Ok(
            "InputManager::GameDataHandler virtual table",
        ),
    ),
    (
        "_vt$12InputManager",
        Ok(
            "InputManager virtual table",
        ),
    ),
    (
        "_vt$14UserController",
        Ok(
            "UserController virtual table",
        ),
    ),
    (
        "_vt$11WheelRumble",
        Ok(
            "WheelRumble virtual table",
        ),
    ),
    (
        "_vt$14ConstantEffect",
        Ok(
            "ConstantEffect virtual table",
        ),
    ),
    (
        "_vt$10BaseDamper",
        Ok(
            "BaseDamper virtual table",
        ),
    ),
    (
        "_vt$14SteeringSpring",
        Ok(
            "SteeringSpring virtual table",
        ),
    ),
    (
        "_vt$11ForceEffect",
        Ok(
            "ForceEffect virtual table",
        ),
    ),
    (
        "_vt$12RumbleEffect",
        Ok(
            "RumbleEffect virtual table",
        ),
    ),
    (
        "_vt$32IRadControllerInputPointCallback",
        Ok(
            "IRadControllerInputPointCallback virtual table",
        ),
    ),
    (
        "_vt$38IRadControllerConnectionChangeCallback",
        Ok(
            "IRadControllerConnectionChangeCallback virtual table",
        ),
    ),
    (
        "_vt$3Gag$13EventListener",
        Ok(
            "Gag::EventListener virtual table",
        ),
    ),
    (
        "_vt$3Gag$Q215AnimationPlayer16LoadDataCallBack",
        Ok(
            "Gag::AnimationPlayer::LoadDataCallBack virtual table",
        ),
    ),
    (
        "_vt$3Gag",
        Ok(
            "Gag virtual table",
        ),
    ),
    (
        "_vt$11GagDrawable$Q29tDrawable14ShaderCallback",
        Ok(
            "GagDrawable::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$11GagDrawable",
        Ok(
            "GagDrawable virtual table",
        ),
    ),
    (
        "_vt$15InteriorManager",
        Ok(
            "InteriorManager virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z18DirectionalLocator",
        Ok(
            "radLoadInventory::SafeCast<DirectionalLocator> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z16tFrameController",
        Ok(
            "radLoadInventory::SafeCast<tFrameController> virtual table",
        ),
    ),
    (
        "_vt$12InteriorExit",
        Ok(
            "InteriorExit virtual table",
        ),
    ),
    (
        "_vt$Q215AnimationPlayer16LoadDataCallBack",
        Ok(
            "AnimationPlayer::LoadDataCallBack virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ23sim15CollisionObject",
        Ok(
            "radLoadInventory::SafeCast<sim::CollisionObject> virtual table",
        ),
    ),
    (
        "_vt$10PathLoader$14IWrappedLoader",
        Ok(
            "PathLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$10PathLoader",
        Ok(
            "PathLoader virtual table",
        ),
    ),
    (
        "_vt$10RoadLoader$14IWrappedLoader",
        Ok(
            "RoadLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$10RoadLoader",
        Ok(
            "RoadLoader virtual table",
        ),
    ),
    (
        "_vt$21RoadDataSegmentLoader",
        Ok(
            "RoadDataSegmentLoader virtual table",
        ),
    ),
    (
        "_vt$15PedGroupLocator$18IHudMapIconLocator",
        Ok(
            "PedGroupLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$15PedGroupLocator",
        Ok(
            "PedGroupLocator virtual table",
        ),
    ),
    (
        "_vt$13LocatorLoader$14IWrappedLoader",
        Ok(
            "LocatorLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$13LocatorLoader",
        Ok(
            "LocatorLoader virtual table",
        ),
    ),
    (
        "_vt$14IWrappedLoader",
        Ok(
            "IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$18IntersectionLoader",
        Ok(
            "IntersectionLoader virtual table",
        ),
    ),
    (
        "_vt$16SoundFileHandler",
        Ok(
            "SoundFileHandler virtual table",
        ),
    ),
    (
        "_vt$18ScroobyFileHandler$Q27Scrooby19LoadProjectCallback",
        Ok(
            "ScroobyFileHandler::Scrooby::LoadProjectCallback virtual table",
        ),
    ),
    (
        "_vt$18ScroobyFileHandler",
        Ok(
            "ScroobyFileHandler virtual table",
        ),
    ),
    (
        "_vt$15IconFileHandler$26IRadFileCompletionCallback",
        Ok(
            "IconFileHandler::IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$15IconFileHandler",
        Ok(
            "IconFileHandler virtual table",
        ),
    ),
    (
        "_vt$14P3DFileHandler$11FileHandler",
        Ok(
            "P3DFileHandler::FileHandler virtual table",
        ),
    ),
    (
        "_vt$14P3DFileHandler",
        Ok(
            "P3DFileHandler virtual table",
        ),
    ),
    (
        "_vt$18ConsoleFileHandler$26IRadFileCompletionCallback",
        Ok(
            "ConsoleFileHandler::IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$18ConsoleFileHandler",
        Ok(
            "ConsoleFileHandler virtual table",
        ),
    ),
    (
        "_vt$17ChoreoFileHandler$26IRadFileCompletionCallback",
        Ok(
            "ChoreoFileHandler::IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$17ChoreoFileHandler",
        Ok(
            "ChoreoFileHandler virtual table",
        ),
    ),
    (
        "_vt$17CementFileHandler$35IRadCementLibraryCompletionCallback",
        Ok(
            "CementFileHandler::IRadCementLibraryCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$17CementFileHandler",
        Ok(
            "CementFileHandler virtual table",
        ),
    ),
    (
        "_vt$14LoadingManager",
        Ok(
            "LoadingManager virtual table",
        ),
    ),
    (
        "_vt$11FileHandler",
        Ok(
            "FileHandler virtual table",
        ),
    ),
    (
        "_vt$18WalkerCamDataChunk",
        Ok(
            "WalkerCamDataChunk virtual table",
        ),
    ),
    (
        "_vt$16CameraDataLoader",
        Ok(
            "CameraDataLoader virtual table",
        ),
    ),
    (
        "_vt$Q212tLoadRequest8Callback",
        Ok(
            "tLoadRequest::Callback virtual table",
        ),
    ),
    (
        "_t13_Alloc_traits2ZP11RoadSegmentZt7s2alloc1ZP11RoadSegment$_S_instanceless",
        Ok(
            "_Alloc_traits<RoadSegment *, s2alloc<RoadSegment *> >::_S_instanceless",
        ),
    ),
    (
        "_vt$Q27Scrooby19LoadProjectCallback",
        Ok(
            "Scrooby::LoadProjectCallback virtual table",
        ),
    ),
    (
        "_vt$Q211FileHandler16LoadFileCallback",
        Ok(
            "FileHandler::LoadFileCallback virtual table",
        ),
    ),
    (
        "_vt$35IRadCementLibraryCompletionCallback",
        Ok(
            "IRadCementLibraryCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$15radLoadCallback",
        Ok(
            "radLoadCallback virtual table",
        ),
    ),
    (
        "_vt$11PS2Platform",
        Ok(
            "PS2Platform virtual table",
        ),
    ),
    (
        "_vt$4Game",
        Ok(
            "Game virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z12tTextureFont",
        Ok(
            "radLoadInventory::SafeCast<tTextureFont> virtual table",
        ),
    ),
    (
        "_vt$11HeapManager",
        Ok(
            "HeapManager virtual table",
        ),
    ),
    (
        "_vt$19HeapActivityTracker",
        Ok(
            "HeapActivityTracker virtual table",
        ),
    ),
    (
        "_vt$9HeapStack",
        Ok(
            "HeapStack virtual table",
        ),
    ),
    (
        "_t13_Alloc_traits2Zt4pair2ZCPvZUiZt7s2alloc1Zt4pair2ZCPvZUi$_S_instanceless",
        Ok(
            "_Alloc_traits<pair<void *const, unsigned int>, s2alloc<pair<void *const, unsigned int> > >::_S_instanceless",
        ),
    ),
    (
        "_vt$26IRadMemoryActivityCallback",
        Ok(
            "IRadMemoryActivityCallback virtual table",
        ),
    ),
    (
        "_vt$30IRadMemorySetAllocatorCallback",
        Ok(
            "IRadMemorySetAllocatorCallback virtual table",
        ),
    ),
    (
        "MIN_SPEED_FOR_CAM_TRIGGER",
        Err(
            NotMangled,
        ),
    ),
    (
        "_vt$16StaticCamLocator$18IHudMapIconLocator",
        Ok(
            "StaticCamLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$16StaticCamLocator",
        Ok(
            "StaticCamLocator virtual table",
        ),
    ),
    (
        "_vt$16ZoneEventLocator$18IHudMapIconLocator",
        Ok(
            "ZoneEventLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$16ZoneEventLocator",
        Ok(
            "ZoneEventLocator virtual table",
        ),
    ),
    (
        "_vt$20TriggerVolumeTracker",
        Ok(
            "TriggerVolumeTracker virtual table",
        ),
    ),
    (
        "_vt$13SplineLocator$18IHudMapIconLocator",
        Ok(
            "SplineLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$13SplineLocator",
        Ok(
            "SplineLocator virtual table",
        ),
    ),
    (
        "_vt$19SphereTriggerVolume$Q29tDrawable14ShaderCallback",
        Ok(
            "SphereTriggerVolume::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$19SphereTriggerVolume",
        Ok(
            "SphereTriggerVolume virtual table",
        ),
    ),
    (
        "_vt$13ScriptLocator$18IHudMapIconLocator",
        Ok(
            "ScriptLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$13ScriptLocator",
        Ok(
            "ScriptLocator virtual table",
        ),
    ),
    (
        "_vt$17RectTriggerVolume$Q29tDrawable14ShaderCallback",
        Ok(
            "RectTriggerVolume::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$17RectTriggerVolume",
        Ok(
            "RectTriggerVolume virtual table",
        ),
    ),
    (
        "_vt$13TriggerVolume$Q29tDrawable14ShaderCallback",
        Ok(
            "TriggerVolume::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$13TriggerVolume",
        Ok(
            "TriggerVolume virtual table",
        ),
    ),
    (
        "_vt$16OcclusionLocator$18IHudMapIconLocator",
        Ok(
            "OcclusionLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$16OcclusionLocator",
        Ok(
            "OcclusionLocator virtual table",
        ),
    ),
    (
        "_vt$23InteriorEntranceLocator$18IHudMapIconLocator",
        Ok(
            "InteriorEntranceLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$23InteriorEntranceLocator",
        Ok(
            "InteriorEntranceLocator virtual table",
        ),
    ),
    (
        "_vt$10FOVLocator$18IHudMapIconLocator",
        Ok(
            "FOVLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$10FOVLocator",
        Ok(
            "FOVLocator virtual table",
        ),
    ),
    (
        "_vt$12EventLocator$18IHudMapIconLocator",
        Ok(
            "EventLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$12EventLocator",
        Ok(
            "EventLocator virtual table",
        ),
    ),
    (
        "_vt$18DirectionalLocator$18IHudMapIconLocator",
        Ok(
            "DirectionalLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$18DirectionalLocator",
        Ok(
            "DirectionalLocator virtual table",
        ),
    ),
    (
        "_vt$15CarStartLocator$18IHudMapIconLocator",
        Ok(
            "CarStartLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$15CarStartLocator",
        Ok(
            "CarStartLocator virtual table",
        ),
    ),
    (
        "_vt$18ActionEventLocator$18IHudMapIconLocator",
        Ok(
            "ActionEventLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$18ActionEventLocator",
        Ok(
            "ActionEventLocator virtual table",
        ),
    ),
    (
        "_vt$14TriggerLocator$18IHudMapIconLocator",
        Ok(
            "TriggerLocator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$14TriggerLocator",
        Ok(
            "TriggerLocator virtual table",
        ),
    ),
    (
        "_vt$7Locator$18IHudMapIconLocator",
        Ok(
            "Locator::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$7Locator",
        Ok(
            "Locator virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z13TriggerVolume",
        Ok(
            "radLoadInventory::SafeCast<TriggerVolume> virtual table",
        ),
    ),
    (
        "_vt$26RacePositionBonusObjective$13EventListener",
        Ok(
            "RacePositionBonusObjective::EventListener virtual table",
        ),
    ),
    (
        "_vt$26RacePositionBonusObjective",
        Ok(
            "RacePositionBonusObjective virtual table",
        ),
    ),
    (
        "_vt$24TimeRemainBonusObjective",
        Ok(
            "TimeRemainBonusObjective virtual table",
        ),
    ),
    (
        "_vt$19NoCopBonusObjective$13EventListener",
        Ok(
            "NoCopBonusObjective::EventListener virtual table",
        ),
    ),
    (
        "_vt$19NoCopBonusObjective",
        Ok(
            "NoCopBonusObjective virtual table",
        ),
    ),
    (
        "_vt$22NoDamageBonusObjective$13EventListener",
        Ok(
            "NoDamageBonusObjective::EventListener virtual table",
        ),
    ),
    (
        "_vt$22NoDamageBonusObjective",
        Ok(
            "NoDamageBonusObjective virtual table",
        ),
    ),
    (
        "_vt$20StatePropCollectible$18IHudMapIconLocator",
        Ok(
            "StatePropCollectible::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$20StatePropCollectible$18CStatePropListener",
        Ok(
            "StatePropCollectible::CStatePropListener virtual table",
        ),
    ),
    (
        "_vt$20StatePropCollectible$Q29tDrawable14ShaderCallback",
        Ok(
            "StatePropCollectible::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$20StatePropCollectible",
        Ok(
            "StatePropCollectible virtual table",
        ),
    ),
    (
        "_vt$14BonusObjective",
        Ok(
            "BonusObjective virtual table",
        ),
    ),
    (
        "_vt$12AnimatedIcon",
        Ok(
            "AnimatedIcon virtual table",
        ),
    ),
    (
        "_vt$Q212AnimatedIcon11AnimIconDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "AnimatedIcon::AnimIconDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$Q212AnimatedIcon11AnimIconDSG",
        Ok(
            "AnimatedIcon::AnimIconDSG virtual table",
        ),
    ),
    (
        "_vt$19MissionScriptLoader",
        Ok(
            "MissionScriptLoader virtual table",
        ),
    ),
    (
        "_vt$14MissionManager$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "MissionManager::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$14MissionManager$Q217PresentationEvent25PresentationEventCallBack",
        Ok(
            "MissionManager::PresentationEvent::PresentationEventCallBack virtual table",
        ),
    ),
    (
        "_vt$14MissionManager",
        Ok(
            "MissionManager virtual table",
        ),
    ),
    (
        "_vt$15GameplayManager$Q217PresentationEvent25PresentationEventCallBack",
        Ok(
            "GameplayManager::PresentationEvent::PresentationEventCallBack virtual table",
        ),
    ),
    (
        "_vt$15GameplayManager",
        Ok(
            "GameplayManager virtual table",
        ),
    ),
    (
        "_vt$16BonusMissionInfo",
        Ok(
            "BonusMissionInfo virtual table",
        ),
    ),
    (
        "_vt$7Mission",
        Ok(
            "Mission virtual table",
        ),
    ),
    (
        "_vt$12MissionStage$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "MissionStage::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$12MissionStage",
        Ok(
            "MissionStage virtual table",
        ),
    ),
    (
        "_t13_Alloc_traits2Z9UFOWeaponZt7s2alloc1Z9UFOWeapon$_S_instanceless",
        Ok(
            "_Alloc_traits<UFOWeapon, s2alloc<UFOWeapon> >::_S_instanceless",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z8tTexture",
        Ok(
            "radLoadInventory::SafeCast<tTexture> virtual table",
        ),
    ),
    (
        "_vt$Q27Console21ExecuteScriptCallback",
        Ok(
            "Console::ExecuteScriptCallback virtual table",
        ),
    ),
    (
        "_vt$8SafeZone",
        Ok(
            "SafeZone virtual table",
        ),
    ),
    (
        "_vt$21CharacterSheetManager",
        Ok(
            "CharacterSheetManager virtual table",
        ),
    ),
    (
        "_vt$14RewardsManager",
        Ok(
            "RewardsManager virtual table",
        ),
    ),
    (
        "_vt$11Merchandise",
        Ok(
            "Merchandise virtual table",
        ),
    ),
    (
        "_vt$6Reward",
        Ok(
            "Reward virtual table",
        ),
    ),
    (
        "_vt$19KeepBarrelCondition",
        Ok(
            "KeepBarrelCondition virtual table",
        ),
    ),
    (
        "_vt$20NotAbductedCondition",
        Ok(
            "NotAbductedCondition virtual table",
        ),
    ),
    (
        "_vt$20GetOutOfCarCondition",
        Ok(
            "GetOutOfCarCondition virtual table",
        ),
    ),
    (
        "_vt$24VehicleCarryingStateProp",
        Ok(
            "VehicleCarryingStateProp virtual table",
        ),
    ),
    (
        "_vt$17PositionCondition",
        Ok(
            "PositionCondition virtual table",
        ),
    ),
    (
        "_vt$16TimeOutCondition",
        Ok(
            "TimeOutCondition virtual table",
        ),
    ),
    (
        "_vt$13RaceCondition",
        Ok(
            "RaceCondition virtual table",
        ),
    ),
    (
        "_vt$20OutOfBoundsCondition",
        Ok(
            "OutOfBoundsCondition virtual table",
        ),
    ),
    (
        "_vt$22LeaveInteriorCondition",
        Ok(
            "LeaveInteriorCondition virtual table",
        ),
    ),
    (
        "_vt$15FollowCondition",
        Ok(
            "FollowCondition virtual table",
        ),
    ),
    (
        "_vt$15DamageCondition",
        Ok(
            "DamageCondition virtual table",
        ),
    ),
    (
        "_vt$16VehicleCondition",
        Ok(
            "VehicleCondition virtual table",
        ),
    ),
    (
        "_vt$16MissionCondition",
        Ok(
            "MissionCondition virtual table",
        ),
    ),
    (
        "_vt$18GoOutsideObjective",
        Ok(
            "GoOutsideObjective virtual table",
        ),
    ),
    (
        "_vt$16BuySkinObjective",
        Ok(
            "BuySkinObjective virtual table",
        ),
    ),
    (
        "_vt$15BuyCarObjective",
        Ok(
            "BuyCarObjective virtual table",
        ),
    ),
    (
        "_vt$14TimerObjective",
        Ok(
            "TimerObjective virtual table",
        ),
    ),
    (
        "_vt$19PickupItemObjective",
        Ok(
            "PickupItemObjective virtual table",
        ),
    ),
    (
        "_vt$20LoadVehicleObjective",
        Ok(
            "LoadVehicleObjective virtual table",
        ),
    ),
    (
        "_vt$Q220LoadVehicleObjective30LoadDisposableCarAsyncCallback",
        Ok(
            "LoadVehicleObjective::LoadDisposableCarAsyncCallback virtual table",
        ),
    ),
    (
        "_vt$13CoinObjective",
        Ok(
            "CoinObjective virtual table",
        ),
    ),
    (
        "_vt$17InteriorObjective$18IHudMapIconLocator",
        Ok(
            "InteriorObjective::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$17InteriorObjective",
        Ok(
            "InteriorObjective virtual table",
        ),
    ),
    (
        "_vt$12FMVObjective$Q217PresentationEvent25PresentationEventCallBack",
        Ok(
            "FMVObjective::PresentationEvent::PresentationEventCallBack virtual table",
        ),
    ),
    (
        "_vt$12FMVObjective",
        Ok(
            "FMVObjective virtual table",
        ),
    ),
    (
        "_vt$19CollectionCondition",
        Ok(
            "CollectionCondition virtual table",
        ),
    ),
    (
        "_vt$22CollectDumpedObjective",
        Ok(
            "CollectDumpedObjective virtual table",
        ),
    ),
    (
        "_vt$15TalkToObjective$18IHudMapIconLocator",
        Ok(
            "TalkToObjective::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$15TalkToObjective",
        Ok(
            "TalkToObjective virtual table",
        ),
    ),
    (
        "_vt$13RaceObjective",
        Ok(
            "RaceObjective virtual table",
        ),
    ),
    (
        "_vt$13LoseObjective",
        Ok(
            "LoseObjective virtual table",
        ),
    ),
    (
        "_vt$13GoToObjective",
        Ok(
            "GoToObjective virtual table",
        ),
    ),
    (
        "_vt$14GetInObjective$18IHudMapIconLocator",
        Ok(
            "GetInObjective::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$14GetInObjective",
        Ok(
            "GetInObjective virtual table",
        ),
    ),
    (
        "_vt$15FollowObjective",
        Ok(
            "FollowObjective virtual table",
        ),
    ),
    (
        "_vt$17DialogueObjective",
        Ok(
            "DialogueObjective virtual table",
        ),
    ),
    (
        "_vt$20DestroyBossObjective",
        Ok(
            "DestroyBossObjective virtual table",
        ),
    ),
    (
        "_vt$16DestroyObjective",
        Ok(
            "DestroyObjective virtual table",
        ),
    ),
    (
        "_vt$17DeliveryObjective",
        Ok(
            "DeliveryObjective virtual table",
        ),
    ),
    (
        "_vt$20CollectibleObjective",
        Ok(
            "CollectibleObjective virtual table",
        ),
    ),
    (
        "_vt$16MissionObjective",
        Ok(
            "MissionObjective virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z20StatePropCollectible",
        Ok(
            "radLoadInventory::SafeCast<StatePropCollectible> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z16ZoneEventLocator",
        Ok(
            "radLoadInventory::SafeCast<ZoneEventLocator> virtual table",
        ),
    ),
    (
        "_vt$t9AllocPool1Z15TransitionEvent",
        Ok(
            "AllocPool<TransitionEvent> virtual table",
        ),
    ),
    (
        "_vt$t9AllocPool1Z8NISEvent",
        Ok(
            "AllocPool<NISEvent> virtual table",
        ),
    ),
    (
        "_vt$t9AllocPool1Z8FMVEvent",
        Ok(
            "AllocPool<FMVEvent> virtual table",
        ),
    ),
    (
        "_vt$15TutorialManager$15GameDataHandler",
        Ok(
            "TutorialManager::GameDataHandler virtual table",
        ),
    ),
    (
        "_vt$15TutorialManager",
        Ok(
            "TutorialManager virtual table",
        ),
    ),
    (
        "_vt$20PresentationAnimator",
        Ok(
            "PresentationAnimator virtual table",
        ),
    ),
    (
        "_vt$19PresentationManager$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "PresentationManager::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$19PresentationManager$Q217PresentationEvent25PresentationEventCallBack",
        Ok(
            "PresentationManager::PresentationEvent::PresentationEventCallBack virtual table",
        ),
    ),
    (
        "_vt$19PresentationManager",
        Ok(
            "PresentationManager virtual table",
        ),
    ),
    (
        "_vt$19PresentationOverlay",
        Ok(
            "PresentationOverlay virtual table",
        ),
    ),
    (
        "_vt$16TransitionPlayer",
        Ok(
            "TransitionPlayer virtual table",
        ),
    ),
    (
        "_vt$14PlayerDrawable",
        Ok(
            "PlayerDrawable virtual table",
        ),
    ),
    (
        "_vt$9NISPlayer",
        Ok(
            "NISPlayer virtual table",
        ),
    ),
    (
        "_vt$12MouthFlapper",
        Ok(
            "MouthFlapper virtual table",
        ),
    ),
    (
        "_vt$12CameraPlayer",
        Ok(
            "CameraPlayer virtual table",
        ),
    ),
    (
        "_vt$21SimpleAnimationPlayer",
        Ok(
            "SimpleAnimationPlayer virtual table",
        ),
    ),
    (
        "_vt$7Blinker",
        Ok(
            "Blinker virtual table",
        ),
    ),
    (
        "_vt$15AnimationPlayer",
        Ok(
            "AnimationPlayer virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z18tCompositeDrawable",
        Ok(
            "radLoadInventory::SafeCast<tCompositeDrawable> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ210Scenegraph10Scenegraph",
        Ok(
            "radLoadInventory::SafeCast<Scenegraph::Scenegraph> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z10tAnimation",
        Ok(
            "radLoadInventory::SafeCast<tAnimation> virtual table",
        ),
    ),
    (
        "_vt$13RespawnEntity",
        Ok(
            "RespawnEntity virtual table",
        ),
    ),
    (
        "_vt$19FMVUserInputHandler",
        Ok(
            "FMVUserInputHandler virtual table",
        ),
    ),
    (
        "_vt$9FMVPlayer$11radRefCount",
        Ok(
            "FMVPlayer::radRefCount virtual table",
        ),
    ),
    (
        "_vt$9FMVPlayer$27IRadDriveCompletionCallback",
        Ok(
            "FMVPlayer::IRadDriveCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$9FMVPlayer$19IRadMovieRenderLoop",
        Ok(
            "FMVPlayer::IRadMovieRenderLoop virtual table",
        ),
    ),
    (
        "_vt$9FMVPlayer",
        Ok(
            "FMVPlayer virtual table",
        ),
    ),
    (
        "_vt$11radRefCount",
        Ok(
            "radRefCount virtual table",
        ),
    ),
    (
        "_vt$9radObject",
        Ok(
            "radObject virtual table",
        ),
    ),
    (
        "_vt$13radBaseObject",
        Ok(
            "radBaseObject virtual table",
        ),
    ),
    (
        "_vt$19IRadMovieRenderLoop",
        Ok(
            "IRadMovieRenderLoop virtual table",
        ),
    ),
    (
        "_vt$13CGuiTextBible",
        Ok(
            "CGuiTextBible virtual table",
        ),
    ),
    (
        "_vt$20CGuiScreenMemoryCard",
        Ok(
            "CGuiScreenMemoryCard virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenLoadSave",
        Ok(
            "CGuiScreenLoadSave virtual table",
        ),
    ),
    (
        "_vt$22CGuiScreenMemCardCheck$25IMemoryCardFormatCallback",
        Ok(
            "CGuiScreenMemCardCheck::IMemoryCardFormatCallback virtual table",
        ),
    ),
    (
        "_vt$22CGuiScreenMemCardCheck$24IMemoryCardCheckCallback",
        Ok(
            "CGuiScreenMemCardCheck::IMemoryCardCheckCallback virtual table",
        ),
    ),
    (
        "_vt$22CGuiScreenMemCardCheck",
        Ok(
            "CGuiScreenMemCardCheck virtual table",
        ),
    ),
    (
        "_vt$20CGuiUserInputHandler",
        Ok(
            "CGuiUserInputHandler virtual table",
        ),
    ),
    (
        "_vt$16CGuiScreenPrompt",
        Ok(
            "CGuiScreenPrompt virtual table",
        ),
    ),
    (
        "_vt$17CGuiScreenMessage",
        Ok(
            "CGuiScreenMessage virtual table",
        ),
    ),
    (
        "_vt$10CGuiScreen",
        Ok(
            "CGuiScreen virtual table",
        ),
    ),
    (
        "_vt$10CGuiSystem$15GameDataHandler",
        Ok(
            "CGuiSystem::GameDataHandler virtual table",
        ),
    ),
    (
        "_vt$10CGuiSystem$Q27Scrooby19LoadProjectCallback",
        Ok(
            "CGuiSystem::Scrooby::LoadProjectCallback virtual table",
        ),
    ),
    (
        "_vt$10CGuiSystem",
        Ok(
            "CGuiSystem virtual table",
        ),
    ),
    (
        "_vt$11CGuiManager$13EventListener",
        Ok(
            "CGuiManager::EventListener virtual table",
        ),
    ),
    (
        "_vt$11CGuiManager$Q27Scrooby18GotoScreenCallback",
        Ok(
            "CGuiManager::Scrooby::GotoScreenCallback virtual table",
        ),
    ),
    (
        "_vt$11CGuiManager",
        Ok(
            "CGuiManager virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby18GotoScreenCallback",
        Ok(
            "Scrooby::GotoScreenCallback virtual table",
        ),
    ),
    (
        "_vt$10CGuiWindow",
        Ok(
            "CGuiWindow virtual table",
        ),
    ),
    (
        "_vt$14CGuiMenuPrompt",
        Ok(
            "CGuiMenuPrompt virtual table",
        ),
    ),
    (
        "_vt$10CGuiMenu2D",
        Ok(
            "CGuiMenu2D virtual table",
        ),
    ),
    (
        "_vt$8CGuiMenu",
        Ok(
            "CGuiMenu virtual table",
        ),
    ),
    (
        "_vt$17GuiMenuItemSprite",
        Ok(
            "GuiMenuItemSprite virtual table",
        ),
    ),
    (
        "_vt$15GuiMenuItemText",
        Ok(
            "GuiMenuItemText virtual table",
        ),
    ),
    (
        "_vt$11GuiMenuItem",
        Ok(
            "GuiMenuItem virtual table",
        ),
    ),
    (
        "_vt$10CGuiEntity",
        Ok(
            "CGuiEntity virtual table",
        ),
    ),
    (
        "_t13_Alloc_traits2ZQ210CGuiWindow12eGuiWindowIDZt7s2alloc1ZQ210CGuiWindow12eGuiWindowID$_S_instanceless",
        Ok(
            "_Alloc_traits<CGuiWindow::eGuiWindowID, s2alloc<CGuiWindow::eGuiWindowID> >::_S_instanceless",
        ),
    ),
    (
        "_vt$24IMemoryCardCheckCallback",
        Ok(
            "IMemoryCardCheckCallback virtual table",
        ),
    ),
    (
        "_vt$25IMemoryCardFormatCallback",
        Ok(
            "IMemoryCardFormatCallback virtual table",
        ),
    ),
    (
        "_vt$19CGuiManagerLanguage$13EventListener",
        Ok(
            "CGuiManagerLanguage::EventListener virtual table",
        ),
    ),
    (
        "_vt$19CGuiManagerLanguage$Q27Scrooby18GotoScreenCallback",
        Ok(
            "CGuiManagerLanguage::Scrooby::GotoScreenCallback virtual table",
        ),
    ),
    (
        "_vt$19CGuiManagerLanguage",
        Ok(
            "CGuiManagerLanguage virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenLanguage",
        Ok(
            "CGuiScreenLanguage virtual table",
        ),
    ),
    (
        "_vt$17CGuiScreenLicense",
        Ok(
            "CGuiScreenLicense virtual table",
        ),
    ),
    (
        "_vt$20CGuiScreenBootupLoad",
        Ok(
            "CGuiScreenBootupLoad virtual table",
        ),
    ),
    (
        "_vt$17CGuiManagerBootUp$13EventListener",
        Ok(
            "CGuiManagerBootUp::EventListener virtual table",
        ),
    ),
    (
        "_vt$17CGuiManagerBootUp$Q27Scrooby18GotoScreenCallback",
        Ok(
            "CGuiManagerBootUp::Scrooby::GotoScreenCallback virtual table",
        ),
    ),
    (
        "_vt$17CGuiManagerBootUp",
        Ok(
            "CGuiManagerBootUp virtual table",
        ),
    ),
    (
        "_vt$14CGuiScreenDemo",
        Ok(
            "CGuiScreenDemo virtual table",
        ),
    ),
    (
        "_vt$19CGuiScreenLoadingFE$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "CGuiScreenLoadingFE::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$19CGuiScreenLoadingFE",
        Ok(
            "CGuiScreenLoadingFE virtual table",
        ),
    ),
    (
        "_vt$17CGuiScreenLoading$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "CGuiScreenLoading::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$17CGuiScreenLoading",
        Ok(
            "CGuiScreenLoading virtual table",
        ),
    ),
    (
        "_vt$18CGuiManagerBackEnd$13EventListener",
        Ok(
            "CGuiManagerBackEnd::EventListener virtual table",
        ),
    ),
    (
        "_vt$18CGuiManagerBackEnd$Q27Scrooby18GotoScreenCallback",
        Ok(
            "CGuiManagerBackEnd::Scrooby::GotoScreenCallback virtual table",
        ),
    ),
    (
        "_vt$18CGuiManagerBackEnd",
        Ok(
            "CGuiManagerBackEnd virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z7tSprite",
        Ok(
            "radLoadInventory::SafeCast<tSprite> virtual table",
        ),
    ),
    (
        "_vt$19CGuiScreenPlayMovie$Q217PresentationEvent25PresentationEventCallBack",
        Ok(
            "CGuiScreenPlayMovie::PresentationEvent::PresentationEventCallBack virtual table",
        ),
    ),
    (
        "_vt$19CGuiScreenPlayMovie",
        Ok(
            "CGuiScreenPlayMovie virtual table",
        ),
    ),
    (
        "_vt$20CGuiScreenViewMovies",
        Ok(
            "CGuiScreenViewMovies virtual table",
        ),
    ),
    (
        "_vt$21CGuiScreenViewCredits",
        Ok(
            "CGuiScreenViewCredits virtual table",
        ),
    ),
    (
        "_vt$15CGuiScreenSound",
        Ok(
            "CGuiScreenSound virtual table",
        ),
    ),
    (
        "_vt$20CGuiScreenController",
        Ok(
            "CGuiScreenController virtual table",
        ),
    ),
    (
        "_vt$17CGuiScreenOptions$21ICheatEnteredCallback",
        Ok(
            "CGuiScreenOptions::ICheatEnteredCallback virtual table",
        ),
    ),
    (
        "_vt$17CGuiScreenOptions",
        Ok(
            "CGuiScreenOptions virtual table",
        ),
    ),
    (
        "_vt$24CGuiScreenVehicleGallery$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "CGuiScreenVehicleGallery::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$24CGuiScreenVehicleGallery",
        Ok(
            "CGuiScreenVehicleGallery virtual table",
        ),
    ),
    (
        "_vt$21CGuiScreenSkinGallery$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "CGuiScreenSkinGallery::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$21CGuiScreenSkinGallery",
        Ok(
            "CGuiScreenSkinGallery virtual table",
        ),
    ),
    (
        "_vt$24CGuiScreenMissionGallery$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "CGuiScreenMissionGallery::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$24CGuiScreenMissionGallery",
        Ok(
            "CGuiScreenMissionGallery virtual table",
        ),
    ),
    (
        "_vt$21CGuiScreenCardGallery",
        Ok(
            "CGuiScreenCardGallery virtual table",
        ),
    ),
    (
        "_vt$24CGuiScreenScrapBookStats",
        Ok(
            "CGuiScreenScrapBookStats virtual table",
        ),
    ),
    (
        "_vt$27CGuiScreenScrapBookContents",
        Ok(
            "CGuiScreenScrapBookContents virtual table",
        ),
    ),
    (
        "_vt$19CGuiScreenScrapBook",
        Ok(
            "CGuiScreenScrapBook virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenAutoLoad$20GameDataLoadCallback",
        Ok(
            "CGuiScreenAutoLoad::GameDataLoadCallback virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenAutoLoad$18CGuiScreenLoadSave",
        Ok(
            "CGuiScreenAutoLoad::CGuiScreenLoadSave virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenAutoLoad",
        Ok(
            "CGuiScreenAutoLoad virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenLoadGame$20GameDataLoadCallback",
        Ok(
            "CGuiScreenLoadGame::GameDataLoadCallback virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenLoadGame$18CGuiScreenLoadSave",
        Ok(
            "CGuiScreenLoadGame::CGuiScreenLoadSave virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenLoadGame",
        Ok(
            "CGuiScreenLoadGame virtual table",
        ),
    ),
    (
        "_vt$25CGuiScreenIntroTransition",
        Ok(
            "CGuiScreenIntroTransition virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu virtual table",
        ),
    ),
    (
        "_vt$16CGuiScreenSplash",
        Ok(
            "CGuiScreenSplash virtual table",
        ),
    ),
    (
        "_vt$19CGuiManagerFrontEnd$13EventListener",
        Ok(
            "CGuiManagerFrontEnd::EventListener virtual table",
        ),
    ),
    (
        "_vt$19CGuiManagerFrontEnd$Q27Scrooby18GotoScreenCallback",
        Ok(
            "CGuiManagerFrontEnd::Scrooby::GotoScreenCallback virtual table",
        ),
    ),
    (
        "_vt$19CGuiManagerFrontEnd",
        Ok(
            "CGuiManagerFrontEnd virtual table",
        ),
    ),
    (
        "_vt$20GameDataLoadCallback",
        Ok(
            "GameDataLoadCallback virtual table",
        ),
    ),
    (
        "_vt$21CGuiScreenMiniSummary",
        Ok(
            "CGuiScreenMiniSummary virtual table",
        ),
    ),
    (
        "_vt$19CGuiScreenMiniPause",
        Ok(
            "CGuiScreenMiniPause virtual table",
        ),
    ),
    (
        "_vt$17CGuiScreenMiniHud",
        Ok(
            "CGuiScreenMiniHud virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenMiniMenu",
        Ok(
            "CGuiScreenMiniMenu virtual table",
        ),
    ),
    (
        "_vt$19CGuiManagerMiniGame$13EventListener",
        Ok(
            "CGuiManagerMiniGame::EventListener virtual table",
        ),
    ),
    (
        "_vt$19CGuiManagerMiniGame$Q27Scrooby18GotoScreenCallback",
        Ok(
            "CGuiManagerMiniGame::Scrooby::GotoScreenCallback virtual table",
        ),
    ),
    (
        "_vt$19CGuiManagerMiniGame",
        Ok(
            "CGuiManagerMiniGame virtual table",
        ),
    ),
    (
        "_vt$8ResetCar",
        Ok(
            "ResetCar virtual table",
        ),
    ),
    (
        "_vt$24CGuiScreenCreditsPostFMV",
        Ok(
            "CGuiScreenCreditsPostFMV virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenTutorial",
        Ok(
            "CGuiScreenTutorial virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenSaveGame$20GameDataSaveCallback",
        Ok(
            "CGuiScreenSaveGame::GameDataSaveCallback virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenSaveGame$18CGuiScreenLoadSave",
        Ok(
            "CGuiScreenSaveGame::CGuiScreenLoadSave virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenSaveGame",
        Ok(
            "CGuiScreenSaveGame virtual table",
        ),
    ),
    (
        "_vt$25CGuiScreenPurchaseRewards$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "CGuiScreenPurchaseRewards::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards virtual table",
        ),
    ),
    (
        "_vt$20CGuiScreenPhoneBooth$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "CGuiScreenPhoneBooth::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth virtual table",
        ),
    ),
    (
        "_vt$17IGuiScreenRewards$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "IGuiScreenRewards::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$17IGuiScreenRewards",
        Ok(
            "IGuiScreenRewards virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenIrisWipe",
        Ok(
            "CGuiScreenIrisWipe virtual table",
        ),
    ),
    (
        "_vt$19CGuiScreenLetterBox$13EventListener",
        Ok(
            "CGuiScreenLetterBox::EventListener virtual table",
        ),
    ),
    (
        "_vt$19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox virtual table",
        ),
    ),
    (
        "_vt$19CGuiScreenViewCards",
        Ok(
            "CGuiScreenViewCards virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenLevelEnd",
        Ok(
            "CGuiScreenLevelEnd virtual table",
        ),
    ),
    (
        "_vt$20CGuiScreenLevelStats",
        Ok(
            "CGuiScreenLevelStats virtual table",
        ),
    ),
    (
        "_vt$24CGuiScreenMissionSuccess",
        Ok(
            "CGuiScreenMissionSuccess virtual table",
        ),
    ),
    (
        "_vt$21CGuiScreenMissionOver$13EventListener",
        Ok(
            "CGuiScreenMissionOver::EventListener virtual table",
        ),
    ),
    (
        "_vt$21CGuiScreenMissionOver",
        Ok(
            "CGuiScreenMissionOver virtual table",
        ),
    ),
    (
        "_vt$21CGuiScreenMissionLoad$13EventListener",
        Ok(
            "CGuiScreenMissionLoad::EventListener virtual table",
        ),
    ),
    (
        "_vt$21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad virtual table",
        ),
    ),
    (
        "_vt$21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase virtual table",
        ),
    ),
    (
        "_vt$23CGuiScreenPauseSettings$21ICheatEnteredCallback",
        Ok(
            "CGuiScreenPauseSettings::ICheatEnteredCallback virtual table",
        ),
    ),
    (
        "_vt$23CGuiScreenPauseSettings",
        Ok(
            "CGuiScreenPauseSettings virtual table",
        ),
    ),
    (
        "_vt$20CGuiScreenPauseSound",
        Ok(
            "CGuiScreenPauseSound virtual table",
        ),
    ),
    (
        "_vt$25CGuiScreenPauseController",
        Ok(
            "CGuiScreenPauseController virtual table",
        ),
    ),
    (
        "_vt$22CGuiScreenPauseOptions",
        Ok(
            "CGuiScreenPauseOptions virtual table",
        ),
    ),
    (
        "_vt$23CGuiScreenMissionSelect",
        Ok(
            "CGuiScreenMissionSelect virtual table",
        ),
    ),
    (
        "_vt$22CGuiScreenPauseMission",
        Ok(
            "CGuiScreenPauseMission virtual table",
        ),
    ),
    (
        "_vt$21CGuiScreenPauseSunday",
        Ok(
            "CGuiScreenPauseSunday virtual table",
        ),
    ),
    (
        "_vt$15CGuiScreenPause",
        Ok(
            "CGuiScreenPause virtual table",
        ),
    ),
    (
        "_vt$13CGuiScreenHud$13EventListener",
        Ok(
            "CGuiScreenHud::EventListener virtual table",
        ),
    ),
    (
        "_vt$13CGuiScreenHud",
        Ok(
            "CGuiScreenHud virtual table",
        ),
    ),
    (
        "_vt$12MessageQueue",
        Ok(
            "MessageQueue virtual table",
        ),
    ),
    (
        "_vt$18CGuiScreenMultiHud",
        Ok(
            "CGuiScreenMultiHud virtual table",
        ),
    ),
    (
        "_vt$17CGuiManagerInGame$27IMemoryCardInfoLoadCallback",
        Ok(
            "CGuiManagerInGame::IMemoryCardInfoLoadCallback virtual table",
        ),
    ),
    (
        "_vt$17CGuiManagerInGame$Q27Scrooby19LoadProjectCallback",
        Ok(
            "CGuiManagerInGame::Scrooby::LoadProjectCallback virtual table",
        ),
    ),
    (
        "_vt$17CGuiManagerInGame$13EventListener",
        Ok(
            "CGuiManagerInGame::EventListener virtual table",
        ),
    ),
    (
        "_vt$17CGuiManagerInGame$Q27Scrooby18GotoScreenCallback",
        Ok(
            "CGuiManagerInGame::Scrooby::GotoScreenCallback virtual table",
        ),
    ),
    (
        "_vt$17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX21RestartCurrentMission",
        Ok(
            "GuiSFX::RestartCurrentMission virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX8OpenIris",
        Ok(
            "GuiSFX::OpenIris virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX19AbortCurrentMission",
        Ok(
            "GuiSFX::AbortCurrentMission virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z26tCameraAnimationController",
        Ok(
            "radLoadInventory::SafeCast<tCameraAnimationController> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z7tEntity",
        Ok(
            "radLoadInventory::SafeCast<tEntity> virtual table",
        ),
    ),
    (
        "_vt$20GameDataSaveCallback",
        Ok(
            "GameDataSaveCallback virtual table",
        ),
    ),
    (
        "_vt$27IMemoryCardInfoLoadCallback",
        Ok(
            "IMemoryCardInfoLoadCallback virtual table",
        ),
    ),
    (
        "_vt$14HudItemDropped",
        Ok(
            "HudItemDropped virtual table",
        ),
    ),
    (
        "_vt$16HudWaspDestroyed",
        Ok(
            "HudWaspDestroyed virtual table",
        ),
    ),
    (
        "_vt$10HudHitNRun",
        Ok(
            "HudHitNRun virtual table",
        ),
    ),
    (
        "_vt$12HudCountDown",
        Ok(
            "HudCountDown virtual table",
        ),
    ),
    (
        "_vt$19HudMissionObjective",
        Ok(
            "HudMissionObjective virtual table",
        ),
    ),
    (
        "_vt$18HudMissionProgress",
        Ok(
            "HudMissionProgress virtual table",
        ),
    ),
    (
        "_vt$16HudCoinCollected",
        Ok(
            "HudCoinCollected virtual table",
        ),
    ),
    (
        "_vt$16HudCardCollected",
        Ok(
            "HudCardCollected virtual table",
        ),
    ),
    (
        "_vt$15HudEventHandler",
        Ok(
            "HudEventHandler virtual table",
        ),
    ),
    (
        "_vt$13ScrollingText",
        Ok(
            "ScrollingText virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX21UnderdampedTranslator",
        Ok(
            "GuiSFX::UnderdampedTranslator virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX10Translator",
        Ok(
            "GuiSFX::Translator virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX4Spin",
        Ok(
            "GuiSFX::Spin virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX10PulseScale",
        Ok(
            "GuiSFX::PulseScale virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX11ImageCycler",
        Ok(
            "GuiSFX::ImageCycler virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX10ResumeGame",
        Ok(
            "GuiSFX::ResumeGame virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX9PauseGame",
        Ok(
            "GuiSFX::PauseGame virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX13PauseInFrames",
        Ok(
            "GuiSFX::PauseInFrames virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX5Pause",
        Ok(
            "GuiSFX::Pause virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX4Show",
        Ok(
            "GuiSFX::Show virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX13IrisWipeClose",
        Ok(
            "GuiSFX::IrisWipeClose virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX12IrisWipeOpen",
        Ok(
            "GuiSFX::IrisWipeOpen virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX11ColorChange",
        Ok(
            "GuiSFX::ColorChange virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX13SwitchContext",
        Ok(
            "GuiSFX::SwitchContext virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX9SendEvent",
        Ok(
            "GuiSFX::SendEvent virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX12RecieveEvent$13EventListener",
        Ok(
            "GuiSFX::RecieveEvent::EventListener virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX12RecieveEvent",
        Ok(
            "GuiSFX::RecieveEvent virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX16InputStateChange",
        Ok(
            "GuiSFX::InputStateChange virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX4Hide",
        Ok(
            "GuiSFX::Hide virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX10GotoScreen",
        Ok(
            "GuiSFX::GotoScreen virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX5Dummy",
        Ok(
            "GuiSFX::Dummy virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX9Junction3",
        Ok(
            "GuiSFX::Junction3 virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX9Junction2",
        Ok(
            "GuiSFX::Junction2 virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX10Chainable3",
        Ok(
            "GuiSFX::Chainable3 virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX10Chainable2",
        Ok(
            "GuiSFX::Chainable2 virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX10Chainable1",
        Ok(
            "GuiSFX::Chainable1 virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX9Chainable",
        Ok(
            "GuiSFX::Chainable virtual table",
        ),
    ),
    (
        "_vt$Q26GuiSFX10Transition",
        Ok(
            "GuiSFX::Transition virtual table",
        ),
    ),
    (
        "_vt$13CTeleTypeText",
        Ok(
            "CTeleTypeText virtual table",
        ),
    ),
    (
        "_vt$11ImageSlider",
        Ok(
            "ImageSlider virtual table",
        ),
    ),
    (
        "_vt$6Slider",
        Ok(
            "Slider virtual table",
        ),
    ),
    (
        "_vt$7CHudMap",
        Ok(
            "CHudMap virtual table",
        ),
    ),
    (
        "_vt$9HudMapCam",
        Ok(
            "HudMapCam virtual table",
        ),
    ),
    (
        "_vt$15TransitionEvent",
        Ok(
            "TransitionEvent virtual table",
        ),
    ),
    (
        "_vt$8NISEvent",
        Ok(
            "NISEvent virtual table",
        ),
    ),
    (
        "_vt$8FMVEvent",
        Ok(
            "FMVEvent virtual table",
        ),
    ),
    (
        "_vt$17PresentationEvent",
        Ok(
            "PresentationEvent virtual table",
        ),
    ),
    (
        "_vt$10WorldScene",
        Ok(
            "WorldScene virtual table",
        ),
    ),
    (
        "_vt$8SphereSP",
        Ok(
            "SphereSP virtual table",
        ),
    ),
    (
        "_vt$11SpatialTree",
        Ok(
            "SpatialTree virtual table",
        ),
    ),
    (
        "_vt$11HexahedronP",
        Ok(
            "HexahedronP virtual table",
        ),
    ),
    (
        "_vt$6BoxPts",
        Ok(
            "BoxPts virtual table",
        ),
    ),
    (
        "_vt$12StatePropDSG$18CStatePropListener",
        Ok(
            "StatePropDSG::CStatePropListener virtual table",
        ),
    ),
    (
        "_vt$12StatePropDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "StatePropDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$12StatePropDSG",
        Ok(
            "StatePropDSG virtual table",
        ),
    ),
    (
        "_vt$19AnimDynaPhysWrapper",
        Ok(
            "AnimDynaPhysWrapper virtual table",
        ),
    ),
    (
        "_vt$19InstAnimDynaPhysDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "InstAnimDynaPhysDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$19InstAnimDynaPhysDSG",
        Ok(
            "InstAnimDynaPhysDSG virtual table",
        ),
    ),
    (
        "_vt$14WorldSphereDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "WorldSphereDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$14WorldSphereDSG",
        Ok(
            "WorldSphereDSG virtual table",
        ),
    ),
    (
        "_vt$12LensFlareDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "LensFlareDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$12LensFlareDSG",
        Ok(
            "LensFlareDSG virtual table",
        ),
    ),
    (
        "_vt$15InstStatPhysDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "InstStatPhysDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$15InstStatPhysDSG",
        Ok(
            "InstStatPhysDSG virtual table",
        ),
    ),
    (
        "_vt$18BreakableObjectDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "BreakableObjectDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$18BreakableObjectDSG",
        Ok(
            "BreakableObjectDSG virtual table",
        ),
    ),
    (
        "_vt$14FenceEntityDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "FenceEntityDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$14FenceEntityDSG",
        Ok(
            "FenceEntityDSG virtual table",
        ),
    ),
    (
        "_vt$12IntersectDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "IntersectDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$12IntersectDSG",
        Ok(
            "IntersectDSG virtual table",
        ),
    ),
    (
        "_vt$13AnimEntityDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "AnimEntityDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$13AnimEntityDSG",
        Ok(
            "AnimEntityDSG virtual table",
        ),
    ),
    (
        "_vt$17InstStatEntityDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "InstStatEntityDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG virtual table",
        ),
    ),
    (
        "_vt$15StaticEntityDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "StaticEntityDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$15StaticEntityDSG",
        Ok(
            "StaticEntityDSG virtual table",
        ),
    ),
    (
        "_vt$15InstDynaPhysDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "InstDynaPhysDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$15InstDynaPhysDSG",
        Ok(
            "InstDynaPhysDSG virtual table",
        ),
    ),
    (
        "_vt$11DynaPhysDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "DynaPhysDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$11DynaPhysDSG",
        Ok(
            "DynaPhysDSG virtual table",
        ),
    ),
    (
        "_vt$13StaticPhysDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "StaticPhysDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$13StaticPhysDSG",
        Ok(
            "StaticPhysDSG virtual table",
        ),
    ),
    (
        "_vt$22AnimCollisionEntityDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "AnimCollisionEntityDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$22AnimCollisionEntityDSG",
        Ok(
            "AnimCollisionEntityDSG virtual table",
        ),
    ),
    (
        "_vt$18CollisionEntityDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "CollisionEntityDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$18CollisionEntityDSG",
        Ok(
            "CollisionEntityDSG virtual table",
        ),
    ),
    (
        "_vt$19CollisionAttributes",
        Ok(
            "CollisionAttributes virtual table",
        ),
    ),
    (
        "_vt$10IEntityDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "IEntityDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$10IEntityDSG",
        Ok(
            "IEntityDSG virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ23sim13PhysicsObject",
        Ok(
            "radLoadInventory::SafeCast<sim::PhysicsObject> virtual table",
        ),
    ),
    (
        "_vt$Q29tDrawable14ShaderCallback",
        Ok(
            "tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$17BreakablesManager",
        Ok(
            "BreakablesManager virtual table",
        ),
    ),
    (
        "_vt$8Skidmark$Q29tDrawable14ShaderCallback",
        Ok(
            "Skidmark::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$8Skidmark",
        Ok(
            "Skidmark virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z7tShader",
        Ok(
            "radLoadInventory::SafeCast<tShader> virtual table",
        ),
    ),
    (
        "_vt$15LensFlareLoader$14IWrappedLoader",
        Ok(
            "LensFlareLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$15LensFlareLoader",
        Ok(
            "LensFlareLoader virtual table",
        ),
    ),
    (
        "_vt$21BreakableObjectLoader$14IWrappedLoader",
        Ok(
            "BreakableObjectLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$21BreakableObjectLoader",
        Ok(
            "BreakableObjectLoader virtual table",
        ),
    ),
    (
        "_vt$24InstParticleSystemLoader$14IWrappedLoader",
        Ok(
            "InstParticleSystemLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$24InstParticleSystemLoader",
        Ok(
            "InstParticleSystemLoader virtual table",
        ),
    ),
    (
        "_vt$22BillboardWrappedLoader$14IWrappedLoader",
        Ok(
            "BillboardWrappedLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$22BillboardWrappedLoader",
        Ok(
            "BillboardWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$23AnimObjDSGWrapperLoader$14IWrappedLoader",
        Ok(
            "AnimObjDSGWrapperLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$23AnimObjDSGWrapperLoader",
        Ok(
            "AnimObjDSGWrapperLoader virtual table",
        ),
    ),
    (
        "_vt$25AnimDynaPhysWrapperLoader$14IWrappedLoader",
        Ok(
            "AnimDynaPhysWrapperLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$25AnimDynaPhysWrapperLoader",
        Ok(
            "AnimDynaPhysWrapperLoader virtual table",
        ),
    ),
    (
        "_vt$18AnimDynaPhysLoader$14IWrappedLoader",
        Ok(
            "AnimDynaPhysLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$18AnimDynaPhysLoader",
        Ok(
            "AnimDynaPhysLoader virtual table",
        ),
    ),
    (
        "_vt$17WorldSphereLoader$14IWrappedLoader",
        Ok(
            "WorldSphereLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$17WorldSphereLoader",
        Ok(
            "WorldSphereLoader virtual table",
        ),
    ),
    (
        "_vt$20InstStatEntityLoader$14IWrappedLoader",
        Ok(
            "InstStatEntityLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$20InstStatEntityLoader",
        Ok(
            "InstStatEntityLoader virtual table",
        ),
    ),
    (
        "_vt$18InstStatPhysLoader$14IWrappedLoader",
        Ok(
            "InstStatPhysLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$18InstStatPhysLoader",
        Ok(
            "InstStatPhysLoader virtual table",
        ),
    ),
    (
        "_vt$14DynaPhysLoader$14IWrappedLoader",
        Ok(
            "DynaPhysLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$14DynaPhysLoader",
        Ok(
            "DynaPhysLoader virtual table",
        ),
    ),
    (
        "_vt$13AnimDSGLoader$14IWrappedLoader",
        Ok(
            "AnimDSGLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$13AnimDSGLoader",
        Ok(
            "AnimDSGLoader virtual table",
        ),
    ),
    (
        "_vt$14AnimCollLoader$14IWrappedLoader",
        Ok(
            "AnimCollLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$14AnimCollLoader",
        Ok(
            "AnimCollLoader virtual table",
        ),
    ),
    (
        "_vt$15IntersectLoader$14IWrappedLoader",
        Ok(
            "IntersectLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$15IntersectLoader",
        Ok(
            "IntersectLoader virtual table",
        ),
    ),
    (
        "_vt$11FenceLoader$14IWrappedLoader",
        Ok(
            "FenceLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$11FenceLoader",
        Ok(
            "FenceLoader virtual table",
        ),
    ),
    (
        "_vt$13TreeDSGLoader$14IWrappedLoader",
        Ok(
            "TreeDSGLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$13TreeDSGLoader",
        Ok(
            "TreeDSGLoader virtual table",
        ),
    ),
    (
        "_vt$16StaticPhysLoader$14IWrappedLoader",
        Ok(
            "StaticPhysLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$16StaticPhysLoader",
        Ok(
            "StaticPhysLoader virtual table",
        ),
    ),
    (
        "_vt$18StaticEntityLoader$14IWrappedLoader",
        Ok(
            "StaticEntityLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$18StaticEntityLoader",
        Ok(
            "StaticEntityLoader virtual table",
        ),
    ),
    (
        "_vt$21GeometryWrappedLoader$14IWrappedLoader",
        Ok(
            "GeometryWrappedLoader::IWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$21GeometryWrappedLoader",
        Ok(
            "GeometryWrappedLoader virtual table",
        ),
    ),
    (
        "_vt$t16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> virtual table",
        ),
    ),
    (
        "_vt$t9tPtrArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrArray<ParticleManager::ManagedParticleSystem *> virtual table",
        ),
    ),
    (
        "_vt$t16tPtrDynamicArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrDynamicArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > virtual table",
        ),
    ),
    (
        "_vt$17ParticleSystemDSG$Q29tDrawable14ShaderCallback",
        Ok(
            "ParticleSystemDSG::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$17ParticleSystemDSG",
        Ok(
            "ParticleSystemDSG virtual table",
        ),
    ),
    (
        "_vt$t6tArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tArray<ParticleManager::ManagedParticleSystem *> virtual table",
        ),
    ),
    (
        "_vt$t6tArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > virtual table",
        ),
    ),
    (
        "_vt$20AnimEntityDSGManager",
        Ok(
            "AnimEntityDSGManager virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z13AnimEntityDSG",
        Ok(
            "radLoadInventory::SafeCast<AnimEntityDSG> virtual table",
        ),
    ),
    (
        "_vt$10RenderFlow",
        Ok(
            "RenderFlow virtual table",
        ),
    ),
    (
        "_vt$16WorldRenderLayer",
        Ok(
            "WorldRenderLayer virtual table",
        ),
    ),
    (
        "_vt$13RenderManager$13EventListener",
        Ok(
            "RenderManager::EventListener virtual table",
        ),
    ),
    (
        "_vt$13RenderManager$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "RenderManager::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$13RenderManager",
        Ok(
            "RenderManager virtual table",
        ),
    ),
    (
        "_vt$19FrontEndRenderLayer",
        Ok(
            "FrontEndRenderLayer virtual table",
        ),
    ),
    (
        "_vt$11RenderLayer",
        Ok(
            "RenderLayer virtual table",
        ),
    ),
    (
        "_vt$21ChunkListenerCallback",
        Ok(
            "ChunkListenerCallback virtual table",
        ),
    ),
    (
        "_11RoadManager$AGAINST_TRAFFIC_COST_MULTIPLIER",
        Ok(
            "RoadManager::AGAINST_TRAFFIC_COST_MULTIPLIER",
        ),
    ),
    (
        "_vt$11RoadSegment$Q29tDrawable14ShaderCallback",
        Ok(
            "RoadSegment::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$11RoadSegment",
        Ok(
            "RoadSegment virtual table",
        ),
    ),
    (
        "_vt$11RoadManager",
        Ok(
            "RoadManager virtual table",
        ),
    ),
    (
        "_vt$4Lane$12ILaneControl",
        Ok(
            "Lane::ILaneControl virtual table",
        ),
    ),
    (
        "_vt$4Lane",
        Ok(
            "Lane virtual table",
        ),
    ),
    (
        "_vt$12CourtesyStop",
        Ok(
            "CourtesyStop virtual table",
        ),
    ),
    (
        "_vt$8NWayStop",
        Ok(
            "NWayStop virtual table",
        ),
    ),
    (
        "_vt$12TrafficLight",
        Ok(
            "TrafficLight virtual table",
        ),
    ),
    (
        "_vt$14TrafficControl",
        Ok(
            "TrafficControl virtual table",
        ),
    ),
    (
        "_vt$12ILaneControl",
        Ok(
            "ILaneControl virtual table",
        ),
    ),
    (
        "_vt$16ILaneInformation",
        Ok(
            "ILaneInformation virtual table",
        ),
    ),
    (
        "_vt$28SoundRenderingPlayerCallback$11radRefCount",
        Ok(
            "SoundRenderingPlayerCallback::radRefCount virtual table",
        ),
    ),
    (
        "_vt$28SoundRenderingPlayerCallback",
        Ok(
            "SoundRenderingPlayerCallback virtual table",
        ),
    ),
    (
        "_vt$12SoundManager$15GameDataHandler",
        Ok(
            "SoundManager::GameDataHandler virtual table",
        ),
    ),
    (
        "_vt$12SoundManager",
        Ok(
            "SoundManager virtual table",
        ),
    ),
    (
        "_vt$21PositionalSoundPlayer",
        Ok(
            "PositionalSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$15PositionCarrier",
        Ok(
            "PositionCarrier virtual table",
        ),
    ),
    (
        "_vt$11SoundLoader",
        Ok(
            "SoundLoader virtual table",
        ),
    ),
    (
        "_vt$12SoundCluster$11radRefCount",
        Ok(
            "SoundCluster::radRefCount virtual table",
        ),
    ),
    (
        "_vt$12SoundCluster",
        Ok(
            "SoundCluster virtual table",
        ),
    ),
    (
        "_vt$19SimpsonsSoundPlayer",
        Ok(
            "SimpsonsSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$8Listener",
        Ok(
            "Listener virtual table",
        ),
    ),
    (
        "_t13_Alloc_traits2ZP18DialogQueueElementZt7s2alloc1ZP18DialogQueueElement$_S_instanceless",
        Ok(
            "_Alloc_traits<DialogQueueElement *, s2alloc<DialogQueueElement *> >::_S_instanceless",
        ),
    ),
    (
        "_vt$Q25Sound34IDaSoundDynaLoadCompletionCallback",
        Ok(
            "Sound::IDaSoundDynaLoadCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$Q25Sound19IDaSoundPlayerState",
        Ok(
            "Sound::IDaSoundPlayerState virtual table",
        ),
    ),
    (
        "_vt$15SkidEngineState",
        Ok(
            "SkidEngineState virtual table",
        ),
    ),
    (
        "_vt$15IdleEngineState",
        Ok(
            "IdleEngineState virtual table",
        ),
    ),
    (
        "_vt$18ReverseEngineState",
        Ok(
            "ReverseEngineState virtual table",
        ),
    ),
    (
        "_vt$16InAirEngineState",
        Ok(
            "InAirEngineState virtual table",
        ),
    ),
    (
        "_vt$20DownshiftEngineState",
        Ok(
            "DownshiftEngineState virtual table",
        ),
    ),
    (
        "_vt$18UpshiftEngineState",
        Ok(
            "UpshiftEngineState virtual table",
        ),
    ),
    (
        "_vt$17NormalEngineState",
        Ok(
            "NormalEngineState virtual table",
        ),
    ),
    (
        "_vt$11EngineState",
        Ok(
            "EngineState virtual table",
        ),
    ),
    (
        "_vt$18carSoundParameters$11radRefCount",
        Ok(
            "carSoundParameters::radRefCount virtual table",
        ),
    ),
    (
        "_vt$18carSoundParameters",
        Ok(
            "carSoundParameters virtual table",
        ),
    ),
    (
        "_vt$11SoundAvatar",
        Ok(
            "SoundAvatar virtual table",
        ),
    ),
    (
        "_vt$18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$21VehicleSoundDebugPage",
        Ok(
            "VehicleSoundDebugPage virtual table",
        ),
    ),
    (
        "_vt$17AvatarSoundPlayer",
        Ok(
            "AvatarSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$19ICarSoundParameters",
        Ok(
            "ICarSoundParameters virtual table",
        ),
    ),
    (
        "_vt$27SimpsonsSoundPlayerCallback",
        Ok(
            "SimpsonsSoundPlayerCallback virtual table",
        ),
    ),
    (
        "_vt$17DialogCoordinator",
        Ok(
            "DialogCoordinator virtual table",
        ),
    ),
    (
        "_vt$19DialogPriorityQueue$22DialogCompleteCallback",
        Ok(
            "DialogPriorityQueue::DialogCompleteCallback virtual table",
        ),
    ),
    (
        "_vt$19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue virtual table",
        ),
    ),
    (
        "_vt$20DialogSoundDebugPage",
        Ok(
            "DialogSoundDebugPage virtual table",
        ),
    ),
    (
        "_vt$18DialogQueueElement$11radRefCount",
        Ok(
            "DialogQueueElement::radRefCount virtual table",
        ),
    ),
    (
        "_vt$18DialogQueueElement$27SimpsonsSoundPlayerCallback",
        Ok(
            "DialogQueueElement::SimpsonsSoundPlayerCallback virtual table",
        ),
    ),
    (
        "_vt$18DialogQueueElement",
        Ok(
            "DialogQueueElement virtual table",
        ),
    ),
    (
        "_vt$10DialogList",
        Ok(
            "DialogList virtual table",
        ),
    ),
    (
        "_vt$19ConversationMatcher",
        Ok(
            "ConversationMatcher virtual table",
        ),
    ),
    (
        "_vt$20DialogSelectionGroup",
        Ok(
            "DialogSelectionGroup virtual table",
        ),
    ),
    (
        "_vt$10DialogLine",
        Ok(
            "DialogLine virtual table",
        ),
    ),
    (
        "_vt$12Conversation",
        Ok(
            "Conversation virtual table",
        ),
    ),
    (
        "_vt$14PlayableDialog",
        Ok(
            "PlayableDialog virtual table",
        ),
    ),
    (
        "_vt$16SelectableDialog",
        Ok(
            "SelectableDialog virtual table",
        ),
    ),
    (
        "_t13_Alloc_traits2ZP16SelectableDialogZt7s2alloc1ZP16SelectableDialog$_S_instanceless",
        Ok(
            "_Alloc_traits<SelectableDialog *, s2alloc<SelectableDialog *> >::_S_instanceless",
        ),
    ),
    (
        "_vt$22DialogCompleteCallback",
        Ok(
            "DialogCompleteCallback virtual table",
        ),
    ),
    (
        "_vt$26DialogLineCompleteCallback",
        Ok(
            "DialogLineCompleteCallback virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ28radmusic27radload_composition_adapter",
        Ok(
            "radLoadInventory::SafeCast<radmusic::radload_composition_adapter> virtual table",
        ),
    ),
    (
        "_vt$11MusicPlayer",
        Ok(
            "MusicPlayer virtual table",
        ),
    ),
    (
        "_vt$14NISSoundPlayer",
        Ok(
            "NISSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$14NISPlayerGroup",
        Ok(
            "NISPlayerGroup virtual table",
        ),
    ),
    (
        "_vt$14reverbSettings$11radRefCount",
        Ok(
            "reverbSettings::radRefCount virtual table",
        ),
    ),
    (
        "_vt$14reverbSettings",
        Ok(
            "reverbSettings virtual table",
        ),
    ),
    (
        "_vt$23positionalSoundSettings$11radRefCount",
        Ok(
            "positionalSoundSettings::radRefCount virtual table",
        ),
    ),
    (
        "_vt$23positionalSoundSettings",
        Ok(
            "positionalSoundSettings virtual table",
        ),
    ),
    (
        "_vt$19PS2ReverbController",
        Ok(
            "PS2ReverbController virtual table",
        ),
    ),
    (
        "_vt$16ReverbController",
        Ok(
            "ReverbController virtual table",
        ),
    ),
    (
        "_vt$17SoundFXPauseLogic$27SimpsonsSoundPlayerCallback",
        Ok(
            "SoundFXPauseLogic::SimpsonsSoundPlayerCallback virtual table",
        ),
    ),
    (
        "_vt$17SoundFXPauseLogic",
        Ok(
            "SoundFXPauseLogic virtual table",
        ),
    ),
    (
        "_vt$20SoundFXGameplayLogic$27SimpsonsSoundPlayerCallback",
        Ok(
            "SoundFXGameplayLogic::SimpsonsSoundPlayerCallback virtual table",
        ),
    ),
    (
        "_vt$20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic virtual table",
        ),
    ),
    (
        "_vt$20SoundFXFrontEndLogic$27SimpsonsSoundPlayerCallback",
        Ok(
            "SoundFXFrontEndLogic::SimpsonsSoundPlayerCallback virtual table",
        ),
    ),
    (
        "_vt$20SoundFXFrontEndLogic",
        Ok(
            "SoundFXFrontEndLogic virtual table",
        ),
    ),
    (
        "_vt$12SoundFXLogic$27SimpsonsSoundPlayerCallback",
        Ok(
            "SoundFXLogic::SimpsonsSoundPlayerCallback virtual table",
        ),
    ),
    (
        "_vt$12SoundFXLogic",
        Ok(
            "SoundFXLogic virtual table",
        ),
    ),
    (
        "_vt$17SoundEffectPlayer",
        Ok(
            "SoundEffectPlayer virtual table",
        ),
    ),
    (
        "_vt$15IReverbSettings",
        Ok(
            "IReverbSettings virtual table",
        ),
    ),
    (
        "_vt$24IPositionalSoundSettings",
        Ok(
            "IPositionalSoundSettings virtual table",
        ),
    ),
    (
        "_vt$Q25Sound12daSoundTuner$11radRefCount",
        Ok(
            "Sound::daSoundTuner::radRefCount virtual table",
        ),
    ),
    (
        "_vt$Q25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner virtual table",
        ),
    ),
    (
        "_vt$Q25Sound27daSoundTuner_ActiveFadeInfo",
        Ok(
            "Sound::daSoundTuner_ActiveFadeInfo virtual table",
        ),
    ),
    (
        "_vt$14TunerDebugPage",
        Ok(
            "TunerDebugPage virtual table",
        ),
    ),
    (
        "_vt$28SoundResourceFilenameBuilder",
        Ok(
            "SoundResourceFilenameBuilder virtual table",
        ),
    ),
    (
        "_vt$5Fader",
        Ok(
            "Fader virtual table",
        ),
    ),
    (
        "_vt$Q25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager virtual table",
        ),
    ),
    (
        "_vt$Q25Sound20daSoundPlayerManager$11radRefCount",
        Ok(
            "Sound::daSoundPlayerManager::radRefCount virtual table",
        ),
    ),
    (
        "_vt$Q25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager virtual table",
        ),
    ),
    (
        "_vt$Q25Sound24daSoundAsyncFadeCallback",
        Ok(
            "Sound::daSoundAsyncFadeCallback virtual table",
        ),
    ),
    (
        "_vt$Q25Sound16MusicSoundPlayer$11radRefCount",
        Ok(
            "Sound::MusicSoundPlayer::radRefCount virtual table",
        ),
    ),
    (
        "_vt$Q25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$Q25Sound23daSoundClipStreamPlayer$23IRadSoundStitchCallback",
        Ok(
            "Sound::daSoundClipStreamPlayer::IRadSoundStitchCallback virtual table",
        ),
    ),
    (
        "_vt$Q25Sound23daSoundClipStreamPlayer$11radRefCount",
        Ok(
            "Sound::daSoundClipStreamPlayer::radRefCount virtual table",
        ),
    ),
    (
        "_vt$Q25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer virtual table",
        ),
    ),
    (
        "_vt$Q25Sound17daSoundPlayerBase$11radRefCount",
        Ok(
            "Sound::daSoundPlayerBase::radRefCount virtual table",
        ),
    ),
    (
        "_vt$Q25Sound17daSoundPlayerBase",
        Ok(
            "Sound::daSoundPlayerBase virtual table",
        ),
    ),
    (
        "_vt$Q25Sound24daSoundAllocatedResource",
        Ok(
            "Sound::daSoundAllocatedResource virtual table",
        ),
    ),
    (
        "_vt$Q25Sound22daSoundDynaLoadManager",
        Ok(
            "Sound::daSoundDynaLoadManager virtual table",
        ),
    ),
    (
        "_vt$Q25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion virtual table",
        ),
    ),
    (
        "_vt$Q25Sound22daSoundResourceManager$11radRefCount",
        Ok(
            "Sound::daSoundResourceManager::radRefCount virtual table",
        ),
    ),
    (
        "_vt$Q25Sound22daSoundResourceManager",
        Ok(
            "Sound::daSoundResourceManager virtual table",
        ),
    ),
    (
        "_vt$19daSoundResourceData",
        Ok(
            "daSoundResourceData virtual table",
        ),
    ),
    (
        "_vt$16IDaSoundResource",
        Ok(
            "IDaSoundResource virtual table",
        ),
    ),
    (
        "_vt$Q25Sound13IDaSoundTuner",
        Ok(
            "Sound::IDaSoundTuner virtual table",
        ),
    ),
    (
        "_vt$Q25Sound17IDaSoundFadeState",
        Ok(
            "Sound::IDaSoundFadeState virtual table",
        ),
    ),
    (
        "_vt$23IRadSoundStitchCallback",
        Ok(
            "IRadSoundStitchCallback virtual table",
        ),
    ),
    (
        "_vt$20IDaSoundResourceData",
        Ok(
            "IDaSoundResourceData virtual table",
        ),
    ),
    (
        "_vt$Q25Sound14IDaSoundWiring",
        Ok(
            "Sound::IDaSoundWiring virtual table",
        ),
    ),
    (
        "_vt$14globalSettings$11radRefCount",
        Ok(
            "globalSettings::radRefCount virtual table",
        ),
    ),
    (
        "_vt$14globalSettings",
        Ok(
            "globalSettings virtual table",
        ),
    ),
    (
        "_vt$15IGlobalSettings",
        Ok(
            "IGlobalSettings virtual table",
        ),
    ),
    (
        "_vt$14SoundDebugPage",
        Ok(
            "SoundDebugPage virtual table",
        ),
    ),
    (
        "_vt$17SoundDebugDisplay",
        Ok(
            "SoundDebugDisplay virtual table",
        ),
    ),
    (
        "_vt$18MovingSoundManager",
        Ok(
            "MovingSoundManager virtual table",
        ),
    ),
    (
        "_vt$18AnimObjSoundPlayer",
        Ok(
            "AnimObjSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$19PlatformSoundPlayer",
        Ok(
            "PlatformSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$15WaspSoundPlayer$13EventListener",
        Ok(
            "WaspSoundPlayer::EventListener virtual table",
        ),
    ),
    (
        "_vt$15WaspSoundPlayer$27SimpsonsSoundPlayerCallback",
        Ok(
            "WaspSoundPlayer::SimpsonsSoundPlayerCallback virtual table",
        ),
    ),
    (
        "_vt$15WaspSoundPlayer",
        Ok(
            "WaspSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$11ActorPlayer$27SimpsonsSoundPlayerCallback",
        Ok(
            "ActorPlayer::SimpsonsSoundPlayerCallback virtual table",
        ),
    ),
    (
        "_vt$11ActorPlayer",
        Ok(
            "ActorPlayer virtual table",
        ),
    ),
    (
        "_vt$23AvatarVehiclePosnPlayer$13EventListener",
        Ok(
            "AvatarVehiclePosnPlayer::EventListener virtual table",
        ),
    ),
    (
        "_vt$23AvatarVehiclePosnPlayer",
        Ok(
            "AvatarVehiclePosnPlayer virtual table",
        ),
    ),
    (
        "_vt$20AIVehicleSoundPlayer",
        Ok(
            "AIVehicleSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$18TrafficSoundPlayer$17IRadTimerCallback",
        Ok(
            "TrafficSoundPlayer::IRadTimerCallback virtual table",
        ),
    ),
    (
        "_vt$18TrafficSoundPlayer",
        Ok(
            "TrafficSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$28VehiclePositionalSoundPlayer",
        Ok(
            "VehiclePositionalSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$11WorldObject",
        Ok(
            "WorldObject virtual table",
        ),
    ),
    (
        "_vt$32WorldCollisionSolverAgentManager",
        Ok(
            "WorldCollisionSolverAgentManager virtual table",
        ),
    ),
    (
        "_vt$14HitnRunManager",
        Ok(
            "HitnRunManager virtual table",
        ),
    ),
    (
        "_vt$13AvatarManager",
        Ok(
            "AvatarManager virtual table",
        ),
    ),
    (
        "_vt$14VehicleCentral",
        Ok(
            "VehicleCentral virtual table",
        ),
    ),
    (
        "_vt$6Avatar",
        Ok(
            "Avatar virtual table",
        ),
    ),
    (
        "_vt$11CoinManager$21ICheatEnteredCallback",
        Ok(
            "CoinManager::ICheatEnteredCallback virtual table",
        ),
    ),
    (
        "_vt$11CoinManager",
        Ok(
            "CoinManager virtual table",
        ),
    ),
    (
        "_vt$45CameraRelativeCharacterControllerEventHandler",
        Ok(
            "CameraRelativeCharacterControllerEventHandler virtual table",
        ),
    ),
    (
        "_vt$22AmbientDialogueTrigger$Q29tDrawable14ShaderCallback",
        Ok(
            "AmbientDialogueTrigger::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$22AmbientDialogueTrigger",
        Ok(
            "AmbientDialogueTrigger virtual table",
        ),
    ),
    (
        "_vt$21AmbientDialogueButton",
        Ok(
            "AmbientDialogueButton virtual table",
        ),
    ),
    (
        "_vt$15CharacterTarget$18IHudMapIconLocator",
        Ok(
            "CharacterTarget::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$15CharacterTarget",
        Ok(
            "CharacterTarget virtual table",
        ),
    ),
    (
        "_vt$22InCarCharacterMappable",
        Ok(
            "InCarCharacterMappable virtual table",
        ),
    ),
    (
        "_vt$22BipedCharacterMappable",
        Ok(
            "BipedCharacterMappable virtual table",
        ),
    ),
    (
        "_vt$17CharacterMappable",
        Ok(
            "CharacterMappable virtual table",
        ),
    ),
    (
        "_vt$6Wander",
        Ok(
            "Wander virtual table",
        ),
    ),
    (
        "_vt$16CharacterManager$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "CharacterManager::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$16CharacterManager",
        Ok(
            "CharacterManager virtual table",
        ),
    ),
    (
        "_vt$11NPCharacter$Q29tDrawable14ShaderCallback",
        Ok(
            "NPCharacter::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$11NPCharacter",
        Ok(
            "NPCharacter virtual table",
        ),
    ),
    (
        "_vt$9Character$Q29tDrawable14ShaderCallback",
        Ok(
            "Character::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$9Character",
        Ok(
            "Character virtual table",
        ),
    ),
    (
        "_vt$15ISuperCamTarget",
        Ok(
            "ISuperCamTarget virtual table",
        ),
    ),
    (
        "_vt$21AICharacterController",
        Ok(
            "AICharacterController virtual table",
        ),
    ),
    (
        "_vt$33CameraRelativeCharacterController",
        Ok(
            "CameraRelativeCharacterController virtual table",
        ),
    ),
    (
        "_vt$18PhysicalController",
        Ok(
            "PhysicalController virtual table",
        ),
    ),
    (
        "_vt$13NPCController",
        Ok(
            "NPCController virtual table",
        ),
    ),
    (
        "_vt$19CharacterController",
        Ok(
            "CharacterController virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ26choreo4Bank",
        Ok(
            "radLoadInventory::SafeCast<choreo::Bank> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z9tSkeleton",
        Ok(
            "radLoadInventory::SafeCast<tSkeleton> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z13tDrawablePose",
        Ok(
            "radLoadInventory::SafeCast<tDrawablePose> virtual table",
        ),
    ),
    (
        "_17TrafficLocomotion$SECONDS_BETW_HISTORY_UPDATES",
        Ok(
            "TrafficLocomotion::SECONDS_BETW_HISTORY_UPDATES",
        ),
    ),
    (
        "_vt$20VehicleEventListener",
        Ok(
            "VehicleEventListener virtual table",
        ),
    ),
    (
        "_vt$17TrafficLocomotion",
        Ok(
            "TrafficLocomotion virtual table",
        ),
    ),
    (
        "_vt$21SuspensionJointDriver",
        Ok(
            "SuspensionJointDriver virtual table",
        ),
    ),
    (
        "_vt$16RootMatrixDriver",
        Ok(
            "RootMatrixDriver virtual table",
        ),
    ),
    (
        "_vt$28RedBrickCollisionSolverAgent",
        Ok(
            "RedBrickCollisionSolverAgent virtual table",
        ),
    ),
    (
        "_vt$17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion virtual table",
        ),
    ),
    (
        "_vt$17VehicleLocomotion",
        Ok(
            "VehicleLocomotion virtual table",
        ),
    ),
    (
        "_vt$Q23sim28PhysicsJointInertialEffector",
        Ok(
            "sim::PhysicsJointInertialEffector virtual table",
        ),
    ),
    (
        "_vt$Q23sim26PhysicsJointMatrixModifier",
        Ok(
            "sim::PhysicsJointMatrixModifier virtual table",
        ),
    ),
    (
        "_vt$19TrafficBodyDrawable",
        Ok(
            "TrafficBodyDrawable virtual table",
        ),
    ),
    (
        "_vt$7Vehicle$18IHudMapIconLocator",
        Ok(
            "Vehicle::IHudMapIconLocator virtual table",
        ),
    ),
    (
        "_vt$7Vehicle$15ISuperCamTarget",
        Ok(
            "Vehicle::ISuperCamTarget virtual table",
        ),
    ),
    (
        "_vt$7Vehicle$Q29tDrawable14ShaderCallback",
        Ok(
            "Vehicle::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$7Vehicle",
        Ok(
            "Vehicle virtual table",
        ),
    ),
    (
        "_vt$25WorldCollisionSolverAgent",
        Ok(
            "WorldCollisionSolverAgent virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z24tPoseAnimationController",
        Ok(
            "radLoadInventory::SafeCast<tPoseAnimationController> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z17tEffectController",
        Ok(
            "radLoadInventory::SafeCast<tEffectController> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z19tBillboardQuadGroup",
        Ok(
            "radLoadInventory::SafeCast<tBillboardQuadGroup> virtual table",
        ),
    ),
    (
        "_vt$15VehicleMappable",
        Ok(
            "VehicleMappable virtual table",
        ),
    ),
    (
        "_vt$22HumanVehicleController$13EventListener",
        Ok(
            "HumanVehicleController::EventListener virtual table",
        ),
    ),
    (
        "_vt$22HumanVehicleController",
        Ok(
            "HumanVehicleController virtual table",
        ),
    ),
    (
        "_vt$13VehicleWander",
        Ok(
            "VehicleWander virtual table",
        ),
    ),
    (
        "_vt$19AiVehicleController",
        Ok(
            "AiVehicleController virtual table",
        ),
    ),
    (
        "_vt$17VehicleController",
        Ok(
            "VehicleController virtual table",
        ),
    ),
    (
        "_14TrafficManager$FADE_RADIUS",
        Ok(
            "TrafficManager::FADE_RADIUS",
        ),
    ),
    (
        "_14TrafficManager$CENTER_OFFSET",
        Ok(
            "TrafficManager::CENTER_OFFSET",
        ),
    ),
    (
        "_14TrafficManager$ADD_RADIUS",
        Ok(
            "TrafficManager::ADD_RADIUS",
        ),
    ),
    (
        "_14TrafficManager$REMOVE_RADIUS",
        Ok(
            "TrafficManager::REMOVE_RADIUS",
        ),
    ),
    (
        "_14TrafficManager$INITIAL_ADD_RADIUS",
        Ok(
            "TrafficManager::INITIAL_ADD_RADIUS",
        ),
    ),
    (
        "_14TrafficManager$MILLISECONDS_BETWEEN_REMOVE",
        Ok(
            "TrafficManager::MILLISECONDS_BETWEEN_REMOVE",
        ),
    ),
    (
        "_14TrafficManager$MILLISECONDS_BETWEEN_ADD",
        Ok(
            "TrafficManager::MILLISECONDS_BETWEEN_ADD",
        ),
    ),
    (
        "_14TrafficManager$MILLISECONDS_POPULATE_WORLD",
        Ok(
            "TrafficManager::MILLISECONDS_POPULATE_WORLD",
        ),
    ),
    (
        "_vt$14TrafficManager$13EventListener",
        Ok(
            "TrafficManager::EventListener virtual table",
        ),
    ),
    (
        "_vt$14TrafficManager",
        Ok(
            "TrafficManager virtual table",
        ),
    ),
    (
        "_vt$14TrafficVehicle",
        Ok(
            "TrafficVehicle virtual table",
        ),
    ),
    (
        "_vt$23ITrafficSpawnController",
        Ok(
            "ITrafficSpawnController virtual table",
        ),
    ),
    (
        "_vt$11PathManager",
        Ok(
            "PathManager virtual table",
        ),
    ),
    (
        "_vt$11PathSegment$Q29tDrawable14ShaderCallback",
        Ok(
            "PathSegment::tDrawable::ShaderCallback virtual table",
        ),
    ),
    (
        "_vt$11PathSegment",
        Ok(
            "PathSegment virtual table",
        ),
    ),
    (
        "_17PedestrianManager$FADE_RADIUS",
        Ok(
            "PedestrianManager::FADE_RADIUS",
        ),
    ),
    (
        "_17PedestrianManager$CENTER_OFFSET",
        Ok(
            "PedestrianManager::CENTER_OFFSET",
        ),
    ),
    (
        "_17PedestrianManager$ADD_RADIUS",
        Ok(
            "PedestrianManager::ADD_RADIUS",
        ),
    ),
    (
        "_17PedestrianManager$REMOVE_RADIUS",
        Ok(
            "PedestrianManager::REMOVE_RADIUS",
        ),
    ),
    (
        "_17PedestrianManager$INITIAL_ADD_RADIUS",
        Ok(
            "PedestrianManager::INITIAL_ADD_RADIUS",
        ),
    ),
    (
        "_17PedestrianManager$MILLISECONDS_PER_GROUND_INTERSECT",
        Ok(
            "PedestrianManager::MILLISECONDS_PER_GROUND_INTERSECT",
        ),
    ),
    (
        "_17PedestrianManager$MILLISECONDS_BETW_ADDS",
        Ok(
            "PedestrianManager::MILLISECONDS_BETW_ADDS",
        ),
    ),
    (
        "_17PedestrianManager$MILLISECONDS_BETW_REMOVES",
        Ok(
            "PedestrianManager::MILLISECONDS_BETW_REMOVES",
        ),
    ),
    (
        "_17PedestrianManager$MILLISECONDS_POPULATE_WORLD",
        Ok(
            "PedestrianManager::MILLISECONDS_POPULATE_WORLD",
        ),
    ),
    (
        "_vt$17PedestrianManager",
        Ok(
            "PedestrianManager virtual table",
        ),
    ),
    (
        "_vt$10Pedestrian",
        Ok(
            "Pedestrian virtual table",
        ),
    ),
    (
        "_vt$12SpawnManager",
        Ok(
            "SpawnManager virtual table",
        ),
    ),
    (
        "_vt$12ChaseManager$13EventListener",
        Ok(
            "ChaseManager::EventListener virtual table",
        ),
    ),
    (
        "_vt$12ChaseManager",
        Ok(
            "ChaseManager virtual table",
        ),
    ),
    (
        "_vt$20CStatePropDataLoader",
        Ok(
            "CStatePropDataLoader virtual table",
        ),
    ),
    (
        "_vt$14CStatePropData",
        Ok(
            "CStatePropData virtual table",
        ),
    ),
    (
        "_vt$10CStateProp",
        Ok(
            "CStateProp virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z22tAnimatedObjectFactory",
        Ok(
            "radLoadInventory::SafeCast<tAnimatedObjectFactory> virtual table",
        ),
    ),
    (
        "_vt$11TractorBeam",
        Ok(
            "TractorBeam virtual table",
        ),
    ),
    (
        "_vt$6Weapon",
        Ok(
            "Weapon virtual table",
        ),
    ),
    (
        "_vt$3UFO$13EventListener",
        Ok(
            "UFO::EventListener virtual table",
        ),
    ),
    (
        "_vt$3UFO",
        Ok(
            "UFO virtual table",
        ),
    ),
    (
        "_vt$4Boss",
        Ok(
            "Boss virtual table",
        ),
    ),
    (
        "_t13_Alloc_traits2Zt10MapElement2ZfZiZt7s2alloc1Zt10MapElement2ZfZi$_S_instanceless",
        Ok(
            "_Alloc_traits<MapElement<float, int>, s2alloc<MapElement<float, int> > >::_S_instanceless",
        ),
    ),
    (
        "_vt$16ParkedCarManager$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "ParkedCarManager::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$16ParkedCarManager",
        Ok(
            "ParkedCarManager virtual table",
        ),
    ),
    (
        "_vt$20SuperSprintFEContext$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "SuperSprintFEContext::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$20SuperSprintFEContext",
        Ok(
            "SuperSprintFEContext virtual table",
        ),
    ),
    (
        "_vt$18SuperSprintContext",
        Ok(
            "SuperSprintContext virtual table",
        ),
    ),
    (
        "_vt$25LoadingSuperSprintContext$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "LoadingSuperSprintContext::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$25LoadingSuperSprintContext",
        Ok(
            "LoadingSuperSprintContext virtual table",
        ),
    ),
    (
        "_15SuperSprintData$NUM_CHARACTER_NAMES",
        Ok(
            "SuperSprintData::NUM_CHARACTER_NAMES",
        ),
    ),
    (
        "_15SuperSprintData$VEHICLE_NAMES",
        Ok(
            "SuperSprintData::VEHICLE_NAMES",
        ),
    ),
    (
        "_15SuperSprintData$NUM_NAMES",
        Ok(
            "SuperSprintData::NUM_NAMES",
        ),
    ),
    (
        "_vt$18SuperSprintManager$Q214LoadingManager23ProcessRequestsCallback",
        Ok(
            "SuperSprintManager::LoadingManager::ProcessRequestsCallback virtual table",
        ),
    ),
    (
        "_vt$18SuperSprintManager$Q217PresentationEvent25PresentationEventCallBack",
        Ok(
            "SuperSprintManager::PresentationEvent::PresentationEventCallBack virtual table",
        ),
    ),
    (
        "_vt$18SuperSprintManager$15GameplayManager",
        Ok(
            "SuperSprintManager::GameplayManager virtual table",
        ),
    ),
    (
        "_vt$18SuperSprintManager",
        Ok(
            "SuperSprintManager virtual table",
        ),
    ),
    (
        "_vt$19SuperSprintDrawable",
        Ok(
            "SuperSprintDrawable virtual table",
        ),
    ),
    (
        "_vt$Q26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo20AnimationJointDriver",
        Ok(
            "choreo::AnimationJointDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo14AnimationFrame",
        Ok(
            "choreo::AnimationFrame virtual table",
        ),
    ),
    (
        "_vt$Q26choreo15AnimationDriver",
        Ok(
            "choreo::AnimationDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo9Animation",
        Ok(
            "choreo::Animation virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ26choreo9Partition",
        Ok(
            "radLoadInventory::SafeCast<choreo::Partition> virtual table",
        ),
    ),
    (
        "_vt$Q26choreo15FootBlendDriver",
        Ok(
            "choreo::FootBlendDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo16JointBlendDriver",
        Ok(
            "choreo::JointBlendDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo15RootBlendDriver",
        Ok(
            "choreo::RootBlendDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo19PuppetDriverFactory",
        Ok(
            "choreo::PuppetDriverFactory virtual table",
        ),
    ),
    (
        "_vt$Q26choreo12PuppetDriver",
        Ok(
            "choreo::PuppetDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo6Driver",
        Ok(
            "choreo::Driver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo4Bank",
        Ok(
            "choreo::Bank virtual table",
        ),
    ),
    (
        "_vt$Q36choreo4Bank11RawIterator",
        Ok(
            "choreo::Bank::RawIterator virtual table",
        ),
    ),
    (
        "_vt$12tEntityTable",
        Ok(
            "tEntityTable virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ26choreo3Rig",
        Ok(
            "radLoadInventory::SafeCast<choreo::Rig> virtual table",
        ),
    ),
    (
        "_vt$Q26choreo8BaseBank",
        Ok(
            "choreo::BaseBank virtual table",
        ),
    ),
    (
        "_vt$Q36choreo8BaseBank11RawIterator",
        Ok(
            "choreo::BaseBank::RawIterator virtual table",
        ),
    ),
    (
        "_vt$Q26choreo23P3DInventoryWrapperBank",
        Ok(
            "choreo::P3DInventoryWrapperBank virtual table",
        ),
    ),
    (
        "_vt$Q36choreo23P3DInventoryWrapperBank11RawIterator",
        Ok(
            "choreo::P3DInventoryWrapperBank::RawIterator virtual table",
        ),
    ),
    (
        "_vt$Q26choreo25P3DEntityStoreWrapperBank",
        Ok(
            "choreo::P3DEntityStoreWrapperBank virtual table",
        ),
    ),
    (
        "_vt$Q26choreo9MultiBank",
        Ok(
            "choreo::MultiBank virtual table",
        ),
    ),
    (
        "_vt$Q26choreo30FootBlenderPoleVectorSimTarget",
        Ok(
            "choreo::FootBlenderPoleVectorSimTarget virtual table",
        ),
    ),
    (
        "_vt$Q26choreo28FootBlenderEffectorSimTarget",
        Ok(
            "choreo::FootBlenderEffectorSimTarget virtual table",
        ),
    ),
    (
        "_vt$Q26choreo6Engine",
        Ok(
            "choreo::Engine virtual table",
        ),
    ),
    (
        "_vt$Q26choreo11FootBlender",
        Ok(
            "choreo::FootBlender virtual table",
        ),
    ),
    (
        "_vt$Q26choreo11FootPlanter",
        Ok(
            "choreo::FootPlanter virtual table",
        ),
    ),
    (
        "_vt$Q26choreo12JointBlender",
        Ok(
            "choreo::JointBlender virtual table",
        ),
    ),
    (
        "_vt$Q26choreo18ChoreoChunkHandler",
        Ok(
            "choreo::ChoreoChunkHandler virtual table",
        ),
    ),
    (
        "_vt$Q26choreo19ChoreoScriptHandler",
        Ok(
            "choreo::ChoreoScriptHandler virtual table",
        ),
    ),
    (
        "_vt$17radLoadFileLoader",
        Ok(
            "radLoadFileLoader virtual table",
        ),
    ),
    (
        "_vt$Q26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo10Locomotion",
        Ok(
            "choreo::Locomotion virtual table",
        ),
    ),
    (
        "_vt$Q26choreo14LocomotionSlot",
        Ok(
            "choreo::LocomotionSlot virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ26choreo10Transition",
        Ok(
            "radLoadInventory::SafeCast<choreo::Transition> virtual table",
        ),
    ),
    (
        "_vt$Q26choreo12LODPartition",
        Ok(
            "choreo::LODPartition virtual table",
        ),
    ),
    (
        "_vt$Q26choreo17CompletePartition",
        Ok(
            "choreo::CompletePartition virtual table",
        ),
    ),
    (
        "_vt$Q26choreo18IntersectPartition",
        Ok(
            "choreo::IntersectPartition virtual table",
        ),
    ),
    (
        "_vt$Q26choreo14UnionPartition",
        Ok(
            "choreo::UnionPartition virtual table",
        ),
    ),
    (
        "_vt$Q26choreo18ExclusivePartition",
        Ok(
            "choreo::ExclusivePartition virtual table",
        ),
    ),
    (
        "_vt$Q26choreo18InclusivePartition",
        Ok(
            "choreo::InclusivePartition virtual table",
        ),
    ),
    (
        "_vt$Q26choreo9Partition",
        Ok(
            "choreo::Partition virtual table",
        ),
    ),
    (
        "_vt$Q26choreo6Puppet",
        Ok(
            "choreo::Puppet virtual table",
        ),
    ),
    (
        "_vt$Q26choreo20ReplayDriverInternal",
        Ok(
            "choreo::ReplayDriverInternal virtual table",
        ),
    ),
    (
        "_vt$Q26choreo12ReplayBuffer",
        Ok(
            "choreo::ReplayBuffer virtual table",
        ),
    ),
    (
        "_vt$Q26choreo12ReplayDriver",
        Ok(
            "choreo::ReplayDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo6Replay",
        Ok(
            "choreo::Replay virtual table",
        ),
    ),
    (
        "_vt$Q26choreo17ReplayBlendDriver",
        Ok(
            "choreo::ReplayBlendDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo13ReplayBlender",
        Ok(
            "choreo::ReplayBlender virtual table",
        ),
    ),
    (
        "_vt$Q26choreo3Rig",
        Ok(
            "choreo::Rig virtual table",
        ),
    ),
    (
        "_vt$Q26choreo6RigLeg",
        Ok(
            "choreo::RigLeg virtual table",
        ),
    ),
    (
        "_vt$Q26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal virtual table",
        ),
    ),
    (
        "_vt$Q26choreo10RootDriver",
        Ok(
            "choreo::RootDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController virtual table",
        ),
    ),
    (
        "_vt$Q26choreo22RootRotationController",
        Ok(
            "choreo::RootRotationController virtual table",
        ),
    ),
    (
        "_vt$Q26choreo22RootPositionController",
        Ok(
            "choreo::RootPositionController virtual table",
        ),
    ),
    (
        "_vt$Q26choreo14RootController",
        Ok(
            "choreo::RootController virtual table",
        ),
    ),
    (
        "_vt$Q26choreo15RootFixupDriver",
        Ok(
            "choreo::RootFixupDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo11RootBlender",
        Ok(
            "choreo::RootBlender virtual table",
        ),
    ),
    (
        "_vt$Q26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader virtual table",
        ),
    ),
    (
        "_vt$Q26choreo13FTTFileReader",
        Ok(
            "choreo::FTTFileReader virtual table",
        ),
    ),
    (
        "_vt$Q26choreo13P3DFileReader",
        Ok(
            "choreo::P3DFileReader virtual table",
        ),
    ),
    (
        "_vt$Q26choreo16StringFileReader",
        Ok(
            "choreo::StringFileReader virtual table",
        ),
    ),
    (
        "_vt$Q26choreo10FileReader",
        Ok(
            "choreo::FileReader virtual table",
        ),
    ),
    (
        "_vt$Q26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo21SynchronizationDriver",
        Ok(
            "choreo::SynchronizationDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo10Transition",
        Ok(
            "choreo::Transition virtual table",
        ),
    ),
    (
        "_vt$Q26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo16BlendJointDriver",
        Ok(
            "choreo::BlendJointDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo10BlendPhase",
        Ok(
            "choreo::BlendPhase virtual table",
        ),
    ),
    (
        "_vt$Q26choreo11BlendDriver",
        Ok(
            "choreo::BlendDriver virtual table",
        ),
    ),
    (
        "_vt$Q26choreo5Blend",
        Ok(
            "choreo::Blend virtual table",
        ),
    ),
    (
        "_vt$Q26choreo17BlendSlotFootInfo",
        Ok(
            "choreo::BlendSlotFootInfo virtual table",
        ),
    ),
    (
        "_vt$Q26choreo9BlendSlot",
        Ok(
            "choreo::BlendSlot virtual table",
        ),
    ),
    (
        "_vt$Q23sim16CollisionManager",
        Ok(
            "sim::CollisionManager virtual table",
        ),
    ),
    (
        "_vt$Q23simt5TList1ZPQ23sim15CollisionObject",
        Ok(
            "sim::TList<sim::CollisionObject *> virtual table",
        ),
    ),
    (
        "_vt$Q23sim21CollisionObjectLoader",
        Ok(
            "sim::CollisionObjectLoader virtual table",
        ),
    ),
    (
        "_vt$Q23sim15CollisionObject",
        Ok(
            "sim::CollisionObject virtual table",
        ),
    ),
    (
        "_vt$Q23sim10BBoxVolume",
        Ok(
            "sim::BBoxVolume virtual table",
        ),
    ),
    (
        "_vt$Q23sim10WallVolume",
        Ok(
            "sim::WallVolume virtual table",
        ),
    ),
    (
        "_vt$Q23sim11OBBoxVolume",
        Ok(
            "sim::OBBoxVolume virtual table",
        ),
    ),
    (
        "_vt$Q23sim14CylinderVolume",
        Ok(
            "sim::CylinderVolume virtual table",
        ),
    ),
    (
        "_vt$Q23sim12SphereVolume",
        Ok(
            "sim::SphereVolume virtual table",
        ),
    ),
    (
        "_vt$Q23simt5TList1ZPQ23sim15CollisionVolume",
        Ok(
            "sim::TList<sim::CollisionVolume *> virtual table",
        ),
    ),
    (
        "_vt$Q23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume virtual table",
        ),
    ),
    (
        "_vt$Q23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver virtual table",
        ),
    ),
    (
        "_vt$Q23sim20CollisionSolverAgent",
        Ok(
            "sim::CollisionSolverAgent virtual table",
        ),
    ),
    (
        "_vt$Q23sim17PhysicsProperties$Q23sim8SimUnits",
        Ok(
            "sim::PhysicsProperties::sim::SimUnits virtual table",
        ),
    ),
    (
        "_vt$Q23sim17PhysicsProperties",
        Ok(
            "sim::PhysicsProperties virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ23sim17PhysicsProperties",
        Ok(
            "radLoadInventory::SafeCast<sim::PhysicsProperties> virtual table",
        ),
    ),
    (
        "_vt$Q23simt5TList1ZPQ23sim8SimUnits",
        Ok(
            "sim::TList<sim::SimUnits *> virtual table",
        ),
    ),
    (
        "_vt$Q23sim8SimSpeed",
        Ok(
            "sim::SimSpeed virtual table",
        ),
    ),
    (
        "_vt$Q23sim9SimLength",
        Ok(
            "sim::SimLength virtual table",
        ),
    ),
    (
        "_vt$Q23sim7SimTime",
        Ok(
            "sim::SimTime virtual table",
        ),
    ),
    (
        "_vt$Q23sim14SimEnvironment$Q23sim8SimUnits",
        Ok(
            "sim::SimEnvironment::sim::SimUnits virtual table",
        ),
    ),
    (
        "_vt$Q23sim14SimEnvironment",
        Ok(
            "sim::SimEnvironment virtual table",
        ),
    ),
    (
        "_vt$Q23sim8SimUnits",
        Ok(
            "sim::SimUnits virtual table",
        ),
    ),
    (
        "_vt$Q23sim11SimCGSValue",
        Ok(
            "sim::SimCGSValue virtual table",
        ),
    ),
    (
        "_vt$Q23sim8SimState",
        Ok(
            "sim::SimState virtual table",
        ),
    ),
    (
        "_vt$Q23sim14ManualSimState",
        Ok(
            "sim::ManualSimState virtual table",
        ),
    ),
    (
        "_vt$Q23sim19SimStateArticulated",
        Ok(
            "sim::SimStateArticulated virtual table",
        ),
    ),
    (
        "_vt$Q23simt5TList1ZPQ23sim14JointVirtualCM",
        Ok(
            "sim::TList<sim::JointVirtualCM *> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ23sim12SkeletonInfo",
        Ok(
            "radLoadInventory::SafeCast<sim::SkeletonInfo> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1ZQ23sim24ArticulatedPhysicsObject",
        Ok(
            "radLoadInventory::SafeCast<sim::ArticulatedPhysicsObject> virtual table",
        ),
    ),
    (
        "_vt$Q23sim15SimJntMatTarget",
        Ok(
            "sim::SimJntMatTarget virtual table",
        ),
    ),
    (
        "_vt$Q23sim15SimMatrixTarget",
        Ok(
            "sim::SimMatrixTarget virtual table",
        ),
    ),
    (
        "_vt$Q23sim15SimVectorTarget",
        Ok(
            "sim::SimVectorTarget virtual table",
        ),
    ),
    (
        "_vt$Q23sim9SimTarget",
        Ok(
            "sim::SimTarget virtual table",
        ),
    ),
    (
        "_vt$Q23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject virtual table",
        ),
    ),
    (
        "_vt$Q23sim17tExportInfoLoader",
        Ok(
            "sim::tExportInfoLoader virtual table",
        ),
    ),
    (
        "_vt$Q23sim11tExportInfo",
        Ok(
            "sim::tExportInfo virtual table",
        ),
    ),
    (
        "_vt$Q23sim15SimUnitsManager",
        Ok(
            "sim::SimUnitsManager virtual table",
        ),
    ),
    (
        "_vt$Q23sim12SkeletonInfo",
        Ok(
            "sim::SkeletonInfo virtual table",
        ),
    ),
    (
        "_vt$Q23sim9SymMatrix",
        Ok(
            "sim::SymMatrix virtual table",
        ),
    ),
    (
        "_vt$Q23sim9VoidPList",
        Ok(
            "sim::VoidPList virtual table",
        ),
    ),
    (
        "_vt$Q23sim19PhysicsObjectLoader",
        Ok(
            "sim::PhysicsObjectLoader virtual table",
        ),
    ),
    (
        "_vt$Q23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject virtual table",
        ),
    ),
    (
        "_vt$Q23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::ArticulatedPhysicsObject virtual table",
        ),
    ),
    (
        "_vt$Q23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D virtual table",
        ),
    ),
    (
        "_vt$Q23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D virtual table",
        ),
    ),
    (
        "_vt$Q23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D virtual table",
        ),
    ),
    (
        "_vt$Q23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint virtual table",
        ),
    ),
    (
        "_vt$Q23simt5TList1ZPQ23sim12PhysicsJoint",
        Ok(
            "sim::TList<sim::PhysicsJoint *> virtual table",
        ),
    ),
    (
        "_vt$Q23sim14JointVirtualCM",
        Ok(
            "sim::JointVirtualCM virtual table",
        ),
    ),
    (
        "_vt$Q23sim9VirtualCM",
        Ok(
            "sim::VirtualCM virtual table",
        ),
    ),
    (
        "_vt$Q23sim17CollisionAnalyser",
        Ok(
            "sim::CollisionAnalyser virtual table",
        ),
    ),
    (
        "_vt$Q23sim17CollisionDetector",
        Ok(
            "sim::CollisionDetector virtual table",
        ),
    ),
    (
        "_vt$Q23sim20SubCollisionDetector",
        Ok(
            "sim::SubCollisionDetector virtual table",
        ),
    ),
    (
        "_vt$Q23sim15DoubleKalmann1D",
        Ok(
            "sim::DoubleKalmann1D virtual table",
        ),
    ),
    (
        "_vt$Q23sim9Kalmann1D",
        Ok(
            "sim::Kalmann1D virtual table",
        ),
    ),
    (
        "_vt$Q23sim17SimpleFilterAbs3D",
        Ok(
            "sim::SimpleFilterAbs3D virtual table",
        ),
    ),
    (
        "_vt$Q23sim14SimpleFilter3D",
        Ok(
            "sim::SimpleFilter3D virtual table",
        ),
    ),
    (
        "_vt$Q23sim14SimpleFilter1D",
        Ok(
            "sim::SimpleFilter1D virtual table",
        ),
    ),
    (
        "_vt$Q25poser4Pose",
        Ok(
            "poser::Pose virtual table",
        ),
    ),
    (
        "_vt$Q25poser10PoseDriver",
        Ok(
            "poser::PoseDriver virtual table",
        ),
    ),
    (
        "_vt$Q25poser10PoseEngine",
        Ok(
            "poser::PoseEngine virtual table",
        ),
    ),
    (
        "_vt$17FeTextBibleLoader",
        Ok(
            "FeTextBibleLoader virtual table",
        ),
    ),
    (
        "_vt$20FeProjectFileHandler",
        Ok(
            "FeProjectFileHandler virtual table",
        ),
    ),
    (
        "_vt$6FePage$Q27Scrooby4Page",
        Ok(
            "FePage::Scrooby::Page virtual table",
        ),
    ),
    (
        "_vt$6FePage$Q27Scrooby5Owner",
        Ok(
            "FePage::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$6FePage$8FeParent",
        Ok(
            "FePage::FeParent virtual table",
        ),
    ),
    (
        "_vt$6FePage$Q27Scrooby8Drawable",
        Ok(
            "FePage::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$6FePage",
        Ok(
            "FePage virtual table",
        ),
    ),
    (
        "_vt$t7rVector1Zi",
        Ok(
            "rVector<int> virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby4Page",
        Ok(
            "Scrooby::Page virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby4Page$Q27Scrooby5Owner",
        Ok(
            "Scrooby::Page::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby4Page$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::Page::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby5Owner",
        Ok(
            "Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$8FeParent",
        Ok(
            "FeParent virtual table",
        ),
    ),
    (
        "_vt$8FeParent$Q27Scrooby5Owner",
        Ok(
            "FeParent::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$9FePolygon$Q27Scrooby7Polygon",
        Ok(
            "FePolygon::Scrooby::Polygon virtual table",
        ),
    ),
    (
        "_vt$9FePolygon$Q27Scrooby8Drawable",
        Ok(
            "FePolygon::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$9FePolygon",
        Ok(
            "FePolygon virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby7Polygon",
        Ok(
            "Scrooby::Polygon virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby7Polygon$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::Polygon::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$9FeProject$Q27Scrooby7Project",
        Ok(
            "FeProject::Scrooby::Project virtual table",
        ),
    ),
    (
        "_vt$9FeProject$Q27Scrooby5Owner",
        Ok(
            "FeProject::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$9FeProject$Q27Scrooby23ResourceManagerCallback",
        Ok(
            "FeProject::Scrooby::ResourceManagerCallback virtual table",
        ),
    ),
    (
        "_vt$9FeProject$8FeParent",
        Ok(
            "FeProject::FeParent virtual table",
        ),
    ),
    (
        "_vt$9FeProject",
        Ok(
            "FeProject virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby23ResourceManagerCallback",
        Ok(
            "Scrooby::ResourceManagerCallback virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby7Project",
        Ok(
            "Scrooby::Project virtual table",
        ),
    ),
    (
        "_vt$14FePure3dObject$Q27Scrooby12Pure3dObject",
        Ok(
            "FePure3dObject::Scrooby::Pure3dObject virtual table",
        ),
    ),
    (
        "_vt$14FePure3dObject$Q27Scrooby5Owner",
        Ok(
            "FePure3dObject::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$14FePure3dObject$Q27Scrooby14HasBoundingBox",
        Ok(
            "FePure3dObject::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$14FePure3dObject$Q27Scrooby15BoundedDrawable",
        Ok(
            "FePure3dObject::Scrooby::BoundedDrawable virtual table",
        ),
    ),
    (
        "_vt$14FePure3dObject$Q27Scrooby8Drawable",
        Ok(
            "FePure3dObject::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$14FePure3dObject$8FeParent",
        Ok(
            "FePure3dObject::FeParent virtual table",
        ),
    ),
    (
        "_vt$14FePure3dObject",
        Ok(
            "FePure3dObject virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby12Pure3dObject",
        Ok(
            "Scrooby::Pure3dObject virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby12Pure3dObject$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::Pure3dObject::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby12Pure3dObject$Q27Scrooby14HasBoundingBox",
        Ok(
            "Scrooby::Pure3dObject::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby12Pure3dObject$Q27Scrooby15BoundedDrawable",
        Ok(
            "Scrooby::Pure3dObject::Scrooby::BoundedDrawable virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby15BoundedDrawable",
        Ok(
            "Scrooby::BoundedDrawable virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby15BoundedDrawable$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::BoundedDrawable::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby15BoundedDrawable$Q27Scrooby14HasBoundingBox",
        Ok(
            "Scrooby::BoundedDrawable::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby14HasBoundingBox",
        Ok(
            "Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby14HasBoundingBox$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::HasBoundingBox::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$8FeScreen$Q27Scrooby6Screen",
        Ok(
            "FeScreen::Scrooby::Screen virtual table",
        ),
    ),
    (
        "_vt$8FeScreen$Q27Scrooby5Owner",
        Ok(
            "FeScreen::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$8FeScreen$8FeParent",
        Ok(
            "FeScreen::FeParent virtual table",
        ),
    ),
    (
        "_vt$8FeScreen$Q27Scrooby8Drawable",
        Ok(
            "FeScreen::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$8FeScreen",
        Ok(
            "FeScreen virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby6Screen",
        Ok(
            "Scrooby::Screen virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby6Screen$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::Screen::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$8FeSprite$Q27Scrooby6Sprite",
        Ok(
            "FeSprite::Scrooby::Sprite virtual table",
        ),
    ),
    (
        "_vt$8FeSprite$Q27Scrooby14HasBoundingBox",
        Ok(
            "FeSprite::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$8FeSprite$Q27Scrooby15BoundedDrawable",
        Ok(
            "FeSprite::Scrooby::BoundedDrawable virtual table",
        ),
    ),
    (
        "_vt$8FeSprite$Q27Scrooby8Drawable",
        Ok(
            "FeSprite::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$8FeSprite",
        Ok(
            "FeSprite virtual table",
        ),
    ),
    (
        "_vt$t7rVector1ZP13PascalCString",
        Ok(
            "rVector<PascalCString *> virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby6Sprite",
        Ok(
            "Scrooby::Sprite virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby6Sprite$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::Sprite::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby6Sprite$Q27Scrooby14HasBoundingBox",
        Ok(
            "Scrooby::Sprite::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby6Sprite$Q27Scrooby15BoundedDrawable",
        Ok(
            "Scrooby::Sprite::Scrooby::BoundedDrawable virtual table",
        ),
    ),
    (
        "_vt$26FeTextChildTextBibleString",
        Ok(
            "FeTextChildTextBibleString virtual table",
        ),
    ),
    (
        "_vt$26FeTextChildHardCodedString",
        Ok(
            "FeTextChildHardCodedString virtual table",
        ),
    ),
    (
        "_vt$17FeTextChildString",
        Ok(
            "FeTextChildString virtual table",
        ),
    ),
    (
        "_vt$6FeText$Q27Scrooby4Text",
        Ok(
            "FeText::Scrooby::Text virtual table",
        ),
    ),
    (
        "_vt$6FeText$Q27Scrooby5Owner",
        Ok(
            "FeText::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$6FeText$Q27Scrooby14HasBoundingBox",
        Ok(
            "FeText::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$6FeText$Q27Scrooby15BoundedDrawable",
        Ok(
            "FeText::Scrooby::BoundedDrawable virtual table",
        ),
    ),
    (
        "_vt$6FeText$Q27Scrooby8Drawable",
        Ok(
            "FeText::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$6FeText$8FeParent",
        Ok(
            "FeText::FeParent virtual table",
        ),
    ),
    (
        "_vt$6FeText",
        Ok(
            "FeText virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby4Text",
        Ok(
            "Scrooby::Text virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby4Text$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::Text::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby4Text$Q27Scrooby14HasBoundingBox",
        Ok(
            "Scrooby::Text::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby4Text$Q27Scrooby15BoundedDrawable",
        Ok(
            "Scrooby::Text::Scrooby::BoundedDrawable virtual table",
        ),
    ),
    (
        "_vt$11FeTextBible$Q27Scrooby9TextBible",
        Ok(
            "FeTextBible::Scrooby::TextBible virtual table",
        ),
    ),
    (
        "_vt$11FeTextBible",
        Ok(
            "FeTextBible virtual table",
        ),
    ),
    (
        "_vt$t7rVector1ZP10FeLanguage",
        Ok(
            "rVector<FeLanguage *> virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby9TextBible",
        Ok(
            "Scrooby::TextBible virtual table",
        ),
    ),
    (
        "_vt$11FeTextStyle",
        Ok(
            "FeTextStyle virtual table",
        ),
    ),
    (
        "_vt$12tLinearTable",
        Ok(
            "tLinearTable virtual table",
        ),
    ),
    (
        "_vt$13FeEntityDummy",
        Ok(
            "FeEntityDummy virtual table",
        ),
    ),
    (
        "_vt$17FeResourceManager$Q27Scrooby15ResourceManager",
        Ok(
            "FeResourceManager::Scrooby::ResourceManager virtual table",
        ),
    ),
    (
        "_vt$17FeResourceManager",
        Ok(
            "FeResourceManager virtual table",
        ),
    ),
    (
        "_vt$t7rVector1ZPQ217FeResourceManager21Pure3dAttributesEntry",
        Ok(
            "rVector<FeResourceManager::Pure3dAttributesEntry *> virtual table",
        ),
    ),
    (
        "_vt$t7rVector1ZPQ217FeResourceManager10AliasEntry",
        Ok(
            "rVector<FeResourceManager::AliasEntry *> virtual table",
        ),
    ),
    (
        "_vt$t7rVector1ZPQ217FeResourceManager13ResourceEntry",
        Ok(
            "rVector<FeResourceManager::ResourceEntry *> virtual table",
        ),
    ),
    (
        "_vt$Q217FeResourceManager21Pure3dAttributesEntry",
        Ok(
            "FeResourceManager::Pure3dAttributesEntry virtual table",
        ),
    ),
    (
        "_vt$Q217FeResourceManager10AliasEntry",
        Ok(
            "FeResourceManager::AliasEntry virtual table",
        ),
    ),
    (
        "_vt$Q217FeResourceManager13ResourceEntry",
        Ok(
            "FeResourceManager::ResourceEntry virtual table",
        ),
    ),
    (
        "_vt$Q217FeResourceManager24ResourceManagerEntryBase",
        Ok(
            "FeResourceManager::ResourceManagerEntryBase virtual table",
        ),
    ),
    (
        "_vt$Q217FeResourceManager11P3DCallback",
        Ok(
            "FeResourceManager::P3DCallback virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby15ResourceManager",
        Ok(
            "Scrooby::ResourceManager virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby3App",
        Ok(
            "Scrooby::App virtual table",
        ),
    ),
    (
        "_vt$7XMLTree",
        Ok(
            "XMLTree virtual table",
        ),
    ),
    (
        "_vt$5FeApp",
        Ok(
            "FeApp virtual table",
        ),
    ),
    (
        "_vt$t7rVector1ZP9FeProject",
        Ok(
            "rVector<FeProject *> virtual table",
        ),
    ),
    (
        "_vt$17FeBoundedDrawable$Q27Scrooby14HasBoundingBox",
        Ok(
            "FeBoundedDrawable::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$17FeBoundedDrawable$Q27Scrooby15BoundedDrawable",
        Ok(
            "FeBoundedDrawable::Scrooby::BoundedDrawable virtual table",
        ),
    ),
    (
        "_vt$17FeBoundedDrawable",
        Ok(
            "FeBoundedDrawable virtual table",
        ),
    ),
    (
        "_vt$17FeBoundedDrawable$Q27Scrooby8Drawable",
        Ok(
            "FeBoundedDrawable::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby21FeProjectChunkHandler",
        Ok(
            "Scrooby::FeProjectChunkHandler virtual table",
        ),
    ),
    (
        "_vt$10FeDrawable$Q27Scrooby8Drawable",
        Ok(
            "FeDrawable::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$10FeDrawable",
        Ok(
            "FeDrawable virtual table",
        ),
    ),
    (
        "_vt$8FeEntity",
        Ok(
            "FeEntity virtual table",
        ),
    ),
    (
        "_vt$7FeGroup$Q27Scrooby14HasBoundingBox",
        Ok(
            "FeGroup::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$7FeGroup$Q27Scrooby5Group",
        Ok(
            "FeGroup::Scrooby::Group virtual table",
        ),
    ),
    (
        "_vt$7FeGroup$Q27Scrooby5Owner",
        Ok(
            "FeGroup::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$7FeGroup$8FeParent",
        Ok(
            "FeGroup::FeParent virtual table",
        ),
    ),
    (
        "_vt$7FeGroup",
        Ok(
            "FeGroup virtual table",
        ),
    ),
    (
        "_vt$7FeGroup$Q27Scrooby8Drawable",
        Ok(
            "FeGroup::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby5Group",
        Ok(
            "Scrooby::Group virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby5Group$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::Group::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby5Group$Q27Scrooby14HasBoundingBox",
        Ok(
            "Scrooby::Group::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby5Group$Q27Scrooby5Owner",
        Ok(
            "Scrooby::Group::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$10FeLanguage",
        Ok(
            "FeLanguage virtual table",
        ),
    ),
    (
        "_vt$7FeLayer$Q27Scrooby5Owner",
        Ok(
            "FeLayer::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$7FeLayer$8FeParent",
        Ok(
            "FeLayer::FeParent virtual table",
        ),
    ),
    (
        "_vt$7FeLayer$Q27Scrooby8Drawable",
        Ok(
            "FeLayer::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$7FeLayer",
        Ok(
            "FeLayer virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby5Layer$Q27Scrooby5Owner",
        Ok(
            "Scrooby::Layer::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby5Layer$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::Layer::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$7FeMovie$Q27Scrooby5Movie",
        Ok(
            "FeMovie::Scrooby::Movie virtual table",
        ),
    ),
    (
        "_vt$7FeMovie$Q27Scrooby5Owner",
        Ok(
            "FeMovie::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$7FeMovie$Q27Scrooby14HasBoundingBox",
        Ok(
            "FeMovie::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$7FeMovie$Q27Scrooby15BoundedDrawable",
        Ok(
            "FeMovie::Scrooby::BoundedDrawable virtual table",
        ),
    ),
    (
        "_vt$7FeMovie$Q27Scrooby8Drawable",
        Ok(
            "FeMovie::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$7FeMovie$8FeParent",
        Ok(
            "FeMovie::FeParent virtual table",
        ),
    ),
    (
        "_vt$7FeMovie",
        Ok(
            "FeMovie virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby5Movie",
        Ok(
            "Scrooby::Movie virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby5Movie$Q27Scrooby8Drawable",
        Ok(
            "Scrooby::Movie::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby5Movie$Q27Scrooby14HasBoundingBox",
        Ok(
            "Scrooby::Movie::Scrooby::HasBoundingBox virtual table",
        ),
    ),
    (
        "_vt$Q27Scrooby5Movie$Q27Scrooby15BoundedDrawable",
        Ok(
            "Scrooby::Movie::Scrooby::BoundedDrawable virtual table",
        ),
    ),
    (
        "_vt$7FeOwner$Q27Scrooby5Owner",
        Ok(
            "FeOwner::Scrooby::Owner virtual table",
        ),
    ),
    (
        "_vt$7FeOwner$8FeParent",
        Ok(
            "FeOwner::FeParent virtual table",
        ),
    ),
    (
        "_vt$7FeOwner$Q27Scrooby8Drawable",
        Ok(
            "FeOwner::Scrooby::Drawable virtual table",
        ),
    ),
    (
        "_vt$7FeOwner",
        Ok(
            "FeOwner virtual table",
        ),
    ),
    (
        "_vt$9XMLParser",
        Ok(
            "XMLParser virtual table",
        ),
    ),
    (
        "_vt$7XMLNode",
        Ok(
            "XMLNode virtual table",
        ),
    ),
    (
        "_vt$t7rVector1ZP7XMLNode",
        Ok(
            "rVector<XMLNode *> virtual table",
        ),
    ),
    (
        "_vt$t7rVector1ZP12XMLAttribute",
        Ok(
            "rVector<XMLAttribute *> virtual table",
        ),
    ),
    (
        "_vt$25tBillboardQuadGroupLoader",
        Ok(
            "tBillboardQuadGroupLoader virtual table",
        ),
    ),
    (
        "_vt$19tBillboardQuadGroup",
        Ok(
            "tBillboardQuadGroup virtual table",
        ),
    ),
    (
        "_vt$t9tPtrArray1ZP14tBillboardQuad",
        Ok(
            "tPtrArray<tBillboardQuad *> virtual table",
        ),
    ),
    (
        "_vt$t6tArray1ZP14tBillboardQuad",
        Ok(
            "tArray<tBillboardQuad *> virtual table",
        ),
    ),
    (
        "_vt$25tCamRelativeBillboardQuad",
        Ok(
            "tCamRelativeBillboardQuad virtual table",
        ),
    ),
    (
        "_vt$14tBillboardQuad",
        Ok(
            "tBillboardQuad virtual table",
        ),
    ),
    (
        "_vt$11tBMPHandler",
        Ok(
            "tBMPHandler virtual table",
        ),
    ),
    (
        "_vt$7tCamera",
        Ok(
            "tCamera virtual table",
        ),
    ),
    (
        "_vt$13tCameraLoader",
        Ok(
            "tCameraLoader virtual table",
        ),
    ),
    (
        "_vt$10tChunkFile",
        Ok(
            "tChunkFile virtual table",
        ),
    ),
    (
        "_vt$15RadcoreMemAdapt",
        Ok(
            "RadcoreMemAdapt virtual table",
        ),
    ),
    (
        "_vt$Q222pddiExtMemRegistration8CallBack",
        Ok(
            "pddiExtMemRegistration::CallBack virtual table",
        ),
    ),
    (
        "_vt$22tShaderMatrixBroadcast",
        Ok(
            "tShaderMatrixBroadcast virtual table",
        ),
    ),
    (
        "_vt$22tShaderVectorBroadcast",
        Ok(
            "tShaderVectorBroadcast virtual table",
        ),
    ),
    (
        "_vt$23tShaderTextureBroadcast",
        Ok(
            "tShaderTextureBroadcast virtual table",
        ),
    ),
    (
        "_vt$22tShaderColourBroadcast",
        Ok(
            "tShaderColourBroadcast virtual table",
        ),
    ),
    (
        "_vt$21tShaderFloatBroadcast",
        Ok(
            "tShaderFloatBroadcast virtual table",
        ),
    ),
    (
        "_vt$19tShaderIntBroadcast",
        Ok(
            "tShaderIntBroadcast virtual table",
        ),
    ),
    (
        "_vt$9tDrawable",
        Ok(
            "tDrawable virtual table",
        ),
    ),
    (
        "_vt$7tEntity",
        Ok(
            "tEntity virtual table",
        ),
    ),
    (
        "_vt$9AdaptPDDI",
        Ok(
            "AdaptPDDI virtual table",
        ),
    ),
    (
        "_vt$Q210pddiDevice15MessageCallback",
        Ok(
            "pddiDevice::MessageCallback virtual table",
        ),
    ),
    (
        "_vt$8tFileMem",
        Ok(
            "tFileMem virtual table",
        ),
    ),
    (
        "_vt$5tFile",
        Ok(
            "tFile virtual table",
        ),
    ),
    (
        "_vt$5tFont",
        Ok(
            "tFont virtual table",
        ),
    ),
    (
        "_vt$15tGameAttrLoader",
        Ok(
            "tGameAttrLoader virtual table",
        ),
    ),
    (
        "_vt$9tGameAttr",
        Ok(
            "tGameAttr virtual table",
        ),
    ),
    (
        "_vt$15tGeometryLoader",
        Ok(
            "tGeometryLoader virtual table",
        ),
    ),
    (
        "_vt$9tGeometry",
        Ok(
            "tGeometry virtual table",
        ),
    ),
    (
        "_vt$t9tPtrArray1ZP10tPrimGroup",
        Ok(
            "tPtrArray<tPrimGroup *> virtual table",
        ),
    ),
    (
        "_vt$t6tArray1ZP10tPrimGroup",
        Ok(
            "tArray<tPrimGroup *> virtual table",
        ),
    ),
    (
        "_vt$12tImageLoader",
        Ok(
            "tImageLoader virtual table",
        ),
    ),
    (
        "_vt$7tImage8",
        Ok(
            "tImage8 virtual table",
        ),
    ),
    (
        "_vt$6tImage",
        Ok(
            "tImage virtual table",
        ),
    ),
    (
        "_vt$14TextureBuilder",
        Ok(
            "TextureBuilder virtual table",
        ),
    ),
    (
        "_vt$12ImageBuilder",
        Ok(
            "ImageBuilder virtual table",
        ),
    ),
    (
        "_vt$13tImageHandler",
        Ok(
            "tImageHandler virtual table",
        ),
    ),
    (
        "_vt$Q213tImageHandler7Builder",
        Ok(
            "tImageHandler::Builder virtual table",
        ),
    ),
    (
        "_vt$16tImageFontLoader",
        Ok(
            "tImageFontLoader virtual table",
        ),
    ),
    (
        "_vt$10tImageFont",
        Ok(
            "tImageFont virtual table",
        ),
    ),
    (
        "_vt$14tSafeCasterObj",
        Ok(
            "tSafeCasterObj virtual table",
        ),
    ),
    (
        "_vt$10tInventory",
        Ok(
            "tInventory virtual table",
        ),
    ),
    (
        "_vt$12tEntityStore",
        Ok(
            "tEntityStore virtual table",
        ),
    ),
    (
        "_vt$11tLightGroup",
        Ok(
            "tLightGroup virtual table",
        ),
    ),
    (
        "_vt$t9tPtrArray1ZP6tLight",
        Ok(
            "tPtrArray<tLight *> virtual table",
        ),
    ),
    (
        "_vt$t6tArray1ZP6tLight",
        Ok(
            "tArray<tLight *> virtual table",
        ),
    ),
    (
        "_vt$6tLight",
        Ok(
            "tLight virtual table",
        ),
    ),
    (
        "_vt$17tLightGroupLoader",
        Ok(
            "tLightGroupLoader virtual table",
        ),
    ),
    (
        "_vt$12tLightLoader",
        Ok(
            "tLightLoader virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z6tLight",
        Ok(
            "radLoadInventory::SafeCast<tLight> virtual table",
        ),
    ),
    (
        "_vt$14tLocatorLoader",
        Ok(
            "tLocatorLoader virtual table",
        ),
    ),
    (
        "_vt$8tLocator",
        Ok(
            "tLocator virtual table",
        ),
    ),
    (
        "_vt$10tTempStore",
        Ok(
            "tTempStore virtual table",
        ),
    ),
    (
        "_vt$12tLoadManager",
        Ok(
            "tLoadManager virtual table",
        ),
    ),
    (
        "_vt$12tLoadRequest",
        Ok(
            "tLoadRequest virtual table",
        ),
    ),
    (
        "_vt$Q212tLoadRequest16InternalCallback",
        Ok(
            "tLoadRequest::InternalCallback virtual table",
        ),
    ),
    (
        "_vt$15tP3DFileHandler",
        Ok(
            "tP3DFileHandler virtual table",
        ),
    ),
    (
        "_vt$19tSimpleChunkHandler",
        Ok(
            "tSimpleChunkHandler virtual table",
        ),
    ),
    (
        "_vt$13tChunkHandler",
        Ok(
            "tChunkHandler virtual table",
        ),
    ),
    (
        "_vt$12tFileHandler",
        Ok(
            "tFileHandler virtual table",
        ),
    ),
    (
        "_vt$15tRefCountedTemp",
        Ok(
            "tRefCountedTemp virtual table",
        ),
    ),
    (
        "_vt$Q23p3d13DefaultRouter",
        Ok(
            "p3d::DefaultRouter virtual table",
        ),
    ),
    (
        "_vt$Q23p3d12MemoryRouter",
        Ok(
            "p3d::MemoryRouter virtual table",
        ),
    ),
    (
        "_vt$12tPointCamera",
        Ok(
            "tPointCamera virtual table",
        ),
    ),
    (
        "_vt$11tPointLight",
        Ok(
            "tPointLight virtual table",
        ),
    ),
    (
        "_vt$11tPNGHandler",
        Ok(
            "tPNGHandler virtual table",
        ),
    ),
    (
        "_vt$16tPrimGroupLoader",
        Ok(
            "tPrimGroupLoader virtual table",
        ),
    ),
    (
        "_vt$25tPrimGroupSkinnedStreamed",
        Ok(
            "tPrimGroupSkinnedStreamed virtual table",
        ),
    ),
    (
        "_vt$18tPrimGroupStreamed",
        Ok(
            "tPrimGroupStreamed virtual table",
        ),
    ),
    (
        "_vt$26tPrimGroupSkinnedOptimised",
        Ok(
            "tPrimGroupSkinnedOptimised virtual table",
        ),
    ),
    (
        "_vt$19tPrimGroupOptimised",
        Ok(
            "tPrimGroupOptimised virtual table",
        ),
    ),
    (
        "_vt$10tPrimGroup",
        Ok(
            "tPrimGroup virtual table",
        ),
    ),
    (
        "_vt$16tRawImageHandler",
        Ok(
            "tRawImageHandler virtual table",
        ),
    ),
    (
        "_vt$23tShaderDefinitionLoader",
        Ok(
            "tShaderDefinitionLoader virtual table",
        ),
    ),
    (
        "_vt$13tShaderLoader",
        Ok(
            "tShaderLoader virtual table",
        ),
    ),
    (
        "_vt$7tShader",
        Ok(
            "tShader virtual table",
        ),
    ),
    (
        "_vt$13tSpriteLoader",
        Ok(
            "tSpriteLoader virtual table",
        ),
    ),
    (
        "_vt$7tSprite",
        Ok(
            "tSprite virtual table",
        ),
    ),
    (
        "_vt$10tSpotLight",
        Ok(
            "tSpotLight virtual table",
        ),
    ),
    (
        "_vt$13tTargaHandler",
        Ok(
            "tTargaHandler virtual table",
        ),
    ),
    (
        "_vt$11tTextString",
        Ok(
            "tTextString virtual table",
        ),
    ),
    (
        "_vt$10tSetLoader",
        Ok(
            "tSetLoader virtual table",
        ),
    ),
    (
        "_vt$14tTextureLoader",
        Ok(
            "tTextureLoader virtual table",
        ),
    ),
    (
        "_vt$8tTexture",
        Ok(
            "tTexture virtual table",
        ),
    ),
    (
        "_vt$18tTextureFontLoader",
        Ok(
            "tTextureFontLoader virtual table",
        ),
    ),
    (
        "_vt$12tTextureFont",
        Ok(
            "tTextureFont virtual table",
        ),
    ),
    (
        "_vt$13tVectorCamera",
        Ok(
            "tVectorCamera virtual table",
        ),
    ),
    (
        "_vt$11tVertexList",
        Ok(
            "tVertexList virtual table",
        ),
    ),
    (
        "_vt$5tView",
        Ok(
            "tView virtual table",
        ),
    ),
    (
        "_vt$16tAnimationLoader",
        Ok(
            "tAnimationLoader virtual table",
        ),
    ),
    (
        "_vt$10tAnimation",
        Ok(
            "tAnimation virtual table",
        ),
    ),
    (
        "_vt$15tAnimationGroup",
        Ok(
            "tAnimationGroup virtual table",
        ),
    ),
    (
        "_vt$21tAnimationMemoryBlock",
        Ok(
            "tAnimationMemoryBlock virtual table",
        ),
    ),
    (
        "_vt$22tFrameControllerLoader",
        Ok(
            "tFrameControllerLoader virtual table",
        ),
    ),
    (
        "_vt$21tBlendFrameController",
        Ok(
            "tBlendFrameController virtual table",
        ),
    ),
    (
        "_vt$22tSimpleFrameController",
        Ok(
            "tSimpleFrameController virtual table",
        ),
    ),
    (
        "_vt$25tAnimationFrameController",
        Ok(
            "tAnimationFrameController virtual table",
        ),
    ),
    (
        "_vt$16tFrameController",
        Ok(
            "tFrameController virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z9tGeometry",
        Ok(
            "radLoadInventory::SafeCast<tGeometry> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z7tEffect",
        Ok(
            "radLoadInventory::SafeCast<tEffect> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z16tExpressionMixer",
        Ok(
            "radLoadInventory::SafeCast<tExpressionMixer> virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z15tAnimatedObject",
        Ok(
            "radLoadInventory::SafeCast<tAnimatedObject> virtual table",
        ),
    ),
    (
        "_vt$21tAnimatedObjectLoader",
        Ok(
            "tAnimatedObjectLoader virtual table",
        ),
    ),
    (
        "_vt$28tAnimatedObjectFactoryLoader",
        Ok(
            "tAnimatedObjectFactoryLoader virtual table",
        ),
    ),
    (
        "_vt$30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController virtual table",
        ),
    ),
    (
        "_vt$15tAnimatedObject",
        Ok(
            "tAnimatedObject virtual table",
        ),
    ),
    (
        "_vt$24tAnimatedObjectAnimation",
        Ok(
            "tAnimatedObjectAnimation virtual table",
        ),
    ),
    (
        "_vt$22tAnimatedObjectFactory",
        Ok(
            "tAnimatedObjectFactory virtual table",
        ),
    ),
    (
        "_vt$38tBillboardQuadGroupAnimationController",
        Ok(
            "tBillboardQuadGroupAnimationController virtual table",
        ),
    ),
    (
        "_vt$26tCameraAnimationController",
        Ok(
            "tCameraAnimationController virtual table",
        ),
    ),
    (
        "_vt$13tEventChannel",
        Ok(
            "tEventChannel virtual table",
        ),
    ),
    (
        "_vt$14tColourChannel",
        Ok(
            "tColourChannel virtual table",
        ),
    ),
    (
        "_vt$12tBoolChannel",
        Ok(
            "tBoolChannel virtual table",
        ),
    ),
    (
        "_vt$14tEntityChannel",
        Ok(
            "tEntityChannel virtual table",
        ),
    ),
    (
        "_vt$14tStringChannel",
        Ok(
            "tStringChannel virtual table",
        ),
    ),
    (
        "_vt$28tCompressedQuaternionChannel",
        Ok(
            "tCompressedQuaternionChannel virtual table",
        ),
    ),
    (
        "_vt$18tQuaternionChannel",
        Ok(
            "tQuaternionChannel virtual table",
        ),
    ),
    (
        "_vt$18tVector3DOFChannel",
        Ok(
            "tVector3DOFChannel virtual table",
        ),
    ),
    (
        "_vt$18tVector2DOFChannel",
        Ok(
            "tVector2DOFChannel virtual table",
        ),
    ),
    (
        "_vt$18tVector1DOFChannel",
        Ok(
            "tVector1DOFChannel virtual table",
        ),
    ),
    (
        "_vt$14tFloat2Channel",
        Ok(
            "tFloat2Channel virtual table",
        ),
    ),
    (
        "_vt$14tFloat1Channel",
        Ok(
            "tFloat1Channel virtual table",
        ),
    ),
    (
        "_vt$11tIntChannel",
        Ok(
            "tIntChannel virtual table",
        ),
    ),
    (
        "_vt$8tChannel",
        Ok(
            "tChannel virtual table",
        ),
    ),
    (
        "_vt$24tCompositeDrawableLoader",
        Ok(
            "tCompositeDrawableLoader virtual table",
        ),
    ),
    (
        "_vt$18tCompositeDrawable$8tPosable",
        Ok(
            "tCompositeDrawable::tPosable virtual table",
        ),
    ),
    (
        "_vt$18tCompositeDrawable",
        Ok(
            "tCompositeDrawable virtual table",
        ),
    ),
    (
        "_vt$t16tPtrDynamicArray1ZPQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tPtrDynamicArray<tCompositeDrawable::DrawableElement *> virtual table",
        ),
    ),
    (
        "_vt$t6tArray1ZPQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tArray<tCompositeDrawable::DrawableElement *> virtual table",
        ),
    ),
    (
        "_vt$Q218tCompositeDrawable21DrawableEffectElement",
        Ok(
            "tCompositeDrawable::DrawableEffectElement virtual table",
        ),
    ),
    (
        "_vt$Q218tCompositeDrawable19DrawablePoseElement",
        Ok(
            "tCompositeDrawable::DrawablePoseElement virtual table",
        ),
    ),
    (
        "_vt$Q218tCompositeDrawable19DrawablePropElement",
        Ok(
            "tCompositeDrawable::DrawablePropElement virtual table",
        ),
    ),
    (
        "_vt$Q218tCompositeDrawable15DrawableElement",
        Ok(
            "tCompositeDrawable::DrawableElement virtual table",
        ),
    ),
    (
        "_vt$8tPosable",
        Ok(
            "tPosable virtual table",
        ),
    ),
    (
        "_vt$13tDrawablePose$8tPosable",
        Ok(
            "tDrawablePose::tPosable virtual table",
        ),
    ),
    (
        "_vt$13tDrawablePose",
        Ok(
            "tDrawablePose virtual table",
        ),
    ),
    (
        "_vt$13tGenericEvent",
        Ok(
            "tGenericEvent virtual table",
        ),
    ),
    (
        "_vt$10tBaseEvent",
        Ok(
            "tBaseEvent virtual table",
        ),
    ),
    (
        "_vt$6tEvent",
        Ok(
            "tEvent virtual table",
        ),
    ),
    (
        "_11tExpression$INVALID_EXPRESSION_KEYVAL",
        Ok(
            "tExpression::INVALID_EXPRESSION_KEYVAL",
        ),
    ),
    (
        "_vt$22tExpressionMixerLoader",
        Ok(
            "tExpressionMixerLoader virtual table",
        ),
    ),
    (
        "_vt$22tExpressionGroupLoader",
        Ok(
            "tExpressionGroupLoader virtual table",
        ),
    ),
    (
        "_vt$Q222tExpressionGroupLoader16tExpressionStore",
        Ok(
            "tExpressionGroupLoader::tExpressionStore virtual table",
        ),
    ),
    (
        "_vt$17tExpressionLoader",
        Ok(
            "tExpressionLoader virtual table",
        ),
    ),
    (
        "_vt$16tExpressionMixer",
        Ok(
            "tExpressionMixer virtual table",
        ),
    ),
    (
        "_vt$16tExpressionGroup",
        Ok(
            "tExpressionGroup virtual table",
        ),
    ),
    (
        "_vt$t6tArray1Z18p3dExpressionStage",
        Ok(
            "tArray<p3dExpressionStage> virtual table",
        ),
    ),
    (
        "_vt$t9tPtrArray1ZP11tExpression",
        Ok(
            "tPtrArray<tExpression *> virtual table",
        ),
    ),
    (
        "_vt$t6tArray1ZP11tExpression",
        Ok(
            "tArray<tExpression *> virtual table",
        ),
    ),
    (
        "_vt$11tExpression",
        Ok(
            "tExpression virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z16tExpressionGroup",
        Ok(
            "radLoadInventory::SafeCast<tExpressionGroup> virtual table",
        ),
    ),
    (
        "_vt$30tExpressionAnimationController",
        Ok(
            "tExpressionAnimationController virtual table",
        ),
    ),
    (
        "_vt$25tLightAnimationController",
        Ok(
            "tLightAnimationController virtual table",
        ),
    ),
    (
        "_vt$22tMultiControllerLoader",
        Ok(
            "tMultiControllerLoader virtual table",
        ),
    ),
    (
        "_vt$16tMultiController",
        Ok(
            "tMultiController virtual table",
        ),
    ),
    (
        "_vt$15tPolySkinLoader",
        Ok(
            "tPolySkinLoader virtual table",
        ),
    ),
    (
        "_vt$9tPolySkin$8tPosable",
        Ok(
            "tPolySkin::tPosable virtual table",
        ),
    ),
    (
        "_vt$9tPolySkin",
        Ok(
            "tPolySkin virtual table",
        ),
    ),
    (
        "_vt$5tPose",
        Ok(
            "tPose virtual table",
        ),
    ),
    (
        "_vt$24tPoseAnimationController",
        Ok(
            "tPoseAnimationController virtual table",
        ),
    ),
    (
        "_vt$15tSEQFileHandler",
        Ok(
            "tSEQFileHandler virtual table",
        ),
    ),
    (
        "_vt$16tSequencerLoader",
        Ok(
            "tSequencerLoader virtual table",
        ),
    ),
    (
        "_vt$10tSequencer",
        Ok(
            "tSequencer virtual table",
        ),
    ),
    (
        "_vt$t6tArray1Z13tSubPartState",
        Ok(
            "tArray<tSubPartState> virtual table",
        ),
    ),
    (
        "_vt$t9tPtrArray1ZP15tSequencerState",
        Ok(
            "tPtrArray<tSequencerState *> virtual table",
        ),
    ),
    (
        "_vt$t6tArray1ZP15tSequencerState",
        Ok(
            "tArray<tSequencerState *> virtual table",
        ),
    ),
    (
        "_vt$15tSequencerState",
        Ok(
            "tSequencerState virtual table",
        ),
    ),
    (
        "_vt$16tStateTransition",
        Ok(
            "tStateTransition virtual table",
        ),
    ),
    (
        "_vt$22tStateSequencerCommand",
        Ok(
            "tStateSequencerCommand virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z21tBlendFrameController",
        Ok(
            "radLoadInventory::SafeCast<tBlendFrameController> virtual table",
        ),
    ),
    (
        "_vt$21tEventOriginSequencer$12tEventOrigin",
        Ok(
            "tEventOriginSequencer::tEventOrigin virtual table",
        ),
    ),
    (
        "_vt$21tEventOriginSequencer",
        Ok(
            "tEventOriginSequencer virtual table",
        ),
    ),
    (
        "_vt$12tEventOrigin",
        Ok(
            "tEventOrigin virtual table",
        ),
    ),
    (
        "_vt$15tSkeletonLoader",
        Ok(
            "tSkeletonLoader virtual table",
        ),
    ),
    (
        "_vt$9tSkeleton",
        Ok(
            "tSkeleton virtual table",
        ),
    ),
    (
        "_vt$t6tArray1ZQ29tSkeleton5Joint",
        Ok(
            "tArray<tSkeleton::Joint> virtual table",
        ),
    ),
    (
        "_vt$26tShaderAnimationController",
        Ok(
            "tShaderAnimationController virtual table",
        ),
    ),
    (
        "_vt$27tTextureAnimationController",
        Ok(
            "tTextureAnimationController virtual table",
        ),
    ),
    (
        "_vt$28tVertexOffsetExpressionMixer",
        Ok(
            "tVertexOffsetExpressionMixer virtual table",
        ),
    ),
    (
        "_vt$38tCompDrawVisibilityAnimationController",
        Ok(
            "tCompDrawVisibilityAnimationController virtual table",
        ),
    ),
    (
        "_vt$40tSceneGraphVisibilityAnimationController",
        Ok(
            "tSceneGraphVisibilityAnimationController virtual table",
        ),
    ),
    (
        "_vt$36tSimpleVisibilityAnimationController",
        Ok(
            "tSimpleVisibilityAnimationController virtual table",
        ),
    ),
    (
        "_vt$21tVertexAnimController",
        Ok(
            "tVertexAnimController virtual table",
        ),
    ),
    (
        "_vt$20tVertexAnimKeyLoader",
        Ok(
            "tVertexAnimKeyLoader virtual table",
        ),
    ),
    (
        "_vt$14tVertexAnimKey",
        Ok(
            "tVertexAnimKey virtual table",
        ),
    ),
    (
        "_vt$18tVector2OffsetList",
        Ok(
            "tVector2OffsetList virtual table",
        ),
    ),
    (
        "_vt$17tVectorOffsetList",
        Ok(
            "tVectorOffsetList virtual table",
        ),
    ),
    (
        "_vt$17tColourOffsetList",
        Ok(
            "tColourOffsetList virtual table",
        ),
    ),
    (
        "_vt$16tOffsetIndexList",
        Ok(
            "tOffsetIndexList virtual table",
        ),
    ),
    (
        "_vt$17tVertexAnimObject",
        Ok(
            "tVertexAnimObject virtual table",
        ),
    ),
    (
        "_vt$15tGeometryOffset",
        Ok(
            "tGeometryOffset virtual table",
        ),
    ),
    (
        "_vt$17tVertexOffsetList",
        Ok(
            "tVertexOffsetList virtual table",
        ),
    ),
    (
        "_vt$17tEffectController",
        Ok(
            "tEffectController virtual table",
        ),
    ),
    (
        "_vt$21tLensFlareGroupLoader",
        Ok(
            "tLensFlareGroupLoader virtual table",
        ),
    ),
    (
        "_vt$21tParticleSystemLoader",
        Ok(
            "tParticleSystemLoader virtual table",
        ),
    ),
    (
        "_vt$28tParticleSystemFactoryLoader",
        Ok(
            "tParticleSystemFactoryLoader virtual table",
        ),
    ),
    (
        "_vt$Q216radLoadInventoryt8SafeCast1Z22tParticleSystemFactory",
        Ok(
            "radLoadInventory::SafeCast<tParticleSystemFactory> virtual table",
        ),
    ),
    (
        "_vt$15tParticleSystem",
        Ok(
            "tParticleSystem virtual table",
        ),
    ),
    (
        "_vt$22tParticleSystemFactory",
        Ok(
            "tParticleSystemFactory virtual table",
        ),
    ),
    (
        "_vt$7tEffect",
        Ok(
            "tEffect virtual table",
        ),
    ),
    (
        "_vt$14tEffectFactory",
        Ok(
            "tEffectFactory virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph28TransformAnimationController",
        Ok(
            "Scenegraph::TransformAnimationController virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph13ShaderVisitor",
        Ok(
            "Scenegraph::ShaderVisitor virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph18LightGroupIterator",
        Ok(
            "Scenegraph::LightGroupIterator virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph8Iterator",
        Ok(
            "Scenegraph::Iterator virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph26TranslucentDrawableCounter",
        Ok(
            "Scenegraph::TranslucentDrawableCounter virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph15DrawableCounter",
        Ok(
            "Scenegraph::DrawableCounter virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph6Loader",
        Ok(
            "Scenegraph::Loader virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph10Visibility",
        Ok(
            "Scenegraph::Visibility virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph10Scenegraph",
        Ok(
            "Scenegraph::Scenegraph virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph10LightGroup",
        Ok(
            "Scenegraph::LightGroup virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph6Camera",
        Ok(
            "Scenegraph::Camera virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph10Attachment",
        Ok(
            "Scenegraph::Attachment virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph8Drawable",
        Ok(
            "Scenegraph::Drawable virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph9Transform",
        Ok(
            "Scenegraph::Transform virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph4Leaf",
        Ok(
            "Scenegraph::Leaf virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph6Branch",
        Ok(
            "Scenegraph::Branch virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph4Node",
        Ok(
            "Scenegraph::Node virtual table",
        ),
    ),
    (
        "_vt$Q210Scenegraph17SceneGraphVisitor",
        Ok(
            "Scenegraph::SceneGraphVisitor virtual table",
        ),
    ),
    (
        "_vt$11tPS2FileMap",
        Ok(
            "tPS2FileMap virtual table",
        ),
    ),
    (
        "_vt$13tAmbientLight",
        Ok(
            "tAmbientLight virtual table",
        ),
    ),
    (
        "_vt$17tDirectionalLight",
        Ok(
            "tDirectionalLight virtual table",
        ),
    ),
    (
        "_vt$8tFileFTT$26IRadFileCompletionCallback",
        Ok(
            "tFileFTT::IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$8tFileFTT",
        Ok(
            "tFileFTT virtual table",
        ),
    ),
    (
        "_vt$15tImageConverter",
        Ok(
            "tImageConverter virtual table",
        ),
    ),
    (
        "_vt$20tEventAnimTextLoader",
        Ok(
            "tEventAnimTextLoader virtual table",
        ),
    ),
    (
        "_vt$16tEventController",
        Ok(
            "tEventController virtual table",
        ),
    ),
    (
        "_vt$18tExpressionOffsets",
        Ok(
            "tExpressionOffsets virtual table",
        ),
    ),
    (
        "_vt$10tLensFlare",
        Ok(
            "tLensFlare virtual table",
        ),
    ),
    (
        "_vt$15tLensFlareGroup",
        Ok(
            "tLensFlareGroup virtual table",
        ),
    ),
    (
        "_vt$t9tPtrArray1ZP10tLensFlare",
        Ok(
            "tPtrArray<tLensFlare *> virtual table",
        ),
    ),
    (
        "_vt$t6tArray1ZP10tLensFlare",
        Ok(
            "tArray<tLensFlare *> virtual table",
        ),
    ),
    (
        "_vt$13tParticlePool",
        Ok(
            "tParticlePool virtual table",
        ),
    ),
    (
        "_vt$15tSpriteParticle",
        Ok(
            "tSpriteParticle virtual table",
        ),
    ),
    (
        "_vt$13tBaseParticle",
        Ok(
            "tBaseParticle virtual table",
        ),
    ),
    (
        "_vt$14tParticleArray",
        Ok(
            "tParticleArray virtual table",
        ),
    ),
    (
        "_vt$19tLocalSpriteEmitter",
        Ok(
            "tLocalSpriteEmitter virtual table",
        ),
    ),
    (
        "_vt$14tSpriteEmitter",
        Ok(
            "tSpriteEmitter virtual table",
        ),
    ),
    (
        "_vt$12tBaseEmitter",
        Ok(
            "tBaseEmitter virtual table",
        ),
    ),
    (
        "_vt$21tSpriteEmitterFactory",
        Ok(
            "tSpriteEmitterFactory virtual table",
        ),
    ),
    (
        "_vt$19tBaseEmitterFactory",
        Ok(
            "tBaseEmitterFactory virtual table",
        ),
    ),
    (
        "_vt$16tSphereGenerator",
        Ok(
            "tSphereGenerator virtual table",
        ),
    ),
    (
        "_vt$15tPlaneGenerator",
        Ok(
            "tPlaneGenerator virtual table",
        ),
    ),
    (
        "_vt$15tPointGenerator",
        Ok(
            "tPointGenerator virtual table",
        ),
    ),
    (
        "_vt$14tBaseGenerator",
        Ok(
            "tBaseGenerator virtual table",
        ),
    ),
    (
        "_vt$23tSphereGeneratorFactory",
        Ok(
            "tSphereGeneratorFactory virtual table",
        ),
    ),
    (
        "_vt$22tPlaneGeneratorFactory",
        Ok(
            "tPlaneGeneratorFactory virtual table",
        ),
    ),
    (
        "_vt$22tPointGeneratorFactory",
        Ok(
            "tPointGeneratorFactory virtual table",
        ),
    ),
    (
        "_vt$21tBaseGeneratorFactory",
        Ok(
            "tBaseGeneratorFactory virtual table",
        ),
    ),
    (
        "_vt$12tOpticEffect",
        Ok(
            "tOpticEffect virtual table",
        ),
    ),
    (
        "_vt$9ps2Device",
        Ok(
            "ps2Device virtual table",
        ),
    ),
    (
        "_vt$10ps2Display",
        Ok(
            "ps2Display virtual table",
        ),
    ),
    (
        "_vt$11pddiDisplay",
        Ok(
            "pddiDisplay virtual table",
        ),
    ),
    (
        "_vt$13ps2PrimBuffer$20pddiPrimBufferStream",
        Ok(
            "ps2PrimBuffer::pddiPrimBufferStream virtual table",
        ),
    ),
    (
        "_vt$13ps2PrimBuffer",
        Ok(
            "ps2PrimBuffer virtual table",
        ),
    ),
    (
        "_vt$14pddiPrimBuffer",
        Ok(
            "pddiPrimBuffer virtual table",
        ),
    ),
    (
        "_vt$20pddiPrimBufferStream",
        Ok(
            "pddiPrimBufferStream virtual table",
        ),
    ),
    (
        "_vt$14ps2ErrorShader",
        Ok(
            "ps2ErrorShader virtual table",
        ),
    ),
    (
        "_vt$9ps2Shader",
        Ok(
            "ps2Shader virtual table",
        ),
    ),
    (
        "_vt$10pddiShader",
        Ok(
            "pddiShader virtual table",
        ),
    ),
    (
        "_vt$16ps2LayeredShader",
        Ok(
            "ps2LayeredShader virtual table",
        ),
    ),
    (
        "_vt$17ps2LightmapShader",
        Ok(
            "ps2LightmapShader virtual table",
        ),
    ),
    (
        "_vt$20ps2LightweightShader",
        Ok(
            "ps2LightweightShader virtual table",
        ),
    ),
    (
        "_vt$13ps2ToonShader",
        Ok(
            "ps2ToonShader virtual table",
        ),
    ),
    (
        "_vt$15ps2SimpleShader",
        Ok(
            "ps2SimpleShader virtual table",
        ),
    ),
    (
        "_vt$19ps2RefractionShader",
        Ok(
            "ps2RefractionShader virtual table",
        ),
    ),
    (
        "_vt$19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader virtual table",
        ),
    ),
    (
        "_vt$15ps2ShadowShader",
        Ok(
            "ps2ShadowShader virtual table",
        ),
    ),
    (
        "_vt$10ps2Texture",
        Ok(
            "ps2Texture virtual table",
        ),
    ),
    (
        "_vt$11pddiTexture",
        Ok(
            "pddiTexture virtual table",
        ),
    ),
    (
        "_vt$11ps2TexCache",
        Ok(
            "ps2TexCache virtual table",
        ),
    ),
    (
        "_vt$t9pddiStack1Z16pddiStencilState",
        Ok(
            "pddiStack<pddiStencilState> virtual table",
        ),
    ),
    (
        "_vt$t9pddiStack1Z12pddiFogState",
        Ok(
            "pddiStack<pddiFogState> virtual table",
        ),
    ),
    (
        "_vt$t9pddiStack1Z17pddiLightingState",
        Ok(
            "pddiStack<pddiLightingState> virtual table",
        ),
    ),
    (
        "_vt$t9pddiStack1Z15pddiRenderState",
        Ok(
            "pddiStack<pddiRenderState> virtual table",
        ),
    ),
    (
        "_vt$t9pddiStack1Z13pddiViewState",
        Ok(
            "pddiStack<pddiViewState> virtual table",
        ),
    ),
    (
        "_vt$15pddiBaseContext",
        Ok(
            "pddiBaseContext virtual table",
        ),
    ),
    (
        "_vt$16pddiStencilState",
        Ok(
            "pddiStencilState virtual table",
        ),
    ),
    (
        "_vt$12pddiFogState",
        Ok(
            "pddiFogState virtual table",
        ),
    ),
    (
        "_vt$17pddiLightingState",
        Ok(
            "pddiLightingState virtual table",
        ),
    ),
    (
        "_vt$13pddiViewState",
        Ok(
            "pddiViewState virtual table",
        ),
    ),
    (
        "_vt$15pddiRenderState",
        Ok(
            "pddiRenderState virtual table",
        ),
    ),
    (
        "_vt$15pddiMatrixStack",
        Ok(
            "pddiMatrixStack virtual table",
        ),
    ),
    (
        "_vt$t9pddiStack1ZQ218RadicalMathLibrary6Matrix",
        Ok(
            "pddiStack<RadicalMathLibrary::Matrix> virtual table",
        ),
    ),
    (
        "_vt$17pddiRenderContext",
        Ok(
            "pddiRenderContext virtual table",
        ),
    ),
    (
        "_vt$10pddiDevice",
        Ok(
            "pddiDevice virtual table",
        ),
    ),
    (
        "_vt$23_pddiExtMemRegistration",
        Ok(
            "_pddiExtMemRegistration virtual table",
        ),
    ),
    (
        "_vt$22pddiExtMemRegistration",
        Ok(
            "pddiExtMemRegistration virtual table",
        ),
    ),
    (
        "_vt$13pddiExtension",
        Ok(
            "pddiExtension virtual table",
        ),
    ),
    (
        "_vt$9pddiState",
        Ok(
            "pddiState virtual table",
        ),
    ),
    (
        "_vt$14pddiBaseShader",
        Ok(
            "pddiBaseShader virtual table",
        ),
    ),
    (
        "_vt$10pddiObject",
        Ok(
            "pddiObject virtual table",
        ),
    ),
    (
        "_vt$24ps2ExtFramebufferEffects",
        Ok(
            "ps2ExtFramebufferEffects virtual table",
        ),
    ),
    (
        "_vt$16ps2ExtPS2Control",
        Ok(
            "ps2ExtPS2Control virtual table",
        ),
    ),
    (
        "_vt$10ps2Context",
        Ok(
            "ps2Context virtual table",
        ),
    ),
    (
        "_vt$17pddiExtPS2Control",
        Ok(
            "pddiExtPS2Control virtual table",
        ),
    ),
    (
        "_vt$25pddiExtFramebufferEffects",
        Ok(
            "pddiExtFramebufferEffects virtual table",
        ),
    ),
    (
        "_6SHADER$DitherMatrix",
        Ok(
            "SHADER::DitherMatrix",
        ),
    ),
    (
        "_6SHADER$filterMinTable",
        Ok(
            "SHADER::filterMinTable",
        ),
    ),
    (
        "_6SHADER$filterMagTable",
        Ok(
            "SHADER::filterMagTable",
        ),
    ),
    (
        "_6SHADER$uvTable",
        Ok(
            "SHADER::uvTable",
        ),
    ),
    (
        "_6SHADER$alphaTestTable",
        Ok(
            "SHADER::alphaTestTable",
        ),
    ),
    (
        "_6SHADER$alphaBlendTable",
        Ok(
            "SHADER::alphaBlendTable",
        ),
    ),
    (
        "_6SHADER$zCompareTable",
        Ok(
            "SHADER::zCompareTable",
        ),
    ),
    (
        "_6SHADER$primTable",
        Ok(
            "SHADER::primTable",
        ),
    ),
    (
        "_6SHADER$destAlphaTestTable",
        Ok(
            "SHADER::destAlphaTestTable",
        ),
    ),
    (
        "_6SHADER$mipTable",
        Ok(
            "SHADER::mipTable",
        ),
    ),
    (
        "_vt$22ps2ExtHardwareSkinning",
        Ok(
            "ps2ExtHardwareSkinning virtual table",
        ),
    ),
    (
        "_vt$23pddiExtHardwareSkinning",
        Ok(
            "pddiExtHardwareSkinning virtual table",
        ),
    ),
    (
        "inflate_copyright",
        Err(
            NotMangled,
        ),
    ),
    (
        "_vt$Q28radmusic23composition_data_loader",
        Ok(
            "radmusic::composition_data_loader virtual table",
        ),
    ),
    (
        "_vt$Q28radmusic20radmusic_file_loader",
        Ok(
            "radmusic::radmusic_file_loader virtual table",
        ),
    ),
    (
        "_vt$Q28radmusic27radload_composition_adapter",
        Ok(
            "radmusic::radload_composition_adapter virtual table",
        ),
    ),
    (
        "_vt$Q28radmusic26radload_radmusic_inventory",
        Ok(
            "radmusic::radload_radmusic_inventory virtual table",
        ),
    ),
    (
        "_vt$16radLoadInventory",
        Ok(
            "radLoadInventory virtual table",
        ),
    ),
    (
        "_3ods$pointer_null",
        Ok(
            "ods::pointer_null",
        ),
    ),
    (
        "_vt$Q28radmusic21stream_graph_callback",
        Ok(
            "radmusic::stream_graph_callback virtual table",
        ),
    ),
    (
        "_vt$22radSoundHalAudioFormat$14radSoundObject",
        Ok(
            "radSoundHalAudioFormat::radSoundObject virtual table",
        ),
    ),
    (
        "_vt$22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat virtual table",
        ),
    ),
    (
        "_vt$14radSoundObject",
        Ok(
            "radSoundObject virtual table",
        ),
    ),
    (
        "_vt$23IRadSoundHalAudioFormat",
        Ok(
            "IRadSoundHalAudioFormat virtual table",
        ),
    ),
    (
        "_vt$19radSoundHalListener$14radSoundObject",
        Ok(
            "radSoundHalListener::radSoundObject virtual table",
        ),
    ),
    (
        "_vt$19radSoundHalListener",
        Ok(
            "radSoundHalListener virtual table",
        ),
    ),
    (
        "_vt$20IRadSoundHalListener",
        Ok(
            "IRadSoundHalListener virtual table",
        ),
    ),
    (
        "_vt$26radSoundHalPositionalGroup$14radSoundObject",
        Ok(
            "radSoundHalPositionalGroup::radSoundObject virtual table",
        ),
    ),
    (
        "_vt$26radSoundHalPositionalGroup",
        Ok(
            "radSoundHalPositionalGroup virtual table",
        ),
    ),
    (
        "_vt$32radSoundHalPositionalInformation",
        Ok(
            "radSoundHalPositionalInformation virtual table",
        ),
    ),
    (
        "_vt$27IRadSoundHalPositionalGroup",
        Ok(
            "IRadSoundHalPositionalGroup virtual table",
        ),
    ),
    (
        "_vt$23radSoundHalMemoryRegion$14radSoundObject",
        Ok(
            "radSoundHalMemoryRegion::radSoundObject virtual table",
        ),
    ),
    (
        "_vt$23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion virtual table",
        ),
    ),
    (
        "_vt$24IRadSoundHalMemoryRegion",
        Ok(
            "IRadSoundHalMemoryRegion virtual table",
        ),
    ),
    (
        "_vt$17radSoundHalSystem$14radSoundObject",
        Ok(
            "radSoundHalSystem::radSoundObject virtual table",
        ),
    ),
    (
        "_vt$17radSoundHalSystem",
        Ok(
            "radSoundHalSystem virtual table",
        ),
    ),
    (
        "_vt$18IRadSoundHalSystem",
        Ok(
            "IRadSoundHalSystem virtual table",
        ),
    ),
    (
        "_vt$17radSoundEffectPs2$14radSoundObject",
        Ok(
            "radSoundEffectPs2::radSoundObject virtual table",
        ),
    ),
    (
        "_vt$17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2 virtual table",
        ),
    ),
    (
        "_vt$18IRadSoundEffectPs2",
        Ok(
            "IRadSoundEffectPs2 virtual table",
        ),
    ),
    (
        "_vt$18IRadSoundHalEffect",
        Ok(
            "IRadSoundHalEffect virtual table",
        ),
    ),
    (
        "_vt$14radSoundIopPs2",
        Ok(
            "radSoundIopPs2 virtual table",
        ),
    ),
    (
        "_vt$37radSoundHalBufferAsyncRequestAdpcmPs2",
        Ok(
            "radSoundHalBufferAsyncRequestAdpcmPs2 virtual table",
        ),
    ),
    (
        "_vt$22radSoundBufferAdpcmPs2$14radSoundObject",
        Ok(
            "radSoundBufferAdpcmPs2::radSoundObject virtual table",
        ),
    ),
    (
        "_vt$22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2 virtual table",
        ),
    ),
    (
        "_vt$18IRadSoundHalBuffer",
        Ok(
            "IRadSoundHalBuffer virtual table",
        ),
    ),
    (
        "_vt$29radSoundHalAdpcmBufferClearer$t18radSoundPoolObject1Z29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer::radSoundPoolObject<radSoundHalAdpcmBufferClearer> virtual table",
        ),
    ),
    (
        "_vt$29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer virtual table",
        ),
    ),
    (
        "_vt$t18radSoundPoolObject1Z29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundPoolObject<radSoundHalAdpcmBufferClearer> virtual table",
        ),
    ),
    (
        "_vt$33radSoundBufferAsyncLoaderAdpcmPs2$t18radSoundPoolObject1Z33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2> virtual table",
        ),
    ),
    (
        "_vt$33radSoundBufferAsyncLoaderAdpcmPs2$37radSoundHalBufferAsyncRequestAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2::radSoundHalBufferAsyncRequestAdpcmPs2 virtual table",
        ),
    ),
    (
        "_vt$33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2 virtual table",
        ),
    ),
    (
        "_vt$t18radSoundPoolObject1Z33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2> virtual table",
        ),
    ),
    (
        "_vt$30IRadSoundHalDataSourceCallback",
        Ok(
            "IRadSoundHalDataSourceCallback virtual table",
        ),
    ),
    (
        "_vt$21radSoundVoiceAdpcmPs2$14radSoundObject",
        Ok(
            "radSoundVoiceAdpcmPs2::radSoundObject virtual table",
        ),
    ),
    (
        "_vt$21radSoundVoiceAdpcmPs2$27radSoundHalPositionalEntity",
        Ok(
            "radSoundVoiceAdpcmPs2::radSoundHalPositionalEntity virtual table",
        ),
    ),
    (
        "_vt$21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2 virtual table",
        ),
    ),
    (
        "_vt$27radSoundHalPositionalEntity",
        Ok(
            "radSoundHalPositionalEntity virtual table",
        ),
    ),
    (
        "_vt$17IRadSoundHalVoice",
        Ok(
            "IRadSoundHalVoice virtual table",
        ),
    ),
    (
        "_vt$26radSoundBufferedDataSource$23radSoundUpdatableObject",
        Ok(
            "radSoundBufferedDataSource::radSoundUpdatableObject virtual table",
        ),
    ),
    (
        "_vt$26radSoundBufferedDataSource$30IRadSoundHalDataSourceCallback",
        Ok(
            "radSoundBufferedDataSource::IRadSoundHalDataSourceCallback virtual table",
        ),
    ),
    (
        "_vt$26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource virtual table",
        ),
    ),
    (
        "_vt$23radSoundUpdatableObject",
        Ok(
            "radSoundUpdatableObject virtual table",
        ),
    ),
    (
        "_vt$27IRadSoundBufferedDataSource",
        Ok(
            "IRadSoundBufferedDataSource virtual table",
        ),
    ),
    (
        "_vt$22IRadSoundHalDataSource",
        Ok(
            "IRadSoundHalDataSource virtual table",
        ),
    ),
    (
        "_vt$12radSoundClip$23radSoundUpdatableObject",
        Ok(
            "radSoundClip::radSoundUpdatableObject virtual table",
        ),
    ),
    (
        "_vt$12radSoundClip$31IRadSoundHalBufferClearCallback",
        Ok(
            "radSoundClip::IRadSoundHalBufferClearCallback virtual table",
        ),
    ),
    (
        "_vt$12radSoundClip$30IRadSoundHalBufferLoadCallback",
        Ok(
            "radSoundClip::IRadSoundHalBufferLoadCallback virtual table",
        ),
    ),
    (
        "_vt$12radSoundClip",
        Ok(
            "radSoundClip virtual table",
        ),
    ),
    (
        "_vt$13IRadSoundClip",
        Ok(
            "IRadSoundClip virtual table",
        ),
    ),
    (
        "_vt$31IRadSoundHalBufferClearCallback",
        Ok(
            "IRadSoundHalBufferClearCallback virtual table",
        ),
    ),
    (
        "_vt$30IRadSoundHalBufferLoadCallback",
        Ok(
            "IRadSoundHalBufferLoadCallback virtual table",
        ),
    ),
    (
        "_vt$18radSoundClipPlayer$23radSoundUpdatableObject",
        Ok(
            "radSoundClipPlayer::radSoundUpdatableObject virtual table",
        ),
    ),
    (
        "_vt$18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer virtual table",
        ),
    ),
    (
        "_vt$19IRadSoundClipPlayer",
        Ok(
            "IRadSoundClipPlayer virtual table",
        ),
    ),
    (
        "_vt$15IRadSoundPlayer",
        Ok(
            "IRadSoundPlayer virtual table",
        ),
    ),
    (
        "_vt$27radSoundDataCacheDataSource$14radSoundObject",
        Ok(
            "radSoundDataCacheDataSource::radSoundObject virtual table",
        ),
    ),
    (
        "_vt$27radSoundDataCacheDataSource",
        Ok(
            "radSoundDataCacheDataSource virtual table",
        ),
    ),
    (
        "_vt$17radSoundDataCache$23radSoundUpdatableObject",
        Ok(
            "radSoundDataCache::radSoundUpdatableObject virtual table",
        ),
    ),
    (
        "_vt$17radSoundDataCache$30IRadSoundHalDataSourceCallback",
        Ok(
            "radSoundDataCache::IRadSoundHalDataSourceCallback virtual table",
        ),
    ),
    (
        "_vt$17radSoundDataCache",
        Ok(
            "radSoundDataCache virtual table",
        ),
    ),
    (
        "_vt$18IRadSoundDataCache",
        Ok(
            "IRadSoundDataCache virtual table",
        ),
    ),
    (
        "_vt$25radSoundRsdFileDataSource$14radSoundObject",
        Ok(
            "radSoundRsdFileDataSource::radSoundObject virtual table",
        ),
    ),
    (
        "_vt$25radSoundRsdFileDataSource$26IRadFileCompletionCallback",
        Ok(
            "radSoundRsdFileDataSource::IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource virtual table",
        ),
    ),
    (
        "_vt$26IRadSoundRsdFileDataSource",
        Ok(
            "IRadSoundRsdFileDataSource virtual table",
        ),
    ),
    (
        "_vt$24radSoundMemoryDataSource$23radSoundUpdatableObject",
        Ok(
            "radSoundMemoryDataSource::radSoundUpdatableObject virtual table",
        ),
    ),
    (
        "_vt$24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource virtual table",
        ),
    ),
    (
        "_vt$25IRadSoundMemoryDataSource",
        Ok(
            "IRadSoundMemoryDataSource virtual table",
        ),
    ),
    (
        "_vt$25radSoundMemorySpaceObject$14radSoundObject",
        Ok(
            "radSoundMemorySpaceObject::radSoundObject virtual table",
        ),
    ),
    (
        "_vt$25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject virtual table",
        ),
    ),
    (
        "_vt$26IRadSoundMemorySpaceObject",
        Ok(
            "IRadSoundMemorySpaceObject virtual table",
        ),
    ),
    (
        "_vt$26radSoundStitchedDataSource$23radSoundUpdatableObject",
        Ok(
            "radSoundStitchedDataSource::radSoundUpdatableObject virtual table",
        ),
    ),
    (
        "_vt$26radSoundStitchedDataSource$30IRadSoundHalDataSourceCallback",
        Ok(
            "radSoundStitchedDataSource::IRadSoundHalDataSourceCallback virtual table",
        ),
    ),
    (
        "_vt$26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource virtual table",
        ),
    ),
    (
        "_vt$27IRadSoundStitchedDataSource",
        Ok(
            "IRadSoundStitchedDataSource virtual table",
        ),
    ),
    (
        "_vt$20radSoundStreamPlayer$23radSoundUpdatableObject",
        Ok(
            "radSoundStreamPlayer::radSoundUpdatableObject virtual table",
        ),
    ),
    (
        "_vt$20radSoundStreamPlayer$31IRadSoundHalBufferClearCallback",
        Ok(
            "radSoundStreamPlayer::IRadSoundHalBufferClearCallback virtual table",
        ),
    ),
    (
        "_vt$20radSoundStreamPlayer$30IRadSoundHalBufferLoadCallback",
        Ok(
            "radSoundStreamPlayer::IRadSoundHalBufferLoadCallback virtual table",
        ),
    ),
    (
        "_vt$20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer virtual table",
        ),
    ),
    (
        "_vt$21IRadSoundStreamPlayer",
        Ok(
            "IRadSoundStreamPlayer virtual table",
        ),
    ),
    (
        "_vt$10IRadScript$11radRefCount",
        Ok(
            "IRadScript::radRefCount virtual table",
        ),
    ),
    (
        "_vt$10IRadScript",
        Ok(
            "IRadScript virtual table",
        ),
    ),
    (
        "_vt$13IRadNameSpace",
        Ok(
            "IRadNameSpace virtual table",
        ),
    ),
    (
        "_vt$14radFactoryNode",
        Ok(
            "radFactoryNode virtual table",
        ),
    ),
    (
        "_vt$17radTypeInfoLoader$11radRefCount",
        Ok(
            "radTypeInfoLoader::radRefCount virtual table",
        ),
    ),
    (
        "_vt$17radTypeInfoLoader$26IRadFileCompletionCallback",
        Ok(
            "radTypeInfoLoader::IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$17radTypeInfoLoader",
        Ok(
            "radTypeInfoLoader virtual table",
        ),
    ),
    (
        "_vt$18IRadTypeInfoMethod$11radRefCount",
        Ok(
            "IRadTypeInfoMethod::radRefCount virtual table",
        ),
    ),
    (
        "_vt$18IRadTypeInfoMethod",
        Ok(
            "IRadTypeInfoMethod virtual table",
        ),
    ),
    (
        "_vt$17IRadTypeInfoParam$11radRefCount",
        Ok(
            "IRadTypeInfoParam::radRefCount virtual table",
        ),
    ),
    (
        "_vt$17IRadTypeInfoParam",
        Ok(
            "IRadTypeInfoParam virtual table",
        ),
    ),
    (
        "_vt$16IRadTypeInfoEnum$11radRefCount",
        Ok(
            "IRadTypeInfoEnum::radRefCount virtual table",
        ),
    ),
    (
        "_vt$16IRadTypeInfoEnum",
        Ok(
            "IRadTypeInfoEnum virtual table",
        ),
    ),
    (
        "_vt$22IRadTypeInfoIntLiteral$11radRefCount",
        Ok(
            "IRadTypeInfoIntLiteral::radRefCount virtual table",
        ),
    ),
    (
        "_vt$22IRadTypeInfoIntLiteral",
        Ok(
            "IRadTypeInfoIntLiteral virtual table",
        ),
    ),
    (
        "_vt$12IRadTypeInfo$11radRefCount",
        Ok(
            "IRadTypeInfo::radRefCount virtual table",
        ),
    ),
    (
        "_vt$12IRadTypeInfo",
        Ok(
            "IRadTypeInfo virtual table",
        ),
    ),
    (
        "_vt$18IRadTypeInfoLoader",
        Ok(
            "IRadTypeInfoLoader virtual table",
        ),
    ),
    (
        "_vt$14IRadObjectList$11radRefCount",
        Ok(
            "IRadObjectList::radRefCount virtual table",
        ),
    ),
    (
        "_vt$14IRadObjectList",
        Ok(
            "IRadObjectList virtual table",
        ),
    ),
    (
        "_vt$17radObjectListNode",
        Ok(
            "radObjectListNode virtual table",
        ),
    ),
    (
        "_vt$18IRadTypeInfoSystem",
        Ok(
            "IRadTypeInfoSystem virtual table",
        ),
    ),
    (
        "radMovie_NoAudioTrack",
        Err(
            NotMangled,
        ),
    ),
    (
        "_vt$14radMoviePlayer$11radRefCount",
        Ok(
            "radMoviePlayer::radRefCount virtual table",
        ),
    ),
    (
        "_vt$14radMoviePlayer$26IRadFileCompletionCallback",
        Ok(
            "radMoviePlayer::IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$14radMoviePlayer",
        Ok(
            "radMoviePlayer virtual table",
        ),
    ),
    (
        "_vt$16IRadMoviePlayer2",
        Ok(
            "IRadMoviePlayer2 virtual table",
        ),
    ),
    (
        "_vt$14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2 virtual table",
        ),
    ),
    (
        "_vt$23radMovieVideoDecoderPs2$11radRefCount",
        Ok(
            "radMovieVideoDecoderPs2::radRefCount virtual table",
        ),
    ),
    (
        "_vt$23radMovieVideoDecoderPs2$26IRadFileCompletionCallback",
        Ok(
            "radMovieVideoDecoderPs2::IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2 virtual table",
        ),
    ),
    (
        "_vt$21IRadMovieVideoDecoder",
        Ok(
            "IRadMovieVideoDecoder virtual table",
        ),
    ),
    (
        "_vt$25radMovieRenderStrategyPs2$11radRefCount",
        Ok(
            "radMovieRenderStrategyPs2::radRefCount virtual table",
        ),
    ),
    (
        "_vt$25radMovieRenderStrategyPs2",
        Ok(
            "radMovieRenderStrategyPs2 virtual table",
        ),
    ),
    (
        "_vt$23IRadMovieRenderStrategy",
        Ok(
            "IRadMovieRenderStrategy virtual table",
        ),
    ),
    (
        "_vt$23radMovieAudioDataSource$11radRefCount",
        Ok(
            "radMovieAudioDataSource::radRefCount virtual table",
        ),
    ),
    (
        "_vt$23radMovieAudioDataSource$26IRadFileCompletionCallback",
        Ok(
            "radMovieAudioDataSource::IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource virtual table",
        ),
    ),
    (
        "g_nameFTech",
        Err(
            NotMangled,
        ),
    ),
    (
        "_vt$8radTimer",
        Ok(
            "radTimer virtual table",
        ),
    ),
    (
        "_vt$12radTimerList$9radObject",
        Ok(
            "radTimerList::radObject virtual table",
        ),
    ),
    (
        "_vt$12radTimerList",
        Ok(
            "radTimerList virtual table",
        ),
    ),
    (
        "_vt$13IRadTimerList",
        Ok(
            "IRadTimerList virtual table",
        ),
    ),
    (
        "_vt$9IRadTimer",
        Ok(
            "IRadTimer virtual table",
        ),
    ),
    (
        "_vt$12radStopwatch$9radObject",
        Ok(
            "radStopwatch::radObject virtual table",
        ),
    ),
    (
        "_vt$12radStopwatch",
        Ok(
            "radStopwatch virtual table",
        ),
    ),
    (
        "_vt$13IRadStopwatch",
        Ok(
            "IRadStopwatch virtual table",
        ),
    ),
    (
        "_vt$20radMemoryDlAllocator$11radRefCount",
        Ok(
            "radMemoryDlAllocator::radRefCount virtual table",
        ),
    ),
    (
        "_vt$20radMemoryDlAllocator",
        Ok(
            "radMemoryDlAllocator virtual table",
        ),
    ),
    (
        "_vt$14IRadMemoryHeap",
        Ok(
            "IRadMemoryHeap virtual table",
        ),
    ),
    (
        "_vt$18ExternalMemoryHeap$9radObject",
        Ok(
            "ExternalMemoryHeap::radObject virtual table",
        ),
    ),
    (
        "_vt$18ExternalMemoryHeap",
        Ok(
            "ExternalMemoryHeap virtual table",
        ),
    ),
    (
        "_vt$16IRadMemoryObject",
        Ok(
            "IRadMemoryObject virtual table",
        ),
    ),
    (
        "_vt$20ExternalMemoryObject$13radBaseObject",
        Ok(
            "ExternalMemoryObject::radBaseObject virtual table",
        ),
    ),
    (
        "_vt$20ExternalMemoryObject",
        Ok(
            "ExternalMemoryObject virtual table",
        ),
    ),
    (
        "_vt$24radMemoryAllocatorMalloc",
        Ok(
            "radMemoryAllocatorMalloc virtual table",
        ),
    ),
    (
        "_vt$19IRadMemoryAllocator",
        Ok(
            "IRadMemoryAllocator virtual table",
        ),
    ),
    (
        "_vt$36MemorySpaceAsyncRequest_CopyIopToIop$26IRadMemorySpaceCopyRequest",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop::IRadMemorySpaceCopyRequest virtual table",
        ),
    ),
    (
        "_vt$36MemorySpaceAsyncRequest_CopyIopToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop virtual table",
        ),
    ),
    (
        "_vt$35MemorySpaceAsyncRequest_CopyIopToEe$26IRadMemorySpaceCopyRequest",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToEe::IRadMemorySpaceCopyRequest virtual table",
        ),
    ),
    (
        "_vt$35MemorySpaceAsyncRequest_CopyIopToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToEe virtual table",
        ),
    ),
    (
        "_vt$35MemorySpaceAsyncRequest_CopyEeToIop$26IRadMemorySpaceCopyRequest",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToIop::IRadMemorySpaceCopyRequest virtual table",
        ),
    ),
    (
        "_vt$35MemorySpaceAsyncRequest_CopyEeToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToIop virtual table",
        ),
    ),
    (
        "_vt$23MemorySpaceAsyncRequest$26IRadMemorySpaceCopyRequest",
        Ok(
            "MemorySpaceAsyncRequest::IRadMemorySpaceCopyRequest virtual table",
        ),
    ),
    (
        "_vt$23MemorySpaceAsyncRequest",
        Ok(
            "MemorySpaceAsyncRequest virtual table",
        ),
    ),
    (
        "_vt$34MemorySpaceAsyncRequest_CopyEeToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToEe virtual table",
        ),
    ),
    (
        "_vt$22radMemoryAllocator_Iop",
        Ok(
            "radMemoryAllocator_Iop virtual table",
        ),
    ),
    (
        "_vt$26IRadMemorySpaceCopyRequest",
        Ok(
            "IRadMemorySpaceCopyRequest virtual table",
        ),
    ),
    (
        "_vt$10MemoryPool",
        Ok(
            "MemoryPool virtual table",
        ),
    ),
    (
        "_vt$14IRadMemoryPool",
        Ok(
            "IRadMemoryPool virtual table",
        ),
    ),
    (
        "_vt$10StaticHeap$11radRefCount",
        Ok(
            "StaticHeap::radRefCount virtual table",
        ),
    ),
    (
        "_vt$10StaticHeap",
        Ok(
            "StaticHeap virtual table",
        ),
    ),
    (
        "_vt$12TrackingHeap$11radRefCount",
        Ok(
            "TrackingHeap::radRefCount virtual table",
        ),
    ),
    (
        "_vt$12TrackingHeap",
        Ok(
            "TrackingHeap virtual table",
        ),
    ),
    (
        "_vt$9radString$11radRefCount",
        Ok(
            "radString::radRefCount virtual table",
        ),
    ),
    (
        "_vt$9radString",
        Ok(
            "radString virtual table",
        ),
    ),
    (
        "_vt$10IRadString",
        Ok(
            "IRadString virtual table",
        ),
    ),
    (
        "_vt$14radObjectBTree",
        Ok(
            "radObjectBTree virtual table",
        ),
    ),
    (
        "_vt$13ConsoleClient$9radObject",
        Ok(
            "ConsoleClient::radObject virtual table",
        ),
    ),
    (
        "_vt$13ConsoleClient$29IRadDbgComChannelSendCallback",
        Ok(
            "ConsoleClient::IRadDbgComChannelSendCallback virtual table",
        ),
    ),
    (
        "_vt$13ConsoleClient$32IRadDbgComChannelReceiveCallback",
        Ok(
            "ConsoleClient::IRadDbgComChannelReceiveCallback virtual table",
        ),
    ),
    (
        "_vt$13ConsoleClient",
        Ok(
            "ConsoleClient virtual table",
        ),
    ),
    (
        "_vt$12DebugConsole$9radObject",
        Ok(
            "DebugConsole::radObject virtual table",
        ),
    ),
    (
        "_vt$12DebugConsole",
        Ok(
            "DebugConsole virtual table",
        ),
    ),
    (
        "_vt$16IRadDebugConsole",
        Ok(
            "IRadDebugConsole virtual table",
        ),
    ),
    (
        "_vt$32IRadDbgComChannelReceiveCallback",
        Ok(
            "IRadDbgComChannelReceiveCallback virtual table",
        ),
    ),
    (
        "_vt$29IRadDbgComChannelSendCallback",
        Ok(
            "IRadDbgComChannelSendCallback virtual table",
        ),
    ),
    (
        "_vt$31IRadDbgComChannelStatusCallback",
        Ok(
            "IRadDbgComChannelStatusCallback virtual table",
        ),
    ),
    (
        "_vt$20LGDevWheelController$11radRefCount",
        Ok(
            "LGDevWheelController::radRefCount virtual table",
        ),
    ),
    (
        "_vt$20LGDevWheelController",
        Ok(
            "LGDevWheelController virtual table",
        ),
    ),
    (
        "_vt$21LGDevWheelOutputPoint$11radRefCount",
        Ok(
            "LGDevWheelOutputPoint::radRefCount virtual table",
        ),
    ),
    (
        "_vt$21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint virtual table",
        ),
    ),
    (
        "_vt$20LGDevWheelInputPoint$11radRefCount",
        Ok(
            "LGDevWheelInputPoint::radRefCount virtual table",
        ),
    ),
    (
        "_vt$20LGDevWheelInputPoint",
        Ok(
            "LGDevWheelInputPoint virtual table",
        ),
    ),
    (
        "_vt$22rControllerInputPoint2$9radObject",
        Ok(
            "rControllerInputPoint2::radObject virtual table",
        ),
    ),
    (
        "_vt$22rControllerInputPoint2",
        Ok(
            "rControllerInputPoint2 virtual table",
        ),
    ),
    (
        "_vt$23rControllerOutputPoint2$9radObject",
        Ok(
            "rControllerOutputPoint2::radObject virtual table",
        ),
    ),
    (
        "_vt$23rControllerOutputPoint2",
        Ok(
            "rControllerOutputPoint2 virtual table",
        ),
    ),
    (
        "_vt$25iControllerOutputHandler2$9radObject",
        Ok(
            "iControllerOutputHandler2::radObject virtual table",
        ),
    ),
    (
        "_vt$25iControllerOutputHandler2",
        Ok(
            "iControllerOutputHandler2 virtual table",
        ),
    ),
    (
        "_vt$12rController2$9radObject",
        Ok(
            "rController2::radObject virtual table",
        ),
    ),
    (
        "_vt$12rController2",
        Ok(
            "rController2 virtual table",
        ),
    ),
    (
        "_vt$20iControllerLocation2$9radObject",
        Ok(
            "iControllerLocation2::radObject virtual table",
        ),
    ),
    (
        "_vt$20iControllerLocation2",
        Ok(
            "iControllerLocation2 virtual table",
        ),
    ),
    (
        "_vt$18rControllerSystem2$9radObject",
        Ok(
            "rControllerSystem2::radObject virtual table",
        ),
    ),
    (
        "_vt$18rControllerSystem2$17IRadTimerCallback",
        Ok(
            "rControllerSystem2::IRadTimerCallback virtual table",
        ),
    ),
    (
        "_vt$18rControllerSystem2",
        Ok(
            "rControllerSystem2 virtual table",
        ),
    ),
    (
        "_vt$23iIControllerInputPoint2",
        Ok(
            "iIControllerInputPoint2 virtual table",
        ),
    ),
    (
        "_vt$33iRIControllerOutputPointCallback2",
        Ok(
            "iRIControllerOutputPointCallback2 virtual table",
        ),
    ),
    (
        "_vt$13iIController2",
        Ok(
            "iIController2 virtual table",
        ),
    ),
    (
        "_vt$21iIControllerLocation2",
        Ok(
            "iIControllerLocation2 virtual table",
        ),
    ),
    (
        "_vt$24IRadControllerInputPoint",
        Ok(
            "IRadControllerInputPoint virtual table",
        ),
    ),
    (
        "_vt$25IRadControllerOutputPoint",
        Ok(
            "IRadControllerOutputPoint virtual table",
        ),
    ),
    (
        "_vt$20IRadControllerSystem",
        Ok(
            "IRadControllerSystem virtual table",
        ),
    ),
    (
        "_vt$14IRadController",
        Ok(
            "IRadController virtual table",
        ),
    ),
    (
        "_vt$11radPlatform",
        Ok(
            "radPlatform virtual table",
        ),
    ),
    (
        "_vt$12IRadPlatform",
        Ok(
            "IRadPlatform virtual table",
        ),
    ),
    (
        "_vt$14radThreadMutex$9radObject",
        Ok(
            "radThreadMutex::radObject virtual table",
        ),
    ),
    (
        "_vt$14radThreadMutex",
        Ok(
            "radThreadMutex virtual table",
        ),
    ),
    (
        "_vt$15IRadThreadMutex",
        Ok(
            "IRadThreadMutex virtual table",
        ),
    ),
    (
        "_vt$18radThreadSemaphore$9radObject",
        Ok(
            "radThreadSemaphore::radObject virtual table",
        ),
    ),
    (
        "_vt$18radThreadSemaphore",
        Ok(
            "radThreadSemaphore virtual table",
        ),
    ),
    (
        "_vt$19IRadThreadSemaphore",
        Ok(
            "IRadThreadSemaphore virtual table",
        ),
    ),
    (
        "_vt$21radThreadLocalStorage$9radObject",
        Ok(
            "radThreadLocalStorage::radObject virtual table",
        ),
    ),
    (
        "_vt$21radThreadLocalStorage",
        Ok(
            "radThreadLocalStorage virtual table",
        ),
    ),
    (
        "_vt$9radThread$9radObject",
        Ok(
            "radThread::radObject virtual table",
        ),
    ),
    (
        "_vt$9radThread",
        Ok(
            "radThread virtual table",
        ),
    ),
    (
        "_vt$14radThreadFiber$9radObject",
        Ok(
            "radThreadFiber::radObject virtual table",
        ),
    ),
    (
        "_vt$14radThreadFiber",
        Ok(
            "radThreadFiber virtual table",
        ),
    ),
    (
        "_vt$15IRadThreadFiber",
        Ok(
            "IRadThreadFiber virtual table",
        ),
    ),
    (
        "_vt$22IRadThreadLocalStorage",
        Ok(
            "IRadThreadLocalStorage virtual table",
        ),
    ),
    (
        "_vt$10IRadThread",
        Ok(
            "IRadThread virtual table",
        ),
    ),
    (
        "_vt$14radTextDisplay",
        Ok(
            "radTextDisplay virtual table",
        ),
    ),
    (
        "_vt$15IRadTextDisplay",
        Ok(
            "IRadTextDisplay virtual table",
        ),
    ),
    (
        "_vt$22radWeakCallbackWrapper$11radRefCount",
        Ok(
            "radWeakCallbackWrapper::radRefCount virtual table",
        ),
    ),
    (
        "_vt$22radWeakCallbackWrapper",
        Ok(
            "radWeakCallbackWrapper virtual table",
        ),
    ),
    (
        "_vt$23IRadWeakCallbackWrapper",
        Ok(
            "IRadWeakCallbackWrapper virtual table",
        ),
    ),
    (
        "_vt$16ControllerBuffer$9radObject",
        Ok(
            "ControllerBuffer::radObject virtual table",
        ),
    ),
    (
        "_vt$16ControllerBuffer",
        Ok(
            "ControllerBuffer virtual table",
        ),
    ),
    (
        "_vt$20IRadControllerBuffer",
        Ok(
            "IRadControllerBuffer virtual table",
        ),
    ),
    (
        "_vt$14radRemoteDrive$32IRadDbgComChannelReceiveCallback",
        Ok(
            "radRemoteDrive::IRadDbgComChannelReceiveCallback virtual table",
        ),
    ),
    (
        "_vt$14radRemoteDrive$29IRadDbgComChannelSendCallback",
        Ok(
            "radRemoteDrive::IRadDbgComChannelSendCallback virtual table",
        ),
    ),
    (
        "_vt$14radRemoteDrive$15radSafeRefCount",
        Ok(
            "radRemoteDrive::radSafeRefCount virtual table",
        ),
    ),
    (
        "_vt$14radRemoteDrive$9radObject",
        Ok(
            "radRemoteDrive::radObject virtual table",
        ),
    ),
    (
        "_vt$14radRemoteDrive",
        Ok(
            "radRemoteDrive virtual table",
        ),
    ),
    (
        "_vt$16radCementLibrary$15radSafeRefCount",
        Ok(
            "radCementLibrary::radSafeRefCount virtual table",
        ),
    ),
    (
        "_vt$16radCementLibrary$9radObject",
        Ok(
            "radCementLibrary::radObject virtual table",
        ),
    ),
    (
        "_vt$16radCementLibrary$26IRadFileCompletionCallback",
        Ok(
            "radCementLibrary::IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$16radCementLibrary",
        Ok(
            "radCementLibrary virtual table",
        ),
    ),
    (
        "_vt$15radSafeRefCount",
        Ok(
            "radSafeRefCount virtual table",
        ),
    ),
    (
        "_vt$11IRadMutable",
        Ok(
            "IRadMutable virtual table",
        ),
    ),
    (
        "_vt$17IRadCementLibrary",
        Ok(
            "IRadCementLibrary virtual table",
        ),
    ),
    (
        "_vt$13radPs2CdDrive$15radSafeRefCount",
        Ok(
            "radPs2CdDrive::radSafeRefCount virtual table",
        ),
    ),
    (
        "_vt$13radPs2CdDrive$9radObject",
        Ok(
            "radPs2CdDrive::radObject virtual table",
        ),
    ),
    (
        "_vt$13radPs2CdDrive$8radDrive",
        Ok(
            "radPs2CdDrive::radDrive virtual table",
        ),
    ),
    (
        "_vt$13radPs2CdDrive",
        Ok(
            "radPs2CdDrive virtual table",
        ),
    ),
    (
        "_vt$17radBufferedReader",
        Ok(
            "radBufferedReader virtual table",
        ),
    ),
    (
        "_vt$15radPs2HostDrive$15radSafeRefCount",
        Ok(
            "radPs2HostDrive::radSafeRefCount virtual table",
        ),
    ),
    (
        "_vt$15radPs2HostDrive$9radObject",
        Ok(
            "radPs2HostDrive::radObject virtual table",
        ),
    ),
    (
        "_vt$15radPs2HostDrive$8radDrive",
        Ok(
            "radPs2HostDrive::radDrive virtual table",
        ),
    ),
    (
        "_vt$15radPs2HostDrive",
        Ok(
            "radPs2HostDrive virtual table",
        ),
    ),
    (
        "_vt$18radPs2MemcardDrive$15radSignedWriter",
        Ok(
            "radPs2MemcardDrive::radSignedWriter virtual table",
        ),
    ),
    (
        "_vt$18radPs2MemcardDrive$15radSignedReader",
        Ok(
            "radPs2MemcardDrive::radSignedReader virtual table",
        ),
    ),
    (
        "_vt$18radPs2MemcardDrive$15radSafeRefCount",
        Ok(
            "radPs2MemcardDrive::radSafeRefCount virtual table",
        ),
    ),
    (
        "_vt$18radPs2MemcardDrive$9radObject",
        Ok(
            "radPs2MemcardDrive::radObject virtual table",
        ),
    ),
    (
        "_vt$18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive virtual table",
        ),
    ),
    (
        "_vt$15radSignedWriter",
        Ok(
            "radSignedWriter virtual table",
        ),
    ),
    (
        "_vt$15radSignedReader",
        Ok(
            "radSignedReader virtual table",
        ),
    ),
    (
        "_vt$18DriveCancelRequest",
        Ok(
            "DriveCancelRequest virtual table",
        ),
    ),
    (
        "_vt$23DriveFileDestroyRequest",
        Ok(
            "DriveFileDestroyRequest virtual table",
        ),
    ),
    (
        "_vt$21DriveFindCloseRequest",
        Ok(
            "DriveFindCloseRequest virtual table",
        ),
    ),
    (
        "_vt$20DriveFindNextRequest",
        Ok(
            "DriveFindNextRequest virtual table",
        ),
    ),
    (
        "_vt$21DriveFindFirstRequest",
        Ok(
            "DriveFindFirstRequest virtual table",
        ),
    ),
    (
        "_vt$28DriveDestroyDirectoryRequest",
        Ok(
            "DriveDestroyDirectoryRequest virtual table",
        ),
    ),
    (
        "_vt$27DriveCreateDirectoryRequest",
        Ok(
            "DriveCreateDirectoryRequest virtual table",
        ),
    ),
    (
        "_vt$18DriveFormatRequest",
        Ok(
            "DriveFormatRequest virtual table",
        ),
    ),
    (
        "_vt$17DriveMediaRequest",
        Ok(
            "DriveMediaRequest virtual table",
        ),
    ),
    (
        "_vt$16DriveOpenRequest",
        Ok(
            "DriveOpenRequest virtual table",
        ),
    ),
    (
        "_vt$15radDriveRequest",
        Ok(
            "radDriveRequest virtual table",
        ),
    ),
    (
        "_vt$17FileCancelRequest",
        Ok(
            "FileCancelRequest virtual table",
        ),
    ),
    (
        "_vt$18FileGetSizeRequest",
        Ok(
            "FileGetSizeRequest virtual table",
        ),
    ),
    (
        "_vt$22FileGetPositionRequest",
        Ok(
            "FileGetPositionRequest virtual table",
        ),
    ),
    (
        "_vt$22FileSetPositionRequest",
        Ok(
            "FileSetPositionRequest virtual table",
        ),
    ),
    (
        "_vt$16FileWriteRequest",
        Ok(
            "FileWriteRequest virtual table",
        ),
    ),
    (
        "_vt$15FileReadRequest",
        Ok(
            "FileReadRequest virtual table",
        ),
    ),
    (
        "_vt$17FileCommitRequest",
        Ok(
            "FileCommitRequest virtual table",
        ),
    ),
    (
        "_vt$16FileCloseRequest",
        Ok(
            "FileCloseRequest virtual table",
        ),
    ),
    (
        "_vt$19SaveGameOpenRequest",
        Ok(
            "SaveGameOpenRequest virtual table",
        ),
    ),
    (
        "_vt$15FileOpenRequest",
        Ok(
            "FileOpenRequest virtual table",
        ),
    ),
    (
        "_vt$14radFileRequest",
        Ok(
            "radFileRequest virtual table",
        ),
    ),
    (
        "_vt$22DriveCompletionRequest",
        Ok(
            "DriveCompletionRequest virtual table",
        ),
    ),
    (
        "_vt$21FileCompletionRequest",
        Ok(
            "FileCompletionRequest virtual table",
        ),
    ),
    (
        "_vt$25CompletionCallbackRequest",
        Ok(
            "CompletionCallbackRequest virtual table",
        ),
    ),
    (
        "_vt$22CompletionEventRequest",
        Ok(
            "CompletionEventRequest virtual table",
        ),
    ),
    (
        "_vt$10radRequest",
        Ok(
            "radRequest virtual table",
        ),
    ),
    (
        "_vt$7radFile$11IRadMutable",
        Ok(
            "radFile::IRadMutable virtual table",
        ),
    ),
    (
        "_vt$7radFile",
        Ok(
            "radFile virtual table",
        ),
    ),
    (
        "_vt$8IRadFile",
        Ok(
            "IRadFile virtual table",
        ),
    ),
    (
        "_vt$16radInstanceDrive$11IRadMutable",
        Ok(
            "radInstanceDrive::IRadMutable virtual table",
        ),
    ),
    (
        "_vt$16radInstanceDrive",
        Ok(
            "radInstanceDrive virtual table",
        ),
    ),
    (
        "_vt$9IRadDrive",
        Ok(
            "IRadDrive virtual table",
        ),
    ),
    (
        "_vt$8radDrive$15radSafeRefCount",
        Ok(
            "radDrive::radSafeRefCount virtual table",
        ),
    ),
    (
        "_vt$8radDrive$9radObject",
        Ok(
            "radDrive::radObject virtual table",
        ),
    ),
    (
        "_vt$8radDrive",
        Ok(
            "radDrive virtual table",
        ),
    ),
    (
        "_vt$14radDriveThread$15radSafeRefCount",
        Ok(
            "radDriveThread::radSafeRefCount virtual table",
        ),
    ),
    (
        "_vt$14radDriveThread$9radObject",
        Ok(
            "radDriveThread::radObject virtual table",
        ),
    ),
    (
        "_vt$14radDriveThread",
        Ok(
            "radDriveThread virtual table",
        ),
    ),
    (
        "_vt$12PtrHashTable",
        Ok(
            "PtrHashTable virtual table",
        ),
    ),
    (
        "_vt$13SafeCasterObj",
        Ok(
            "SafeCasterObj virtual table",
        ),
    ),
    (
        "_vt$18radLoadHashedStore",
        Ok(
            "radLoadHashedStore virtual table",
        ),
    ),
    (
        "_vt$t12RefHashTable1Z9IRefCount",
        Ok(
            "RefHashTable<IRefCount> virtual table",
        ),
    ),
    (
        "_vt$12radLoadStore",
        Ok(
            "radLoadStore virtual table",
        ),
    ),
    (
        "_vt$t8RefQueue1Z15radLoadCallback",
        Ok(
            "RefQueue<radLoadCallback> virtual table",
        ),
    ),
    (
        "_vt$t8RefQueue1Z13radLoadObject",
        Ok(
            "RefQueue<radLoadObject> virtual table",
        ),
    ),
    (
        "_vt$t12RefHashTable1Z17radLoadDataLoader",
        Ok(
            "RefHashTable<radLoadDataLoader> virtual table",
        ),
    ),
    (
        "_vt$t12RefHashTable1Z17radLoadFileLoader",
        Ok(
            "RefHashTable<radLoadFileLoader> virtual table",
        ),
    ),
    (
        "_vt$14radLoadManager",
        Ok(
            "radLoadManager virtual table",
        ),
    ),
    (
        "_vt$Q214radLoadManager9QueueItem",
        Ok(
            "radLoadManager::QueueItem virtual table",
        ),
    ),
    (
        "_vt$12ILoadManager",
        Ok(
            "ILoadManager virtual table",
        ),
    ),
    (
        "_vt$13radLoadObject",
        Ok(
            "radLoadObject virtual table",
        ),
    ),
    (
        "_vt$8PtrQueue",
        Ok(
            "PtrQueue virtual table",
        ),
    ),
    (
        "_vt$23radLoadUpdatableRequest",
        Ok(
            "radLoadUpdatableRequest virtual table",
        ),
    ),
    (
        "_vt$14radLoadRequest",
        Ok(
            "radLoadRequest virtual table",
        ),
    ),
    (
        "_vt$Q217radLoadFileStream8Callback$26IRadFileCompletionCallback",
        Ok(
            "radLoadFileStream::Callback::IRadFileCompletionCallback virtual table",
        ),
    ),
    (
        "_vt$Q217radLoadFileStream8Callback",
        Ok(
            "radLoadFileStream::Callback virtual table",
        ),
    ),
    (
        "_vt$19radLoadLoaderStream",
        Ok(
            "radLoadLoaderStream virtual table",
        ),
    ),
    (
        "_vt$17radLoadFileStream",
        Ok(
            "radLoadFileStream virtual table",
        ),
    ),
    (
        "_vt$17radLoadDataStream",
        Ok(
            "radLoadDataStream virtual table",
        ),
    ),
    (
        "_vt$17radLoadBaseStream",
        Ok(
            "radLoadBaseStream virtual table",
        ),
    ),
    (
        "_ctype_",
        Err(
            NotMangled,
        ),
    ),
    (
        "__mprec_tens",
        Err(
            InvalidSpecialMethod(
                "mprec_tens",
            ),
        ),
    ),
    (
        "__mprec_bigtens",
        Err(
            InvalidSpecialMethod(
                "mprec_bigtens",
            ),
        ),
    ),
    (
        "__mprec_tinytens",
        Err(
            InvalidSpecialMethod(
                "mprec_tinytens",
            ),
        ),
    ),
    (
        "__infinity",
        Err(
            InvalidSpecialMethod(
                "infinity",
            ),
        ),
    ),
    (
        "_vt$22_IO_ostream_withassign$3ios",
        Ok(
            "_IO_ostream_withassign::ios virtual table",
        ),
    ),
    (
        "_vt$22_IO_istream_withassign$3ios",
        Ok(
            "_IO_istream_withassign::ios virtual table",
        ),
    ),
    (
        "_vt$8iostream$3ios",
        Ok(
            "iostream::ios virtual table",
        ),
    ),
    (
        "_vt$7istream$3ios",
        Ok(
            "istream::ios virtual table",
        ),
    ),
    (
        "_vt$7ostream$3ios",
        Ok(
            "ostream::ios virtual table",
        ),
    ),
    (
        "_vt$7filebuf",
        Ok(
            "filebuf virtual table",
        ),
    ),
    (
        "_vt$9streambuf",
        Ok(
            "streambuf virtual table",
        ),
    ),
    (
        "_vt$3ios",
        Ok(
            "ios virtual table",
        ),
    ),
    (
        "_7filebuf$openprot",
        Ok(
            "filebuf::openprot",
        ),
    ),
    (
        "_vt$12ostdiostream$3ios",
        Ok(
            "ostdiostream::ios virtual table",
        ),
    ),
    (
        "_vt$12istdiostream$3ios",
        Ok(
            "istdiostream::ios virtual table",
        ),
    ),
    (
        "_vt$8stdiobuf",
        Ok(
            "stdiobuf virtual table",
        ),
    ),
    (
        "__fdlib_version",
        Err(
            InvalidSpecialMethod(
                "fdlib_version",
            ),
        ),
    ),
    (
        "_vt$13bad_exception",
        Ok(
            "bad_exception virtual table",
        ),
    ),
    (
        "_vt$9exception",
        Ok(
            "exception virtual table",
        ),
    ),
    (
        "_vt$17__class_type_info",
        Ok(
            "__class_type_info virtual table",
        ),
    ),
    (
        "_vt$14__si_type_info",
        Ok(
            "__si_type_info virtual table",
        ),
    ),
    (
        "_vt$16__user_type_info",
        Ok(
            "__user_type_info virtual table",
        ),
    ),
    (
        "_vt$10bad_typeid",
        Ok(
            "bad_typeid virtual table",
        ),
    ),
    (
        "_vt$8bad_cast",
        Ok(
            "bad_cast virtual table",
        ),
    ),
    (
        "_vt$9type_info",
        Ok(
            "type_info virtual table",
        ),
    ),
    (
        "_vt$17__array_type_info",
        Ok(
            "__array_type_info virtual table",
        ),
    ),
    (
        "_vt$16__ptmd_type_info",
        Ok(
            "__ptmd_type_info virtual table",
        ),
    ),
    (
        "_vt$16__ptmf_type_info",
        Ok(
            "__ptmf_type_info virtual table",
        ),
    ),
    (
        "_vt$16__func_type_info",
        Ok(
            "__func_type_info virtual table",
        ),
    ),
    (
        "_vt$19__builtin_type_info",
        Ok(
            "__builtin_type_info virtual table",
        ),
    ),
    (
        "_vt$16__attr_type_info",
        Ok(
            "__attr_type_info virtual table",
        ),
    ),
    (
        "_vt$19__pointer_type_info",
        Ok(
            "__pointer_type_info virtual table",
        ),
    ),
    (
        "__ti18CStatePropListener",
        Ok(
            "CStatePropListener type_info node",
        ),
    ),
    (
        "__tiQ214LoadingManager23ProcessRequestsCallback",
        Ok(
            "LoadingManager::ProcessRequestsCallback type_info node",
        ),
    ),
    (
        "__tiQ211CharacterAi5State",
        Ok(
            "CharacterAi::State type_info node",
        ),
    ),
    (
        "__ti15ISpatialProxyAA",
        Ok(
            "ISpatialProxyAA type_info node",
        ),
    ),
    (
        "__ti9IRefCount",
        Ok(
            "IRefCount type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventory12SafeCastBase",
        Ok(
            "radLoadInventory::SafeCastBase type_info node",
        ),
    ),
    (
        "_13CharacterTune$sfJumpHeight",
        Ok(
            "CharacterTune::sfJumpHeight",
        ),
    ),
    (
        "_13CharacterTune$sGetInHeightThreshold",
        Ok(
            "CharacterTune::sGetInHeightThreshold",
        ),
    ),
    (
        "_13CharacterTune$sfGetInOutOfCarAnimSpeed",
        Ok(
            "CharacterTune::sfGetInOutOfCarAnimSpeed",
        ),
    ),
    (
        "_13CharacterTune$sGetInOpenSpeed",
        Ok(
            "CharacterTune::sGetInOpenSpeed",
        ),
    ),
    (
        "_13CharacterTune$sGetInOpenDelay",
        Ok(
            "CharacterTune::sGetInOpenDelay",
        ),
    ),
    (
        "_13CharacterTune$sGetInCloseSpeed",
        Ok(
            "CharacterTune::sGetInCloseSpeed",
        ),
    ),
    (
        "_13CharacterTune$sGetInCloseDelay",
        Ok(
            "CharacterTune::sGetInCloseDelay",
        ),
    ),
    (
        "_13CharacterTune$sGetOutOpenSpeed",
        Ok(
            "CharacterTune::sGetOutOpenSpeed",
        ),
    ),
    (
        "_13CharacterTune$sGetOutOpenDelay",
        Ok(
            "CharacterTune::sGetOutOpenDelay",
        ),
    ),
    (
        "_13CharacterTune$sGetOutCloseSpeed",
        Ok(
            "CharacterTune::sGetOutCloseSpeed",
        ),
    ),
    (
        "_13CharacterTune$sGetOutCloseDelay",
        Ok(
            "CharacterTune::sGetOutCloseDelay",
        ),
    ),
    (
        "__ti13RespawnEntity",
        Ok(
            "RespawnEntity type_info node",
        ),
    ),
    (
        "__ti13EventListener",
        Ok(
            "EventListener type_info node",
        ),
    ),
    (
        "__ti16IntersectionList",
        Ok(
            "IntersectionList type_info node",
        ),
    ),
    (
        "__ti9Behaviour",
        Ok(
            "Behaviour type_info node",
        ),
    ),
    (
        "__ti14ActorAnimation",
        Ok(
            "ActorAnimation type_info node",
        ),
    ),
    (
        "__ti24StatePropDSGProcAnimator",
        Ok(
            "StatePropDSGProcAnimator type_info node",
        ),
    ),
    (
        "__ti9Sequencer",
        Ok(
            "Sequencer type_info node",
        ),
    ),
    (
        "__ti16ActionController",
        Ok(
            "ActionController type_info node",
        ),
    ),
    (
        "_13CharacterTune$sfTurboRotateRate",
        Ok(
            "CharacterTune::sfTurboRotateRate",
        ),
    ),
    (
        "_13CharacterTune$sfLocoRotateRate",
        Ok(
            "CharacterTune::sfLocoRotateRate",
        ),
    ),
    (
        "_13CharacterTune$sfLocoDecceleration",
        Ok(
            "CharacterTune::sfLocoDecceleration",
        ),
    ),
    (
        "_13CharacterTune$sfLocoAcceleration",
        Ok(
            "CharacterTune::sfLocoAcceleration",
        ),
    ),
    (
        "_13CharacterTune$bLocoTest",
        Ok(
            "CharacterTune::bLocoTest",
        ),
    ),
    (
        "_13CharacterTune$sfMaxSpeed",
        Ok(
            "CharacterTune::sfMaxSpeed",
        ),
    ),
    (
        "_13CharacterTune$sfAirGravity",
        Ok(
            "CharacterTune::sfAirGravity",
        ),
    ),
    (
        "_13CharacterTune$sfDashBurstMax",
        Ok(
            "CharacterTune::sfDashBurstMax",
        ),
    ),
    (
        "_13CharacterTune$sfAirAccelScale",
        Ok(
            "CharacterTune::sfAirAccelScale",
        ),
    ),
    (
        "_13CharacterTune$sfStompGravityScale",
        Ok(
            "CharacterTune::sfStompGravityScale",
        ),
    ),
    (
        "_13CharacterTune$sfAirRotateRate",
        Ok(
            "CharacterTune::sfAirRotateRate",
        ),
    ),
    (
        "_13CharacterTune$sfDoubleJumpAllowUp",
        Ok(
            "CharacterTune::sfDoubleJumpAllowUp",
        ),
    ),
    (
        "_13CharacterTune$sfDoubleJumpAllowDown",
        Ok(
            "CharacterTune::sfDoubleJumpAllowDown",
        ),
    ),
    (
        "_13CharacterTune$sfDoubleJumpHeight",
        Ok(
            "CharacterTune::sfDoubleJumpHeight",
        ),
    ),
    (
        "__ti10Potentials",
        Ok(
            "Potentials type_info node",
        ),
    ),
    (
        "__ti14PotentialField",
        Ok(
            "PotentialField type_info node",
        ),
    ),
    (
        "__ti18IHudMapIconLocator",
        Ok(
            "IHudMapIconLocator type_info node",
        ),
    ),
    (
        "__ti15VehicleAIRender",
        Ok(
            "VehicleAIRender type_info node",
        ),
    ),
    (
        "__ti13ICameraShaker",
        Ok(
            "ICameraShaker type_info node",
        ),
    ),
    (
        "__ti15GameDataHandler",
        Ok(
            "GameDataHandler type_info node",
        ),
    ),
    (
        "__ti13BumperCamData",
        Ok(
            "BumperCamData type_info node",
        ),
    ),
    (
        "__ti15ISuperCamTarget",
        Ok(
            "ISuperCamTarget type_info node",
        ),
    ),
    (
        "__ti12ChaseCamData",
        Ok(
            "ChaseCamData type_info node",
        ),
    ),
    (
        "__ti19ConversationCamData",
        Ok(
            "ConversationCamData type_info node",
        ),
    ),
    (
        "__ti13FollowCamData",
        Ok(
            "FollowCamData type_info node",
        ),
    ),
    (
        "__ti14TrackerCamData",
        Ok(
            "TrackerCamData type_info node",
        ),
    ),
    (
        "__ti13WalkerCamData",
        Ok(
            "WalkerCamData type_info node",
        ),
    ),
    (
        "__ti18FollowCamDataChunk",
        Ok(
            "FollowCamDataChunk type_info node",
        ),
    ),
    (
        "__ti4Card",
        Ok(
            "Card type_info node",
        ),
    ),
    (
        "__ti21ICheatEnteredCallback",
        Ok(
            "ICheatEnteredCallback type_info node",
        ),
    ),
    (
        "__ti7CardsDB",
        Ok(
            "CardsDB type_info node",
        ),
    ),
    (
        "__ti8CheatsDB",
        Ok(
            "CheatsDB type_info node",
        ),
    ),
    (
        "__ti16CheatInputSystem",
        Ok(
            "CheatInputSystem type_info node",
        ),
    ),
    (
        "__ti37IRadDebugConsoleKeyboardInputCallback",
        Ok(
            "IRadDebugConsoleKeyboardInputCallback type_info node",
        ),
    ),
    (
        "__ti36IRadDebugConsolePointerInputCallback",
        Ok(
            "IRadDebugConsolePointerInputCallback type_info node",
        ),
    ),
    (
        "__tiQ217PresentationEvent25PresentationEventCallBack",
        Ok(
            "PresentationEvent::PresentationEventCallBack type_info node",
        ),
    ),
    (
        "__ti22IRadDriveErrorCallback",
        Ok(
            "IRadDriveErrorCallback type_info node",
        ),
    ),
    (
        "__ti17IRadTimerCallback",
        Ok(
            "IRadTimerCallback type_info node",
        ),
    ),
    (
        "__ti12RumbleEffect",
        Ok(
            "RumbleEffect type_info node",
        ),
    ),
    (
        "__ti11ForceEffect",
        Ok(
            "ForceEffect type_info node",
        ),
    ),
    (
        "__ti32IRadControllerInputPointCallback",
        Ok(
            "IRadControllerInputPointCallback type_info node",
        ),
    ),
    (
        "__ti38IRadControllerConnectionChangeCallback",
        Ok(
            "IRadControllerConnectionChangeCallback type_info node",
        ),
    ),
    (
        "__tiQ215AnimationPlayer16LoadDataCallBack",
        Ok(
            "AnimationPlayer::LoadDataCallBack type_info node",
        ),
    ),
    (
        "__ti11FileHandler",
        Ok(
            "FileHandler type_info node",
        ),
    ),
    (
        "__tiQ211FileHandler16LoadFileCallback",
        Ok(
            "FileHandler::LoadFileCallback type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby19LoadProjectCallback",
        Ok(
            "Scrooby::LoadProjectCallback type_info node",
        ),
    ),
    (
        "__ti14IWrappedLoader",
        Ok(
            "IWrappedLoader type_info node",
        ),
    ),
    (
        "__ti4Game",
        Ok(
            "Game type_info node",
        ),
    ),
    (
        "__ti9HeapStack",
        Ok(
            "HeapStack type_info node",
        ),
    ),
    (
        "__ti26IRadMemoryActivityCallback",
        Ok(
            "IRadMemoryActivityCallback type_info node",
        ),
    ),
    (
        "__ti30IRadMemorySetAllocatorCallback",
        Ok(
            "IRadMemorySetAllocatorCallback type_info node",
        ),
    ),
    (
        "_20TriggerVolumeTracker$sColType",
        Ok(
            "TriggerVolumeTracker::sColType",
        ),
    ),
    (
        "__ti19HasPresentationInfo",
        Ok(
            "HasPresentationInfo type_info node",
        ),
    ),
    (
        "__tiQ27Console21ExecuteScriptCallback",
        Ok(
            "Console::ExecuteScriptCallback type_info node",
        ),
    ),
    (
        "__ti12AnimatedIcon",
        Ok(
            "AnimatedIcon type_info node",
        ),
    ),
    (
        "__tiQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tCompositeDrawable::DrawableElement type_info node",
        ),
    ),
    (
        "__ti14BonusObjective",
        Ok(
            "BonusObjective type_info node",
        ),
    ),
    (
        "__ti8SafeZone",
        Ok(
            "SafeZone type_info node",
        ),
    ),
    (
        "__ti6Reward",
        Ok(
            "Reward type_info node",
        ),
    ),
    (
        "__ti7Blinker",
        Ok(
            "Blinker type_info node",
        ),
    ),
    (
        "__ti20PresentationAnimator",
        Ok(
            "PresentationAnimator type_info node",
        ),
    ),
    (
        "__tit9AllocPool1Z8FMVEvent",
        Ok(
            "AllocPool<FMVEvent> type_info node",
        ),
    ),
    (
        "__tit9AllocPool1Z8NISEvent",
        Ok(
            "AllocPool<NISEvent> type_info node",
        ),
    ),
    (
        "__tit9AllocPool1Z15TransitionEvent",
        Ok(
            "AllocPool<TransitionEvent> type_info node",
        ),
    ),
    (
        "__ti13radBaseObject",
        Ok(
            "radBaseObject type_info node",
        ),
    ),
    (
        "__ti10CGuiEntity",
        Ok(
            "CGuiEntity type_info node",
        ),
    ),
    (
        "__ti11GuiMenuItem",
        Ok(
            "GuiMenuItem type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby18GotoScreenCallback",
        Ok(
            "Scrooby::GotoScreenCallback type_info node",
        ),
    ),
    (
        "__ti24IMemoryCardCheckCallback",
        Ok(
            "IMemoryCardCheckCallback type_info node",
        ),
    ),
    (
        "__ti25IMemoryCardFormatCallback",
        Ok(
            "IMemoryCardFormatCallback type_info node",
        ),
    ),
    (
        "__ti13CGuiTextBible",
        Ok(
            "CGuiTextBible type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby8Drawable",
        Ok(
            "Scrooby::Drawable type_info node",
        ),
    ),
    (
        "__ti20GameDataLoadCallback",
        Ok(
            "GameDataLoadCallback type_info node",
        ),
    ),
    (
        "__ti27IMemoryCardInfoLoadCallback",
        Ok(
            "IMemoryCardInfoLoadCallback type_info node",
        ),
    ),
    (
        "__ti12MessageQueue",
        Ok(
            "MessageQueue type_info node",
        ),
    ),
    (
        "__ti24CGuiScreenHasTransitions",
        Ok(
            "CGuiScreenHasTransitions type_info node",
        ),
    ),
    (
        "__ti20GameDataSaveCallback",
        Ok(
            "GameDataSaveCallback type_info node",
        ),
    ),
    (
        "__ti15HudEventHandler",
        Ok(
            "HudEventHandler type_info node",
        ),
    ),
    (
        "__ti7CHudMap",
        Ok(
            "CHudMap type_info node",
        ),
    ),
    (
        "__ti6Slider",
        Ok(
            "Slider type_info node",
        ),
    ),
    (
        "__ti13CTeleTypeText",
        Ok(
            "CTeleTypeText type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX10Transition",
        Ok(
            "GuiSFX::Transition type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX15HasTimeInterval",
        Ok(
            "GuiSFX::HasTimeInterval type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX18HasMulticontroller",
        Ok(
            "GuiSFX::HasMulticontroller type_info node",
        ),
    ),
    (
        "__ti13ScrollingText",
        Ok(
            "ScrollingText type_info node",
        ),
    ),
    (
        "_12StatePropDSG$sp_SharedtPoses",
        Ok(
            "StatePropDSG::sp_SharedtPoses",
        ),
    ),
    (
        "__tiQ29tDrawable14ShaderCallback",
        Ok(
            "tDrawable::ShaderCallback type_info node",
        ),
    ),
    (
        "__tit6tArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tArray<ParticleManager::ManagedParticleSystem *> type_info node",
        ),
    ),
    (
        "__tit6tArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info node",
        ),
    ),
    (
        "__ti11RenderLayer",
        Ok(
            "RenderLayer type_info node",
        ),
    ),
    (
        "__ti21ChunkListenerCallback",
        Ok(
            "ChunkListenerCallback type_info node",
        ),
    ),
    (
        "__ti14TrafficControl",
        Ok(
            "TrafficControl type_info node",
        ),
    ),
    (
        "__ti16ILaneInformation",
        Ok(
            "ILaneInformation type_info node",
        ),
    ),
    (
        "__ti12ILaneControl",
        Ok(
            "ILaneControl type_info node",
        ),
    ),
    (
        "__ti11RoadManager",
        Ok(
            "RoadManager type_info node",
        ),
    ),
    (
        "__ti8Listener",
        Ok(
            "Listener type_info node",
        ),
    ),
    (
        "__ti19SimpsonsSoundPlayer",
        Ok(
            "SimpsonsSoundPlayer type_info node",
        ),
    ),
    (
        "__ti15PositionCarrier",
        Ok(
            "PositionCarrier type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1Z28SoundRenderingPlayerCallback",
        Ok(
            "radLinkedClass<SoundRenderingPlayerCallback> type_info node",
        ),
    ),
    (
        "__ti17AvatarSoundPlayer",
        Ok(
            "AvatarSoundPlayer type_info node",
        ),
    ),
    (
        "__ti27SimpsonsSoundPlayerCallback",
        Ok(
            "SimpsonsSoundPlayerCallback type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1Z18carSoundParameters",
        Ok(
            "radLinkedClass<carSoundParameters> type_info node",
        ),
    ),
    (
        "__ti11EngineState",
        Ok(
            "EngineState type_info node",
        ),
    ),
    (
        "__ti14SoundDebugPage",
        Ok(
            "SoundDebugPage type_info node",
        ),
    ),
    (
        "__ti16SelectableDialog",
        Ok(
            "SelectableDialog type_info node",
        ),
    ),
    (
        "__ti19ConversationMatcher",
        Ok(
            "ConversationMatcher type_info node",
        ),
    ),
    (
        "__ti10DialogList",
        Ok(
            "DialogList type_info node",
        ),
    ),
    (
        "__ti26DialogLineCompleteCallback",
        Ok(
            "DialogLineCompleteCallback type_info node",
        ),
    ),
    (
        "__ti22DialogCompleteCallback",
        Ok(
            "DialogCompleteCallback type_info node",
        ),
    ),
    (
        "__ti17SoundEffectPlayer",
        Ok(
            "SoundEffectPlayer type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1Z23positionalSoundSettings",
        Ok(
            "radLinkedClass<positionalSoundSettings> type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1Z14reverbSettings",
        Ok(
            "radLinkedClass<reverbSettings> type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1ZQ25Sound21daSoundDynaLoadRegion",
        Ok(
            "radLinkedClass<Sound::daSoundDynaLoadRegion> type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1ZQ25Sound17daSoundPlayerBase",
        Ok(
            "radLinkedClass<Sound::daSoundPlayerBase> type_info node",
        ),
    ),
    (
        "__ti23IRadSoundStitchCallback",
        Ok(
            "IRadSoundStitchCallback type_info node",
        ),
    ),
    (
        "__ti28SoundResourceFilenameBuilder",
        Ok(
            "SoundResourceFilenameBuilder type_info node",
        ),
    ),
    (
        "__tiQ25Sound27daSoundTuner_ActiveFadeInfo",
        Ok(
            "Sound::daSoundTuner_ActiveFadeInfo type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1Z14globalSettings",
        Ok(
            "radLinkedClass<globalSettings> type_info node",
        ),
    ),
    (
        "__ti17SoundDebugDisplay",
        Ok(
            "SoundDebugDisplay type_info node",
        ),
    ),
    (
        "_16CharacterManager$sbFixedSimRate",
        Ok(
            "CharacterManager::sbFixedSimRate",
        ),
    ),
    (
        "_13CharacterTune$sfKickingForce",
        Ok(
            "CharacterTune::sfKickingForce",
        ),
    ),
    (
        "_13CharacterTune$sfSlamForce",
        Ok(
            "CharacterTune::sfSlamForce",
        ),
    ),
    (
        "_13CharacterTune$sfHighJumpHeight",
        Ok(
            "CharacterTune::sfHighJumpHeight",
        ),
    ),
    (
        "_13CharacterTune$sfDashDeceleration",
        Ok(
            "CharacterTune::sfDashDeceleration",
        ),
    ),
    (
        "_13CharacterTune$sfDashAcceleration",
        Ok(
            "CharacterTune::sfDashAcceleration",
        ),
    ),
    (
        "_13CharacterTune$sfShockTime",
        Ok(
            "CharacterTune::sfShockTime",
        ),
    ),
    (
        "__ti17VehicleLocomotion",
        Ok(
            "VehicleLocomotion type_info node",
        ),
    ),
    (
        "__ti14TrafficVehicle",
        Ok(
            "TrafficVehicle type_info node",
        ),
    ),
    (
        "__ti23ITrafficSpawnController",
        Ok(
            "ITrafficSpawnController type_info node",
        ),
    ),
    (
        "__ti11PathManager",
        Ok(
            "PathManager type_info node",
        ),
    ),
    (
        "__ti12SpawnManager",
        Ok(
            "SpawnManager type_info node",
        ),
    ),
    (
        "__tiQ23sim9VoidPList",
        Ok(
            "sim::VoidPList type_info node",
        ),
    ),
    (
        "__tiQ23sim27ImpulseBasedCollisionSolver",
        Ok(
            "sim::ImpulseBasedCollisionSolver type_info node",
        ),
    ),
    (
        "__tiQ23sim8SimUnits",
        Ok(
            "sim::SimUnits type_info node",
        ),
    ),
    (
        "__tiQ23sim9SymMatrix",
        Ok(
            "sim::SymMatrix type_info node",
        ),
    ),
    (
        "__tiQ23sim12PhysicsJoint",
        Ok(
            "sim::PhysicsJoint type_info node",
        ),
    ),
    (
        "__tiQ23sim9VirtualCM",
        Ok(
            "sim::VirtualCM type_info node",
        ),
    ),
    (
        "__tiQ23sim17CollisionAnalyser",
        Ok(
            "sim::CollisionAnalyser type_info node",
        ),
    ),
    (
        "__tiQ23sim20SubCollisionDetector",
        Ok(
            "sim::SubCollisionDetector type_info node",
        ),
    ),
    (
        "__tiQ23sim8Filter1D",
        Ok(
            "sim::Filter1D type_info node",
        ),
    ),
    (
        "__tiQ23sim8Filter3D",
        Ok(
            "sim::Filter3D type_info node",
        ),
    ),
    (
        "__tit7rVector1Zi",
        Ok(
            "rVector<int> type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby5Owner",
        Ok(
            "Scrooby::Owner type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby23ResourceManagerCallback",
        Ok(
            "Scrooby::ResourceManagerCallback type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby7Project",
        Ok(
            "Scrooby::Project type_info node",
        ),
    ),
    (
        "__tit7rVector1ZP13PascalCString",
        Ok(
            "rVector<PascalCString *> type_info node",
        ),
    ),
    (
        "__tit7rVector1ZP10FeLanguage",
        Ok(
            "rVector<FeLanguage *> type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby9TextBible",
        Ok(
            "Scrooby::TextBible type_info node",
        ),
    ),
    (
        "__tiQ217FeResourceManager10AliasEntry",
        Ok(
            "FeResourceManager::AliasEntry type_info node",
        ),
    ),
    (
        "__tit7rVector1ZPQ217FeResourceManager13ResourceEntry",
        Ok(
            "rVector<FeResourceManager::ResourceEntry *> type_info node",
        ),
    ),
    (
        "__tit7rVector1ZPQ217FeResourceManager10AliasEntry",
        Ok(
            "rVector<FeResourceManager::AliasEntry *> type_info node",
        ),
    ),
    (
        "__tit7rVector1ZPQ217FeResourceManager21Pure3dAttributesEntry",
        Ok(
            "rVector<FeResourceManager::Pure3dAttributesEntry *> type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby15ResourceManager",
        Ok(
            "Scrooby::ResourceManager type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby3App",
        Ok(
            "Scrooby::App type_info node",
        ),
    ),
    (
        "__ti7XMLTree",
        Ok(
            "XMLTree type_info node",
        ),
    ),
    (
        "__tit7rVector1ZP9FeProject",
        Ok(
            "rVector<FeProject *> type_info node",
        ),
    ),
    (
        "__ti7XMLNode",
        Ok(
            "XMLNode type_info node",
        ),
    ),
    (
        "__ti9XMLParser",
        Ok(
            "XMLParser type_info node",
        ),
    ),
    (
        "__tit7rVector1ZP12XMLAttribute",
        Ok(
            "rVector<XMLAttribute *> type_info node",
        ),
    ),
    (
        "__tit7rVector1ZP7XMLNode",
        Ok(
            "rVector<XMLNode *> type_info node",
        ),
    ),
    (
        "__tit6tArray1ZP14tBillboardQuad",
        Ok(
            "tArray<tBillboardQuad *> type_info node",
        ),
    ),
    (
        "__tiQ222pddiExtMemRegistration8CallBack",
        Ok(
            "pddiExtMemRegistration::CallBack type_info node",
        ),
    ),
    (
        "__tiQ210pddiDevice15MessageCallback",
        Ok(
            "pddiDevice::MessageCallback type_info node",
        ),
    ),
    (
        "__tit6tArray1ZP10tPrimGroup",
        Ok(
            "tArray<tPrimGroup *> type_info node",
        ),
    ),
    (
        "__tiQ213tImageHandler7Builder",
        Ok(
            "tImageHandler::Builder type_info node",
        ),
    ),
    (
        "__tit6tArray1ZP6tLight",
        Ok(
            "tArray<tLight *> type_info node",
        ),
    ),
    (
        "__tiQ23p3d12MemoryRouter",
        Ok(
            "p3d::MemoryRouter type_info node",
        ),
    ),
    (
        "__ti16tPrimGroupLoader",
        Ok(
            "tPrimGroupLoader type_info node",
        ),
    ),
    (
        "__ti15tAnimationGroup",
        Ok(
            "tAnimationGroup type_info node",
        ),
    ),
    (
        "__ti12tNonCopyable",
        Ok(
            "tNonCopyable type_info node",
        ),
    ),
    (
        "__tit6tArray1ZPQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tArray<tCompositeDrawable::DrawableElement *> type_info node",
        ),
    ),
    (
        "__ti8tPosable",
        Ok(
            "tPosable type_info node",
        ),
    ),
    (
        "__tit6tArray1ZP11tExpression",
        Ok(
            "tArray<tExpression *> type_info node",
        ),
    ),
    (
        "__tit6tArray1Z18p3dExpressionStage",
        Ok(
            "tArray<p3dExpressionStage> type_info node",
        ),
    ),
    (
        "__ti22tStateSequencerCommand",
        Ok(
            "tStateSequencerCommand type_info node",
        ),
    ),
    (
        "__tit6tArray1ZP15tSequencerState",
        Ok(
            "tArray<tSequencerState *> type_info node",
        ),
    ),
    (
        "__tit6tArray1Z13tSubPartState",
        Ok(
            "tArray<tSubPartState> type_info node",
        ),
    ),
    (
        "__ti12tEventOrigin",
        Ok(
            "tEventOrigin type_info node",
        ),
    ),
    (
        "__tit6tArray1ZQ29tSkeleton5Joint",
        Ok(
            "tArray<tSkeleton::Joint> type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph17SceneGraphVisitor",
        Ok(
            "Scenegraph::SceneGraphVisitor type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph8Iterator",
        Ok(
            "Scenegraph::Iterator type_info node",
        ),
    ),
    (
        "__ti15tImageConverter",
        Ok(
            "tImageConverter type_info node",
        ),
    ),
    (
        "__tit6tArray1ZP10tLensFlare",
        Ok(
            "tArray<tLensFlare *> type_info node",
        ),
    ),
    (
        "__ti13tBaseParticle",
        Ok(
            "tBaseParticle type_info node",
        ),
    ),
    (
        "__ti10pddiObject",
        Ok(
            "pddiObject type_info node",
        ),
    ),
    (
        "__ti20pddiPrimBufferStream",
        Ok(
            "pddiPrimBufferStream type_info node",
        ),
    ),
    (
        "__ti11ps2TexCache",
        Ok(
            "ps2TexCache type_info node",
        ),
    ),
    (
        "__tit9pddiStack1ZQ218RadicalMathLibrary6Matrix",
        Ok(
            "pddiStack<RadicalMathLibrary::Matrix> type_info node",
        ),
    ),
    (
        "__ti9pddiState",
        Ok(
            "pddiState type_info node",
        ),
    ),
    (
        "__tit9pddiStack1Z13pddiViewState",
        Ok(
            "pddiStack<pddiViewState> type_info node",
        ),
    ),
    (
        "__tit9pddiStack1Z15pddiRenderState",
        Ok(
            "pddiStack<pddiRenderState> type_info node",
        ),
    ),
    (
        "__tit9pddiStack1Z17pddiLightingState",
        Ok(
            "pddiStack<pddiLightingState> type_info node",
        ),
    ),
    (
        "__tit9pddiStack1Z12pddiFogState",
        Ok(
            "pddiStack<pddiFogState> type_info node",
        ),
    ),
    (
        "__tit9pddiStack1Z16pddiStencilState",
        Ok(
            "pddiStack<pddiStencilState> type_info node",
        ),
    ),
    (
        "__ti13pddiExtension",
        Ok(
            "pddiExtension type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1Z26radSoundHalPositionalGroup",
        Ok(
            "radLinkedClass<radSoundHalPositionalGroup> type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1Z22radSoundBufferAdpcmPs2",
        Ok(
            "radLinkedClass<radSoundBufferAdpcmPs2> type_info node",
        ),
    ),
    (
        "__ti27radSoundHalPositionalEntity",
        Ok(
            "radSoundHalPositionalEntity type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1Z21radSoundVoiceAdpcmPs2",
        Ok(
            "radLinkedClass<radSoundVoiceAdpcmPs2> type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1Z12radSoundClip",
        Ok(
            "radLinkedClass<radSoundClip> type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1Z13IRadNameSpace",
        Ok(
            "radLinkedClass<IRadNameSpace> type_info node",
        ),
    ),
    (
        "__tit14radLinkedClass1Z14radMoviePlayer",
        Ok(
            "radLinkedClass<radMoviePlayer> type_info node",
        ),
    ),
    (
        "__ti31IRadDbgComChannelStatusCallback",
        Ok(
            "IRadDbgComChannelStatusCallback type_info node",
        ),
    ),
    (
        "__ti11IRadMutable",
        Ok(
            "IRadMutable type_info node",
        ),
    ),
    (
        "__ti17radBufferedReader",
        Ok(
            "radBufferedReader type_info node",
        ),
    ),
    (
        "__ti15radSignedReader",
        Ok(
            "radSignedReader type_info node",
        ),
    ),
    (
        "__ti15radSignedWriter",
        Ok(
            "radSignedWriter type_info node",
        ),
    ),
    (
        "__ti10radRequest",
        Ok(
            "radRequest type_info node",
        ),
    ),
    (
        "__ti12ILoadManager",
        Ok(
            "ILoadManager type_info node",
        ),
    ),
    (
        "errno",
        Err(
            NotMangled,
        ),
    ),
    (
        "__ti8_IO_FILE",
        Ok(
            "_IO_FILE type_info node",
        ),
    ),
    (
        "__ti11_ios_fields",
        Ok(
            "_ios_fields type_info node",
        ),
    ),
    (
        "__ti9exception",
        Ok(
            "exception type_info node",
        ),
    ),
    (
        "__ti9type_info",
        Ok(
            "type_info type_info node",
        ),
    ),
    (
        "_Q212ActionButton18SummonVehiclePhone$sSelectedVehicleName",
        Ok(
            "ActionButton::SummonVehiclePhone::sSelectedVehicleName",
        ),
    ),
    (
        "_Q212ActionButton18SummonVehiclePhone$sCarSelectInfo",
        Ok(
            "ActionButton::SummonVehiclePhone::sCarSelectInfo",
        ),
    ),
    (
        "__tiQ212ActionButton29AnimCollisionEntityDSGWrapper",
        Ok(
            "ActionButton::AnimCollisionEntityDSGWrapper type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton18IGameObjectWrapper",
        Ok(
            "ActionButton::IGameObjectWrapper type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton20AnimEntityDSGWrapper",
        Ok(
            "ActionButton::AnimEntityDSGWrapper type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton13ButtonHandler",
        Ok(
            "ActionButton::ButtonHandler type_info node",
        ),
    ),
    (
        "__ti11tRefCounted",
        Ok(
            "tRefCounted type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton11PropHandler",
        Ok(
            "ActionButton::PropHandler type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton10AttachProp",
        Ok(
            "ActionButton::AttachProp type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton13EnterInterior",
        Ok(
            "ActionButton::EnterInterior type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton8GetInCar",
        Ok(
            "ActionButton::GetInCar type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton18ActionEventHandler",
        Ok(
            "ActionButton::ActionEventHandler type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton10AnimSwitch",
        Ok(
            "ActionButton::AnimSwitch type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton10ToggleAnim",
        Ok(
            "ActionButton::ToggleAnim type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton11ReverseAnim",
        Ok(
            "ActionButton::ReverseAnim type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton8PlayAnim",
        Ok(
            "ActionButton::PlayAnim type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton12PlayAnimLoop",
        Ok(
            "ActionButton::PlayAnimLoop type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton12AutoPlayAnim",
        Ok(
            "ActionButton::AutoPlayAnim type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton16AutoPlayAnimLoop",
        Ok(
            "ActionButton::AutoPlayAnimLoop type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton17AutoPlayAnimInOut",
        Ok(
            "ActionButton::AutoPlayAnimInOut type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton13DestroyObject",
        Ok(
            "ActionButton::DestroyObject type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton17UseVendingMachine",
        Ok(
            "ActionButton::UseVendingMachine type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton10PrankPhone",
        Ok(
            "ActionButton::PrankPhone type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton32SummonVehiclePhoneStaticCallback",
        Ok(
            "ActionButton::SummonVehiclePhoneStaticCallback type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton18SummonVehiclePhone",
        Ok(
            "ActionButton::SummonVehiclePhone type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton6Bounce",
        Ok(
            "ActionButton::Bounce type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton8Doorbell",
        Ok(
            "ActionButton::Doorbell type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton11Collectible",
        Ok(
            "ActionButton::Collectible type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton18RespawnCollectible",
        Ok(
            "ActionButton::RespawnCollectible type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton15CollectibleFood",
        Ok(
            "ActionButton::CollectibleFood type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton15CollectibleCard",
        Ok(
            "ActionButton::CollectibleCard type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton10WrenchIcon",
        Ok(
            "ActionButton::WrenchIcon type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton9NitroIcon",
        Ok(
            "ActionButton::NitroIcon type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton25GenericEventButtonHandler",
        Ok(
            "ActionButton::GenericEventButtonHandler type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton14TeleportAction",
        Ok(
            "ActionButton::TeleportAction type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton14PurchaseReward",
        Ok(
            "ActionButton::PurchaseReward type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton11PurchaseCar",
        Ok(
            "ActionButton::PurchaseCar type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton12PurchaseSkin",
        Ok(
            "ActionButton::PurchaseSkin type_info node",
        ),
    ),
    (
        "__ti19ActionButtonManager",
        Ok(
            "ActionButtonManager type_info node",
        ),
    ),
    (
        "__tiQ211CharacterAi7NoState",
        Ok(
            "CharacterAi::NoState type_info node",
        ),
    ),
    (
        "__tiQ211CharacterAi5InCar",
        Ok(
            "CharacterAi::InCar type_info node",
        ),
    ),
    (
        "__tiQ211CharacterAi4Loco",
        Ok(
            "CharacterAi::Loco type_info node",
        ),
    ),
    (
        "__tiQ211CharacterAi5InSim",
        Ok(
            "CharacterAi::InSim type_info node",
        ),
    ),
    (
        "__tiQ211CharacterAi5GetIn",
        Ok(
            "CharacterAi::GetIn type_info node",
        ),
    ),
    (
        "__tiQ211CharacterAi6GetOut",
        Ok(
            "CharacterAi::GetOut type_info node",
        ),
    ),
    (
        "__ti18TriggerEventAction",
        Ok(
            "TriggerEventAction type_info node",
        ),
    ),
    (
        "__ti11DelayAction",
        Ok(
            "DelayAction type_info node",
        ),
    ),
    (
        "__ti18AssignValueToFloat",
        Ok(
            "AssignValueToFloat type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton12PlayAnimOnce",
        Ok(
            "ActionButton::PlayAnimOnce type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton13AutomaticDoor",
        Ok(
            "ActionButton::AutomaticDoor type_info node",
        ),
    ),
    (
        "__tit11ChangeState1ZQ211CharacterAi5InCar",
        Ok(
            "ChangeState<CharacterAi::InCar> type_info node",
        ),
    ),
    (
        "__tit11ChangeState1ZQ211CharacterAi4Loco",
        Ok(
            "ChangeState<CharacterAi::Loco> type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton8OpenDoor",
        Ok(
            "ActionButton::OpenDoor type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton8TalkFood",
        Ok(
            "ActionButton::TalkFood type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton10TalkDialog",
        Ok(
            "ActionButton::TalkDialog type_info node",
        ),
    ),
    (
        "__tiQ212ActionButton11TalkMission",
        Ok(
            "ActionButton::TalkMission type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z22AnimCollisionEntityDSG",
        Ok(
            "radLoadInventory::SafeCast<AnimCollisionEntityDSG> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z12StatePropDSG",
        Ok(
            "radLoadInventory::SafeCast<StatePropDSG> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z15CarStartLocator",
        Ok(
            "radLoadInventory::SafeCast<CarStartLocator> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z18ActionEventLocator",
        Ok(
            "radLoadInventory::SafeCast<ActionEventLocator> type_info node",
        ),
    ),
    (
        "__ti6Action",
        Ok(
            "Action type_info node",
        ),
    ),
    (
        "__ti13radLoadObject",
        Ok(
            "radLoadObject type_info node",
        ),
    ),
    (
        "__ti9tDrawable",
        Ok(
            "tDrawable type_info node",
        ),
    ),
    (
        "__ti10SpawnPoint",
        Ok(
            "SpawnPoint type_info node",
        ),
    ),
    (
        "__ti12ActorManager",
        Ok(
            "ActorManager type_info node",
        ),
    ),
    (
        "__ti5Actor",
        Ok(
            "Actor type_info node",
        ),
    ),
    (
        "__ti11FlyingActor",
        Ok(
            "FlyingActor type_info node",
        ),
    ),
    (
        "__ti10Projectile",
        Ok(
            "Projectile type_info node",
        ),
    ),
    (
        "__ti15AttackBehaviour",
        Ok(
            "AttackBehaviour type_info node",
        ),
    ),
    (
        "__ti16EvasionBehaviour",
        Ok(
            "EvasionBehaviour type_info node",
        ),
    ),
    (
        "__ti12UFOBehaviour",
        Ok(
            "UFOBehaviour type_info node",
        ),
    ),
    (
        "__ti18UFOAttackBehaviour",
        Ok(
            "UFOAttackBehaviour type_info node",
        ),
    ),
    (
        "__ti19AttractionBehaviour",
        Ok(
            "AttractionBehaviour type_info node",
        ),
    ),
    (
        "__ti15UFOBeamAlwaysOn",
        Ok(
            "UFOBeamAlwaysOn type_info node",
        ),
    ),
    (
        "__ti9stringbuf",
        Ok(
            "stringbuf type_info node",
        ),
    ),
    (
        "__ti8ActorDSG",
        Ok(
            "ActorDSG type_info node",
        ),
    ),
    (
        "__ti18ActorAnimationWasp",
        Ok(
            "ActorAnimationWasp type_info node",
        ),
    ),
    (
        "__ti12WingAnimator",
        Ok(
            "WingAnimator type_info node",
        ),
    ),
    (
        "__ti17ActorAnimationUFO",
        Ok(
            "ActorAnimationUFO type_info node",
        ),
    ),
    (
        "__ti13ProjectileDSG",
        Ok(
            "ProjectileDSG type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z7Locator",
        Ok(
            "radLoadInventory::SafeCast<Locator> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z14CStatePropData",
        Ok(
            "radLoadInventory::SafeCast<CStatePropData> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z9tDrawable",
        Ok(
            "radLoadInventory::SafeCast<tDrawable> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z12EventLocator",
        Ok(
            "radLoadInventory::SafeCast<EventLocator> type_info node",
        ),
    ),
    (
        "__ti9streambuf",
        Ok(
            "streambuf type_info node",
        ),
    ),
    (
        "__ti14TriggerLocator",
        Ok(
            "TriggerLocator type_info node",
        ),
    ),
    (
        "__ti12StatePropDSG",
        Ok(
            "StatePropDSG type_info node",
        ),
    ),
    (
        "__ti4Task",
        Ok(
            "Task type_info node",
        ),
    ),
    (
        "__ti11SlaveAction",
        Ok(
            "SlaveAction type_info node",
        ),
    ),
    (
        "__ti22WalkerLocomotionAction",
        Ok(
            "WalkerLocomotionAction type_info node",
        ),
    ),
    (
        "__ti11InCarAction",
        Ok(
            "InCarAction type_info node",
        ),
    ),
    (
        "__ti19HoldAnimationAction",
        Ok(
            "HoldAnimationAction type_info node",
        ),
    ),
    (
        "__ti11SteerAction",
        Ok(
            "SteerAction type_info node",
        ),
    ),
    (
        "__ti13ReverseAction",
        Ok(
            "ReverseAction type_info node",
        ),
    ),
    (
        "__ti11AccelAction",
        Ok(
            "AccelAction type_info node",
        ),
    ),
    (
        "__ti11DecelAction",
        Ok(
            "DecelAction type_info node",
        ),
    ),
    (
        "__ti10JumpAction",
        Ok(
            "JumpAction type_info node",
        ),
    ),
    (
        "__ti11DodgeAction",
        Ok(
            "DodgeAction type_info node",
        ),
    ),
    (
        "__ti12CringeAction",
        Ok(
            "CringeAction type_info node",
        ),
    ),
    (
        "__ti11FlailAction",
        Ok(
            "FlailAction type_info node",
        ),
    ),
    (
        "__ti11GetUpAction",
        Ok(
            "GetUpAction type_info node",
        ),
    ),
    (
        "__ti19PlayAnimationAction",
        Ok(
            "PlayAnimationAction type_info node",
        ),
    ),
    (
        "__ti23PlayIdleAnimationAction",
        Ok(
            "PlayIdleAnimationAction type_info node",
        ),
    ),
    (
        "__ti13CarDoorAction",
        Ok(
            "CarDoorAction type_info node",
        ),
    ),
    (
        "__ti18ReleaseDoorsAction",
        Ok(
            "ReleaseDoorsAction type_info node",
        ),
    ),
    (
        "__ti6Arrive",
        Ok(
            "Arrive type_info node",
        ),
    ),
    (
        "__ti6Orient",
        Ok(
            "Orient type_info node",
        ),
    ),
    (
        "__ti8Position",
        Ok(
            "Position type_info node",
        ),
    ),
    (
        "__ti10GroundSnap",
        Ok(
            "GroundSnap type_info node",
        ),
    ),
    (
        "__ti16ChangeLocomotion",
        Ok(
            "ChangeLocomotion type_info node",
        ),
    ),
    (
        "__ti24ChangeNPCControllerState",
        Ok(
            "ChangeNPCControllerState type_info node",
        ),
    ),
    (
        "__ti10KickAction",
        Ok(
            "KickAction type_info node",
        ),
    ),
    (
        "__ti10SurfAction",
        Ok(
            "SurfAction type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ26choreo9Animation",
        Ok(
            "radLoadInventory::SafeCast<choreo::Animation> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ26choreo10Locomotion",
        Ok(
            "radLoadInventory::SafeCast<choreo::Locomotion> type_info node",
        ),
    ),
    (
        "__ti9VehicleAI",
        Ok(
            "VehicleAI type_info node",
        ),
    ),
    (
        "__ti7ChaseAI",
        Ok(
            "ChaseAI type_info node",
        ),
    ),
    (
        "__ti10WaypointAI",
        Ok(
            "WaypointAI type_info node",
        ),
    ),
    (
        "__ti9TrafficAI",
        Ok(
            "TrafficAI type_info node",
        ),
    ),
    (
        "__ti19AiVehicleController",
        Ok(
            "AiVehicleController type_info node",
        ),
    ),
    (
        "__ti9ATCLoader",
        Ok(
            "ATCLoader type_info node",
        ),
    ),
    (
        "__ti17radLoadDataLoader",
        Ok(
            "radLoadDataLoader type_info node",
        ),
    ),
    (
        "__ti19tSimpleChunkHandler",
        Ok(
            "tSimpleChunkHandler type_info node",
        ),
    ),
    (
        "__ti13SineCosShaker",
        Ok(
            "SineCosShaker type_info node",
        ),
    ),
    (
        "__ti8SuperCam",
        Ok(
            "SuperCam type_info node",
        ),
    ),
    (
        "__ti11AnimatedCam",
        Ok(
            "AnimatedCam type_info node",
        ),
    ),
    (
        "__ti15SuperCamCentral",
        Ok(
            "SuperCamCentral type_info node",
        ),
    ),
    (
        "__ti9BumperCam",
        Ok(
            "BumperCam type_info node",
        ),
    ),
    (
        "__ti8ChaseCam",
        Ok(
            "ChaseCam type_info node",
        ),
    ),
    (
        "__ti15ConversationCam",
        Ok(
            "ConversationCam type_info node",
        ),
    ),
    (
        "__ti8DebugCam",
        Ok(
            "DebugCam type_info node",
        ),
    ),
    (
        "__ti9FollowCam",
        Ok(
            "FollowCam type_info node",
        ),
    ),
    (
        "__ti18SuperCamController",
        Ok(
            "SuperCamController type_info node",
        ),
    ),
    (
        "__ti7KullCam",
        Ok(
            "KullCam type_info node",
        ),
    ),
    (
        "__ti19RelativeAnimatedCam",
        Ok(
            "RelativeAnimatedCam type_info node",
        ),
    ),
    (
        "__ti7RailCam",
        Ok(
            "RailCam type_info node",
        ),
    ),
    (
        "__ti22WrecklessEventListener",
        Ok(
            "WrecklessEventListener type_info node",
        ),
    ),
    (
        "__ti12WrecklessCam",
        Ok(
            "WrecklessCam type_info node",
        ),
    ),
    (
        "__ti10TrackerCam",
        Ok(
            "TrackerCam type_info node",
        ),
    ),
    (
        "__ti9WalkerCam",
        Ok(
            "WalkerCam type_info node",
        ),
    ),
    (
        "__ti18WalkerCamDataChunk",
        Ok(
            "WalkerCamDataChunk type_info node",
        ),
    ),
    (
        "__ti9StaticCam",
        Ok(
            "StaticCam type_info node",
        ),
    ),
    (
        "__ti10ReverseCam",
        Ok(
            "ReverseCam type_info node",
        ),
    ),
    (
        "__ti15SurveillanceCam",
        Ok(
            "SurveillanceCam type_info node",
        ),
    ),
    (
        "__ti14SuperSprintCam",
        Ok(
            "SuperSprintCam type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z7tCamera",
        Ok(
            "radLoadInventory::SafeCast<tCamera> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z16tMultiController",
        Ok(
            "radLoadInventory::SafeCast<tMultiController> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z18WalkerCamDataChunk",
        Ok(
            "radLoadInventory::SafeCast<WalkerCamDataChunk> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z13tVectorCamera",
        Ok(
            "radLoadInventory::SafeCast<tVectorCamera> type_info node",
        ),
    ),
    (
        "__ti8Mappable",
        Ok(
            "Mappable type_info node",
        ),
    ),
    (
        "__ti7tEntity",
        Ok(
            "tEntity type_info node",
        ),
    ),
    (
        "__ti9BonusCard",
        Ok(
            "BonusCard type_info node",
        ),
    ),
    (
        "__ti11CardGallery",
        Ok(
            "CardGallery type_info node",
        ),
    ),
    (
        "__ti13CollectorCard",
        Ok(
            "CollectorCard type_info node",
        ),
    ),
    (
        "__ti17CheatInputHandler",
        Ok(
            "CheatInputHandler type_info node",
        ),
    ),
    (
        "__ti7Console",
        Ok(
            "Console type_info node",
        ),
    ),
    (
        "__ti20DebugConsoleCallback",
        Ok(
            "DebugConsoleCallback type_info node",
        ),
    ),
    (
        "__ti7Context",
        Ok(
            "Context type_info node",
        ),
    ),
    (
        "__ti13BootupContext",
        Ok(
            "BootupContext type_info node",
        ),
    ),
    (
        "__ti12EntryContext",
        Ok(
            "EntryContext type_info node",
        ),
    ),
    (
        "__ti12PauseContext",
        Ok(
            "PauseContext type_info node",
        ),
    ),
    (
        "__ti11ExitContext",
        Ok(
            "ExitContext type_info node",
        ),
    ),
    (
        "__ti15FrontEndContext",
        Ok(
            "FrontEndContext type_info node",
        ),
    ),
    (
        "__ti14PlayingContext",
        Ok(
            "PlayingContext type_info node",
        ),
    ),
    (
        "__ti14LoadingContext",
        Ok(
            "LoadingContext type_info node",
        ),
    ),
    (
        "__ti22LoadingGameplayContext",
        Ok(
            "LoadingGameplayContext type_info node",
        ),
    ),
    (
        "__ti9ComedyCam",
        Ok(
            "ComedyCam type_info node",
        ),
    ),
    (
        "__ti15GameplayContext",
        Ok(
            "GameplayContext type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z11tLightGroup",
        Ok(
            "radLoadInventory::SafeCast<tLightGroup> type_info node",
        ),
    ),
    (
        "__ti18LoadingDemoContext",
        Ok(
            "LoadingDemoContext type_info node",
        ),
    ),
    (
        "__ti11DemoContext",
        Ok(
            "DemoContext type_info node",
        ),
    ),
    (
        "__ti15GameDataManager",
        Ok(
            "GameDataManager type_info node",
        ),
    ),
    (
        "__ti26IRadFileCompletionCallback",
        Ok(
            "IRadFileCompletionCallback type_info node",
        ),
    ),
    (
        "__ti12SaveGameInfo",
        Ok(
            "SaveGameInfo type_info node",
        ),
    ),
    (
        "__ti17MemoryCardManager",
        Ok(
            "MemoryCardManager type_info node",
        ),
    ),
    (
        "__ti27IRadDriveCompletionCallback",
        Ok(
            "IRadDriveCompletionCallback type_info node",
        ),
    ),
    (
        "__ti8GameFlow",
        Ok(
            "GameFlow type_info node",
        ),
    ),
    (
        "__ti14SteeringSpring",
        Ok(
            "SteeringSpring type_info node",
        ),
    ),
    (
        "__ti10BaseDamper",
        Ok(
            "BaseDamper type_info node",
        ),
    ),
    (
        "__ti14ConstantEffect",
        Ok(
            "ConstantEffect type_info node",
        ),
    ),
    (
        "__ti11WheelRumble",
        Ok(
            "WheelRumble type_info node",
        ),
    ),
    (
        "__ti14UserController",
        Ok(
            "UserController type_info node",
        ),
    ),
    (
        "__ti12InputManager",
        Ok(
            "InputManager type_info node",
        ),
    ),
    (
        "__ti15InteriorManager",
        Ok(
            "InteriorManager type_info node",
        ),
    ),
    (
        "__ti11GagDrawable",
        Ok(
            "GagDrawable type_info node",
        ),
    ),
    (
        "__ti3Gag",
        Ok(
            "Gag type_info node",
        ),
    ),
    (
        "__ti12InteriorExit",
        Ok(
            "InteriorExit type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z16tFrameController",
        Ok(
            "radLoadInventory::SafeCast<tFrameController> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z18DirectionalLocator",
        Ok(
            "radLoadInventory::SafeCast<DirectionalLocator> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ23sim15CollisionObject",
        Ok(
            "radLoadInventory::SafeCast<sim::CollisionObject> type_info node",
        ),
    ),
    (
        "__ti11DynaPhysDSG",
        Ok(
            "DynaPhysDSG type_info node",
        ),
    ),
    (
        "__tiQ212tLoadRequest8Callback",
        Ok(
            "tLoadRequest::Callback type_info node",
        ),
    ),
    (
        "__ti15radLoadCallback",
        Ok(
            "radLoadCallback type_info node",
        ),
    ),
    (
        "__ti16CameraDataLoader",
        Ok(
            "CameraDataLoader type_info node",
        ),
    ),
    (
        "__ti14LoadingManager",
        Ok(
            "LoadingManager type_info node",
        ),
    ),
    (
        "__ti17CementFileHandler",
        Ok(
            "CementFileHandler type_info node",
        ),
    ),
    (
        "__ti35IRadCementLibraryCompletionCallback",
        Ok(
            "IRadCementLibraryCompletionCallback type_info node",
        ),
    ),
    (
        "__ti17ChoreoFileHandler",
        Ok(
            "ChoreoFileHandler type_info node",
        ),
    ),
    (
        "__ti18ConsoleFileHandler",
        Ok(
            "ConsoleFileHandler type_info node",
        ),
    ),
    (
        "__ti14P3DFileHandler",
        Ok(
            "P3DFileHandler type_info node",
        ),
    ),
    (
        "__ti15IconFileHandler",
        Ok(
            "IconFileHandler type_info node",
        ),
    ),
    (
        "__ti18ScroobyFileHandler",
        Ok(
            "ScroobyFileHandler type_info node",
        ),
    ),
    (
        "__ti16SoundFileHandler",
        Ok(
            "SoundFileHandler type_info node",
        ),
    ),
    (
        "__ti18IntersectionLoader",
        Ok(
            "IntersectionLoader type_info node",
        ),
    ),
    (
        "__ti13LocatorLoader",
        Ok(
            "LocatorLoader type_info node",
        ),
    ),
    (
        "__ti15PedGroupLocator",
        Ok(
            "PedGroupLocator type_info node",
        ),
    ),
    (
        "__ti21RoadDataSegmentLoader",
        Ok(
            "RoadDataSegmentLoader type_info node",
        ),
    ),
    (
        "__ti10RoadLoader",
        Ok(
            "RoadLoader type_info node",
        ),
    ),
    (
        "__ti10PathLoader",
        Ok(
            "PathLoader type_info node",
        ),
    ),
    (
        "__ti13tChunkHandler",
        Ok(
            "tChunkHandler type_info node",
        ),
    ),
    (
        "__ti12EventLocator",
        Ok(
            "EventLocator type_info node",
        ),
    ),
    (
        "__ti11PS2Platform",
        Ok(
            "PS2Platform type_info node",
        ),
    ),
    (
        "__ti8Platform",
        Ok(
            "Platform type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z12tTextureFont",
        Ok(
            "radLoadInventory::SafeCast<tTextureFont> type_info node",
        ),
    ),
    (
        "__ti19HeapActivityTracker",
        Ok(
            "HeapActivityTracker type_info node",
        ),
    ),
    (
        "__ti11HeapManager",
        Ok(
            "HeapManager type_info node",
        ),
    ),
    (
        "__ti7Locator",
        Ok(
            "Locator type_info node",
        ),
    ),
    (
        "__ti18ActionEventLocator",
        Ok(
            "ActionEventLocator type_info node",
        ),
    ),
    (
        "__ti15CarStartLocator",
        Ok(
            "CarStartLocator type_info node",
        ),
    ),
    (
        "__ti18DirectionalLocator",
        Ok(
            "DirectionalLocator type_info node",
        ),
    ),
    (
        "__ti10FOVLocator",
        Ok(
            "FOVLocator type_info node",
        ),
    ),
    (
        "__ti23InteriorEntranceLocator",
        Ok(
            "InteriorEntranceLocator type_info node",
        ),
    ),
    (
        "__ti16OcclusionLocator",
        Ok(
            "OcclusionLocator type_info node",
        ),
    ),
    (
        "__ti13TriggerVolume",
        Ok(
            "TriggerVolume type_info node",
        ),
    ),
    (
        "__ti17RectTriggerVolume",
        Ok(
            "RectTriggerVolume type_info node",
        ),
    ),
    (
        "__ti13ScriptLocator",
        Ok(
            "ScriptLocator type_info node",
        ),
    ),
    (
        "__ti19SphereTriggerVolume",
        Ok(
            "SphereTriggerVolume type_info node",
        ),
    ),
    (
        "__ti13SplineLocator",
        Ok(
            "SplineLocator type_info node",
        ),
    ),
    (
        "__ti20TriggerVolumeTracker",
        Ok(
            "TriggerVolumeTracker type_info node",
        ),
    ),
    (
        "__ti16ZoneEventLocator",
        Ok(
            "ZoneEventLocator type_info node",
        ),
    ),
    (
        "__ti16StaticCamLocator",
        Ok(
            "StaticCamLocator type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z13TriggerVolume",
        Ok(
            "radLoadInventory::SafeCast<TriggerVolume> type_info node",
        ),
    ),
    (
        "__ti10IEntityDSG",
        Ok(
            "IEntityDSG type_info node",
        ),
    ),
    (
        "__ti12MissionStage",
        Ok(
            "MissionStage type_info node",
        ),
    ),
    (
        "__ti7Mission",
        Ok(
            "Mission type_info node",
        ),
    ),
    (
        "__ti16BonusMissionInfo",
        Ok(
            "BonusMissionInfo type_info node",
        ),
    ),
    (
        "__ti15GameplayManager",
        Ok(
            "GameplayManager type_info node",
        ),
    ),
    (
        "__ti14MissionManager",
        Ok(
            "MissionManager type_info node",
        ),
    ),
    (
        "__ti19MissionScriptLoader",
        Ok(
            "MissionScriptLoader type_info node",
        ),
    ),
    (
        "__tiQ212AnimatedIcon11AnimIconDSG",
        Ok(
            "AnimatedIcon::AnimIconDSG type_info node",
        ),
    ),
    (
        "__ti20StatePropCollectible",
        Ok(
            "StatePropCollectible type_info node",
        ),
    ),
    (
        "__ti22NoDamageBonusObjective",
        Ok(
            "NoDamageBonusObjective type_info node",
        ),
    ),
    (
        "__ti19NoCopBonusObjective",
        Ok(
            "NoCopBonusObjective type_info node",
        ),
    ),
    (
        "__ti24TimeRemainBonusObjective",
        Ok(
            "TimeRemainBonusObjective type_info node",
        ),
    ),
    (
        "__ti26RacePositionBonusObjective",
        Ok(
            "RacePositionBonusObjective type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z8tTexture",
        Ok(
            "radLoadInventory::SafeCast<tTexture> type_info node",
        ),
    ),
    (
        "__ti17InstStatEntityDSG",
        Ok(
            "InstStatEntityDSG type_info node",
        ),
    ),
    (
        "__ti21CharacterSheetManager",
        Ok(
            "CharacterSheetManager type_info node",
        ),
    ),
    (
        "__ti11Merchandise",
        Ok(
            "Merchandise type_info node",
        ),
    ),
    (
        "__ti14RewardsManager",
        Ok(
            "RewardsManager type_info node",
        ),
    ),
    (
        "__ti16MissionCondition",
        Ok(
            "MissionCondition type_info node",
        ),
    ),
    (
        "__ti16VehicleCondition",
        Ok(
            "VehicleCondition type_info node",
        ),
    ),
    (
        "__ti15DamageCondition",
        Ok(
            "DamageCondition type_info node",
        ),
    ),
    (
        "__ti15FollowCondition",
        Ok(
            "FollowCondition type_info node",
        ),
    ),
    (
        "__ti22LeaveInteriorCondition",
        Ok(
            "LeaveInteriorCondition type_info node",
        ),
    ),
    (
        "__ti20OutOfBoundsCondition",
        Ok(
            "OutOfBoundsCondition type_info node",
        ),
    ),
    (
        "__ti13RaceCondition",
        Ok(
            "RaceCondition type_info node",
        ),
    ),
    (
        "__ti16TimeOutCondition",
        Ok(
            "TimeOutCondition type_info node",
        ),
    ),
    (
        "__ti17PositionCondition",
        Ok(
            "PositionCondition type_info node",
        ),
    ),
    (
        "__ti24VehicleCarryingStateProp",
        Ok(
            "VehicleCarryingStateProp type_info node",
        ),
    ),
    (
        "__ti20GetOutOfCarCondition",
        Ok(
            "GetOutOfCarCondition type_info node",
        ),
    ),
    (
        "__ti20NotAbductedCondition",
        Ok(
            "NotAbductedCondition type_info node",
        ),
    ),
    (
        "__ti19KeepBarrelCondition",
        Ok(
            "KeepBarrelCondition type_info node",
        ),
    ),
    (
        "__ti16MissionObjective",
        Ok(
            "MissionObjective type_info node",
        ),
    ),
    (
        "__ti20CollectibleObjective",
        Ok(
            "CollectibleObjective type_info node",
        ),
    ),
    (
        "__ti17DeliveryObjective",
        Ok(
            "DeliveryObjective type_info node",
        ),
    ),
    (
        "__ti16DestroyObjective",
        Ok(
            "DestroyObjective type_info node",
        ),
    ),
    (
        "__ti20DestroyBossObjective",
        Ok(
            "DestroyBossObjective type_info node",
        ),
    ),
    (
        "__ti17DialogueObjective",
        Ok(
            "DialogueObjective type_info node",
        ),
    ),
    (
        "__ti15FollowObjective",
        Ok(
            "FollowObjective type_info node",
        ),
    ),
    (
        "__ti14GetInObjective",
        Ok(
            "GetInObjective type_info node",
        ),
    ),
    (
        "__ti13GoToObjective",
        Ok(
            "GoToObjective type_info node",
        ),
    ),
    (
        "__ti13LoseObjective",
        Ok(
            "LoseObjective type_info node",
        ),
    ),
    (
        "__ti13RaceObjective",
        Ok(
            "RaceObjective type_info node",
        ),
    ),
    (
        "__ti15TalkToObjective",
        Ok(
            "TalkToObjective type_info node",
        ),
    ),
    (
        "__ti22CollectDumpedObjective",
        Ok(
            "CollectDumpedObjective type_info node",
        ),
    ),
    (
        "__ti19CollectionCondition",
        Ok(
            "CollectionCondition type_info node",
        ),
    ),
    (
        "__ti12FMVObjective",
        Ok(
            "FMVObjective type_info node",
        ),
    ),
    (
        "__ti17InteriorObjective",
        Ok(
            "InteriorObjective type_info node",
        ),
    ),
    (
        "__ti13CoinObjective",
        Ok(
            "CoinObjective type_info node",
        ),
    ),
    (
        "__tiQ220LoadVehicleObjective30LoadDisposableCarAsyncCallback",
        Ok(
            "LoadVehicleObjective::LoadDisposableCarAsyncCallback type_info node",
        ),
    ),
    (
        "__ti20LoadVehicleObjective",
        Ok(
            "LoadVehicleObjective type_info node",
        ),
    ),
    (
        "__ti19PickupItemObjective",
        Ok(
            "PickupItemObjective type_info node",
        ),
    ),
    (
        "__ti14TimerObjective",
        Ok(
            "TimerObjective type_info node",
        ),
    ),
    (
        "__ti15BuyCarObjective",
        Ok(
            "BuyCarObjective type_info node",
        ),
    ),
    (
        "__ti16BuySkinObjective",
        Ok(
            "BuySkinObjective type_info node",
        ),
    ),
    (
        "__ti18GoOutsideObjective",
        Ok(
            "GoOutsideObjective type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z16ZoneEventLocator",
        Ok(
            "radLoadInventory::SafeCast<ZoneEventLocator> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z20StatePropCollectible",
        Ok(
            "radLoadInventory::SafeCast<StatePropCollectible> type_info node",
        ),
    ),
    (
        "__ti15AnimationPlayer",
        Ok(
            "AnimationPlayer type_info node",
        ),
    ),
    (
        "__ti21SimpleAnimationPlayer",
        Ok(
            "SimpleAnimationPlayer type_info node",
        ),
    ),
    (
        "__ti12CameraPlayer",
        Ok(
            "CameraPlayer type_info node",
        ),
    ),
    (
        "__ti12MouthFlapper",
        Ok(
            "MouthFlapper type_info node",
        ),
    ),
    (
        "__ti9NISPlayer",
        Ok(
            "NISPlayer type_info node",
        ),
    ),
    (
        "__ti14PlayerDrawable",
        Ok(
            "PlayerDrawable type_info node",
        ),
    ),
    (
        "__ti16TransitionPlayer",
        Ok(
            "TransitionPlayer type_info node",
        ),
    ),
    (
        "__ti19PresentationOverlay",
        Ok(
            "PresentationOverlay type_info node",
        ),
    ),
    (
        "__ti19PresentationManager",
        Ok(
            "PresentationManager type_info node",
        ),
    ),
    (
        "__ti15TutorialManager",
        Ok(
            "TutorialManager type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z10tAnimation",
        Ok(
            "radLoadInventory::SafeCast<tAnimation> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ210Scenegraph10Scenegraph",
        Ok(
            "radLoadInventory::SafeCast<Scenegraph::Scenegraph> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z18tCompositeDrawable",
        Ok(
            "radLoadInventory::SafeCast<tCompositeDrawable> type_info node",
        ),
    ),
    (
        "__tiQ25poser10PoseDriver",
        Ok(
            "poser::PoseDriver type_info node",
        ),
    ),
    (
        "__ti9radObject",
        Ok(
            "radObject type_info node",
        ),
    ),
    (
        "__ti11radRefCount",
        Ok(
            "radRefCount type_info node",
        ),
    ),
    (
        "__ti9FMVPlayer",
        Ok(
            "FMVPlayer type_info node",
        ),
    ),
    (
        "__ti19IRadMovieRenderLoop",
        Ok(
            "IRadMovieRenderLoop type_info node",
        ),
    ),
    (
        "__ti19FMVUserInputHandler",
        Ok(
            "FMVUserInputHandler type_info node",
        ),
    ),
    (
        "_16CGuiScreenPrompt$s_responses",
        Ok(
            "CGuiScreenPrompt::s_responses",
        ),
    ),
    (
        "__ti14IRadMemoryHeap",
        Ok(
            "IRadMemoryHeap type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby15BoundedDrawable",
        Ok(
            "Scrooby::BoundedDrawable type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby14HasBoundingBox",
        Ok(
            "Scrooby::HasBoundingBox type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby4Text",
        Ok(
            "Scrooby::Text type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby6Sprite",
        Ok(
            "Scrooby::Sprite type_info node",
        ),
    ),
    (
        "__ti15GuiMenuItemText",
        Ok(
            "GuiMenuItemText type_info node",
        ),
    ),
    (
        "__ti17GuiMenuItemSprite",
        Ok(
            "GuiMenuItemSprite type_info node",
        ),
    ),
    (
        "__ti8CGuiMenu",
        Ok(
            "CGuiMenu type_info node",
        ),
    ),
    (
        "__ti10CGuiMenu2D",
        Ok(
            "CGuiMenu2D type_info node",
        ),
    ),
    (
        "__ti14CGuiMenuPrompt",
        Ok(
            "CGuiMenuPrompt type_info node",
        ),
    ),
    (
        "__ti10CGuiWindow",
        Ok(
            "CGuiWindow type_info node",
        ),
    ),
    (
        "__ti11CGuiManager",
        Ok(
            "CGuiManager type_info node",
        ),
    ),
    (
        "__ti10CGuiSystem",
        Ok(
            "CGuiSystem type_info node",
        ),
    ),
    (
        "__ti10CGuiScreen",
        Ok(
            "CGuiScreen type_info node",
        ),
    ),
    (
        "__ti17CGuiScreenMessage",
        Ok(
            "CGuiScreenMessage type_info node",
        ),
    ),
    (
        "__ti16CGuiScreenPrompt",
        Ok(
            "CGuiScreenPrompt type_info node",
        ),
    ),
    (
        "__ti20CGuiUserInputHandler",
        Ok(
            "CGuiUserInputHandler type_info node",
        ),
    ),
    (
        "__ti22CGuiScreenMemCardCheck",
        Ok(
            "CGuiScreenMemCardCheck type_info node",
        ),
    ),
    (
        "__ti18CGuiScreenLoadSave",
        Ok(
            "CGuiScreenLoadSave type_info node",
        ),
    ),
    (
        "__ti20CGuiScreenMemoryCard",
        Ok(
            "CGuiScreenMemoryCard type_info node",
        ),
    ),
    (
        "__ti19IRadMemoryAllocator",
        Ok(
            "IRadMemoryAllocator type_info node",
        ),
    ),
    (
        "__ti17CGuiManagerBootUp",
        Ok(
            "CGuiManagerBootUp type_info node",
        ),
    ),
    (
        "__ti20CGuiScreenBootupLoad",
        Ok(
            "CGuiScreenBootupLoad type_info node",
        ),
    ),
    (
        "__ti17CGuiScreenLicense",
        Ok(
            "CGuiScreenLicense type_info node",
        ),
    ),
    (
        "__ti18CGuiScreenLanguage",
        Ok(
            "CGuiScreenLanguage type_info node",
        ),
    ),
    (
        "__ti19CGuiManagerLanguage",
        Ok(
            "CGuiManagerLanguage type_info node",
        ),
    ),
    (
        "__ti18CGuiManagerBackEnd",
        Ok(
            "CGuiManagerBackEnd type_info node",
        ),
    ),
    (
        "__ti17CGuiScreenLoading",
        Ok(
            "CGuiScreenLoading type_info node",
        ),
    ),
    (
        "__ti19CGuiScreenLoadingFE",
        Ok(
            "CGuiScreenLoadingFE type_info node",
        ),
    ),
    (
        "__ti14CGuiScreenDemo",
        Ok(
            "CGuiScreenDemo type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z7tSprite",
        Ok(
            "radLoadInventory::SafeCast<tSprite> type_info node",
        ),
    ),
    (
        "_21CGuiScreenViewCredits$s_creditsOffsets",
        Ok(
            "CGuiScreenViewCredits::s_creditsOffsets",
        ),
    ),
    (
        "__ti19CGuiManagerFrontEnd",
        Ok(
            "CGuiManagerFrontEnd type_info node",
        ),
    ),
    (
        "__ti16CGuiScreenSplash",
        Ok(
            "CGuiScreenSplash type_info node",
        ),
    ),
    (
        "__ti18CGuiScreenMainMenu",
        Ok(
            "CGuiScreenMainMenu type_info node",
        ),
    ),
    (
        "__ti25CGuiScreenIntroTransition",
        Ok(
            "CGuiScreenIntroTransition type_info node",
        ),
    ),
    (
        "__ti18CGuiScreenLoadGame",
        Ok(
            "CGuiScreenLoadGame type_info node",
        ),
    ),
    (
        "__ti18CGuiScreenAutoLoad",
        Ok(
            "CGuiScreenAutoLoad type_info node",
        ),
    ),
    (
        "__ti19CGuiScreenScrapBook",
        Ok(
            "CGuiScreenScrapBook type_info node",
        ),
    ),
    (
        "__ti27CGuiScreenScrapBookContents",
        Ok(
            "CGuiScreenScrapBookContents type_info node",
        ),
    ),
    (
        "__ti24CGuiScreenScrapBookStats",
        Ok(
            "CGuiScreenScrapBookStats type_info node",
        ),
    ),
    (
        "__ti21CGuiScreenCardGallery",
        Ok(
            "CGuiScreenCardGallery type_info node",
        ),
    ),
    (
        "__ti24CGuiScreenMissionGallery",
        Ok(
            "CGuiScreenMissionGallery type_info node",
        ),
    ),
    (
        "__ti21CGuiScreenSkinGallery",
        Ok(
            "CGuiScreenSkinGallery type_info node",
        ),
    ),
    (
        "__ti24CGuiScreenVehicleGallery",
        Ok(
            "CGuiScreenVehicleGallery type_info node",
        ),
    ),
    (
        "__ti17CGuiScreenOptions",
        Ok(
            "CGuiScreenOptions type_info node",
        ),
    ),
    (
        "__ti20CGuiScreenController",
        Ok(
            "CGuiScreenController type_info node",
        ),
    ),
    (
        "__ti15CGuiScreenSound",
        Ok(
            "CGuiScreenSound type_info node",
        ),
    ),
    (
        "__ti21CGuiScreenViewCredits",
        Ok(
            "CGuiScreenViewCredits type_info node",
        ),
    ),
    (
        "__ti20CGuiScreenViewMovies",
        Ok(
            "CGuiScreenViewMovies type_info node",
        ),
    ),
    (
        "__ti19CGuiScreenPlayMovie",
        Ok(
            "CGuiScreenPlayMovie type_info node",
        ),
    ),
    (
        "__ti19CGuiManagerMiniGame",
        Ok(
            "CGuiManagerMiniGame type_info node",
        ),
    ),
    (
        "__ti18CGuiScreenMiniMenu",
        Ok(
            "CGuiScreenMiniMenu type_info node",
        ),
    ),
    (
        "__ti17CGuiScreenMiniHud",
        Ok(
            "CGuiScreenMiniHud type_info node",
        ),
    ),
    (
        "__ti19CGuiScreenMiniPause",
        Ok(
            "CGuiScreenMiniPause type_info node",
        ),
    ),
    (
        "__ti21CGuiScreenMiniSummary",
        Ok(
            "CGuiScreenMiniSummary type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX19AbortCurrentMission",
        Ok(
            "GuiSFX::AbortCurrentMission type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX8OpenIris",
        Ok(
            "GuiSFX::OpenIris type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX21RestartCurrentMission",
        Ok(
            "GuiSFX::RestartCurrentMission type_info node",
        ),
    ),
    (
        "__ti17CGuiManagerInGame",
        Ok(
            "CGuiManagerInGame type_info node",
        ),
    ),
    (
        "__ti18CGuiScreenMultiHud",
        Ok(
            "CGuiScreenMultiHud type_info node",
        ),
    ),
    (
        "__ti13CGuiScreenHud",
        Ok(
            "CGuiScreenHud type_info node",
        ),
    ),
    (
        "__ti15CGuiScreenPause",
        Ok(
            "CGuiScreenPause type_info node",
        ),
    ),
    (
        "__ti21CGuiScreenPauseSunday",
        Ok(
            "CGuiScreenPauseSunday type_info node",
        ),
    ),
    (
        "__ti22CGuiScreenPauseMission",
        Ok(
            "CGuiScreenPauseMission type_info node",
        ),
    ),
    (
        "__ti23CGuiScreenMissionSelect",
        Ok(
            "CGuiScreenMissionSelect type_info node",
        ),
    ),
    (
        "__ti22CGuiScreenPauseOptions",
        Ok(
            "CGuiScreenPauseOptions type_info node",
        ),
    ),
    (
        "__ti25CGuiScreenPauseController",
        Ok(
            "CGuiScreenPauseController type_info node",
        ),
    ),
    (
        "__ti20CGuiScreenPauseSound",
        Ok(
            "CGuiScreenPauseSound type_info node",
        ),
    ),
    (
        "__ti23CGuiScreenPauseSettings",
        Ok(
            "CGuiScreenPauseSettings type_info node",
        ),
    ),
    (
        "__ti21CGuiScreenMissionBase",
        Ok(
            "CGuiScreenMissionBase type_info node",
        ),
    ),
    (
        "__ti21CGuiScreenMissionLoad",
        Ok(
            "CGuiScreenMissionLoad type_info node",
        ),
    ),
    (
        "__ti21CGuiScreenMissionOver",
        Ok(
            "CGuiScreenMissionOver type_info node",
        ),
    ),
    (
        "__ti24CGuiScreenMissionSuccess",
        Ok(
            "CGuiScreenMissionSuccess type_info node",
        ),
    ),
    (
        "__ti20CGuiScreenLevelStats",
        Ok(
            "CGuiScreenLevelStats type_info node",
        ),
    ),
    (
        "__ti18CGuiScreenLevelEnd",
        Ok(
            "CGuiScreenLevelEnd type_info node",
        ),
    ),
    (
        "__ti19CGuiScreenViewCards",
        Ok(
            "CGuiScreenViewCards type_info node",
        ),
    ),
    (
        "__ti19CGuiScreenLetterBox",
        Ok(
            "CGuiScreenLetterBox type_info node",
        ),
    ),
    (
        "__ti18CGuiScreenIrisWipe",
        Ok(
            "CGuiScreenIrisWipe type_info node",
        ),
    ),
    (
        "__ti17IGuiScreenRewards",
        Ok(
            "IGuiScreenRewards type_info node",
        ),
    ),
    (
        "__ti20CGuiScreenPhoneBooth",
        Ok(
            "CGuiScreenPhoneBooth type_info node",
        ),
    ),
    (
        "__ti25CGuiScreenPurchaseRewards",
        Ok(
            "CGuiScreenPurchaseRewards type_info node",
        ),
    ),
    (
        "__ti18CGuiScreenSaveGame",
        Ok(
            "CGuiScreenSaveGame type_info node",
        ),
    ),
    (
        "__ti18CGuiScreenTutorial",
        Ok(
            "CGuiScreenTutorial type_info node",
        ),
    ),
    (
        "__ti24CGuiScreenCreditsPostFMV",
        Ok(
            "CGuiScreenCreditsPostFMV type_info node",
        ),
    ),
    (
        "__ti8ResetCar",
        Ok(
            "ResetCar type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z7tEntity",
        Ok(
            "radLoadInventory::SafeCast<tEntity> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z26tCameraAnimationController",
        Ok(
            "radLoadInventory::SafeCast<tCameraAnimationController> type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX10Chainable1",
        Ok(
            "GuiSFX::Chainable1 type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX9SendEvent",
        Ok(
            "GuiSFX::SendEvent type_info node",
        ),
    ),
    (
        "__ti16HudCardCollected",
        Ok(
            "HudCardCollected type_info node",
        ),
    ),
    (
        "__ti16HudCoinCollected",
        Ok(
            "HudCoinCollected type_info node",
        ),
    ),
    (
        "__ti18HudMissionProgress",
        Ok(
            "HudMissionProgress type_info node",
        ),
    ),
    (
        "__ti19HudMissionObjective",
        Ok(
            "HudMissionObjective type_info node",
        ),
    ),
    (
        "__ti12HudCountDown",
        Ok(
            "HudCountDown type_info node",
        ),
    ),
    (
        "__ti10HudHitNRun",
        Ok(
            "HudHitNRun type_info node",
        ),
    ),
    (
        "__ti16HudWaspDestroyed",
        Ok(
            "HudWaspDestroyed type_info node",
        ),
    ),
    (
        "__ti14HudItemDropped",
        Ok(
            "HudItemDropped type_info node",
        ),
    ),
    (
        "__ti9HudMapCam",
        Ok(
            "HudMapCam type_info node",
        ),
    ),
    (
        "__ti11ImageSlider",
        Ok(
            "ImageSlider type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX9Chainable",
        Ok(
            "GuiSFX::Chainable type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX10Chainable2",
        Ok(
            "GuiSFX::Chainable2 type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX10Chainable3",
        Ok(
            "GuiSFX::Chainable3 type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX9Junction2",
        Ok(
            "GuiSFX::Junction2 type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX9Junction3",
        Ok(
            "GuiSFX::Junction3 type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX5Dummy",
        Ok(
            "GuiSFX::Dummy type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX10GotoScreen",
        Ok(
            "GuiSFX::GotoScreen type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX4Hide",
        Ok(
            "GuiSFX::Hide type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX16InputStateChange",
        Ok(
            "GuiSFX::InputStateChange type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX12RecieveEvent",
        Ok(
            "GuiSFX::RecieveEvent type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX13SwitchContext",
        Ok(
            "GuiSFX::SwitchContext type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX11ColorChange",
        Ok(
            "GuiSFX::ColorChange type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX12IrisWipeOpen",
        Ok(
            "GuiSFX::IrisWipeOpen type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX13IrisWipeClose",
        Ok(
            "GuiSFX::IrisWipeClose type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX4Show",
        Ok(
            "GuiSFX::Show type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX5Pause",
        Ok(
            "GuiSFX::Pause type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX13PauseInFrames",
        Ok(
            "GuiSFX::PauseInFrames type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX9PauseGame",
        Ok(
            "GuiSFX::PauseGame type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX10ResumeGame",
        Ok(
            "GuiSFX::ResumeGame type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX11ImageCycler",
        Ok(
            "GuiSFX::ImageCycler type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX10PulseScale",
        Ok(
            "GuiSFX::PulseScale type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX4Spin",
        Ok(
            "GuiSFX::Spin type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX10Translator",
        Ok(
            "GuiSFX::Translator type_info node",
        ),
    ),
    (
        "__tiQ26GuiSFX21UnderdampedTranslator",
        Ok(
            "GuiSFX::UnderdampedTranslator type_info node",
        ),
    ),
    (
        "__ti17PresentationEvent",
        Ok(
            "PresentationEvent type_info node",
        ),
    ),
    (
        "__ti8FMVEvent",
        Ok(
            "FMVEvent type_info node",
        ),
    ),
    (
        "__ti8NISEvent",
        Ok(
            "NISEvent type_info node",
        ),
    ),
    (
        "__ti15TransitionEvent",
        Ok(
            "TransitionEvent type_info node",
        ),
    ),
    (
        "__ti6BoxPts",
        Ok(
            "BoxPts type_info node",
        ),
    ),
    (
        "__ti11HexahedronP",
        Ok(
            "HexahedronP type_info node",
        ),
    ),
    (
        "__ti11SpatialTree",
        Ok(
            "SpatialTree type_info node",
        ),
    ),
    (
        "__ti8SphereSP",
        Ok(
            "SphereSP type_info node",
        ),
    ),
    (
        "__ti10WorldScene",
        Ok(
            "WorldScene type_info node",
        ),
    ),
    (
        "__ti19CollisionAttributes",
        Ok(
            "CollisionAttributes type_info node",
        ),
    ),
    (
        "__ti18CollisionEntityDSG",
        Ok(
            "CollisionEntityDSG type_info node",
        ),
    ),
    (
        "__ti22AnimCollisionEntityDSG",
        Ok(
            "AnimCollisionEntityDSG type_info node",
        ),
    ),
    (
        "__ti13StaticPhysDSG",
        Ok(
            "StaticPhysDSG type_info node",
        ),
    ),
    (
        "__ti15InstDynaPhysDSG",
        Ok(
            "InstDynaPhysDSG type_info node",
        ),
    ),
    (
        "__ti15StaticEntityDSG",
        Ok(
            "StaticEntityDSG type_info node",
        ),
    ),
    (
        "__ti13AnimEntityDSG",
        Ok(
            "AnimEntityDSG type_info node",
        ),
    ),
    (
        "__ti12IntersectDSG",
        Ok(
            "IntersectDSG type_info node",
        ),
    ),
    (
        "__ti14FenceEntityDSG",
        Ok(
            "FenceEntityDSG type_info node",
        ),
    ),
    (
        "__ti18BreakableObjectDSG",
        Ok(
            "BreakableObjectDSG type_info node",
        ),
    ),
    (
        "__ti15InstStatPhysDSG",
        Ok(
            "InstStatPhysDSG type_info node",
        ),
    ),
    (
        "__ti12LensFlareDSG",
        Ok(
            "LensFlareDSG type_info node",
        ),
    ),
    (
        "__ti14WorldSphereDSG",
        Ok(
            "WorldSphereDSG type_info node",
        ),
    ),
    (
        "__ti19InstAnimDynaPhysDSG",
        Ok(
            "InstAnimDynaPhysDSG type_info node",
        ),
    ),
    (
        "__ti19AnimDynaPhysWrapper",
        Ok(
            "AnimDynaPhysWrapper type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ23sim13PhysicsObject",
        Ok(
            "radLoadInventory::SafeCast<sim::PhysicsObject> type_info node",
        ),
    ),
    (
        "__ti17BreakablesManager",
        Ok(
            "BreakablesManager type_info node",
        ),
    ),
    (
        "__ti8Skidmark",
        Ok(
            "Skidmark type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z7tShader",
        Ok(
            "radLoadInventory::SafeCast<tShader> type_info node",
        ),
    ),
    (
        "__ti21GeometryWrappedLoader",
        Ok(
            "GeometryWrappedLoader type_info node",
        ),
    ),
    (
        "__ti18StaticEntityLoader",
        Ok(
            "StaticEntityLoader type_info node",
        ),
    ),
    (
        "__ti16StaticPhysLoader",
        Ok(
            "StaticPhysLoader type_info node",
        ),
    ),
    (
        "__ti13TreeDSGLoader",
        Ok(
            "TreeDSGLoader type_info node",
        ),
    ),
    (
        "__ti11FenceLoader",
        Ok(
            "FenceLoader type_info node",
        ),
    ),
    (
        "__ti15IntersectLoader",
        Ok(
            "IntersectLoader type_info node",
        ),
    ),
    (
        "__ti14AnimCollLoader",
        Ok(
            "AnimCollLoader type_info node",
        ),
    ),
    (
        "__ti13AnimDSGLoader",
        Ok(
            "AnimDSGLoader type_info node",
        ),
    ),
    (
        "__ti14DynaPhysLoader",
        Ok(
            "DynaPhysLoader type_info node",
        ),
    ),
    (
        "__ti18InstStatPhysLoader",
        Ok(
            "InstStatPhysLoader type_info node",
        ),
    ),
    (
        "__ti20InstStatEntityLoader",
        Ok(
            "InstStatEntityLoader type_info node",
        ),
    ),
    (
        "__ti17WorldSphereLoader",
        Ok(
            "WorldSphereLoader type_info node",
        ),
    ),
    (
        "__ti18AnimDynaPhysLoader",
        Ok(
            "AnimDynaPhysLoader type_info node",
        ),
    ),
    (
        "__ti25AnimDynaPhysWrapperLoader",
        Ok(
            "AnimDynaPhysWrapperLoader type_info node",
        ),
    ),
    (
        "__ti23AnimObjDSGWrapperLoader",
        Ok(
            "AnimObjDSGWrapperLoader type_info node",
        ),
    ),
    (
        "__ti22BillboardWrappedLoader",
        Ok(
            "BillboardWrappedLoader type_info node",
        ),
    ),
    (
        "__ti24InstParticleSystemLoader",
        Ok(
            "InstParticleSystemLoader type_info node",
        ),
    ),
    (
        "__ti21BreakableObjectLoader",
        Ok(
            "BreakableObjectLoader type_info node",
        ),
    ),
    (
        "__ti15LensFlareLoader",
        Ok(
            "LensFlareLoader type_info node",
        ),
    ),
    (
        "__ti15tGeometryLoader",
        Ok(
            "tGeometryLoader type_info node",
        ),
    ),
    (
        "__ti25tBillboardQuadGroupLoader",
        Ok(
            "tBillboardQuadGroupLoader type_info node",
        ),
    ),
    (
        "__ti17ParticleSystemDSG",
        Ok(
            "ParticleSystemDSG type_info node",
        ),
    ),
    (
        "__tit16tPtrDynamicArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrDynamicArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info node",
        ),
    ),
    (
        "__tit9tPtrArray1Zt16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrArray<tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> > type_info node",
        ),
    ),
    (
        "__tit9tPtrArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrArray<ParticleManager::ManagedParticleSystem *> type_info node",
        ),
    ),
    (
        "__tit16tPtrDynamicArray1ZPQ215ParticleManager21ManagedParticleSystem",
        Ok(
            "tPtrDynamicArray<ParticleManager::ManagedParticleSystem *> type_info node",
        ),
    ),
    (
        "__ti20AnimEntityDSGManager",
        Ok(
            "AnimEntityDSGManager type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z13AnimEntityDSG",
        Ok(
            "radLoadInventory::SafeCast<AnimEntityDSG> type_info node",
        ),
    ),
    (
        "__ti10RenderFlow",
        Ok(
            "RenderFlow type_info node",
        ),
    ),
    (
        "_24ParticleSystemRandomData$msIntRands",
        Ok(
            "ParticleSystemRandomData::msIntRands",
        ),
    ),
    (
        "_24ParticleSystemRandomData$msFloatRands",
        Ok(
            "ParticleSystemRandomData::msFloatRands",
        ),
    ),
    (
        "__ti19FrontEndRenderLayer",
        Ok(
            "FrontEndRenderLayer type_info node",
        ),
    ),
    (
        "__ti13RenderManager",
        Ok(
            "RenderManager type_info node",
        ),
    ),
    (
        "__ti16WorldRenderLayer",
        Ok(
            "WorldRenderLayer type_info node",
        ),
    ),
    (
        "__ti12TrafficLight",
        Ok(
            "TrafficLight type_info node",
        ),
    ),
    (
        "__ti8NWayStop",
        Ok(
            "NWayStop type_info node",
        ),
    ),
    (
        "__ti12CourtesyStop",
        Ok(
            "CourtesyStop type_info node",
        ),
    ),
    (
        "__ti4Lane",
        Ok(
            "Lane type_info node",
        ),
    ),
    (
        "__ti11RoadSegment",
        Ok(
            "RoadSegment type_info node",
        ),
    ),
    (
        "__ti12SoundCluster",
        Ok(
            "SoundCluster type_info node",
        ),
    ),
    (
        "__tiQ25Sound34IDaSoundDynaLoadCompletionCallback",
        Ok(
            "Sound::IDaSoundDynaLoadCompletionCallback type_info node",
        ),
    ),
    (
        "__ti11SoundLoader",
        Ok(
            "SoundLoader type_info node",
        ),
    ),
    (
        "__ti21PositionalSoundPlayer",
        Ok(
            "PositionalSoundPlayer type_info node",
        ),
    ),
    (
        "__ti12SoundManager",
        Ok(
            "SoundManager type_info node",
        ),
    ),
    (
        "__ti28SoundRenderingPlayerCallback",
        Ok(
            "SoundRenderingPlayerCallback type_info node",
        ),
    ),
    (
        "__tiQ25Sound19IDaSoundPlayerState",
        Ok(
            "Sound::IDaSoundPlayerState type_info node",
        ),
    ),
    (
        "__ti21VehicleSoundDebugPage",
        Ok(
            "VehicleSoundDebugPage type_info node",
        ),
    ),
    (
        "__ti18VehicleSoundPlayer",
        Ok(
            "VehicleSoundPlayer type_info node",
        ),
    ),
    (
        "__ti11SoundAvatar",
        Ok(
            "SoundAvatar type_info node",
        ),
    ),
    (
        "__ti18carSoundParameters",
        Ok(
            "carSoundParameters type_info node",
        ),
    ),
    (
        "__ti19ICarSoundParameters",
        Ok(
            "ICarSoundParameters type_info node",
        ),
    ),
    (
        "__ti17NormalEngineState",
        Ok(
            "NormalEngineState type_info node",
        ),
    ),
    (
        "__ti18UpshiftEngineState",
        Ok(
            "UpshiftEngineState type_info node",
        ),
    ),
    (
        "__ti20DownshiftEngineState",
        Ok(
            "DownshiftEngineState type_info node",
        ),
    ),
    (
        "__ti16InAirEngineState",
        Ok(
            "InAirEngineState type_info node",
        ),
    ),
    (
        "__ti18ReverseEngineState",
        Ok(
            "ReverseEngineState type_info node",
        ),
    ),
    (
        "__ti15IdleEngineState",
        Ok(
            "IdleEngineState type_info node",
        ),
    ),
    (
        "__ti15SkidEngineState",
        Ok(
            "SkidEngineState type_info node",
        ),
    ),
    (
        "__ti14PlayableDialog",
        Ok(
            "PlayableDialog type_info node",
        ),
    ),
    (
        "__ti12Conversation",
        Ok(
            "Conversation type_info node",
        ),
    ),
    (
        "__ti10DialogLine",
        Ok(
            "DialogLine type_info node",
        ),
    ),
    (
        "__ti20DialogSelectionGroup",
        Ok(
            "DialogSelectionGroup type_info node",
        ),
    ),
    (
        "__ti18DialogQueueElement",
        Ok(
            "DialogQueueElement type_info node",
        ),
    ),
    (
        "__ti20DialogSoundDebugPage",
        Ok(
            "DialogSoundDebugPage type_info node",
        ),
    ),
    (
        "__ti19DialogPriorityQueue",
        Ok(
            "DialogPriorityQueue type_info node",
        ),
    ),
    (
        "__ti17DialogCoordinator",
        Ok(
            "DialogCoordinator type_info node",
        ),
    ),
    (
        "__ti11MusicPlayer",
        Ok(
            "MusicPlayer type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ28radmusic27radload_composition_adapter",
        Ok(
            "radLoadInventory::SafeCast<radmusic::radload_composition_adapter> type_info node",
        ),
    ),
    (
        "__ti14NISPlayerGroup",
        Ok(
            "NISPlayerGroup type_info node",
        ),
    ),
    (
        "__ti14NISSoundPlayer",
        Ok(
            "NISSoundPlayer type_info node",
        ),
    ),
    (
        "__ti12SoundFXLogic",
        Ok(
            "SoundFXLogic type_info node",
        ),
    ),
    (
        "__ti20SoundFXFrontEndLogic",
        Ok(
            "SoundFXFrontEndLogic type_info node",
        ),
    ),
    (
        "__ti20SoundFXGameplayLogic",
        Ok(
            "SoundFXGameplayLogic type_info node",
        ),
    ),
    (
        "__ti17SoundFXPauseLogic",
        Ok(
            "SoundFXPauseLogic type_info node",
        ),
    ),
    (
        "__ti16ReverbController",
        Ok(
            "ReverbController type_info node",
        ),
    ),
    (
        "__ti19PS2ReverbController",
        Ok(
            "PS2ReverbController type_info node",
        ),
    ),
    (
        "__ti23positionalSoundSettings",
        Ok(
            "positionalSoundSettings type_info node",
        ),
    ),
    (
        "__ti24IPositionalSoundSettings",
        Ok(
            "IPositionalSoundSettings type_info node",
        ),
    ),
    (
        "__ti14reverbSettings",
        Ok(
            "reverbSettings type_info node",
        ),
    ),
    (
        "__ti15IReverbSettings",
        Ok(
            "IReverbSettings type_info node",
        ),
    ),
    (
        "_19daSoundResourceData$s_fileDescArray",
        Ok(
            "daSoundResourceData::s_fileDescArray",
        ),
    ),
    (
        "_Q25Sound12daSoundTuner$s_groupWirings",
        Ok(
            "Sound::daSoundTuner::s_groupWirings",
        ),
    ),
    (
        "__ti19daSoundResourceData",
        Ok(
            "daSoundResourceData type_info node",
        ),
    ),
    (
        "__ti16IDaSoundResource",
        Ok(
            "IDaSoundResource type_info node",
        ),
    ),
    (
        "__tiQ25Sound22daSoundResourceManager",
        Ok(
            "Sound::daSoundResourceManager type_info node",
        ),
    ),
    (
        "__tiQ25Sound21daSoundDynaLoadRegion",
        Ok(
            "Sound::daSoundDynaLoadRegion type_info node",
        ),
    ),
    (
        "__tiQ25Sound22daSoundDynaLoadManager",
        Ok(
            "Sound::daSoundDynaLoadManager type_info node",
        ),
    ),
    (
        "__tiQ25Sound24daSoundAllocatedResource",
        Ok(
            "Sound::daSoundAllocatedResource type_info node",
        ),
    ),
    (
        "__tiQ25Sound17daSoundPlayerBase",
        Ok(
            "Sound::daSoundPlayerBase type_info node",
        ),
    ),
    (
        "__tiQ25Sound23daSoundClipStreamPlayer",
        Ok(
            "Sound::daSoundClipStreamPlayer type_info node",
        ),
    ),
    (
        "__tiQ25Sound16MusicSoundPlayer",
        Ok(
            "Sound::MusicSoundPlayer type_info node",
        ),
    ),
    (
        "__tiQ25Sound24daSoundAsyncFadeCallback",
        Ok(
            "Sound::daSoundAsyncFadeCallback type_info node",
        ),
    ),
    (
        "__tiQ25Sound20daSoundPlayerManager",
        Ok(
            "Sound::daSoundPlayerManager type_info node",
        ),
    ),
    (
        "__tiQ25Sound17IDaSoundFadeState",
        Ok(
            "Sound::IDaSoundFadeState type_info node",
        ),
    ),
    (
        "__tiQ25Sound23daSoundRenderingManager",
        Ok(
            "Sound::daSoundRenderingManager type_info node",
        ),
    ),
    (
        "__ti5Fader",
        Ok(
            "Fader type_info node",
        ),
    ),
    (
        "__ti14TunerDebugPage",
        Ok(
            "TunerDebugPage type_info node",
        ),
    ),
    (
        "__tiQ25Sound12daSoundTuner",
        Ok(
            "Sound::daSoundTuner type_info node",
        ),
    ),
    (
        "__tiQ25Sound13IDaSoundTuner",
        Ok(
            "Sound::IDaSoundTuner type_info node",
        ),
    ),
    (
        "__tiQ25Sound14IDaSoundWiring",
        Ok(
            "Sound::IDaSoundWiring type_info node",
        ),
    ),
    (
        "__ti20IDaSoundResourceData",
        Ok(
            "IDaSoundResourceData type_info node",
        ),
    ),
    (
        "__ti14globalSettings",
        Ok(
            "globalSettings type_info node",
        ),
    ),
    (
        "__ti15IGlobalSettings",
        Ok(
            "IGlobalSettings type_info node",
        ),
    ),
    (
        "__ti28VehiclePositionalSoundPlayer",
        Ok(
            "VehiclePositionalSoundPlayer type_info node",
        ),
    ),
    (
        "__ti18TrafficSoundPlayer",
        Ok(
            "TrafficSoundPlayer type_info node",
        ),
    ),
    (
        "__ti20AIVehicleSoundPlayer",
        Ok(
            "AIVehicleSoundPlayer type_info node",
        ),
    ),
    (
        "__ti23AvatarVehiclePosnPlayer",
        Ok(
            "AvatarVehiclePosnPlayer type_info node",
        ),
    ),
    (
        "__ti11ActorPlayer",
        Ok(
            "ActorPlayer type_info node",
        ),
    ),
    (
        "__ti15WaspSoundPlayer",
        Ok(
            "WaspSoundPlayer type_info node",
        ),
    ),
    (
        "__ti19PlatformSoundPlayer",
        Ok(
            "PlatformSoundPlayer type_info node",
        ),
    ),
    (
        "__ti18AnimObjSoundPlayer",
        Ok(
            "AnimObjSoundPlayer type_info node",
        ),
    ),
    (
        "__ti18MovingSoundManager",
        Ok(
            "MovingSoundManager type_info node",
        ),
    ),
    (
        "__ti6Avatar",
        Ok(
            "Avatar type_info node",
        ),
    ),
    (
        "__ti14VehicleCentral",
        Ok(
            "VehicleCentral type_info node",
        ),
    ),
    (
        "__ti13AvatarManager",
        Ok(
            "AvatarManager type_info node",
        ),
    ),
    (
        "__ti14HitnRunManager",
        Ok(
            "HitnRunManager type_info node",
        ),
    ),
    (
        "__ti32WorldCollisionSolverAgentManager",
        Ok(
            "WorldCollisionSolverAgentManager type_info node",
        ),
    ),
    (
        "__ti11WorldObject",
        Ok(
            "WorldObject type_info node",
        ),
    ),
    (
        "__tiQ23sim20CollisionSolverAgent",
        Ok(
            "sim::CollisionSolverAgent type_info node",
        ),
    ),
    (
        "__ti11CoinManager",
        Ok(
            "CoinManager type_info node",
        ),
    ),
    (
        "__ti19CharacterController",
        Ok(
            "CharacterController type_info node",
        ),
    ),
    (
        "__ti13NPCController",
        Ok(
            "NPCController type_info node",
        ),
    ),
    (
        "__ti18PhysicalController",
        Ok(
            "PhysicalController type_info node",
        ),
    ),
    (
        "__ti33CameraRelativeCharacterController",
        Ok(
            "CameraRelativeCharacterController type_info node",
        ),
    ),
    (
        "__ti21AICharacterController",
        Ok(
            "AICharacterController type_info node",
        ),
    ),
    (
        "__ti9Character",
        Ok(
            "Character type_info node",
        ),
    ),
    (
        "__ti11NPCharacter",
        Ok(
            "NPCharacter type_info node",
        ),
    ),
    (
        "__ti16CharacterManager",
        Ok(
            "CharacterManager type_info node",
        ),
    ),
    (
        "__ti6Wander",
        Ok(
            "Wander type_info node",
        ),
    ),
    (
        "__ti17CharacterMappable",
        Ok(
            "CharacterMappable type_info node",
        ),
    ),
    (
        "__ti22BipedCharacterMappable",
        Ok(
            "BipedCharacterMappable type_info node",
        ),
    ),
    (
        "__ti22InCarCharacterMappable",
        Ok(
            "InCarCharacterMappable type_info node",
        ),
    ),
    (
        "__ti15CharacterTarget",
        Ok(
            "CharacterTarget type_info node",
        ),
    ),
    (
        "__ti21AmbientDialogueButton",
        Ok(
            "AmbientDialogueButton type_info node",
        ),
    ),
    (
        "__ti22AmbientDialogueTrigger",
        Ok(
            "AmbientDialogueTrigger type_info node",
        ),
    ),
    (
        "__ti45CameraRelativeCharacterControllerEventHandler",
        Ok(
            "CameraRelativeCharacterControllerEventHandler type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z13tDrawablePose",
        Ok(
            "radLoadInventory::SafeCast<tDrawablePose> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z9tSkeleton",
        Ok(
            "radLoadInventory::SafeCast<tSkeleton> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ26choreo4Bank",
        Ok(
            "radLoadInventory::SafeCast<choreo::Bank> type_info node",
        ),
    ),
    (
        "__ti7Vehicle",
        Ok(
            "Vehicle type_info node",
        ),
    ),
    (
        "__ti19TrafficBodyDrawable",
        Ok(
            "TrafficBodyDrawable type_info node",
        ),
    ),
    (
        "__tiQ23sim26PhysicsJointMatrixModifier",
        Ok(
            "sim::PhysicsJointMatrixModifier type_info node",
        ),
    ),
    (
        "__tiQ23sim28PhysicsJointInertialEffector",
        Ok(
            "sim::PhysicsJointInertialEffector type_info node",
        ),
    ),
    (
        "__ti17PhysicsLocomotion",
        Ok(
            "PhysicsLocomotion type_info node",
        ),
    ),
    (
        "__ti28RedBrickCollisionSolverAgent",
        Ok(
            "RedBrickCollisionSolverAgent type_info node",
        ),
    ),
    (
        "__ti25WorldCollisionSolverAgent",
        Ok(
            "WorldCollisionSolverAgent type_info node",
        ),
    ),
    (
        "__ti16RootMatrixDriver",
        Ok(
            "RootMatrixDriver type_info node",
        ),
    ),
    (
        "__ti21SuspensionJointDriver",
        Ok(
            "SuspensionJointDriver type_info node",
        ),
    ),
    (
        "__ti17TrafficLocomotion",
        Ok(
            "TrafficLocomotion type_info node",
        ),
    ),
    (
        "__ti20VehicleEventListener",
        Ok(
            "VehicleEventListener type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z19tBillboardQuadGroup",
        Ok(
            "radLoadInventory::SafeCast<tBillboardQuadGroup> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z17tEffectController",
        Ok(
            "radLoadInventory::SafeCast<tEffectController> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z24tPoseAnimationController",
        Ok(
            "radLoadInventory::SafeCast<tPoseAnimationController> type_info node",
        ),
    ),
    (
        "__ti17VehicleController",
        Ok(
            "VehicleController type_info node",
        ),
    ),
    (
        "__ti13VehicleWander",
        Ok(
            "VehicleWander type_info node",
        ),
    ),
    (
        "__ti22HumanVehicleController",
        Ok(
            "HumanVehicleController type_info node",
        ),
    ),
    (
        "__ti15VehicleMappable",
        Ok(
            "VehicleMappable type_info node",
        ),
    ),
    (
        "__ti14TrafficManager",
        Ok(
            "TrafficManager type_info node",
        ),
    ),
    (
        "__ti11PathSegment",
        Ok(
            "PathSegment type_info node",
        ),
    ),
    (
        "__ti10Pedestrian",
        Ok(
            "Pedestrian type_info node",
        ),
    ),
    (
        "__ti17PedestrianManager",
        Ok(
            "PedestrianManager type_info node",
        ),
    ),
    (
        "__ti12ChaseManager",
        Ok(
            "ChaseManager type_info node",
        ),
    ),
    (
        "__ti10CStateProp",
        Ok(
            "CStateProp type_info node",
        ),
    ),
    (
        "__ti14CStatePropData",
        Ok(
            "CStatePropData type_info node",
        ),
    ),
    (
        "__ti20CStatePropDataLoader",
        Ok(
            "CStatePropDataLoader type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z22tAnimatedObjectFactory",
        Ok(
            "radLoadInventory::SafeCast<tAnimatedObjectFactory> type_info node",
        ),
    ),
    (
        "__ti4Boss",
        Ok(
            "Boss type_info node",
        ),
    ),
    (
        "__ti3UFO",
        Ok(
            "UFO type_info node",
        ),
    ),
    (
        "__ti6Weapon",
        Ok(
            "Weapon type_info node",
        ),
    ),
    (
        "__ti11TractorBeam",
        Ok(
            "TractorBeam type_info node",
        ),
    ),
    (
        "__ti16ParkedCarManager",
        Ok(
            "ParkedCarManager type_info node",
        ),
    ),
    (
        "__ti25LoadingSuperSprintContext",
        Ok(
            "LoadingSuperSprintContext type_info node",
        ),
    ),
    (
        "__ti18SuperSprintContext",
        Ok(
            "SuperSprintContext type_info node",
        ),
    ),
    (
        "__ti20SuperSprintFEContext",
        Ok(
            "SuperSprintFEContext type_info node",
        ),
    ),
    (
        "__ti19SuperSprintDrawable",
        Ok(
            "SuperSprintDrawable type_info node",
        ),
    ),
    (
        "__ti18SuperSprintManager",
        Ok(
            "SuperSprintManager type_info node",
        ),
    ),
    (
        "__tiQ26choreo9Animation",
        Ok(
            "choreo::Animation type_info node",
        ),
    ),
    (
        "__tiQ26choreo19PuppetDriverFactory",
        Ok(
            "choreo::PuppetDriverFactory type_info node",
        ),
    ),
    (
        "__tiQ26choreo15AnimationDriver",
        Ok(
            "choreo::AnimationDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo12PuppetDriver",
        Ok(
            "choreo::PuppetDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo14AnimationFrame",
        Ok(
            "choreo::AnimationFrame type_info node",
        ),
    ),
    (
        "__tiQ26choreo19AnimationRootDriver",
        Ok(
            "choreo::AnimationRootDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo15RootBlendDriver",
        Ok(
            "choreo::RootBlendDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo20AnimationJointDriver",
        Ok(
            "choreo::AnimationJointDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo16JointBlendDriver",
        Ok(
            "choreo::JointBlendDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo19AnimationFootDriver",
        Ok(
            "choreo::AnimationFootDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo15FootBlendDriver",
        Ok(
            "choreo::FootBlendDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo6Driver",
        Ok(
            "choreo::Driver type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ26choreo9Partition",
        Ok(
            "radLoadInventory::SafeCast<choreo::Partition> type_info node",
        ),
    ),
    (
        "_Q26choreo4Bank$m_ScriptReadHandlers",
        Ok(
            "choreo::Bank::m_ScriptReadHandlers",
        ),
    ),
    (
        "__ti12tEntityTable",
        Ok(
            "tEntityTable type_info node",
        ),
    ),
    (
        "__tiQ36choreo4Bank11RawIterator",
        Ok(
            "choreo::Bank::RawIterator type_info node",
        ),
    ),
    (
        "__tiQ36choreo8BaseBank11RawIterator",
        Ok(
            "choreo::BaseBank::RawIterator type_info node",
        ),
    ),
    (
        "__tiQ26choreo4Bank",
        Ok(
            "choreo::Bank type_info node",
        ),
    ),
    (
        "__tiQ26choreo8BaseBank",
        Ok(
            "choreo::BaseBank type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ26choreo3Rig",
        Ok(
            "radLoadInventory::SafeCast<choreo::Rig> type_info node",
        ),
    ),
    (
        "__ti18radLoadHashedStore",
        Ok(
            "radLoadHashedStore type_info node",
        ),
    ),
    (
        "__tiQ26choreo9MultiBank",
        Ok(
            "choreo::MultiBank type_info node",
        ),
    ),
    (
        "__tiQ26choreo25P3DEntityStoreWrapperBank",
        Ok(
            "choreo::P3DEntityStoreWrapperBank type_info node",
        ),
    ),
    (
        "__tiQ36choreo23P3DInventoryWrapperBank11RawIterator",
        Ok(
            "choreo::P3DInventoryWrapperBank::RawIterator type_info node",
        ),
    ),
    (
        "__tiQ26choreo23P3DInventoryWrapperBank",
        Ok(
            "choreo::P3DInventoryWrapperBank type_info node",
        ),
    ),
    (
        "__tiQ26choreo6Engine",
        Ok(
            "choreo::Engine type_info node",
        ),
    ),
    (
        "__tiQ26choreo28FootBlenderEffectorSimTarget",
        Ok(
            "choreo::FootBlenderEffectorSimTarget type_info node",
        ),
    ),
    (
        "__tiQ26choreo30FootBlenderPoleVectorSimTarget",
        Ok(
            "choreo::FootBlenderPoleVectorSimTarget type_info node",
        ),
    ),
    (
        "__tiQ23sim9SimTarget",
        Ok(
            "sim::SimTarget type_info node",
        ),
    ),
    (
        "__tiQ26choreo11FootBlender",
        Ok(
            "choreo::FootBlender type_info node",
        ),
    ),
    (
        "__tiQ26choreo11FootPlanter",
        Ok(
            "choreo::FootPlanter type_info node",
        ),
    ),
    (
        "__tiQ26choreo12JointBlender",
        Ok(
            "choreo::JointBlender type_info node",
        ),
    ),
    (
        "__tiQ26choreo19ChoreoScriptHandler",
        Ok(
            "choreo::ChoreoScriptHandler type_info node",
        ),
    ),
    (
        "__tiQ26choreo18ChoreoChunkHandler",
        Ok(
            "choreo::ChoreoChunkHandler type_info node",
        ),
    ),
    (
        "__ti17radLoadFileLoader",
        Ok(
            "radLoadFileLoader type_info node",
        ),
    ),
    (
        "__ti12tFileHandler",
        Ok(
            "tFileHandler type_info node",
        ),
    ),
    (
        "__tiQ26choreo14LocomotionSlot",
        Ok(
            "choreo::LocomotionSlot type_info node",
        ),
    ),
    (
        "__tiQ26choreo10Locomotion",
        Ok(
            "choreo::Locomotion type_info node",
        ),
    ),
    (
        "__tiQ26choreo16LocomotionDriver",
        Ok(
            "choreo::LocomotionDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo20LocomotionRootDriver",
        Ok(
            "choreo::LocomotionRootDriver type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ26choreo10Transition",
        Ok(
            "radLoadInventory::SafeCast<choreo::Transition> type_info node",
        ),
    ),
    (
        "__tiQ26choreo9BlendSlot",
        Ok(
            "choreo::BlendSlot type_info node",
        ),
    ),
    (
        "__tiQ26choreo9Partition",
        Ok(
            "choreo::Partition type_info node",
        ),
    ),
    (
        "__tiQ26choreo18InclusivePartition",
        Ok(
            "choreo::InclusivePartition type_info node",
        ),
    ),
    (
        "__tiQ26choreo18ExclusivePartition",
        Ok(
            "choreo::ExclusivePartition type_info node",
        ),
    ),
    (
        "__tiQ26choreo14UnionPartition",
        Ok(
            "choreo::UnionPartition type_info node",
        ),
    ),
    (
        "__tiQ26choreo18IntersectPartition",
        Ok(
            "choreo::IntersectPartition type_info node",
        ),
    ),
    (
        "__tiQ26choreo17CompletePartition",
        Ok(
            "choreo::CompletePartition type_info node",
        ),
    ),
    (
        "__tiQ26choreo12LODPartition",
        Ok(
            "choreo::LODPartition type_info node",
        ),
    ),
    (
        "__tiQ26choreo6Puppet",
        Ok(
            "choreo::Puppet type_info node",
        ),
    ),
    (
        "__tiQ26choreo6Replay",
        Ok(
            "choreo::Replay type_info node",
        ),
    ),
    (
        "__tiQ26choreo12ReplayDriver",
        Ok(
            "choreo::ReplayDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo12ReplayBuffer",
        Ok(
            "choreo::ReplayBuffer type_info node",
        ),
    ),
    (
        "__tiQ26choreo20ReplayDriverInternal",
        Ok(
            "choreo::ReplayDriverInternal type_info node",
        ),
    ),
    (
        "__tiQ26choreo17ReplayBlendDriver",
        Ok(
            "choreo::ReplayBlendDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo13ReplayBlender",
        Ok(
            "choreo::ReplayBlender type_info node",
        ),
    ),
    (
        "__tiQ26choreo6RigLeg",
        Ok(
            "choreo::RigLeg type_info node",
        ),
    ),
    (
        "__tiQ26choreo3Rig",
        Ok(
            "choreo::Rig type_info node",
        ),
    ),
    (
        "__tiQ26choreo14RootController",
        Ok(
            "choreo::RootController type_info node",
        ),
    ),
    (
        "__tiQ26choreo22RootPositionController",
        Ok(
            "choreo::RootPositionController type_info node",
        ),
    ),
    (
        "__tiQ26choreo22RootRotationController",
        Ok(
            "choreo::RootRotationController type_info node",
        ),
    ),
    (
        "__tiQ26choreo23RootTransformController",
        Ok(
            "choreo::RootTransformController type_info node",
        ),
    ),
    (
        "__tiQ26choreo10RootDriver",
        Ok(
            "choreo::RootDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo18RootDriverInternal",
        Ok(
            "choreo::RootDriverInternal type_info node",
        ),
    ),
    (
        "__tiQ26choreo11RootBlender",
        Ok(
            "choreo::RootBlender type_info node",
        ),
    ),
    (
        "__tiQ26choreo15RootFixupDriver",
        Ok(
            "choreo::RootFixupDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo16StringFileReader",
        Ok(
            "choreo::StringFileReader type_info node",
        ),
    ),
    (
        "__tiQ26choreo10FileReader",
        Ok(
            "choreo::FileReader type_info node",
        ),
    ),
    (
        "__tiQ26choreo13P3DFileReader",
        Ok(
            "choreo::P3DFileReader type_info node",
        ),
    ),
    (
        "__tiQ26choreo13FTTFileReader",
        Ok(
            "choreo::FTTFileReader type_info node",
        ),
    ),
    (
        "__tiQ26choreo12ScriptReader",
        Ok(
            "choreo::ScriptReader type_info node",
        ),
    ),
    (
        "__tiQ26choreo21SynchronizationDriver",
        Ok(
            "choreo::SynchronizationDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo25SynchronizationRootDriver",
        Ok(
            "choreo::SynchronizationRootDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo10Transition",
        Ok(
            "choreo::Transition type_info node",
        ),
    ),
    (
        "__tiQ26choreo17BlendSlotFootInfo",
        Ok(
            "choreo::BlendSlotFootInfo type_info node",
        ),
    ),
    (
        "__tiQ26choreo5Blend",
        Ok(
            "choreo::Blend type_info node",
        ),
    ),
    (
        "__tiQ26choreo11BlendDriver",
        Ok(
            "choreo::BlendDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo10BlendPhase",
        Ok(
            "choreo::BlendPhase type_info node",
        ),
    ),
    (
        "__tiQ26choreo16BlendJointDriver",
        Ok(
            "choreo::BlendJointDriver type_info node",
        ),
    ),
    (
        "__tiQ26choreo15BlendFootDriver",
        Ok(
            "choreo::BlendFootDriver type_info node",
        ),
    ),
    (
        "__tiQ23simt5TList1ZPQ23sim15CollisionObject",
        Ok(
            "sim::TList<sim::CollisionObject *> type_info node",
        ),
    ),
    (
        "__tiQ23sim16CollisionManager",
        Ok(
            "sim::CollisionManager type_info node",
        ),
    ),
    (
        "__tiQ23sim15CollisionObject",
        Ok(
            "sim::CollisionObject type_info node",
        ),
    ),
    (
        "__tiQ23sim21CollisionObjectLoader",
        Ok(
            "sim::CollisionObjectLoader type_info node",
        ),
    ),
    (
        "__tiQ23sim15CollisionVolume",
        Ok(
            "sim::CollisionVolume type_info node",
        ),
    ),
    (
        "__tiQ23simt5TList1ZPQ23sim15CollisionVolume",
        Ok(
            "sim::TList<sim::CollisionVolume *> type_info node",
        ),
    ),
    (
        "__tiQ23sim12SphereVolume",
        Ok(
            "sim::SphereVolume type_info node",
        ),
    ),
    (
        "__tiQ23sim14CylinderVolume",
        Ok(
            "sim::CylinderVolume type_info node",
        ),
    ),
    (
        "__tiQ23sim11OBBoxVolume",
        Ok(
            "sim::OBBoxVolume type_info node",
        ),
    ),
    (
        "__tiQ23sim10WallVolume",
        Ok(
            "sim::WallVolume type_info node",
        ),
    ),
    (
        "__tiQ23sim10BBoxVolume",
        Ok(
            "sim::BBoxVolume type_info node",
        ),
    ),
    (
        "__tiQ23sim17PhysicsProperties",
        Ok(
            "sim::PhysicsProperties type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ23sim17PhysicsProperties",
        Ok(
            "radLoadInventory::SafeCast<sim::PhysicsProperties> type_info node",
        ),
    ),
    (
        "__tiQ23sim14SimEnvironment",
        Ok(
            "sim::SimEnvironment type_info node",
        ),
    ),
    (
        "__tiQ23sim7SimTime",
        Ok(
            "sim::SimTime type_info node",
        ),
    ),
    (
        "__tiQ23sim11SimCGSValue",
        Ok(
            "sim::SimCGSValue type_info node",
        ),
    ),
    (
        "__tiQ23sim9SimLength",
        Ok(
            "sim::SimLength type_info node",
        ),
    ),
    (
        "__tiQ23sim8SimSpeed",
        Ok(
            "sim::SimSpeed type_info node",
        ),
    ),
    (
        "__tiQ23simt5TList1ZPQ23sim8SimUnits",
        Ok(
            "sim::TList<sim::SimUnits *> type_info node",
        ),
    ),
    (
        "__tiQ23sim8SimState",
        Ok(
            "sim::SimState type_info node",
        ),
    ),
    (
        "__tiQ23sim14ManualSimState",
        Ok(
            "sim::ManualSimState type_info node",
        ),
    ),
    (
        "__tiQ23simt5TList1ZPQ23sim14JointVirtualCM",
        Ok(
            "sim::TList<sim::JointVirtualCM *> type_info node",
        ),
    ),
    (
        "__tiQ23sim19SimStateArticulated",
        Ok(
            "sim::SimStateArticulated type_info node",
        ),
    ),
    (
        "__tiQ23sim12SkeletonInfo",
        Ok(
            "sim::SkeletonInfo type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ23sim24ArticulatedPhysicsObject",
        Ok(
            "radLoadInventory::SafeCast<sim::ArticulatedPhysicsObject> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1ZQ23sim12SkeletonInfo",
        Ok(
            "radLoadInventory::SafeCast<sim::SkeletonInfo> type_info node",
        ),
    ),
    (
        "__tiQ23sim15SimVectorTarget",
        Ok(
            "sim::SimVectorTarget type_info node",
        ),
    ),
    (
        "__tiQ23sim15SimMatrixTarget",
        Ok(
            "sim::SimMatrixTarget type_info node",
        ),
    ),
    (
        "__tiQ23sim15SimJntMatTarget",
        Ok(
            "sim::SimJntMatTarget type_info node",
        ),
    ),
    (
        "__tiQ23sim15SimulatedObject",
        Ok(
            "sim::SimulatedObject type_info node",
        ),
    ),
    (
        "__tiQ23sim11tExportInfo",
        Ok(
            "sim::tExportInfo type_info node",
        ),
    ),
    (
        "__tiQ23sim17tExportInfoLoader",
        Ok(
            "sim::tExportInfoLoader type_info node",
        ),
    ),
    (
        "__tiQ23sim15SimUnitsManager",
        Ok(
            "sim::SimUnitsManager type_info node",
        ),
    ),
    (
        "__tiQ23sim13PhysicsObject",
        Ok(
            "sim::PhysicsObject type_info node",
        ),
    ),
    (
        "__tiQ23sim19PhysicsObjectLoader",
        Ok(
            "sim::PhysicsObjectLoader type_info node",
        ),
    ),
    (
        "__tiQ23sim24ArticulatedPhysicsObject",
        Ok(
            "sim::ArticulatedPhysicsObject type_info node",
        ),
    ),
    (
        "__tiQ23simt5TList1ZPQ23sim12PhysicsJoint",
        Ok(
            "sim::TList<sim::PhysicsJoint *> type_info node",
        ),
    ),
    (
        "__tiQ23sim14PhysicsJoint0D",
        Ok(
            "sim::PhysicsJoint0D type_info node",
        ),
    ),
    (
        "__tiQ23sim14PhysicsJoint1D",
        Ok(
            "sim::PhysicsJoint1D type_info node",
        ),
    ),
    (
        "__tiQ23sim14PhysicsJoint3D",
        Ok(
            "sim::PhysicsJoint3D type_info node",
        ),
    ),
    (
        "__tiQ23sim14JointVirtualCM",
        Ok(
            "sim::JointVirtualCM type_info node",
        ),
    ),
    (
        "__tiQ23sim17CollisionDetector",
        Ok(
            "sim::CollisionDetector type_info node",
        ),
    ),
    (
        "__tiQ23sim14SimpleFilter1D",
        Ok(
            "sim::SimpleFilter1D type_info node",
        ),
    ),
    (
        "__tiQ23sim14SimpleFilter3D",
        Ok(
            "sim::SimpleFilter3D type_info node",
        ),
    ),
    (
        "__tiQ23sim17SimpleFilterAbs3D",
        Ok(
            "sim::SimpleFilterAbs3D type_info node",
        ),
    ),
    (
        "__tiQ23sim9Kalmann1D",
        Ok(
            "sim::Kalmann1D type_info node",
        ),
    ),
    (
        "__tiQ23sim15DoubleKalmann1D",
        Ok(
            "sim::DoubleKalmann1D type_info node",
        ),
    ),
    (
        "__tiQ25poser4Pose",
        Ok(
            "poser::Pose type_info node",
        ),
    ),
    (
        "__tiQ25poser10PoseEngine",
        Ok(
            "poser::PoseEngine type_info node",
        ),
    ),
    (
        "__ti20FeProjectFileHandler",
        Ok(
            "FeProjectFileHandler type_info node",
        ),
    ),
    (
        "__ti17FeTextBibleLoader",
        Ok(
            "FeTextBibleLoader type_info node",
        ),
    ),
    (
        "_11FeTextBible$m_languageIDs",
        Ok(
            "FeTextBible::m_languageIDs",
        ),
    ),
    (
        "__ti6FePage",
        Ok(
            "FePage type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby4Page",
        Ok(
            "Scrooby::Page type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby5Layer",
        Ok(
            "Scrooby::Layer type_info node",
        ),
    ),
    (
        "__ti7FeOwner",
        Ok(
            "FeOwner type_info node",
        ),
    ),
    (
        "__ti8FeParent",
        Ok(
            "FeParent type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby7Polygon",
        Ok(
            "Scrooby::Polygon type_info node",
        ),
    ),
    (
        "__ti9FePolygon",
        Ok(
            "FePolygon type_info node",
        ),
    ),
    (
        "__ti10FeDrawable",
        Ok(
            "FeDrawable type_info node",
        ),
    ),
    (
        "__ti9FeProject",
        Ok(
            "FeProject type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby6Screen",
        Ok(
            "Scrooby::Screen type_info node",
        ),
    ),
    (
        "__ti8FeEntity",
        Ok(
            "FeEntity type_info node",
        ),
    ),
    (
        "__ti14FePure3dObject",
        Ok(
            "FePure3dObject type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby12Pure3dObject",
        Ok(
            "Scrooby::Pure3dObject type_info node",
        ),
    ),
    (
        "__ti17FeBoundedDrawable",
        Ok(
            "FeBoundedDrawable type_info node",
        ),
    ),
    (
        "__ti8FeScreen",
        Ok(
            "FeScreen type_info node",
        ),
    ),
    (
        "__ti8FeSprite",
        Ok(
            "FeSprite type_info node",
        ),
    ),
    (
        "__ti6FeText",
        Ok(
            "FeText type_info node",
        ),
    ),
    (
        "__ti17FeTextChildString",
        Ok(
            "FeTextChildString type_info node",
        ),
    ),
    (
        "__ti26FeTextChildHardCodedString",
        Ok(
            "FeTextChildHardCodedString type_info node",
        ),
    ),
    (
        "__ti26FeTextChildTextBibleString",
        Ok(
            "FeTextChildTextBibleString type_info node",
        ),
    ),
    (
        "__ti11FeTextBible",
        Ok(
            "FeTextBible type_info node",
        ),
    ),
    (
        "__ti11FeTextStyle",
        Ok(
            "FeTextStyle type_info node",
        ),
    ),
    (
        "__ti12tLinearTable",
        Ok(
            "tLinearTable type_info node",
        ),
    ),
    (
        "__ti13FeEntityDummy",
        Ok(
            "FeEntityDummy type_info node",
        ),
    ),
    (
        "__tiQ217FeResourceManager24ResourceManagerEntryBase",
        Ok(
            "FeResourceManager::ResourceManagerEntryBase type_info node",
        ),
    ),
    (
        "__tiQ217FeResourceManager13ResourceEntry",
        Ok(
            "FeResourceManager::ResourceEntry type_info node",
        ),
    ),
    (
        "__tiQ217FeResourceManager21Pure3dAttributesEntry",
        Ok(
            "FeResourceManager::Pure3dAttributesEntry type_info node",
        ),
    ),
    (
        "__ti17FeResourceManager",
        Ok(
            "FeResourceManager type_info node",
        ),
    ),
    (
        "__tiQ217FeResourceManager11P3DCallback",
        Ok(
            "FeResourceManager::P3DCallback type_info node",
        ),
    ),
    (
        "__ti5FeApp",
        Ok(
            "FeApp type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby21FeProjectChunkHandler",
        Ok(
            "Scrooby::FeProjectChunkHandler type_info node",
        ),
    ),
    (
        "__ti7FeGroup",
        Ok(
            "FeGroup type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby5Group",
        Ok(
            "Scrooby::Group type_info node",
        ),
    ),
    (
        "__ti10FeLanguage",
        Ok(
            "FeLanguage type_info node",
        ),
    ),
    (
        "__ti7FeLayer",
        Ok(
            "FeLayer type_info node",
        ),
    ),
    (
        "__ti7FeMovie",
        Ok(
            "FeMovie type_info node",
        ),
    ),
    (
        "__tiQ27Scrooby5Movie",
        Ok(
            "Scrooby::Movie type_info node",
        ),
    ),
    (
        "__ti14tBillboardQuad",
        Ok(
            "tBillboardQuad type_info node",
        ),
    ),
    (
        "__ti25tCamRelativeBillboardQuad",
        Ok(
            "tCamRelativeBillboardQuad type_info node",
        ),
    ),
    (
        "__tit9tPtrArray1ZP14tBillboardQuad",
        Ok(
            "tPtrArray<tBillboardQuad *> type_info node",
        ),
    ),
    (
        "__ti19tBillboardQuadGroup",
        Ok(
            "tBillboardQuadGroup type_info node",
        ),
    ),
    (
        "__ti11tBMPHandler",
        Ok(
            "tBMPHandler type_info node",
        ),
    ),
    (
        "__ti13tImageHandler",
        Ok(
            "tImageHandler type_info node",
        ),
    ),
    (
        "__ti7tCamera",
        Ok(
            "tCamera type_info node",
        ),
    ),
    (
        "__ti13tCameraLoader",
        Ok(
            "tCameraLoader type_info node",
        ),
    ),
    (
        "__ti10tChunkFile",
        Ok(
            "tChunkFile type_info node",
        ),
    ),
    (
        "__ti13radLoadStream",
        Ok(
            "radLoadStream type_info node",
        ),
    ),
    (
        "__ti15RadcoreMemAdapt",
        Ok(
            "RadcoreMemAdapt type_info node",
        ),
    ),
    (
        "__ti19tShaderIntBroadcast",
        Ok(
            "tShaderIntBroadcast type_info node",
        ),
    ),
    (
        "__ti21tShaderFloatBroadcast",
        Ok(
            "tShaderFloatBroadcast type_info node",
        ),
    ),
    (
        "__ti22tShaderColourBroadcast",
        Ok(
            "tShaderColourBroadcast type_info node",
        ),
    ),
    (
        "__ti23tShaderTextureBroadcast",
        Ok(
            "tShaderTextureBroadcast type_info node",
        ),
    ),
    (
        "__ti22tShaderVectorBroadcast",
        Ok(
            "tShaderVectorBroadcast type_info node",
        ),
    ),
    (
        "__ti22tShaderMatrixBroadcast",
        Ok(
            "tShaderMatrixBroadcast type_info node",
        ),
    ),
    (
        "__ti9AdaptPDDI",
        Ok(
            "AdaptPDDI type_info node",
        ),
    ),
    (
        "__ti5tFile",
        Ok(
            "tFile type_info node",
        ),
    ),
    (
        "__ti8tFileMem",
        Ok(
            "tFileMem type_info node",
        ),
    ),
    (
        "__ti5tFont",
        Ok(
            "tFont type_info node",
        ),
    ),
    (
        "__ti9tGameAttr",
        Ok(
            "tGameAttr type_info node",
        ),
    ),
    (
        "__ti15tGameAttrLoader",
        Ok(
            "tGameAttrLoader type_info node",
        ),
    ),
    (
        "__tit9tPtrArray1ZP10tPrimGroup",
        Ok(
            "tPtrArray<tPrimGroup *> type_info node",
        ),
    ),
    (
        "__ti9tGeometry",
        Ok(
            "tGeometry type_info node",
        ),
    ),
    (
        "__ti6tImage",
        Ok(
            "tImage type_info node",
        ),
    ),
    (
        "__ti7tImage8",
        Ok(
            "tImage8 type_info node",
        ),
    ),
    (
        "__ti12tImageLoader",
        Ok(
            "tImageLoader type_info node",
        ),
    ),
    (
        "__ti12ImageBuilder",
        Ok(
            "ImageBuilder type_info node",
        ),
    ),
    (
        "__ti14TextureBuilder",
        Ok(
            "TextureBuilder type_info node",
        ),
    ),
    (
        "__ti10tImageFont",
        Ok(
            "tImageFont type_info node",
        ),
    ),
    (
        "__ti16tImageFontLoader",
        Ok(
            "tImageFontLoader type_info node",
        ),
    ),
    (
        "__ti12tEntityStore",
        Ok(
            "tEntityStore type_info node",
        ),
    ),
    (
        "__ti10tInventory",
        Ok(
            "tInventory type_info node",
        ),
    ),
    (
        "__ti14tSafeCasterObj",
        Ok(
            "tSafeCasterObj type_info node",
        ),
    ),
    (
        "__ti6tLight",
        Ok(
            "tLight type_info node",
        ),
    ),
    (
        "__tit9tPtrArray1ZP6tLight",
        Ok(
            "tPtrArray<tLight *> type_info node",
        ),
    ),
    (
        "__ti11tLightGroup",
        Ok(
            "tLightGroup type_info node",
        ),
    ),
    (
        "__ti12tLightLoader",
        Ok(
            "tLightLoader type_info node",
        ),
    ),
    (
        "__ti17tLightGroupLoader",
        Ok(
            "tLightGroupLoader type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z6tLight",
        Ok(
            "radLoadInventory::SafeCast<tLight> type_info node",
        ),
    ),
    (
        "__ti8tLocator",
        Ok(
            "tLocator type_info node",
        ),
    ),
    (
        "__ti14tLocatorLoader",
        Ok(
            "tLocatorLoader type_info node",
        ),
    ),
    (
        "__ti15tP3DFileHandler",
        Ok(
            "tP3DFileHandler type_info node",
        ),
    ),
    (
        "__tiQ212tLoadRequest16InternalCallback",
        Ok(
            "tLoadRequest::InternalCallback type_info node",
        ),
    ),
    (
        "__ti12tLoadRequest",
        Ok(
            "tLoadRequest type_info node",
        ),
    ),
    (
        "__ti15tRefCountedTemp",
        Ok(
            "tRefCountedTemp type_info node",
        ),
    ),
    (
        "__ti12tLoadManager",
        Ok(
            "tLoadManager type_info node",
        ),
    ),
    (
        "__ti10tTempStore",
        Ok(
            "tTempStore type_info node",
        ),
    ),
    (
        "__tiQ23p3d13DefaultRouter",
        Ok(
            "p3d::DefaultRouter type_info node",
        ),
    ),
    (
        "__ti12tPointCamera",
        Ok(
            "tPointCamera type_info node",
        ),
    ),
    (
        "__ti11tPointLight",
        Ok(
            "tPointLight type_info node",
        ),
    ),
    (
        "__ti11tPNGHandler",
        Ok(
            "tPNGHandler type_info node",
        ),
    ),
    (
        "__ti10tPrimGroup",
        Ok(
            "tPrimGroup type_info node",
        ),
    ),
    (
        "__ti19tPrimGroupOptimised",
        Ok(
            "tPrimGroupOptimised type_info node",
        ),
    ),
    (
        "__ti26tPrimGroupSkinnedOptimised",
        Ok(
            "tPrimGroupSkinnedOptimised type_info node",
        ),
    ),
    (
        "__ti18tPrimGroupStreamed",
        Ok(
            "tPrimGroupStreamed type_info node",
        ),
    ),
    (
        "__ti25tPrimGroupSkinnedStreamed",
        Ok(
            "tPrimGroupSkinnedStreamed type_info node",
        ),
    ),
    (
        "__ti16tRawImageHandler",
        Ok(
            "tRawImageHandler type_info node",
        ),
    ),
    (
        "__ti7tShader",
        Ok(
            "tShader type_info node",
        ),
    ),
    (
        "__ti13tShaderLoader",
        Ok(
            "tShaderLoader type_info node",
        ),
    ),
    (
        "__ti23tShaderDefinitionLoader",
        Ok(
            "tShaderDefinitionLoader type_info node",
        ),
    ),
    (
        "__ti7tSprite",
        Ok(
            "tSprite type_info node",
        ),
    ),
    (
        "__ti13tSpriteLoader",
        Ok(
            "tSpriteLoader type_info node",
        ),
    ),
    (
        "__ti10tSpotLight",
        Ok(
            "tSpotLight type_info node",
        ),
    ),
    (
        "__ti13tTargaHandler",
        Ok(
            "tTargaHandler type_info node",
        ),
    ),
    (
        "__ti11tTextString",
        Ok(
            "tTextString type_info node",
        ),
    ),
    (
        "__ti8tTexture",
        Ok(
            "tTexture type_info node",
        ),
    ),
    (
        "__ti14tTextureLoader",
        Ok(
            "tTextureLoader type_info node",
        ),
    ),
    (
        "__ti10tSetLoader",
        Ok(
            "tSetLoader type_info node",
        ),
    ),
    (
        "__ti12tTextureFont",
        Ok(
            "tTextureFont type_info node",
        ),
    ),
    (
        "__ti18tTextureFontLoader",
        Ok(
            "tTextureFontLoader type_info node",
        ),
    ),
    (
        "__ti13tVectorCamera",
        Ok(
            "tVectorCamera type_info node",
        ),
    ),
    (
        "__ti11tVertexList",
        Ok(
            "tVertexList type_info node",
        ),
    ),
    (
        "__ti5tView",
        Ok(
            "tView type_info node",
        ),
    ),
    (
        "__ti16tFrameController",
        Ok(
            "tFrameController type_info node",
        ),
    ),
    (
        "__ti25tAnimationFrameController",
        Ok(
            "tAnimationFrameController type_info node",
        ),
    ),
    (
        "__ti22tSimpleFrameController",
        Ok(
            "tSimpleFrameController type_info node",
        ),
    ),
    (
        "__ti21tBlendFrameController",
        Ok(
            "tBlendFrameController type_info node",
        ),
    ),
    (
        "__ti22tFrameControllerLoader",
        Ok(
            "tFrameControllerLoader type_info node",
        ),
    ),
    (
        "__ti21tAnimationMemoryBlock",
        Ok(
            "tAnimationMemoryBlock type_info node",
        ),
    ),
    (
        "__ti10tAnimation",
        Ok(
            "tAnimation type_info node",
        ),
    ),
    (
        "__ti16tAnimationLoader",
        Ok(
            "tAnimationLoader type_info node",
        ),
    ),
    (
        "__ti7tEffect",
        Ok(
            "tEffect type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z15tAnimatedObject",
        Ok(
            "radLoadInventory::SafeCast<tAnimatedObject> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z16tExpressionMixer",
        Ok(
            "radLoadInventory::SafeCast<tExpressionMixer> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z7tEffect",
        Ok(
            "radLoadInventory::SafeCast<tEffect> type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z9tGeometry",
        Ok(
            "radLoadInventory::SafeCast<tGeometry> type_info node",
        ),
    ),
    (
        "__ti22tAnimatedObjectFactory",
        Ok(
            "tAnimatedObjectFactory type_info node",
        ),
    ),
    (
        "__ti24tAnimatedObjectAnimation",
        Ok(
            "tAnimatedObjectAnimation type_info node",
        ),
    ),
    (
        "__ti15tAnimatedObject",
        Ok(
            "tAnimatedObject type_info node",
        ),
    ),
    (
        "__ti30tAnimatedObjectFrameController",
        Ok(
            "tAnimatedObjectFrameController type_info node",
        ),
    ),
    (
        "__ti28tAnimatedObjectFactoryLoader",
        Ok(
            "tAnimatedObjectFactoryLoader type_info node",
        ),
    ),
    (
        "__ti21tAnimatedObjectLoader",
        Ok(
            "tAnimatedObjectLoader type_info node",
        ),
    ),
    (
        "__ti38tBillboardQuadGroupAnimationController",
        Ok(
            "tBillboardQuadGroupAnimationController type_info node",
        ),
    ),
    (
        "__ti26tCameraAnimationController",
        Ok(
            "tCameraAnimationController type_info node",
        ),
    ),
    (
        "__ti8tChannel",
        Ok(
            "tChannel type_info node",
        ),
    ),
    (
        "__ti11tIntChannel",
        Ok(
            "tIntChannel type_info node",
        ),
    ),
    (
        "__ti14tFloat1Channel",
        Ok(
            "tFloat1Channel type_info node",
        ),
    ),
    (
        "__ti14tFloat2Channel",
        Ok(
            "tFloat2Channel type_info node",
        ),
    ),
    (
        "__ti18tVector1DOFChannel",
        Ok(
            "tVector1DOFChannel type_info node",
        ),
    ),
    (
        "__ti14tVectorChannel",
        Ok(
            "tVectorChannel type_info node",
        ),
    ),
    (
        "__ti18tVector2DOFChannel",
        Ok(
            "tVector2DOFChannel type_info node",
        ),
    ),
    (
        "__ti18tVector3DOFChannel",
        Ok(
            "tVector3DOFChannel type_info node",
        ),
    ),
    (
        "__ti18tQuaternionChannel",
        Ok(
            "tQuaternionChannel type_info node",
        ),
    ),
    (
        "__ti16tRotationChannel",
        Ok(
            "tRotationChannel type_info node",
        ),
    ),
    (
        "__ti28tCompressedQuaternionChannel",
        Ok(
            "tCompressedQuaternionChannel type_info node",
        ),
    ),
    (
        "__ti14tStringChannel",
        Ok(
            "tStringChannel type_info node",
        ),
    ),
    (
        "__ti14tEntityChannel",
        Ok(
            "tEntityChannel type_info node",
        ),
    ),
    (
        "__ti12tBoolChannel",
        Ok(
            "tBoolChannel type_info node",
        ),
    ),
    (
        "__ti14tColourChannel",
        Ok(
            "tColourChannel type_info node",
        ),
    ),
    (
        "__ti13tEventChannel",
        Ok(
            "tEventChannel type_info node",
        ),
    ),
    (
        "__tiQ218tCompositeDrawable19DrawablePropElement",
        Ok(
            "tCompositeDrawable::DrawablePropElement type_info node",
        ),
    ),
    (
        "__tiQ218tCompositeDrawable19DrawablePoseElement",
        Ok(
            "tCompositeDrawable::DrawablePoseElement type_info node",
        ),
    ),
    (
        "__tiQ218tCompositeDrawable21DrawableEffectElement",
        Ok(
            "tCompositeDrawable::DrawableEffectElement type_info node",
        ),
    ),
    (
        "__tit16tPtrDynamicArray1ZPQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tPtrDynamicArray<tCompositeDrawable::DrawableElement *> type_info node",
        ),
    ),
    (
        "__tit9tPtrArray1ZPQ218tCompositeDrawable15DrawableElement",
        Ok(
            "tPtrArray<tCompositeDrawable::DrawableElement *> type_info node",
        ),
    ),
    (
        "__ti18tCompositeDrawable",
        Ok(
            "tCompositeDrawable type_info node",
        ),
    ),
    (
        "__ti24tCompositeDrawableLoader",
        Ok(
            "tCompositeDrawableLoader type_info node",
        ),
    ),
    (
        "__ti13tDrawablePose",
        Ok(
            "tDrawablePose type_info node",
        ),
    ),
    (
        "__ti6tEvent",
        Ok(
            "tEvent type_info node",
        ),
    ),
    (
        "__ti10tBaseEvent",
        Ok(
            "tBaseEvent type_info node",
        ),
    ),
    (
        "__ti13tGenericEvent",
        Ok(
            "tGenericEvent type_info node",
        ),
    ),
    (
        "__ti11tExpression",
        Ok(
            "tExpression type_info node",
        ),
    ),
    (
        "__tit9tPtrArray1ZP11tExpression",
        Ok(
            "tPtrArray<tExpression *> type_info node",
        ),
    ),
    (
        "__ti16tExpressionGroup",
        Ok(
            "tExpressionGroup type_info node",
        ),
    ),
    (
        "__ti16tExpressionMixer",
        Ok(
            "tExpressionMixer type_info node",
        ),
    ),
    (
        "__ti17tExpressionLoader",
        Ok(
            "tExpressionLoader type_info node",
        ),
    ),
    (
        "__tiQ222tExpressionGroupLoader16tExpressionStore",
        Ok(
            "tExpressionGroupLoader::tExpressionStore type_info node",
        ),
    ),
    (
        "__ti22tExpressionGroupLoader",
        Ok(
            "tExpressionGroupLoader type_info node",
        ),
    ),
    (
        "__ti22tExpressionMixerLoader",
        Ok(
            "tExpressionMixerLoader type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z16tExpressionGroup",
        Ok(
            "radLoadInventory::SafeCast<tExpressionGroup> type_info node",
        ),
    ),
    (
        "__ti30tExpressionAnimationController",
        Ok(
            "tExpressionAnimationController type_info node",
        ),
    ),
    (
        "__ti25tLightAnimationController",
        Ok(
            "tLightAnimationController type_info node",
        ),
    ),
    (
        "__ti16tMultiController",
        Ok(
            "tMultiController type_info node",
        ),
    ),
    (
        "__ti22tMultiControllerLoader",
        Ok(
            "tMultiControllerLoader type_info node",
        ),
    ),
    (
        "__ti9tPolySkin",
        Ok(
            "tPolySkin type_info node",
        ),
    ),
    (
        "__ti15tPolySkinLoader",
        Ok(
            "tPolySkinLoader type_info node",
        ),
    ),
    (
        "__ti5tPose",
        Ok(
            "tPose type_info node",
        ),
    ),
    (
        "__ti24tPoseAnimationController",
        Ok(
            "tPoseAnimationController type_info node",
        ),
    ),
    (
        "__ti16tStateTransition",
        Ok(
            "tStateTransition type_info node",
        ),
    ),
    (
        "__ti15tSequencerState",
        Ok(
            "tSequencerState type_info node",
        ),
    ),
    (
        "__tit9tPtrArray1ZP15tSequencerState",
        Ok(
            "tPtrArray<tSequencerState *> type_info node",
        ),
    ),
    (
        "__ti10tSequencer",
        Ok(
            "tSequencer type_info node",
        ),
    ),
    (
        "__ti16tSequencerLoader",
        Ok(
            "tSequencerLoader type_info node",
        ),
    ),
    (
        "__ti15tSEQFileHandler",
        Ok(
            "tSEQFileHandler type_info node",
        ),
    ),
    (
        "__ti21tEventOriginSequencer",
        Ok(
            "tEventOriginSequencer type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z21tBlendFrameController",
        Ok(
            "radLoadInventory::SafeCast<tBlendFrameController> type_info node",
        ),
    ),
    (
        "__ti9tSkeleton",
        Ok(
            "tSkeleton type_info node",
        ),
    ),
    (
        "__ti15tSkeletonLoader",
        Ok(
            "tSkeletonLoader type_info node",
        ),
    ),
    (
        "__ti26tShaderAnimationController",
        Ok(
            "tShaderAnimationController type_info node",
        ),
    ),
    (
        "__ti27tTextureAnimationController",
        Ok(
            "tTextureAnimationController type_info node",
        ),
    ),
    (
        "__ti28tVertexOffsetExpressionMixer",
        Ok(
            "tVertexOffsetExpressionMixer type_info node",
        ),
    ),
    (
        "__ti36tSimpleVisibilityAnimationController",
        Ok(
            "tSimpleVisibilityAnimationController type_info node",
        ),
    ),
    (
        "__ti40tSceneGraphVisibilityAnimationController",
        Ok(
            "tSceneGraphVisibilityAnimationController type_info node",
        ),
    ),
    (
        "__ti38tCompDrawVisibilityAnimationController",
        Ok(
            "tCompDrawVisibilityAnimationController type_info node",
        ),
    ),
    (
        "__ti21tVertexAnimController",
        Ok(
            "tVertexAnimController type_info node",
        ),
    ),
    (
        "__ti16tOffsetIndexList",
        Ok(
            "tOffsetIndexList type_info node",
        ),
    ),
    (
        "__ti17tColourOffsetList",
        Ok(
            "tColourOffsetList type_info node",
        ),
    ),
    (
        "__ti17tVectorOffsetList",
        Ok(
            "tVectorOffsetList type_info node",
        ),
    ),
    (
        "__ti18tVector2OffsetList",
        Ok(
            "tVector2OffsetList type_info node",
        ),
    ),
    (
        "__ti14tVertexAnimKey",
        Ok(
            "tVertexAnimKey type_info node",
        ),
    ),
    (
        "__ti20tVertexAnimKeyLoader",
        Ok(
            "tVertexAnimKeyLoader type_info node",
        ),
    ),
    (
        "__ti17tVertexOffsetList",
        Ok(
            "tVertexOffsetList type_info node",
        ),
    ),
    (
        "__ti15tGeometryOffset",
        Ok(
            "tGeometryOffset type_info node",
        ),
    ),
    (
        "__ti17tVertexAnimObject",
        Ok(
            "tVertexAnimObject type_info node",
        ),
    ),
    (
        "__ti17tEffectController",
        Ok(
            "tEffectController type_info node",
        ),
    ),
    (
        "__ti21tLensFlareGroupLoader",
        Ok(
            "tLensFlareGroupLoader type_info node",
        ),
    ),
    (
        "__ti28tParticleSystemFactoryLoader",
        Ok(
            "tParticleSystemFactoryLoader type_info node",
        ),
    ),
    (
        "__ti21tParticleSystemLoader",
        Ok(
            "tParticleSystemLoader type_info node",
        ),
    ),
    (
        "__tiQ216radLoadInventoryt8SafeCast1Z22tParticleSystemFactory",
        Ok(
            "radLoadInventory::SafeCast<tParticleSystemFactory> type_info node",
        ),
    ),
    (
        "__ti22tParticleSystemFactory",
        Ok(
            "tParticleSystemFactory type_info node",
        ),
    ),
    (
        "__ti14tEffectFactory",
        Ok(
            "tEffectFactory type_info node",
        ),
    ),
    (
        "__ti15tParticleSystem",
        Ok(
            "tParticleSystem type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph28TransformAnimationController",
        Ok(
            "Scenegraph::TransformAnimationController type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph4Node",
        Ok(
            "Scenegraph::Node type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph6Branch",
        Ok(
            "Scenegraph::Branch type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph4Leaf",
        Ok(
            "Scenegraph::Leaf type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph9Transform",
        Ok(
            "Scenegraph::Transform type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph8Drawable",
        Ok(
            "Scenegraph::Drawable type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph10Attachment",
        Ok(
            "Scenegraph::Attachment type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph6Camera",
        Ok(
            "Scenegraph::Camera type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph10LightGroup",
        Ok(
            "Scenegraph::LightGroup type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph10Scenegraph",
        Ok(
            "Scenegraph::Scenegraph type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph10Visibility",
        Ok(
            "Scenegraph::Visibility type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph6Loader",
        Ok(
            "Scenegraph::Loader type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph15DrawableCounter",
        Ok(
            "Scenegraph::DrawableCounter type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph26TranslucentDrawableCounter",
        Ok(
            "Scenegraph::TranslucentDrawableCounter type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph18LightGroupIterator",
        Ok(
            "Scenegraph::LightGroupIterator type_info node",
        ),
    ),
    (
        "__tiQ210Scenegraph13ShaderVisitor",
        Ok(
            "Scenegraph::ShaderVisitor type_info node",
        ),
    ),
    (
        "__ti11tPS2FileMap",
        Ok(
            "tPS2FileMap type_info node",
        ),
    ),
    (
        "__ti13tAmbientLight",
        Ok(
            "tAmbientLight type_info node",
        ),
    ),
    (
        "__ti17tDirectionalLight",
        Ok(
            "tDirectionalLight type_info node",
        ),
    ),
    (
        "__ti8tFileFTT",
        Ok(
            "tFileFTT type_info node",
        ),
    ),
    (
        "__ti16tEventController",
        Ok(
            "tEventController type_info node",
        ),
    ),
    (
        "__ti20tEventAnimTextLoader",
        Ok(
            "tEventAnimTextLoader type_info node",
        ),
    ),
    (
        "__ti18tExpressionOffsets",
        Ok(
            "tExpressionOffsets type_info node",
        ),
    ),
    (
        "__tit9tPtrArray1ZP10tLensFlare",
        Ok(
            "tPtrArray<tLensFlare *> type_info node",
        ),
    ),
    (
        "__ti15tLensFlareGroup",
        Ok(
            "tLensFlareGroup type_info node",
        ),
    ),
    (
        "__ti10tLensFlare",
        Ok(
            "tLensFlare type_info node",
        ),
    ),
    (
        "__ti12tOpticEffect",
        Ok(
            "tOpticEffect type_info node",
        ),
    ),
    (
        "__ti13tParticlePool",
        Ok(
            "tParticlePool type_info node",
        ),
    ),
    (
        "__ti15tSpriteParticle",
        Ok(
            "tSpriteParticle type_info node",
        ),
    ),
    (
        "__ti14tParticleArray",
        Ok(
            "tParticleArray type_info node",
        ),
    ),
    (
        "__ti19tBaseEmitterFactory",
        Ok(
            "tBaseEmitterFactory type_info node",
        ),
    ),
    (
        "__ti21tSpriteEmitterFactory",
        Ok(
            "tSpriteEmitterFactory type_info node",
        ),
    ),
    (
        "__ti12tBaseEmitter",
        Ok(
            "tBaseEmitter type_info node",
        ),
    ),
    (
        "__ti14tSpriteEmitter",
        Ok(
            "tSpriteEmitter type_info node",
        ),
    ),
    (
        "__ti19tLocalSpriteEmitter",
        Ok(
            "tLocalSpriteEmitter type_info node",
        ),
    ),
    (
        "__ti21tBaseGeneratorFactory",
        Ok(
            "tBaseGeneratorFactory type_info node",
        ),
    ),
    (
        "__ti22tPointGeneratorFactory",
        Ok(
            "tPointGeneratorFactory type_info node",
        ),
    ),
    (
        "__ti22tPlaneGeneratorFactory",
        Ok(
            "tPlaneGeneratorFactory type_info node",
        ),
    ),
    (
        "__ti23tSphereGeneratorFactory",
        Ok(
            "tSphereGeneratorFactory type_info node",
        ),
    ),
    (
        "__ti14tBaseGenerator",
        Ok(
            "tBaseGenerator type_info node",
        ),
    ),
    (
        "__ti15tPointGenerator",
        Ok(
            "tPointGenerator type_info node",
        ),
    ),
    (
        "__ti15tPlaneGenerator",
        Ok(
            "tPlaneGenerator type_info node",
        ),
    ),
    (
        "__ti16tSphereGenerator",
        Ok(
            "tSphereGenerator type_info node",
        ),
    ),
    (
        "__ti9ps2Device",
        Ok(
            "ps2Device type_info node",
        ),
    ),
    (
        "__ti10pddiDevice",
        Ok(
            "pddiDevice type_info node",
        ),
    ),
    (
        "__ti11pddiDisplay",
        Ok(
            "pddiDisplay type_info node",
        ),
    ),
    (
        "__ti10ps2Display",
        Ok(
            "ps2Display type_info node",
        ),
    ),
    (
        "__ti14pddiPrimBuffer",
        Ok(
            "pddiPrimBuffer type_info node",
        ),
    ),
    (
        "__ti13ps2PrimBuffer",
        Ok(
            "ps2PrimBuffer type_info node",
        ),
    ),
    (
        "__ti14ps2ErrorShader",
        Ok(
            "ps2ErrorShader type_info node",
        ),
    ),
    (
        "__ti9ps2Shader",
        Ok(
            "ps2Shader type_info node",
        ),
    ),
    (
        "__ti10pddiShader",
        Ok(
            "pddiShader type_info node",
        ),
    ),
    (
        "__ti14pddiBaseShader",
        Ok(
            "pddiBaseShader type_info node",
        ),
    ),
    (
        "__ti16ps2LayeredShader",
        Ok(
            "ps2LayeredShader type_info node",
        ),
    ),
    (
        "__ti17ps2LightmapShader",
        Ok(
            "ps2LightmapShader type_info node",
        ),
    ),
    (
        "__ti20ps2LightweightShader",
        Ok(
            "ps2LightweightShader type_info node",
        ),
    ),
    (
        "__ti13ps2ToonShader",
        Ok(
            "ps2ToonShader type_info node",
        ),
    ),
    (
        "__ti15ps2SimpleShader",
        Ok(
            "ps2SimpleShader type_info node",
        ),
    ),
    (
        "__ti19ps2RefractionShader",
        Ok(
            "ps2RefractionShader type_info node",
        ),
    ),
    (
        "__ti19ps2ReflectionShader",
        Ok(
            "ps2ReflectionShader type_info node",
        ),
    ),
    (
        "__ti15ps2ShadowShader",
        Ok(
            "ps2ShadowShader type_info node",
        ),
    ),
    (
        "__ti11pddiTexture",
        Ok(
            "pddiTexture type_info node",
        ),
    ),
    (
        "__ti10ps2Texture",
        Ok(
            "ps2Texture type_info node",
        ),
    ),
    (
        "__ti17pddiRenderContext",
        Ok(
            "pddiRenderContext type_info node",
        ),
    ),
    (
        "__ti15pddiMatrixStack",
        Ok(
            "pddiMatrixStack type_info node",
        ),
    ),
    (
        "__ti15pddiRenderState",
        Ok(
            "pddiRenderState type_info node",
        ),
    ),
    (
        "__ti13pddiViewState",
        Ok(
            "pddiViewState type_info node",
        ),
    ),
    (
        "__ti17pddiLightingState",
        Ok(
            "pddiLightingState type_info node",
        ),
    ),
    (
        "__ti12pddiFogState",
        Ok(
            "pddiFogState type_info node",
        ),
    ),
    (
        "__ti16pddiStencilState",
        Ok(
            "pddiStencilState type_info node",
        ),
    ),
    (
        "__ti15pddiBaseContext",
        Ok(
            "pddiBaseContext type_info node",
        ),
    ),
    (
        "__ti22pddiExtMemRegistration",
        Ok(
            "pddiExtMemRegistration type_info node",
        ),
    ),
    (
        "__ti23_pddiExtMemRegistration",
        Ok(
            "_pddiExtMemRegistration type_info node",
        ),
    ),
    (
        "__ti10ps2Context",
        Ok(
            "ps2Context type_info node",
        ),
    ),
    (
        "__ti16ps2ExtPS2Control",
        Ok(
            "ps2ExtPS2Control type_info node",
        ),
    ),
    (
        "__ti17pddiExtPS2Control",
        Ok(
            "pddiExtPS2Control type_info node",
        ),
    ),
    (
        "__ti24ps2ExtFramebufferEffects",
        Ok(
            "ps2ExtFramebufferEffects type_info node",
        ),
    ),
    (
        "__ti25pddiExtFramebufferEffects",
        Ok(
            "pddiExtFramebufferEffects type_info node",
        ),
    ),
    (
        "__ti22ps2ExtHardwareSkinning",
        Ok(
            "ps2ExtHardwareSkinning type_info node",
        ),
    ),
    (
        "__ti23pddiExtHardwareSkinning",
        Ok(
            "pddiExtHardwareSkinning type_info node",
        ),
    ),
    (
        "__tiQ28radmusic27radload_composition_adapter",
        Ok(
            "radmusic::radload_composition_adapter type_info node",
        ),
    ),
    (
        "__tiQ28radmusic20radmusic_file_loader",
        Ok(
            "radmusic::radmusic_file_loader type_info node",
        ),
    ),
    (
        "__tiQ28radmusic23composition_data_loader",
        Ok(
            "radmusic::composition_data_loader type_info node",
        ),
    ),
    (
        "__tiQ28radmusic26radload_radmusic_inventory",
        Ok(
            "radmusic::radload_radmusic_inventory type_info node",
        ),
    ),
    (
        "__ti16radLoadInventory",
        Ok(
            "radLoadInventory type_info node",
        ),
    ),
    (
        "__tiQ28radmusic21stream_graph_callback",
        Ok(
            "radmusic::stream_graph_callback type_info node",
        ),
    ),
    (
        "__ti14radSoundObject",
        Ok(
            "radSoundObject type_info node",
        ),
    ),
    (
        "__ti22radSoundHalAudioFormat",
        Ok(
            "radSoundHalAudioFormat type_info node",
        ),
    ),
    (
        "__ti23IRadSoundHalAudioFormat",
        Ok(
            "IRadSoundHalAudioFormat type_info node",
        ),
    ),
    (
        "__ti19radSoundHalListener",
        Ok(
            "radSoundHalListener type_info node",
        ),
    ),
    (
        "__ti20IRadSoundHalListener",
        Ok(
            "IRadSoundHalListener type_info node",
        ),
    ),
    (
        "__ti32radSoundHalPositionalInformation",
        Ok(
            "radSoundHalPositionalInformation type_info node",
        ),
    ),
    (
        "__ti26radSoundHalPositionalGroup",
        Ok(
            "radSoundHalPositionalGroup type_info node",
        ),
    ),
    (
        "__ti27IRadSoundHalPositionalGroup",
        Ok(
            "IRadSoundHalPositionalGroup type_info node",
        ),
    ),
    (
        "__ti23radSoundHalMemoryRegion",
        Ok(
            "radSoundHalMemoryRegion type_info node",
        ),
    ),
    (
        "__ti24IRadSoundHalMemoryRegion",
        Ok(
            "IRadSoundHalMemoryRegion type_info node",
        ),
    ),
    (
        "__ti17radSoundHalSystem",
        Ok(
            "radSoundHalSystem type_info node",
        ),
    ),
    (
        "__ti18IRadSoundHalSystem",
        Ok(
            "IRadSoundHalSystem type_info node",
        ),
    ),
    (
        "__ti17radSoundEffectPs2",
        Ok(
            "radSoundEffectPs2 type_info node",
        ),
    ),
    (
        "__ti18IRadSoundEffectPs2",
        Ok(
            "IRadSoundEffectPs2 type_info node",
        ),
    ),
    (
        "__ti18IRadSoundHalEffect",
        Ok(
            "IRadSoundHalEffect type_info node",
        ),
    ),
    (
        "__ti14radSoundIopPs2",
        Ok(
            "radSoundIopPs2 type_info node",
        ),
    ),
    (
        "__ti37radSoundHalBufferAsyncRequestAdpcmPs2",
        Ok(
            "radSoundHalBufferAsyncRequestAdpcmPs2 type_info node",
        ),
    ),
    (
        "__ti22radSoundBufferAdpcmPs2",
        Ok(
            "radSoundBufferAdpcmPs2 type_info node",
        ),
    ),
    (
        "__ti18IRadSoundHalBuffer",
        Ok(
            "IRadSoundHalBuffer type_info node",
        ),
    ),
    (
        "__ti29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundHalAdpcmBufferClearer type_info node",
        ),
    ),
    (
        "__tit18radSoundPoolObject1Z29radSoundHalAdpcmBufferClearer",
        Ok(
            "radSoundPoolObject<radSoundHalAdpcmBufferClearer> type_info node",
        ),
    ),
    (
        "__ti33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundBufferAsyncLoaderAdpcmPs2 type_info node",
        ),
    ),
    (
        "__ti30IRadSoundHalDataSourceCallback",
        Ok(
            "IRadSoundHalDataSourceCallback type_info node",
        ),
    ),
    (
        "__tit18radSoundPoolObject1Z33radSoundBufferAsyncLoaderAdpcmPs2",
        Ok(
            "radSoundPoolObject<radSoundBufferAsyncLoaderAdpcmPs2> type_info node",
        ),
    ),
    (
        "__ti21radSoundVoiceAdpcmPs2",
        Ok(
            "radSoundVoiceAdpcmPs2 type_info node",
        ),
    ),
    (
        "__ti17IRadSoundHalVoice",
        Ok(
            "IRadSoundHalVoice type_info node",
        ),
    ),
    (
        "__ti23radSoundUpdatableObject",
        Ok(
            "radSoundUpdatableObject type_info node",
        ),
    ),
    (
        "__ti26radSoundBufferedDataSource",
        Ok(
            "radSoundBufferedDataSource type_info node",
        ),
    ),
    (
        "__ti27IRadSoundBufferedDataSource",
        Ok(
            "IRadSoundBufferedDataSource type_info node",
        ),
    ),
    (
        "__ti22IRadSoundHalDataSource",
        Ok(
            "IRadSoundHalDataSource type_info node",
        ),
    ),
    (
        "__ti12radSoundClip",
        Ok(
            "radSoundClip type_info node",
        ),
    ),
    (
        "__ti13IRadSoundClip",
        Ok(
            "IRadSoundClip type_info node",
        ),
    ),
    (
        "__ti30IRadSoundHalBufferLoadCallback",
        Ok(
            "IRadSoundHalBufferLoadCallback type_info node",
        ),
    ),
    (
        "__ti31IRadSoundHalBufferClearCallback",
        Ok(
            "IRadSoundHalBufferClearCallback type_info node",
        ),
    ),
    (
        "__ti18radSoundClipPlayer",
        Ok(
            "radSoundClipPlayer type_info node",
        ),
    ),
    (
        "__ti19IRadSoundClipPlayer",
        Ok(
            "IRadSoundClipPlayer type_info node",
        ),
    ),
    (
        "__ti15IRadSoundPlayer",
        Ok(
            "IRadSoundPlayer type_info node",
        ),
    ),
    (
        "__ti17radSoundDataCache",
        Ok(
            "radSoundDataCache type_info node",
        ),
    ),
    (
        "__ti18IRadSoundDataCache",
        Ok(
            "IRadSoundDataCache type_info node",
        ),
    ),
    (
        "__ti27radSoundDataCacheDataSource",
        Ok(
            "radSoundDataCacheDataSource type_info node",
        ),
    ),
    (
        "__ti25radSoundRsdFileDataSource",
        Ok(
            "radSoundRsdFileDataSource type_info node",
        ),
    ),
    (
        "__ti26IRadSoundRsdFileDataSource",
        Ok(
            "IRadSoundRsdFileDataSource type_info node",
        ),
    ),
    (
        "__ti24radSoundMemoryDataSource",
        Ok(
            "radSoundMemoryDataSource type_info node",
        ),
    ),
    (
        "__ti25IRadSoundMemoryDataSource",
        Ok(
            "IRadSoundMemoryDataSource type_info node",
        ),
    ),
    (
        "__ti25radSoundMemorySpaceObject",
        Ok(
            "radSoundMemorySpaceObject type_info node",
        ),
    ),
    (
        "__ti26IRadSoundMemorySpaceObject",
        Ok(
            "IRadSoundMemorySpaceObject type_info node",
        ),
    ),
    (
        "__ti26radSoundStitchedDataSource",
        Ok(
            "radSoundStitchedDataSource type_info node",
        ),
    ),
    (
        "__ti27IRadSoundStitchedDataSource",
        Ok(
            "IRadSoundStitchedDataSource type_info node",
        ),
    ),
    (
        "__ti20radSoundStreamPlayer",
        Ok(
            "radSoundStreamPlayer type_info node",
        ),
    ),
    (
        "__ti21IRadSoundStreamPlayer",
        Ok(
            "IRadSoundStreamPlayer type_info node",
        ),
    ),
    (
        "__ti10IRadScript",
        Ok(
            "IRadScript type_info node",
        ),
    ),
    (
        "__ti13IRadNameSpace",
        Ok(
            "IRadNameSpace type_info node",
        ),
    ),
    (
        "__ti14radFactoryNode",
        Ok(
            "radFactoryNode type_info node",
        ),
    ),
    (
        "__ti17radTypeInfoLoader",
        Ok(
            "radTypeInfoLoader type_info node",
        ),
    ),
    (
        "__ti18IRadTypeInfoLoader",
        Ok(
            "IRadTypeInfoLoader type_info node",
        ),
    ),
    (
        "__ti17radObjectListNode",
        Ok(
            "radObjectListNode type_info node",
        ),
    ),
    (
        "__ti14IRadObjectList",
        Ok(
            "IRadObjectList type_info node",
        ),
    ),
    (
        "__ti12IRadTypeInfo",
        Ok(
            "IRadTypeInfo type_info node",
        ),
    ),
    (
        "__ti22IRadTypeInfoIntLiteral",
        Ok(
            "IRadTypeInfoIntLiteral type_info node",
        ),
    ),
    (
        "__ti16IRadTypeInfoEnum",
        Ok(
            "IRadTypeInfoEnum type_info node",
        ),
    ),
    (
        "__ti17IRadTypeInfoParam",
        Ok(
            "IRadTypeInfoParam type_info node",
        ),
    ),
    (
        "__ti18IRadTypeInfoMethod",
        Ok(
            "IRadTypeInfoMethod type_info node",
        ),
    ),
    (
        "__ti18IRadTypeInfoSystem",
        Ok(
            "IRadTypeInfoSystem type_info node",
        ),
    ),
    (
        "__ti14radMoviePlayer",
        Ok(
            "radMoviePlayer type_info node",
        ),
    ),
    (
        "__ti16IRadMoviePlayer2",
        Ok(
            "IRadMoviePlayer2 type_info node",
        ),
    ),
    (
        "__ti14radMovieIpuPs2",
        Ok(
            "radMovieIpuPs2 type_info node",
        ),
    ),
    (
        "__ti23radMovieVideoDecoderPs2",
        Ok(
            "radMovieVideoDecoderPs2 type_info node",
        ),
    ),
    (
        "__ti21IRadMovieVideoDecoder",
        Ok(
            "IRadMovieVideoDecoder type_info node",
        ),
    ),
    (
        "__ti25radMovieRenderStrategyPs2",
        Ok(
            "radMovieRenderStrategyPs2 type_info node",
        ),
    ),
    (
        "__ti23IRadMovieRenderStrategy",
        Ok(
            "IRadMovieRenderStrategy type_info node",
        ),
    ),
    (
        "__ti23radMovieAudioDataSource",
        Ok(
            "radMovieAudioDataSource type_info node",
        ),
    ),
    (
        "__ti12radTimerList",
        Ok(
            "radTimerList type_info node",
        ),
    ),
    (
        "__ti13IRadTimerList",
        Ok(
            "IRadTimerList type_info node",
        ),
    ),
    (
        "__ti8radTimer",
        Ok(
            "radTimer type_info node",
        ),
    ),
    (
        "__ti9IRadTimer",
        Ok(
            "IRadTimer type_info node",
        ),
    ),
    (
        "__ti12radStopwatch",
        Ok(
            "radStopwatch type_info node",
        ),
    ),
    (
        "__ti13IRadStopwatch",
        Ok(
            "IRadStopwatch type_info node",
        ),
    ),
    (
        "__ti20radMemoryDlAllocator",
        Ok(
            "radMemoryDlAllocator type_info node",
        ),
    ),
    (
        "__ti18ExternalMemoryHeap",
        Ok(
            "ExternalMemoryHeap type_info node",
        ),
    ),
    (
        "__ti16IRadMemoryObject",
        Ok(
            "IRadMemoryObject type_info node",
        ),
    ),
    (
        "__ti20ExternalMemoryObject",
        Ok(
            "ExternalMemoryObject type_info node",
        ),
    ),
    (
        "__ti24radMemoryAllocatorMalloc",
        Ok(
            "radMemoryAllocatorMalloc type_info node",
        ),
    ),
    (
        "__ti34MemorySpaceAsyncRequest_CopyEeToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToEe type_info node",
        ),
    ),
    (
        "__ti26IRadMemorySpaceCopyRequest",
        Ok(
            "IRadMemorySpaceCopyRequest type_info node",
        ),
    ),
    (
        "__ti23MemorySpaceAsyncRequest",
        Ok(
            "MemorySpaceAsyncRequest type_info node",
        ),
    ),
    (
        "__ti35MemorySpaceAsyncRequest_CopyEeToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyEeToIop type_info node",
        ),
    ),
    (
        "__ti35MemorySpaceAsyncRequest_CopyIopToEe",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToEe type_info node",
        ),
    ),
    (
        "__ti36MemorySpaceAsyncRequest_CopyIopToIop",
        Ok(
            "MemorySpaceAsyncRequest_CopyIopToIop type_info node",
        ),
    ),
    (
        "__ti22radMemoryAllocator_Iop",
        Ok(
            "radMemoryAllocator_Iop type_info node",
        ),
    ),
    (
        "__ti10MemoryPool",
        Ok(
            "MemoryPool type_info node",
        ),
    ),
    (
        "__ti14IRadMemoryPool",
        Ok(
            "IRadMemoryPool type_info node",
        ),
    ),
    (
        "__ti10StaticHeap",
        Ok(
            "StaticHeap type_info node",
        ),
    ),
    (
        "__ti12TrackingHeap",
        Ok(
            "TrackingHeap type_info node",
        ),
    ),
    (
        "__ti9radString",
        Ok(
            "radString type_info node",
        ),
    ),
    (
        "__ti10IRadString",
        Ok(
            "IRadString type_info node",
        ),
    ),
    (
        "__ti14radObjectBTree",
        Ok(
            "radObjectBTree type_info node",
        ),
    ),
    (
        "__ti12DebugConsole",
        Ok(
            "DebugConsole type_info node",
        ),
    ),
    (
        "__ti16IRadDebugConsole",
        Ok(
            "IRadDebugConsole type_info node",
        ),
    ),
    (
        "__ti13ConsoleClient",
        Ok(
            "ConsoleClient type_info node",
        ),
    ),
    (
        "__ti32IRadDbgComChannelReceiveCallback",
        Ok(
            "IRadDbgComChannelReceiveCallback type_info node",
        ),
    ),
    (
        "__ti29IRadDbgComChannelSendCallback",
        Ok(
            "IRadDbgComChannelSendCallback type_info node",
        ),
    ),
    (
        "__ti18rControllerSystem2",
        Ok(
            "rControllerSystem2 type_info node",
        ),
    ),
    (
        "__ti20IRadControllerSystem",
        Ok(
            "IRadControllerSystem type_info node",
        ),
    ),
    (
        "__ti20iControllerLocation2",
        Ok(
            "iControllerLocation2 type_info node",
        ),
    ),
    (
        "__ti21iIControllerLocation2",
        Ok(
            "iIControllerLocation2 type_info node",
        ),
    ),
    (
        "__ti12rController2",
        Ok(
            "rController2 type_info node",
        ),
    ),
    (
        "__ti13iIController2",
        Ok(
            "iIController2 type_info node",
        ),
    ),
    (
        "__ti25iControllerOutputHandler2",
        Ok(
            "iControllerOutputHandler2 type_info node",
        ),
    ),
    (
        "__ti33iRIControllerOutputPointCallback2",
        Ok(
            "iRIControllerOutputPointCallback2 type_info node",
        ),
    ),
    (
        "__ti23rControllerOutputPoint2",
        Ok(
            "rControllerOutputPoint2 type_info node",
        ),
    ),
    (
        "__ti25IRadControllerOutputPoint",
        Ok(
            "IRadControllerOutputPoint type_info node",
        ),
    ),
    (
        "__ti22rControllerInputPoint2",
        Ok(
            "rControllerInputPoint2 type_info node",
        ),
    ),
    (
        "__ti23iIControllerInputPoint2",
        Ok(
            "iIControllerInputPoint2 type_info node",
        ),
    ),
    (
        "__ti20LGDevWheelInputPoint",
        Ok(
            "LGDevWheelInputPoint type_info node",
        ),
    ),
    (
        "__ti24IRadControllerInputPoint",
        Ok(
            "IRadControllerInputPoint type_info node",
        ),
    ),
    (
        "__ti21LGDevWheelOutputPoint",
        Ok(
            "LGDevWheelOutputPoint type_info node",
        ),
    ),
    (
        "__ti20LGDevWheelController",
        Ok(
            "LGDevWheelController type_info node",
        ),
    ),
    (
        "__ti14IRadController",
        Ok(
            "IRadController type_info node",
        ),
    ),
    (
        "__ti11radPlatform",
        Ok(
            "radPlatform type_info node",
        ),
    ),
    (
        "__ti12IRadPlatform",
        Ok(
            "IRadPlatform type_info node",
        ),
    ),
    (
        "__ti14radThreadMutex",
        Ok(
            "radThreadMutex type_info node",
        ),
    ),
    (
        "__ti15IRadThreadMutex",
        Ok(
            "IRadThreadMutex type_info node",
        ),
    ),
    (
        "__ti18radThreadSemaphore",
        Ok(
            "radThreadSemaphore type_info node",
        ),
    ),
    (
        "__ti19IRadThreadSemaphore",
        Ok(
            "IRadThreadSemaphore type_info node",
        ),
    ),
    (
        "_9radThread$s_ThreadTable",
        Ok(
            "radThread::s_ThreadTable",
        ),
    ),
    (
        "_21radThreadLocalStorage$s_InUseIndexTable",
        Ok(
            "radThreadLocalStorage::s_InUseIndexTable",
        ),
    ),
    (
        "__ti14radThreadFiber",
        Ok(
            "radThreadFiber type_info node",
        ),
    ),
    (
        "__ti15IRadThreadFiber",
        Ok(
            "IRadThreadFiber type_info node",
        ),
    ),
    (
        "__ti9radThread",
        Ok(
            "radThread type_info node",
        ),
    ),
    (
        "__ti10IRadThread",
        Ok(
            "IRadThread type_info node",
        ),
    ),
    (
        "__ti21radThreadLocalStorage",
        Ok(
            "radThreadLocalStorage type_info node",
        ),
    ),
    (
        "__ti22IRadThreadLocalStorage",
        Ok(
            "IRadThreadLocalStorage type_info node",
        ),
    ),
    (
        "__ti14radTextDisplay",
        Ok(
            "radTextDisplay type_info node",
        ),
    ),
    (
        "__ti15IRadTextDisplay",
        Ok(
            "IRadTextDisplay type_info node",
        ),
    ),
    (
        "__ti22radWeakCallbackWrapper",
        Ok(
            "radWeakCallbackWrapper type_info node",
        ),
    ),
    (
        "__ti23IRadWeakCallbackWrapper",
        Ok(
            "IRadWeakCallbackWrapper type_info node",
        ),
    ),
    (
        "__ti16ControllerBuffer",
        Ok(
            "ControllerBuffer type_info node",
        ),
    ),
    (
        "__ti20IRadControllerBuffer",
        Ok(
            "IRadControllerBuffer type_info node",
        ),
    ),
    (
        "_13radFileSystem$s_DefaultDrive",
        Ok(
            "radFileSystem::s_DefaultDrive",
        ),
    ),
    (
        "_13radFileSystem$s_DriveMap",
        Ok(
            "radFileSystem::s_DriveMap",
        ),
    ),
    (
        "__ti14radRemoteDrive",
        Ok(
            "radRemoteDrive type_info node",
        ),
    ),
    (
        "__ti8radDrive",
        Ok(
            "radDrive type_info node",
        ),
    ),
    (
        "__ti15radSafeRefCount",
        Ok(
            "radSafeRefCount type_info node",
        ),
    ),
    (
        "__ti16radCementLibrary",
        Ok(
            "radCementLibrary type_info node",
        ),
    ),
    (
        "__ti17IRadCementLibrary",
        Ok(
            "IRadCementLibrary type_info node",
        ),
    ),
    (
        "__ti13radPs2CdDrive",
        Ok(
            "radPs2CdDrive type_info node",
        ),
    ),
    (
        "__ti15radPs2HostDrive",
        Ok(
            "radPs2HostDrive type_info node",
        ),
    ),
    (
        "__ti18radPs2MemcardDrive",
        Ok(
            "radPs2MemcardDrive type_info node",
        ),
    ),
    (
        "__ti22CompletionEventRequest",
        Ok(
            "CompletionEventRequest type_info node",
        ),
    ),
    (
        "__ti25CompletionCallbackRequest",
        Ok(
            "CompletionCallbackRequest type_info node",
        ),
    ),
    (
        "__ti21FileCompletionRequest",
        Ok(
            "FileCompletionRequest type_info node",
        ),
    ),
    (
        "__ti22DriveCompletionRequest",
        Ok(
            "DriveCompletionRequest type_info node",
        ),
    ),
    (
        "__ti14radFileRequest",
        Ok(
            "radFileRequest type_info node",
        ),
    ),
    (
        "__ti15FileOpenRequest",
        Ok(
            "FileOpenRequest type_info node",
        ),
    ),
    (
        "__ti19SaveGameOpenRequest",
        Ok(
            "SaveGameOpenRequest type_info node",
        ),
    ),
    (
        "__ti16FileCloseRequest",
        Ok(
            "FileCloseRequest type_info node",
        ),
    ),
    (
        "__ti17FileCommitRequest",
        Ok(
            "FileCommitRequest type_info node",
        ),
    ),
    (
        "__ti15FileReadRequest",
        Ok(
            "FileReadRequest type_info node",
        ),
    ),
    (
        "__ti16FileWriteRequest",
        Ok(
            "FileWriteRequest type_info node",
        ),
    ),
    (
        "__ti22FileSetPositionRequest",
        Ok(
            "FileSetPositionRequest type_info node",
        ),
    ),
    (
        "__ti22FileGetPositionRequest",
        Ok(
            "FileGetPositionRequest type_info node",
        ),
    ),
    (
        "__ti18FileGetSizeRequest",
        Ok(
            "FileGetSizeRequest type_info node",
        ),
    ),
    (
        "__ti17FileCancelRequest",
        Ok(
            "FileCancelRequest type_info node",
        ),
    ),
    (
        "__ti15radDriveRequest",
        Ok(
            "radDriveRequest type_info node",
        ),
    ),
    (
        "__ti16DriveOpenRequest",
        Ok(
            "DriveOpenRequest type_info node",
        ),
    ),
    (
        "__ti17DriveMediaRequest",
        Ok(
            "DriveMediaRequest type_info node",
        ),
    ),
    (
        "__ti18DriveFormatRequest",
        Ok(
            "DriveFormatRequest type_info node",
        ),
    ),
    (
        "__ti27DriveCreateDirectoryRequest",
        Ok(
            "DriveCreateDirectoryRequest type_info node",
        ),
    ),
    (
        "__ti28DriveDestroyDirectoryRequest",
        Ok(
            "DriveDestroyDirectoryRequest type_info node",
        ),
    ),
    (
        "__ti21DriveFindFirstRequest",
        Ok(
            "DriveFindFirstRequest type_info node",
        ),
    ),
    (
        "__ti20DriveFindNextRequest",
        Ok(
            "DriveFindNextRequest type_info node",
        ),
    ),
    (
        "__ti21DriveFindCloseRequest",
        Ok(
            "DriveFindCloseRequest type_info node",
        ),
    ),
    (
        "__ti23DriveFileDestroyRequest",
        Ok(
            "DriveFileDestroyRequest type_info node",
        ),
    ),
    (
        "__ti18DriveCancelRequest",
        Ok(
            "DriveCancelRequest type_info node",
        ),
    ),
    (
        "__ti7radFile",
        Ok(
            "radFile type_info node",
        ),
    ),
    (
        "__ti8IRadFile",
        Ok(
            "IRadFile type_info node",
        ),
    ),
    (
        "__ti16radInstanceDrive",
        Ok(
            "radInstanceDrive type_info node",
        ),
    ),
    (
        "__ti9IRadDrive",
        Ok(
            "IRadDrive type_info node",
        ),
    ),
    (
        "__ti14radDriveThread",
        Ok(
            "radDriveThread type_info node",
        ),
    ),
    (
        "__ti12PtrHashTable",
        Ok(
            "PtrHashTable type_info node",
        ),
    ),
    (
        "__tit12RefHashTable1Z9IRefCount",
        Ok(
            "RefHashTable<IRefCount> type_info node",
        ),
    ),
    (
        "__tit9HashTable1Z9IRefCount",
        Ok(
            "HashTable<IRefCount> type_info node",
        ),
    ),
    (
        "__ti12radLoadStore",
        Ok(
            "radLoadStore type_info node",
        ),
    ),
    (
        "__ti13SafeCasterObj",
        Ok(
            "SafeCasterObj type_info node",
        ),
    ),
    (
        "__tiQ214radLoadManager9QueueItem",
        Ok(
            "radLoadManager::QueueItem type_info node",
        ),
    ),
    (
        "__ti14radLoadManager",
        Ok(
            "radLoadManager type_info node",
        ),
    ),
    (
        "__tit12RefHashTable1Z17radLoadFileLoader",
        Ok(
            "RefHashTable<radLoadFileLoader> type_info node",
        ),
    ),
    (
        "__tit9HashTable1Z17radLoadFileLoader",
        Ok(
            "HashTable<radLoadFileLoader> type_info node",
        ),
    ),
    (
        "__tit12RefHashTable1Z17radLoadDataLoader",
        Ok(
            "RefHashTable<radLoadDataLoader> type_info node",
        ),
    ),
    (
        "__tit9HashTable1Z17radLoadDataLoader",
        Ok(
            "HashTable<radLoadDataLoader> type_info node",
        ),
    ),
    (
        "__tit8RefQueue1Z13radLoadObject",
        Ok(
            "RefQueue<radLoadObject> type_info node",
        ),
    ),
    (
        "__tit5Queue1Z13radLoadObject",
        Ok(
            "Queue<radLoadObject> type_info node",
        ),
    ),
    (
        "__tit8RefQueue1Z15radLoadCallback",
        Ok(
            "RefQueue<radLoadCallback> type_info node",
        ),
    ),
    (
        "__tit5Queue1Z15radLoadCallback",
        Ok(
            "Queue<radLoadCallback> type_info node",
        ),
    ),
    (
        "__ti23radLoadUpdatableRequest",
        Ok(
            "radLoadUpdatableRequest type_info node",
        ),
    ),
    (
        "__ti8PtrQueue",
        Ok(
            "PtrQueue type_info node",
        ),
    ),
    (
        "__ti14radLoadRequest",
        Ok(
            "radLoadRequest type_info node",
        ),
    ),
    (
        "__ti17radLoadBaseStream",
        Ok(
            "radLoadBaseStream type_info node",
        ),
    ),
    (
        "__ti17radLoadDataStream",
        Ok(
            "radLoadDataStream type_info node",
        ),
    ),
    (
        "__ti17radLoadFileStream",
        Ok(
            "radLoadFileStream type_info node",
        ),
    ),
    (
        "__ti19radLoadLoaderStream",
        Ok(
            "radLoadLoaderStream type_info node",
        ),
    ),
    (
        "__tiQ217radLoadFileStream8Callback",
        Ok(
            "radLoadFileStream::Callback type_info node",
        ),
    ),
    (
        "__ti22_IO_ostream_withassign",
        Ok(
            "_IO_ostream_withassign type_info node",
        ),
    ),
    (
        "__ti7ostream",
        Ok(
            "ostream type_info node",
        ),
    ),
    (
        "__ti22_IO_istream_withassign",
        Ok(
            "_IO_istream_withassign type_info node",
        ),
    ),
    (
        "__ti7istream",
        Ok(
            "istream type_info node",
        ),
    ),
    (
        "__ti8iostream",
        Ok(
            "iostream type_info node",
        ),
    ),
    (
        "__ti3ios",
        Ok(
            "ios type_info node",
        ),
    ),
    (
        "__ti7filebuf",
        Ok(
            "filebuf type_info node",
        ),
    ),
    (
        "__ti12ostdiostream",
        Ok(
            "ostdiostream type_info node",
        ),
    ),
    (
        "__ti12istdiostream",
        Ok(
            "istdiostream type_info node",
        ),
    ),
    (
        "__ti8stdiobuf",
        Ok(
            "stdiobuf type_info node",
        ),
    ),
    (
        "__ti13bad_exception",
        Ok(
            "bad_exception type_info node",
        ),
    ),
    (
        "__ti17__class_type_info",
        Ok(
            "__class_type_info type_info node",
        ),
    ),
    (
        "__ti16__user_type_info",
        Ok(
            "__user_type_info type_info node",
        ),
    ),
    (
        "__ti14__si_type_info",
        Ok(
            "__si_type_info type_info node",
        ),
    ),
    (
        "__ti10bad_typeid",
        Ok(
            "bad_typeid type_info node",
        ),
    ),
    (
        "__ti8bad_cast",
        Ok(
            "bad_cast type_info node",
        ),
    ),
    (
        "__ti17__array_type_info",
        Ok(
            "__array_type_info type_info node",
        ),
    ),
    (
        "__ti16__ptmd_type_info",
        Ok(
            "__ptmd_type_info type_info node",
        ),
    ),
    (
        "__ti16__ptmf_type_info",
        Ok(
            "__ptmf_type_info type_info node",
        ),
    ),
    (
        "__ti16__func_type_info",
        Ok(
            "__func_type_info type_info node",
        ),
    ),
    (
        "__ti19__builtin_type_info",
        Ok(
            "__builtin_type_info type_info node",
        ),
    ),
    (
        "__ti16__attr_type_info",
        Ok(
            "__attr_type_info type_info node",
        ),
    ),
    (
        "__ti19__pointer_type_info",
        Ok(
            "__pointer_type_info type_info node",
        ),
    ),
]
