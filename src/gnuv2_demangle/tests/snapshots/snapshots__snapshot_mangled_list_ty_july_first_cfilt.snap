---
source: src/gnuv2_demangle/tests/snapshots.rs
expression: "demangle_lines(contents, &config)"
---
[
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidNamespaceOnNamespacedGlobal(
            "",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidNamespaceOnNamespacedGlobal(
            "",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Main_CheckInputs(void)",
    ),
    Ok(
        "Main_CheckJoypadButtons(JoyPad *)",
    ),
    Ok(
        "Main_CheckJoypad(JoyPad *)",
    ),
    Ok(
        "DrawCheatLines(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "JumpCheat(void)",
    ),
    Ok(
        "EnableBosses(void)",
    ),
    Ok(
        "ShowWorldPosition(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidNamespaceOnNamespacedGlobal(
            "",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DrawEnvCube(void)",
    ),
    Ok(
        "DrawGameScreen(void)",
    ),
    Ok(
        "PostDrawSortFunc(void const *, void const *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Crate_FindSafeGemPos(Vector *, Vector *)",
    ),
    Ok(
        "Crate_AddGems(OpalCrate *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Path_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CalcNewVel(Vector *, Vector *, float, CollisionResult *, CollisionType)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "NodeOverride_ClampTargetRay(NodeOverride *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SendMessage_ToObjective(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PointInBoundingBox(Model *, Vector *, float)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SendMessage_ToObjective(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ReadGalleryINI(void)",
    ),
    Ok(
        "Gallery_CreateButtons(void)",
    ),
    Ok(
        "FrontEnd_Gallery_ConfirmPage(void)",
    ),
    Ok(
        "ShowBio(void)",
    ),
    Ok(
        "UpdateBoomerang(void)",
    ),
    Ok(
        "FrontEnd_Gallery_CheckInput(void)",
    ),
    Ok(
        "DrawBoomerang(void)",
    ),
    Ok(
        "ShowNextItem(void)",
    ),
    Ok(
        "ShowPrevItem(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MainMenu_CreateButtons(void)",
    ),
    Ok(
        "LoadEnvCube(void)",
    ),
    Ok(
        "FrontEnd_MainMenu_ConfirmPage(void)",
    ),
    Ok(
        "FrontEnd_MainMenu_CheckInput(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Init_ThunderEggs(void)",
    ),
    Ok(
        "PauseScreen_Reset(void)",
    ),
    Ok(
        "PauseScreen_CheckInput(void)",
    ),
    Ok(
        "DrawBackground(void)",
    ),
    Ok(
        "Draw_ThunderEggs(void)",
    ),
    Ok(
        "DrawPauseHud(void)",
    ),
    Ok(
        "PauseScreen_ConfirmPage(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "UpdateBilbies(void)",
    ),
    Ok(
        "UpdateCogs(void)",
    ),
    Ok(
        "UpdateEggs(void)",
    ),
    Ok(
        "UpdateGem(void)",
    ),
    Ok(
        "UpdateStopWatch(void)",
    ),
    Ok(
        "PauseScreen_GameInfo_CheckInput(void)",
    ),
    Ok(
        "DrawBilbies(void)",
    ),
    Ok(
        "DrawCogs(void)",
    ),
    Ok(
        "DrawCollectable(void)",
    ),
    Ok(
        "DrawEggs(void)",
    ),
    Ok(
        "DrawGem(void)",
    ),
    Ok(
        "DrawStopWatch(void)",
    ),
    Ok(
        "ResetBilbies(void)",
    ),
    Ok(
        "ResetCogs(void)",
    ),
    Ok(
        "ResetCollectable(void)",
    ),
    Ok(
        "ResetEggs(void)",
    ),
    Ok(
        "ResetGem(void)",
    ),
    Ok(
        "ResetStopWatch(void)",
    ),
    Ok(
        "UpdateCollectable(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_GameTotals_CheckInput(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SaveControlSettings(void)",
    ),
    Ok(
        "CheckInputControllerConfig(void)",
    ),
    Ok(
        "PauseScreen_OptionControls_CheckInput(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ResetScreenSettings(void)",
    ),
    Ok(
        "SaveScreenSettings(void)",
    ),
    Ok(
        "CheckInputMenu(void)",
    ),
    Ok(
        "CheckInputChangeScreen(void)",
    ),
    Ok(
        "CheckInputSetPosition(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SaveSoundSettings(void)",
    ),
    Ok(
        "PauseScreen_OptionSound_CheckInput(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "UpdateBoomerang(void)",
    ),
    Ok(
        "PauseScreen_RangInfo_CheckInput(void)",
    ),
    Ok(
        "DrawBoomerang(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CheckInput(void)",
    ),
    Ok(
        "OnConfirm(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidNamespaceOnNamespacedGlobal(
            "",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidNamespaceOnNamespacedGlobal(
            "",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "AnimDefCompareFunc(AnimDef *, AnimDef *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "NearestPointOnTriEdge(Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "NearestPointOnQuadEdge(Vector *, Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "NearestPointOnPolyEdge(Vector *, Vector *, int *, int)",
    ),
    Ok(
        "PointInPoly(Vector *, Vector *, Vector *, int *, int)",
    ),
    Ok(
        "SweepSphereToPoly(SphereRay *, Vector *, int *, int, Vector *, Vector *, CollisionResult *)",
    ),
    Ok(
        "SweepSphereToTri(SphereRay *, Vector *, Vector *, Vector *, Vector *, Vector *, CollisionResult *)",
    ),
    Ok(
        "Collision_AddItem(Item *)",
    ),
    Ok(
        "StoreSphereResult(Item *, Vector *, CollisionResult *, float)",
    ),
    Ok(
        "Collision_PolyCollide(Vector *, Vector *, Vector *, CollisionResult *, int)",
    ),
    Ok(
        "Collision_PolySweepSphereCollide(SphereRay *, CollisionResult *, int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EntryCompare(void *, void *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ParseBadFile(char *, MKAnimScriptTemplate *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PackageIntercept(char *, int *, void *, int *)",
    ),
    Ok(
        "AddToPackage(char *)",
    ),
    Ok(
        "ProcessPackageFilenames(void)",
    ),
    Ok(
        "MKPackage_LoadInternal(bool)",
    ),
    Ok(
        "PackageSort(void const *, void const *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CalcBoundingBox(MKProp *, BoundingVolume *)",
    ),
    Ok(
        "SMDrawProp(void *, int, float)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidNamespaceOnNamespacedGlobal(
            "",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DebugOptionChanged(void *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Input_UpdatePort(int, int, int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CalculateDolbySurroundVolumes(unsigned char, int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CalculateVRamSize(int, int, int, int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_libinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_libinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_libinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_libinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_libinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_libinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_libinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_libinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_libinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "unexpected_func",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_libinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "sprint",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "sbprintf",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "sprint",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "sbprintf",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "clz_tab",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "clz_tab",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "clz_tab",
        ),
    ),
    Err(
        InvalidSpecialMethod(
            "clz_tab",
        ),
    ),
    Ok(
        "MKWaterProp::CalcNextMixValues(Vector *, Vector *)",
    ),
    Ok(
        "FrontEnd_Init(void)",
    ),
    Ok(
        "CuttleFish_LoadResources(void)",
    ),
    Ok(
        "PlatformRider::ToLocalDir(Vector *)",
    ),
    Err(
        UnrecognizedSpecialMethod(
            "ps2_klibinfo",
        ),
    ),
    Ok(
        "CaveBatObjective virtual table",
    ),
    Ok(
        "Bat::Reset(void)",
    ),
    Ok(
        "A1FrillObjective::Init(GameObjDesc *)",
    ),
    Ok(
        "FrillLizard::ChaseInit(void)",
    ),
    Ok(
        "CritterField2LoadInfo::LoadDone(Matrix *)",
    ),
    Ok(
        "TyParticleManager::Init(void)",
    ),
    Ok(
        "BoulderTrap::InitModule(void)",
    ),
    Ok(
        "Lightning::DrawDebugInfo(View *)",
    ),
    Ok(
        "Shark::UpdateMovement(void)",
    ),
    Ok(
        "WaterfallStreamStruct::CreateNewSplash(float, int)",
    ),
    Ok(
        "UWWobbleView(void)",
    ),
    Ok(
        "GameCamera_View(void)",
    ),
    Ok(
        "BoomerangAnimInfo::Deinit(void)",
    ),
    Ok(
        "ShadowBatValve::Idle(void)",
    ),
    Ok(
        "DDASession::bSessionStarted",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Barracuda::Reset(void)",
    ),
    Ok(
        "Leech::Attack(void)",
    ),
    Ok(
        "Yabby::AttackDeinit(void)",
    ),
    Ok(
        "BurnerObjective::Init(GameObjDesc *)",
    ),
    Ok(
        "SaveStates_SetSecondRang(bool)",
    ),
    Ok(
        "global constructors keyed to TreasureChest_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rock::Update(void)",
    ),
    Ok(
        "ParticleSystemManager_Update(void)",
    ),
    Ok(
        "StaticProp::Deinit(void)",
    ),
    Ok(
        "FrillLizard::Deinit(void)",
    ),
    Ok(
        "BlueTongueThrower::DeathInit(void)",
    ),
    Ok(
        "ModuleInfo<WeatherProp>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "unsigned int type_info function",
    ),
    Ok(
        "TrapdoorSpider::Jump(void)",
    ),
    Ok(
        "TimeAttack virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverride::Path_Create(void *)",
    ),
    Ok(
        "ProgressBar::Update(void)",
    ),
    Ok(
        "BreakAndTurnData::UpdateChecks(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FootEffect::SpawnMudEffect(Vector *, float, BoundingVolume *, float, bool, Vector *)",
    ),
    Ok(
        "SoundMaterial::Init(KromeIni *, unsigned char, float, float)",
    ),
    Ok(
        "GreySmoke::pSmokeMat",
    ),
    Ok(
        "SpeedboatCrestWake::Init(float, char *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera_GetDistanceType(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPigAnims::Init(void)",
    ),
    Ok(
        "TyParticleManager::SpawnWaterDropGreen(Vector *, Vector *, float)",
    ),
    Ok(
        "Parser::IsEndOfData(void)",
    ),
    Ok(
        "AuroraKid::SetAngle(void)",
    ),
    Ok(
        "Neddy::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<Collapsible>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<InvisiCrate> virtual table",
    ),
    Ok(
        "SpikeyIce_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Fluffy::FireIceInit(void)",
    ),
    Ok(
        "ModuleInfo<Leech> virtual table",
    ),
    Ok(
        "BlueTongueThrower::PickUpDeinit(void)",
    ),
    Ok(
        "TriggerSphereProp::Update(void)",
    ),
    Ok(
        "Draw_DoDraws(void)",
    ),
    Ok(
        "GameSubStateFSM::InGameDraw(void)",
    ),
    Ok(
        "__attr_type_info virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model_GetNmbrOfVertices(ModelTemplate *, int, int, int)",
    ),
    Ok(
        "ModuleInfo<SnowGun>::Init(void)",
    ),
    Ok(
        "CameraOverrideFixedPoint_Reset(void)",
    ),
    Ok(
        "Model::ExploreNextSubObject(ModelExplorer *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "C3Chest::Reset(void)",
    ),
    Ok(
        "Ty::GetSpeedFromJoyPad(float)",
    ),
    Ok(
        "global constructors keyed to TrapdoorSpider_LoadResources(KromeIni *)",
    ),
    Ok(
        "Dma::AddGifTag_LwrUpr(unsigned long, unsigned long)",
    ),
    Ok(
        "LoadLevel_LoadString(KromeIniLine *, char *, char *, int, int)",
    ),
    Ok(
        "Spear::Fire(Vector *, Vector *)",
    ),
    Ok(
        "ShadowBat::KissOfDeathChaseInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BoomerangManager::HasFired(void)",
    ),
    Ok(
        "DDASession::StoreEnemyDeathInfo(DDAEnemyDamageCause)",
    ),
    Ok(
        "Blitter_Line3D::DrawNoMat(int, float)",
    ),
    Ok(
        "Video_CreateInternal(Video *, char *, Material *, bool)",
    ),
    Ok(
        "Model::GetRefPointIndex(int)",
    ),
    Ok(
        "Leech::FireInit(void)",
    ),
    Ok(
        "ShearsStruct::Load(ShearsLoadInfo *)",
    ),
    Ok(
        "Emu::DeinitRelaxed(void)",
    ),
    Ok(
        "GetNextRang(BoomerangType)",
    ),
    Ok(
        "TyContext::Init(float, float)",
    ),
    Ok(
        "Friend::GetDesc(void)",
    ),
    Ok(
        "KenOath_LoadResources(KromeIni *)",
    ),
    Ok(
        "BaseCritter::Init(GameObjDesc *)",
    ),
    Ok(
        "ChuteLog::UpdateGround(void)",
    ),
    Ok(
        "WaterSlideSection::Load(WayPointLoadInfo *)",
    ),
    Ok(
        "ShadowBat::GetFreeStalactite(void)",
    ),
    Ok(
        "BadBoonie virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKGrassGen::UploadTypeData(void)",
    ),
    Ok(
        "global constructors keyed to ChuteLog_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "NewGameVideo_Update(void)",
    ),
    Ok(
        "BlueTongue_HitWithBoulder(EnemyObject *)",
    ),
    Ok(
        "Projectile::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScubaFrill::ChaseInit(void)",
    ),
    Ok(
        "Basket::Update(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "mprec_tinytens",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "YabbyStalactite::Shaking(void)",
    ),
    Ok(
        "SpinningLog::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "PathFindingObject::GetNextPos(void)",
    ),
    Ok(
        "Image::LoadTIFF(unsigned char *, unsigned int)",
    ),
    Ok(
        "Particle_BiteGlow_Init(ParticleSystem **, Matrix *, int)",
    ),
    Ok(
        "LevelData::Init(void)",
    ),
    Ok(
        "SoundEvent::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "hrow_type_match",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKParticleGen::UploadVUData(View *, Vector *, Vector *)",
    ),
    Ok(
        "TimeTrial_DidOpponentWin(void)",
    ),
    Ok(
        "Lenny::Init(GameObjDesc *)",
    ),
    Ok(
        "ModuleInfo<WarpFlower>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SoundEventHelper::Message(MKMessage *)",
    ),
    Ok(
        "global constructors keyed to ScrubTurkey::checkToIncCatchAttemps",
    ),
    Ok(
        "Animation::SetAnimSpeedMultiplier(float)",
    ),
    Ok(
        "Shears_Line(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::FallMove(float, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<SynkerFrillLizard> virtual table",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_A2_Draw(void)",
    ),
    Ok(
        "global constructors keyed to Fluffy_LoadResources(KromeIni *)",
    ),
    Ok(
        "Speedboat::Message(MKMessage *)",
    ),
    Ok(
        "Lava::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "ModuleInfo<Target> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::SharkCageLeaveInit(void)",
    ),
    Ok(
        "BlueTongue::PatrolInit(void)",
    ),
    Ok(
        "BuzzSaw2::SetState(BuzzSaw2States)",
    ),
    Ok(
        "FireworksCrate virtual table",
    ),
    Ok(
        "ModuleInfo<BossCass> virtual table",
    ),
    Ok(
        "Sly::GetUpInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverrideManager::Destroy(CameraOverride *)",
    ),
    Ok(
        "StaticSpikes_End(void)",
    ),
    Ok(
        "SpecialPickup_LoadResources(KromeIni *)",
    ),
    Ok(
        "UIButton::Reset(void)",
    ),
    Ok(
        "IceRamp::LaunchedUpdate(void)",
    ),
    Ok(
        "Bull_DDA::Update(MovementDescriptor *)",
    ),
    Ok(
        "BoomerangWeapon::Update(Matrix *, Vector *)",
    ),
    Ok(
        "Julius_LoadResources(KromeIni *)",
    ),
    Ok(
        "AuroraKid::IdleInit(void)",
    ),
    Ok(
        "ShadowBat::GetCurrentHomePos(void)",
    ),
    Ok(
        "MobilePlatform virtual table",
    ),
    Ok(
        "CogsHud::Init(void)",
    ),
    Ok(
        "QuatRotation::IsNormalised(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "main",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Teleporter::Init(GameObjDesc *)",
    ),
    Ok(
        "EnemyDescriptor::InitAnimEventDesc(Tools_AnimEvent *, int, bool)",
    ),
    Ok(
        "ShadowBat::Reset(void)",
    ),
    Ok(
        "MKWater::pDebugMaterial",
    ),
    Ok(
        "Lightning::Deinit(void)",
    ),
    Ok(
        "StaticFXProp::LoadDone(void)",
    ),
    Ok(
        "Geyser::BlockedUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::InitFallDive(void)",
    ),
    Ok(
        "FrillLizard::KnockedOffTowerInit(void)",
    ),
    Ok(
        "WaterfallPointStruct::pointEnvelope",
    ),
    Ok(
        "DropPontoon::Message(MKMessage *)",
    ),
    Ok(
        "__func_type_info type_info node",
    ),
    Ok(
        "ModuleInfo<Fluffy>::ConstructObject(void *)",
    ),
    Ok(
        "Ty::LearnToDive(void)",
    ),
    Ok(
        "Bull::ChargeDeinit(void)",
    ),
    Ok(
        "SmallCrab::UpdateLogic(void)",
    ),
    Ok(
        "Ty::InitRangChange(void)",
    ),
    Ok(
        "TreasureChest::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CritterField2LoadInfo::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "NinjaGecko::Leap(void)",
    ),
    Ok(
        "FinishLine_Show(void)",
    ),
    Err(
        InvalidNamespaceOnNamespacedGlobal(
            "GLOBAL_",
        ),
    ),
    Ok(
        "WhirlyWind::Message(MKMessage *)",
    ),
    Ok(
        "StaticFXPropDesc::Load(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Material::pRenderNodes",
    ),
    Ok(
        "ScrubTurkey::CheckForCollisionWithTurkeys(void)",
    ),
    Ok(
        "long long type_info function",
    ),
    Ok(
        "Tick::DetachInit(void)",
    ),
    Ok(
        "Basket::Spawn(Vector *)",
    ),
    Ok(
        "UIImage::Init(Material *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Spider::bStateChange",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "View::TransformPoint3Dto2D(Vector *, Vector *)",
    ),
    Ok(
        "Critter2::Draw(void)",
    ),
    Ok(
        "MKAnimScript_DeinitModule(void)",
    ),
    Ok(
        "PauseScreen_RangInfo_Update(void)",
    ),
    Ok(
        "MKSceneManager::DrawDynamicProps(int)",
    ),
    Ok(
        "MKAnimScript::SetAnim(MKAnim *)",
    ),
    Ok(
        "Input_EnableKeyMapping(bool)",
    ),
    Ok(
        "WaterSlideData::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Skink::RetreatInit(void)",
    ),
    Ok(
        "ShadowBat::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PhysicsObject::Reset(void)",
    ),
    Ok(
        "ModuleInfo<KingFisherField>::ConstructObject(void *)",
    ),
    Ok(
        "LODManager::Init(Model *, int, LODDescriptor *)",
    ),
    Ok(
        "Sly::UpdateRangs(void)",
    ),
    Ok(
        "ModuleInfo<WaterPipeObjective> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LODDescriptor::Init(KromeIni *, char *)",
    ),
    Ok(
        "RenderTexture_GetWaterBlend(void)",
    ),
    Ok(
        "LedgePullUpData::Deinit(void)",
    ),
    Ok(
        "ElevatorDescriptor virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tendril::Update(float, Vector *, float)",
    ),
    Ok(
        "BlueTongueThrower::ThrowDeinit(void)",
    ),
    Ok(
        "StopwatchStruct::Deinit(void)",
    ),
    Ok(
        "global constructors keyed to ROPE_MATERIAL_NAME",
    ),
    Ok(
        "Input_AllPadsWasButtonReleased(InputDevices *, int)",
    ),
    Ok(
        "Boomerang_GetModelName(BoomerangType)",
    ),
    Ok(
        "Elle::DeckChairIdle(void)",
    ),
    Ok(
        "ModuleInfo<WeatherProp> virtual table",
    ),
    Ok(
        "GameCamera_GetPos(void)",
    ),
    Ok(
        "MusicalIcicle::FallIfActive(bool)",
    ),
    Ok(
        "Setup_Line(KromeIniLine *)",
    ),
    Ok(
        "Tools_BitField::Str(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::FakeWall_CanActivate(void)",
    ),
    Ok(
        "BushPig::GroundCollision(void)",
    ),
    Ok(
        "Dma::AddGif_REGLIST(unsigned long)",
    ),
    Ok(
        "YabbyStalactite::Message(MKMessage *)",
    ),
    Ok(
        "Image::LoadTIFF(char *)",
    ),
    Ok(
        "Heap_MemoryUsed(void)",
    ),
    Ok(
        "Speedboat::Init(GameObjDesc *)",
    ),
    Ok(
        "ScrubTurkey::PickUpEgg(void)",
    ),
    Ok(
        "RingoArm::Update(void)",
    ),
    Ok(
        "Emu::InitRelaxed(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<TreasureChest>::ConstructObject(void *)",
    ),
    Ok(
        "CuttleFish virtual table",
    ),
    Ok(
        "ZoomerangHud::Update(void)",
    ),
    Ok(
        "Bull::AntHillScanner(GameObject **, bool)",
    ),
    Ok(
        "BilbyStruct::Init(BilbyLoadInfo *)",
    ),
    Ok(
        "Roach::Idle(void)",
    ),
    Ok(
        "Lasso::InitIdle(void)",
    ),
    Ok(
        "ProgressBar::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "UniformSpline::GetPosition(float)",
    ),
    Ok(
        "ExactMag(float, float)",
    ),
    Ok(
        "System_IsDebugEnabled(void)",
    ),
    Ok(
        "System_SetDebugCameraSpeedMultiplier(float)",
    ),
    Ok(
        "SnowSpider::Reset(void)",
    ),
    Ok(
        "ScubaFrill::AttackInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Speedboat>::Init(void)",
    ),
    Ok(
        "SpecialPickupStruct::Draw(void)",
    ),
    Ok(
        "BunyipStruct::Appear(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tick::ResetToStart(void)",
    ),
    Ok(
        "SpinningLog::Update(void)",
    ),
    Ok(
        "EnemyObject::Deinit(void)",
    ),
    Ok(
        "BushPig::ObjectCollideCheck(GameObject *, Vector *)",
    ),
    Ok(
        "Gate::Reset(void)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_B3_Update(void)",
    ),
    Ok(
        "bad_alloc type_info node",
    ),
    Ok(
        "Generator virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RockProjectile::Drop(float)",
    ),
    Ok(
        "ParticleEmitter::Init(ParticleSystem *, float)",
    ),
    Ok(
        "global constructors keyed to BubbleSpawner_LoadResources(KromeIni *)",
    ),
    Ok(
        "Geyser::PoofUpdate(void)",
    ),
    Ok(
        "Julius virtual table",
    ),
    Ok(
        "ModuleInfo<TriggerBoxProp>::ConstructObject(void *)",
    ),
    Ok(
        "Model::GetRefPointIndex(char *)",
    ),
    Ok(
        "global constructors keyed to BossCass_LoadResources(KromeIni *)",
    ),
    Ok(
        "Dma::AddGif_AD_ALPHA_1(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lenny::Idle(void)",
    ),
    Ok(
        "BoulderTrap::LoadDone(void)",
    ),
    Ok(
        "Lightning::Init(LightningInit *)",
    ),
    Ok(
        "TrapdoorSpider::UpdateModelNormal(void)",
    ),
    Ok(
        "Roach::PatrolInit(void)",
    ),
    Ok(
        "ModuleInfo<Gem>::Init(void)",
    ),
    Ok(
        "Ringo virtual table",
    ),
    Ok(
        "DiveRing::diveRingCounter",
    ),
    Ok(
        "SnowPile::Draw(void)",
    ),
    Ok(
        "StaticPropDescriptor virtual table",
    ),
    Ok(
        "Ty::CheckForEdge(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Fluffy_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BoomerangManager::Disable(void)",
    ),
    Ok(
        "Dma::AddGif_AD_TEX1_2(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "MorayEel::Deinit(void)",
    ),
    Ok(
        "GameCamera_SetNewEnemy(void)",
    ),
    Ok(
        "GameCamera::UseGlideCamera(bool)",
    ),
    Ok(
        "ShoalFish virtual table",
    ),
    Ok(
        "ModuleInfo<MorayEel> virtual table",
    ),
    Ok(
        "ModuleInfo<Barracuda>::ConstructObject(void *)",
    ),
    Ok(
        "CameraOverridePath_Line(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Skink::BeerAttack(void)",
    ),
    Ok(
        "RhinoGround::Idle(void)",
    ),
    Ok(
        "ShadowBatStalactite::UpdateWorldMatrix(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "sflags",
        ),
    ),
    Ok(
        "FlameThrower::Enable(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Heap_DeinitModule(void)",
    ),
    Ok(
        "BlueTongue::Reset(void)",
    ),
    Ok(
        "Ty::AirToLandTransition(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Shark::Charge(void)",
    ),
    Ok(
        "Ty::InitIdleEdgeWobble(void)",
    ),
    Ok(
        "Ty::DeinitAfterDunny(void)",
    ),
    Ok(
        "ShadowBatStalactite::CollisionCheckForTy(void)",
    ),
    Ok(
        "RockProjectile::UpdatePickup(Vector *)",
    ),
    Ok(
        "GameCamera::DrawDebug(void)",
    ),
    Ok(
        "Gate::LoadDone(void)",
    ),
    Ok(
        "Portal::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKMem_InitModule(void)",
    ),
    Ok(
        "BadBoonie::RunToWaypoint_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Gecko::IdleState(void)",
    ),
    Ok(
        "BezierPathFollower::Init(Vector *, int, float, float, bool)",
    ),
    Ok(
        "AnimatingPropDesc::Load(KromeIni *)",
    ),
    Ok(
        "global constructors keyed to A1FrillObjective_LoadResources(KromeIni *)",
    ),
    Ok(
        "RhinoGround::PatrolAreaDeInit(void)",
    ),
    Ok(
        "Rhino::IsTyWithinBlockRange(void)",
    ),
    Ok(
        "Ibis::RunInit(void)",
    ),
    Ok(
        "UIModel::SetPosition(Vector *, char, View *)",
    ),
    Ok(
        "signed char type_info node",
    ),
    Ok(
        "FrillLizard::RunToTree(void)",
    ),
    Ok(
        "CrateStruct::Fall(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "KoalaKid::Reset(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "divdi3",
        ),
    ),
    Ok(
        "GameCamera::Fall_SetIdealDirection(Vector *)",
    ),
    Ok(
        "Critter2 virtual table",
    ),
    Ok(
        "__class_type_info::dcast(type_info const &, int, void *, type_info const *, void *) const",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "YMax(Vector *, float)",
    ),
    Ok(
        "RedButton::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "C3Actor::GetChestRefPoint(void)",
    ),
    Ok(
        "BossHud::Update(void)",
    ),
    Ok(
        "ModuleInfo<ScubaFrill> virtual table",
    ),
    Ok(
        "Rhino::InitPatrol(void)",
    ),
    Ok(
        "GameCamera::CameraOverride_Update(void)",
    ),
    Ok(
        "TyMemCard_Init(void)",
    ),
    Ok(
        "__class_type_info virtual table",
    ),
    Ok(
        "WhiteBat virtual table",
    ),
    Ok(
        "Elevator::GoingDownState(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tick::ApplyGravity(void)",
    ),
    Ok(
        "ModuleInfo<Flamerang> virtual table",
    ),
    Ok(
        "Sly::GenerateRandomPos(void)",
    ),
    Ok(
        "FrontEnd_NewGame_OnEnter(void)",
    ),
    Ok(
        "Rex::Init(GameObjDesc *)",
    ),
    Ok(
        "LilNeddy::FlinchInit(void)",
    ),
    Ok(
        "CritterField2::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Jeep::SetTyreMatrix(Vector *, Matrix *, float, float)",
    ),
    Ok(
        "System_CheckScreenMode(void)",
    ),
    Ok(
        "Animation::SetLocalToWorldDirty(void)",
    ),
    Ok(
        "Boomerang::DoDeflection(void)",
    ),
    Ok(
        "Portal::Intro(void)",
    ),
    Ok(
        "Ty::SetBounceOffFromPos(Vector *, float, bool)",
    ),
    Ok(
        "Tick::LogicUpdate(void)",
    ),
    Ok(
        "Skink::Block(void)",
    ),
    Ok(
        "PickupCounter::Init(GameObjDesc *)",
    ),
    Ok(
        "Vector::ClampMagnitude(Vector *, float)",
    ),
    Ok(
        "Frostyrang::Init(GameObjDesc *, BoomerangWeapon *)",
    ),
    Ok(
        "Bunyip_Show(void)",
    ),
    Ok(
        "Hud_InitBoomerangs(void)",
    ),
    Ok(
        "BonusPickup_Spawn(Vector *, BonusPickupType)",
    ),
    Ok(
        "CheckpointStruct::SetState(CheckpointState)",
    ),
    Ok(
        "Tick::Retarget(void)",
    ),
    Ok(
        "SpecialPickupStruct::Controlled(void)",
    ),
    Ok(
        "Aurora::CheckKidsStatus(void)",
    ),
    Ok(
        "Shark::CheckForExplosion(void)",
    ),
    Ok(
        "ShadowBatPipe::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Str_GetFilenameWithoutExtensionFromPath(char *)",
    ),
    Ok(
        "BoomerangWeapon::Fire(Vector *, Vector *)",
    ),
    Ok(
        "Shadow::Init(char *, Model *, float, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Aurora> virtual table",
    ),
    Ok(
        "Jeep_Active(void)",
    ),
    Ok(
        "ModuleInfo<SpiderCrate>::ConstructObject(void *)",
    ),
    Ok(
        "DirectLight::SetAmbient(Vector *)",
    ),
    Ok(
        "Animation::Dump(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Camera::InitModule(void)",
    ),
    Ok(
        "Tick::Hit(void)",
    ),
    Ok(
        "SpeedboatWake::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Shears_End(void)",
    ),
    Ok(
        "MKAnimScriptTemplate::UnpackTemplate(void)",
    ),
    Ok(
        "Wombat::RaceInit(void)",
    ),
    Ok(
        "EventMessage::Resolve(void)",
    ),
    Ok(
        "RingoArm::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<MiniGameObjective> virtual table",
    ),
    Ok(
        "Tick::HitInit(void)",
    ),
    Ok(
        "Muddie::Alert(void)",
    ),
    Ok(
        "WhirlyWind::Update_HeroSucked(void)",
    ),
    Ok(
        "Main_CheckKeyboard(void)",
    ),
    Ok(
        "System_GetCommandLineParameter(char *)",
    ),
    Ok(
        "MobilePlatform::UpdateMove(void)",
    ),
    Ok(
        "Bird::GetDesc(void)",
    ),
    Ok(
        "BilbyStruct::GetPos(void)",
    ),
    Ok(
        "Spider_Reset(void)",
    ),
    Ok(
        "MKWater::RemoveWaterPropsFromType(void)",
    ),
    Ok(
        "EnemyObject::CheckForBunyip(void)",
    ),
    Ok(
        "CrikeyCanister::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Elevator::BoomerHit(void)",
    ),
    Ok(
        "StaticFXProp::Init(GameObjDesc *)",
    ),
    Ok(
        "GasJet::UpdateLight(float)",
    ),
    Ok(
        "SpeedUpCrate_Add(Vector *, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "floatdidf",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpeedUpCrate::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::UseFakeWall(bool)",
    ),
    Ok(
        "BilbyStruct::RestoreFreeState(void)",
    ),
    Ok(
        "ModuleInfo<DropPontoon>::ConstructObject(void *)",
    ),
    Ok(
        "Boomerang::Deactivate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterPipe_LoadResources(KromeIni *)",
    ),
    Ok(
        "GCT_Trigger::TestPoint(Vector *)",
    ),
    Ok(
        "ModuleInfo<Aurora>::Init(void)",
    ),
    Ok(
        "Reeds_Add(int, Vector, Vector)",
    ),
    Ok(
        "Portal::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "LoadLevel_LoadInt(KromeIniLine *, char *, int *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SynkerBlueTongue::Init(GameObjDesc *)",
    ),
    Ok(
        "SnowRoo virtual table",
    ),
    Ok(
        "Frog_LoadResources(void)",
    ),
    Ok(
        "LilNeddy::IsAnimDone(void)",
    ),
    Ok(
        "Leech::Hit(void)",
    ),
    Ok(
        "Crikey::Message(MKMessage *)",
    ),
    Ok(
        "Parser::GrabIniSection(void)",
    ),
    Ok(
        "ModuleInfo<Yabby>::Init(void)",
    ),
    Ok(
        "ShadowBat::DeadDeinit(void)",
    ),
    Ok(
        "CogsHud::Update(void)",
    ),
    Ok(
        "Drum::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "InterpNode2(ScissorNode *, ScissorNode *, ScissorNode *, float, int)",
    ),
    Ok(
        "MKParticleGenType::Init(void)",
    ),
    Ok(
        "Crikey::StartEatingChumInit(void)",
    ),
    Ok(
        "StarTrail_LoadResources(void)",
    ),
    Ok(
        "Position_Line(KromeIniLine *)",
    ),
    Ok(
        "Groper::Cruise(void)",
    ),
    Ok(
        "ModuleInfo<Moth> virtual table",
    ),
    Ok(
        "Ty::LandToAirTransition(void)",
    ),
    Ok(
        "MKGrass_InitSineTable(void)",
    ),
    Ok(
        "Ty::GlideJumpTransition(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Muddie::BackOff(bool)",
    ),
    Ok(
        "IceCoolant::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Particle_DestroyASystem(ParticleSystem **, float)",
    ),
    Ok(
        "Eel::Attack(void)",
    ),
    Ok(
        "Wombat::Turn(float)",
    ),
    Ok(
        "MorayEel::BlendToRetreat(void)",
    ),
    Ok(
        "Jeep::InitIdle(void)",
    ),
    Ok(
        "RockCollection::Init(int)",
    ),
    Ok(
        "Rex::LoadDone(void)",
    ),
    Ok(
        "MKMemoryCard_Update(void)",
    ),
    Ok(
        "Groper::SwallowCruiseDeinit(void)",
    ),
    Ok(
        "FrillLizard::ThrowBurningJunkDeinit(void)",
    ),
    Ok(
        "TyIdleAnimTable::Init(MKAnimScript *)",
    ),
    Ok(
        "Particle_Special_Create(ParticleSystem **, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "ChumBox::Init(GameObjDesc *)",
    ),
    Ok(
        "File_IsBusy(int)",
    ),
    Ok(
        "Rhino::Flip(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Shatterable> virtual table",
    ),
    Ok(
        "ModuleInfo<Burner>::Init(void)",
    ),
    Ok(
        "Blitter_Cylinder::Draw(int)",
    ),
    Ok(
        "Rhino virtual table",
    ),
    Ok(
        "TyBite::DiveBiteToFall(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LilNeddy virtual table",
    ),
    Ok(
        "MKPackage_Free(void)",
    ),
    Ok(
        "Ty::HeadTurningSetNewOffset(void)",
    ),
    Ok(
        "BonusPickup::Spawn(Vector *, Vector *)",
    ),
    Ok(
        "Bird_LoadResources(void)",
    ),
    Ok(
        "__attr_type_info type_info node",
    ),
    Ok(
        "Gecko::SharedUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to Julius_LoadResources(KromeIni *)",
    ),
    Ok(
        "WhirlyWind::LoadDone(void)",
    ),
    Ok(
        "Ty::DeinitLongFall(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Crikey::CheckSplash(void)",
    ),
    Ok(
        "Hud_DecrementBossHealth(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWave::Update(void)",
    ),
    Ok(
        "TyMemCard_FetchDDA(void)",
    ),
    Ok(
        "MobilePlatform::Update(void)",
    ),
    Ok(
        "Jitterer::offsets",
    ),
    Ok(
        "Flame::Deinit(void)",
    ),
    Ok(
        "Input_WasDirectionPressed(InputDevices, int, InputDevices *)",
    ),
    Ok(
        "ShadowBat::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "OpalCollector::Idle(void)",
    ),
    Ok(
        "BoulderTrap::SpawnBoulder(void)",
    ),
    Ok(
        "LODEntry::Init(Model *)",
    ),
    Ok(
        "Fluffy::EmitSteam(void)",
    ),
    Ok(
        "NinjaGecko::nThrowHandBone",
    ),
    Ok(
        "BurnableDescriptor::Load(KromeIni *)",
    ),
    Ok(
        "BubbleSpawner virtual table",
    ),
    Ok(
        "Game_Deinit(void)",
    ),
    Ok(
        "global constructors keyed to Lava_LoadResources(KromeIni *)",
    ),
    Ok(
        "Dma::Clear(void)",
    ),
    Ok(
        "TyBite::DeinitBiteUncharge(void)",
    ),
    Ok(
        "KoalaKid::Saved(void)",
    ),
    Ok(
        "Flamerang::UpdateParticleEffect(void)",
    ),
    Ok(
        "Ty::DeinitGlideJump(void)",
    ),
    Ok(
        "GameCamera::UseFallCamera(bool)",
    ),
    Ok(
        "Target::Idle(void)",
    ),
    Ok(
        "EventMessage::Send(void)",
    ),
    Ok(
        "HudCounter::Draw(void)",
    ),
    Ok(
        "MetalSpikes::CheckForTy(void)",
    ),
    Ok(
        "global constructors keyed to Croc_LoadResources(KromeIni *)",
    ),
    Ok(
        "Skink::RetreatDeinit(void)",
    ),
    Ok(
        "DropPontoon::Reset(void)",
    ),
    Ok(
        "Rhino::StopAggressive(void)",
    ),
    Ok(
        "WaterTankStruct::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScrubTurkey::Message(MKMessage *)",
    ),
    Ok(
        "Muddie::DeathDeinit(void)",
    ),
    Ok(
        "DialogEffectManager::Deinit(void)",
    ),
    Ok(
        "TyBite::BiteCharge(void)",
    ),
    Ok(
        "AntHill::Broken(void)",
    ),
    Ok(
        "global constructors keyed to AntHill_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Explosion_LoadResources(void)",
    ),
    Ok(
        "Sheila_GetPos(void)",
    ),
    Ok(
        "WarpFlower::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "LOD_Init(int)",
    ),
    Ok(
        "CaveBat::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<SharkCage> virtual table",
    ),
    Ok(
        "GameData::SetBossDefeated(ZoneNumber, bool)",
    ),
    Ok(
        "Dma::AddGif_AD_FOGCOL(unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "Ty::TyOnPlatform(void)",
    ),
    Ok(
        "TrapdoorSpider::Init(GameObjDesc *)",
    ),
    Ok(
        "LoadLevel_LoadFloatRange(KromeIniLine *, char *, float *, float *)",
    ),
    Ok(
        "MKAnimScript::GetEvent(int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Talisman> virtual table",
    ),
    Ok(
        "FlameThrower::Deinit(void)",
    ),
    Ok(
        "Boulder::CreateHitFX(void)",
    ),
    Ok(
        "Crikey::DoHurt(Vector *)",
    ),
    Ok(
        "GameObject::Update(void)",
    ),
    Ok(
        "Roach::Recover(void)",
    ),
    Ok(
        "ShoalFish::FollowState(void)",
    ),
    Ok(
        "RenderTexture_Update(void)",
    ),
    Ok(
        "View::SetLocalToWorldMatrix(Matrix *)",
    ),
    Ok(
        "DDASession::bInitialised",
    ),
    Ok(
        "MKMem_DeinitModule(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Talisman::Init(GameObjDesc *)",
    ),
    Ok(
        "WhirlyWind::Update_Normal(void)",
    ),
    Ok(
        "Matrix::SetRotationToNone(void)",
    ),
    Ok(
        "Tools_GetTimeInSeconds(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "sseek",
        ),
    ),
    Ok(
        "SkinkDropTail::Assign(Vector *, SkinkDropTail **)",
    ),
    Err(
        InvalidSpecialMethod(
            "sinit",
        ),
    ),
    Ok(
        "Crc_Checksum(void const *, int)",
    ),
    Ok(
        "ModuleInfo<Gecko>::Init(void)",
    ),
    Ok(
        "ModuleInfo<Bouncer> virtual table",
    ),
    Ok(
        "BushPig::InWater(void)",
    ),
    Ok(
        "SoundEventHelper::Update(int, bool, bool, GameObject *, Vector *, float, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Image::Image(void)",
    ),
    Ok(
        "WarpFlower::DoLaunch(void)",
    ),
    Ok(
        "ModuleInfo<PerimeterCheckObjective>::ConstructObject(void *)",
    ),
    Ok(
        "MiniGameObjective_LoadResources(KromeIni *)",
    ),
    Ok(
        "SpecialPickupStruct::ScaleOut(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Util_WildcardPatternMatch(char *, char *)",
    ),
    Ok(
        "TrapdoorSpider::JumpDeinit(void)",
    ),
    Ok(
        "ModuleInfo<A1FrillObjective>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BurningJunk::Update(void)",
    ),
    Ok(
        "ArsonTorch::refPoint",
    ),
    Ok(
        "CameraOverride::Trigger(void)",
    ),
    Ok(
        "LearnToDiveData::Start(void)",
    ),
    Ok(
        "Speedboat::InitLobbingBarrel(void)",
    ),
    Ok(
        "ShadowBatValve virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Material::pRenderNodeMemory",
    ),
    Ok(
        "Muddie::RunForward(bool)",
    ),
    Ok(
        "WhirlyWind::Update(void)",
    ),
    Ok(
        "WaterDrip::Start(Vector *, BoundingVolume *, float)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Leech_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<StalactiteTrap>::Init(void)",
    ),
    Ok(
        "StaticFXPropDesc virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameData::SetDirty(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Animation::Animate(void)",
    ),
    Ok(
        "Aurora::IdleInit(void)",
    ),
    Ok(
        "EnemyDescriptor::Load(KromeIni *)",
    ),
    Ok(
        "ShearsStruct::Logic(void)",
    ),
    Ok(
        "AntHill::Message(MKMessage *)",
    ),
    Ok(
        "Matrix::Scale(Vector *)",
    ),
    Ok(
        "Groper::Stunned(void)",
    ),
    Ok(
        "BootTest_Update(void)",
    ),
    Ok(
        "ModuleInfo<TyFlyField> virtual table",
    ),
    Ok(
        "exception::what(void) const",
    ),
    Ok(
        "Neddy::Walk(void)",
    ),
    Ok(
        "BoundingRegion::getIntersectCount(Vector *, Vector *)",
    ),
    Ok(
        "Ty::SetAbsolutePosition(Vector *, int, float, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Spear>::Init(void)",
    ),
    Ok(
        "ModuleInfo<Rock>::Init(void)",
    ),
    Ok(
        "Texture::InitFromImage(char *, Image *)",
    ),
    Ok(
        "BlueTongue::Run(bool)",
    ),
    Ok(
        "CameraOverride::High_Create(void *)",
    ),
    Err(
        InvalidSpecialMethod(
            "register_frame",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::AddGif_AD_PRMODECONT(unsigned long)",
    ),
    Ok(
        "ScrubTurkey::Idle_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "IsSjis(unsigned char *)",
    ),
    Ok(
        "Tools_MapPadToKey(int)",
    ),
    Ok(
        "Ty::ResetPitchAndRoll(void)",
    ),
    Ok(
        "Avalanche_LoadResources(void)",
    ),
    Ok(
        "TimeAttack_OnInit(void)",
    ),
    Ok(
        "AnimatingProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Teleporter::LoadDone(void)",
    ),
    Ok(
        "AquarangProp::Reset(void)",
    ),
    Ok(
        "Gem::SpawnStatic(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lightning::ResetActivation(void)",
    ),
    Ok(
        "Copyright_Update(void)",
    ),
    Ok(
        "IceBlock_LoadResources(void)",
    ),
    Ok(
        "CrikeyCanister::LoadDone(void)",
    ),
    Ok(
        "ExplosionList::Update(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "sfmoreglue",
        ),
    ),
    Ok(
        "Waterfall_Draw(void)",
    ),
    Ok(
        "GameCamera::SweepSphereCollide(Vector *, Vector *, float, CollisionMode, int)",
    ),
    Ok(
        "View::TransformPointPSX2(IntVector *, Vector *)",
    ),
    Ok(
        "Kaboomerang::Fire(Vector *, Vector *)",
    ),
    Ok(
        "Vector::PerpAverage(Vector *, Vector *)",
    ),
    Ok(
        "ParticleSystem::bDrawPos",
    ),
    Ok(
        "Sly::Walk(void)",
    ),
    Ok(
        "Shark::ChaseInit(void)",
    ),
    Ok(
        "ModuleInfo<RhinoGround>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BuzzSaw2_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DialogProp::LoadDone(void)",
    ),
    Ok(
        "Translation_SetLanguage(TranslationLanguage)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to BunyipElder::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TempAlloc(int)",
    ),
    Ok(
        "MKAnimScript::TweenAnim(MKAnim *, short)",
    ),
    Ok(
        "ModuleInfo<BurningTree> virtual table",
    ),
    Ok(
        "ModuleInfo<SpiderTrapdoor> virtual table",
    ),
    Ok(
        "Lasso::DeinitLassoCaughtEmu(void)",
    ),
    Ok(
        "type_info::before(type_info const &) const",
    ),
    Ok(
        "SpiderWeb::Reset(void)",
    ),
    Ok(
        "Fish_Add(Vector *)",
    ),
    Ok(
        "MKShadow_SetUnlockedPixelColor(unsigned int)",
    ),
    Ok(
        "Flame::type",
    ),
    Ok(
        "MKWaterManager_DrawDebugInfo(void)",
    ),
    Ok(
        "Crikey::Flinch(void)",
    ),
    Ok(
        "ShadowBatValve::LoadDone(void)",
    ),
    Ok(
        "Ty::IdleEdgeWobbleTransition(void)",
    ),
    Ok(
        "BoulderTrap::GetDesc(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_unlock",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongue::Deactivate(void)",
    ),
    Ok(
        "DDACheckpoint virtual table",
    ),
    Ok(
        "WaterfallStreamStruct::Update(void)",
    ),
    Ok(
        "DropPontoon::Update(void)",
    ),
    Ok(
        "Rex::Race(void)",
    ),
    Ok(
        "KoalaKid::StopSound(void)",
    ),
    Ok(
        "SpyEgg_FindClosest(Vector *, Model *)",
    ),
    Ok(
        "Main_CheckShortcutKeys(void)",
    ),
    Ok(
        "Matrix::CopyTranslation(Matrix *)",
    ),
    Ok(
        "Bull::CheckEvents(void)",
    ),
    Ok(
        "GateDescriptor::Load(KromeIni *)",
    ),
    Ok(
        "GameCamera::Doomarang_Update(void)",
    ),
    Ok(
        "ModuleInfo<Generator>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<WaterTankStruct>::Init(void)",
    ),
    Ok(
        "Ty::Fall(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_ptmd",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LevelObjective virtual table",
    ),
    Ok(
        "ParticleSystemManager::FindGroup(ParticleSystemType *)",
    ),
    Ok(
        "FlyDesc * descr_cast<FlyDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "CameraOverrideTopDown_Start(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Blitter_Plane::Draw(int)",
    ),
    Ok(
        "Groper::LogicUpdate(void)",
    ),
    Ok(
        "ModuleInfo<Projectile> virtual table",
    ),
    Ok(
        "System_SetScreenOffset(float, float)",
    ),
    Ok(
        "Fluffy::Reset(void)",
    ),
    Ok(
        "TimeAttack::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "ModuleInfo<ChumBox>::ConstructObject(void *)",
    ),
    Ok(
        "Basket::Hidden(void)",
    ),
    Ok(
        "Tools_LevelOverride::DebugColor",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Roach::FlipInit(void)",
    ),
    Ok(
        "CameraOverride::Direction_Init(void)",
    ),
    Ok(
        "BurniningTree_IsTreeActive(GameObject *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillBike::Lassoed(void)",
    ),
    Ok(
        "SpecialPickupStruct::SetShowPos(Vector *)",
    ),
    Ok(
        "Animation::GetNodeMatrix(int)",
    ),
    Ok(
        "MKWater::bFixCameraPos",
    ),
    Ok(
        "Leech::ResetToStart(void)",
    ),
    Ok(
        "Ibis::WalkInit(void)",
    ),
    Ok(
        "ModuleInfo<SpecialPickupStruct>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Rhino> virtual table",
    ),
    Ok(
        "CableCar::SetupPath(void)",
    ),
    Ok(
        "WaterfallSprayStruct::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<MiniGameObjective>::Init(void)",
    ),
    Ok(
        "Wombat virtual table",
    ),
    Ok(
        "SnowRoo::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<Bat> virtual table",
    ),
    Ok(
        "ModuleInfo<WaterVolume>::Init(void)",
    ),
    Ok(
        "global constructors keyed to gVU0Manager",
    ),
    Ok(
        "Leech::Idle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rufus::AttackPattern1Init(void)",
    ),
    Ok(
        "CritterField2Desc::InitLevel(void)",
    ),
    Ok(
        "Publisher_Update(void)",
    ),
    Ok(
        "YabbyObjective_CheckForCompletion(void)",
    ),
    Ok(
        "Range_WhichZone(Vector *, float *)",
    ),
    Ok(
        "Ty::DeinitLaunch(void)",
    ),
    Ok(
        "Skink::StruckInit(void)",
    ),
    Ok(
        "void LoadDescriptors<StaticFXPropDesc>(KromeIni *, char *, StaticFXPropDesc *)",
    ),
    Ok(
        "Projectile::AddSpin(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "View::OrthoEnd(void)",
    ),
    Ok(
        "ShadowBat::DyingInit(void)",
    ),
    Ok(
        "Ty::InitFirstPerson(void)",
    ),
    Ok(
        "bad_exception type_info function",
    ),
    Ok(
        "Dma::AddGif_AD_FINISH(void)",
    ),
    Ok(
        "Dma::AddGif_AD_TRXPOS(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "MKShadow_AddEdge(int, int)",
    ),
    Ok(
        "ModuleInfo<WhiteBat>::Init(void)",
    ),
    Ok(
        "Lava virtual table",
    ),
    Ok(
        "ModuleInfo<GuideParticle>::Init(void)",
    ),
    Ok(
        "__class_type_info::~__class_type_info(void)",
    ),
    Ok(
        "MKProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "RockProjectile::Init(void)",
    ),
    Ok(
        "IcePlatform::UpdateTilt(void)",
    ),
    Ok(
        "ShatterStruct::Reset(void)",
    ),
    Ok(
        "FaderObject::Fade(FaderObject::FadeMode, float, float, float, bool)",
    ),
    Ok(
        "AquarangProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Teleporter virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::CameraDescriptor_Update(void)",
    ),
    Ok(
        "SpeedUpCrate_Init(void)",
    ),
    Ok(
        "Burnable::DrawFire(Vector *)",
    ),
    Ok(
        "GuideParticle::Reset(void)",
    ),
    Ok(
        "PathManager::Init(signed char, Vector *, float)",
    ),
    Ok(
        "ModuleInfo<Maurie>::ConstructObject(void *)",
    ),
    Ok(
        "StaticProp virtual table",
    ),
    Ok(
        "GasJet_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<ShadowBat> virtual table",
    ),
    Ok(
        "WaterSlideEffect::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Model::GetRefPointWorldPosition(int, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Animation::GetLastFrame(void)",
    ),
    Ok(
        "MKWaterType::Unload(void)",
    ),
    Ok(
        "OpalCrate::LoadDone(void)",
    ),
    Ok(
        "KromeIni::GotoLine(char *, char *)",
    ),
    Ok(
        "Vector::CMultiply(Vector *)",
    ),
    Ok(
        "GameCamera::WaterSlide_Deinit(void)",
    ),
    Ok(
        "BunyipElder::MonitorScales(void)",
    ),
    Ok(
        "GC_Break(void)",
    ),
    Ok(
        "Gem::Reset(void)",
    ),
    Ok(
        "CrateStruct::Respawn(void)",
    ),
    Ok(
        "Fluffy::Turn(void)",
    ),
    Ok(
        "BlueTongue::Chase(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Roach::GenerateRandomTargetPos(Vector const &, float)",
    ),
    Ok(
        "FrillProblemObjective::Message(MKMessage *)",
    ),
    Ok(
        "C3Actor::JumpInit(void)",
    ),
    Ok(
        "EnemyObject::Deactivate(void)",
    ),
    Ok(
        "BushPig::SphereCheck(Vector *, Vector *, float, CollisionResult *)",
    ),
    Ok(
        "ModuleInfo<TimeAttack>::Init(void)",
    ),
    Ok(
        "FireDrum::nMoreFlameSO",
    ),
    Ok(
        "BushPig::InitAfterDunny(void)",
    ),
    Ok(
        "GameCamera_Update(GameCameraHeroInfo *)",
    ),
    Ok(
        "CheckForDogPaddleSplashes(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FootEffect::SpawnIceEffect(Vector *, Vector *, BoundingVolume *, float, Vector *)",
    ),
    Ok(
        "Eel::Swim(void)",
    ),
    Ok(
        "SoundProp virtual table",
    ),
    Ok(
        "Burner_LoadResources(KromeIni *)",
    ),
    Ok(
        "Setup_End(void)",
    ),
    Ok(
        "Model::SetRenderTypeOverride(int)",
    ),
    Ok(
        "Croc::Message(MKMessage *)",
    ),
    Ok(
        "WarpFlower::Message(MKMessage *)",
    ),
    Ok(
        "Lenny::currentLenny",
    ),
    Ok(
        "Yabby::JumpTurn(void)",
    ),
    Ok(
        "KoalaKidObjective virtual table",
    ),
    Ok(
        "ModuleInfo<StopwatchStruct> virtual table",
    ),
    Ok(
        "Emu::DeinitStartled(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Boomerang_Init(void)",
    ),
    Ok(
        "Eel virtual table",
    ),
    Ok(
        "Moth_LoadResources(void)",
    ),
    Ok(
        "MiniBoulderStruct::SetState(int)",
    ),
    Ok(
        "ModuleInfo<BurnerObjective>::ConstructObject(void *)",
    ),
    Ok(
        "Burnable::Update(void)",
    ),
    Ok(
        "Ty::MoveUnderWater(void)",
    ),
    Ok(
        "Eel::LogicUpdate(void)",
    ),
    Ok(
        "BlueTongue::Init(GameObjDesc *)",
    ),
    Ok(
        "LavaBurner_LoadResources(KromeIni *)",
    ),
    Ok(
        "GameObjectManager::Init(void)",
    ),
    Ok(
        "TyHealth::Hurt(HurtType)",
    ),
    Ok(
        "Blitter_TriFan::Draw(int, float)",
    ),
    Ok(
        "Skink::TauntDeinit(void)",
    ),
    Ok(
        "TumbleWeed::desc",
    ),
    Ok(
        "WaterTank_LoadResources(KromeIni *)",
    ),
    Ok(
        "SimpleParticleSystemType::Init(char *, Material *, float, float, float, int)",
    ),
    Ok(
        "Megarang::UpdateLoaded(void)",
    ),
    Ok(
        "Bunyip_Delete(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpinningLog_SetRotVel(SpinningLog *, float)",
    ),
    Ok(
        "ApproxMag(float, float, float)",
    ),
    Ok(
        "Model::GetCentre(Vector *)",
    ),
    Ok(
        "TumbleWeed::Update(void)",
    ),
    Ok(
        "MKSceneManager::SendMessage(MKMessage *, unsigned int, bool, Vector *, float)",
    ),
    Ok(
        "Croc::Reset(void)",
    ),
    Ok(
        "MKParticleGen::DrawDebugInfo(View *)",
    ),
    Ok(
        "DialogProp::CloseDialog(void)",
    ),
    Ok(
        "ModuleInfo<BlueTongueThrower>::Init(void)",
    ),
    Ok(
        "Weather_Draw(View *)",
    ),
    Ok(
        "ModuleInfo<AuroraKid>::ConstructObject(void *)",
    ),
    Ok(
        "ScrubTurkey::RunToWaypoint_Init(void)",
    ),
    Ok(
        "ModuleInfo<TyAttributes>::ConstructObject(void *)",
    ),
    Ok(
        "Ty::DeinitFallDive(void)",
    ),
    Ok(
        "ShadowBat::Land(void)",
    ),
    Ok(
        "PubeCrab::Chase(void)",
    ),
    Ok(
        "YabbyStalactite::Shattering(void)",
    ),
    Ok(
        "Ty::DoFlamerangLighting(void)",
    ),
    Ok(
        "KromeIni::ParseData(void)",
    ),
    Ok(
        "ModuleInfo<BadBoonie>::Init(void)",
    ),
    Ok(
        "GameCamera::CustomCameraMatrix_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CritterField2Desc::DeinitLevel(void)",
    ),
    Ok(
        "StopwatchStruct::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Aurora::Reset(void)",
    ),
    Ok(
        "StalactiteTrap::LoadDone(void)",
    ),
    Ok(
        "IsValidAlphaNum(char)",
    ),
    Ok(
        "PipePart_LoadResources(KromeIni *)",
    ),
    Ok(
        "MKGrass_InitTypes(char *)",
    ),
    Ok(
        "Wombat::JumpIdleInit(void)",
    ),
    Ok(
        "CaveBat::LandInit(void)",
    ),
    Ok(
        "GameCamera_SetDistanceType(CameraDistanceType, float)",
    ),
    Ok(
        "Animation_DeinitModule(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<C3Actor>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<CrikeyCanister>::Init(void)",
    ),
    Ok(
        "Ty_Start(void)",
    ),
    Ok(
        "CritterField2Desc::AllocateCritter(void)",
    ),
    Ok(
        "Gate::Wobble_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BilbyStruct::Reset(void)",
    ),
    Ok(
        "ThrowingStar virtual table",
    ),
    Ok(
        "BushPig::DeinitSplatOnGround(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "XMax(Vector *, float)",
    ),
    Ok(
        "Platform::Reset(void)",
    ),
    Ok(
        "WaterDragon_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::Init(char *)",
    ),
    Ok(
        "TrapdoorSpider::GenerateThrowDirtTargetPos(void)",
    ),
    Ok(
        "EnemySpawner::GetSpawnerDesc(void)",
    ),
    Ok(
        "GameCamera::ElevatorPlayerAdjust_Update(void)",
    ),
    Ok(
        "Rex::Deinit(void)",
    ),
    Ok(
        "KoalaKidObjective::Success(void)",
    ),
    Ok(
        "ModuleInfo<Groper>::ConstructObject(void *)",
    ),
    Ok(
        "ScrubTurkey::Deinit(void)",
    ),
    Ok(
        "SpiderTrapdoor::Deinit(void)",
    ),
    Ok(
        "GameData::SetCurrentZone(ZoneNumber)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BurningTree::Burnt(void)",
    ),
    Ok(
        "SoundProp::LoadDone(void)",
    ),
    Ok(
        "Font::BuildLines(char *, float, float, TextLineData *)",
    ),
    Ok(
        "ModuleInfo<WaterWheel> virtual table",
    ),
    Ok(
        "Maurie::Reset(void)",
    ),
    Ok(
        "Fluffy_DDA::Reset(void)",
    ),
    Ok(
        "Enemies_InitBoundingRegions(void)",
    ),
    Ok(
        "Material::CreateFromRawData(char *, void *, int, int, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBat::HoverIdleInit(void)",
    ),
    Ok(
        "Critter2::SetAnimIfNew(unsigned int, bool, int)",
    ),
    Ok(
        "EnemyObject::Init(GameObjDesc *)",
    ),
    Ok(
        "GameCamera_UsePlayerAdjustCamera(bool)",
    ),
    Ok(
        "Farlapp::Deinit(void)",
    ),
    Ok(
        "RhinoGround::FlipInit(void)",
    ),
    Ok(
        "RenderTexture_UpdateEffects(void)",
    ),
    Ok(
        "LavaEffect::Deinit(void)",
    ),
    Ok(
        "Boomerang::Draw(void)",
    ),
    Ok(
        "Boulder::UpdateRollNormal(void)",
    ),
    Ok(
        "Hud_Init(Ty *)",
    ),
    Ok(
        "Ty::SetCollisionRadius(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rock::Deinit(void)",
    ),
    Ok(
        "ChuteLog::Message(MKMessage *)",
    ),
    Ok(
        "Friend::GetPos(void)",
    ),
    Ok(
        "Texture::DirtySourceData(void)",
    ),
    Ok(
        "ShadowBat::UpdatePosition(Vector *, bool, float)",
    ),
    Ok(
        "Crikey::UpdatePosition(Vector *, bool, float)",
    ),
    Ok(
        "TumbleWeed::moduleInfo",
    ),
    Ok(
        "ModuleInfo<Drum>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Yabby::Attack(void)",
    ),
    Ok(
        "ModuleInfo<BlitterCritterField>::Init(void)",
    ),
    Ok(
        "Fish_Deinit(void)",
    ),
    Ok(
        "Lava::LoadDone(void)",
    ),
    Ok(
        "Shears_LoadResources(void)",
    ),
    Ok(
        "WaterSlideData::Idle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BaseCritter::SharedUpdate(void)",
    ),
    Ok(
        "TreasureChest::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Teleport::Reset(void)",
    ),
    Ok(
        "CrikeyChum::StartThrown(Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::WaterToAirTransition(void)",
    ),
    Ok(
        "Shazza virtual table",
    ),
    Ok(
        "Elevator::Reset(void)",
    ),
    Ok(
        "HeatFlare_Add(Vector *, float)",
    ),
    Ok(
        "ShadowBat::StandOnPipe(void)",
    ),
    Ok(
        "SoundProp_LoadResources(KromeIni *)",
    ),
    Ok(
        "TyMemCard_Update(void)",
    ),
    Ok(
        "CrikeyChum::Deinit(void)",
    ),
    Ok(
        "DialogPlayer::GetActor(int)",
    ),
    Ok(
        "MessageMap::GetStringFromId(int) const",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Shark_LoadResources(KromeIni *)",
    ),
    Ok(
        "BunyipStruct::HasPunched(Vector *)",
    ),
    Ok(
        "Aurora::ShowKids(void)",
    ),
    Ok(
        "EnemySpawner virtual table",
    ),
    Ok(
        "GameCamera::AllStates_Deinit(void)",
    ),
    Ok(
        "GameCamera::Doomarang_Deinit(void)",
    ),
    Ok(
        "Geyser::BlockedInit(void)",
    ),
    Ok(
        "StaticProp::GetPos(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "KromeIniLine::AsStringRange(int, char **, char **)",
    ),
    Ok(
        "LevelData::InitializeGameLevelData(void)",
    ),
    Ok(
        "Particle_FrostyBreath_Create(ParticleSystem **, Vector *, Vector *)",
    ),
    Ok(
        "SnowRoo::DeathInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScrubTurkey::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "FrillLizard::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "GameCamera::Collision_FindSafePointSide(Vector *, int, int, float, GCT_Side, SafePointResult::Side *)",
    ),
    Ok(
        "Ibis::RunUpdate(void)",
    ),
    Ok(
        "Rex::Update(void)",
    ),
    Ok(
        "DDASession::StoreDamageInfo(DDADamageCause)",
    ),
    Ok(
        "Material::pCurrMat",
    ),
    Ok(
        "Crikey::_EatingCanister(void)",
    ),
    Ok(
        "MKWave::DrawSineWave(MKWaterProp *)",
    ),
    Ok(
        "ModuleInfo<KoalaKid>::ConstructObject(void *)",
    ),
    Ok(
        "WaterfallStruct::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::PlayerAdjust_AdjustTime(float)",
    ),
    Ok(
        "Gem_Add(GemType, Vector *, Vector *, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CrikeyChum::Floating(void)",
    ),
    Ok(
        "CameraOverrideManager::DeinitManager(void)",
    ),
    Ok(
        "BaseCritter::Unassign(CritterField2 *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Friend::Reset(void)",
    ),
    Ok(
        "Leech::Attach(void)",
    ),
    Ok(
        "GameCamera::MiniGameC2_Init(void)",
    ),
    Ok(
        "Rex::SetMovementType(RexMovementType)",
    ),
    Ok(
        "CameraOverrideFixedPoint_Start(void)",
    ),
    Ok(
        "Fish_Draw(void)",
    ),
    Ok(
        "BlueTongueThrower::Draw(void)",
    ),
    Ok(
        "CameraOverride::Spiral_Update(void)",
    ),
    Ok(
        "GCT_IsPointUnderwater(Vector *)",
    ),
    Ok(
        "Particle_CanSpray_Init(ParticleSystem **, Vector *, BoundingVolume *)",
    ),
    Ok(
        "global constructors keyed to Groper_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::SmoothToYaw(float, float)",
    ),
    Ok(
        "ModuleInfo<Megarang> virtual table",
    ),
    Ok(
        "ModuleInfo<FireworksCrate> virtual table",
    ),
    Ok(
        "Matrix::Multiply3x3(Matrix *)",
    ),
    Ok(
        "exception type_info function",
    ),
    Ok(
        "Camera::CalcAnalogCameraProp(InputDevices, float, bool, int)",
    ),
    Ok(
        "Frog::GetField(void)",
    ),
    Ok(
        "Bird::CruiseState(void)",
    ),
    Ok(
        "TrapdoorSpider virtual table",
    ),
    Ok(
        "ShadowBatPipe::Draw(void)",
    ),
    Ok(
        "SpiderTrapdoor::Update(void)",
    ),
    Ok(
        "TyParticleManager::FreeResources(void)",
    ),
    Ok(
        "ModuleInfo<Ty>::ConstructObject(void *)",
    ),
    Ok(
        "BeerCan::Deinit(void)",
    ),
    Ok(
        "CameraOverride::TopDown_Update(void)",
    ),
    Ok(
        "System_SetDebugEnabled(bool)",
    ),
    Ok(
        "Skink::BurnBat(void)",
    ),
    Ok(
        "BadBoonie::AlertPause_Init(void)",
    ),
    Ok(
        "Target::Hit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Bat>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tools_DropShadow_Deinit(void)",
    ),
    Ok(
        "Matrix::SetRotationQ(QuatRotation *)",
    ),
    Ok(
        "Animation::GetNodeIndex(char *)",
    ),
    Ok(
        "TyHealth::heathInfo",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WakeStruct::Add(Vector *, Vector *, float, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lasso::InitLassoCaughtFrillBike(void)",
    ),
    Ok(
        "Target_LoadResources(KromeIni *)",
    ),
    Ok(
        "WaterSlide_Deinit(void)",
    ),
    Ok(
        "ModuleInfo<Rex>::ConstructObject(void *)",
    ),
    Ok(
        "MorayEel::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<WarpFlower> virtual table",
    ),
    Ok(
        "LilNeddy::DeathInit(void)",
    ),
    Ok(
        "CaveBatObjective::Reset(void)",
    ),
    Ok(
        "Fly::UpdateLogic(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillBike::ChaseInit(void)",
    ),
    Ok(
        "CuttleFish::UpdateLogic(void)",
    ),
    Ok(
        "SoundMaterial::CountSounds(KromeIni *)",
    ),
    Ok(
        "UIButtonGroup::SelectNext(void)",
    ),
    Ok(
        "Target virtual table",
    ),
    Ok(
        "Rufus::SetSubState(int)",
    ),
    Ok(
        "EnemyObject virtual table",
    ),
    Ok(
        "Lasso::DeinitLassoThrow(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<SynkerBlueTongue>::Init(void)",
    ),
    Ok(
        "ShadowBat::KissOfDeathChaseDeinit(void)",
    ),
    Ok(
        "DialogProp::Reset(void)",
    ),
    Ok(
        "Burner::Reset(void)",
    ),
    Ok(
        "TimeAttack_LoadResources(KromeIni *)",
    ),
    Ok(
        "global constructors keyed to MKPropDescriptor::pDrawListDescs",
    ),
    Ok(
        "global constructors keyed to Fly_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "bad_alloc virtual table",
    ),
    Ok(
        "Dennis::CheckReachedWayPoint(Vector *)",
    ),
    Ok(
        "bad_cast virtual table",
    ),
    Ok(
        "MKWaterManager_GetDefaultTypeText(void)",
    ),
    Ok(
        "Particle_Dust_Init(ParticleSystem **, Vector *, float)",
    ),
    Ok(
        "Crikey::ChaseDeinit(void)",
    ),
    Ok(
        "CausticEffect virtual table",
    ),
    Ok(
        "IcePlatform::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<KidObjective>::Init(void)",
    ),
    Ok(
        "Rhino::StartAggressive(void)",
    ),
    Ok(
        "Leech::ResetToStartInit(void)",
    ),
    Ok(
        "ZoneBlockerProp::Update(void)",
    ),
    Ok(
        "YabbyStalactite virtual table",
    ),
    Ok(
        "Hud_BreakFinished(void)",
    ),
    Ok(
        "Ty::WaterMediumInit(void)",
    ),
    Ok(
        "WaterPipe::Deinit(void)",
    ),
    Ok(
        "SaveGameInfoDisplay::Draw(void)",
    ),
    Ok(
        "Boulder virtual table",
    ),
    Ok(
        "GameCamera::CameraOverride_CanActivate(void)",
    ),
    Ok(
        "global constructors keyed to WarpFlower_LoadResources(KromeIni *)",
    ),
    Ok(
        "__func_type_info::~__func_type_info(void)",
    ),
    Ok(
        "PubeCrab::BlockRecoilInit(void)",
    ),
    Ok(
        "MoveSmoothlyTo(float *, float, float, float)",
    ),
    Ok(
        "GameCamera::Fall_FindSafePoint_SetSource(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::Deinit(void)",
    ),
    Ok(
        "Spider::subObjectIndices",
    ),
    Ok(
        "KoalaKidObjective::Message(MKMessage *)",
    ),
    Ok(
        "Timer_GetDHMSInSeconds(TimerInfo *)",
    ),
    Ok(
        "C3_Ringo_LoadResources(KromeIni *)",
    ),
    Ok(
        "BonusPickup::Idle(void)",
    ),
    Ok(
        "Tools_DropShadow_Draw(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "main_reference",
        ),
    ),
    Ok(
        "LilNeddy::Accelerate(float)",
    ),
    Ok(
        "MakingOfVideo_Draw(void)",
    ),
    Ok(
        "Portal::Update(void)",
    ),
    Ok(
        "Emu::Yank(void)",
    ),
    Ok(
        "PerimeterCheckObjective::Failure(void)",
    ),
    Ok(
        "ModuleInfo<Emu>::ConstructObject(void *)",
    ),
    Ok(
        "GameObjectManager::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RhinoGround::GenerateRandomTargetPos(Vector const &, float)",
    ),
    Ok(
        "SaveStates_GetLevelUnlocked(char *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model::SetRotation(Vector *)",
    ),
    Ok(
        "MKParticleGen::Update(void)",
    ),
    Ok(
        "Muddie::WalkSideways(bool)",
    ),
    Ok(
        "TyParticleManager::SpawnAntHillChunk(Vector *, Vector *)",
    ),
    Ok(
        "Target::SetState(TargetState)",
    ),
    Ok(
        "ThinIceProp::Init(GameObjDesc *)",
    ),
    Ok(
        "ModuleInfo<PickupCounter>::ConstructObject(void *)",
    ),
    Ok(
        "SharkCage::Reset(void)",
    ),
    Ok(
        "ModuleInfo<MetalSpikes>::ConstructObject(void *)",
    ),
    Ok(
        "Eel::SwimInit(void)",
    ),
    Ok(
        "ZoneBlockerProp::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "System_EndScene(void)",
    ),
    Ok(
        "EnemyObject::LoadDone(void)",
    ),
    Ok(
        "MKParticleGen::CreateDebugMenus(DebugOptionMenu *)",
    ),
    Ok(
        "ModuleInfo<Shazza> virtual table",
    ),
    Ok(
        "Yabby::Scared(void)",
    ),
    Ok(
        "ModuleInfo<Teleporter>::ConstructObject(void *)",
    ),
    Ok(
        "MusicalIcicle::GrowInit(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "cp_push_exception",
        ),
    ),
    Ok(
        "Crikey::LoadLine(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Roach::RunAwayInit(void)",
    ),
    Ok(
        "EnemyObject::EnableEnemyCollision(bool)",
    ),
    Ok(
        "ShadowBatPipe::GetStandingPos(void)",
    ),
    Ok(
        "CameraOverrideHigh_Start(void)",
    ),
    Ok(
        "TrapdoorSpider::JumpFromHoleDeinit(void)",
    ),
    Ok(
        "ScubaFrill::AttackDeinit(void)",
    ),
    Ok(
        "Fluffy::LoadLine(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::ResetPower(void)",
    ),
    Ok(
        "GameData::SetHasPlacedTalisman(TalismanType, bool)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Muddie::Death(void)",
    ),
    Ok(
        "CrikeyCanister::Floating(void)",
    ),
    Ok(
        "TyFSM::GetState(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TurtleStruct::EnteringWater(void)",
    ),
    Ok(
        "EmuRoundupObjective virtual table",
    ),
    Ok(
        "Yabby_LoadResources(KromeIni *)",
    ),
    Ok(
        "CrateStruct::Message(MKMessage *)",
    ),
    Ok(
        "BlueTongueThrower::Bitten(void)",
    ),
    Ok(
        "SelectionRang::Update(void)",
    ),
    Ok(
        "GCT_WaypointPlaneManager::GetPointAlongPath(float, Vector *)",
    ),
    Ok(
        "SmallCrabDesc * descr_cast<SmallCrabDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "Tick::Attach(void)",
    ),
    Ok(
        "Shark::LookOut(void)",
    ),
    Ok(
        "Parser::GrabMadSection(void)",
    ),
    Ok(
        "FrillLizard::WalkToPipe(void)",
    ),
    Ok(
        "QuatRotation::Multiply(QuatRotation *, QuatRotation *)",
    ),
    Ok(
        "GameCamera::UseGunRecoil(float)",
    ),
    Ok(
        "MessageMap::GetIdFromString(char *) const",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera_SetHero(Ty *)",
    ),
    Ok(
        "ModuleInfo<AirPlatform>::Init(void)",
    ),
    Ok(
        "ScreenData::Init(Vector *, float, float)",
    ),
    Ok(
        "Vector::ApplyQuaternion(Vector *, QuatRotation *)",
    ),
    Ok(
        "Ty::InitAfterDunny(void)",
    ),
    Ok(
        "GameData::SetHasTalisman(TalismanType, bool)",
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_array",
        ),
    ),
    Ok(
        "PubeCrab::ChaseInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKGrassType::Unload(void)",
    ),
    Ok(
        "Boomerang_GetDescription(BoomerangType)",
    ),
    Ok(
        "GameData::GetTotalGoldenCogCount(void)",
    ),
    Ok(
        "ModuleInfo<BlitterCritterField> virtual table",
    ),
    Ok(
        "DialogEffect::Update(void)",
    ),
    Ok(
        "MobilePlatform::Reset(void)",
    ),
    Ok(
        "GCT_BuildMatrixFromFwd(Matrix *, Vector *, Vector *)",
    ),
    Ok(
        "UIButtonGroup::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TyFSM::MoveState(int)",
    ),
    Ok(
        "BarbedWire_Deinit(void)",
    ),
    Ok(
        "FileSys_Update(void)",
    ),
    Ok(
        "Matrix::Scale(float)",
    ),
    Ok(
        "Ty::TryChangeState(int, HeroActorState)",
    ),
    Ok(
        "FrillLizard::EvadeBite(void)",
    ),
    Ok(
        "ScrubTurkey_IncrementCatchAttemps(void)",
    ),
    Ok(
        "Dialog_Update(void)",
    ),
    Ok(
        "Yabby::IsTyVisible(void)",
    ),
    Ok(
        "FrillLizard::DeathByBiteInit(void)",
    ),
    Ok(
        "BushPig::Jump(void)",
    ),
    Ok(
        "Ty::MoveTransition(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "__user_type_info::~__user_type_info(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "errno",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tick::MissInit(void)",
    ),
    Ok(
        "Texture::ConfigureVRam(Texture **)",
    ),
    Ok(
        "PubeCrab::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "SpeedboatWake::Draw(void)",
    ),
    Ok(
        "RadialRandomVector(Vector &, float, float, float)",
    ),
    Ok(
        "Aurora::Happy(void)",
    ),
    Ok(
        "Ice::AddShadow(void)",
    ),
    Ok(
        "ModuleInfo<ShoalFish> virtual table",
    ),
    Ok(
        "ShoalFishDesc * descr_cast<ShoalFishDesc *>(MKPropDescriptor *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterSlideData::Duck(void)",
    ),
    Ok(
        "BoomerangManager::SetType(BoomerangType)",
    ),
    Ok(
        "ApproxMagnitude(float, float)",
    ),
    Ok(
        "FrillBike::Spawn(void)",
    ),
    Ok(
        "Crikey::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to FlameThrower_LoadResources(KromeIni *)",
    ),
    Ok(
        "__ptmf_type_info virtual table",
    ),
    Ok(
        "Material::InitModule(void)",
    ),
    Ok(
        "Ty::BounceOffTransition(void)",
    ),
    Ok(
        "_MKMem_Realloc(void *, int, char *, int)",
    ),
    Ok(
        "Vector::ApplyQuaternion(QuatRotation *)",
    ),
    Ok(
        "Crikey::ChaseInit(void)",
    ),
    Ok(
        "Yabby_StartBeingScared(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillLizard::RunToTreeInit(void)",
    ),
    Ok(
        "GameCamera::SwimPlayerAdjust_Update(void)",
    ),
    Ok(
        "MKWaterManager_Update(void)",
    ),
    Ok(
        "KenOath::Idle(void)",
    ),
    Ok(
        "AuroraKid::GetNextWayPoint(void)",
    ),
    Ok(
        "GCT_Trigger::Load(CameraOverrideTriggerLoadInfo *)",
    ),
    Ok(
        "DialogPlayer::SceneLoad(char *, dpActorInfoStruct *, int)",
    ),
    Ok(
        "Boulder::InitRollNormal(void)",
    ),
    Ok(
        "GameObjectManager::ResetObjects(void)",
    ),
    Ok(
        "Wombat::FinishInit(void)",
    ),
    Ok(
        "ShadowBat::SonarAttackDeinit(void)",
    ),
    Ok(
        "Sly_LoadResources(KromeIni *)",
    ),
    Ok(
        "EnemyDescriptor virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillLizard::CloseToPipeInit(void)",
    ),
    Ok(
        "ModuleInfo<Cattle> virtual table",
    ),
    Ok(
        "Vector::ApplyRotMatrix(Vector *, Matrix *)",
    ),
    Ok(
        "StreamBuffer::PutFromFile(int, int)",
    ),
    Ok(
        "ModuleInfo<CrikeyCanister> virtual table",
    ),
    Ok(
        "Texture::UploadMpeg(bool)",
    ),
    Ok(
        "Camera::SetCameraMatrixLookAt(Matrix *)",
    ),
    Ok(
        "Ty::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::UnderWaterMediumDeinit(void)",
    ),
    Ok(
        "SnowRoo::LogicUpdate(void)",
    ),
    Ok(
        "ModuleInfo<ThrowingStar>::Init(void)",
    ),
    Ok(
        "MKMemoryCard_IsPrepared(int)",
    ),
    Ok(
        "SnowBallAttack::DamageTy(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Steam::envelope",
    ),
    Ok(
        "SelectionRang::SetTarget(Vector *, char, View *)",
    ),
    Ok(
        "SpiderTrapdoor virtual table",
    ),
    Ok(
        "Path_GetTerminatorSegment(void)",
    ),
    Ok(
        "Emu::GetAttachPos(Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<ShadowBatPipe>::Init(void)",
    ),
    Ok(
        "WaterDrip_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RhinoGround::LogicUpdate(void)",
    ),
    Ok(
        "FrillLizard::AttackIdleInit(void)",
    ),
    Ok(
        "GameCamera_GetVectors(Vector *, Vector *, Vector *)",
    ),
    Ok(
        "Speedboat::Deinit(void)",
    ),
    Ok(
        "DialogPlayer::GetEffect(void)",
    ),
    Ok(
        "ModuleInfo<Jeep>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<FrillProblemObjective> virtual table",
    ),
    Ok(
        "GameData_Load(char *)",
    ),
    Ok(
        "LetterBox_Deinit(void)",
    ),
    Ok(
        "Windmill_End(void)",
    ),
    Ok(
        "ModuleInfo<Emu> virtual table",
    ),
    Ok(
        "ScreenData::FadeOut(int, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowGun::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "TrapdoorSpider::PatrolDeinit(void)",
    ),
    Ok(
        "PathFindingObject::Deinit(void)",
    ),
    Ok(
        "Ty::SetWarp(Vector *, Vector *, Vector *, float)",
    ),
    Ok(
        "ThinIceProp::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Particle_SnowTrail_Init(ParticleSystem **, Vector *, BoundingVolume *)",
    ),
    Ok(
        "Friend virtual table",
    ),
    Ok(
        "Wombat::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "Crikey_LoadResources(KromeIni *)",
    ),
    Ok(
        "ObjectiveFinder::bInitialised",
    ),
    Ok(
        "ProgressBar::SetBackgroundBlitterUV(float, float, float, float)",
    ),
    Ok(
        "Bilby_Add(BilbyLoadInfo *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<ThrowingStar>::ConstructObject(void *)",
    ),
    Ok(
        "GameData::GetGoldenCog(GoldenCogType)",
    ),
    Ok(
        "Megarang::Reset(void)",
    ),
    Ok(
        "MiniGameObjective::Message(MKMessage *)",
    ),
    Ok(
        "GameCamera::SetNewEnemy(void)",
    ),
    Ok(
        "ModuleInfo<Gem> virtual table",
    ),
    Ok(
        "signed char type_info function",
    ),
    Ok(
        "Heap_FreeHeapProfile(void *, int, char *, char *)",
    ),
    Ok(
        "char type_info node",
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_rem_pio2f",
        ),
    ),
    Ok(
        "Lasso_LoadResources(void)",
    ),
    Ok(
        "Speedboat::DeinitLobbingBarrel(void)",
    ),
    Ok(
        "RedButtonDescriptor virtual table",
    ),
    Ok(
        "bad_alloc type_info function",
    ),
    Ok(
        "Fluffy::CheckEvents(void)",
    ),
    Ok(
        "BadBoonie::RunToWaypoint_Init(void)",
    ),
    Ok(
        "GuideParticle::gateTimeOutCounter",
    ),
    Ok(
        "Ty::Pitch(float)",
    ),
    Ok(
        "Vector::ApplyTransMatrix(Matrix *)",
    ),
    Ok(
        "ModuleInfo<RingoArm>::ConstructObject(void *)",
    ),
    Ok(
        "Level_ParseScale(KromeIniLine *, Vector *)",
    ),
    Ok(
        "RhinoGround virtual table",
    ),
    Ok(
        "Tools_AnimEventDesc::Init(Tools_AnimEvent *, int, MKAnimScript *)",
    ),
    Ok(
        "Fluffy::Stomp(void)",
    ),
    Ok(
        "RingoArm::FlinchInit(void)",
    ),
    Ok(
        "Elevator::Move(float)",
    ),
    Ok(
        "SpecialPickup_HideAll(void)",
    ),
    Ok(
        "Tick::Deinit(void)",
    ),
    Ok(
        "Damageable::Message(MKMessage *)",
    ),
    Ok(
        "Basket_PlaceUnused(Vector *)",
    ),
    Ok(
        "Lenny::Wince(void)",
    ),
    Ok(
        "BushPig::DoCameraChecks(unsigned int)",
    ),
    Ok(
        "MKWaterType::Load(void)",
    ),
    Ok(
        "Torch::Deinit(void)",
    ),
    Ok(
        "LoadLevel_LoadStringVar(KromeIniLine *, char *, char **, int)",
    ),
    Ok(
        "SpecialPickupStruct::SetCollected(bool)",
    ),
    Ok(
        "LevelData::GetName(LevelNumber)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::DeinitAfterDunny(void)",
    ),
    Ok(
        "Shatter_Add(Model *, float, float, int)",
    ),
    Ok(
        "GameCamera_SnapBehindHero(bool)",
    ),
    Ok(
        "FrillLizard::IdleInit(void)",
    ),
    Ok(
        "Farlapp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Crikey::Attack(void)",
    ),
    Ok(
        "GameCamera::Doomarang_Init(void)",
    ),
    Ok(
        "Tick::Detach(void)",
    ),
    Ok(
        "ScrubTurkey::AlertPause_Update(void)",
    ),
    Ok(
        "SmallCrab::ScurryState(void)",
    ),
    Ok(
        "Burner::Update(void)",
    ),
    Ok(
        "Target::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "ModuleInfo<MetalSpikes> virtual table",
    ),
    Ok(
        "Dma::AddGif_AD_TRXREG(unsigned long, unsigned long)",
    ),
    Ok(
        "BushPig::LassoAnimation(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bull::Message(MKMessage *)",
    ),
    Ok(
        "Avalanche::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKSceneManager::MakeTerrainTree(void)",
    ),
    Ok(
        "EnemyObject::LinearTurn(float)",
    ),
    Ok(
        "EmuRoundupObjective::Reset(void)",
    ),
    Ok(
        "CrateStruct::Update(void)",
    ),
    Ok(
        "Sound_MusicResume(int)",
    ),
    Ok(
        "Dma::AddGif_AD_DTHE(unsigned long)",
    ),
    Ok(
        "Camera::flipYAxis",
    ),
    Ok(
        "Rex::Message(MKMessage *)",
    ),
    Ok(
        "Lasso::GetYfromXZ(float, float, float, float, float)",
    ),
    Ok(
        "Sheila::HappyInit(void)",
    ),
    Ok(
        "GameCamera_UseFallCamera(bool)",
    ),
    Ok(
        "global constructors keyed to PubeCrab_LoadResources(KromeIni *)",
    ),
    Ok(
        "global constructors keyed to WaterTank_LoadResources(KromeIni *)",
    ),
    Ok(
        "GameCamera_GetDir(void)",
    ),
    Ok(
        "SnowBallAttack virtual table",
    ),
    Ok(
        "GameCamera_OverrideDir_Add(CameraOverrideDirLoadInfo *)",
    ),
    Ok(
        "Tools_GetArcPos(Vector *, Vector *, Vector *, float, float)",
    ),
    Ok(
        "GameObject::LoadDone(void)",
    ),
    Ok(
        "Wombat::JumpStart(void)",
    ),
    Ok(
        "TrapdoorSpider::DeathDeinit(void)",
    ),
    Ok(
        "BeerCan::ResolveHit(void)",
    ),
    Ok(
        "ModuleInfo<ThrowingStar> virtual table",
    ),
    Ok(
        "FrontEnd_NewGame_Init(void)",
    ),
    Ok(
        "SpiderWeb::Draw(void)",
    ),
    Ok(
        "ModuleInfo<GuideBarrel>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model_CalculateViewToClipToScreenMatrices(Matrix *, Matrix *, int *, float, float, float, float, float, float, float, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SawDust::sawDustType",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::Fall_RaiseHeight_Deinit(void)",
    ),
    Ok(
        "ResolveConnections(PathSegment *)",
    ),
    Ok(
        "WaterSlideSection::Update(Vector *, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameData::GetTotalThunderEggCount(void)",
    ),
    Ok(
        "System_EnableDebugMode(bool)",
    ),
    Ok(
        "WeatherProp::Reset(void)",
    ),
    Ok(
        "LensFlare_Init(void)",
    ),
    Ok(
        "Vector::InterpolateLinear(Vector *, Vector *, float)",
    ),
    Ok(
        "global constructors keyed to ShadowBatProps_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_GameInfo_DeinitResources(void)",
    ),
    Ok(
        "FinishLineStruct::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CritterField_Register2(CritterDesc2 *, unsigned int, unsigned int, float, unsigned int)",
    ),
    Ok(
        "BunyipStruct::UpdatePos(void)",
    ),
    Ok(
        "Particle_LoadResources(void)",
    ),
    Ok(
        "GameCamera::MiniGameB1_Update(void)",
    ),
    Ok(
        "Ty::SetToIdle(bool, TyMedium)",
    ),
    Ok(
        "global constructors keyed to Basket_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Hud::Init(void)",
    ),
    Ok(
        "Tools_DynamicStringTable::FindString(char *, int *)",
    ),
    Ok(
        "LearnToDiveData::InitSplatLand(void)",
    ),
    Ok(
        "GetPitch2Points(Vector *, Vector *)",
    ),
    Ok(
        "Dma::AddGif_AD_SCANMSK(unsigned long)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::waterCount",
    ),
    Ok(
        "Muddie::DeathInit(void)",
    ),
    Ok(
        "Texture::pBlank",
    ),
    Ok(
        "MKMemoryCard_Format(int)",
    ),
    Ok(
        "Neddy::HandleFootstepEvents(char *)",
    ),
    Ok(
        "PauseScreen_OptionControls_Init(void)",
    ),
    Ok(
        "MiniBoulder_Reset(void)",
    ),
    Ok(
        "ScubaFrill::UpdatePosition(Vector *, float)",
    ),
    Ok(
        "Ty::EventBite(char *)",
    ),
    Ok(
        "MKWaterProp::ConstructWeightedTriStrip(Water_TriStrip *, Vector *, Vector *, WaterStripVertex *, WaterStripNormal *, WaterStripUV *, WaterStripColor *, Vector *, float *, Material *, int)",
    ),
    Ok(
        "Dma::AddTag_Call(void *, unsigned long)",
    ),
    Ok(
        "MusicalIcicleObjective::LoadDone(void)",
    ),
    Ok(
        "Boomerang::GetCatchPos(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EnemyDescriptor::DefInitCollisionsDesc(void)",
    ),
    Ok(
        "Ty::DrawFirstPerson(void)",
    ),
    Ok(
        "CrikeyCanister::Respawn(void)",
    ),
    Ok(
        "WaterfallStruct::Update(void)",
    ),
    Ok(
        "WeatherProp::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "OpalCrate::Update(void)",
    ),
    Ok(
        "Lenny::WinceInit(void)",
    ),
    Ok(
        "ModuleInfo<YabbyObjective>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBatValve::Message(MKMessage *)",
    ),
    Ok(
        "SpecialPickupStruct::Message(MKMessage *)",
    ),
    Ok(
        "ObjectiveFinder::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Collision_Init(int, Model *, int, int)",
    ),
    Ok(
        "Turtle_LoadResources(void)",
    ),
    Ok(
        "WhirlyWind::UpdatePullPos(void)",
    ),
    Ok(
        "PauseScreen_DrawFraction2d(char *, char *, float, float, float, float)",
    ),
    Ok(
        "AnimatingPropDesc virtual table",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DialogPlayer::InitActors(void)",
    ),
    Ok(
        "WaterSlideManager::AssignWayPtOrder(int, int, SectionInfo *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Main_AutoLevelSwitch_Update(void)",
    ),
    Ok(
        "MKMemoryCard_ReadWriteFile(char *, void *, int, int, int)",
    ),
    Ok(
        "C3Chest::LoadDone(void)",
    ),
    Ok(
        "BoomerangManager::StartThrowAnim(BoomerangSide)",
    ),
    Ok(
        "Ty::MoveOnFoot(void)",
    ),
    Ok(
        "__ptmd_type_info type_info function",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "make_dp",
        ),
    ),
    Ok(
        "Boomerang::HandleFire(void)",
    ),
    Ok(
        "LedgePullUpData::Jump(void)",
    ),
    Ok(
        "FrontEnd_LoadLevel_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<KoalaKidObjective> virtual table",
    ),
    Ok(
        "DialogPlayer::SceneReset(unsigned int)",
    ),
    Ok(
        "Bilby_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StaticFXProp::Reset(void)",
    ),
    Ok(
        "System_InitCommandLineArgs(char **, int)",
    ),
    Err(
        InvalidSpecialMethod(
            "svfscanf",
        ),
    ),
    Ok(
        "Fluffy_DDA::Update(void)",
    ),
    Ok(
        "KingFisher::Assign(CritterField2 *)",
    ),
    Ok(
        "SnowPile virtual table",
    ),
    Ok(
        "TimeTrial_StopTimer(void)",
    ),
    Ok(
        "DirectLight::pDefaultLight",
    ),
    Ok(
        "ModuleInfo<SpiderCrate> virtual table",
    ),
    Ok(
        "DiveRing::Deinit(void)",
    ),
    Ok(
        "ShadowBatPipe::Deinit(void)",
    ),
    Ok(
        "WeatherProp virtual table",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_B1_Draw(void)",
    ),
    Ok(
        "ModuleInfo<Geyser>::ConstructObject(void *)",
    ),
    Ok(
        "TyBite::InitRolyPoly(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Geyser::Reset(void)",
    ),
    Ok(
        "EmuRoundupObjective::Message(MKMessage *)",
    ),
    Ok(
        "OmniLight_Reposition(OmniLight *, Vector *)",
    ),
    Ok(
        "Eel::IsTyVisible(void)",
    ),
    Ok(
        "CameraOverride::Direction_CanActivate(void)",
    ),
    Ok(
        "void LoadAnimPropDescriptors<AnimatingPropDesc>(KromeIni *, char *, AnimatingPropDesc *)",
    ),
    Ok(
        "Hud_SetZoomerangProjection(void)",
    ),
    Ok(
        "Ty::MoveOnWater(void)",
    ),
    Ok(
        "ShatterStruct::SetInitialGroundPlane(void)",
    ),
    Ok(
        "ModuleInfo<SoundProp> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCameraState::DebugCameraState(CameraState)",
    ),
    Ok(
        "Ty::IdleStandActionTransition(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EnemySpawner::DeleteEnemy(EnemyObject *)",
    ),
    Ok(
        "TimeTrial_Init(void)",
    ),
    Ok(
        "Fluffy::RotateHead(void)",
    ),
    Ok(
        "ScriptProp::Reset(void)",
    ),
    Ok(
        "TyBite::DiveBiteStart(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Neddy::LogicUpdate(void)",
    ),
    Ok(
        "FrillLizard virtual table",
    ),
    Ok(
        "PE_BiteGlow_LoadResources(void)",
    ),
    Ok(
        "MKWaterProp::DrawStrip_HighDetail(WaterStripHeader *, Vector *, Material *)",
    ),
    Ok(
        "ModuleInfo<PerimeterCheckObjective>::Init(void)",
    ),
    Ok(
        "C3Actor::Message(MKMessage *)",
    ),
    Ok(
        "FrontEnd_Extras_OnEnter(void)",
    ),
    Ok(
        "AirPlatform virtual table",
    ),
    Ok(
        "Ty::DeinitIdleDogPaddle(void)",
    ),
    Ok(
        "Talisman::Reset(void)",
    ),
    Ok(
        "TyHealth::DoGainFX(void)",
    ),
    Ok(
        "BoulderTrap::Message(MKMessage *)",
    ),
    Ok(
        "BunyipStruct::Grow(void)",
    ),
    Ok(
        "MobilePlatformDesc virtual table",
    ),
    Ok(
        "Tools_ParticleRef::Update(Model *)",
    ),
    Ok(
        "MKGrassType::InitHeightTable(void)",
    ),
    Ok(
        "FrillLizard::AttackIdleStand(bool)",
    ),
    Ok(
        "HudImage::Draw(void)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_C3_Update(void)",
    ),
    Ok(
        "Coconut::Sinking(void)",
    ),
    Ok(
        "CableCar::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Megarang::Fire(Vector *, Vector *)",
    ),
    Ok(
        "LevelData::GetElementType(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "System_StartScene(int)",
    ),
    Ok(
        "BlueTongue::HitWithBoulder(void)",
    ),
    Ok(
        "Ty::LongFall(void)",
    ),
    Ok(
        "__builtin_type_info::~__builtin_type_info(void)",
    ),
    Ok(
        "SpyEgg::SpyEggIdle(void)",
    ),
    Ok(
        "PauseScreen_OptionControls_LoadResources(void)",
    ),
    Ok(
        "Ty::IntraSwimTransition(void)",
    ),
    Ok(
        "ModuleInfo<Target>::Init(void)",
    ),
    Ok(
        "EmuRoundupObjective::Init(GameObjDesc *)",
    ),
    Ok(
        "Groper::CheckSplash(void)",
    ),
    Ok(
        "BlueTongueRockObjective::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<WaterWheel>::Init(void)",
    ),
    Ok(
        "Animation::Destroy(void)",
    ),
    Ok(
        "Muddie::BlockInit(void)",
    ),
    Ok(
        "ModuleInfo<BeachHut>::Init(void)",
    ),
    Ok(
        "Elevator::Message(MKMessage *)",
    ),
    Ok(
        "Particle_Goo_Init(ParticleSystem **, Vector *, float)",
    ),
    Ok(
        "IceBlock_Add(Vector *, Vector *, CollisionResult *, IceBlockStruct **)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "UIText::Draw(void)",
    ),
    Ok(
        "_table_sinf(float)",
    ),
    Ok(
        "System_CheckZRequests(void)",
    ),
    Ok(
        "ModuleInfo<Farlapp>::Init(void)",
    ),
    Ok(
        "bad_exception virtual table",
    ),
    Ok(
        "Ty::IdleWaterShakeTransition(void)",
    ),
    Ok(
        "Shark::AddWake(void)",
    ),
    Ok(
        "GameObjectManager::AddObject(GameObject *, Matrix *, BoundingVolume *)",
    ),
    Err(
        InvalidSpecialMethod(
            "make_fp",
        ),
    ),
    Ok(
        "Bull::TossRock(void)",
    ),
    Ok(
        "BurningTree virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Spline_GetVelocity(Vector *, Vector *, Vector *, Vector *, float)",
    ),
    Ok(
        "Portal virtual table",
    ),
    Ok(
        "Input_GetButtonsPressed(InputDevices, InputDevices *)",
    ),
    Ok(
        "Generator::Off(void)",
    ),
    Ok(
        "BoundingRegion::IsPointWithin(Vector *)",
    ),
    Ok(
        "WeatherProp_LoadResources(KromeIni *)",
    ),
    Ok(
        "ZoneBlockerProp::Shattering(void)",
    ),
    Ok(
        "ModuleInfo<ChumBox> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScrubTurkey::Idle_CanGoToState(void)",
    ),
    Ok(
        "CrikeyCanister::Idle(void)",
    ),
    Ok(
        "BezierPathFollower::DrawVelocities(float)",
    ),
    Ok(
        "MKWaterProp::DrawHighDetail(void)",
    ),
    Ok(
        "RhinoGround::RecoverInit(void)",
    ),
    Ok(
        "Tools_DynamicStringTable::Init(void)",
    ),
    Ok(
        "BushPig::IsBiting(void)",
    ),
    Ok(
        "Boulder::Deinit(void)",
    ),
    Ok(
        "GameData::ClearSpecialPickups(void)",
    ),
    Ok(
        "Model::Draw(unsigned short *)",
    ),
    Ok(
        "GameObject::DrawModule(void)",
    ),
    Ok(
        "Ty::DeinitRangChange(void)",
    ),
    Ok(
        "_MKMem_TAlloc(int, char *, int)",
    ),
    Ok(
        "Gem::CheckCollected(float)",
    ),
    Ok(
        "RainbowEffect::Init(Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to TyAttributes_LoadResources(KromeIni *)",
    ),
    Ok(
        "Video_InitModule(void)",
    ),
    Ok(
        "QuadTriStrip::Draw(Vector *)",
    ),
    Ok(
        "TriggerBoxProp::Update(void)",
    ),
    Ok(
        "Friend::Draw(void)",
    ),
    Ok(
        "Lenny::Show(void)",
    ),
    Ok(
        "Wombat::FollowTy(void)",
    ),
    Ok(
        "WaterSlideData::Load(WayPointLoadInfo *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<MusicalIcicleObjective> virtual table",
    ),
    Ok(
        "LevelData::Deinit(void)",
    ),
    Ok(
        "UWDisableWobble(void)",
    ),
    Ok(
        "MKGrass_FindGrassType(char *)",
    ),
    Ok(
        "Maurie::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Groper::FlinchInit(void)",
    ),
    Ok(
        "LoadLevel_LoadSoundEvent(KromeIniLine *, char *, int *, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BonusPickup::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverride::Rail_Update(void)",
    ),
    Ok(
        "ChuteLog::Slide(void)",
    ),
    Ok(
        "BoomerangWeapon::InitCatching(void)",
    ),
    Ok(
        "Target::SpawnBubbles(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BadBoonie::Init(GameObjDesc *)",
    ),
    Ok(
        "FrontEnd_MainMenu_OnEnter(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::InitHitAntHill(void)",
    ),
    Ok(
        "StaticProp::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterSlideManager::Update(Vector *)",
    ),
    Ok(
        "ModuleInfo<CaveBat>::ConstructObject(void *)",
    ),
    Ok(
        "CattleDesc * descr_cast<CattleDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "RhinoGround::Recover(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Farlapp> virtual table",
    ),
    Ok(
        "BlueTongueThrower::PickUpInit(void)",
    ),
    Ok(
        "SharkCage_GetTyCage(void)",
    ),
    Ok(
        "BushPig::InitWalk(void)",
    ),
    Ok(
        "LensFlare_LoadResources(void)",
    ),
    Ok(
        "Model::List(void)",
    ),
    Ok(
        "ParticleSystem::Update(void)",
    ),
    Ok(
        "SnowGun::RotateTurret(void)",
    ),
    Ok(
        "ModuleInfo<StaticProp>::ConstructObject(void *)",
    ),
    Ok(
        "BoomerangWeapon::DeinitFiring(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rock::Init(GameObjDesc *)",
    ),
    Ok(
        "GasJet::Init(GameObjDesc *)",
    ),
    Ok(
        "Range_IsVisible(Vector *)",
    ),
    Ok(
        "Wombat::LoadDone(void)",
    ),
    Ok(
        "Ty::UpdatePhysics(void)",
    ),
    Ok(
        "global constructors keyed to SmallCrab_LoadResources(void)",
    ),
    Ok(
        "ModuleInfo<TriggerBoxProp> virtual table",
    ),
    Ok(
        "Model_GetNmbrOfMaterials(ModelTemplate *, int)",
    ),
    Ok(
        "Wombat::WSMan",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Talisman::Message(MKMessage *)",
    ),
    Ok(
        "GameCamera::NormalPlayerAdjust_Update(void)",
    ),
    Ok(
        "Dma::AddVif_SET_DIRECT(unsigned int)",
    ),
    Ok(
        "BuzzSaw2::Init(GameObjDesc *)",
    ),
    Ok(
        "CausticEffect::Update(void)",
    ),
    Ok(
        "Emu::InitBreakout(void)",
    ),
    Ok(
        "Vector::NormaliseRot(void)",
    ),
    Ok(
        "SharkCage::ShakeCage(void)",
    ),
    Ok(
        "SnowBallExplode_LoadResources(void)",
    ),
    Ok(
        "SpecialPickupStruct::LoadDone(void)",
    ),
    Ok(
        "LensFlare_Draw(void)",
    ),
    Ok(
        "Ty::InitIdleSwim(void)",
    ),
    Ok(
        "ModuleInfo<FishShoalField>::ConstructObject(void *)",
    ),
    Ok(
        "TriggerProp virtual table",
    ),
    Ok(
        "Ty::WaterToLandTransition(void)",
    ),
    Ok(
        "MiniGameA2_Deinit(void)",
    ),
    Ok(
        "WeatherProp::Deactivate(void)",
    ),
    Ok(
        "Tools_CapsuleTest(Vector *, Vector *, float, float, Vector *)",
    ),
    Ok(
        "Tools_RandomBox(Vector *, float)",
    ),
    Ok(
        "RhinoGround::Alert(void)",
    ),
    Ok(
        "GameCamera_UseNormalCamera(void)",
    ),
    Ok(
        "TimeAttack::Reset(void)",
    ),
    Ok(
        "GuideBarrel::Hit(void)",
    ),
    Ok(
        "MKGrass_Draw(void)",
    ),
    Ok(
        "Ty::StartRangSpecialAnimation(BoomerangSide, MKAnim *)",
    ),
    Ok(
        "KromeIni::Dump(char *)",
    ),
    Ok(
        "ScubaFrill::ChaseDeinit(void)",
    ),
    Ok(
        "TyParticleManager::DrawPreWater(void)",
    ),
    Ok(
        "MiniGame_Init(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_attr",
        ),
    ),
    Ok(
        "BadBoonie::Idle_Update(void)",
    ),
    Ok(
        "EnemyObject::CheckCommonAnimEvents(void)",
    ),
    Ok(
        "Teleporter::Deinit(void)",
    ),
    Ok(
        "FrontEnd_Draw(void)",
    ),
    Ok(
        "GameCamera::UpdateFinal(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillLizard::Death(void)",
    ),
    Ok(
        "Cattle::UpdateLogic(void)",
    ),
    Ok(
        "GameCamera_UseGunRecoil(float)",
    ),
    Ok(
        "TurtleStruct::SunBaking(void)",
    ),
    Ok(
        "MusicalIcicle::Vibrate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpikeyIce_End(void)",
    ),
    Ok(
        "Target::Reset(void)",
    ),
    Ok(
        "Ty::UnderWaterKnockBackDeinit(void)",
    ),
    Ok(
        "Animation::GetNodeName(int)",
    ),
    Ok(
        "EnemySpawner::Deinit(void)",
    ),
    Ok(
        "global constructors keyed to Dennis_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ParticleSystem::bProfileParticles",
    ),
    Ok(
        "EnemyObject::IsWithinCameraView(void)",
    ),
    Ok(
        "Shark::Crash(void)",
    ),
    Ok(
        "WeatherProp::Update(void)",
    ),
    Ok(
        "BushPig::CollisionCheck(float)",
    ),
    Ok(
        "Font::DrawText3d(char *, Vector *, float, float, FontJustify, Vector *, int, int, unsigned int *, int, int)",
    ),
    Ok(
        "GameCamera::Fall_Normal_SetSource(void)",
    ),
    Ok(
        "LilyPad virtual table",
    ),
    Ok(
        "GreySmoke::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to CaveBatObjective::bActivated",
    ),
    Ok(
        "Boulder::ShatteredUpdate(void)",
    ),
    Ok(
        "Tools_Log(int, char *)",
    ),
    Ok(
        "Barracuda::FlinchInit(void)",
    ),
    Ok(
        "CameraOverride::TopDown_Init(void)",
    ),
    Ok(
        "Vector::CMultiply(Vector *, Vector *)",
    ),
    Ok(
        "Bull::FindNextNode(void)",
    ),
    Ok(
        "EnemySpawner::SetSpawnDelay(float)",
    ),
    Ok(
        "ShadowBatPipe::Update(void)",
    ),
    Ok(
        "ModuleInfo<Moth>::ConstructObject(void *)",
    ),
    Ok(
        "PhysicsObject::Update(bool, float)",
    ),
    Ok(
        "SpecialPickupStruct::SetCollectionCamera(Vector *, Vector *)",
    ),
    Ok(
        "CompareAngle(float, float)",
    ),
    Ok(
        "Fluffy::Draw(void)",
    ),
    Ok(
        "Leech virtual table",
    ),
    Ok(
        "SnowRoo_LoadResources(KromeIni *)",
    ),
    Ok(
        "GuideBarrel::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera_GetYaw(void)",
    ),
    Ok(
        "LightningInit::Init(void)",
    ),
    Ok(
        "MusicalIcicle::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Texture::pCfgVRamLocked",
    ),
    Ok(
        "Yabby::WalkInit(void)",
    ),
    Ok(
        "CaveBat::Init(GameObjDesc *)",
    ),
    Ok(
        "KingFisher::UpdateWorldMatrix(void)",
    ),
    Ok(
        "ModuleInfo<FallGuideProp>::ConstructObject(void *)",
    ),
    Ok(
        "Reeds_Init(void)",
    ),
    Ok(
        "LavaBurner::Message(MKMessage *)",
    ),
    Ok(
        "Tools_Dampen(Vector *, Vector *, float)",
    ),
    Ok(
        "Skink::GetStateByRange(int)",
    ),
    Ok(
        "ConditionalScriptProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "LevelObjective::Reset(void)",
    ),
    Ok(
        "BilbyStruct::Rescued(void)",
    ),
    Ok(
        "FarLapp_LoadResources(KromeIni *)",
    ),
    Ok(
        "CritterField2::GeneratePointInField(Vector *, bool, float)",
    ),
    Ok(
        "MiniGameObjective::pActiveMiniGame",
    ),
    Ok(
        "BlueTongue::ChaseAttack(void)",
    ),
    Ok(
        "WarpFlower virtual table",
    ),
    Ok(
        "ModuleInfo<Collapsible>::Init(void)",
    ),
    Ok(
        "SeaMine::bFirst",
    ),
    Ok(
        "BushPig::Idle(void)",
    ),
    Ok(
        "BezierPathFollower::Reset(void)",
    ),
    Ok(
        "Texture::CreateFromRawData(char *, void *, void *, int, int, int)",
    ),
    Ok(
        "FrontEnd_Extras_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sly::Idle(void)",
    ),
    Ok(
        "ModuleInfo<Grasshopper>::ConstructObject(void *)",
    ),
    Ok(
        "DialogPlayer::LoadSubTitleBank(char *)",
    ),
    Ok(
        "PathManager::SetCurrentPath(PathSegment *, int)",
    ),
    Ok(
        "MKParticleGen::Init(MKParticleGenType *)",
    ),
    Ok(
        "MKWaterManager_CreateDebugMenus(void)",
    ),
    Ok(
        "StopwatchStruct::targetTime",
    ),
    Ok(
        "View::ClearBuffer(int, int, int, int)",
    ),
    Ok(
        "ModuleInfo<GuideBarrel> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DustTrail::Deinit(void)",
    ),
    Ok(
        "Ty::IdleTransition(void)",
    ),
    Ok(
        "bad_typeid type_info node",
    ),
    Ok(
        "Model::UpdateFillState(int)",
    ),
    Ok(
        "TyParticleManager::SpawnSnowFlake(Vector *, Vector *, float, float, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Furnace::Reset(void)",
    ),
    Ok(
        "RenderTexture_ResetVRam(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lenny_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<ScrubTurkey> virtual table",
    ),
    Ok(
        "ModuleInfo<C1Water>::ConstructObject(void *)",
    ),
    Ok(
        "DialogPlayer::Animate(unsigned int, EffectStruct *, int &)",
    ),
    Ok(
        "QuatRotation::Scale(QuatRotation *, float)",
    ),
    Ok(
        "Rain::Deinit(void)",
    ),
    Ok(
        "DataVal::WS::Init(void)",
    ),
    Ok(
        "Tools_RenderToTarget(Material *, float, float, float, float, float, float, float)",
    ),
    Ok(
        "global constructors keyed to BlueTongue_LoadResources(KromeIni *)",
    ),
    Ok(
        "Dennis::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::AnimatingCamera_Init(void)",
    ),
    Ok(
        "global constructors keyed to THUNDER_EGG_REF",
    ),
    Ok(
        "YabbyStalactite::Falling(void)",
    ),
    Ok(
        "GameData::RestoreLives(void)",
    ),
    Ok(
        "BarbedWire_Delete(BarbedWireStruct *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::bDrawDebugInfo",
    ),
    Ok(
        "WhiteBat::FollowBossInit(void)",
    ),
    Ok(
        "Burnable::Reset(void)",
    ),
    Ok(
        "Ty::WaterSlideTransition(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKGrassType::Load(void)",
    ),
    Ok(
        "ModuleInfo<ZoneBlockerProp>::ConstructObject(void *)",
    ),
    Ok(
        "Spear::Init(GameObjDesc *)",
    ),
    Ok(
        "LogicState::Init(GameState)",
    ),
    Ok(
        "PreInitializeLevel(int)",
    ),
    Ok(
        "Ty::SetIdleAnimation(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SlerpQuat(Vector *, Vector *, float, Vector *)",
    ),
    Ok(
        "ModuleInfo<Roach>::Init(void)",
    ),
    Ok(
        "Geyser::TyIn(void)",
    ),
    Ok(
        "DDASession::StartSession(void)",
    ),
    Ok(
        "TyBite::RolyPoly(void)",
    ),
    Ok(
        "Fly::Update_Fall(void)",
    ),
    Ok(
        "ParticleSystem::CreateParticle(void)",
    ),
    Ok(
        "Vector::Magnitude(void)",
    ),
    Ok(
        "Model::StartSubObjectDraw(void)",
    ),
    Ok(
        "Generator::Message(MKMessage *)",
    ),
    Ok(
        "Barracuda::FleeInit(void)",
    ),
    Ok(
        "Eel_LoadResources(KromeIni *)",
    ),
    Ok(
        "BushPig::DeinitClaim(void)",
    ),
    Ok(
        "Frog::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Gem_PickupParticle_LoadResources(void)",
    ),
    Ok(
        "ModuleInfo<Sheila>::Init(void)",
    ),
    Ok(
        "SelectionRang::SetPosition(Vector *, char, View *)",
    ),
    Ok(
        "void LoadDescriptors<ShatterableDescriptor>(KromeIni *, char *, ShatterableDescriptor *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "char type_info function",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Roach::RunAwayDeinit(void)",
    ),
    Ok(
        "Skink::Patrol(void)",
    ),
    Ok(
        "DialogPlayer::InitPhrase(void)",
    ),
    Ok(
        "ModuleInfo<InvisiCrate>::Init(void)",
    ),
    Ok(
        "Ty::NormaliseToSlope(float)",
    ),
    Ok(
        "ParticleSystemManager::Update(void)",
    ),
    Ok(
        "Dma::AddTag_End(unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "MKSceneManager::DeinitModule(void)",
    ),
    Ok(
        "MKWaterProp::ConstructTriStripVertex(Water_TriStrip *, int, WaterStripVertex *, WaterStripUV *, WaterStripColor *, WaterStripNormal *, Vector *)",
    ),
    Ok(
        "AnimatingProp::Init(GameObjDesc *)",
    ),
    Ok(
        "GameData_Init(void)",
    ),
    Ok(
        "AuroraKid::Safe(void)",
    ),
    Ok(
        "ModuleInfo<BlueTongue>::Init(void)",
    ),
    Ok(
        "Round(float)",
    ),
    Ok(
        "SpeedboatObjective::Update(void)",
    ),
    Ok(
        "BlueTongueThrower::DeathDeinit(void)",
    ),
    Ok(
        "ScrubTurkey::Init(GameObjDesc *)",
    ),
    Ok(
        "MKAnimScript::Init(MKAnimScript *)",
    ),
    Ok(
        "Groper::StunnedInit(void)",
    ),
    Ok(
        "Sheila_BeHappy(void)",
    ),
    Ok(
        "Platform::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongue::IdleAttack(void)",
    ),
    Ok(
        "CrikeyChum::UpdateWorldMatrix(void)",
    ),
    Ok(
        "global constructors keyed to BlueTongueRockObjective::bActivated",
    ),
    Ok(
        "MKWater::GetSubObjectOrigin(int)",
    ),
    Ok(
        "Sentinel::Watch(void)",
    ),
    Ok(
        "Ibis::UpdateLogic(void)",
    ),
    Ok(
        "ModuleInfo<CuttleFish>::Init(void)",
    ),
    Ok(
        "Tools_Wobble(float, int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterSlideData::CalcPerpPos(void)",
    ),
    Ok(
        "GameCameraState::PlayerAdjustState(CameraState, bool)",
    ),
    Ok(
        "BoomerangWeapon::BeginAmmo(void)",
    ),
    Ok(
        "ModuleInfo<SnowPile>::Init(void)",
    ),
    Ok(
        "Model::IsSubObjectEnabled(int)",
    ),
    Ok(
        "MKWaterProp::IsStripVisible(WaterStripHeader *)",
    ),
    Ok(
        "BonusPickup::CheckMagnetism(float)",
    ),
    Ok(
        "DrawRope(CircularQueue<Vector> *, Material *, float)",
    ),
    Ok(
        "WaterfallSprayStruct::splashEnvelope",
    ),
    Ok(
        "ModuleInfo<Julius>::Init(void)",
    ),
    Ok(
        "GuideParticle_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BezierPathFollower::GetNextNode(void)",
    ),
    Ok(
        "TyParticleManager::Deinit(void)",
    ),
    Ok(
        "GameCamera_UseGlideCamera(bool)",
    ),
    Ok(
        "BlueTongue::ChaseAttackInit(void)",
    ),
    Ok(
        "BoomerangWeapon::Reset(void)",
    ),
    Ok(
        "Stopwatch_Enable(bool)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::AddGif_AD_FBA_2(unsigned long)",
    ),
    Ok(
        "A1FrillObjective::Update(void)",
    ),
    Ok(
        "LevelObjective::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<C3Actor> virtual table",
    ),
    Ok(
        "ModuleInfo<SharkCage>::Init(void)",
    ),
    Ok(
        "ModuleInfo<FrillProblemObjective>::ConstructObject(void *)",
    ),
    Ok(
        "__si_type_info::~__si_type_info(void)",
    ),
    Ok(
        "Friend::Update(void)",
    ),
    Ok(
        "CrikeyCanister::Reset(void)",
    ),
    Ok(
        "BuzzSaw2::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterProp::UploadVUSubObjectData(void)",
    ),
    Ok(
        "GameCamera::UseFluffyCamera(bool, Model *)",
    ),
    Ok(
        "IceBlockStruct::Intro(void)",
    ),
    Ok(
        "Bull::CheckForCollisions(bool *, bool *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ExtendedAnalogControl::Update(float, float)",
    ),
    Ok(
        "PauseScreen_GameTotals_Init(void)",
    ),
    Ok(
        "ModuleInfo<TreasureChest>::Init(void)",
    ),
    Ok(
        "MorayEel::Update(void)",
    ),
    Ok(
        "Setup_LoadLevel(void)",
    ),
    Ok(
        "Eel::DrawDebug(void)",
    ),
    Ok(
        "CheckpointStruct::Dormant(void)",
    ),
    Ok(
        "MKWater::debugNumHighDetailQuads",
    ),
    Ok(
        "Bull::GetNodePositions(void)",
    ),
    Ok(
        "KoalaKid::HappyInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bunyip_Deinit(void)",
    ),
    Ok(
        "Muddie::Block(void)",
    ),
    Ok(
        "GameCamera::CameraOverride_CanUsePlayerAdjust(void)",
    ),
    Ok(
        "Turtle_Add(Vector *, float)",
    ),
    Ok(
        "Str_GetDirectoryFromPath(char *)",
    ),
    Ok(
        "MKParticleGen::DrawQuads(View *, Vector *)",
    ),
    Ok(
        "Tick::IdleInit(void)",
    ),
    Ok(
        "Rock::FireAtTarget(Vector *, Vector *, float, int)",
    ),
    Ok(
        "Bull::VictoryInit(void)",
    ),
    Ok(
        "ReflectionStruct::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RockProjectile virtual table",
    ),
    Ok(
        "CritterField2Desc::FreeCritter(BaseCritter *)",
    ),
    Ok(
        "BezierPathFollower::GetStartPosition(Vector *)",
    ),
    Ok(
        "Waterfall_Init(void)",
    ),
    Ok(
        "ModuleInfo<Shark> virtual table",
    ),
    Ok(
        "Gate::Closing_Update(void)",
    ),
    Ok(
        "SaveStates_Save(void)",
    ),
    Ok(
        "Ty::Draw(void)",
    ),
    Ok(
        "ConditionalScriptProp::CheckConditions(void)",
    ),
    Ok(
        "System_UseDebugCamera(void)",
    ),
    Ok(
        "ChuteLog::LoadDone(void)",
    ),
    Ok(
        "KingFisherDesc * descr_cast<KingFisherDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "unexpected(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKShadow_SetLockedPixelColor(unsigned int)",
    ),
    Ok(
        "ScubaFrill::Chase(void)",
    ),
    Ok(
        "PauseScreen_GameInfo_Reset(void)",
    ),
    Ok(
        "RingoArm::Up(void)",
    ),
    Ok(
        "LevelObjective::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<SpecialPickupStruct>::ConstructObject(void *)",
    ),
    Ok(
        "TumbleWeed::totalWeeds",
    ),
    Ok(
        "MorayEel::Idle(void)",
    ),
    Ok(
        "Maurie_ComeOverHere(SignPost *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Roach::IdleInit(void)",
    ),
    Ok(
        "PubeCrab::WalkSideways(bool)",
    ),
    Ok(
        "GameObjectManager::CountEntities(KromeIni *, KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "OmniLight_CreateScene(int, BoundingVolume *)",
    ),
    Ok(
        "PubeCrab::Patrol(void)",
    ),
    Ok(
        "CameraOverride::FixedPoint_Create(void *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScrubTurkey::CatchEgg(void)",
    ),
    Ok(
        "CameraOverrideManager::ResetManager(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::FastDive(void)",
    ),
    Ok(
        "View::BuildClipMatrix(Matrix *)",
    ),
    Ok(
        "RhinoGround::Flip(void)",
    ),
    Ok(
        "PauseScreen_GameTotals_Draw(void)",
    ),
    Ok(
        "Ty::SurfacingTransition(void)",
    ),
    Ok(
        "Ty::GetBreakAndTurnAngle(void)",
    ),
    Ok(
        "Bull::Search(void)",
    ),
    Ok(
        "Texture::DumpVRam(void)",
    ),
    Ok(
        "GameCamera::SnapSource(Vector *)",
    ),
    Ok(
        "TumbleWeed_LoadResources(KromeIni *)",
    ),
    Ok(
        "NinjaGecko::Alert(void)",
    ),
    Ok(
        "WarpFlower_LoadResources(KromeIni *)",
    ),
    Ok(
        "MKAnimScript::GetFrameOfNormalPosition(float, MKAnim *)",
    ),
    Ok(
        "Rufus::ChaseInit(void)",
    ),
    Ok(
        "Developer_Update(void)",
    ),
    Ok(
        "InPlane3D(Vector *, Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "ManuallyScrollTextures(void)",
    ),
    Ok(
        "ApproxMag(float, float)",
    ),
    Ok(
        "Weather_GetEnabled(void)",
    ),
    Ok(
        "Yabby::Walk(void)",
    ),
    Ok(
        "Roach::FlyInit(void)",
    ),
    Ok(
        "ModuleInfo<EmuRoundupObjective>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DebugUVs(MKWaterProp *, MKWaterType *)",
    ),
    Ok(
        "Gem::Init(GameObjDesc *)",
    ),
    Ok(
        "GameCamera::SetShakeOffset(Vector *)",
    ),
    Ok(
        "ModuleInfo<TyAttributes> virtual table",
    ),
    Ok(
        "ModuleInfo<Torch> virtual table",
    ),
    Ok(
        "Groper::GetStomachPos(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TriggerProp::GetPos(void)",
    ),
    Ok(
        "Video_GetSize(Video *, int *, int *)",
    ),
    Ok(
        "Dma::AddGif_AD_FRAME_1(unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "AntHill::Draw(void)",
    ),
    Ok(
        "C3Actor::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "ModuleInfo<AuroraKid>::Init(void)",
    ),
    Ok(
        "FootEffect::Spawn(Vector *, Vector *, BoundingVolume *, float, int, float, Vector *, bool)",
    ),
    Ok(
        "ModuleInfo<WaterPipe> virtual table",
    ),
    Ok(
        "DialogProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Ty_FreeResources(void)",
    ),
    Ok(
        "SkinkDropTail::Draw(void)",
    ),
    Ok(
        "BlitterCritterFieldDesc * descr_cast<BlitterCritterFieldDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "global constructors keyed to SignPost_LoadResources(KromeIni *)",
    ),
    Ok(
        "Camera::logModeChanges",
    ),
    Ok(
        "KoalaKid::LoadDone(void)",
    ),
    Ok(
        "ModuleInfo<SnowBall>::ConstructObject(void *)",
    ),
    Ok(
        "Farlapp::FindClosestWayPoint(float)",
    ),
    Ok(
        "InitializeLevel(void)",
    ),
    Ok(
        "Dma::AddTag_End(unsigned long)",
    ),
    Ok(
        "SpinningLog_Find(TyCollisionInfo *)",
    ),
    Ok(
        "StaticSpikes_Add(Vector *, Vector *)",
    ),
    Ok(
        "Dialog_Init(void)",
    ),
    Ok(
        "Camera::CalcCameraProp(InputDevices, float, bool, int, int)",
    ),
    Ok(
        "ScrubTurkey::Alert_Init(void)",
    ),
    Ok(
        "GCT_TestFloor(Vector *, float, float, int, bool, CollisionResult *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Fly::SharedUpdate(void)",
    ),
    Ok(
        "Hud::DrawDigits(int, float, float, float, FontJustify)",
    ),
    Ok(
        "global constructors keyed to Skink::nBeerObj",
    ),
    Ok(
        "Wombat::ChaseInit(void)",
    ),
    Ok(
        "TyBite::HasBitten(Model *, Vector *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::CanBeAttacked(void)",
    ),
    Ok(
        "BoomerangManager::Update(Matrix *, Matrix *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Gate::Opening_Update(void)",
    ),
    Ok(
        "Torch::Draw(void)",
    ),
    Ok(
        "ModuleInfo<Boomerang>::ConstructObject(void *)",
    ),
    Ok(
        "Rufus::Confront(void)",
    ),
    Ok(
        "Material::SetTextureAlias(Texture *)",
    ),
    Ok(
        "Ty::SwapRangs(char *)",
    ),
    Ok(
        "C3Chest::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EnemyObject::SetTarget(Vector *)",
    ),
    Ok(
        "FishShoalField virtual table",
    ),
    Ok(
        "LavaEffect::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "SoundBank_Play(int, Vector *, unsigned int)",
    ),
    Ok(
        "Roach::EndFlyInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::AddGif_AD_XYOFFSET_1(unsigned long, unsigned long)",
    ),
    Ok(
        "Yabby virtual table",
    ),
    Ok(
        "Crikey::UpdateSubObjVisibility(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StaticSpikes_Reset(void)",
    ),
    Ok(
        "DirectLight::RecalcMatrices(void)",
    ),
    Ok(
        "ModuleInfo<AuroraKid> virtual table",
    ),
    Ok(
        "FrogField virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Muddie::TurnSideOn(float)",
    ),
    Err(
        InvalidSpecialMethod(
            "infinity",
        ),
    ),
    Ok(
        "Gecko::GenerateNextPosition(void)",
    ),
    Ok(
        "SnowSpider::AttackDeinit(void)",
    ),
    Ok(
        "Eel::Init(GameObjDesc *)",
    ),
    Ok(
        "Rhino::DeinitRun(void)",
    ),
    Ok(
        "FrillLizard::RunToBunker(void)",
    ),
    Ok(
        "WaterPipe::Wobble(void)",
    ),
    Ok(
        "ModuleInfo<StalactiteTrap> virtual table",
    ),
    Ok(
        "BushPig::InitClaim(void)",
    ),
    Ok(
        "Gate_LoadResources(KromeIni *)",
    ),
    Ok(
        "Aurora::Message(MKMessage *)",
    ),
    Ok(
        "Material::SetTextureAlias(Material *)",
    ),
    Ok(
        "ModuleInfo<SnowPile>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKAnimScript::Apply(Animation *)",
    ),
    Ok(
        "ModuleInfo<WarpFlower>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterSlideEffect::Render(void)",
    ),
    Ok(
        "Doomerang::UpdateFired(void)",
    ),
    Ok(
        "System_GameDraw(void)",
    ),
    Ok(
        "Translation_DeinitModule(void)",
    ),
    Ok(
        "MKWater::bProfile",
    ),
    Ok(
        "Skink::nCrispyBatObj",
    ),
    Ok(
        "Croc::DeathInit(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "cp_exception_info",
        ),
    ),
    Ok(
        "BushPig::InitSplatOnGround(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::pStack",
    ),
    Ok(
        "SnowBall virtual table",
    ),
    Ok(
        "Emu::DeinitIdle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StaticFXProp::Message(MKMessage *)",
    ),
    Ok(
        "CrikeyChum::Update(void)",
    ),
    Ok(
        "Ty::LandToWaterTransition(void)",
    ),
    Ok(
        "Ty::QuickSand(void)",
    ),
    Ok(
        "BadBoonie::Idle_Init(void)",
    ),
    Ok(
        "PieSlice_End(void)",
    ),
    Ok(
        "ChumBox::LoadDone(void)",
    ),
    Ok(
        "DiveRing::pSystem",
    ),
    Ok(
        "Fluffy_GetModel(void)",
    ),
    Ok(
        "KoalaKid::Init(GameObjDesc *)",
    ),
    Ok(
        "FrontEnd_LoadGame_OnEnter(void)",
    ),
    Ok(
        "SkinkDropTail::Init(void)",
    ),
    Ok(
        "ScubaFrill::LoadDone(void)",
    ),
    Ok(
        "FaderObject::Reset(void)",
    ),
    Ok(
        "Waterfall_Unlock(void)",
    ),
    Ok(
        "File_InitModule(void)",
    ),
    Ok(
        "MKPackage_Update(void)",
    ),
    Ok(
        "GameCamera::Swing(void)",
    ),
    Ok(
        "Furnace::fColorDelta",
    ),
    Ok(
        "Dma::Pop(void)",
    ),
    Ok(
        "MiniBoulderStruct::Draw(void)",
    ),
    Ok(
        "ChumBox::Deinit(void)",
    ),
    Ok(
        "Neddy::Message(MKMessage *)",
    ),
    Ok(
        "CableCar_LoadResources(KromeIni *)",
    ),
    Ok(
        "FishShoalField::LoadDone(void)",
    ),
    Ok(
        "FrillProblem_HouseSaved(void)",
    ),
    Ok(
        "SpeedboatObjective::Message(MKMessage *)",
    ),
    Ok(
        "Bat::SweepInit(void)",
    ),
    Ok(
        "BushPig::InitHitWall(void)",
    ),
    Ok(
        "BushPig_Line(KromeIniLine *)",
    ),
    Ok(
        "Leech::SuckInit(void)",
    ),
    Ok(
        "FlameThrower::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DialogEffect::pDialogPlayer",
    ),
    Ok(
        "MKWater::minV",
    ),
    Ok(
        "ModuleInfo<KidObjective> virtual table",
    ),
    Ok(
        "MKWaterProp::DrawStrip(WaterStripHeader *, Material *)",
    ),
    Ok(
        "EnemyObject::GetDesc(void)",
    ),
    Ok(
        "Dialog_Deinit(void)",
    ),
    Ok(
        "CrateStruct::Init(GameObjDesc *)",
    ),
    Ok(
        "Rufus::StopAttack(bool)",
    ),
    Ok(
        "ShadowBatValve::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Boomerang::SetOrientation(float, float)",
    ),
    Ok(
        "GameObjectManager::DeinitLevel(void)",
    ),
    Ok(
        "ScrubTurkey::JumpFromRang_Update(void)",
    ),
    Ok(
        "Critter2::GetDesc(void)",
    ),
    Ok(
        "Main_InitStaticModules(void)",
    ),
    Ok(
        "GameCamera::SetCameraShake(Vector *)",
    ),
    Ok(
        "ModuleInfo<StaticFXProp>::Init(void)",
    ),
    Ok(
        "SeaMine::Update(void)",
    ),
    Ok(
        "BushPig::DeinitPullLasso(void)",
    ),
    Ok(
        "ModuleInfo<FrillProblemObjective>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShatterStruct::Delete(void)",
    ),
    Ok(
        "Dma::AddTag_End_DIRECT(unsigned long)",
    ),
    Ok(
        "Shark virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterSlideData::SpawnParticles(void)",
    ),
    Ok(
        "Fluffy::FireSnowBall(void)",
    ),
    Ok(
        "GameData::SetHasFreedBilby(BilbyType, bool)",
    ),
    Ok(
        "GameCamera::AutoPlayerAdjust_Init(void)",
    ),
    Ok(
        "Crikey::DrawDebug(void)",
    ),
    Ok(
        "MKSceneManager::Deinit(void)",
    ),
    Ok(
        "Input_GetButtonName(int)",
    ),
    Ok(
        "ModuleInfo<Rock>::ConstructObject(void *)",
    ),
    Ok(
        "AntHill virtual table",
    ),
    Ok(
        "Barracuda virtual table",
    ),
    Ok(
        "BushPig::HasHeadCharged(Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Skink::Dodge(void)",
    ),
    Ok(
        "KoalaKid virtual table",
    ),
    Ok(
        "AnimatingProp virtual table",
    ),
    Ok(
        "GameCamera_GetTargetVelocity(void)",
    ),
    Ok(
        "Shark::CircleCage(void)",
    ),
    Ok(
        "WaterTankStruct::Idle(void)",
    ),
    Ok(
        "WaterSlideData::DeinitFall(void)",
    ),
    Ok(
        "StalactiteTrap::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "IceBlock_Delete(IceBlockStruct *)",
    ),
    Ok(
        "Tools_SmoothToAngle2(float, float, float, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EnemyWaypoints::NextWaypoint(void)",
    ),
    Ok(
        "Bunyip_Reset(void)",
    ),
    Ok(
        "global constructors keyed to AnimatingPropDesc::Load(KromeIni *)",
    ),
    Ok(
        "KoalaKidsActivate(void)",
    ),
    Ok(
        "Speedboat::InitRiding(void)",
    ),
    Ok(
        "Wombat::TeleportInit(void)",
    ),
    Ok(
        "ScubaFrill::DeathInit(void)",
    ),
    Ok(
        "CaveBat virtual table",
    ),
    Ok(
        "BuzzSaw2 virtual table",
    ),
    Ok(
        "RenderTexture::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "TrapdoorSpider::HideInHoleInit(void)",
    ),
    Ok(
        "NinjaGecko::Crawl(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Jeep::Idle(void)",
    ),
    Ok(
        "Blitter_Image::Draw(int, Texture *)",
    ),
    Ok(
        "MKMemoryCard_ProcessState(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CaveBat::GenerateRandomPosAtCeiling(Vector *)",
    ),
    Ok(
        "ModuleInfo<BushPig>::Init(void)",
    ),
    Ok(
        "Basket_LoadResources(KromeIni *)",
    ),
    Ok(
        "MKShadow_DrawCPU(MKShadow *, Vector *)",
    ),
    Ok(
        "NinjaGecko::KipupInit(void)",
    ),
    Ok(
        "SeaMine::Magnetic(Vector *)",
    ),
    Ok(
        "MKSceneManager::GetPropsInRange(MKProp **, int, Vector *, float, int, int, bool)",
    ),
    Ok(
        "Gem::Draw(void)",
    ),
    Ok(
        "BurnableDescriptor virtual table",
    ),
    Ok(
        "GameObjDesc::CreateObject(void)",
    ),
    Ok(
        "Model::EndSubObjectDraw(void)",
    ),
    Ok(
        "Friend::GetState(void)",
    ),
    Ok(
        "SynkerFrillLizard virtual table",
    ),
    Ok(
        "DropPontoon::FallInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrontEnd_Gallery_DestroyVideo(void)",
    ),
    Ok(
        "GCT_Dampen(Vector *, Vector *, float)",
    ),
    Ok(
        "PathFindingObject::Init(int, float, float, float, float, float)",
    ),
    Ok(
        "SkinkDropTail::nRefCount",
    ),
    Ok(
        "ProjectileDesc * descr_cast<ProjectileDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "EnemyObject::CollideWithTy(Vector *)",
    ),
    Ok(
        "BurningTree::Init(GameObjDesc *)",
    ),
    Ok(
        "ZoneBlockerProp::Reset(void)",
    ),
    Ok(
        "TreasureChest::Close(void)",
    ),
    Ok(
        "Boulder::UpdateNormal(void)",
    ),
    Ok(
        "ParticleSystemManager::Draw(void)",
    ),
    Ok(
        "ModuleInfo<Shark>::Init(void)",
    ),
    Ok(
        "Bull::CheckForCollisionWithAntHills(Model *)",
    ),
    Ok(
        "ModuleInfo<Basket> virtual table",
    ),
    Ok(
        "Basket::UpdateLocalToWorld(void)",
    ),
    Ok(
        "ResolveCollisions(Vector *, Vector *, float)",
    ),
    Ok(
        "SnowGun::GetFrontXZ(void)",
    ),
    Ok(
        "FootEffect::footMudType",
    ),
    Ok(
        "ModuleInfo<KoalaKid>::Init(void)",
    ),
    Ok(
        "Bouncer::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterfallStreamStruct::Draw(void)",
    ),
    Ok(
        "ModuleInfo<Boomerang> virtual table",
    ),
    Ok(
        "Frog::JumpingState(void)",
    ),
    Ok(
        "ModuleInfo<EmuRoundupObjective> virtual table",
    ),
    Ok(
        "TyHealth::SetType(TyHealthType)",
    ),
    Ok(
        "Croc::AddWake(void)",
    ),
    Ok(
        "SmallCrab virtual table",
    ),
    Ok(
        "WeatherProp::Activate(void)",
    ),
    Ok(
        "Aquarang_LoadResources(KromeIni *)",
    ),
    Ok(
        "Boomerang::DrawShadow(Vector *)",
    ),
    Ok(
        "Ty::InitWarp(void)",
    ),
    Ok(
        "SnowGun::PitchGun(void)",
    ),
    Ok(
        "LogicGameOver(void)",
    ),
    Ok(
        "CritterField2::GetDesc(void)",
    ),
    Ok(
        "FinishLineStruct::Reset(void)",
    ),
    Ok(
        "ExactMag(float, float, float)",
    ),
    Ok(
        "BuzzSaw2::Reset(void)",
    ),
    Ok(
        "ObjectiveFinder::Draw(void)",
    ),
    Ok(
        "FireDrum::Update(void)",
    ),
    Ok(
        "Str_Printf(char *,...)",
    ),
    Ok(
        "ModuleInfo<SnowGunAmmo>::Init(void)",
    ),
    Ok(
        "Jeep::PerimeterCheck(void)",
    ),
    Ok(
        "Boomerang_Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FlameThrower::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lasso::InitLassoCaughtWaterTank(void)",
    ),
    Ok(
        "Windmill_Reset(void)",
    ),
    Ok(
        "SoundBank_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Particle_Portal_Init(ParticleSystem **, Vector *, BoundingVolume *, float)",
    ),
    Ok(
        "AuroraKid::ResetPathVariables(void)",
    ),
    Ok(
        "TyMemCard_CopyToCard(int, char *, char *)",
    ),
    Ok(
        "FrontEnd_LoadLevel_Deinit(void)",
    ),
    Ok(
        "MKSceneManager::DrawRecursiveProps(SMNode *, int)",
    ),
    Ok(
        "MKWater::bDrawNormals",
    ),
    Ok(
        "ModuleInfo<Neddy>::ConstructObject(void *)",
    ),
    Ok(
        "WeatherProp::Message(MKMessage *)",
    ),
    Ok(
        "BoomerangWeapon::Catching(void)",
    ),
    Ok(
        "FrillLizard::Run(bool)",
    ),
    Ok(
        "StreamBuffer::LinearSpaceAvailable(void)",
    ),
    Ok(
        "void LoadDescriptors<RedButtonDescriptor>(KromeIni *, char *, RedButtonDescriptor *)",
    ),
    Ok(
        "set_terminate(void (*)(void))",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Wombat::CreateWaterSlideManager(void)",
    ),
    Ok(
        "Damageable::BeingDamaged(void)",
    ),
    Ok(
        "Shatterable::PlayShatterSound(void)",
    ),
    Ok(
        "Basket::SpawnPickup(void)",
    ),
    Ok(
        "MusicalIcicle::Avalanche(void)",
    ),
    Ok(
        "BoomerangManager::Hide(BoomerangSide)",
    ),
    Ok(
        "Video_IsEnd(Video *)",
    ),
    Ok(
        "ModuleInfo<TrapdoorSpider> virtual table",
    ),
    Ok(
        "ModuleInfo<Damageable> virtual table",
    ),
    Ok(
        "global constructors keyed to Barracuda_LoadResources(KromeIni *)",
    ),
    Ok(
        "Str_Lower(char *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to Script_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::HitAntHillTransition(void)",
    ),
    Ok(
        "RhinoGround::AttackInit(void)",
    ),
    Ok(
        "BeachHut::beachHutModule",
    ),
    Ok(
        "MakeMatrix(Matrix *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "Target::Draw(void)",
    ),
    Ok(
        "Yabby::ReverseInit(void)",
    ),
    Ok(
        "PlatformRider::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Path_Init(void)",
    ),
    Ok(
        "Waterfall_Update(void)",
    ),
    Ok(
        "global constructors keyed to KenOath_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScubaFrill::ShootInit(void)",
    ),
    Ok(
        "ScubaFrill::Init(GameObjDesc *)",
    ),
    Ok(
        "ChuteLog::SlideInit(void)",
    ),
    Ok(
        "BaseParticleSystemType::SetDistances(float, float, float)",
    ),
    Ok(
        "FootEffect::pMudMat",
    ),
    Ok(
        "Ty::DoCollisions(void)",
    ),
    Ok(
        "ModuleInfo<KenOath>::Init(void)",
    ),
    Ok(
        "type_info::operator!=(type_info const &) const",
    ),
    Ok(
        "ModuleInfo<Groper>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tools_AlignDirectionToGround(Vector *, Vector *)",
    ),
    Ok(
        "Boomerang_Deinit(void)",
    ),
    Ok(
        "Dma::AddGif_AD_DIMX(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "BlueTongueThrower::FlinchInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Basket::Idle(void)",
    ),
    Ok(
        "WaterSlideData::InitFast(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sentinel::Idle(void)",
    ),
    Ok(
        "ControlVal::UseControlConfig(int)",
    ),
    Ok(
        "ParticleSystemManager::FreeParticleChunk(ParticleChunk *)",
    ),
    Ok(
        "Fluffy::UpdateMovement(void)",
    ),
    Ok(
        "Lasso::GetControlPoints(Vector *, Vector *, Vector *)",
    ),
    Ok(
        "Ascii2Sjis(char)",
    ),
    Ok(
        "Rain::DrawDebugInfo(View *)",
    ),
    Ok(
        "GCT_WaypointPlaneManager::TestPoint(Vector *)",
    ),
    Ok(
        "Target::CreateModel(void)",
    ),
    Ok(
        "ModuleInfo<Portal>::Init(void)",
    ),
    Ok(
        "vDOUT(char *,...)",
    ),
    Ok(
        "Muddie::CheckEvents(void)",
    ),
    Ok(
        "ModuleInfo<Zappyrang>::Init(void)",
    ),
    Ok(
        "WaterfallBaseStruct::Init(Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "Input_WasButtonPressed(InputDevices, int, InputDevices *)",
    ),
    Ok(
        "Fly_ShowTyFlies(void)",
    ),
    Ok(
        "FindNearestPortal(Vector *)",
    ),
    Ok(
        "BushPig::Death(void)",
    ),
    Ok(
        "GuideParticle::LoadDone(void)",
    ),
    Ok(
        "Torch::LoadDone(void)",
    ),
    Ok(
        "GameData::GetTotalTime(void)",
    ),
    Ok(
        "Rock::Fire(Vector *)",
    ),
    Ok(
        "Barracuda_LoadResources(KromeIni *)",
    ),
    Ok(
        "YabbyStalactite::LoadDone(void)",
    ),
    Ok(
        "Emu::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "BoomerangManager::Fire(Vector *, Vector *, bool)",
    ),
    Ok(
        "TyIdleAnimTable::GetAnim(bool, unsigned int, IdleAnimNumber, float)",
    ),
    Ok(
        "GameCamera::CommonPreUpdateChecks(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::DeinitMove(void)",
    ),
    Ok(
        "Skink::DieDeinit(void)",
    ),
    Ok(
        "FireDrum_IsLit(GameObject *)",
    ),
    Ok(
        "Ty_Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Target::Deinit(void)",
    ),
    Ok(
        "OpalsHud::Draw(void)",
    ),
    Ok(
        "Ty_Update(void)",
    ),
    Ok(
        "WaterWheel_LoadResources(KromeIni *)",
    ),
    Ok(
        "ScrubTurkey::PickUpEggInit(void)",
    ),
    Ok(
        "Bull::SlideInit(void)",
    ),
    Ok(
        "IceBlock_Deinit(void)",
    ),
    Ok(
        "bad_alloc::what(void) const",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterProp::ConstructWeightedTriStripVertex(Water_TriStrip *, float *, WaterStripVertex *, WaterStripUV *, WaterStripColor *, WaterStripNormal *, Vector *, Vector *, int, Vector *)",
    ),
    Ok(
        "ShadowBatValve::Draw(void)",
    ),
    Ok(
        "Dma::AddGif_UV(unsigned long, unsigned long)",
    ),
    Ok(
        "Bite_DrawEdgeGlow(Shadow *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BuzzSaw2::Back(void)",
    ),
    Ok(
        "Model::ExploreClose(ModelExplorer *)",
    ),
    Ok(
        "Crikey::FlinchDeinit(void)",
    ),
    Ok(
        "global constructors keyed to WaterWheel_LoadResources(KromeIni *)",
    ),
    Ok(
        "DialogEffectManager::Update(void)",
    ),
    Ok(
        "LoadLevel_Path_Line(KromeIniLine *)",
    ),
    Ok(
        "BreakAndTurnData::JogWalkInit(void)",
    ),
    Ok(
        "Particle_Fire_Create(ParticleSystem **, Vector *, float, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TimeTrial_SetState(TimeTrialState)",
    ),
    Ok(
        "global constructors keyed to SnowGun::animFire",
    ),
    Ok(
        "Parser::GrabData(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bull::ShockWaveInit(void)",
    ),
    Ok(
        "ShadowBat::Damage(void)",
    ),
    Ok(
        "BonusPickup_LoadResources(KromeIni *)",
    ),
    Ok(
        "GameCamera::Swim_Update(void)",
    ),
    Ok(
        "Ibis::IdleUpdate(void)",
    ),
    Ok(
        "PE_Special_LoadResources(void)",
    ),
    Ok(
        "MKWaterManager_Calc2DPerp(float, float, float, float, float *, float *)",
    ),
    Ok(
        "Rhino::InitDeath(void)",
    ),
    Ok(
        "CameraOverride::FixedPoint_Init(void)",
    ),
    Ok(
        "ModuleInfo<YabbyObjective> virtual table",
    ),
    Ok(
        "AnimatingProp::LoadDone(void)",
    ),
    Ok(
        "FrillBike::DebugDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GuideParticle::UpdateModule(void)",
    ),
    Ok(
        "MKSceneManager::SetActivePoint(Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sheila::Idle(void)",
    ),
    Ok(
        "QuatRotation::ConvertMatrix(Matrix *)",
    ),
    Ok(
        "ModuleInfo<GasJet> virtual table",
    ),
    Ok(
        "SoundMaterial::GetID(void)",
    ),
    Ok(
        "UIImage::SetPosition(Vector *, char)",
    ),
    Ok(
        "MKAnimScript::Animate(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "uncatch_exception",
        ),
    ),
    Ok(
        "FootEffect::footSnowType",
    ),
    Ok(
        "Elle::DeckChairIdleInit(void)",
    ),
    Ok(
        "Sly::GetUp(void)",
    ),
    Ok(
        "ModuleInfo<Wallaby>::ConstructObject(void *)",
    ),
    Ok(
        "Rex::Reset(void)",
    ),
    Ok(
        "DialogPlayer::NextPhrase(void)",
    ),
    Ok(
        "Heap_InitModule(int)",
    ),
    Ok(
        "Ty::SetPitchAndRoll(float, float)",
    ),
    Ok(
        "WaterfallBaseStruct::sprayEnvelope",
    ),
    Ok(
        "Ty::InitDogPaddle(void)",
    ),
    Ok(
        "SaveGameInfoDisplay::Deinit(void)",
    ),
    Ok(
        "AnimatingProp::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model::UpdateModelFillState(int)",
    ),
    Ok(
        "Sheila::Happy(void)",
    ),
    Ok(
        "Croc::SetState(int, bool)",
    ),
    Ok(
        "PauseScreen_OptionScreen_Draw(void)",
    ),
    Ok(
        "BunyipStruct::ClearTyControls(void)",
    ),
    Ok(
        "Emu::CheckEvents(void)",
    ),
    Ok(
        "Blitter_DeinitModule(void)",
    ),
    Ok(
        "MKGrassType::Init(char *, MKGrassType *)",
    ),
    Ok(
        "ModuleInfo<SnowSpider>::Init(void)",
    ),
    Ok(
        "GameCamera::WaterSlide_Update(void)",
    ),
    Ok(
        "MKAnimScript::Init(char *)",
    ),
    Ok(
        "Wombat::JumpStartInit(void)",
    ),
    Ok(
        "BoomerangManager::StartCatchAnim(BoomerangSide)",
    ),
    Ok(
        "Steam_LoadResources(void)",
    ),
    Ok(
        "CrateStruct virtual table",
    ),
    Ok(
        "CameraOverride::camDescBefore",
    ),
    Err(
        InvalidSpecialMethod(
            "mprec_tens",
        ),
    ),
    Ok(
        "KenOath::Message(MKMessage *)",
    ),
    Ok(
        "GameCamera::PlayerAdjust_SetQuadratics(void)",
    ),
    Ok(
        "WhirlyWind::SetState(WhirlyWindState)",
    ),
    Ok(
        "ModuleInfo<SmallCrab>::Init(void)",
    ),
    Ok(
        "TurningPlatform::LoadLine(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_OptionControls_Deinit(void)",
    ),
    Ok(
        "ModuleInfo<SynkerFrog>::ConstructObject(void *)",
    ),
    Ok(
        "EnemyObject::Spawn(void)",
    ),
    Ok(
        "MiniGameA2_Init(void)",
    ),
    Ok(
        "Bull::Snort(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "AuroraKid::DeinitModule(void)",
    ),
    Ok(
        "SnowSpider::Flinch(void)",
    ),
    Ok(
        "SnowRoo::ThrowingInit(void)",
    ),
    Ok(
        "GameCamera::SetAnimationFrame(float)",
    ),
    Ok(
        "CuttleFish::UpdateWorldMatrix(void)",
    ),
    Ok(
        "MKShadow_Animated::Build(char *)",
    ),
    Ok(
        "ModuleInfo<ScriptProp>::Init(void)",
    ),
    Ok(
        "ModuleInfo<KingFisherField> virtual table",
    ),
    Ok(
        "SeaMine::Draw(void)",
    ),
    Ok(
        "Ty::IdleStandAction(void)",
    ),
    Ok(
        "Tools_ReverseMatrixXZ(Matrix *)",
    ),
    Ok(
        "Geyser::Deinit(void)",
    ),
    Ok(
        "DialogPlayer::InitCamera(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::WaterTooCloseBelow(void)",
    ),
    Ok(
        "MKShadow_LockBuffer(void)",
    ),
    Ok(
        "TrapdoorSpider::WaitForRespawn(void)",
    ),
    Ok(
        "Critters_Draw(void)",
    ),
    Ok(
        "LearnToDiveData::SplatLand(void)",
    ),
    Ok(
        "Vector::ScalarProj(Vector *)",
    ),
    Ok(
        "SnowSpider::Attack(void)",
    ),
    Ok(
        "GameCamera::Fall_Update(void)",
    ),
    Ok(
        "TyIdleAnimEntry::IsValid(bool, MaterialIndex, IdleAnimNumber, IdleAnimMoveVel)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GuideBarrel::Reset(void)",
    ),
    Ok(
        "TrapdoorSpider::IdleInit(void)",
    ),
    Ok(
        "ShatterableDescriptor * descr_cast<ShatterableDescriptor *>(MKPropDescriptor *)",
    ),
    Ok(
        "MKWaterManager_GetWaterType(int)",
    ),
    Ok(
        "ModuleInfo<Rock> virtual table",
    ),
    Ok(
        "Ty::StartAnimIfNew(MKAnimScript *, MKAnim *, int, bool)",
    ),
    Ok(
        "bad_exception::bad_exception(void)",
    ),
    Ok(
        "Waterfall_FreeResources(void)",
    ),
    Ok(
        "BootTest_Draw(void)",
    ),
    Ok(
        "Ty::BlinkLogic(void)",
    ),
    Ok(
        "EnemyRefPoints::Update(Model *)",
    ),
    Ok(
        "SignPost::SetState(SignPostState)",
    ),
    Ok(
        "TrapdoorSpider::ThrowDirtInit(void)",
    ),
    Ok(
        "WaterSlide_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WobbleTexture::Deinit(void)",
    ),
    Ok(
        "TyParticleManager::SpawnBridgeChunk(Vector *, Model *)",
    ),
    Ok(
        "Ty::Doomerang(void)",
    ),
    Ok(
        "VU1Manager::UploadCode(unsigned int *, unsigned int *)",
    ),
    Ok(
        "Julius::Snore(void)",
    ),
    Ok(
        "GameCamera_OverrideRail_Add(CameraOverrideRailLoadInfo *)",
    ),
    Ok(
        "Tools_ParticleRef::Init(Model *, char *)",
    ),
    Ok(
        "ModuleInfo<SpiderWeb> virtual table",
    ),
    Ok(
        "Shatterable::Init(GameObjDesc *)",
    ),
    Ok(
        "GameObjDesc::Begin(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_Continue_OnExit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Drum::Update(void)",
    ),
    Ok(
        "Ty::DeinitGlide(void)",
    ),
    Ok(
        "Moth::SetState(MothStates)",
    ),
    Ok(
        "CheckpointStruct virtual table",
    ),
    Ok(
        "Matrix::SetRotationToScale(float)",
    ),
    Ok(
        "ModuleInfo<AirPlatform> virtual table",
    ),
    Ok(
        "PauseScreen_OptionScreen_Init(void)",
    ),
    Ok(
        "CableCar::Moving(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Maurie::Init(GameObjDesc *)",
    ),
    Ok(
        "Groper::SwallowCruise(void)",
    ),
    Ok(
        "SeaMine::ExplodeInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Skink::CheckEvents(void)",
    ),
    Ok(
        "BushPig::AddWake(void)",
    ),
    Ok(
        "PipePart_RepairPipe(GameObject *)",
    ),
    Ok(
        "AirPlatform::Message(MKMessage *)",
    ),
    Ok(
        "Sly::WalkDeinit(void)",
    ),
    Ok(
        "Muddie::Chase(void)",
    ),
    Ok(
        "FrillBike::UpdateChaseTarget(float, float)",
    ),
    Ok(
        "Main_GetCameraDistanceTypeForLevel(void)",
    ),
    Ok(
        "Sjis2AsciiString(char *, char *)",
    ),
    Ok(
        "Shazza::Reset(void)",
    ),
    Ok(
        "Bull::SetSubState(int)",
    ),
    Ok(
        "FireDrum::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Jeep::GetMass(void)",
    ),
    Ok(
        "Tools_DynamicStringTable::AppendString(char *)",
    ),
    Ok(
        "GameCamera_SetShakeOffset(Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TimeTrial_Reset(void)",
    ),
    Ok(
        "Torch::SetState(TorchState, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Croc::Draw(void)",
    ),
    Ok(
        "ModuleInfo<StaticProp>::Init(void)",
    ),
    Ok(
        "global constructors keyed to bushPig",
    ),
    Ok(
        "Sound_BatchRPC(int, int)",
    ),
    Ok(
        "NinjaGecko::CrawlDeinit(void)",
    ),
    Ok(
        "BushPig::DeinitIdle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<SpiderTrapdoor>::ConstructObject(void *)",
    ),
    Ok(
        "FileSys_Exists(char *, int *)",
    ),
    Ok(
        "Input_MTapOnPort(int)",
    ),
    Ok(
        "Translation_IsLanguageAvailable(TranslationLanguage)",
    ),
    Ok(
        "C3Actor virtual table",
    ),
    Ok(
        "Tools_DebugPtLine(Vector *, Vector *, int, int, float)",
    ),
    Ok(
        "MiniGameObjective virtual table",
    ),
    Ok(
        "Fluffy::Init(GameObjDesc *)",
    ),
    Ok(
        "Rufus::JumpAttack(bool)",
    ),
    Ok(
        "ModuleInfo<Muddie>::ConstructObject(void *)",
    ),
    Ok(
        "CameraOverride::TestPoint(Vector *)",
    ),
    Ok(
        "MetalSpikes::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<BlitterCritterField>::ConstructObject(void *)",
    ),
    Ok(
        "BlitterCritterFieldDesc::InitLevel(void)",
    ),
    Ok(
        "KromeIniLine::AsInt(int, int *)",
    ),
    Ok(
        "Ty::CreateBubbles(int)",
    ),
    Ok(
        "Translation_Validate(int, char *)",
    ),
    Ok(
        "Font::MakeFont(void)",
    ),
    Ok(
        "Groper::DrawDebug(void)",
    ),
    Ok(
        "TyVideo_Draw(void)",
    ),
    Ok(
        "CrikeyCanister::Draw(void)",
    ),
    Ok(
        "SpecialPickupStruct virtual table",
    ),
    Ok(
        "Animation::SetNodeMatrix(int, Matrix *, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LearnToDiveData::Dive(void)",
    ),
    Ok(
        "WaterSlideData::DeinitJump(void)",
    ),
    Ok(
        "Barracuda::Message(MKMessage *)",
    ),
    Ok(
        "GameCamera::SetNormalSourceXZ(void)",
    ),
    Ok(
        "SnowPileDesc::Load(KromeIni *)",
    ),
    Ok(
        "TyParticleManager::SpawnTireDust(Vector *, float, float)",
    ),
    Ok(
        "global constructors keyed to Burnable_LoadResources(KromeIni *)",
    ),
    Ok(
        "FootEffect::bushPigDustType",
    ),
    Ok(
        "SpinningLog_LoadResources(KromeIni *)",
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_top_pad",
        ),
    ),
    Ok(
        "ModuleInfo<Roach> virtual table",
    ),
    Ok(
        "PauseScreen_Options_Update(void)",
    ),
    Ok(
        "Coconut::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrontEnd_GoToScreen(tagFrontEndScreen)",
    ),
    Ok(
        "MKWaterProp::Init(MKWater *, WaterSubObject *)",
    ),
    Ok(
        "ModuleInfo<Crikey>::Init(void)",
    ),
    Ok(
        "Avalanche::StartSnowCloud(Vector *, BoundingVolume *)",
    ),
    Ok(
        "PathManager::GetNearestPoint(Vector *, float)",
    ),
    Ok(
        "Rufus::LogicUpdate(void)",
    ),
    Ok(
        "void LoadDescriptors<BurnableDescriptor>(KromeIni *, char *, BurnableDescriptor *)",
    ),
    Ok(
        "DialogPlayer::SceneAnimate(unsigned int, EffectStruct *, int &)",
    ),
    Ok(
        "Ty::InitIdleWaterShake(void)",
    ),
    Ok(
        "RockCollection::SelectRock(void)",
    ),
    Ok(
        "KingFisher::UpdateLogic(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bull::Deinit(void)",
    ),
    Ok(
        "Crikey_Hurt(Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameData::AddLife(void)",
    ),
    Ok(
        "Yabby::ReverseDeinit(void)",
    ),
    Ok(
        "Crikey::CruiseInit(void)",
    ),
    Ok(
        "SoundBank_PauseMusic(bool, float)",
    ),
    Ok(
        "TyParticleManager::SpawnExclamation(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScubaFrill::SpawnBubble(Vector *, float, float)",
    ),
    Ok(
        "ScubaFrill::Shoot(void)",
    ),
    Ok(
        "Grasshopper::Update_WaitingMove(void)",
    ),
    Ok(
        "PauseScreen_ShowContinueScreen(void)",
    ),
    Ok(
        "GeckoDesc * descr_cast<GeckoDesc *>(MKPropDescriptor *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FootEffects_LoadResources(void)",
    ),
    Ok(
        "Shatterable virtual table",
    ),
    Ok(
        "StarTrail::pMat",
    ),
    Ok(
        "FrontEnd_LoadLevel_Draw(void)",
    ),
    Ok(
        "global constructors keyed to SnowSpider_LoadResources(KromeIni *)",
    ),
    Ok(
        "Julius::Reset(void)",
    ),
    Ok(
        "Teleporter::Reset(void)",
    ),
    Ok(
        "Steam::Deinit(void)",
    ),
    Ok(
        "Ty::WaterMediumDeinit(void)",
    ),
    Ok(
        "Leech::IdleInit(void)",
    ),
    Ok(
        "Sentinel::SetLookTarget(void)",
    ),
    Ok(
        "Bat::DeathDeinit(void)",
    ),
    Ok(
        "GameCamera::SetTargetPosition(Vector *)",
    ),
    Ok(
        "SynkerFrogDesc virtual table",
    ),
    Ok(
        "BoomerangWeapon::DeinitCatching(void)",
    ),
    Ok(
        "SnowPile::Update(void)",
    ),
    Ok(
        "Turtle_Draw(void)",
    ),
    Ok(
        "MKWater::debugNumHighDetailSubObjects",
    ),
    Ok(
        "SnowSpider::JumpDeinit(void)",
    ),
    Ok(
        "Boomerang::Fire(Vector *, Vector *)",
    ),
    Ok(
        "ShadowBat::LoadDone(void)",
    ),
    Ok(
        "FrillLizard::Walk(bool)",
    ),
    Ok(
        "ThinIceProp::Update(void)",
    ),
    Ok(
        "ParticleEmitter::Emit(int, float)",
    ),
    Ok(
        "ModuleInfo<Kaboomerang>::Init(void)",
    ),
    Ok(
        "BoomerangHud::BoomerangImage::Init(BoomerangType)",
    ),
    Ok(
        "CameraOverrideSpiral_Start(void)",
    ),
    Ok(
        "BoulderTrap::LoadLine(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKSceneManager::DrawRecursiveTerrain(SMNode *, int)",
    ),
    Ok(
        "Bat::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SmallCrab::GenerateNextPosition_Scurry(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBatSonar::Reset(void)",
    ),
    Ok(
        "ShadowBatValve::Hit(void)",
    ),
    Ok(
        "global constructors keyed to rangType",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Video_CbDataError(sceMpeg *, sceMpegCbDataError *, Video *)",
    ),
    Ok(
        "BlueTongue::IdleInit(void)",
    ),
    Ok(
        "Material::updateEnabled",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "mb_cur_max",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<RainbowScaleObjective>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "NinjaGecko::Death(void)",
    ),
    Ok(
        "BlueTongueThrower::Init(GameObjDesc *)",
    ),
    Ok(
        "Frog::FlattenedState(void)",
    ),
    Ok(
        "Speedboat::DeinitRiding(void)",
    ),
    Ok(
        "ModuleInfo<DialogProp> virtual table",
    ),
    Ok(
        "Crikey virtual table",
    ),
    Ok(
        "Ibis::SharedUpdate(void)",
    ),
    Ok(
        "SynkerFrog::Draw(void)",
    ),
    Ok(
        "DDASession::bSaveEnabled",
    ),
    Ok(
        "ChuteLog::UpdateSound(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Wake_Update(void)",
    ),
    Ok(
        "FrillBike::RecoverInit(void)",
    ),
    Ok(
        "Ty::CheckForAutoCenter(void)",
    ),
    Ok(
        "CameraOverridePath_Reset(void)",
    ),
    Ok(
        "TyParticleManager::SpawnGoo(Vector *, Vector *)",
    ),
    Ok(
        "ParticleSystemManager::CreateParticleSystem(ParticleSystemType *)",
    ),
    Ok(
        "TyFSM::Update(Ty *)",
    ),
    Ok(
        "SpeedboatWake::Update(Vector *, float)",
    ),
    Ok(
        "WaterPipe::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "ModuleInfo<Coconut> virtual table",
    ),
    Ok(
        "TyBite::InitSuperBite(void)",
    ),
    Ok(
        "GameCamera_UseDoomarangCamera(bool, Vector *, Vector *, Vector *, float)",
    ),
    Ok(
        "Camera::DeinitModule(void)",
    ),
    Ok(
        "FrontEnd_LoadGame_Draw(void)",
    ),
    Ok(
        "NodeOverride_CreateCustomMatrix(NodeOverride *, Vector *, Matrix *)",
    ),
    Ok(
        "DiveRing::Reset(void)",
    ),
    Ok(
        "TrapdoorSpider::Deinit(void)",
    ),
    Ok(
        "SeaMine::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ChuteLog::Turn(void)",
    ),
    Ok(
        "Video_DeinitModule(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Skink::DoBoomerangHit(int)",
    ),
    Ok(
        "ScreenEffect_Init(ScreenEffect *)",
    ),
    Ok(
        "PE_WaterTrail_LoadResources(void)",
    ),
    Ok(
        "short type_info function",
    ),
    Ok(
        "__default_unexpected(void)",
    ),
    Ok(
        "ModuleInfo<IceCoolant>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillBike::CollisionChecks(void)",
    ),
    Ok(
        "ShoalFish::FindPointState(void)",
    ),
    Ok(
        "void type_info function",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "sigtramp_r",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverrideRail_Start(void)",
    ),
    Ok(
        "Ty::DeinitWarp(void)",
    ),
    Ok(
        "Tools_CriticalDamp(float, float, float, float)",
    ),
    Ok(
        "GameCamera::UseCustomCameraMatrix(bool, Matrix *)",
    ),
    Ok(
        "IceCoolant::FirstHitShatter(void)",
    ),
    Ok(
        "DDASession::bConvertToReadable",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "View::Init(void)",
    ),
    Ok(
        "BonusPickup_IsCollected(BonusPickup *)",
    ),
    Ok(
        "Muddie::AlertDeinit(void)",
    ),
    Ok(
        "ModuleInfo<ChuteLog>::Init(void)",
    ),
    Ok(
        "Pontoon::LoadDone(void)",
    ),
    Ok(
        "Explosion_Update(void)",
    ),
    Ok(
        "C3Actor::Turn(Vector *)",
    ),
    Ok(
        "Wombat::JumpLandInit(void)",
    ),
    Ok(
        "BlueTongueRockObjective_CheckForCompletion(void)",
    ),
    Ok(
        "BonusPickup::CheckCollected(float)",
    ),
    Ok(
        "UIText::SetScale(float)",
    ),
    Ok(
        "ModuleInfo<Gate> virtual table",
    ),
    Ok(
        "GameObject::UpdateModule(void)",
    ),
    Ok(
        "GameCamera::UseBiteEffect(CameraBiteEffectState, float, float)",
    ),
    Ok(
        "Wake_Reset(void)",
    ),
    Ok(
        "Vector::SignedRayDistanceToPlane(float *, Vector *, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RhinoGround::Init(GameObjDesc *)",
    ),
    Ok(
        "ObjectiveFinder::AddPointer(Vector *)",
    ),
    Ok(
        "Maurie_LoadResources(KromeIni *)",
    ),
    Ok(
        "Rex_LoadResources(KromeIni *)",
    ),
    Ok(
        "Basket::Spawning(void)",
    ),
    Ok(
        "CameraOverrideDir_Reset(void)",
    ),
    Ok(
        "GameData::GetSaveData(void)",
    ),
    Ok(
        "SnowRoo::Gather(void)",
    ),
    Ok(
        "Bull::Reset(void)",
    ),
    Ok(
        "MKPackage_Load(char *, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Yabby::WalkDeinit(void)",
    ),
    Ok(
        "ModuleInfo<SpeedboatObjective> virtual table",
    ),
    Ok(
        "TyFSM::IdleState(int)",
    ),
    Ok(
        "GameCamera::CameraOverride_IsProperDeinit(void)",
    ),
    Ok(
        "FireDrum virtual table",
    ),
    Ok(
        "LevelData::GetTalismanType(LevelNumber)",
    ),
    Ok(
        "global constructors keyed to StaticProp::loadInfo",
    ),
    Ok(
        "Crikey::LogicUpdate(void)",
    ),
    Ok(
        "bad_cast type_info node",
    ),
    Ok(
        "RhinoGround::RunInit(void)",
    ),
    Ok(
        "Croc::Turn(void)",
    ),
    Ok(
        "Publisher_Draw(void)",
    ),
    Ok(
        "ModuleInfo<SnowBallAttack> virtual table",
    ),
    Ok(
        "ModuleInfo<Shark>::ConstructObject(void *)",
    ),
    Ok(
        "Ibis::WalkUpdate(void)",
    ),
    Ok(
        "Torch::EmitFire(void)",
    ),
    Ok(
        "Matrix::Scale(Matrix *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Texture::DiscardImageData(void)",
    ),
    Ok(
        "ScriptProp::Execute(void)",
    ),
    Ok(
        "SpiderDirt::CheckForHit(void)",
    ),
    Ok(
        "DialogProp::SendNoEvent(void)",
    ),
    Ok(
        "WhirlyWind::Reset(void)",
    ),
    Ok(
        "ModuleInfo<DDACheckpoint>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Spider_Add(Vector const &, Vector const &, int, bool)",
    ),
    Ok(
        "Material::DeinitModule(void)",
    ),
    Ok(
        "SpiderDirt::Init(GameObjDesc *)",
    ),
    Ok(
        "Dennis::Idle_Init(void)",
    ),
    Ok(
        "GameCamera::PlayerAdjustUW_Update(void)",
    ),
    Ok(
        "Barracuda::CheckForExplosion(void)",
    ),
    Ok(
        "CameraOverrideManager::TestPoint(Vector *, bool, CameraDescriptor *)",
    ),
    Ok(
        "Heap_MemFree(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TrapdoorSpider::JumpFromHole(void)",
    ),
    Ok(
        "ModuleInfo<ShadowBatValve> virtual table",
    ),
    Ok(
        "DialogEffect::Reset(void)",
    ),
    Ok(
        "VibrateReset(void)",
    ),
    Ok(
        "GameCamera::Fall_Init(void)",
    ),
    Ok(
        "PE_Ice_Update(ParticleSystem *)",
    ),
    Ok(
        "Portal::Draw(void)",
    ),
    Ok(
        "Emu::InitStopped(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShatterableDescriptor::Init(ModuleInfoBase *, char *, char *, int, int)",
    ),
    Ok(
        "LedgePullUpData::InitJump(void)",
    ),
    Ok(
        "LineOfSightObject::Update(Vector *, Vector *, Vector *)",
    ),
    Ok(
        "ModuleInfo<Boulder>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<SnowBall> virtual table",
    ),
    Ok(
        "Elevator virtual table",
    ),
    Ok(
        "global constructors keyed to CableCar_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::Init(GameCameraHeroInfo *, CameraDistanceType)",
    ),
    Ok(
        "BurningTree::LoadDone(void)",
    ),
    Ok(
        "LearnToDiveData::InitMissCrate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_Options_LoadResources(void)",
    ),
    Ok(
        "BilbyStruct::RescuedByBull(void)",
    ),
    Ok(
        "LogicState::Set(GameState)",
    ),
    Ok(
        "Heap_TrackRealloc(void *, void *, int, char *, int, char *)",
    ),
    Ok(
        "MiniBoulder_Init(void)",
    ),
    Ok(
        "ModuleInfo<WaterVolume> virtual table",
    ),
    Ok(
        "Gate::Draw(void)",
    ),
    Ok(
        "WaterfallSprayStruct::CreateHeavySpray(float, float)",
    ),
    Ok(
        "Jeep::MoveToTimeAttackStart(void)",
    ),
    Ok(
        "global constructors keyed to Burner_LoadResources(KromeIni *)",
    ),
    Ok(
        "EnemySpawner::Message(MKMessage *)",
    ),
    Ok(
        "Frog virtual table",
    ),
    Ok(
        "Video_CreateStreaming(char *, Material *, bool)",
    ),
    Ok(
        "UITransition::Update(void)",
    ),
    Ok(
        "SmallCrab::Assign(CritterField2 *)",
    ),
    Ok(
        "SpeedboatCrestWake::Update(Vector *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<EmuRoundupObjective>::Init(void)",
    ),
    Ok(
        "SynkerBlueTongue::Update(void)",
    ),
    Ok(
        "Fly_LoadResources(void)",
    ),
    Ok(
        "ModuleInfo<StaticFXProp>::ConstructObject(void *)",
    ),
    Ok(
        "ModelExplorer::GetArea(void)",
    ),
    Ok(
        "XMin(Vector *, float)",
    ),
    Ok(
        "FrontEnd_LoadGame_Deinit(void)",
    ),
    Ok(
        "FlameThrower::Message(MKMessage *)",
    ),
    Ok(
        "SoundBank_LoadResources(void)",
    ),
    Ok(
        "Quick_Update(ParticleSystem *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WobbleTexture::Init(int, int)",
    ),
    Ok(
        "FrillBike::LassoPullBike(float)",
    ),
    Ok(
        "KoalaKid::SavedInit(void)",
    ),
    Ok(
        "DDASession::StorePickupInfo(DDAPickupType)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::SetAbsolutePosition(Vector *)",
    ),
    Ok(
        "Dma::AddGif_AD_MIPTBP1_1(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "SetUWFogPlanes(float, float, float, float, float)",
    ),
    Ok(
        "Ty::ShouldFallDive(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Fluffy::InitModule(void)",
    ),
    Ok(
        "Lasso::LassoDrawSimple(void)",
    ),
    Ok(
        "MKMemoryCard_GetDirInfo(int, MKMemoryCardFileInfo *)",
    ),
    Ok(
        "Emu::Drag(void)",
    ),
    Ok(
        "WaterSlideData::Exit(void)",
    ),
    Ok(
        "MKAnimScript::advanceAmount",
    ),
    Ok(
        "FrillBike::GetChaseTarget(void)",
    ),
    Ok(
        "ModuleInfo<RockProjectile>::Init(void)",
    ),
    Ok(
        "ModuleInfo<BubbleSpawner> virtual table",
    ),
    Ok(
        "MKShadow_Render(MKShadow *, Vector *, Vector *, float, int, unsigned int *, Vector *)",
    ),
    Err(
        InvalidSpecialMethod(
            "get_eh_info",
        ),
    ),
    Ok(
        "Crikey::Death(void)",
    ),
    Ok(
        "CaveBat::WaitForRunInit(void)",
    ),
    Ok(
        "ShoalFish::GetField(void)",
    ),
    Ok(
        "GameCamera::Underwater_SetSource(void)",
    ),
    Ok(
        "Frog::Init(GameObjDesc *)",
    ),
    Ok(
        "ModuleInfo<BeachHut> virtual table",
    ),
    Ok(
        "ModuleInfo<StaticProp> virtual table",
    ),
    Ok(
        "Gate::Init(GameObjDesc *)",
    ),
    Ok(
        "BunyipStruct::Roar(void)",
    ),
    Ok(
        "GameData::LoseLife(void)",
    ),
    Ok(
        "MiniGameC2_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Fluffy::TurnInit(void)",
    ),
    Ok(
        "Portal_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterProp::CreateMix(int, int, float *)",
    ),
    Ok(
        "CrikeyCanister::Eaten(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "frame_state_for",
        ),
    ),
    Ok(
        "ModuleInfo<SynkerFrog>::Init(void)",
    ),
    Ok(
        "Wake_AddEx(WakeStruct **, Vector *, Vector *, float, float, int)",
    ),
    Ok(
        "TimeAttack::LoadDone(void)",
    ),
    Ok(
        "Model::GetSubObjectOrigin(int)",
    ),
    Ok(
        "SnowRoo::Message(MKMessage *)",
    ),
    Err(
        InvalidSpecialMethod(
            "smakebuf",
        ),
    ),
    Ok(
        "Yabby::IdleInit(void)",
    ),
    Ok(
        "global constructors keyed to C1Water_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowSpider::Idle(void)",
    ),
    Ok(
        "SnowRoo::Throwing(void)",
    ),
    Ok(
        "Speedboat::PathInit(void)",
    ),
    Ok(
        "CameraOverride::WaypointOverride_Init(GCT_WaypointPlaneManager *)",
    ),
    Ok(
        "UITransition::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKSceneManager::UpdateProp(MKProp *, MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DirectLight::InitModule(void)",
    ),
    Ok(
        "CuttleFish::Assign(CritterField2 *)",
    ),
    Ok(
        "DialogProp::Activate(void)",
    ),
    Ok(
        "ModuleInfo<BurnerObjective> virtual table",
    ),
    Ok(
        "FrillBike::vRopeAttach",
    ),
    Ok(
        "Jeep::InitPerimeterCheck(void)",
    ),
    Ok(
        "BreakAndTurnData::SkidInit(void)",
    ),
    Ok(
        "ParticleSystemManager_Deinit(void)",
    ),
    Ok(
        "View::Init(float, float, float, float)",
    ),
    Ok(
        "Fly::FallStart(void)",
    ),
    Ok(
        "MetalSpikes::LoadDone(void)",
    ),
    Ok(
        "SnowGunAmmo::UpdatePhysics(void)",
    ),
    Ok(
        "Rufus::Taunt(bool)",
    ),
    Ok(
        "PickupCounter_LoadResources(KromeIni *)",
    ),
    Ok(
        "global constructors keyed to RhinoGround_LoadResources(KromeIni *)",
    ),
    Ok(
        "Input_ClearPadData(void)",
    ),
    Ok(
        "ModuleInfo<SpecialPickupStruct> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SignPost::Draw(void)",
    ),
    Ok(
        "Skink::Retreat(void)",
    ),
    Ok(
        "Tick::ResetToStartInit(void)",
    ),
    Ok(
        "SeaMine::PushApart(void)",
    ),
    Ok(
        "Ty::WaterDeathInit(void)",
    ),
    Ok(
        "WhiteBat::Draw(void)",
    ),
    Ok(
        "FrillLizard::DeathDeinit(void)",
    ),
    Ok(
        "SelectionRang::FlipHorizontal(void)",
    ),
    Ok(
        "Video_Draw(Video *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to IDLE_ANIM_NAME",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Collision_RayCollideDynamicItem(Vector *, Vector *, CollisionResult *, DynamicItem *, float)",
    ),
    Ok(
        "Tick::Suck(void)",
    ),
    Ok(
        "BlueTongue::AlertInit(void)",
    ),
    Ok(
        "VU1Manager::LoadCodeMPGAnywhere(VUStubFunction *, VUFunction *)",
    ),
    Ok(
        "Model::Draw(void)",
    ),
    Ok(
        "MKWaterManager_LoadIniLine(MKWaterType *, char *, KromeIniLine *)",
    ),
    Ok(
        "Shark::Cruise(void)",
    ),
    Ok(
        "TurtleStruct::Swimming(void)",
    ),
    Ok(
        "Dma::AddGifTag_Regs(unsigned long, unsigned long)",
    ),
    Ok(
        "TrapdoorSpider::ThrowDirt(void)",
    ),
    Ok(
        "NinjaGecko::RunInit(void)",
    ),
    Ok(
        "EnemyDescriptor::Init(ModuleInfoBase *, char *, char *, int, int)",
    ),
    Ok(
        "C3Chest::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "BushPig::DeinitJump(void)",
    ),
    Ok(
        "Heap_TrackFree(void *, char *, int)",
    ),
    Ok(
        "FrillLizard::Message(MKMessage *)",
    ),
    Ok(
        "Eel::Death(void)",
    ),
    Ok(
        "PauseScreen_GameInfo_LoadResources(void)",
    ),
    Ok(
        "Shazza::Init(GameObjDesc *)",
    ),
    Ok(
        "PauseScreen_Continue_Deinit(void)",
    ),
    Ok(
        "GameCamera::AnimatingSingleStep(bool)",
    ),
    Ok(
        "WaterDragon_Update(void)",
    ),
    Ok(
        "CritterField2LoadInfo::Init(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Grasshopper>::Init(void)",
    ),
    Ok(
        "Dma::AddGif_AD_CLAMP_1(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "SpecialPickup_EnableCheatLines(bool)",
    ),
    Ok(
        "Leech::ApplyGravity(void)",
    ),
    Ok(
        "Model::SetInverseScaleValue(int, float)",
    ),
    Ok(
        "Rufus::ReturnHomeInit(void)",
    ),
    Ok(
        "FrillLizard::Init(GameObjDesc *)",
    ),
    Ok(
        "FrontEnd_MainMenu_Deinit(void)",
    ),
    Ok(
        "DialogEffectManager::Activate(DialogPlayer *)",
    ),
    Ok(
        "GameData::SetOpalLifeup(bool)",
    ),
    Ok(
        "KromeIniLine::AsFlag(int, int *)",
    ),
    Ok(
        "BunyipElder::IdleInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lenny::WaitForTy(void)",
    ),
    Ok(
        "ZMin(Vector *, float)",
    ),
    Ok(
        "Crikey::SwimToChum(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BezierPathFollower::GetNewPosition(Vector *, Vector *)",
    ),
    Ok(
        "WaterDragon_Deinit(void)",
    ),
    Ok(
        "Tools_CylinderTest(Vector *, Vector *, float, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dennis_LoadResources(KromeIni *)",
    ),
    Ok(
        "GameCamera::FallDive_Update(void)",
    ),
    Ok(
        "TriggerSphereProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "BadBoonie::Bitten_Update(void)",
    ),
    Ok(
        "KingFisher::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<ShadowBatSonar>::Init(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "unpack_d",
        ),
    ),
    Ok(
        "FrillBike::nDustTrailRef",
    ),
    Ok(
        "ModuleInfo<BushPig>::ConstructObject(void *)",
    ),
    Ok(
        "TyBite::TurnTy(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TyMemCard_Reset(void)",
    ),
    Ok(
        "Dma::AddGif_AD_XYOFFSET_2(unsigned long, unsigned long)",
    ),
    Ok(
        "Avalanche::avalancheType",
    ),
    Ok(
        "RhinoGround::Attack(void)",
    ),
    Ok(
        "CameraOverrideManager::Create(CameraOverrideCreateType, void *)",
    ),
    Ok(
        "TriggerProp::Update(void)",
    ),
    Ok(
        "MusicalIcicle::Init(GameObjDesc *)",
    ),
    Ok(
        "UniformSpline::Smooth(void)",
    ),
    Ok(
        "Farlapp::Move(void)",
    ),
    Ok(
        "CableCar::Init(GameObjDesc *)",
    ),
    Ok(
        "Basket::Draw(void)",
    ),
    Ok(
        "Mist_Init(void)",
    ),
    Ok(
        "Yabby::Idle(void)",
    ),
    Ok(
        "Gecko virtual table",
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_user",
        ),
    ),
    Ok(
        "Fluffy::Bash(void)",
    ),
    Ok(
        "MusicalIcicle virtual table",
    ),
    Ok(
        "Texture::CreateFromImage(char *, Image *)",
    ),
    Ok(
        "ModuleInfo<Groper> virtual table",
    ),
    Ok(
        "ModuleInfo<WhirlyWind>::Init(void)",
    ),
    Ok(
        "Projectile::KnockBackTy(void)",
    ),
    Ok(
        "Jeep::Init(GameObjDesc *)",
    ),
    Ok(
        "MKGrass_Update(void)",
    ),
    Ok(
        "SaveStates_Get(char *)",
    ),
    Ok(
        "ScubaFrill::DrawDebug(void)",
    ),
    Ok(
        "GameCamera_GetSavedData(CameraDebugSaveInfo *)",
    ),
    Ok(
        "FloorUnderFeet(void)",
    ),
    Ok(
        "Dma::AddVif_MSKPATH3(unsigned int)",
    ),
    Ok(
        "PipePart_GetPipeNeedingRepairer(void)",
    ),
    Ok(
        "DDACheckpoint_LoadResources(KromeIni *)",
    ),
    Ok(
        "View::TransformPoint(IntVector *, Vector *)",
    ),
    Ok(
        "Bilby_LoadResources(void)",
    ),
    Ok(
        "CaveBat::RunAway(void)",
    ),
    Ok(
        "ModuleInfo<KoalaKidObjective>::Init(void)",
    ),
    Ok(
        "Sly::Defrost(void)",
    ),
    Ok(
        "ShadowBat::KissOfDeath(void)",
    ),
    Ok(
        "Leech::LogicUpdate(void)",
    ),
    Ok(
        "SpiderWeb::Init(GameObjDesc *)",
    ),
    Ok(
        "Tools_IntersectingPoint2D(Vector *, Vector *, Vector *, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Image::LoadTGA(unsigned char *, unsigned int)",
    ),
    Ok(
        "ThrowingStar::Update(void)",
    ),
    Ok(
        "ChuteLog::TurnInit(void)",
    ),
    Ok(
        "Fly_InitTyFlies(void)",
    ),
    Ok(
        "CaveBat::WaitForRun(void)",
    ),
    Ok(
        "OpalsHud::Init(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_max_sbrked_mem",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RainInit::Init(void)",
    ),
    Ok(
        "AuroraKid::Deinit(void)",
    ),
    Ok(
        "WhiteBat::CheckCollideWithTy(void)",
    ),
    Ok(
        "Portal::Activate(bool)",
    ),
    Ok(
        "File_Close(int)",
    ),
    Ok(
        "KromeIniLine::AsFloat(int, float *)",
    ),
    Ok(
        "Ty::SurfaceSwim(void)",
    ),
    Ok(
        "TriggerProp::Message(MKMessage *)",
    ),
    Ok(
        "MorayEel::BlendToAttack(void)",
    ),
    Ok(
        "DialogPlayer::Draw(void)",
    ),
    Ok(
        "TyBite::InitDiveBiteToFall(void)",
    ),
    Ok(
        "Lasso::NearRope(Vector *, float, Vector *, Vector *)",
    ),
    Ok(
        "MiniGameB3_Init(void)",
    ),
    Ok(
        "ModuleInfo<FishShoalField> virtual table",
    ),
    Ok(
        "operator new(unsigned int, char *, int, char *)",
    ),
    Ok(
        "Cloud::Setup(Vector *, float)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_C2_Deinit(void)",
    ),
    Ok(
        "FrontEnd_LoadGame_OnExit(void)",
    ),
    Ok(
        "FrillLizard::IsUnderWater(void)",
    ),
    Ok(
        "Input_GetButtonState(InputDevices, int, InputDevices *)",
    ),
    Ok(
        "ParticleSystem::Destroy(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBat::KissOfDeathDeinit(void)",
    ),
    Ok(
        "LilNeddy::Attack(void)",
    ),
    Ok(
        "ModuleInfo<FrillLizard>::Init(void)",
    ),
    Ok(
        "Burnable::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Waterfall_Deinit(void)",
    ),
    Ok(
        "C3Actor::Run(void)",
    ),
    Ok(
        "ShadowBat::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "BadBoonie::Alert_CanGoToState(void)",
    ),
    Ok(
        "SnowGunAmmo::AddSpin(void)",
    ),
    Ok(
        "WhiteBat::LogicUpdate(void)",
    ),
    Ok(
        "ModuleInfo<Shatterable>::ConstructObject(void *)",
    ),
    Ok(
        "GCT_LoadFloat(KromeIniLine *, char *, float *)",
    ),
    Ok(
        "ModuleInfo<CheckpointStruct>::Init(void)",
    ),
    Ok(
        "Ty::DeinitBounceOff(void)",
    ),
    Ok(
        "SnowRoo::GatherInit(void)",
    ),
    Ok(
        "Eel::UpdatePosition(Vector *, float)",
    ),
    Ok(
        "Boulder::InitRollFinal(void)",
    ),
    Ok(
        "Rhino::Init(GameObjDesc *)",
    ),
    Ok(
        "GameObject::CalcDetailLevel(void)",
    ),
    Ok(
        "SpikeyIce_Update(void)",
    ),
    Ok(
        "ModuleInfo<CritterField2>::ConstructObject(void *)",
    ),
    Ok(
        "ShadowBatSonar::Init(GameObjDesc *)",
    ),
    Ok(
        "Gate::CheckForBoomerangs(void)",
    ),
    Ok(
        "FireWorks::Init(Vector *)",
    ),
    Ok(
        "Ty::UnderWaterAttackTransition(void)",
    ),
    Ok(
        "TimeAttack::Init(GameObjDesc *)",
    ),
    Ok(
        "BlueTongueThrower::Throw(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "NinjaGecko::anims",
    ),
    Ok(
        "LevelData::GetElementType(LevelNumber)",
    ),
    Ok(
        "BoomerangManager::SetAnims(BoomerangManagerAnims *)",
    ),
    Ok(
        "StalactiteTrap::Draw(void)",
    ),
    Ok(
        "Lenny::eventRightFoot",
    ),
    Ok(
        "GCT_ClearCollisionResult(CollisionResult *)",
    ),
    Ok(
        "StaticFXPropDesc * descr_cast<StaticFXPropDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "Coconut::Respawn(void)",
    ),
    Ok(
        "Material::GetWidth(void)",
    ),
    Ok(
        "MKWater::CreateDebugMenus(void)",
    ),
    Ok(
        "Hud_ShowBilbies(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FootEffect::SpawnDustEffect(Vector *, Vector *, BoundingVolume *, float, float, Vector *)",
    ),
    Ok(
        "ModuleInfo<DiveRing> virtual table",
    ),
    Ok(
        "GameCamera_UseElevatorCamera(bool)",
    ),
    Ok(
        "StaticPropDescriptor::Load(KromeIni *)",
    ),
    Ok(
        "OmniLight_FindNearestGroup(OmniLightScene *, Vector *, float, OmniLight **, int)",
    ),
    Ok(
        "PubeCrab::BackOff(bool)",
    ),
    Ok(
        "Ty::CalculateShadowSunPos(void)",
    ),
    Ok(
        "ModuleInfo<SpiderDirt>::Init(void)",
    ),
    Ok(
        "GameCamera::EnemyCamera_TryNewEnemy(Model *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LilNeddy::ChargeInit(void)",
    ),
    Ok(
        "PauseScreen_GameInfo_Draw(void)",
    ),
    Ok(
        "Platform::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterProp::ConstructVertexCache(Water_TriStrip *, WaterStripVertex *, WaterStripNormal *, WaterStripUV *, WaterStripColor *, Vector *, Vector *, Vector *, float *)",
    ),
    Ok(
        "SpeedboatObjective::LoadDone(void)",
    ),
    Ok(
        "BushPig::DeinitBrake(void)",
    ),
    Ok(
        "Shatterable_IsMember(MKPropDescriptor *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "IceBlockStruct::AddIceBlock(Vector *, Vector *, IceBlockStruct **)",
    ),
    Ok(
        "View::SetProjection(float, float, float)",
    ),
    Ok(
        "Bull_DDA::Reset(MovementDescriptor *)",
    ),
    Ok(
        "ModuleInfo<FlameThrower>::ConstructObject(void *)",
    ),
    Ok(
        "CheckpointStruct::Update(void)",
    ),
    Ok(
        "TreasureChest::Speaking(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Farlapp>::ConstructObject(void *)",
    ),
    Ok(
        "AuroraKid::Message(MKMessage *)",
    ),
    Ok(
        "KingFisherField virtual table",
    ),
    Ok(
        "ModuleInfo<SynkerFrillLizard>::Init(void)",
    ),
    Ok(
        "Animation::CalculateNodeMatrix(int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "OmniLight_CreateLight(OmniLightScene *, Vector *, OmniLightParameters *)",
    ),
    Ok(
        "FileSys_SetExistInterceptHandler(bool (*)(char *, int *, int *))",
    ),
    Ok(
        "Crikey::IsTyVisible(void)",
    ),
    Ok(
        "LilyPad::Update(void)",
    ),
    Ok(
        "ModuleInfo<Collapsible> virtual table",
    ),
    Ok(
        "ModuleInfo<Burnable>::ConstructObject(void *)",
    ),
    Ok(
        "Jeep::Deinit(void)",
    ),
    Ok(
        "BeerCan virtual table",
    ),
    Ok(
        "Neddy::UpdateLocalToWorldMatrix(void)",
    ),
    Ok(
        "WaterTankStruct::FindClosest(Vector *, float)",
    ),
    Ok(
        "DrawRangTrail(CircularQueue<TrailPoint> *, Vector *)",
    ),
    Ok(
        "Matrix::Transpose(Matrix *)",
    ),
    Ok(
        "Maurie::Draw(void)",
    ),
    Ok(
        "CaveBatObjective::bActivated",
    ),
    Ok(
        "ModuleInfo<ShoalFish>::ConstructObject(void *)",
    ),
    Ok(
        "BoomerangTrail::Init(char *, float)",
    ),
    Ok(
        "LensFlare_Update(void)",
    ),
    Ok(
        "Font::GetTextSegment(char **, float, TextSegmentInfo *)",
    ),
    Ok(
        "ModuleInfo<FireDrum>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<WaterTankStruct> virtual table",
    ),
    Ok(
        "ModuleInfo<CheckpointStruct>::ConstructObject(void *)",
    ),
    Ok(
        "HeatFlare_Unlock(void)",
    ),
    Ok(
        "ModuleInfo<Tick> virtual table",
    ),
    Ok(
        "Fluffy::ShockWave(void)",
    ),
    Ok(
        "KoalaKid::Message(MKMessage *)",
    ),
    Ok(
        "TyBite::DeinitDiveBite(void)",
    ),
    Ok(
        "File_InitSystem(FileServerSource, char *, char *)",
    ),
    Ok(
        "Croc::BackOffInit(void)",
    ),
    Ok(
        "BunyipStruct::Jump(void)",
    ),
    Ok(
        "ParticleSystem::DestroyParticle(Particle *, ParticleChunk **)",
    ),
    Ok(
        "WaterSlideData::AlignToGround(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CaveBatObjective_Completed(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EnemySpawner::LoadDone(void)",
    ),
    Ok(
        "PerimeterCheckObjective::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ThrowingStar::AddSpin(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowGun::animFire",
    ),
    Ok(
        "CritterDesc2 virtual table",
    ),
    Ok(
        "PE_CanSpray_LoadResources(void)",
    ),
    Ok(
        "DialogEffect::ShowPropInit(void)",
    ),
    Ok(
        "ModuleInfo<Lenny> virtual table",
    ),
    Ok(
        "Drum::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::DeinitLearnToDive(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RhinoGround::DeathInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Skink::BeerAttackInit(void)",
    ),
    Ok(
        "Spline::Deinit(void)",
    ),
    Ok(
        "global constructors keyed to pMatRope",
    ),
    Ok(
        "Roach::StartFlyInit(void)",
    ),
    Ok(
        "ModuleInfo<SynkerFrog> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterProp::UploadVUStaticData(void)",
    ),
    Ok(
        "Game_Init(void)",
    ),
    Ok(
        "ShoalFish::CruiseState(void)",
    ),
    Ok(
        "BiteTrail_Init(void)",
    ),
    Ok(
        "Crate_LoadResources(KromeIni *)",
    ),
    Ok(
        "Ty::InitHeadStuckInFloor(void)",
    ),
    Ok(
        "Barracuda::StunnedInit(void)",
    ),
    Ok(
        "SafePointResult::GetBestPointDot(Vector *, Vector *)",
    ),
    Ok(
        "Torch virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "C3Actor::Reset(void)",
    ),
    Ok(
        "SnowGun::Update(void)",
    ),
    Ok(
        "KenOath::Reset(void)",
    ),
    Ok(
        "LilNeddy::ChargeRecovery(void)",
    ),
    Ok(
        "SignPost::Idle(void)",
    ),
    Ok(
        "TimeAttack_Event(TimeAttackEvent)",
    ),
    Ok(
        "AquarangProp virtual table",
    ),
    Ok(
        "ModuleInfo<PipePart> virtual table",
    ),
    Ok(
        "Muddie::BlockRecoil(void)",
    ),
    Ok(
        "CritterField2Desc virtual table",
    ),
    Ok(
        "BirdDesc * descr_cast<BirdDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "BunyipElder::Init(GameObjDesc *)",
    ),
    Ok(
        "Tools_CollideXZ(Vector *, Vector *, Vector *, Vector *, float, float, float, float)",
    ),
    Ok(
        "_MKMem_Alloc(int, int, char *, int)",
    ),
    Ok(
        "Yabby::Draw(void)",
    ),
    Ok(
        "ShadowBatSonar::Update(void)",
    ),
    Ok(
        "Tools_SCurve(float)",
    ),
    Ok(
        "PlatformRider::UpdateDynamicAttach(CollisionResult *, GameObject *)",
    ),
    Ok(
        "Animation_UnpackTemplate(AnimationData *)",
    ),
    Ok(
        "Material::CreateMpegTarget(char *, void *, int, int)",
    ),
    Ok(
        "Ty::Deinit(void)",
    ),
    Ok(
        "SnowSpider::IsTyVisible(void)",
    ),
    Ok(
        "BoulderTrap::Update(void)",
    ),
    Ok(
        "MKWater::minU",
    ),
    Ok(
        "BurningTree::Draw(void)",
    ),
    Ok(
        "Boulder::InitNormal(void)",
    ),
    Ok(
        "GameCamera::FirstPerson_Init(void)",
    ),
    Ok(
        "Boomerang_FindClosest(Vector *)",
    ),
    Ok(
        "Friend::LoadDone(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "umoddi3",
        ),
    ),
    Ok(
        "MKMemoryCard_OpComplete(int)",
    ),
    Ok(
        "MKAnimScript::GetOffset(void)",
    ),
    Ok(
        "Coconut::Deinit(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_update_mallinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<ScrubTurkey>::ConstructObject(void *)",
    ),
    Ok(
        "FindOpalCollector(void)",
    ),
    Ok(
        "ModuleInfo<Emu>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bull::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "Boulder::Draw(void)",
    ),
    Ok(
        "Tools_WayPoints::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RhinoGround::PatrolAreaInit(void)",
    ),
    Ok(
        "BonusPickup::Collecting(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "bad_cast type_info function",
    ),
    Ok(
        "Sly::RunInit(void)",
    ),
    Ok(
        "CameraOverrideDir_End(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "fdlib_version",
        ),
    ),
    Ok(
        "Sentinel::CheckForBite(void)",
    ),
    Ok(
        "AuroraKid::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "FinishLineStruct virtual table",
    ),
    Ok(
        "DDASession::Update(void)",
    ),
    Ok(
        "global constructors keyed to Bouncer_LoadResources(KromeIni *)",
    ),
    Ok(
        "SynkerFrillLizard::LoadDone(void)",
    ),
    Ok(
        "SignPost::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Platform::UpdateRotationMatrix(void)",
    ),
    Ok(
        "MorayEel::nNoseTipRef",
    ),
    Ok(
        "Barracuda::Stunned(void)",
    ),
    Ok(
        "Bat::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PickupCounter::Reset(void)",
    ),
    Ok(
        "TyFSM::FirstPersonState(int)",
    ),
    Ok(
        "ShadowBatStalactite::Deinit(void)",
    ),
    Ok(
        "TimeTrial_GetTimer(void)",
    ),
    Ok(
        "FinishLineStruct::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "PubeCrab::LogicUpdate(void)",
    ),
    Ok(
        "GameCamera::Elevator_Update(void)",
    ),
    Ok(
        "WhirlyWind::Update_DamageHero(void)",
    ),
    Ok(
        "global constructors keyed to PlatformDesc::Load(KromeIni *)",
    ),
    Ok(
        "LavaBurner::UpdateLight(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ParticleSystem::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<DropPontoon> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "QuatRotation::Normalise(QuatRotation *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<EnemySpawner>::ConstructObject(void *)",
    ),
    Ok(
        "CameraOverride_Line(KromeIniLine *, CameraOverrideLoadInfoBase *)",
    ),
    Ok(
        "CollisionObject::StoreResult(CollisionResult *, Vector *)",
    ),
    Ok(
        "Camera::Update(InputDevices, Vector *)",
    ),
    Ok(
        "UIText::SetColour(Vector *)",
    ),
    Ok(
        "LevelObjective::IsActive(void)",
    ),
    Ok(
        "WayPointLoadInfo::LoadLine(KromeIniLine *, bool)",
    ),
    Err(
        InvalidNamespaceOnNamespacedGlobal(
            "GLOBAL_",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Leech::Rotate(Vector *)",
    ),
    Ok(
        "Wake_Add(WakeStruct **, Vector *, Vector *)",
    ),
    Ok(
        "Ice::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "IntroFmv_Draw(void)",
    ),
    Ok(
        "WaterTankStruct::Fall(void)",
    ),
    Ok(
        "EmuRoundupObjective::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterfallStruct::GetTU(Vector *, Vector *, float *, Vector *)",
    ),
    Ok(
        "global constructors keyed to bStopwatchLoaded",
    ),
    Ok(
        "Rhino::InitFlip(void)",
    ),
    Ok(
        "TurtleStruct::HeadingForLand(void)",
    ),
    Ok(
        "OpalCrate virtual table",
    ),
    Ok(
        "Damageable_LoadResources(KromeIni *)",
    ),
    Ok(
        "__array_type_info virtual table",
    ),
    Ok(
        "Animation_InitModule(void)",
    ),
    Ok(
        "ShadowBat_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpinningLog::Message(MKMessage *)",
    ),
    Ok(
        "UniformSpline::Reset(void)",
    ),
    Ok(
        "GameObjDesc::TestFlag(GameObjDescFlags)",
    ),
    Ok(
        "Dennis virtual table",
    ),
    Ok(
        "ModuleInfo<Frostyrang> virtual table",
    ),
    Ok(
        "SynkerFrog_LoadResources(KromeIni *)",
    ),
    Ok(
        "Font::Find(char *)",
    ),
    Ok(
        "Leech::Move(void)",
    ),
    Ok(
        "FireDrum::Deinit(void)",
    ),
    Ok(
        "Ty::LoadResources(void)",
    ),
    Ok(
        "Rufus::Charge(bool)",
    ),
    Ok(
        "Neddy::Init(GameObjDesc *)",
    ),
    Ok(
        "FishShoalField::Init(GameObjDesc *)",
    ),
    Ok(
        "ShadowBatPipe::Message(MKMessage *)",
    ),
    Ok(
        "EnemySpawner::CheckForHit(Vector *, float)",
    ),
    Ok(
        "AntHill::SetState(AntHillState)",
    ),
    Ok(
        "SignPost::GetDesc(void)",
    ),
    Ok(
        "ModuleInfo<Drum>::ConstructObject(void *)",
    ),
    Ok(
        "UniformSpline::GetVelocity(float)",
    ),
    Ok(
        "Animation::Set(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TyBite::DeinitBiteGrowl(void)",
    ),
    Ok(
        "global constructors keyed to TumbleWeed::desc",
    ),
    Ok(
        "global constructors keyed to GasJet_LoadResources(KromeIni *)",
    ),
    Ok(
        "Font::initialised",
    ),
    Ok(
        "Emu::Breakout(void)",
    ),
    Ok(
        "GameData::SetBilbies(int)",
    ),
    Ok(
        "MiniGame_C2_GetSnowGunFrontXZ(void)",
    ),
    Ok(
        "Ringo::SetSubState(RingoSubStates)",
    ),
    Ok(
        "ZoomerangHud::ResetZoom(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Wallaby::Draw(void)",
    ),
    Ok(
        "CaveBatObjective::Message(MKMessage *)",
    ),
    Ok(
        "Bat::UpdatePosition(Vector *, float)",
    ),
    Ok(
        "MobilePlatform::GetDesc(void)",
    ),
    Ok(
        "SpecialPickupStruct::Thrown(void)",
    ),
    Ok(
        "Model::RefPointExists(char *, int *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKGrassGen::Draw(void)",
    ),
    Ok(
        "GameCamera::RobotEffect_Update(void)",
    ),
    Ok(
        "ModuleInfo<Burner>::ConstructObject(void *)",
    ),
    Ok(
        "global constructors keyed to GuideParticle::gateTimeOutCounter",
    ),
    Ok(
        "Material::pRenderMats",
    ),
    Ok(
        "WarpFlower::IdleInit(void)",
    ),
    Ok(
        "CameraOverrideTriggerLoadInfo::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "ModuleInfo<CuttleFish> virtual table",
    ),
    Ok(
        "Projectile::SetState(ProjectileState)",
    ),
    Ok(
        "ModuleInfo<AntHill>::Init(void)",
    ),
    Ok(
        "DialogPlayer::Load(char *, dpActorInfoStruct *, int)",
    ),
    Ok(
        "GameData::StopTime(void)",
    ),
    Ok(
        "Animation::GetNmbrOfNodes(void)",
    ),
    Ok(
        "float type_info node",
    ),
    Ok(
        "SynkerFrillLizard::Init(GameObjDesc *)",
    ),
    Ok(
        "WaterSlideData::UpdateSteeringAnim(MKAnim *)",
    ),
    Ok(
        "MKWater::Update(void)",
    ),
    Ok(
        "Rex virtual table",
    ),
    Ok(
        "GCT_WaypointPlaneManager::Deinit(void)",
    ),
    Ok(
        "Animation::TweenNode(float, float, int)",
    ),
    Ok(
        "DirectLight::SetLight(int, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Texture::AllocateVRamPage(void)",
    ),
    Ok(
        "ModuleInfo<StalactiteTrap>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Groper::Flinch(void)",
    ),
    Ok(
        "Moth::UpdateLogic(void)",
    ),
    Ok(
        "SpecialPickUpMessage::Init(void)",
    ),
    Ok(
        "SoundEvent::Init(KromeIni *, KromeIniLine *)",
    ),
    Ok(
        "Windmill_Init(void)",
    ),
    Ok(
        "Collision_GetStats(CollisionStats *)",
    ),
    Ok(
        "Lenny::anims",
    ),
    Ok(
        "ModuleInfo<LilNeddy>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to Pontoon_LoadResources(KromeIni *)",
    ),
    Ok(
        "global constructors keyed to MetalSpikes_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<SnowRoo> virtual table",
    ),
    Ok(
        "Torch::Idle(void)",
    ),
    Ok(
        "CameraOverride::pCamDesc",
    ),
    Ok(
        "Kaboomerang::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "int type_info function",
    ),
    Ok(
        "Lava::Update(void)",
    ),
    Ok(
        "SeaMine_GetExplodingList(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverrideTopDown_Line(KromeIniLine *)",
    ),
    Ok(
        "Emu::Startled(void)",
    ),
    Ok(
        "C3Actor::Move(Vector *, bool)",
    ),
    Ok(
        "SnowSpider::Patrol(void)",
    ),
    Ok(
        "ModuleInfo<Bull>::Init(void)",
    ),
    Ok(
        "GameCamera::Underwater_Update(void)",
    ),
    Ok(
        "GameCamera_RestoreDefaultProjection(void)",
    ),
    Ok(
        "WaterTankStruct::SetState(int)",
    ),
    Ok(
        "PauseScreen_InitLevel(void)",
    ),
    Ok(
        "Timer_SetDHMSInSeconds(TimerInfo *, int)",
    ),
    Ok(
        "Shazza::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<Sly>::Init(void)",
    ),
    Ok(
        "RedButtonDescriptor::Load(KromeIni *)",
    ),
    Ok(
        "FaderObject::Update(void)",
    ),
    Ok(
        "GameObject virtual table",
    ),
    Ok(
        "ObjectPool<BaseCritter *>::Init(char *, int)",
    ),
    Ok(
        "Material::Use(Material *)",
    ),
    Ok(
        "SnowGun::turretNode",
    ),
    Ok(
        "ModuleInfo<TrapdoorSpider>::ConstructObject(void *)",
    ),
    Err(
        InvalidSpecialMethod(
            "udivdi3",
        ),
    ),
    Ok(
        "bad_typeid virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Fluffy::BurnFur(void)",
    ),
    Ok(
        "Crikey::_EatingChum(void)",
    ),
    Ok(
        "YabbyStalactite::ForceShatter(void)",
    ),
    Ok(
        "global constructors keyed to Yabby_InsideTrappedArea(void)",
    ),
    Ok(
        "KingFisher::GenerateRandomPos(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model::GetNmbrOfRefPoints(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TimeTrial_Update(void)",
    ),
    Ok(
        "KingFisher virtual table",
    ),
    Ok(
        "Friend::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Roach::DeathInit(void)",
    ),
    Ok(
        "BeachHut::LoadDone(void)",
    ),
    Ok(
        "DropPontoon::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "ShatterStruct::Explode(Vector *, float, float)",
    ),
    Ok(
        "ModuleInfo<RhinoGround> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillLizard::Alert(void)",
    ),
    Ok(
        "CrikeyCanister::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "LevelObjective::Failure(void)",
    ),
    Ok(
        "Ty::InitEvents(void)",
    ),
    Ok(
        "SnowRoo::Death(void)",
    ),
    Ok(
        "Bull::Walk(void)",
    ),
    Ok(
        "BlueTongue::DeathInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterfallStruct::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sentinel_LoadResources(KromeIni *)",
    ),
    Ok(
        "GameCameraPoint::SetRoof(float, unsigned int)",
    ),
    Ok(
        "RingoArm::Grabbing(void)",
    ),
    Ok(
        "RenderTexture_RenderForOverlay(int)",
    ),
    Err(
        InvalidSpecialMethod(
            "mprec_bigtens",
        ),
    ),
    Ok(
        "ShadowBatStalactite virtual table",
    ),
    Ok(
        "Groper::SwallowCruiseInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Barracuda::Deinit(void)",
    ),
    Ok(
        "MusicalIcicle::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Animation_InterpolateFrameData(Animation::FrameInstance *, float, Vector *, Vector *, Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "ModuleInfo<Leech>::Init(void)",
    ),
    Ok(
        "MetalSpikes::SetState(MetalSpikesState)",
    ),
    Ok(
        "ModuleInfo<ScriptProp> virtual table",
    ),
    Ok(
        "Matrix::GetRotationPYR(Vector *)",
    ),
    Ok(
        "SafePointResult::GetBestPointMag(Vector *)",
    ),
    Ok(
        "BlitterCritterFieldDesc::DeinitLevel(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BuildLookToMatrix(Matrix *, Vector *, Vector *)",
    ),
    Ok(
        "TrapdoorSpider::HideInHole(void)",
    ),
    Ok(
        "ScrubTurkey::SpawnThunderEggParticle(float)",
    ),
    Ok(
        "WarpFlower::LaunchUpdate(void)",
    ),
    Ok(
        "ModuleInfo<C1Water>::Init(void)",
    ),
    Ok(
        "Tools_GetAnimationNode(Model *, char *)",
    ),
    Ok(
        "Ty::DeinitLedgePullUp(void)",
    ),
    Ok(
        "BoulderTrapDesc::SetUp(StateMachine<Boulder>::State *, PtrListDL<Boulder> *)",
    ),
    Ok(
        "PubeCrab::TurnSideOn(float)",
    ),
    Ok(
        "TreasureChest::Reset(void)",
    ),
    Ok(
        "WaterfallBaseStruct::Deinit(void)",
    ),
    Ok(
        "ParticleSystem::Create(ParticleSystemType *, Vector *, BoundingVolume *, float, int, ParticleSystemManager *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "unsigned long type_info node",
    ),
    Ok(
        "GameData::AddChargeBite(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Shazza::LoadDone(void)",
    ),
    Ok(
        "Shatterable::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterfallBaseStruct::SpawnWaterfallSplash(Vector *, Vector *, int, float)",
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_si",
        ),
    ),
    Ok(
        "TyVideo_Init(char *, int)",
    ),
    Ok(
        "ModuleInfo<KingFisher> virtual table",
    ),
    Ok(
        "Sly::SkidInit(void)",
    ),
    Ok(
        "ModuleInfo<SmallCrab> virtual table",
    ),
    Ok(
        "DialogProp::Message(MKMessage *)",
    ),
    Ok(
        "LevelData::IsBossLevel(void)",
    ),
    Ok(
        "Model_GetNmbrOfStrips(ModelTemplate *, int, int)",
    ),
    Ok(
        "SeaMine::WarningInit(void)",
    ),
    Ok(
        "Hud_Reset(void)",
    ),
    Ok(
        "Muddie::Patrol(void)",
    ),
    Ok(
        "Speedboat::MoveBoat(void)",
    ),
    Ok(
        "Bull_LoadResources(KromeIni *)",
    ),
    Ok(
        "CameraOverrideManager::GetCurr(void)",
    ),
    Ok(
        "StaticFXProp::bTempVisible",
    ),
    Ok(
        "GateDescriptor virtual table",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Wombat::Death(void)",
    ),
    Ok(
        "Gate::Open_Init(void)",
    ),
    Ok(
        "ModuleInfo<SpyEgg>::Init(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "mcmp",
        ),
    ),
    Ok(
        "TyMemCard_BootTest(void)",
    ),
    Ok(
        "BlitterCritter::GetPos(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Frostyrang virtual table",
    ),
    Ok(
        "Lenny::Reset(void)",
    ),
    Ok(
        "Rufus virtual table",
    ),
    Ok(
        "GameCamera_UseCustomCameraMatrix(bool, Matrix *)",
    ),
    Ok(
        "View::InitModule(void)",
    ),
    Ok(
        "ChuteLog virtual table",
    ),
    Ok(
        "Ty::InitWaterSlide(void)",
    ),
    Ok(
        "Image::GetHeight(void)",
    ),
    Ok(
        "BoomerangDesc::Load(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<KoalaKidObjective>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfoBase::AddToModuleList(ModuleInfoBase *)",
    ),
    Ok(
        "RhinoGround::IsTyVisible(void)",
    ),
    Ok(
        "Lenny::GestureInit(void)",
    ),
    Ok(
        "BadBoonie::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "global constructors keyed to Drum_LoadResources(KromeIni *)",
    ),
    Ok(
        "Fluffy::IceAttackInit(void)",
    ),
    Ok(
        "Particle_Goo_Create(ParticleSystem **, Vector *, Vector *, float)",
    ),
    Ok(
        "BoulderTrap::DeinitModule(void)",
    ),
    Ok(
        "TySounds::UpdateSwimSounds(void)",
    ),
    Ok(
        "BlueTongue::Spawn(void)",
    ),
    Ok(
        "ShadowBatSonar::Fire(Vector *, Vector *)",
    ),
    Ok(
        "CrateStruct::Shatter(void)",
    ),
    Ok(
        "TyParticleManager::DrawPostWater(void)",
    ),
    Ok(
        "ModuleInfo<IceCoolant> virtual table",
    ),
    Ok(
        "FinishLine_IsCrossedBy(Vector *)",
    ),
    Ok(
        "Font::DrawText(char *, float, float, float, float, FontJustify, int)",
    ),
    Ok(
        "Shadow_Deinit(void)",
    ),
    Ok(
        "BurningJunk::Deinit(void)",
    ),
    Ok(
        "GameCamera::Pontoon_UpdateDirection(void)",
    ),
    Ok(
        "ThinIceProp::IdleUpdate(void)",
    ),
    Ok(
        "Collision_AddStaticModel(Model *, CollisionInfo *, int)",
    ),
    Ok(
        "ModuleInfo<Moth>::Init(void)",
    ),
    Ok(
        "Fish_Update(void)",
    ),
    Ok(
        "WaterfallSprayStruct::CreateMist(float, float)",
    ),
    Ok(
        "Debug_DeinitModule(void)",
    ),
    Ok(
        "CaveBat::GenerateRandomPosForMidPos(Vector *)",
    ),
    Ok(
        "BoomerangManager::SetHasRang(BoomerangType, bool)",
    ),
    Ok(
        "Lasso::PullRope(float)",
    ),
    Ok(
        "Bat::Fly(void)",
    ),
    Ok(
        "Ty::InSharkCageDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Gem::SetState(GemState)",
    ),
    Ok(
        "FireDrum::Message(MKMessage *)",
    ),
    Ok(
        "CausticEffect::LoadDone(void)",
    ),
    Ok(
        "unsigned long long type_info node",
    ),
    Ok(
        "RockProjectile::UpdatePhysics(void)",
    ),
    Ok(
        "SignPost::Update(void)",
    ),
    Ok(
        "TyMemCard_QueryDraw(void)",
    ),
    Ok(
        "Shark::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "GameCamera::SetCameraMatrix(bool)",
    ),
    Ok(
        "Croc::CruiseInit(void)",
    ),
    Ok(
        "FileSys_Load(char *, int *, void *, int)",
    ),
    Ok(
        "GameObjectManager::LoadLevel(KromeIni *)",
    ),
    Ok(
        "StopwatchStruct virtual table",
    ),
    Ok(
        "bad_alloc::~bad_alloc(void)",
    ),
    Ok(
        "View::SetCameraRot(Vector *, Vector *)",
    ),
    Ok(
        "BuzzSaw2::Deinit(void)",
    ),
    Ok(
        "Friend::Deinit(void)",
    ),
    Ok(
        "Boulder::UpdateRollFinal(void)",
    ),
    Ok(
        "LevelData::GetID(LevelNumber)",
    ),
    Ok(
        "Sly::ThrowRangsInit(void)",
    ),
    Ok(
        "LilNeddy::Flinch(void)",
    ),
    Ok(
        "Spider::Draw(void)",
    ),
    Ok(
        "ModuleInfo<TreasureChest> virtual table",
    ),
    Ok(
        "ChuteLog::Reset(void)",
    ),
    Ok(
        "MobilePlatform::LoadDone(void)",
    ),
    Ok(
        "Ty::SetMedium(TyMedium)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpiderWeb_LoadResources(KromeIni *)",
    ),
    Ok(
        "GuideParticle virtual table",
    ),
    Ok(
        "DDASession::StoreDeathInfo(void)",
    ),
    Ok(
        "ModuleInfo<AnimatingProp>::Init(void)",
    ),
    Ok(
        "FootEffect::SpawnBushPigDustEffect(Vector *, Vector *, float, float, BoundingVolume *, float, float, Vector *)",
    ),
    Ok(
        "Torch::Update(void)",
    ),
    Ok(
        "ModuleInfo<A1FrillObjective>::Init(void)",
    ),
    Ok(
        "Elle::Idle(void)",
    ),
    Ok(
        "Roach::DeathDeinit(void)",
    ),
    Ok(
        "BushPig::Init(void)",
    ),
    Ok(
        "bool type_info node",
    ),
    Ok(
        "Lenny virtual table",
    ),
    Ok(
        "Fly::Draw(void)",
    ),
    Ok(
        "CollisionObject::CalculateNewVelocity(Vector *, Vector *, float, ContextInfo *, CollisionResult *)",
    ),
    Ok(
        "Ty::Dive(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_acosf",
        ),
    ),
    Ok(
        "Megarang::UpdateFired(void)",
    ),
    Ok(
        "Ty::DeinitIdleGeneric(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillLizard::CloseToPipe(void)",
    ),
    Ok(
        "MoveYaw::Update(float, bool, bool)",
    ),
    Ok(
        "Bubble::Init(Vector *, BoundingVolume *, float)",
    ),
    Ok(
        "MKPropDescriptor::pDrawListDescs",
    ),
    Ok(
        "BonusPickup::Deinit(void)",
    ),
    Ok(
        "Lasso::Reset(void)",
    ),
    Ok(
        "C3Actor::GetTreasure(void)",
    ),
    Ok(
        "FinishLineStruct::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverridePath_End(void)",
    ),
    Ok(
        "SoundBank_Stop(int *)",
    ),
    Ok(
        "FootEffect::footIceType",
    ),
    Ok(
        "SoundEvent::GetID(unsigned int)",
    ),
    Ok(
        "MiniBoulderStruct::Reset(void)",
    ),
    Ok(
        "GuideBarrel::Idle(void)",
    ),
    Ok(
        "Wombat::FollowPath(void)",
    ),
    Ok(
        "EnemyObject::IsNearSq(Vector *, float)",
    ),
    Ok(
        "Ty::UpdateLastSafePos(void)",
    ),
    Ok(
        "Ty::EnableEntityLookAt(bool)",
    ),
    Ok(
        "MiniGameObjective::Success(void)",
    ),
    Ok(
        "ModuleInfo<Rufus> virtual table",
    ),
    Ok(
        "Rufus::Chase(void)",
    ),
    Ok(
        "RingoArm::Down(void)",
    ),
    Ok(
        "Burner::LoadDone(void)",
    ),
    Ok(
        "BoomerangHud::DrawInfrarangDisplay(void)",
    ),
    Ok(
        "Tick::Explode(void)",
    ),
    Ok(
        "Turtle_Line(KromeIniLine *)",
    ),
    Ok(
        "RedButton::Idle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TrapdoorSpider::JumpInit(void)",
    ),
    Ok(
        "BlueTongue virtual table",
    ),
    Ok(
        "TimeTrial_SetLost(void)",
    ),
    Ok(
        "AuroraKid::Update(void)",
    ),
    Ok(
        "DialogEffectManager::Draw(void)",
    ),
    Ok(
        "LogicGame(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Boulder::TryHurtTy(void)",
    ),
    Ok(
        "Blitter_TriStrip::Draw(int, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MusicalIcicleObjective::Update(void)",
    ),
    Ok(
        "View::SetCameraRollAndLookAt(Vector *, Vector *, float)",
    ),
    Ok(
        "GameCamera::Underwater_Init(void)",
    ),
    Ok(
        "KoalaKid::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "BushPig::Walk(void)",
    ),
    Ok(
        "MKAnimScript::GetNormalPosition(void)",
    ),
    Ok(
        "DialogEffectManager::pDialogPlayer",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<TriggerSphereProp> virtual table",
    ),
    Ok(
        "MKWave::GetWaveHeight2D(float, Vector *)",
    ),
    Ok(
        "ParticleSystem::AllocateParticle(void)",
    ),
    Ok(
        "WaterTankStruct::Draw(void)",
    ),
    Ok(
        "QuatRotation::ConvertVector(Vector *)",
    ),
    Ok(
        "Model::IsVisible(View *)",
    ),
    Ok(
        "MKParticleGenType::SetEnvelope(MKParticleGenType::Envelope *, int)",
    ),
    Ok(
        "Ty::LongFallSplatLand(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CaveBat_GetFirstPointer(void)",
    ),
    Ok(
        "BoomerangWeapon::DrawShadow(Vector *)",
    ),
    Ok(
        "SeaMine::Sway(void)",
    ),
    Ok(
        "GameObject::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "KoalaKid::GetSoundFileName(bool)",
    ),
    Ok(
        "SawDust_LoadResources(void)",
    ),
    Ok(
        "global constructors keyed to BouncingBoulder_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModelExplorer_P2::BuildVertex(int)",
    ),
    Ok(
        "GuideParticle::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "TimeTrial_IsActive(void)",
    ),
    Ok(
        "PathFindingObject::Clear(void)",
    ),
    Ok(
        "Mist_Update(void)",
    ),
    Ok(
        "global constructors keyed to Bull_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::InitBite(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShatterStruct::SetHitPlane(PieceStruct *)",
    ),
    Ok(
        "ExactMagXZ(Vector *, Vector *)",
    ),
    Err(
        InvalidSpecialMethod(
            "check_eh_spec",
        ),
    ),
    Ok(
        "NinjaGecko::CrawlAlertInit(void)",
    ),
    Ok(
        "CameraOverrideTopDown_Reset(void)",
    ),
    Ok(
        "SpecialHud::Draw(void)",
    ),
    Ok(
        "KingFisher::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKGrass_AddModel(Model *)",
    ),
    Ok(
        "Explosion_Draw(void)",
    ),
    Ok(
        "Rufus::HopInit(void)",
    ),
    Ok(
        "Croc::IsTyVisible(void)",
    ),
    Ok(
        "UIModel::SetRotation(float)",
    ),
    Ok(
        "WaterSlideData::Deinit(void)",
    ),
    Ok(
        "CameraOverrideFixedRail_Reset(void)",
    ),
    Ok(
        "WaterPipe::Init(GameObjDesc *)",
    ),
    Ok(
        "GameCamera_OverrideFixedRail_Add(CameraOverrideFixedRailLoadInfo *)",
    ),
    Ok(
        "ModuleInfo<WhirlyWind>::ConstructObject(void *)",
    ),
    Ok(
        "Lasso::DeinitLassoCaughtWaterTank(void)",
    ),
    Ok(
        "SnowPile_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<BonusPickup> virtual table",
    ),
    Ok(
        "DropPontoon::NormalUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Friend::GetVel(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::InitJump(void)",
    ),
    Ok(
        "TyContext::WaterInfo::Update(Vector *, Vector *)",
    ),
    Ok(
        "SpecialPickupStruct::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "void LoadDescriptors<PlatformDesc>(KromeIni *, char *, PlatformDesc *)",
    ),
    Ok(
        "Boomerang::OrientTowardsCamera(float)",
    ),
    Ok(
        "Material::UseInternal(int, bool)",
    ),
    Ok(
        "Speedboat::GetNewPathPos(float)",
    ),
    Ok(
        "PE_Dust_LoadResources(void)",
    ),
    Ok(
        "Material::Destroy(void)",
    ),
    Ok(
        "Dennis::Deinit(void)",
    ),
    Ok(
        "PauseScreen_DeinitResources(void)",
    ),
    Ok(
        "SoundEventManager::BuildSoundNameTable(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<C3Chest>::Init(void)",
    ),
    Ok(
        "ScriptProp::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Material::GetMaterialList(void)",
    ),
    Ok(
        "ModuleInfo<FinishLineStruct>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Fly::Update_Moving(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScissorPoly(ScissorBuffer *)",
    ),
    Ok(
        "Developer_Draw(void)",
    ),
    Ok(
        "GameCamera::Collision_AdjustDesiredPointsSweep(Vector *)",
    ),
    Ok(
        "Damageable::Reset(void)",
    ),
    Ok(
        "GameCamera_OverrideFixedPoint_Add(CameraOverrideFixedPointLoadInfo *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Barracuda::IsTyVisible(void)",
    ),
    Ok(
        "Wombat::StartChaseInit(void)",
    ),
    Ok(
        "SoundBank_Update(void)",
    ),
    Ok(
        "MKAnimScript::GetMeshName(void)",
    ),
    Ok(
        "SynkerFrillLizard::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<ScubaFrill>::Init(void)",
    ),
    Ok(
        "Croc_LoadResources(KromeIni *)",
    ),
    Ok(
        "Ty::WaterMediumUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterfallBaseStruct::sprayType",
    ),
    Ok(
        "StaticProp::LoadDone(void)",
    ),
    Ok(
        "global constructors keyed to Z1RainbowScaleObjective_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Neddy::HitTarget(void)",
    ),
    Ok(
        "Crikey::Chase(void)",
    ),
    Ok(
        "Basket::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "KoalaKid::Deinit(void)",
    ),
    Ok(
        "Frostyrang::Deinit(void)",
    ),
    Ok(
        "BoulderTrapDesc::AllocateBoulder(void)",
    ),
    Ok(
        "Blitter_Particle::DrawFrames(int, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Lenny>::ConstructObject(void *)",
    ),
    Ok(
        "Fluffy::LogicUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Shark::StunnedInit(void)",
    ),
    Ok(
        "Shatterable::Reset(void)",
    ),
    Ok(
        "KoalaKid::WalkInit(void)",
    ),
    Ok(
        "Collision_DeinitModule(void)",
    ),
    Ok(
        "Spear::AddSpin(void)",
    ),
    Ok(
        "ScrubTurkey::AlertPause_CanGoToState(void)",
    ),
    Ok(
        "Bull virtual table",
    ),
    Ok(
        "GameCamera::SnapBehindHero(bool, Vector *, bool)",
    ),
    Ok(
        "BilbyHud::Draw(void)",
    ),
    Ok(
        "Ty::SetUpWaterJump(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Spear::CheckForHit(void)",
    ),
    Ok(
        "EnemyObject::GetRunSpeed(void)",
    ),
    Ok(
        "Vector::ApplyTransMatrix(Vector *, Matrix *)",
    ),
    Ok(
        "Gem_PickupParticle_SpawnParticles(Vector *)",
    ),
    Ok(
        "Lenny::ApproachInit(void)",
    ),
    Ok(
        "Crikey::HurtInit(void)",
    ),
    Ok(
        "SpiderTrapdoor::LoadDone(void)",
    ),
    Ok(
        "Portal::UpdateModule(void)",
    ),
    Ok(
        "WaterSlideManager::LoadSection(WayPointLoadInfo *)",
    ),
    Ok(
        "PontoonRope::LoadDone(void)",
    ),
    Ok(
        "global constructors keyed to Portal_LoadResources(KromeIni *)",
    ),
    Ok(
        "FrillBike::nFrontWheel",
    ),
    Ok(
        "BonusPickup::Spawning(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillBike::AdjustBike(void)",
    ),
    Ok(
        "WaterPipe virtual table",
    ),
    Ok(
        "Model::GetSubObjectMatrixIndex(int)",
    ),
    Ok(
        "MKWaterManager_GenerateRandomTable(void)",
    ),
    Ok(
        "GameCamera::Update(GameCameraHeroInfo *)",
    ),
    Ok(
        "Teleporter::Message(MKMessage *)",
    ),
    Ok(
        "Projectile::EndLife(void)",
    ),
    Ok(
        "WaterDragon_Add(Vector *)",
    ),
    Ok(
        "global constructors keyed to Sheila_LoadResources(KromeIni *)",
    ),
    Ok(
        "Lenny::IdleInit(void)",
    ),
    Ok(
        "ModuleInfo<Burnable> virtual table",
    ),
    Ok(
        "CaveBat::CheckForBoomerangs(void)",
    ),
    Ok(
        "ModuleInfo<Torch>::ConstructObject(void *)",
    ),
    Ok(
        "Ty::InitWalk(void)",
    ),
    Ok(
        "Bat::SweepDeinit(void)",
    ),
    Ok(
        "GameCamera::MiniGameC2_Update(void)",
    ),
    Ok(
        "DDASession::SetDebugMessage(char *)",
    ),
    Ok(
        "Ty::DeinitDive(void)",
    ),
    Ok(
        "SoundProp::Init(GameObjDesc *)",
    ),
    Ok(
        "MKMemoryCard_Load(int, int, void *, int)",
    ),
    Ok(
        "MKGrass_Init(void)",
    ),
    Ok(
        "DebugInfo_Particle(char *, Vector *, int, float, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rhino::DeinitTurnAround(void)",
    ),
    Ok(
        "TyHealth::DrawHudElement(Vector)",
    ),
    Ok(
        "FrontEnd_Extras_Deinit(void)",
    ),
    Ok(
        "YabbyStalactite::Hanging(void)",
    ),
    Ok(
        "Elevator::GoingUpState(void)",
    ),
    Ok(
        "Projectile virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model::GetNmbrOfSubObjects(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "rethrow",
        ),
    ),
    Ok(
        "SmallCrab::IdleState(void)",
    ),
    Ok(
        "TyMemCard_AutoSaveDraw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScrubTurkey::SendMessage(ScrubTurkeyMessageType, ScrubTurkey *)",
    ),
    Ok(
        "StaticFXProp::Update(void)",
    ),
    Ok(
        "WaterfallPointStruct::Update(void)",
    ),
    Ok(
        "Bull::CrashInit(void)",
    ),
    Ok(
        "Matrix::SetRotationToScaleXYZ(Vector *)",
    ),
    Ok(
        "UIHeading::Init(char *)",
    ),
    Ok(
        "BlueTongueThrower::ThrowInit(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "get_eh_context",
        ),
    ),
    Ok(
        "ModuleInfo<Gem>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<SynkerBlueTongue> virtual table",
    ),
    Ok(
        "Croc::LookOut(void)",
    ),
    Ok(
        "ModuleInfo<BurningTree>::ConstructObject(void *)",
    ),
    Ok(
        "global constructors keyed to YabbyObjective::bActivated",
    ),
    Ok(
        "CritterField2::loadInfo",
    ),
    Ok(
        "SpecialPickupStruct::GetPos(void)",
    ),
    Ok(
        "Tools_GetAnimationLength(MKAnimScript *)",
    ),
    Ok(
        "Model::SetLocalToWorldDirty(void)",
    ),
    Ok(
        "NinjaGecko::LeapStart(void)",
    ),
    Ok(
        "Speedboat::InitIdle(void)",
    ),
    Ok(
        "Critter2::Update(void)",
    ),
    Ok(
        "YabbyStalactite_DrawDebug(void)",
    ),
    Ok(
        "RenderTexture_CausticsEnd(void)",
    ),
    Ok(
        "Ty::InitLearnToDive(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WhiteBat::UpdateSpeed(float)",
    ),
    Ok(
        "BuzzSaw2::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WeatherTypeCallback(void *)",
    ),
    Ok(
        "Wombat::LogicUpdate(void)",
    ),
    Ok(
        "ScubaFrill::DeathDeinit(void)",
    ),
    Ok(
        "KingFisherDesc::Init(ModuleInfoBase *, char *, char *)",
    ),
    Ok(
        "FlameThrower::UpdateLight(float)",
    ),
    Ok(
        "Aurora::Draw(void)",
    ),
    Ok(
        "SawDust::Start(Vector *, float, BoundingVolume *, float)",
    ),
    Ok(
        "GameObject::GetMessageIdFromString(char *)",
    ),
    Ok(
        "AntHill::Reset(void)",
    ),
    Ok(
        "Tools_SmoothToValue2(float, float, float, float, float)",
    ),
    Ok(
        "Skink::BeerAttackDeinit(void)",
    ),
    Ok(
        "PubeCrab::AlertInit(void)",
    ),
    Ok(
        "TreasureChest::Draw(void)",
    ),
    Ok(
        "Ringo::Message(MKMessage *)",
    ),
    Ok(
        "global constructors keyed to OpalCollector::nNextPoint",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::PlatformDetach(void)",
    ),
    Ok(
        "Animation_CalculateFrame(Animation::FrameInstance *, AnimationData::Node *)",
    ),
    Ok(
        "ModuleInfo<Ibis>::ConstructObject(void *)",
    ),
    Ok(
        "MKMemoryCard_SetAppInfo(char *, char *, char *)",
    ),
    Ok(
        "WaterSlideSection::AddBranch(int)",
    ),
    Ok(
        "Ty::WarpTransition(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "register_frame_table",
        ),
    ),
    Ok(
        "OmniLight_DestroyScene(OmniLightScene *)",
    ),
    Ok(
        "Tick_LoadResources(KromeIni *)",
    ),
    Ok(
        "Speedboat_LoadResources(KromeIni *)",
    ),
    Ok(
        "Ty::DiveTransition(void)",
    ),
    Ok(
        "LedgePullUpData::Pull(void)",
    ),
    Ok(
        "BaseCritter::GetDesc(void)",
    ),
    Ok(
        "StopwatchStruct::Init(GameObjDesc *)",
    ),
    Ok(
        "__user_type_info type_info function",
    ),
    Ok(
        "File_IsAnyBusy(void)",
    ),
    Ok(
        "DDASession::LoadStatsInfo(void)",
    ),
    Ok(
        "Path_DrawDebug(PathSegment *, Vector *, float)",
    ),
    Ok(
        "MKWater::Destroy(void)",
    ),
    Ok(
        "PauseScreen_ChangeLevel_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<SynkerBlueTongue>::ConstructObject(void *)",
    ),
    Ok(
        "Collapsible_LoadResources(KromeIni *)",
    ),
    Ok(
        "MKAnimScript::UpdatesUntilFinished(void)",
    ),
    Ok(
        "EnemyObject::FindSpawnedNeighbours(int)",
    ),
    Ok(
        "Damageable::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "SeaMine_LoadResources(KromeIni *)",
    ),
    Ok(
        "Ty::CheckFirstPerson(void)",
    ),
    Ok(
        "Texture::pResyncDmaPtr",
    ),
    Ok(
        "LilNeddy::AlertInit(void)",
    ),
    Ok(
        "RockCollection::Deinit(void)",
    ),
    Ok(
        "BadBoonie::Message(MKMessage *)",
    ),
    Ok(
        "GCT_IntersectingPoint2D(Vector *, Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "bool type_info function",
    ),
    Ok(
        "CameraOverride_CreateScaledDirectionMatrix(Matrix *, Vector *, Vector *, float, float)",
    ),
    Ok(
        "BonusPickup_Spawn(Vector *, Vector *, BonusPickupType)",
    ),
    Ok(
        "UIButton::Init(char *, UIButtonDescriptor *)",
    ),
    Ok(
        "TurningPlatform::Update(void)",
    ),
    Ok(
        "Ty::InitGlide(void)",
    ),
    Ok(
        "MKSceneManager::Optimise(void)",
    ),
    Ok(
        "WaterfallStruct::CreateNewSplash(float, float)",
    ),
    Ok(
        "GameCamera::Fluffy_Init(void)",
    ),
    Ok(
        "SnowGun::Draw(void)",
    ),
    Ok(
        "ShatterStruct::SetFragInfo(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sly::KnockdownInit(void)",
    ),
    Ok(
        "ReflectionStruct::Render(void)",
    ),
    Ok(
        "GameObject::Allocate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBat::FlyToHoverPos(void)",
    ),
    Ok(
        "Roach::Death(void)",
    ),
    Ok(
        "BadBoonie::TeleportInit(void)",
    ),
    Ok(
        "CollisionObject::ResolveCollisions(Vector *, Vector *, int)",
    ),
    Ok(
        "Ty::SwimAttack(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "unpack_f",
        ),
    ),
    Ok(
        "Elevator::ClipMovement(Model *)",
    ),
    Ok(
        "Maurie::Update(void)",
    ),
    Ok(
        "View::CalcMatrices(void)",
    ),
    Ok(
        "TyParticleManager::SpawnFastGlow(Vector *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Avalanche::StartFallingSnow(Vector *, BoundingVolume *)",
    ),
    Ok(
        "Boomerang::InitLoaded(void)",
    ),
    Ok(
        "Bunyip_GetLastEvent(void)",
    ),
    Ok(
        "Collapsible::Update(void)",
    ),
    Ok(
        "GameSubStateFSM::BushPig_Update(void)",
    ),
    Ok(
        "MKWave::DrawSineWaveNormals(MKWaterProp *, float, float, int)",
    ),
    Ok(
        "Wombat::HitInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StaticProp::loadInfo",
    ),
    Ok(
        "AquarangProp::LoadDone(void)",
    ),
    Ok(
        "Kin_GetfinalVel(float *, float *, float *, float *)",
    ),
    Ok(
        "Path_Manager_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Jeep::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "CameraOverrideSpiral_Line(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Projectile::UpdatePhysics(void)",
    ),
    Ok(
        "ChumBox_GetDescriptor(void)",
    ),
    Ok(
        "Particle_Fire_Init(ParticleSystem **, Vector *, BoundingVolume *, float, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraINI::Load(char *)",
    ),
    Ok(
        "Video_TransferSoundData(Video *)",
    ),
    Ok(
        "PubeCrab::Alert(void)",
    ),
    Ok(
        "GeckoDesc::Init(ModuleInfoBase *, char *, char *)",
    ),
    Ok(
        "Flame_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Shears_Update(void)",
    ),
    Ok(
        "BadBoonie::Deinit(void)",
    ),
    Ok(
        "GameCamera_UseCurrentVector(bool)",
    ),
    Err(
        InvalidSpecialMethod(
            "sjthrow",
        ),
    ),
    Ok(
        "ModuleInfo<CaveBatObjective> virtual table",
    ),
    Ok(
        "EnemySpawner::SetupSpawnedCollisionObjects(void)",
    ),
    Ok(
        "GCT_DrawText(char *, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tools_RandomGaussian(void)",
    ),
    Ok(
        "global constructors keyed to GeneratePos_RunAwayFromTy(Vector &, Vector const &, Vector const &, float)",
    ),
    Ok(
        "Blitter_InitModule(void)",
    ),
    Ok(
        "FrillLizard::Idle(void)",
    ),
    Ok(
        "Croc::Munch(void)",
    ),
    Ok(
        "Ty::LedgePullUp(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PE_SnowTrail_LoadResources(void)",
    ),
    Ok(
        "FireworksCrate_GetDescriptor(void)",
    ),
    Ok(
        "FireWorks::Deinit(void)",
    ),
    Ok(
        "Basket::Message(MKMessage *)",
    ),
    Ok(
        "MusicalIcicle::Place(Vector *, Vector *, Vector *, int)",
    ),
    Ok(
        "CrikeyChum virtual table",
    ),
    Ok(
        "CritterField2 virtual table",
    ),
    Ok(
        "Shears_Add(ShearsLoadInfo *)",
    ),
    Ok(
        "ModuleInfo<SpyEgg>::ConstructObject(void *)",
    ),
    Ok(
        "RenderTypeToString(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sentinel::Message(MKMessage *)",
    ),
    Ok(
        "Input_AllPadsWasButtonPressed(InputDevices *, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dialog_Stop(void)",
    ),
    Ok(
        "DropShadow::SetColor(Vector *)",
    ),
    Ok(
        "Rhino::InitRun(void)",
    ),
    Ok(
        "FrillLizard::BackOff(bool)",
    ),
    Ok(
        "Ty::GetCentreAndNormal(Vector *, Vector *)",
    ),
    Ok(
        "ScrubTurkey::Alert_CanGoToState(void)",
    ),
    Ok(
        "MiniBoulderStruct::Update(void)",
    ),
    Ok(
        "StaticSpikes_LoadResources(void)",
    ),
    Ok(
        "Ty::SetWarpHide(void)",
    ),
    Ok(
        "KoalaKid::WaveInit(void)",
    ),
    Ok(
        "CableCar virtual table",
    ),
    Ok(
        "PubeCrab::RunForward(bool)",
    ),
    Ok(
        "TyBite::BiteUncharge(void)",
    ),
    Ok(
        "Reeds_LoadResources(void)",
    ),
    Ok(
        "ScrubTurkey_LoadResources(KromeIni *)",
    ),
    Ok(
        "TyParticleManager::SpawnIceShard(Vector *, Vector *, float)",
    ),
    Ok(
        "Hud_InitBossHealth(Material *, int)",
    ),
    Ok(
        "GameCamera::AutoCenter_Update(void)",
    ),
    Ok(
        "MKWaterProp::InitMixValues(Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "GameCamera::BiteEffect_Deinit(void)",
    ),
    Ok(
        "Target::LoadDone(void)",
    ),
    Ok(
        "ModuleInfo<SnowSpider>::ConstructObject(void *)",
    ),
    Ok(
        "Muddie::WalkTurn(bool)",
    ),
    Ok(
        "ModuleInfo<CheckpointStruct> virtual table",
    ),
    Ok(
        "ModuleInfo<Elle>::ConstructObject(void *)",
    ),
    Ok(
        "ShadowBat::KissOfDeathChase(void)",
    ),
    Ok(
        "ModuleInfo<Megarang>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverrideCameraLoadInfo::LoadLine(KromeIniLine *)",
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "erminate_func",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Cloud::GetRandom(float, float)",
    ),
    Ok(
        "Shark::Draw(void)",
    ),
    Ok(
        "DialogEffect::AttachPropDeinit(void)",
    ),
    Ok(
        "Flame::envelope",
    ),
    Ok(
        "Windmill_Add(Vector *, Vector *)",
    ),
    Ok(
        "TotalCount::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShoalFish::UpdateLogic(void)",
    ),
    Ok(
        "Tools_ApplyDoppler(int, Vector *, Vector *, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverrideHigh_Line(KromeIniLine *)",
    ),
    Ok(
        "bad_typeid type_info function",
    ),
    Ok(
        "TriggerProp::Init(GameObjDesc *)",
    ),
    Ok(
        "ModuleInfoBase::pList",
    ),
    Ok(
        "Waterfall_Spray_Update(ParticleSystem *)",
    ),
    Ok(
        "__user_type_info virtual table",
    ),
    Ok(
        "NinjaGecko::CrawlInit(void)",
    ),
    Ok(
        "WaterfallSprayStruct::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SynkerFrogDesc * descr_cast<SynkerFrogDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "Geyser::Message(MKMessage *)",
    ),
    Ok(
        "IcePlatform::TestTyOn(void)",
    ),
    Ok(
        "ModuleInfo<IceCube>::ConstructObject(void *)",
    ),
    Ok(
        "SpikeyIce_Add(Vector *, Vector *)",
    ),
    Ok(
        "SnowPile::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<Bull> virtual table",
    ),
    Ok(
        "BushPig::EventCheck(void)",
    ),
    Ok(
        "Gate::Wobble_Update(void)",
    ),
    Ok(
        "Heap_MemAlloc(int)",
    ),
    Ok(
        "Ty::Reset(void)",
    ),
    Ok(
        "BiteTrail_Reset(void)",
    ),
    Ok(
        "Julius::IdleInit(void)",
    ),
    Ok(
        "ScrubTurkey::CheckEvents(void)",
    ),
    Ok(
        "SynkerFrog::Update(void)",
    ),
    Ok(
        "ChuteLog::Update(void)",
    ),
    Ok(
        "Doomerang::InitIdle(void)",
    ),
    Ok(
        "Ty::InWater(void)",
    ),
    Ok(
        "StarTrail::Draw(void)",
    ),
    Ok(
        "TyHealth::Gain(int)",
    ),
    Ok(
        "GuideParticle_Show(void)",
    ),
    Ok(
        "TyContext::Reset(void)",
    ),
    Ok(
        "Ty::DeinitKnockBack(void)",
    ),
    Ok(
        "CameraOverrideRail_Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to WhiteBat::Deinit(void)",
    ),
    Ok(
        "Ty::IsBiting(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Gecko::Deinit(void)",
    ),
    Ok(
        "IceRamp::Init(GameObjDesc *)",
    ),
    Ok(
        "Target::Init(GameObjDesc *)",
    ),
    Ok(
        "Lenny::Gesture(void)",
    ),
    Ok(
        "EnemyObject::GetHeight(void)",
    ),
    Ok(
        "Translation_GetLanguage(void)",
    ),
    Ok(
        "Tools_BuildLTWMatrix(Matrix *, Vector *, Vector *)",
    ),
    Ok(
        "Maurie::RequestRang(void)",
    ),
    Ok(
        "C3Actor::GetTreasureInit(void)",
    ),
    Ok(
        "BurningTree::Update(void)",
    ),
    Ok(
        "EnemyObject::CanInitiateAttack(void)",
    ),
    Ok(
        "Lasso::LassoSnapped(void)",
    ),
    Ok(
        "LoadLevel_Path_Start(void)",
    ),
    Ok(
        "CuttleFish::Update_Wait(void)",
    ),
    Ok(
        "YabbyStalactite::Deinit(void)",
    ),
    Ok(
        "Megarang::UpdateEndPosition(void)",
    ),
    Ok(
        "BurningTree_LoadResources(KromeIni *)",
    ),
    Ok(
        "JeepAnims::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BilbyStruct::Idle(void)",
    ),
    Ok(
        "MKAnimScript::OffsetsUsed(void)",
    ),
    Ok(
        "Leech::MissInit(void)",
    ),
    Ok(
        "PontoonRope::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Bunyip_End(void)",
    ),
    Ok(
        "ReedsStruct::MaxReeds",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tools_TurnToTarget(Vector *, Vector *, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CritterField2::Message(MKMessage *)",
    ),
    Ok(
        "WaterDragon_Draw(void)",
    ),
    Ok(
        "Burnable::LoadDone(void)",
    ),
    Ok(
        "FrillBike::GetLocalVelocity(Vector *, float)",
    ),
    Ok(
        "Bird::Assign(CritterField2 *)",
    ),
    Ok(
        "TurningPlatform::loadPoints",
    ),
    Ok(
        "WaterSlideEffect::Deinit(void)",
    ),
    Ok(
        "Roach::StartFly(void)",
    ),
    Ok(
        "BushPig::JumpTransition(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TrapdoorSpider::AttackInit(void)",
    ),
    Ok(
        "Leech::Explode(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ParticleSystem::bDraw",
    ),
    Ok(
        "MusicalIcicle::IdleInit(void)",
    ),
    Ok(
        "BoomerangWeapon::Disable(void)",
    ),
    Ok(
        "BushPig::DeinitRun(void)",
    ),
    Ok(
        "Kin_GetDistance(float *, float *, float *, float *)",
    ),
    Ok(
        "UIImage::Init(float, float)",
    ),
    Ok(
        "GameCamera::Underwater_SetSourceAboveWater(void)",
    ),
    Ok(
        "Ty::SetUpLandJump(void)",
    ),
    Ok(
        "Fluffy::BashInit(void)",
    ),
    Ok(
        "ShadowBat::SteamDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "KoalaKid::IsSoundLoaded(void)",
    ),
    Ok(
        "__class_type_info type_info function",
    ),
    Ok(
        "Friend::PreUpdate(void)",
    ),
    Ok(
        "Croc::DeathDeinit(void)",
    ),
    Ok(
        "ModuleInfo<CritterField2> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<KingFisherField>::Init(void)",
    ),
    Ok(
        "ScrubTurkey::BittenIdleInit(void)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_A2_Deinit(void)",
    ),
    Ok(
        "global constructors keyed to Eel_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<Rex>::Init(void)",
    ),
    Ok(
        "GameObject::InitModule(void)",
    ),
    Ok(
        "Font::DrawTextWrapped3d(char *, float, float, Vector *, float, float, FontJustify, unsigned int, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tools_DrawDebugArc(Matrix *, float, float, int, float, int)",
    ),
    Ok(
        "System_DoZCheck(ZCheckRequest *)",
    ),
    Ok(
        "WarpFlower::LaunchInit(void)",
    ),
    Ok(
        "Reeds_Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Farlapp::MoveInit(void)",
    ),
    Ok(
        "ModuleInfo<NinjaGecko>::ConstructObject(void *)",
    ),
    Ok(
        "PathNodeNexus::Merge(PathNodeNexus *)",
    ),
    Ok(
        "BlueTongue::LogicUpdate(void)",
    ),
    Ok(
        "ModuleInfo<Fly>::Init(void)",
    ),
    Ok(
        "ModuleInfo<WaterWheel>::ConstructObject(void *)",
    ),
    Ok(
        "Elevator::Init(GameObjDesc *)",
    ),
    Ok(
        "Ringo::Init(GameObjDesc *)",
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "hrow",
        ),
    ),
    Ok(
        "ThrowingStar::Fire(Vector *)",
    ),
    Ok(
        "BadBoonie_LoadResources(KromeIni *)",
    ),
    Ok(
        "Geyser::Update(void)",
    ),
    Ok(
        "ModuleInfo<Sentinel> virtual table",
    ),
    Ok(
        "C3Chest_LoadResources(KromeIni *)",
    ),
    Ok(
        "TriggerBoxProp::LoadDone(void)",
    ),
    Ok(
        "Matrix::RotatePYR(Matrix *, Vector *)",
    ),
    Ok(
        "BoomerangManager::Show(BoomerangSide)",
    ),
    Ok(
        "CaveBat::Reset(void)",
    ),
    Ok(
        "GameObjectManager::RemoveObject(GameObject *)",
    ),
    Ok(
        "DebugInfo_Box(char *, Vector *, Vector *, int)",
    ),
    Ok(
        "global constructors keyed to FinishLine_Show(void)",
    ),
    Ok(
        "ModuleInfo<SnowGun> virtual table",
    ),
    Ok(
        "Rufus::ReturnHome(void)",
    ),
    Ok(
        "GameCamera::CustomVectors_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Shatterable::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PE_BullSplash_LoadResources(void)",
    ),
    Ok(
        "Portal::UpdateShadow(float)",
    ),
    Ok(
        "Lenny::RetreatInit(void)",
    ),
    Ok(
        "CameraOverride::Rail_Init(void)",
    ),
    Ok(
        "CritterField2Desc::Init(ModuleInfoBase *, CritterDesc2 *, unsigned int, unsigned int, unsigned int)",
    ),
    Ok(
        "WhirlyWind::UpdateWorldMatrix(void)",
    ),
    Ok(
        "Drum::Idle(void)",
    ),
    Ok(
        "MKMemoryCard_CalculateBlocksRequired(int, int *)",
    ),
    Ok(
        "Bull::IdleInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScubaFrill::ShootDeinit(void)",
    ),
    Ok(
        "BlueTongue::HuntShazzaInit(void)",
    ),
    Ok(
        "Ty::SetEnterSharkCage(Vector *, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "AuroraKid_LoadResources(KromeIni *)",
    ),
    Ok(
        "FrillBike::Chase(void)",
    ),
    Ok(
        "PlatformRider::Resolve(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Matrix::RotateRoll(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScubaFrill::FlinchInit(void)",
    ),
    Ok(
        "Projectile::CheckShotPossible(Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShoalFish::Unassign(CritterField2 *)",
    ),
    Ok(
        "PubeCrab::WalkTurn(bool)",
    ),
    Ok(
        "TimeTrial_Cancel(bool)",
    ),
    Ok(
        "Video_GetMoreInputData(Video *, int)",
    ),
    Ok(
        "GameObjDesc::LoadObjects(KromeIni *, KromeIniLine *)",
    ),
    Ok(
        "WeatherTypes_GetWeatherType(char *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "new_handler",
        ),
    ),
    Ok(
        "ModuleInfo<Croc>::Init(void)",
    ),
    Ok(
        "EnemySpawner::Init(GameObjDesc *)",
    ),
    Ok(
        "FlameThrower::Activate(bool)",
    ),
    Ok(
        "ModuleInfo<BonusPickup>::Init(void)",
    ),
    Ok(
        "ModuleInfo<Pontoon> virtual table",
    ),
    Ok(
        "View::Use(void)",
    ),
    Ok(
        "Tools_AnimEventManager::Update(MKAnimScript *)",
    ),
    Ok(
        "GameCamera_UseRobotEffect(bool)",
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "hrow_bad_cast",
        ),
    ),
    Ok(
        "Model::DumpStrips(void)",
    ),
    Ok(
        "BeachHut::beachHutDesc",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<ShadowBatValve>::Init(void)",
    ),
    Ok(
        "EnemyObject::GetMovementDesc(void)",
    ),
    Ok(
        "ModuleInfo<LilyPad>::Init(void)",
    ),
    Ok(
        "ToggleChangeLevel(void)",
    ),
    Ok(
        "Collision_InitModule(void)",
    ),
    Ok(
        "GameCamera::Collision_ClipForDynamicItems(Vector *, float, Vector *)",
    ),
    Ok(
        "Lava_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<Doomerang>::Init(void)",
    ),
    Ok(
        "Wombat::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SharkCage::Init(GameObjDesc *)",
    ),
    Ok(
        "Video_CbStopDMA(sceMpeg *, sceMpegCbData *, Video *)",
    ),
    Ok(
        "Critters_DeInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tick::Idle(void)",
    ),
    Ok(
        "ModuleInfo<Rhino>::ConstructObject(void *)",
    ),
    Ok(
        "EnemyObject::GetRunTurnSpeed(void)",
    ),
    Ok(
        "ModuleInfo<PickupCounter> virtual table",
    ),
    Ok(
        "Burnable::Init(GameObjDesc *)",
    ),
    Ok(
        "BonusPickup::IdleInit(void)",
    ),
    Ok(
        "Tools_DropShadow_Update(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "empty",
        ),
    ),
    Ok(
        "StalactiteTrap_LoadResources(KromeIni *)",
    ),
    Ok(
        "Ty::EventQuickSand(char *)",
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_atan2",
        ),
    ),
    Ok(
        "MKWave::GetWaveHeight(float, float, Vector *)",
    ),
    Ok(
        "GameCamera::AdjustDeltasDynamically(void)",
    ),
    Ok(
        "Spline::Init(int, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_SaveGame_Draw(void)",
    ),
    Ok(
        "TimeTrial_StartTimer(void)",
    ),
    Ok(
        "Parser::GrabFieldName(void)",
    ),
    Ok(
        "IceRamp::Reset(void)",
    ),
    Ok(
        "ModuleInfo<Barracuda>::Init(void)",
    ),
    Ok(
        "SkinkDropTail::Deinit(void)",
    ),
    Ok(
        "Fluffy::Dead(void)",
    ),
    Ok(
        "Boomerang_CheckForHit(Vector *, float, float, float)",
    ),
    Ok(
        "FileSys_Save(char *, bool, void *, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Boomerang::DrawReflection(void)",
    ),
    Ok(
        "FlameThrower::Reset(void)",
    ),
    Ok(
        "Boomerang::GetDesc(void)",
    ),
    Ok(
        "ModuleInfo<Jeep> virtual table",
    ),
    Ok(
        "Shark::Chase(void)",
    ),
    Ok(
        "EnemyObject::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WeatherProp::Init(GameObjDesc *)",
    ),
    Ok(
        "Aquarang::Deinit(void)",
    ),
    Ok(
        "exception::~exception(void)",
    ),
    Ok(
        "Parser::SkipData(void)",
    ),
    Ok(
        "BurningTree::Message(MKMessage *)",
    ),
    Ok(
        "PauseScreen_Continue_LoadResources(void)",
    ),
    Ok(
        "GameCamera::CustomVectors_Init(void)",
    ),
    Ok(
        "FrontEnd_Deinit(void)",
    ),
    Ok(
        "Lenny::waitingLenny",
    ),
    Ok(
        "ModuleInfo<Wombat> virtual table",
    ),
    Ok(
        "Fluffy::FireIce(void)",
    ),
    Ok(
        "Elevator::GetDesc(void)",
    ),
    Ok(
        "BushPig::WalkTransition(void)",
    ),
    Ok(
        "AutoTargetStruct::Reset(void)",
    ),
    Ok(
        "Gem::SpawnDynamic(Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::EnemyCamera_Update(void)",
    ),
    Ok(
        "Boomerang::Reset(void)",
    ),
    Ok(
        "Teleporter::Draw(void)",
    ),
    Ok(
        "Spline::Smooth(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to PontoonRope_LoadResource(KromeIni *)",
    ),
    Ok(
        "CameraOverrideManager::DisableAndDeinitOverride(CameraOverride *, CameraDescriptor *, int)",
    ),
    Ok(
        "Reeds_Delete(ReedsStruct *)",
    ),
    Ok(
        "RenderTexture_LoadResources(void)",
    ),
    Ok(
        "BreakAndTurnData::SkidUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rufus::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<CaveBatObjective>::Init(void)",
    ),
    Ok(
        "LilNeddy_LoadResources(KromeIni *)",
    ),
    Ok(
        "Ty::IsJoyPadZero(void)",
    ),
    Ok(
        "PontoonRope::Update(void)",
    ),
    Ok(
        "Emu virtual table",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Furnace virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BonusPickup_Create(Vector *, BonusPickupType)",
    ),
    Ok(
        "ScrubTurkey::CatchEggInit(void)",
    ),
    Ok(
        "Gecko::GenerateRandomDirection(void)",
    ),
    Ok(
        "TumbleWeed::SetState(TumbleWeedStates)",
    ),
    Ok(
        "ModuleInfo<OpalCollector>::ConstructObject(void *)",
    ),
    Ok(
        "BushPig::MoveBull(void)",
    ),
    Ok(
        "Rufus::HitInit(void)",
    ),
    Ok(
        "Kaboomerang::UpdateFired(void)",
    ),
    Ok(
        "KromeIni::Warning(char *)",
    ),
    Ok(
        "LeafGrassDustChunkStruct::Draw(void)",
    ),
    Ok(
        "Farlapp virtual table",
    ),
    Ok(
        "ModuleInfo<Fly> virtual table",
    ),
    Ok(
        "RenderTexture_SetWaterOutput(char *)",
    ),
    Ok(
        "ModuleInfo<SignPost>::ConstructObject(void *)",
    ),
    Ok(
        "Emu::Reset(void)",
    ),
    Ok(
        "LODManager::InternalUpdate(Model *, int, float)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverride::CreateAllTypes(CameraOverrideLoadInfoBase *)",
    ),
    Ok(
        "GetThunderEgg(ThunderEggType)",
    ),
    Ok(
        "Ty::Message(MKMessage *)",
    ),
    Ok(
        "Lenny::Copy(Lenny *)",
    ),
    Ok(
        "TyBite::DeinitSuperBite(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::SetPreWarp(Vector *)",
    ),
    Ok(
        "Input_Update(void)",
    ),
    Ok(
        "Barracuda::WaypointTyIsFurthestFrom(void)",
    ),
    Ok(
        "Croc::ChaseInit(void)",
    ),
    Ok(
        "Skink::BlockInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PubeCrab::BlockRecoil(void)",
    ),
    Ok(
        "PubeCrab::IdleInit(void)",
    ),
    Ok(
        "GameObjectManager::GetObjectsInRange(GameObject **, int, Vector *, float, int)",
    ),
    Ok(
        "EnemyObject::GetTarget(void)",
    ),
    Ok(
        "A1FrillObjective_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<Lava>::ConstructObject(void *)",
    ),
    Ok(
        "Particle_WaterTrail_Create(ParticleSystem **, Vector *, Vector *)",
    ),
    Ok(
        "GameCameraPointsDelta::Init(float, float)",
    ),
    Ok(
        "global constructors keyed to Bat_LoadResources(KromeIni *)",
    ),
    Ok(
        "GameCamera::Collision_AdjustPoints(Vector *, Vector *, Vector *, unsigned int)",
    ),
    Ok(
        "EnemySpawner::GetType(void)",
    ),
    Ok(
        "WaterTankStruct::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "StaticProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Ty::GetMedium(void)",
    ),
    Ok(
        "MKGrass_SetPushAwayPos(Vector *, int)",
    ),
    Ok(
        "Ty::InitIdleStandAction(void)",
    ),
    Ok(
        "BonusPickup_FindSafeEndPos(Vector *, Vector *)",
    ),
    Ok(
        "HeadTurningInfo::Init(Vector)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RenderTexture_Init(void)",
    ),
    Ok(
        "ShadowBatStalactite::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bubble::pBubbleMat",
    ),
    Ok(
        "ScrubTurkey::LogicUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PE_Fire_Update(ParticleSystem *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Wombat::GiveUpInit(void)",
    ),
    Ok(
        "ShoalFish::Assign(CritterField2 *)",
    ),
    Ok(
        "ApproxMagXZSqaured(Vector *, Vector *)",
    ),
    Ok(
        "ThrowingStar::Draw(void)",
    ),
    Ok(
        "GameCamera::FakeWall_Update(void)",
    ),
    Ok(
        "CrikeyCanister::WaitForRespawn(void)",
    ),
    Ok(
        "DialogEffect::AttachProp(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowGun::Init(GameObjDesc *)",
    ),
    Ok(
        "__ptmf_type_info type_info node",
    ),
    Ok(
        "RhinoGround::PatrolArea(void)",
    ),
    Ok(
        "RhinoLog::Init(Matrix *, Vector *, Vector *, Rhino *)",
    ),
    Ok(
        "Speedboat::Riding(void)",
    ),
    Ok(
        "SpiderWeb virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "NinjaGecko::AlertInit(void)",
    ),
    Ok(
        "GameCamera::Fall_RaiseHeight_Init(void)",
    ),
    Ok(
        "UIText::Init(char *, char *)",
    ),
    Ok(
        "FinishLineStruct::Init(GameObjDesc *)",
    ),
    Ok(
        "bad_typeid::bad_typeid(void)",
    ),
    Ok(
        "ShadowBat::Dead(void)",
    ),
    Ok(
        "MKWater::drawType",
    ),
    Ok(
        "Talisman::Draw(void)",
    ),
    Ok(
        "PipePart::Init(GameObjDesc *)",
    ),
    Ok(
        "StopwatchStruct::LoadDone(void)",
    ),
    Ok(
        "Rotation::GetFrontVector(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Crikey::Init(GameObjDesc *)",
    ),
    Ok(
        "Font::DrawTextMorphing(char *, float, float, float, float, int, float, float, FontOffset *, FontMorph *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Steam::Reset(void)",
    ),
    Ok(
        "ModuleInfo<Croc>::ConstructObject(void *)",
    ),
    Ok(
        "Portal_ShowAll(void)",
    ),
    Ok(
        "TyVideo_Update(void)",
    ),
    Ok(
        "FrontEnd_LoadGame_Update(void)",
    ),
    Ok(
        "Rufus::HopTurn(bool)",
    ),
    Ok(
        "GreySmoke::Reset(void)",
    ),
    Ok(
        "ShoalFish::GetDesc(void)",
    ),
    Ok(
        "BushPig::SphereSweep(Vector *, Vector *, float, CollisionResult *)",
    ),
    Ok(
        "NinjaGecko::CrawlIdleInit(void)",
    ),
    Ok(
        "StaticProp::TyOn(void)",
    ),
    Ok(
        "Skink::nTailObj",
    ),
    Ok(
        "PickupCounter::Message(MKMessage *)",
    ),
    Ok(
        "BurningTree::Deinit(void)",
    ),
    Ok(
        "Burnable::Message(MKMessage *)",
    ),
    Ok(
        "ShadowBat::KissOfDeathEndInit(void)",
    ),
    Ok(
        "FireDrum::Init(GameObjDesc *)",
    ),
    Ok(
        "Emu::SetEmuToCaught(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "VU1Manager::UploadCodeMPG(unsigned int *, unsigned int *, int, int)",
    ),
    Ok(
        "ModuleInfo<KingFisher>::Init(void)",
    ),
    Ok(
        "Platform::EndUpdate(void)",
    ),
    Ok(
        "GameData::SetHasGoldenCog(GoldenCogType, bool)",
    ),
    Ok(
        "MorayEel::UpdateCollisions(void)",
    ),
    Ok(
        "CrateStruct::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Teleporter_LoadResources(KromeIni *)",
    ),
    Ok(
        "MusicalIcicle_LoadResources(KromeIni *)",
    ),
    Ok(
        "DialogEffect::Draw(void)",
    ),
    Ok(
        "Quadratic::GetClosestTime(Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::IceRunToStop(void)",
    ),
    Ok(
        "CrikeyChum::Init(GameObjDesc *)",
    ),
    Ok(
        "Dennis::Dennis_UpdateCommon(void)",
    ),
    Ok(
        "Spline_GetPosition(Vector *, Vector *, Vector *, Vector *, float)",
    ),
    Ok(
        "Tools_ApplyRotationToSubObject(Model *, int, Matrix *, int)",
    ),
    Ok(
        "FrillLizard::WalkToWaypointInit(void)",
    ),
    Ok(
        "GeckoDesc virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShatterableDescriptor virtual table",
    ),
    Ok(
        "Projectile::FireAtTarget(Vector *, Vector *)",
    ),
    Ok(
        "Target::FinalScale(void)",
    ),
    Ok(
        "Bilby_EnableCheatLines(bool)",
    ),
    Ok(
        "CameraOverrideFixedPoint_End(void)",
    ),
    Ok(
        "WaterSlideManager::ResolveBranches(void)",
    ),
    Ok(
        "GameCameraPoint::Init(Vector *)",
    ),
    Ok(
        "GameData::SetLives(int)",
    ),
    Ok(
        "Emu::CollideCheck(void)",
    ),
    Ok(
        "global constructors keyed to szRoofSnowModel",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Gecko> virtual table",
    ),
    Ok(
        "PathSegment::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Texture::CreateRenderTarget(char *, int, int, int)",
    ),
    Ok(
        "SoundProp::Message(MKMessage *)",
    ),
    Ok(
        "Roach::Init(GameObjDesc *)",
    ),
    Ok(
        "ModuleInfo<BlueTongueRockObjective> virtual table",
    ),
    Ok(
        "PauseScreen_OptionSound_Update(void)",
    ),
    Ok(
        "MKWaterProp::ConstructWeightedVertex(Water_TriStrip *, Vector *, WaterStripVertex *, WaterStripUV *, WaterStripColor *, WaterStripNormal *, int, float, Vector *)",
    ),
    Ok(
        "SharkCage::Debug(void)",
    ),
    Ok(
        "ScrubTurkey::ScrubTurkey_PreUpdate(void)",
    ),
    Ok(
        "ModuleInfo<Dennis> virtual table",
    ),
    Ok(
        "BadBoonie::BadBoonie_PostUpdate(void)",
    ),
    Ok(
        "Turtle_Deinit(void)",
    ),
    Ok(
        "Burnable::DrawFires(void)",
    ),
    Ok(
        "PauseScreen_OptionControls_Draw(void)",
    ),
    Ok(
        "GuideParticle::Init(GameObjDesc *)",
    ),
    Ok(
        "ModuleInfo<BoulderTrap>::Init(void)",
    ),
    Ok(
        "Ty::BounceOff(void)",
    ),
    Ok(
        "Ty::EventDogPaddle(char *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SynkerBlueTongue::GetDesc(void)",
    ),
    Ok(
        "TrapdoorSpider::ThrowDirtDeinit(void)",
    ),
    Ok(
        "PauseScreen_OptionScreen_Update(void)",
    ),
    Ok(
        "GCT_GetSafeHeight(unsigned int)",
    ),
    Ok(
        "Bilby_End(void)",
    ),
    Ok(
        "MKMemoryCard_EvalFileInfo(sceMcTblGetDir *, MKMemoryCardFileInfo *)",
    ),
    Ok(
        "Elle::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "TimeTrial_GetSavedPos(void)",
    ),
    Ok(
        "SnowRoo::IdleInit(void)",
    ),
    Ok(
        "Matrix::SetIdentity(void)",
    ),
    Ok(
        "Gem::CheckMagnetism(float)",
    ),
    Ok(
        "LedgePullUpData::InitHang(void)",
    ),
    Ok(
        "AnimatingPropDesc * descr_cast<AnimatingPropDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "ShadowBat::KissOfDeathInit(void)",
    ),
    Ok(
        "ModuleInfo<PontoonRope>::Init(void)",
    ),
    Ok(
        "ModuleInfo<BunyipElder>::ConstructObject(void *)",
    ),
    Ok(
        "DialogEffect::ShowProp(void)",
    ),
    Ok(
        "ShadowBat::KissOfDeathEndDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Aquarang::UpdateFired(void)",
    ),
    Ok(
        "Hud_Draw(void)",
    ),
    Ok(
        "BoomerangManager::UpdateAnimation(Model *)",
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_asinf",
        ),
    ),
    Ok(
        "FrillBike::LoadDone(void)",
    ),
    Ok(
        "Skink_LoadResources(KromeIni *)",
    ),
    Ok(
        "TrapdoorSpider::Death(void)",
    ),
    Ok(
        "Fluffy virtual table",
    ),
    Ok(
        "ModuleInfo<Crikey> virtual table",
    ),
    Ok(
        "OpalCollector::Closing(void)",
    ),
    Ok(
        "FallGuideProp_LoadResources(KromeIni *)",
    ),
    Ok(
        "_MKMem_Free(void *, char *, int)",
    ),
    Ok(
        "Sound_MusicGetResumePosition(void)",
    ),
    Ok(
        "Rhino::Run(void)",
    ),
    Ok(
        "WaterFall_Particle_Update(ParticleSystem *)",
    ),
    Ok(
        "CogsHud::Draw(void)",
    ),
    Ok(
        "GameData::GetGoldenCogCount(void)",
    ),
    Ok(
        "MKWaterProp::IsVisible(void)",
    ),
    Ok(
        "BlueTongueRockObjective virtual table",
    ),
    Ok(
        "Wake_Deinit(void)",
    ),
    Ok(
        "global constructors keyed to Crikey_LoadResources(KromeIni *)",
    ),
    Ok(
        "RockCollection::Reset(void)",
    ),
    Ok(
        "MusicalIcicleObjective virtual table",
    ),
    Ok(
        "SnowBall::AddSpin(void)",
    ),
    Ok(
        "ModuleInfo<Platform> virtual table",
    ),
    Ok(
        "UIText::Deinit(void)",
    ),
    Ok(
        "TimeTrial_Deinit(bool)",
    ),
    Ok(
        "Yabby::Message(MKMessage *)",
    ),
    Ok(
        "EnemySpawner::AddEnemy(void)",
    ),
    Ok(
        "TreasureChest_LoadResources(KromeIni *)",
    ),
    Ok(
        "Projectile::CheckForHit(void)",
    ),
    Ok(
        "SaveStates_GetGems(char *)",
    ),
    Ok(
        "Bilby_HideAll(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::pCurrentDma",
    ),
    Ok(
        "FrontEnd_Title_Draw(void)",
    ),
    Ok(
        "ShadowBatPipe::Steam(void)",
    ),
    Ok(
        "SpeedUpCrate_Update(void)",
    ),
    Ok(
        "Megarang virtual table",
    ),
    Ok(
        "UIImage::Draw(void)",
    ),
    Ok(
        "global constructors keyed to EnemySpawner::Deinit(void)",
    ),
    Ok(
        "Model_DeinitModule(void)",
    ),
    Ok(
        "MKWaterProp::IsQuadLowDetail(WaterStripHeader *, int)",
    ),
    Ok(
        "MKWaterType::CreateDebugMenus(DebugOptionMenu *)",
    ),
    Ok(
        "GalleryScreenData::Update(void)",
    ),
    Ok(
        "Blitter_Image::Draw(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::bPauseWater",
    ),
    Ok(
        "ParticleEmitter::Update(void)",
    ),
    Ok(
        "Wombat::UpdateTrail(void)",
    ),
    Ok(
        "Bull::DeadInit(void)",
    ),
    Ok(
        "Steam::Init(Vector *, BoundingVolume *, float)",
    ),
    Ok(
        "Hud_FOV(void)",
    ),
    Ok(
        "LearnToDiveData::SplatLandGetup(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "deregister_frame_info",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Neddy::FootStepEffect(Vector *, Vector *, float)",
    ),
    Ok(
        "TriggerSphereProp::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "AquarangProp::pGlow",
    ),
    Ok(
        "CollisionObject::Teleport(Vector *, float, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model::Dump(void)",
    ),
    Ok(
        "Boulder::SetUpBounce(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<ShadowBatSonar>::ConstructObject(void *)",
    ),
    Ok(
        "Lava::DeinitModule(void)",
    ),
    Ok(
        "Gate::AnimatingState(int)",
    ),
    Ok(
        "GameSubStateFSM::InGameUpdate(void)",
    ),
    Ok(
        "ModuleInfo<Skink>::ConstructObject(void *)",
    ),
    Ok(
        "GameCamera_UseCustomVectors(bool, Vector *, Vector *, float *)",
    ),
    Ok(
        "Blitter_UntexturedImage::Draw(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::TakeAwayHealth(void)",
    ),
    Ok(
        "GameObject::Deallocate(GameObject *)",
    ),
    Err(
        InvalidNamespaceOnNamespacedGlobal(
            "GLOBAL_",
        ),
    ),
    Ok(
        "LetterBox_Activate(bool, bool)",
    ),
    Ok(
        "RedButton::Init(GameObjDesc *)",
    ),
    Ok(
        "Material::CreateFromImage(char *, Image *)",
    ),
    Ok(
        "OpalCollector::vEffectEndApex",
    ),
    Ok(
        "SawDust::pSawDustMat",
    ),
    Ok(
        "AntHill::Init(GameObjDesc *)",
    ),
    Ok(
        "SpiderCrate virtual table",
    ),
    Ok(
        "DDASession::bDrawEnabled",
    ),
    Ok(
        "GameObjDesc::SetUpMem(unsigned char *)",
    ),
    Ok(
        "global constructors keyed to WeatherProp_LoadResources(KromeIni *)",
    ),
    Ok(
        "ShadowBat::Init(GameObjDesc *)",
    ),
    Ok(
        "GameCamera::UseEnemyCamera(bool)",
    ),
    Ok(
        "Particle_WaterMist_Create(ParticleSystem **, Vector *)",
    ),
    Ok(
        "MKPackage_SetExclusionMask(char *)",
    ),
    Ok(
        "Gecko::Assign(CritterField2 *)",
    ),
    Ok(
        "IceCoolant::Update(void)",
    ),
    Ok(
        "terminate(void)",
    ),
    Ok(
        "View::SetCameraMatrixLookAt(Matrix *, Vector *, Vector *)",
    ),
    Ok(
        "Bubble_LoadResources(void)",
    ),
    Ok(
        "FallGuideProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Particle_Fire_CreateExplosion(Vector *, float)",
    ),
    Ok(
        "Particle_Special_Init(ParticleSystem **, Vector *, BoundingVolume *)",
    ),
    Ok(
        "GameData_Save(char *)",
    ),
    Ok(
        "Collision_SweepSphereCollide(Vector *, Vector *, float, CollisionResult *, CollisionMode, int)",
    ),
    Ok(
        "MiniGameB1_Init(void)",
    ),
    Ok(
        "FrillBike::RamInit(void)",
    ),
    Ok(
        "Eel::DeathDeinit(void)",
    ),
    Ok(
        "OpalCollector_LoadResources(KromeIni *)",
    ),
    Ok(
        "GameCamera::GetEnemyCameraTarget(void)",
    ),
    Ok(
        "MKMemoryCard_GetStatus(int)",
    ),
    Ok(
        "GetPrevRang(BoomerangType)",
    ),
    Ok(
        "__si_type_info::__si_type_info(char const *, __user_type_info const &)",
    ),
    Ok(
        "WhirlyWind::Draw(void)",
    ),
    Ok(
        "ScriptProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Coconut::Update(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "pack_f",
        ),
    ),
    Ok(
        "OpalCollector::fEffectStart",
    ),
    Ok(
        "DiveRing::Update(void)",
    ),
    Ok(
        "BurningBat::Reset(void)",
    ),
    Ok(
        "Vector::NormaliseRot(Vector *)",
    ),
    Ok(
        "BushPig::InitRun(void)",
    ),
    Ok(
        "CameraOverride::WaypointOverride_Update(GCT_WaypointPlaneManager *)",
    ),
    Ok(
        "MKSceneManager::AddTerrainModel(Model *, int, float)",
    ),
    Ok(
        "View::SetFogColour(unsigned int)",
    ),
    Ok(
        "PathFindingObject::Update(Vector *, Vector *)",
    ),
    Ok(
        "VU0Manager::LoadCode(unsigned int *, unsigned int *)",
    ),
    Ok(
        "MKGrassGen::Init(Model *, int, MKGrassType *, int)",
    ),
    Ok(
        "ModuleInfo<TumbleWeed>::Init(void)",
    ),
    Ok(
        "Model::EnableOnlySubObject(int, bool)",
    ),
    Ok(
        "ExtendedAnalogControl::Init(float, float)",
    ),
    Ok(
        "Dma::AddGif_AD_PRMODE(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "Croc::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "ModuleInfo<Cattle>::ConstructObject(void *)",
    ),
    Ok(
        "Elevator::ShudderState(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<SnowBallAttack>::ConstructObject(void *)",
    ),
    Ok(
        "Tools_RandomVector(Vector *, Vector *, Vector *)",
    ),
    Ok(
        "ModuleInfo<SpeedboatObjective>::ConstructObject(void *)",
    ),
    Ok(
        "Muddie::AlertSpin(bool)",
    ),
    Ok(
        "CaveBat::RunAwayInit(void)",
    ),
    Ok(
        "SnowPile_Activate(void)",
    ),
    Ok(
        "BoomerangWeapon::DoFire(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillLizard::AttackRunInit(void)",
    ),
    Ok(
        "Shark::Stunned(void)",
    ),
    Ok(
        "MKWaterType::PreCalcPerFrameData(void)",
    ),
    Ok(
        "BurnerObjective::Message(MKMessage *)",
    ),
    Ok(
        "ParticleSystem::bDrawBoundingBox",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Farlapp::LoadDone(void)",
    ),
    Ok(
        "ModuleInfo<LilNeddy> virtual table",
    ),
    Ok(
        "WaterSlide_Line(KromeIniLine *)",
    ),
    Err(
        InvalidSpecialMethod(
            "unwinding_cleanup",
        ),
    ),
    Ok(
        "FrontEnd_Extras_LoadResources(void)",
    ),
    Ok(
        "ModuleInfo<TimeAttack>::ConstructObject(void *)",
    ),
    Ok(
        "Rufus::AlertInit(void)",
    ),
    Ok(
        "BushPig::Claim(void)",
    ),
    Ok(
        "GameObjDesc::Load(KromeIni *)",
    ),
    Ok(
        "BoomerangManager::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "__array_type_info type_info node",
    ),
    Ok(
        "ZMax(Vector *, float)",
    ),
    Ok(
        "PauseScreen_OptionSound_Deinit(void)",
    ),
    Ok(
        "Frog::GetDesc(void)",
    ),
    Ok(
        "System_CreateZRequest(void)",
    ),
    Ok(
        "ModuleInfo<PerimeterCheckObjective> virtual table",
    ),
    Ok(
        "MusicalIcicleObjective::Message(MKMessage *)",
    ),
    Ok(
        "SignPost::LoadDone(void)",
    ),
    Ok(
        "Emu::InitStartled(void)",
    ),
    Ok(
        "__attr_type_info type_info function",
    ),
    Ok(
        "ShadowBatPipe_GetDescriptor(void)",
    ),
    Ok(
        "MKSceneManager::AddStaticProp(MKProp *, int)",
    ),
    Ok(
        "ModuleInfo<Ibis>::Init(void)",
    ),
    Ok(
        "ProgressBar::SetProgress(int)",
    ),
    Ok(
        "HudCounter::Update(void)",
    ),
    Ok(
        "FrillLizard::EvadeBiteInit(void)",
    ),
    Ok(
        "TurtleStruct::SelectRandomTarget(void)",
    ),
    Ok(
        "GameCamera::JumpAdjustTarget_Init(void)",
    ),
    Ok(
        "Boulder::GetPos(void)",
    ),
    Ok(
        "MKRumble_Update(void)",
    ),
    Ok(
        "GameCamera_UseFallDiveCamera(bool)",
    ),
    Ok(
        "SMTree::Init(int)",
    ),
    Ok(
        "Flame_CustomUpdate(ParticleSystem *)",
    ),
    Ok(
        "EnemyObject::DeactivateAndKillOff(void)",
    ),
    Ok(
        "Hud_ShowOpals(void)",
    ),
    Ok(
        "Model::Purge(void)",
    ),
    Ok(
        "AuroraKid::Init(GameObjDesc *)",
    ),
    Ok(
        "EnemySpawner::GetEnemyFromModel(Model *)",
    ),
    Ok(
        "UpperChar(char)",
    ),
    Err(
        InvalidSpecialMethod(
            "do_global_dtors",
        ),
    ),
    Ok(
        "RockProjectile::IsPickingUp(void)",
    ),
    Ok(
        "ModuleInfo<AquarangProp> virtual table",
    ),
    Ok(
        "Boomerang_LoadResources(KromeIni *)",
    ),
    Ok(
        "SnowRoo::DodgeInit(void)",
    ),
    Ok(
        "WaterPipe::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::debugNumLowDetailQuads",
    ),
    Ok(
        "FootEffect::SpawnSnowEffect(Vector *, Vector *, BoundingVolume *, float, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model::GetRefPointRadius(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverride::FixedPoint_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Texture::FlushUploadQueue(void)",
    ),
    Ok(
        "FriendDescriptor * descr_cast<FriendDescriptor *>(MKPropDescriptor *)",
    ),
    Ok(
        "ModuleInfo<RingoArm>::Init(void)",
    ),
    Ok(
        "ModuleInfo<DiveRing>::Init(void)",
    ),
    Ok(
        "BlitterCritterField::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "type_info::name(void) const",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Camera::keyMapDS",
    ),
    Ok(
        "PubeCrab::CheckEvents(void)",
    ),
    Ok(
        "TyParticleManager::SpawnAnts(Vector *, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "__func_type_info type_info function",
    ),
    Ok(
        "StaticFXProp::GetDesc(void)",
    ),
    Ok(
        "MKSceneManager::RemoveProp(MKProp *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_ChangeLevel_Update(void)",
    ),
    Ok(
        "ModuleInfo<WaterPipeObjective>::Init(void)",
    ),
    Ok(
        "MKMemoryCard_Prepare(int)",
    ),
    Ok(
        "PauseScreen_Deinit(void)",
    ),
    Ok(
        "WobbleTexture::SetUpGrid(Vector *, float, float, float)",
    ),
    Ok(
        "Spider_Update(void)",
    ),
    Ok(
        "Furnace::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Path_Manager_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ThinIceProp::Message(MKMessage *)",
    ),
    Ok(
        "StopwatchStruct::Idle(void)",
    ),
    Ok(
        "GameCamera::Fluffy_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrontEnd_MainMenu_OnExit(void)",
    ),
    Ok(
        "SynkerFrog virtual table",
    ),
    Ok(
        "Teleporter::Update(void)",
    ),
    Ok(
        "SnowPile::Init(GameObjDesc *)",
    ),
    Ok(
        "Speedboat::UpdateBarrelFree(void)",
    ),
    Ok(
        "GameCamera::UseNormalCamera(void)",
    ),
    Ok(
        "BlitterCritterFieldDesc virtual table",
    ),
    Ok(
        "WaterfallPointStruct::Deinit(void)",
    ),
    Ok(
        "Gem_ShowAll(void)",
    ),
    Ok(
        "type_info type_info function",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "IceRamp::Update(void)",
    ),
    Ok(
        "YabbyStalactite::Init(GameObjDesc *)",
    ),
    Ok(
        "Leech::StickToHead(void)",
    ),
    Ok(
        "View::OrthoBegin(void)",
    ),
    Ok(
        "Flamerang::ModifyRangeInFlight(float)",
    ),
    Ok(
        "InvisiCrate::Draw(void)",
    ),
    Ok(
        "IceRamp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "GameCameraState::Update(GameCamera *)",
    ),
    Ok(
        "ModuleInfo<StaticFXProp> virtual table",
    ),
    Ok(
        "MKShadow_CaptureZBuffer(void)",
    ),
    Ok(
        "ModuleInfo<Bouncer>::Init(void)",
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "hrow_type_match_rtti",
        ),
    ),
    Ok(
        "Matrix::Multiply4x4(Matrix *, Matrix *)",
    ),
    Ok(
        "FireworksCrate::StartDropping(void)",
    ),
    Ok(
        "Lava::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StreamBuffer::Init(int)",
    ),
    Ok(
        "MKWaterManager_UpdateFillState(void)",
    ),
    Ok(
        "global constructors keyed to Lenny::currentLenny",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterVolume::LoadDone(void)",
    ),
    Ok(
        "Dma::AddGif_AD_MIPTBP2_1(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "RainbowEffect::pRainbowMat",
    ),
    Ok(
        "Fluffy::IdleInit(void)",
    ),
    Ok(
        "EnemyObject::SpawnBiteChomps(int, float)",
    ),
    Ok(
        "Generator::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "TimeTrial_Finished(void)",
    ),
    Ok(
        "Bull_IsActive(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::debugNumHighDetailStrips",
    ),
    Ok(
        "ModuleInfo<Fluffy> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "AnimatingPropDesc::Init(ModuleInfoBase *, char *, char *, int, int, Tools_AnimEntry *, int, Tools_AnimEvent *, int, bool, unsigned short)",
    ),
    Ok(
        "TyParticleManager::SpawnFootPrint(FootPrintTypes, Vector *, Vector *, Rotation *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Neddy::WalkInit(void)",
    ),
    Ok(
        "Hud_DrawCogs(void)",
    ),
    Ok(
        "Dennis::ReachedTarget_Init(void)",
    ),
    Ok(
        "Sentinel::WatchInit(void)",
    ),
    Ok(
        "Matrix::Translate(Vector *)",
    ),
    Ok(
        "ModuleInfo<Coconut>::Init(void)",
    ),
    Ok(
        "ModuleInfo<Megarang>::Init(void)",
    ),
    Err(
        UnrecognizedSpecialMethod(
            "CTOR_LIST",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LevelObjective::LoadDone(void)",
    ),
    Ok(
        "File_DeinitModule(void)",
    ),
    Ok(
        "ModuleInfo<IceCube>::Init(void)",
    ),
    Ok(
        "Model::GetSubObjectIndex(char *)",
    ),
    Ok(
        "Ty::PreWarpDraw(void)",
    ),
    Ok(
        "TyFlyField virtual table",
    ),
    Ok(
        "ZoneBlockerProp_LoadResources(KromeIni *)",
    ),
    Ok(
        "Projectile::Message(MKMessage *)",
    ),
    Ok(
        "Ty::SetFallGuideInfluence(Vector *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterManager_Calc2DNormal(float, float, float, float, float, float, float *, float *)",
    ),
    Ok(
        "Explosion::Update(void)",
    ),
    Ok(
        "GameCamera::Collision_ArePointsSafe(Vector *, Vector *, Vector *)",
    ),
    Ok(
        "global constructors keyed to Wombat_LoadResources(KromeIni *)",
    ),
    Ok(
        "LilNeddy::ChargeDeinit(void)",
    ),
    Ok(
        "ModuleInfo<TurningPlatform>::ConstructObject(void *)",
    ),
    Ok(
        "SpecialPickupStruct::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "set_unexpected(void (*)(void))",
    ),
    Ok(
        "PE_Portal_LoadResources(void)",
    ),
    Ok(
        "Reeds_Update(void)",
    ),
    Ok(
        "Farlapp::Idle(void)",
    ),
    Ok(
        "SpeedboatObjective::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Hud_DrawBilbies(void)",
    ),
    Ok(
        "RenderTexture_SetWaterLow(char *, float)",
    ),
    Ok(
        "Checkpoint_LoadResources(KromeIni *)",
    ),
    Ok(
        "WaterSlideData::InitDuck(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Leech::Detach(void)",
    ),
    Ok(
        "Emu::InitFight(void)",
    ),
    Ok(
        "ModuleInfoBase::Reset(void)",
    ),
    Ok(
        "Bull::CheckForLineOfSight(void)",
    ),
    Ok(
        "Lenny::CheckAnimEvents(void)",
    ),
    Ok(
        "UIButtonGroup::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<SpinningLog>::Init(void)",
    ),
    Ok(
        "E4Door_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Input_Vibrate(InputDevices, int, bool)",
    ),
    Ok(
        "Generator::Startup(void)",
    ),
    Ok(
        "Ty::EventFindItem(char *)",
    ),
    Ok(
        "Lightning::Draw(View *)",
    ),
    Ok(
        "ModuleInfo<ShoalFish>::Init(void)",
    ),
    Ok(
        "InvisiCrate::Init(GameObjDesc *)",
    ),
    Ok(
        "MKGrass_DeinitTypes(void)",
    ),
    Ok(
        "TurningPlatform::Message(MKMessage *)",
    ),
    Ok(
        "WaterfallStruct::Init(Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "RainbowEffect::Update(float)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::Animate(float)",
    ),
    Ok(
        "Animation::GetNodeWorldPosition(int, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKShadow_Animated::AddVert(MKShadowVert *)",
    ),
    Ok(
        "ScreenData::FadeInOut(int, int, int)",
    ),
    Ok(
        "EnemyObject::SetState(int, bool)",
    ),
    Ok(
        "UIButtonGroup::SetSelection(int)",
    ),
    Ok(
        "GameCamera_UseLaunchCamera(bool)",
    ),
    Ok(
        "MKProp::LoadDone(void)",
    ),
    Ok(
        "Geyser::DoShakeFX(float)",
    ),
    Ok(
        "BushPig::DeinitHitAntHill(void)",
    ),
    Ok(
        "Lasso::ThrowLasso(void)",
    ),
    Ok(
        "LevelData::ShowGameInfo(LevelNumber)",
    ),
    Ok(
        "GameCamera_OverrideSpiral_Add(CameraOverrideSpiralLoadInfo *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpyEgg::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Teleport::envelope",
    ),
    Ok(
        "FrillBike::SpinPropeller(void)",
    ),
    Ok(
        "MKMemoryCard_GetInfo(int, int *, int *, int *, int *)",
    ),
    Ok(
        "GuideBarrel_LoadResources(KromeIni *)",
    ),
    Ok(
        "_GLOBAL_$F$terminate(void)",
    ),
    Ok(
        "Rhino::Move(float, bool)",
    ),
    Ok(
        "Lasso::DeinitLassoCaughtFrillBike(void)",
    ),
    Ok(
        "Bunyip_Add(Vector *, Vector *)",
    ),
    Ok(
        "Skink::PatrolInit(void)",
    ),
    Ok(
        "PauseScreen_GameTotals_Deinit(void)",
    ),
    Ok(
        "Material::CreateFromMem(char *, void *)",
    ),
    Ok(
        "MKWaterProp::Deinit(void)",
    ),
    Ok(
        "RenderTexture_ResetWaterBlendValues(void)",
    ),
    Ok(
        "Texture::Find(char *)",
    ),
    Ok(
        "Yabby::JumpTurnInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bull::Victory(void)",
    ),
    Ok(
        "SeaMine::Explode(void)",
    ),
    Ok(
        "AnimEntry::Init(MKAnimScript *, int)",
    ),
    Ok(
        "Fluffy::FireSnowBallInit(void)",
    ),
    Ok(
        "Crikey::SwimToChumInit(void)",
    ),
    Ok(
        "GCT_WaypointPlaneManager::GetTimeAlongPath(Vector *, int)",
    ),
    Ok(
        "Teleport::Create(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongue::Message(MKMessage *)",
    ),
    Ok(
        "MiniGameObjective::Activate(void)",
    ),
    Ok(
        "ModuleInfo<BossCass>::ConstructObject(void *)",
    ),
    Ok(
        "FrillBike::Message(MKMessage *)",
    ),
    Ok(
        "SnowSpider::ChaseDeinit(void)",
    ),
    Ok(
        "Skink::GetRefPointPoint(int)",
    ),
    Ok(
        "PauseScreen_GotoState(PauseScreen_State, bool)",
    ),
    Ok(
        "FrillLizard::LightTree(void)",
    ),
    Ok(
        "Shadow::Draw(void)",
    ),
    Ok(
        "Hud::Reset(void)",
    ),
    Ok(
        "WhirlyWind::UpdateDustPos(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "OpalCollector::Reset(void)",
    ),
    Ok(
        "BlueTongueThrower virtual table",
    ),
    Ok(
        "BubbleSpawner::Update(void)",
    ),
    Ok(
        "global constructors keyed to GuideBarrel_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Debug_SetFont(Font *)",
    ),
    Ok(
        "DialogEffect::Init(void)",
    ),
    Ok(
        "ModuleInfo<FireworksCrate>::Init(void)",
    ),
    Ok(
        "Ty::Move(void)",
    ),
    Ok(
        "global constructors keyed to Jeep_LoadResources(KromeIni *)",
    ),
    Ok(
        "global constructors keyed to ty",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lenny::SkidStopInit(void)",
    ),
    Ok(
        "Tick::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "ModuleInfo<Teleporter> virtual table",
    ),
    Ok(
        "Ty::InitSwimAttack(void)",
    ),
    Ok(
        "Dma::AddGifTag_Image(unsigned long, unsigned long)",
    ),
    Ok(
        "RainInit::CreateDebugMenus(DebugOptionMenu *)",
    ),
    Ok(
        "FrontEnd_Gallery_OnEnter(void)",
    ),
    Ok(
        "Particle_ResetASystem(ParticleSystem **)",
    ),
    Ok(
        "MKWaterManager_FindWaterType(char *)",
    ),
    Ok(
        "MKWater::LoadMaterials(void)",
    ),
    Ok(
        "GameData::GetTotalFreeBilbyCount(void)",
    ),
    Ok(
        "ScubaFrill::Flinch(void)",
    ),
    Ok(
        "Ty::UpdateAnimation(void)",
    ),
    Ok(
        "__func_type_info virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::Push(void)",
    ),
    Ok(
        "Rhino::Whomp(void)",
    ),
    Ok(
        "Bull::UpdateShockWave(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tools_GetCollideHeight(Vector *, Vector *, bool *, float)",
    ),
    Ok(
        "Ty::ColorTyFromGround(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CableCar::LoadDone(void)",
    ),
    Ok(
        "type_info type_info node",
    ),
    Ok(
        "Target::Update(void)",
    ),
    Ok(
        "EnemyObject::UpdateMovement(void)",
    ),
    Ok(
        "KenOath::IdleInit(void)",
    ),
    Ok(
        "SmallCrab::UpdateTargetForwardVector(void)",
    ),
    Ok(
        "__is_pointer(void *)",
    ),
    Ok(
        "GameCamera::Glide_Init(void)",
    ),
    Ok(
        "DialogEffect::ParticlesDeinit(void)",
    ),
    Ok(
        "global constructors keyed to Speedboat::propNode",
    ),
    Ok(
        "NormaliseAngle(float)",
    ),
    Ok(
        "SMTree::LinkUpRow(int, int, int)",
    ),
    Ok(
        "FireDrum_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MiniGameObjective::Failure(void)",
    ),
    Ok(
        "FaderObject::GetFadePercentage(void)",
    ),
    Ok(
        "GameCamera_ResetView(void)",
    ),
    Ok(
        "WaterfallStreamStruct::GetTU(Vector *, Vector *, float *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Wombat::Init(GameObjDesc *)",
    ),
    Ok(
        "MakingOfVideo_Update(void)",
    ),
    Ok(
        "ModuleInfo<MobilePlatform>::Init(void)",
    ),
    Ok(
        "TyFSM::WaterSurfaceState(int)",
    ),
    Ok(
        "Model::Create(char *, char *)",
    ),
    Ok(
        "global constructors keyed to DDACheckpoint_LoadResources(KromeIni *)",
    ),
    Ok(
        "TrapdoorSpider::GenerateRandomTargetPos(Vector const &, float)",
    ),
    Ok(
        "AutoVisible::AddToList(Vector *, Model *)",
    ),
    Ok(
        "Ty::UnderWaterKnockBackInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "OpalCollector::Opening(void)",
    ),
    Ok(
        "ModuleInfo<BeerCan>::ConstructObject(void *)",
    ),
    Ok(
        "KoalaKid::Sigh(void)",
    ),
    Ok(
        "Boulder::AddShadow(Vector *, float, float)",
    ),
    Ok(
        "Tools_EnableWideScreen(View *, bool)",
    ),
    Ok(
        "View::UseFog(void)",
    ),
    Ok(
        "Muddie::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "LilNeddy::Charge(void)",
    ),
    Ok(
        "BurningBat::Update(Skink *)",
    ),
    Ok(
        "BreakAndTurnData::states",
    ),
    Ok(
        "WhirlyWind_LoadResources(KromeIni *)",
    ),
    Ok(
        "Lasso::DeinitLassoPullIn(void)",
    ),
    Ok(
        "CameraOverrideRail_End(void)",
    ),
    Ok(
        "Megarang::HitWorld(Vector *, int)",
    ),
    Ok(
        "GuideBarrel::Init(GameObjDesc *)",
    ),
    Ok(
        "AntHill_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<Muddie>::Init(void)",
    ),
    Ok(
        "Croc::BackOff(void)",
    ),
    Ok(
        "ModuleInfo<C3Actor>::Init(void)",
    ),
    Ok(
        "DropShadow::Init(Vector *, Vector *, Vector *, Vector *, float, bool)",
    ),
    Ok(
        "global constructors keyed to pWaterMat",
    ),
    Ok(
        "Animation::SetAnim(AnimDef *, float, unsigned int)",
    ),
    Ok(
        "PtrList<MKWater>::Destroy(MKWater *)",
    ),
    Ok(
        "_FindLowestPipe(float)",
    ),
    Ok(
        "ShadowBat::SonarAttackInit(void)",
    ),
    Ok(
        "ShadowBatStalactite::Drop(Vector *)",
    ),
    Ok(
        "Sound_GetMasterVolume(float *, float *)",
    ),
    Ok(
        "PauseScreen_Options_Init(void)",
    ),
    Ok(
        "ParticleSystemManager::Deinit(void)",
    ),
    Ok(
        "__builtin_type_info virtual table",
    ),
    Ok(
        "Doomerang::Fire(Vector *, Vector *)",
    ),
    Ok(
        "Ty::PreWarp(void)",
    ),
    Ok(
        "Bird::FindPointState(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpikeyIce_LoadResources(void)",
    ),
    Ok(
        "MKWaterProp::CalcHeight(float, float, Vector *)",
    ),
    Ok(
        "Timer_LogNow(char *)",
    ),
    Ok(
        "ModelExplorer_P2::PrimeMaterial(void)",
    ),
    Ok(
        "Skink::Idle(void)",
    ),
    Ok(
        "ModuleInfo<ScrubTurkey>::Init(void)",
    ),
    Ok(
        "ModuleInfo<IceRamp>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Zappyrang> virtual table",
    ),
    Ok(
        "ModuleInfo<PontoonRope>::ConstructObject(void *)",
    ),
    Ok(
        "Range_Update(void)",
    ),
    Ok(
        "Ty::SetKickJump(Vector *, float)",
    ),
    Ok(
        "BunyipElder::Reset(void)",
    ),
    Ok(
        "KingFisher_LoadResources(void)",
    ),
    Ok(
        "FrillLizard::AlertInit(void)",
    ),
    Ok(
        "Bilby_Draw(void)",
    ),
    Ok(
        "Rufus::Idle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Vector::ApplyMatrixW(Vector *, Matrix *)",
    ),
    Ok(
        "Barracuda::UpdateMovement(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tick::SuckInit(void)",
    ),
    Ok(
        "ShadowBat virtual table",
    ),
    Ok(
        "TrapdoorSpider::ChaseInit(void)",
    ),
    Ok(
        "Ty::SharkCageDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bull::Dead(void)",
    ),
    Ok(
        "EnemyObject::CheckForTy(void)",
    ),
    Ok(
        "CameraOverride::Reset(void)",
    ),
    Ok(
        "ShadowBatPipe::GetFallingPos(void)",
    ),
    Ok(
        "KoalaKid::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "Boulder::InitFinal(void)",
    ),
    Ok(
        "GameCamera::FirstPerson_Deinit(void)",
    ),
    Ok(
        "RingoArm::Idle(void)",
    ),
    Ok(
        "Drum::LoadDone(void)",
    ),
    Ok(
        "CrateStruct::Burn(void)",
    ),
    Ok(
        "ScrubTurkey::AlertPause_Init(void)",
    ),
    Ok(
        "FrillLizard::Reset(void)",
    ),
    Ok(
        "IceCoolant::SecondHitZap(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SoundEventHelper::Stop(void)",
    ),
    Ok(
        "Collision_RayCollideDynamicModel(Vector *, Vector *, CollisionResult *, Model *, int)",
    ),
    Ok(
        "Boulder::UpdateFinal(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FinishLineStruct::Deinit(void)",
    ),
    Ok(
        "Material::Update(void)",
    ),
    Ok(
        "MKWater::LoadTemplate(char *)",
    ),
    Ok(
        "MiniGameObjective::Init(GameObjDesc *)",
    ),
    Ok(
        "Cattle::SharedUpdate(void)",
    ),
    Ok(
        "global constructors keyed to GateDescriptor::Load(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<CrikeyChum>::ConstructObject(void *)",
    ),
    Ok(
        "MKShadow_BlitBuffer(int, int)",
    ),
    Ok(
        "ModuleInfo<Pontoon>::Init(void)",
    ),
    Ok(
        "Lasso::LassoCaughtWaterTank(void)",
    ),
    Ok(
        "ModuleInfo<DropPontoon>::Init(void)",
    ),
    Ok(
        "Waterfall_RenderWater(void)",
    ),
    Ok(
        "Model_UnpackTemplate(ModelTemplate *)",
    ),
    Ok(
        "FrillLizard::WalkHomeInit(void)",
    ),
    Ok(
        "GameCamera::UseWaterSlideCamera(bool)",
    ),
    Ok(
        "MKShadow_Destroy(MKShadow *)",
    ),
    Ok(
        "Reeds_Deinit(void)",
    ),
    Ok(
        "Neddy::FallInit(void)",
    ),
    Ok(
        "ModuleInfo<LavaBurner> virtual table",
    ),
    Ok(
        "WaterSlideManager::Enter(Vector *)",
    ),
    Ok(
        "Speedboat::barrelNode",
    ),
    Ok(
        "SoundBank_StopMusic(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Eel::ChaseDeinit(void)",
    ),
    Ok(
        "Elevator::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "StopwatchStruct::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<Ringo>::ConstructObject(void *)",
    ),
    Ok(
        "NodeOverride_SetState(NodeOverride *, Vector *)",
    ),
    Ok(
        "SignPost_HideAll(void)",
    ),
    Ok(
        "Ty::WaterBubbleUpdate(int)",
    ),
    Ok(
        "Ty::AddUnderwaterDust(void)",
    ),
    Ok(
        "CameraOverride::Destroy(void)",
    ),
    Ok(
        "SnowBallAttack::CheckForHit(void)",
    ),
    Ok(
        "EnemyObject::DrawDropShadow(float)",
    ),
    Ok(
        "Gecko::UpdateLogic(void)",
    ),
    Ok(
        "CameraOverrideHigh_End(void)",
    ),
    Ok(
        "Ty::DeinitBite(void)",
    ),
    Err(
        InvalidNamespaceOnNamespacedGlobal(
            "GLOBAL_",
        ),
    ),
    Ok(
        "ShadowBatPipe::Reset(void)",
    ),
    Ok(
        "Range_ModelSetAlpha(Model *, int, float, float, float, float, int)",
    ),
    Ok(
        "View::SetRenderTarget(Material *, Material *)",
    ),
    Ok(
        "PauseScreen_ChangeLevel_Draw(void)",
    ),
    Ok(
        "Sentinel::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "FireDrum::LoadDone(void)",
    ),
    Ok(
        "Ty::SetFindItem(Vector *, SpecialPickupStruct *)",
    ),
    Ok(
        "Tools_ApplyFrictionAndGravity(Vector *, Vector *, Vector *, float)",
    ),
    Ok(
        "Dma::Deinit(void)",
    ),
    Ok(
        "BlueTongueThrower::Taunt(void)",
    ),
    Ok(
        "Generator::Init(GameObjDesc *)",
    ),
    Ok(
        "LevelObjective::pCurObjective",
    ),
    Ok(
        "Matrix::InverseSimple(Matrix *)",
    ),
    Ok(
        "ModuleInfo<BurningJunk> virtual table",
    ),
    Ok(
        "GCT_LoadVector(KromeIniLine *, char *, Vector *)",
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_sbrk_base",
        ),
    ),
    Ok(
        "BlueTongueThrower::Idle(void)",
    ),
    Ok(
        "Model::SetPosition(Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Neddy::UpdateArmour(void)",
    ),
    Ok(
        "CritterField_Register2(CritterField2Desc *, float)",
    ),
    Ok(
        "WaterfallStreamStruct::FillIn(int, int)",
    ),
    Ok(
        "FireworksCrate::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBatValve::Reset(void)",
    ),
    Ok(
        "DialogEffect::AttachPropInit(void)",
    ),
    Ok(
        "Bunyip_IsLastEventGroundHit(void)",
    ),
    Ok(
        "Roach::Reset(void)",
    ),
    Ok(
        "Gem_ClearParticleSystems(void)",
    ),
    Ok(
        "global constructors keyed to FallGuideProp_LoadResources(KromeIni *)",
    ),
    Ok(
        "EnemyWaypoints::Deinit(void)",
    ),
    Ok(
        "PubeCrab::Reset(void)",
    ),
    Ok(
        "ModuleInfo<Frostyrang>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::debugNumSubObjectsClipped",
    ),
    Ok(
        "Neddy::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::SetDistanceType(CameraDistanceType, float)",
    ),
    Ok(
        "ModuleInfo<Generator> virtual table",
    ),
    Ok(
        "HeatFlare_Deinit(void)",
    ),
    Ok(
        "Texture::initialised",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Speedboat::InitCrash(void)",
    ),
    Ok(
        "PontoonRope::Message(MKMessage *)",
    ),
    Ok(
        "SnowSpider_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "View::VisibilityTest(BoundingVolume *)",
    ),
    Ok(
        "CameraOverrideManager::InitManager(int)",
    ),
    Ok(
        "Ty::LedgePullUpTransition(void)",
    ),
    Ok(
        "View::SetFogIntensity(float, float)",
    ),
    Ok(
        "Rain::Draw(View *, bool)",
    ),
    Ok(
        "FireDrum::Reset(void)",
    ),
    Ok(
        "ReedsStruct::Idle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rufus::AttackPattern1Deinit(void)",
    ),
    Ok(
        "Dma::AddGif_AD_FRAME_2(unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "Dma::AddGif_AD_TEX0_2(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TrapdoorSpider::Reset(void)",
    ),
    Ok(
        "short type_info node",
    ),
    Ok(
        "KenOath::Init(GameObjDesc *)",
    ),
    Ok(
        "TrapdoorSpider::GetDirtSourcePos(void)",
    ),
    Ok(
        "Spear::Deinit(void)",
    ),
    Ok(
        "Croc::LookOutInit(void)",
    ),
    Ok(
        "Ty::TryChangeState(bool, HeroActorState)",
    ),
    Ok(
        "MiniGame_C2_GetSnowGunPos(void)",
    ),
    Ok(
        "ModuleInfo<FallGuideProp> virtual table",
    ),
    Ok(
        "DialogPlayer::SceneInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TyBite::Deinit(void)",
    ),
    Ok(
        "Barracuda::ChargeInit(void)",
    ),
    Ok(
        "FrontEnd_Title_OnEnter(void)",
    ),
    Ok(
        "Gem::Update(void)",
    ),
    Ok(
        "Shatter_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterProp::IsLowDetail(void)",
    ),
    Ok(
        "WhirlyWind::Init(GameObjDesc *)",
    ),
    Ok(
        "ChuteLog_LoadResources(KromeIni *)",
    ),
    Ok(
        "CheckOcclusion(BoundingVolume *)",
    ),
    Ok(
        "Heap_GetBlockInfo(void *)",
    ),
    Ok(
        "Lenny::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<Wallaby>::Init(void)",
    ),
    Ok(
        "MusicalIcicleObjective::Deinit(void)",
    ),
    Ok(
        "Collapsible::Draw(void)",
    ),
    Ok(
        "BushPig::InitPullLasso(void)",
    ),
    Ok(
        "BreakAndTurnData::RunStopInit(void)",
    ),
    Ok(
        "Ty virtual table",
    ),
    Ok(
        "global constructors keyed to MobilePlatform::Deinit(void)",
    ),
    Ok(
        "TyBite::Reset(void)",
    ),
    Ok(
        "ModuleInfo<RainbowScaleObjective> virtual table",
    ),
    Ok(
        "Boomerang_CheckForHitSphere(Vector *, float, bool)",
    ),
    Ok(
        "global constructors keyed to Elle_LoadResources(KromeIni *)",
    ),
    Ok(
        "System_VBlankInterruptHandler(int)",
    ),
    Ok(
        "RhinoGround::RunDeInit(void)",
    ),
    Ok(
        "GameCameraPointsDelta::Update(void)",
    ),
    Ok(
        "ModuleInfo<ShadowBatStalactite>::ConstructObject(void *)",
    ),
    Ok(
        "CameraOverrideDir_Start(void)",
    ),
    Ok(
        "Rufus::AttackPattern1(void)",
    ),
    Ok(
        "Bull::Die(void)",
    ),
    Ok(
        "Rufus::Flee(void)",
    ),
    Ok(
        "SpiderTrapdoor_LoadResources(KromeIni *)",
    ),
    Ok(
        "Emu::Relaxed(void)",
    ),
    Ok(
        "Gem_CheatCollectAllCallBack(void *)",
    ),
    Ok(
        "MKRumble_Reset(void)",
    ),
    Ok(
        "Muddie::Idle(void)",
    ),
    Ok(
        "BeerCan::Update(void)",
    ),
    Ok(
        "TyParticleManager::SpawnWaterSteam(Vector *, float)",
    ),
    Ok(
        "ModuleInfo<Tick>::ConstructObject(void *)",
    ),
    Ok(
        "GameCamera::UseFirstPersonCamera(bool, FirstPersonInitInfo *)",
    ),
    Ok(
        "ModuleInfo<FrogField>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<SpiderWeb>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Level_CountEntities(KromeIni *)",
    ),
    Ok(
        "TyParticleManager::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverride::HoldTyMoveYawInitially(void)",
    ),
    Ok(
        "KoalaKid_LoadResources(KromeIni *)",
    ),
    Ok(
        "WaterSlideData::GetCamInfo(WaterSlideCamInfo *, float)",
    ),
    Ok(
        "Ty::InSharkCage(void)",
    ),
    Ok(
        "ModuleInfo<Julius> virtual table",
    ),
    Ok(
        "Tick::AttachInit(void)",
    ),
    Ok(
        "AuroraKid_PathUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Font::Create(char *, char *, float, float, float)",
    ),
    Ok(
        "C1Water_LoadResources(KromeIni *)",
    ),
    Ok(
        "Gecko::Draw(void)",
    ),
    Ok(
        "global constructors keyed to Grasshopper_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillBike::DebugInit(void)",
    ),
    Ok(
        "Bull::Crash(void)",
    ),
    Ok(
        "Gecko::WalkState(void)",
    ),
    Ok(
        "Fly::Update_WaitingMove(void)",
    ),
    Ok(
        "PipePart::Reset(void)",
    ),
    Ok(
        "Coconut::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "ObjectiveFinder::Update(void)",
    ),
    Ok(
        "Blitter_Sphere::Draw(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::BrakeTransition(void)",
    ),
    Ok(
        "TyMemCard_CopyToHost(int, char *, char *)",
    ),
    Ok(
        "AntHill::Update(void)",
    ),
    Ok(
        "MKWater::bDisableWater",
    ),
    Ok(
        "Ty::SelectIdle(void)",
    ),
    Ok(
        "FileSys_SetLoadInterceptHandler(void *(*)(char *, int *, void *, int *))",
    ),
    Ok(
        "Model_TrivialRejectTest(BoundingVolume *, Matrix *)",
    ),
    Ok(
        "MobilePlatform::SetYaw(float, float)",
    ),
    Ok(
        "ModuleInfo<TimeAttack> virtual table",
    ),
    Ok(
        "ModuleInfo<Jeep>::Init(void)",
    ),
    Ok(
        "Cattle_LoadResources(void)",
    ),
    Ok(
        "Hud_GetGemLivesY(void)",
    ),
    Ok(
        "GameData::CollectTalisman(TalismanType)",
    ),
    Ok(
        "BlitterCritter::Draw(void)",
    ),
    Ok(
        "Gem::Magnetised(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "__user_type_info::dcast(type_info const &, int, void *, type_info const *, void *) const",
    ),
    Ok(
        "ScrubTurkey::SetTarget(Vector *)",
    ),
    Ok(
        "Bat_LoadResources(KromeIni *)",
    ),
    Ok(
        "Boomerang::InitIdle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Maurie::HitInit(void)",
    ),
    Ok(
        "Ice::CheckForHit(void)",
    ),
    Ok(
        "DDASession::NewCheckpoint(int)",
    ),
    Ok(
        "LoadLevel_LoadWaypoint(KromeIniLine *, WayPointLoadInfo *)",
    ),
    Ok(
        "GameCamera_UsePontoonCamera(bool)",
    ),
    Ok(
        "Font::GetHeight(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::AddGif_AD_PABE(unsigned long)",
    ),
    Ok(
        "Parser::GrabEndOfLine(void)",
    ),
    Ok(
        "MiniGameC3_Init(void)",
    ),
    Ok(
        "Neddy::Pant(void)",
    ),
    Ok(
        "Barracuda::DeathInit(void)",
    ),
    Ok(
        "SpecialPickupStruct::SetTransparent(bool)",
    ),
    Ok(
        "Vector::Normalise(Vector *)",
    ),
    Ok(
        "ShadowBat::DyingDeinit(void)",
    ),
    Ok(
        "Maurie_TakeOff(void)",
    ),
    Ok(
        "Ty::Surfacing(void)",
    ),
    Ok(
        "SmallRock::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RandomFR(int *, float, float)",
    ),
    Ok(
        "bad_cast::bad_cast(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Bird> virtual table",
    ),
    Ok(
        "TreasureChest::Appearing(void)",
    ),
    Ok(
        "Roach::UpdateModelNormal(void)",
    ),
    Ok(
        "Ty::InitBreakAndTurn(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Yabby::LogicUpdate(void)",
    ),
    Ok(
        "ShatterStruct::Activate(void)",
    ),
    Ok(
        "Torch::Hit(void)",
    ),
    Ok(
        "Ty::SlideTransition(void)",
    ),
    Ok(
        "StaticFXProp::Draw(void)",
    ),
    Ok(
        "Dennis::MoveToNextPoint_Update(void)",
    ),
    Ok(
        "ModuleInfo<EnemySpawner>::Init(void)",
    ),
    Ok(
        "SmoothY::SmoothYInfo::Update(float *)",
    ),
    Ok(
        "MKWater::CalcBoundingVolumes(void)",
    ),
    Ok(
        "TrapdoorSpider::PatrolInit(void)",
    ),
    Ok(
        "Rufus::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScubaFrill::LogicUpdate(void)",
    ),
    Ok(
        "ExtendedAnalogControl::Draw(void)",
    ),
    Ok(
        "Stopwatch_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BunyipStruct::Run(void)",
    ),
    Ok(
        "IceBlock_Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Yabby::Deinit(void)",
    ),
    Ok(
        "Particle_BlackSmoke_Create(ParticleSystem **, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowGun::muzzleRefIndex",
    ),
    Ok(
        "ThrowingStar::ResolveHit(void)",
    ),
    Ok(
        "BushPig::RunTransition(void)",
    ),
    Ok(
        "MiniBoulderStruct::CheckForBoomerangs(void)",
    ),
    Ok(
        "PauseScreen_Continue_OnEnter(void)",
    ),
    Ok(
        "MKRumble_Pause(void)",
    ),
    Ok(
        "ZoneBlockerProp::Init(GameObjDesc *)",
    ),
    Ok(
        "BlueTongue::Death(void)",
    ),
    Ok(
        "TriggerBoxProp virtual table",
    ),
    Ok(
        "Ty_Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tick::Attack(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScriptProp::LoadDone(void)",
    ),
    Ok(
        "MKWaterProp::DrawStrip_LowDetail(WaterStripHeader *, Vector *, Material *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WhiteBat::Init(GameObjDesc *)",
    ),
    Ok(
        "ScriptProp virtual table",
    ),
    Ok(
        "PE_KickUpDust_LoadResources(void)",
    ),
    Ok(
        "__pointer_type_info virtual table",
    ),
    Ok(
        "WaterVolume::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "TumbleWeed::Deinit(void)",
    ),
    Ok(
        "GuideBarrel virtual table",
    ),
    Ok(
        "SynkerFrillLizardDesc::Load(KromeIni *)",
    ),
    Ok(
        "PipePart::GetPos(void)",
    ),
    Ok(
        "SeaMine::Idle(void)",
    ),
    Ok(
        "WindmillStruct::Idle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillBike::FindClosest(Vector *, float)",
    ),
    Ok(
        "IceBlockStruct::SetState(IceBlockState)",
    ),
    Ok(
        "Zappyrang virtual table",
    ),
    Ok(
        "global constructors keyed to Muddie_LoadResources(KromeIni *)",
    ),
    Ok(
        "global constructors keyed to SeaMine::magMineCounter",
    ),
    Ok(
        "global constructors keyed to SharkCage_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterManager_AddRipple(float, float, float, float, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to Teleporter_LoadResources(KromeIni *)",
    ),
    Ok(
        "Platform::UpdateAttached(void)",
    ),
    Ok(
        "Shatterable::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "RedButton virtual table",
    ),
    Ok(
        "Model::EnableSubObject(int, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "UIText::SetPosition(Vector *, char)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CaveBatObjective::bCompleted",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Julius::RequestTalisman(void)",
    ),
    Ok(
        "ModuleInfo<SpiderDirt>::ConstructObject(void *)",
    ),
    Ok(
        "NewGameVideo_Draw(void)",
    ),
    Ok(
        "ModuleInfo<SharkCage>::ConstructObject(void *)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_A2_Update(void)",
    ),
    Ok(
        "MKSceneManager::DrawGlobalProps(int)",
    ),
    Ok(
        "Ty::WaterIdleTransition(void)",
    ),
    Ok(
        "Emu::Draw(void)",
    ),
    Ok(
        "RainbowScaleObjective::Update(void)",
    ),
    Ok(
        "Stopwatch_Show(void)",
    ),
    Ok(
        "BeachHut virtual table",
    ),
    Ok(
        "TyAttributes::Message(MKMessage *)",
    ),
    Ok(
        "TyMemCard_LoadGame(void)",
    ),
    Ok(
        "TyParticleManager::SpawnWaterWash(Vector *, float)",
    ),
    Ok(
        "Ty::UpdateHeadTurning(void)",
    ),
    Ok(
        "ModuleInfo<IceCube> virtual table",
    ),
    Ok(
        "MKAnimScript::GetLength(void)",
    ),
    Ok(
        "TrapdoorSpider::FlinchInit(void)",
    ),
    Ok(
        "CameraOverride::Rail_Create(void *)",
    ),
    Ok(
        "ModuleInfo<ShadowBatValve>::ConstructObject(void *)",
    ),
    Ok(
        "DialogProp virtual table",
    ),
    Ok(
        "SelectionRang::Init(void)",
    ),
    Ok(
        "HealthLivesHud::Init(void)",
    ),
    Ok(
        "Muddie::Reset(void)",
    ),
    Ok(
        "ModuleInfo<ShadowBatPipe> virtual table",
    ),
    Ok(
        "TyParticleManager::SetCamera(Vector *, Vector *)",
    ),
    Ok(
        "QuatRotation::Scale(float)",
    ),
    Ok(
        "Maurie::TakeOffInit(void)",
    ),
    Ok(
        "global constructors keyed to Coconut_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowGun::CheckEvents(void)",
    ),
    Ok(
        "ChuteLog::Init(GameObjDesc *)",
    ),
    Ok(
        "Generator::Reset(void)",
    ),
    Ok(
        "CheckpointStruct::Message(MKMessage *)",
    ),
    Ok(
        "global constructors keyed to AuroraKid_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Copyright_Init(void)",
    ),
    Ok(
        "Ice::FireAtTarget(Vector *, Vector *, float, int, bool)",
    ),
    Ok(
        "Vector::ClampMagnitude(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Yabby::StartBeingScared(void)",
    ),
    Ok(
        "ShadowBatPipe virtual table",
    ),
    Ok(
        "Ty::IdleSurfaceSwim(void)",
    ),
    Ok(
        "Aurora virtual table",
    ),
    Ok(
        "Neddy virtual table",
    ),
    Ok(
        "Bat::LogicUpdate(void)",
    ),
    Ok(
        "Input_DeinitModule(void)",
    ),
    Ok(
        "PauseScreen_RangInfo_Draw(void)",
    ),
    Ok(
        "MKWave::Init(MKWaveType *)",
    ),
    Ok(
        "BoomerangManager::Deinit(void)",
    ),
    Ok(
        "Ty::DeinitWaterSlide(void)",
    ),
    Ok(
        "Aurora::HappyInit(void)",
    ),
    Ok(
        "TyBite::InitBiteCharge(void)",
    ),
    Ok(
        "Ty::WaterDeath(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Rhino>::Init(void)",
    ),
    Ok(
        "MKWater::Create(char *, bool)",
    ),
    Ok(
        "ShatterStruct::GetRadius(PieceStruct *)",
    ),
    Ok(
        "Emu::GetPos(void)",
    ),
    Ok(
        "QuatRotation::Magnitude(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FishShoalField::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Matrix::Inverse(Matrix *)",
    ),
    Ok(
        "Critters_LoadResources(void)",
    ),
    Ok(
        "ModuleInfo<OpalCollector> virtual table",
    ),
    Ok(
        "CollisionObject::Init(ColObjDescriptor *, Vector *, TyCollisionInfo *, unsigned char, CollisionObject **)",
    ),
    Ok(
        "NinjaGecko::CrawlIdle(void)",
    ),
    Ok(
        "FallGuideProp::Update(void)",
    ),
    Ok(
        "FootEffect::footDustType",
    ),
    Ok(
        "AuroraKid::Move(Vector *)",
    ),
    Ok(
        "AuroraKid::FollowInit(void)",
    ),
    Ok(
        "Sly::DefrostInit(void)",
    ),
    Ok(
        "ScrubTurkey::Bitten_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "A1FrillObjective::Success(void)",
    ),
    Ok(
        "WaterSlideEffect virtual table",
    ),
    Ok(
        "Bilby_Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "View::SetRenderArea(float, float, float, float)",
    ),
    Ok(
        "Barracuda::Cruise(void)",
    ),
    Ok(
        "FrillBike::Patrol(void)",
    ),
    Ok(
        "MKSceneManager::AddProp(MKProp *)",
    ),
    Ok(
        "StarTrail::Update(void)",
    ),
    Ok(
        "BlueTongue::IdleAttackInit(void)",
    ),
    Ok(
        "KingFisher::SharedUpdate(void)",
    ),
    Ok(
        "StalactiteTrap::Update(void)",
    ),
    Ok(
        "Ty::CommonPreLogicChecks(void)",
    ),
    Ok(
        "Lenny::WaitForTyInit(void)",
    ),
    Ok(
        "MiniBoulderStruct::Destroy(void)",
    ),
    Ok(
        "SeaMine::Reset(void)",
    ),
    Ok(
        "Input_WasButtonReleased(InputDevices, int, InputDevices *)",
    ),
    Ok(
        "Dma::AddGif_PRIM(unsigned long)",
    ),
    Ok(
        "Muddie::RunAttack(bool)",
    ),
    Ok(
        "MKAnimScript::GetAnimName(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RainbowScaleObjective::Message(MKMessage *)",
    ),
    Ok(
        "Animation::GetNodeOrigin(int)",
    ),
    Ok(
        "GameCamera_UseFixedDebugCamera(FixedDebugCameraType)",
    ),
    Ok(
        "GameCamera::Normal_Deinit(void)",
    ),
    Ok(
        "global constructors keyed to Leech_LoadResources(KromeIni *)",
    ),
    Ok(
        "LevelObjective::Init(GameObjDesc *)",
    ),
    Ok(
        "Ty::SurfaceKnockBackInit(void)",
    ),
    Ok(
        "MKProp::Draw(void)",
    ),
    Ok(
        "TyBite::InAir(Vector *)",
    ),
    Ok(
        "ModuleInfo<Portal> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Animation::Advance(float *, AnimDef **, float)",
    ),
    Ok(
        "SynkerFrillLizard::GetDesc(void)",
    ),
    Ok(
        "Video_Restart(Video *)",
    ),
    Ok(
        "System_DeinitModule(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sly::Init(GameObjDesc *)",
    ),
    Ok(
        "ModuleInfo<AnimatingProp>::ConstructObject(void *)",
    ),
    Ok(
        "SpiderTrapdoor::Init(GameObjDesc *)",
    ),
    Ok(
        "TyBite::DiveBite(void)",
    ),
    Ok(
        "FrillProblemObjective::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::maxV",
    ),
    Ok(
        "ShadowBat_GetPointer(void)",
    ),
    Ok(
        "global constructors keyed to IceCoolant_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Barracuda::LogicUpdate(void)",
    ),
    Ok(
        "GalleryScreenData::FadeOut(int, int)",
    ),
    Ok(
        "SignPost_LoadResources(KromeIni *)",
    ),
    Ok(
        "global constructors keyed to Rex_LoadResources(KromeIni *)",
    ),
    Ok(
        "ScubaFrill::Attack(void)",
    ),
    Ok(
        "MKWaterProp::DrawTriStrip(Water_TriStrip *, Material *, Vector *)",
    ),
    Ok(
        "Particle_Portal_Create(ParticleSystem **, Vector *, float)",
    ),
    Ok(
        "Hud_ShowCrossHair(bool)",
    ),
    Ok(
        "WhiteBat::Message(MKMessage *)",
    ),
    Ok(
        "LevelData::GetName(char *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "NinjaGecko::CrawlAlert(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DDASession::StoreRangChanged(void)",
    ),
    Ok(
        "EventMessage::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EnemyObject::SpawnGhost(void)",
    ),
    Ok(
        "BonusPickup::GetDesc(void)",
    ),
    Ok(
        "Emu::InitEscape(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rhino::CheckFootEvents(void)",
    ),
    Ok(
        "GameCamera::FirstPerson_Update(void)",
    ),
    Ok(
        "ModuleInfo<MusicalIcicleObjective>::Init(void)",
    ),
    Ok(
        "Ty::BreakAndTurnTransition(void)",
    ),
    Ok(
        "Elevator::LoadDone(void)",
    ),
    Ok(
        "BadBoonie::DropEggInit(void)",
    ),
    Ok(
        "DialogPlayer::SceneDraw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::AutoCenter_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SmallCrabDesc::Init(ModuleInfoBase *, char *, char *, bool, Tools_AnimEntry *, int, float, float)",
    ),
    Ok(
        "ChumBox virtual table",
    ),
    Ok(
        "LevelData::GetName(void)",
    ),
    Ok(
        "Barracuda::CruiseInit(void)",
    ),
    Ok(
        "BuzzSaw2::Cut(void)",
    ),
    Ok(
        "TyHealth::DrawLooseFX(Vector)",
    ),
    Ok(
        "Spear::Update(void)",
    ),
    Ok(
        "Crikey::Cruise(void)",
    ),
    Ok(
        "PauseScreen_DrawFraction3d(char *, char *, Vector *, float, float)",
    ),
    Ok(
        "PauseScreen_Continue_Init(void)",
    ),
    Ok(
        "ModuleInfo<Bird>::Init(void)",
    ),
    Ok(
        "GameCamera::Launch_Update(void)",
    ),
    Ok(
        "GameCamera_IsUnderwater(void)",
    ),
    Ok(
        "WaterSlideManager::Branch(void)",
    ),
    Ok(
        "Neddy::IdleInit(void)",
    ),
    Ok(
        "Damageable::Update(void)",
    ),
    Ok(
        "global constructors keyed to LavaBurner_LoadResources(KromeIni *)",
    ),
    Ok(
        "SoundEventHelper::Reset(void)",
    ),
    Ok(
        "Lava::Reset(void)",
    ),
    Ok(
        "ProgressBar::DecrementProgress(void)",
    ),
    Ok(
        "RangChangeData::PerformChange(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_pow",
        ),
    ),
    Ok(
        "ModuleInfo<LavaBurner>::ConstructObject(void *)",
    ),
    Ok(
        "Speedboat::InitFlinch(void)",
    ),
    Ok(
        "FrillBike_LoadResources(KromeIni *)",
    ),
    Ok(
        "Gem virtual table",
    ),
    Ok(
        "MKRumble_Resume(void)",
    ),
    Ok(
        "ShadowBatValve::Deinit(void)",
    ),
    Ok(
        "WaterSlideData::Fall(void)",
    ),
    Ok(
        "Model::Validate(void)",
    ),
    Ok(
        "Lenny::Approach(void)",
    ),
    Ok(
        "GameCameraPoint::SmoothXZ(float, float, float)",
    ),
    Ok(
        "Lenny::SkidStop(void)",
    ),
    Ok(
        "Crikey::AttackInit(void)",
    ),
    Ok(
        "ModuleInfo<Frog>::ConstructObject(void *)",
    ),
    Ok(
        "TyBite::EnableAutoTarget(Model *, bool)",
    ),
    Ok(
        "Roach::IsTyVisible(void)",
    ),
    Ok(
        "Ty::ClipVelToEdge(void)",
    ),
    Ok(
        "GameCamera_UseAutoCenter(bool)",
    ),
    Ok(
        "GameCamera_UseUnderwaterCamera(bool)",
    ),
    Ok(
        "Texture::Upload(bool)",
    ),
    Ok(
        "Neddy::HitTargetInit(void)",
    ),
    Ok(
        "Leech::LoadDone(void)",
    ),
    Ok(
        "SawDust::Deinit(void)",
    ),
    Ok(
        "ParticleSystem::bParticleWireFrameOn",
    ),
    Ok(
        "MiniBoulder_Update(void)",
    ),
    Ok(
        "GameCamera::Pontoon_Init(void)",
    ),
    Ok(
        "ModuleInfo<SnowPile> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameObjectManager::InitLevel(void)",
    ),
    Ok(
        "Model::GetBoundingVolume(int)",
    ),
    Ok(
        "BadBoonie::RunToWaypoint_Event(char *)",
    ),
    Ok(
        "MKWaterManager_GetHeight(Vector *, float *, float)",
    ),
    Ok(
        "FrillBike::Debug(void)",
    ),
    Ok(
        "PauseScreen_OptionSound_LoadResources(void)",
    ),
    Ok(
        "GuideParticle_Hide(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::ThrowBoomerang(void)",
    ),
    Ok(
        "Windmill_Delete(WindmillStruct *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TimeTrial_TryAgainDialog(void)",
    ),
    Ok(
        "Croc::TurnInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Muddie virtual table",
    ),
    Ok(
        "FlyDesc virtual table",
    ),
    Ok(
        "MusicalIcicle::Fall(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_current_mallinfo",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "A1FrillObjective::Deinit(void)",
    ),
    Ok(
        "Ty::FirstPersonTransition(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKAnimScript::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera_UseBiteEffect(CameraBiteEffectState, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MiniGameObjective::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Matrix::Multiply4x4(Matrix *)",
    ),
    Ok(
        "Boomerang::UpdateFired(void)",
    ),
    Ok(
        "ModuleInfo<Sheila>::ConstructObject(void *)",
    ),
    Ok(
        "File_GetFileServerSource(void)",
    ),
    Ok(
        "Moth::IsFloorValid(Vector *)",
    ),
    Ok(
        "Str_GetFilenameFromPath(char *)",
    ),
    Ok(
        "YabbyStalactite::Reset(void)",
    ),
    Ok(
        "MorayEel virtual table",
    ),
    Ok(
        "DialogEffect::GetActorModelNode(Model *, char *)",
    ),
    Ok(
        "ModuleInfo<BunyipElder> virtual table",
    ),
    Ok(
        "Bat::FlyDeinit(void)",
    ),
    Ok(
        "Wallaby::UpdateLogic(void)",
    ),
    Ok(
        "FireworksCrate::Update(void)",
    ),
    Ok(
        "global constructors keyed to C3_MiniGameActors_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<YabbyStalactite> virtual table",
    ),
    Ok(
        "Tools_DropShadow_Init(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "sfvwrite",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SynkerBlueTongueDesc virtual table",
    ),
    Ok(
        "Ty::UseSpecialParticleEffect(void)",
    ),
    Ok(
        "SpecialPickupStruct::Init(GameObjDesc *)",
    ),
    Ok(
        "Aurora_LoadResources(KromeIni *)",
    ),
    Ok(
        "Leech::HitInit(void)",
    ),
    Ok(
        "Yabby_InsideTrappedArea(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<A1FrillObjective> virtual table",
    ),
    Ok(
        "Tools_LogClose(int)",
    ),
    Ok(
        "LOD_Deinit(void)",
    ),
    Ok(
        "NinjaGecko::CrawlAlertDeinit(void)",
    ),
    Ok(
        "global constructors keyed to Tick_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::AddGif_AD_TEX0_1(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "YabbyObjective::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<Skink>::Init(void)",
    ),
    Ok(
        "FrillBike::GetWorldVelocity(Vector *, float)",
    ),
    Ok(
        "PauseScreen_RangInfo_Deinit(void)",
    ),
    Ok(
        "GameCamera::Reset(GameCameraHeroInfo *, CameraDistanceType)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DDASession::StoreCameraInfo(DDACameraAction)",
    ),
    Ok(
        "ModuleInfo<ScriptProp>::ConstructObject(void *)",
    ),
    Ok(
        "Ty::InitJog(void)",
    ),
    Ok(
        "Ty::SetKnockBackFromPos(Vector *, float, KnockBackType)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera_DrawDebug(void)",
    ),
    Ok(
        "KoalaKid::ResetSound(void)",
    ),
    Ok(
        "FinishLineStruct::Idle(void)",
    ),
    Ok(
        "NinjaGecko::LogicUpdate(void)",
    ),
    Ok(
        "GalleryScreenData::Hold(int)",
    ),
    Ok(
        "ModuleInfo<TurningPlatform> virtual table",
    ),
    Ok(
        "CritterField_RegisterBlitter(BlitterCritterDesc *, unsigned int, unsigned int, float, unsigned int)",
    ),
    Ok(
        "ModuleInfo<ThinIceProp>::ConstructObject(void *)",
    ),
    Ok(
        "TyBite::DeinitRolyPoly(void)",
    ),
    Ok(
        "Texture::DisplayTextures(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::DrawRangTrails(void)",
    ),
    Ok(
        "ModuleInfo<Eel> virtual table",
    ),
    Ok(
        "FishShoalField::GetFloorY(Vector *)",
    ),
    Ok(
        "KingFisher::Fly(void)",
    ),
    Ok(
        "DropShadow::SetRadius(float)",
    ),
    Ok(
        "Target::CheckForBoomerangs(void)",
    ),
    Ok(
        "ProgressBar::Draw(void)",
    ),
    Ok(
        "__array_type_info type_info function",
    ),
    Ok(
        "FrillLizard::LightTreeInit(void)",
    ),
    Ok(
        "Leech::DetachInit(void)",
    ),
    Ok(
        "GameCamera::UseAnimation(bool, Animation *, Matrix *)",
    ),
    Ok(
        "AnimatingProp::SetAnim(unsigned int)",
    ),
    Ok(
        "Ty::UpdateRangTrails(void)",
    ),
    Ok(
        "Ty::AfterDunny(void)",
    ),
    Ok(
        "Shears_Reset(void)",
    ),
    Ok(
        "CrikeyChum::Reset(void)",
    ),
    Ok(
        "Muddie::StopAttack(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<SnowSpider> virtual table",
    ),
    Ok(
        "SkinkDropTail::Reset(void)",
    ),
    Ok(
        "ScrubTurkey::CheckForClearWayPoint(void)",
    ),
    Ok(
        "Neddy::Draw(void)",
    ),
    Ok(
        "Lasso::LassoDraw(void)",
    ),
    Ok(
        "Frostyrang::UpdateParticleEffect(void)",
    ),
    Ok(
        "global constructors keyed to Sentinel_LoadResources(KromeIni *)",
    ),
    Ok(
        "set_new_handler(void (*)(void))",
    ),
    Ok(
        "Input_InitModule(void)",
    ),
    Ok(
        "Sly virtual table",
    ),
    Ok(
        "SoundBank_ResolveMusicType(char *)",
    ),
    Ok(
        "Material::UseNone(int)",
    ),
    Ok(
        "System_SetDisplayMode(int, int, int, int, int)",
    ),
    Ok(
        "Fluffy::SetState(int, bool)",
    ),
    Ok(
        "BadBoonie::Reset(void)",
    ),
    Ok(
        "Ty::InitBounceOff(void)",
    ),
    Ok(
        "TyParticleManager::SpawnBigSplash(Vector *, bool, float, bool, float, int)",
    ),
    Ok(
        "MKWater::debugNumSubObjectsInvisible",
    ),
    Ok(
        "BushPig::DeinitDeath(void)",
    ),
    Ok(
        "ConvertLevel2Nr(char *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Ice>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<Bull>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<Lava> virtual table",
    ),
    Ok(
        "Dma::InitModule(void)",
    ),
    Ok(
        "Skink::TauntInit(void)",
    ),
    Ok(
        "PontoonRope::Reset(void)",
    ),
    Ok(
        "ModuleInfo<FrillLizard> virtual table",
    ),
    Ok(
        "MusicalIcicle::Shatter(void)",
    ),
    Ok(
        "Croc::Death(void)",
    ),
    Ok(
        "GCT_BuildQuadratic(Vector *, Vector *, Vector *, int, Quadratic *)",
    ),
    Ok(
        "GameCamera_OverrideTopDown_Add(CameraOverrideTopDownLoadInfo *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Gem::Spawning(void)",
    ),
    Ok(
        "MetalSpikes::Update(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "start_cp_handler",
        ),
    ),
    Ok(
        "Groper::CheckForExplosion(void)",
    ),
    Ok(
        "global constructors keyed to SpinningLog_LoadResources(KromeIni *)",
    ),
    Ok(
        "AnimatingProp::Activate(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bull::SpawnSomeAnts(void)",
    ),
    Ok(
        "MKWater::centreDraw",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterfallBaseStruct::Update(void)",
    ),
    Ok(
        "FrontEnd_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TumbleWeed::Move(void)",
    ),
    Ok(
        "Lasso::InitLassoThrow(void)",
    ),
    Ok(
        "PlatformRider::Attach(GameObject *)",
    ),
    Ok(
        "Flamerang virtual table",
    ),
    Ok(
        "Emu::DeinitYank(void)",
    ),
    Ok(
        "ModuleInfo<Boulder> virtual table",
    ),
    Ok(
        "Platform::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::UseFallDiveCamera(bool)",
    ),
    Ok(
        "Kin_GetTime(float *, float *, float *, float *)",
    ),
    Ok(
        "Matrix::RotatePitch(Matrix *, float)",
    ),
    Ok(
        "PickupCounter::Draw(void)",
    ),
    Ok(
        "ReedsStruct::Rustle(void)",
    ),
    Ok(
        "ParticleSystemType::Init(char *, Material *, float, float, float, int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Muddie_LoadResources(KromeIni *)",
    ),
    Ok(
        "Steam::Create(Vector *)",
    ),
    Ok(
        "GameObject::Message(MKMessage *)",
    ),
    Ok(
        "Avalanche::Init(void)",
    ),
    Ok(
        "GameData::SetCurrentLevel(LevelNumber)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Gem::LoadDone(void)",
    ),
    Ok(
        "BurnerObjective virtual table",
    ),
    Ok(
        "ModuleInfo<TyAttributes>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TrapdoorSpider::LogicUpdate(void)",
    ),
    Ok(
        "ModuleInfo<SoundProp>::ConstructObject(void *)",
    ),
    Ok(
        "InterpolateVertexColor(Vector *, Vector *, Vector *, Vector *, Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "GameCamera::SetPitch(void)",
    ),
    Ok(
        "MiniBoulder_Deinit(void)",
    ),
    Ok(
        "KoalaKid::IdleInit(void)",
    ),
    Ok(
        "SetUWVertexColour(Vector *, Vector *, bool)",
    ),
    Ok(
        "IceBlockStruct::BergIdle(void)",
    ),
    Ok(
        "FrogField::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillLizard::AttackIdleDance(bool)",
    ),
    Ok(
        "GCT_WaypointPlaneManager::IsWithinContainer(Vector *, GCT_WaypointPlane *)",
    ),
    Ok(
        "GameCamera_UseMiniGameB1Camera(bool)",
    ),
    Ok(
        "ModuleInfo<WaterPipe>::Init(void)",
    ),
    Ok(
        "RingoArm::LoadDone(void)",
    ),
    Ok(
        "Path_GetFirstSegment(void)",
    ),
    Ok(
        "Groper virtual table",
    ),
    Ok(
        "Speedboat::UpdateBarrelFixed(void)",
    ),
    Ok(
        "GameObjectManager::GetObjectFromID(unsigned int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FootEffect::pIceMat",
    ),
    Ok(
        "Shark::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<BurningJunk>::Init(void)",
    ),
    Ok(
        "ChumBox::Update(void)",
    ),
    Ok(
        "MKAnimScript::GetAnim(char *)",
    ),
    Ok(
        "Ty::InitQuickSand(void)",
    ),
    Ok(
        "SharkCage virtual table",
    ),
    Ok(
        "BoomerangWeapon::IsOwnRang(Boomerang *)",
    ),
    Ok(
        "CollisionObject::Deinit(void)",
    ),
    Ok(
        "AirPlatform::Reset(void)",
    ),
    Ok(
        "Boulder::Spin(float)",
    ),
    Ok(
        "LevelData::IsBossEnabled(void)",
    ),
    Ok(
        "ModuleInfo<Skink> virtual table",
    ),
    Ok(
        "Yabby_GetPointer(void)",
    ),
    Ok(
        "TyFSM::BiteState(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<SnowGunAmmo> virtual table",
    ),
    Ok(
        "ModuleInfo<DDACheckpoint> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowGunAmmo::CheckForHit(void)",
    ),
    Ok(
        "ModuleInfo<ZoneBlockerProp>::Init(void)",
    ),
    Ok(
        "Weather_GetType(void)",
    ),
    Ok(
        "DialogPlayer::Reset(unsigned int)",
    ),
    Ok(
        "TyParticleManager::SpawnSpark(Vector *, Vector *, Vector *)",
    ),
    Ok(
        "FinishLine_LoadResources(KromeIni *)",
    ),
    Ok(
        "unsigned char type_info function",
    ),
    Ok(
        "global constructors keyed to Frog_LoadResources(void)",
    ),
    Ok(
        "Barracuda::Init(GameObjDesc *)",
    ),
    Ok(
        "Rufus::FleeInit(void)",
    ),
    Ok(
        "EnemySpawner::AssignCollisions(EnemyObject *)",
    ),
    Ok(
        "SnowPileDesc virtual table",
    ),
    Ok(
        "OpalCollector::Activated(void)",
    ),
    Ok(
        "SpecialPickupStruct::Deinit(void)",
    ),
    Ok(
        "Emu::InitYank(void)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_B1_Update(void)",
    ),
    Ok(
        "Ty::Update(void)",
    ),
    Ok(
        "Maurie::Land(void)",
    ),
    Ok(
        "Parser::IsEOL(void)",
    ),
    Ok(
        "Fluffy::Sink(void)",
    ),
    Ok(
        "Zappyrang::UpdateParticleEffect(void)",
    ),
    Ok(
        "LevelData::GetLevelNumber(char *)",
    ),
    Ok(
        "Weather_DeinitType(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Barracuda::Charge(void)",
    ),
    Ok(
        "SoundBank_ResolveSoundEventIndex(char *)",
    ),
    Ok(
        "Ty::KnockBackTransition(void)",
    ),
    Ok(
        "ModuleInfo<BeachHut>::ConstructObject(void *)",
    ),
    Ok(
        "ThinIceProp virtual table",
    ),
    Ok(
        "CableCar::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PtrList<AnimationTemplate>::Destroy(AnimationTemplate *)",
    ),
    Ok(
        "FrontEnd_DrawBackground(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "AuroraKid::SafeInit(void)",
    ),
    Ok(
        "ShadowBat::WhiteBatAttackInit(void)",
    ),
    Ok(
        "Grasshopper::SharedUpdate(void)",
    ),
    Ok(
        "CrikeyCanister::StartEaten(void)",
    ),
    Ok(
        "File_Open(char *, int)",
    ),
    Err(
        InvalidSpecialMethod(
            "fpcmp_parts_d",
        ),
    ),
    Ok(
        "CaveBat::IdleInit(void)",
    ),
    Ok(
        "EnemyObject::GetWalkSpeed(void)",
    ),
    Ok(
        "Shatterable::Draw(void)",
    ),
    Ok(
        "FinishLineStruct::SetState(FinishLineState)",
    ),
    Ok(
        "ControlVal::Init(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "operator new [](unsigned int, char *, int, char *)",
    ),
    Ok(
        "LilNeddy::Death(void)",
    ),
    Ok(
        "Sentinel virtual table",
    ),
    Ok(
        "Ty::InitFastDive(void)",
    ),
    Ok(
        "MKWaterProp::DrawQuad_HighDetail(WaterStripHeader *, int, WaterStripVertex *, WaterStripNormal *, WaterStripUV *, WaterStripColor *, Vector *, Material *)",
    ),
    Ok(
        "ScrubTurkey::CheckForBite(void)",
    ),
    Ok(
        "Ringo::UpdateArms(void)",
    ),
    Ok(
        "ModuleInfo<StopwatchStruct>::ConstructObject(void *)",
    ),
    Ok(
        "BoomerangManager::HideAll(void)",
    ),
    Ok(
        "Tools_AnimManager::Init(Tools_AnimDesc *)",
    ),
    Ok(
        "Tools_ClipSphereToDynamicModel(Vector const &, float, Vector *, Model *, int)",
    ),
    Ok(
        "GameObjDesc virtual table",
    ),
    Ok(
        "ModuleInfo<SnowBall>::Init(void)",
    ),
    Ok(
        "TurningPlatform::Reset(void)",
    ),
    Ok(
        "Portal_Update(Portal *)",
    ),
    Ok(
        "Bull::TossInit(void)",
    ),
    Ok(
        "CritterDesc2::Init(ModuleInfoBase *, char *, char *, bool, Tools_AnimEntry *, int)",
    ),
    Ok(
        "EnemyObject::CheckForBoomerangs(void)",
    ),
    Ok(
        "MiniGameObjective::GetActive(void)",
    ),
    Ok(
        "Ty::ResetVars(void)",
    ),
    Ok(
        "File_Seek(int, int, int)",
    ),
    Ok(
        "PlatformRider::ToWorldDir(Vector *)",
    ),
    Ok(
        "BilbyHud::Update(void)",
    ),
    Ok(
        "IntroFmv_Update(void)",
    ),
    Ok(
        "ModuleInfo<CrikeyChum> virtual table",
    ),
    Ok(
        "Shears_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Wombat::IdleInit(void)",
    ),
    Ok(
        "Groper::UpdatePosition(Vector *, bool, float)",
    ),
    Ok(
        "Emu::BeingPulled(bool)",
    ),
    Ok(
        "LODManager::CalcAlpha(Vector *, float)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<BlueTongueThrower>::ConstructObject(void *)",
    ),
    Ok(
        "Ty::AddFootPrint(bool, FootSide, bool)",
    ),
    Ok(
        "MKWater::RemoveWaterPropFromType(MKWaterProp *)",
    ),
    Ok(
        "Talisman_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Texture::CreateMpegTarget(char *, void *, int, int)",
    ),
    Ok(
        "MKWater::debugNumQuadsInvisible",
    ),
    Ok(
        "MiniGameC2_Init(void)",
    ),
    Ok(
        "Bilby_ShowAll(void)",
    ),
    Ok(
        "WaterDragon_LoadResources(void)",
    ),
    Ok(
        "ShadowBat::FlyToHoverPosDeinit(void)",
    ),
    Ok(
        "CableCar::Deinit(void)",
    ),
    Ok(
        "CrRand(void)",
    ),
    Ok(
        "WaterfallSprayStruct::mistEnvelope",
    ),
    Ok(
        "Eel::ChaseInit(void)",
    ),
    Ok(
        "PauseScreen_Continue_Update(void)",
    ),
    Ok(
        "CuttleFish::Update_Run(void)",
    ),
    Ok(
        "BunyipStruct::Walk(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::SetKnockBackFromDir(Vector *, float, KnockBackType)",
    ),
    Ok(
        "Ty::RangChange(void)",
    ),
    Ok(
        "Critters_Init(void)",
    ),
    Ok(
        "TempFree(void *)",
    ),
    Ok(
        "Aquarang::InitFired(void)",
    ),
    Ok(
        "AddNodeToTrail(CircularQueue<TrailPoint> *, Vector *, Vector *)",
    ),
    Ok(
        "ModuleInfo<Barracuda> virtual table",
    ),
    Ok(
        "UIButton::SetEnabled(bool)",
    ),
    Ok(
        "AirPlatform::Update(void)",
    ),
    Ok(
        "BreakAndTurnData::TurnRunUpdate(void)",
    ),
    Ok(
        "GameData::SetHasRang(BoomerangType, bool)",
    ),
    Ok(
        "MKSceneManager::CalcZoneVis(void)",
    ),
    Ok(
        "PipePart_Reset(void)",
    ),
    Ok(
        "BushPig::IdleTransition(void)",
    ),
    Ok(
        "Fluffy::MovePistons(void)",
    ),
    Ok(
        "NinjaGecko::nStarObj",
    ),
    Ok(
        "ArsonTorch::Update(void)",
    ),
    Ok(
        "WaterSlide_Start(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CritterField2::bv",
    ),
    Ok(
        "ModuleInfo<MobilePlatform> virtual table",
    ),
    Ok(
        "BuzzSaw2::Wait(void)",
    ),
    Ok(
        "LevelObjective::IsComplete(void)",
    ),
    Ok(
        "Julius::Idle(void)",
    ),
    Ok(
        "ChuteLog::Deinit(void)",
    ),
    Ok(
        "WaterfallStreamStruct::MoveSplash(Blitter_Particle *, WaterfallStreamStruct::SplashData *)",
    ),
    Ok(
        "Coconut_LoadResources(KromeIni *)",
    ),
    Ok(
        "BushPig::HitAntHill(void)",
    ),
    Ok(
        "double type_info node",
    ),
    Ok(
        "Roach::EndFly(void)",
    ),
    Ok(
        "SaveStates_GetSecondRang(void)",
    ),
    Ok(
        "GameObjectManager::SendMessageToAll(MKMessage *, int)",
    ),
    Ok(
        "PauseScreen_ChangeLevel_LoadResources(void)",
    ),
    Ok(
        "LineOfSightObject::Init(unsigned char, float, float, float, float, float, float, float)",
    ),
    Ok(
        "Ty::GetFloorObject(void)",
    ),
    Ok(
        "Tools_Log(int, void *, int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<YabbyObjective>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Elle virtual table",
    ),
    Ok(
        "BlueTongueThrower::Message(MKMessage *)",
    ),
    Ok(
        "MusicalIcicle::VibrateInit(void)",
    ),
    Ok(
        "GameCamera::BiteEffect_Update(void)",
    ),
    Ok(
        "GameCamera::UseCustomVectors(bool, Vector *, Vector *, float *)",
    ),
    Ok(
        "RenderTexture_WaterSlideLine(KromeIniLine *)",
    ),
    Ok(
        "Tick::Init(GameObjDesc *)",
    ),
    Ok(
        "Level_Load(char *)",
    ),
    Ok(
        "Ty::InitSneak(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Maurie::Message(MKMessage *)",
    ),
    Ok(
        "GameCamera::PlayerAdjust_AdjustHeightRotation(void)",
    ),
    Ok(
        "Matrix::RotateYaw(float)",
    ),
    Ok(
        "global constructors keyed to BuzzSaw2_LoadResources(KromeIni *)",
    ),
    Err(
        InvalidSpecialMethod(
            "negdf2",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverride::Path_Init(void)",
    ),
    Ok(
        "Gate::Closing_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScrubTurkey::CheckReachedWayPoint(Vector *)",
    ),
    Ok(
        "Rock::AddShadow(void)",
    ),
    Ok(
        "GameCamera::Pontoon_SetNewDirection(void)",
    ),
    Ok(
        "ShearsStruct::Reset(void)",
    ),
    Ok(
        "Portal::Reset(void)",
    ),
    Ok(
        "Spear virtual table",
    ),
    Ok(
        "NinjaGecko::Hit(void)",
    ),
    Ok(
        "Lava::InitModule(void)",
    ),
    Ok(
        "Boomerang_CheckForHit(Model *, int, CollisionResult *)",
    ),
    Ok(
        "Ty::Warp(void)",
    ),
    Ok(
        "Parser::GrabComment(void)",
    ),
    Ok(
        "SnowGun::LoadDone(void)",
    ),
    Ok(
        "Rhino::InitTurnAround(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_GameInfo_Deinit(void)",
    ),
    Ok(
        "ModuleInfo<RedButton>::ConstructObject(void *)",
    ),
    Ok(
        "Rufus::Alert(void)",
    ),
    Ok(
        "ModuleInfo<BlueTongue> virtual table",
    ),
    Ok(
        "RandomVector(Vector *, float, float, float)",
    ),
    Ok(
        "MKProp::Update(void)",
    ),
    Ok(
        "Rhino::DenitStartAggressive(void)",
    ),
    Ok(
        "Bull::ChargeInit(void)",
    ),
    Ok(
        "StalactiteTrap::Reset(void)",
    ),
    Ok(
        "Hud::LoadResources(void)",
    ),
    Ok(
        "CrateStruct::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Ty::FindItemTransition(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_SaveGame_OnEnter(void)",
    ),
    Ok(
        "Game_Draw(void)",
    ),
    Ok(
        "SaveGameInfoDisplay::Init(char *)",
    ),
    Ok(
        "Setup_PostLoadLevel(void)",
    ),
    Ok(
        "Ty::AddWake(void)",
    ),
    Ok(
        "ModuleInfo<MiniGameObjective>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<SnowGunAmmo>::ConstructObject(void *)",
    ),
    Ok(
        "Leech::Retarget(void)",
    ),
    Ok(
        "PlatformRider::Init(void)",
    ),
    Ok(
        "Video_Create(char *, Material *)",
    ),
    Ok(
        "Dma::Init(DmaChannel, unsigned int, char *)",
    ),
    Ok(
        "Bunyip_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EnemyRefPoints::Init(Model *)",
    ),
    Ok(
        "ModuleInfo<KoalaKid> virtual table",
    ),
    Ok(
        "GameCamera::AutoPlayerAdjust_Update(void)",
    ),
    Ok(
        "FrontEnd_LoadLevel_Update(void)",
    ),
    Ok(
        "ShadowBat::HoverIdle(void)",
    ),
    Ok(
        "Roach::RecoverInit(void)",
    ),
    Ok(
        "Matrix::RotatePitch(float)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongue::Bitten(void)",
    ),
    Ok(
        "RingoArm::GetPos(void)",
    ),
    Ok(
        "GameData::CollectGem(bool)",
    ),
    Ok(
        "Emu::Stopped(void)",
    ),
    Ok(
        "Ty::UnderWaterMediumInit(void)",
    ),
    Ok(
        "GameCamera_UseAnimation(bool, Animation *, Matrix *)",
    ),
    Ok(
        "Projectile::Fire(Vector *)",
    ),
    Ok(
        "CameraOverridePath_Start(void)",
    ),
    Ok(
        "EnableRangs(void)",
    ),
    Ok(
        "GameData::SetHasThunderEgg(ThunderEggType, bool)",
    ),
    Ok(
        "MKWaterProp::DrawStripDebugInfo(WaterStripHeader *)",
    ),
    Ok(
        "Portal::SetOrientation(void)",
    ),
    Ok(
        "RingoArm::SetState(RingoArmState)",
    ),
    Ok(
        "VibrateJoystick(float, float, float, char, float)",
    ),
    Err(
        InvalidSpecialMethod(
            "cplus_type_matcher",
        ),
    ),
    Ok(
        "CameraOverride::SetCameraDescriptor(CameraDescriptor *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Leech::FireDeinit(void)",
    ),
    Ok(
        "SynkerFrog::LoadDone(void)",
    ),
    Ok(
        "MKGrass_Deinit(void)",
    ),
    Ok(
        "ModuleInfo<NinjaGecko> virtual table",
    ),
    Ok(
        "GameCamera::WaterSlide_Init(void)",
    ),
    Ok(
        "ModuleInfo<FlameThrower>::Init(void)",
    ),
    Ok(
        "UITransition::Show(void)",
    ),
    Ok(
        "InvisiCrate virtual table",
    ),
    Ok(
        "View::pCurrentView",
    ),
    Ok(
        "Shark::Reset(void)",
    ),
    Ok(
        "NinjaGecko::Init(GameObjDesc *)",
    ),
    Ok(
        "Shadow::AddAnimatingShadow(char *, Model *, float, Vector *)",
    ),
    Ok(
        "ModuleInfo<AntHill>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::UnpackTemplate(char *, WaterTemplateData *)",
    ),
    Ok(
        "GameSubStateFSM::bInitialised",
    ),
    Ok(
        "View::DeinitModule(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TyMemCard_IsAutoSaving(void)",
    ),
    Ok(
        "ProgressBar::Init3d(char *, char *, Vector *, float, int, float)",
    ),
    Ok(
        "MKWaterManager_DeinitWaterTypes(void)",
    ),
    Ok(
        "Steam::type",
    ),
    Ok(
        "SynkerFrogDesc::Load(KromeIni *)",
    ),
    Ok(
        "ChumBox::Message(MKMessage *)",
    ),
    Ok(
        "FrontEnd_Extras_Init(void)",
    ),
    Ok(
        "PickupCounter::LoadDone(void)",
    ),
    Ok(
        "Ty::KnockBack(void)",
    ),
    Ok(
        "GameCameraPoint::SetFloor(float, unsigned int)",
    ),
    Ok(
        "NinjaGecko::Kipup(void)",
    ),
    Ok(
        "BadBoonie::AlertPause_Update(void)",
    ),
    Ok(
        "ShoalFish::SetState(FishShoalStates)",
    ),
    Ok(
        "Furnace_LoadResources(KromeIni *)",
    ),
    Ok(
        "Main_LogicAdjustCamera(void)",
    ),
    Ok(
        "Parser::SkipSpaces(void)",
    ),
    Ok(
        "ModuleInfo<NinjaGecko>::Init(void)",
    ),
    Ok(
        "ModuleInfo<Tick>::Init(void)",
    ),
    Ok(
        "ShadowBat::Steam(void)",
    ),
    Ok(
        "MorayEel::mainAnimScript",
    ),
    Ok(
        "Font::DeinitModule(void)",
    ),
    Ok(
        "Animation::GetName(void)",
    ),
    Ok(
        "C1Water::LoadDone(void)",
    ),
    Ok(
        "CameraOverride::NewTarget(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Wombat::Draw(void)",
    ),
    Ok(
        "Portal::Idle(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "UIButtonGroup::Update(void)",
    ),
    Ok(
        "OpalCrate::Init(GameObjDesc *)",
    ),
    Ok(
        "DrawUnderWaterQuad(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to CuttleFish_LoadResources(void)",
    ),
    Ok(
        "ModuleInfo<SmallCrab>::ConstructObject(void *)",
    ),
    Ok(
        "CableCar::Draw(void)",
    ),
    Ok(
        "Sly::Flinch(void)",
    ),
    Ok(
        "StaticSpikes_Draw(void)",
    ),
    Ok(
        "UnderWaterEffects_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::SurfaceKnockBackDeinit(void)",
    ),
    Ok(
        "ShadowBatStalactite::Update(void)",
    ),
    Ok(
        "FallGuide::Update(Vector *)",
    ),
    Ok(
        "GuideParticle::Update(void)",
    ),
    Ok(
        "Particle_Dust_Create(ParticleSystem **, Vector *, Vector *, float, float)",
    ),
    Ok(
        "Lenny::IsAnimPlaying(tagLennyAnim)",
    ),
    Ok(
        "Lenny::Retreat(void)",
    ),
    Ok(
        "GCT_WaypointPlaneManager::SetSourceLinePos(Vector *, float, int, int, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameSubStateFSM::MiniGame_C3_Init(void)",
    ),
    Ok(
        "GameObject::LoadLine(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Material::UpdateCounter(void)",
    ),
    Ok(
        "Collision_SweepSphereCollideDynamicModel(SphereRay *, CollisionResult *, DynamicItem *)",
    ),
    Ok(
        "Sly::SkidDeinit(void)",
    ),
    Ok(
        "ThrowingStar::Init(GameObjDesc *)",
    ),
    Ok(
        "ShadowBatValve::Init(GameObjDesc *)",
    ),
    Ok(
        "WarpFlower::PostLaunchUpdate(void)",
    ),
    Ok(
        "LowerChar(char)",
    ),
    Ok(
        "Camera::Deinit(void)",
    ),
    Ok(
        "FallGuide::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Ty::Glide(void)",
    ),
    Ok(
        "__pointer_type_info type_info node",
    ),
    Ok(
        "Sly::IdleInit(void)",
    ),
    Ok(
        "Dennis::MoveToPrevPoint_Init(void)",
    ),
    Ok(
        "LetterBox_Reset(void)",
    ),
    Ok(
        "UIButtonGroup::Reset(int)",
    ),
    Ok(
        "Particle_Update(void)",
    ),
    Ok(
        "SnowBallExplode::Spawn(Vector *, Vector *, BoundingVolume *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dennis::Idle_Update(void)",
    ),
    Ok(
        "MorayEel::nMouth",
    ),
    Ok(
        "DDACheckpoint::Init(GameObjDesc *)",
    ),
    Ok(
        "Fly::Update_FindPoint(void)",
    ),
    Ok(
        "GameCamera_Shake(Vector *)",
    ),
    Ok(
        "Sly::ThrowRangs(void)",
    ),
    Ok(
        "Dennis::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "ModuleInfo<PipePart>::ConstructObject(void *)",
    ),
    Ok(
        "SpecialPickupStruct::Idle(void)",
    ),
    Ok(
        "Material::AddToRenderList(void *, int, float)",
    ),
    Ok(
        "GameCamera::JumpAdjustSource_Update(void)",
    ),
    Ok(
        "Teleporter::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "File_SyncAll(void)",
    ),
    Ok(
        "GameData::SetThunderEgg(ThunderEggType, SpecialPickupStruct *)",
    ),
    Ok(
        "MKParticleGen::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WayPoint_Line(KromeIniLine *, WayPointLoadInfo *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FireworksCrate::Dropping(void)",
    ),
    Ok(
        "Shears_Draw(void)",
    ),
    Ok(
        "ShadowBat::TakeOffInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterDrip::waterDripType",
    ),
    Ok(
        "Eel::FlinchInit(void)",
    ),
    Ok(
        "DialogPlayer::UpdateCamera(void)",
    ),
    Ok(
        "DialogPlayer::ProcessSubtitles(void)",
    ),
    Ok(
        "ModuleInfo<BadBoonie>::ConstructObject(void *)",
    ),
    Ok(
        "Emu_FindClosest(Vector *, float)",
    ),
    Err(
        InvalidSpecialMethod(
            "negsf2",
        ),
    ),
    Ok(
        "EnemyWaypoints::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "SharkCage::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TrapdoorSpider::UpdateFloorNormal(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "sfp",
        ),
    ),
    Ok(
        "ShadowBat::BounceTyByWhiteBat(void)",
    ),
    Ok(
        "FrillLizard::DeathByRangInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ParticleSystemManager::DrawDebug(float, float *)",
    ),
    Ok(
        "SimpleParticleSystemType::Update(ParticleSystem *)",
    ),
    Ok(
        "Tick::Message(MKMessage *)",
    ),
    Ok(
        "Geyser::LoadDone(void)",
    ),
    Ok(
        "Damageable::LoadDone(void)",
    ),
    Ok(
        "DustTrail::Update(Vector *, Vector *, float, float)",
    ),
    Ok(
        "System_SwapDisplayBuffers(void)",
    ),
    Ok(
        "ModuleInfo<Bouncer>::ConstructObject(void *)",
    ),
    Ok(
        "Gate::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Str_CompareUnicode(unsigned short *, unsigned short *)",
    ),
    Ok(
        "Groper::Swallow(void)",
    ),
    Ok(
        "BushPig::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Matrix::Transpose3x3(Matrix *)",
    ),
    Ok(
        "Skink::Taunt(void)",
    ),
    Ok(
        "Gem_LoadResources(KromeIni *)",
    ),
    Ok(
        "EnemyObject::GetRadius(void)",
    ),
    Ok(
        "Pontoon_LoadResources(KromeIni *)",
    ),
    Ok(
        "Wombat_LoadResources(KromeIni *)",
    ),
    Ok(
        "Rock::ResolveHit(void)",
    ),
    Ok(
        "GameCamera::UseCurrentVector(bool)",
    ),
    Ok(
        "Gem::CalcShadowPos(void)",
    ),
    Ok(
        "ApproxMag(Vector *, Vector *)",
    ),
    Ok(
        "Matrix::Translate(Matrix *, Vector *)",
    ),
    Ok(
        "unsigned long long type_info function",
    ),
    Ok(
        "ScreenEffect_Deinit(void)",
    ),
    Ok(
        "Bilby_Line(KromeIniLine *)",
    ),
    Ok(
        "Farlapp::Reset(void)",
    ),
    Ok(
        "FrillLizard::RepairPipe(void)",
    ),
    Ok(
        "WaterSlide::instanceCount",
    ),
    Ok(
        "Shatter_Init(void)",
    ),
    Ok(
        "MKWater::randomNumberTable",
    ),
    Ok(
        "TrapdoorSpider::Patrol(void)",
    ),
    Ok(
        "ShearsStruct::CheckForTy(void)",
    ),
    Ok(
        "Tools_MatriceRotate(float, Vector *, Matrix *)",
    ),
    Ok(
        "Ty::InitPreWarp(void)",
    ),
    Ok(
        "Matrix::RotateQ(QuatRotation *)",
    ),
    Ok(
        "ModuleInfo<KenOath> virtual table",
    ),
    Ok(
        "ScrubTurkey::Idle_Init(void)",
    ),
    Ok(
        "SoundProp::Update(void)",
    ),
    Ok(
        "LilyPad_LoadResources(KromeIni *)",
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_av_",
        ),
    ),
    Ok(
        "BadBoonie::Idle_CanGoToState(void)",
    ),
    Ok(
        "BadBoonie::CheckReachedWayPoint(Vector *)",
    ),
    Ok(
        "PubeCrab_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Fly::Assign(CritterField2 *)",
    ),
    Ok(
        "PipePart_AssignRepairer(GameObject *, GameObject *)",
    ),
    Ok(
        "IceBlock_Init(void)",
    ),
    Ok(
        "Groper::SwallowDeinit(void)",
    ),
    Ok(
        "Groper::CruiseInit(void)",
    ),
    Ok(
        "Ty_Deinit(void)",
    ),
    Ok(
        "GameData::SetLearntToDive(bool)",
    ),
    Ok(
        "Tick::AttackInit(void)",
    ),
    Ok(
        "Crate_IsMember(MKPropDescriptor *)",
    ),
    Ok(
        "ModuleInfo<DialogProp>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<FireDrum>::Init(void)",
    ),
    Ok(
        "ScubaFrill virtual table",
    ),
    Ok(
        "Neddy::TauntInit(void)",
    ),
    Ok(
        "Tools_SetNode(Animation *, int, Matrix *, Tools_SetNodeFlag)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lasso::InitLassoCaughtEmu(void)",
    ),
    Ok(
        "global constructors keyed to ScubaFrill_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScrubTurkey::PassThunderEgg(void)",
    ),
    Ok(
        "DialogProp::SendYesEvent(void)",
    ),
    Ok(
        "GameCamera::UseElevatorCamera(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BezierPathFollower::AtLastPoint(void)",
    ),
    Ok(
        "MobilePlatform_LoadResources(KromeIni *)",
    ),
    Ok(
        "BubbleSpawner::Deinit(void)",
    ),
    Ok(
        "TyBite::ApplyGravity(void)",
    ),
    Ok(
        "Spline::GetPosition(float)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_B3_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Crikey::FinishEatingChum(void)",
    ),
    Ok(
        "GameCameraPoint::Clamp(bool)",
    ),
    Ok(
        "IceCoolant::GetState(void)",
    ),
    Ok(
        "QuatRotation::InterpolateLinear(QuatRotation *, QuatRotation *, float)",
    ),
    Ok(
        "NinjaGecko::CrawlIdleDeinit(void)",
    ),
    Ok(
        "Ty::UnderWaterIdleTransition(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SynkerBlueTongue::LoadDone(void)",
    ),
    Ok(
        "RhinoGround::DeathDeInit(void)",
    ),
    Ok(
        "Kin_GetDiscreteAcceleration(float *, float *, float *, float *)",
    ),
    Ok(
        "IceBlockStruct::SetPos(Vector *)",
    ),
    Ok(
        "PathSegment::CalcLengths(void)",
    ),
    Ok(
        "global constructors keyed to CritterField2Desc::InitLevel(void)",
    ),
    Ok(
        "EnemyObject_UpdateDebug(void)",
    ),
    Ok(
        "TyParticleManager::SpawnShockGlow(Vector *, float)",
    ),
    Ok(
        "DialogEffectManager::effects",
    ),
    Ok(
        "TyParticleManager::SpawnGhostSmoke(Vector *, int)",
    ),
    Ok(
        "Speedboat::Reset(void)",
    ),
    Ok(
        "Spider_Draw(void)",
    ),
    Ok(
        "BlueTongue::ThrowRockInit(void)",
    ),
    Ok(
        "TyParticleManager::SpawnWaterDropBlue(Vector *, Vector *, float)",
    ),
    Ok(
        "AnimatingProp_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SeaMine::ChainExplosion(void)",
    ),
    Ok(
        "Friend::PostUpdate(void)",
    ),
    Ok(
        "SnowSpider::Init(GameObjDesc *)",
    ),
    Ok(
        "RainbowScaleObjective::Reset(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "sread",
        ),
    ),
    Ok(
        "FrillBike::Ride(float, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKAnimScript::HasLooped(void)",
    ),
    Ok(
        "Vector::SignedDistanceToPlane(Vector *, Vector *)",
    ),
    Ok(
        "Shark::LogicUpdate(void)",
    ),
    Ok(
        "UIModel::Init(char *, char *)",
    ),
    Ok(
        "MKParticleGen::DrawLines(View *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LetterBox_Init(LetterBox *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_OptionScreen_LoadResources(void)",
    ),
    Ok(
        "SignPost::Init(GameObjDesc *)",
    ),
    Ok(
        "GameCamera_UseWaterSlideCamera(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "type_info::~type_info(void)",
    ),
    Ok(
        "Teleport::type",
    ),
    Ok(
        "Maurie_IsLanding(void)",
    ),
    Ok(
        "FrontEnd_MainMenu_Draw(void)",
    ),
    Ok(
        "Elevator::Deinit(void)",
    ),
    Ok(
        "MobilePlatform::Init(GameObjDesc *)",
    ),
    Ok(
        "MKAnimScript::Exists(char *)",
    ),
    Ok(
        "TyBite::DrawSuperGlow(void)",
    ),
    Ok(
        "Julius::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "TryChangeState(bool, BushPigState)",
    ),
    Ok(
        "BoomerangManager::Init(BoomerangManagerInit *)",
    ),
    Ok(
        "GameCameraPointsDelta::SetIdealDeltas(float, float, DeltaType, bool, float)",
    ),
    Ok(
        "DDASession::Init(void)",
    ),
    Ok(
        "DiveRing virtual table",
    ),
    Ok(
        "Groper::SpitDeinit(void)",
    ),
    Ok(
        "EmuRoundupObjective::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "BushPig::DeinitHitWall(void)",
    ),
    Ok(
        "RenderTexture_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DiveRing::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Elevator::TyOnElevator(void)",
    ),
    Ok(
        "ModuleInfo<MusicalIcicle> virtual table",
    ),
    Ok(
        "CameraOverrideHigh_Reset(void)",
    ),
    Ok(
        "TyFSM::Init(TyFSM::State *, HeroActorState)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<TurningPlatform>::Init(void)",
    ),
    Ok(
        "Dma::AddVif_FLUSHA(void)",
    ),
    Ok(
        "MKWater::staticDataUploaded",
    ),
    Ok(
        "NinjaGecko::DeathInit(void)",
    ),
    Ok(
        "BonusPickup::SpawningInit(void)",
    ),
    Ok(
        "SpecialPickupStruct::Collecting(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Hud_ShowHealthMeter(bool)",
    ),
    Ok(
        "Talisman virtual table",
    ),
    Ok(
        "GameCamera_InitModule(unsigned int *)",
    ),
    Ok(
        "SimpleParticleSystemType::SetEnvelope(int, ParticleEnvelope *)",
    ),
    Ok(
        "WaterSlideManager::GetCurrWayPtNum(void)",
    ),
    Ok(
        "ModuleInfo<Burnable>::Init(void)",
    ),
    Ok(
        "PE_FrostyBreath_LoadResources(void)",
    ),
    Ok(
        "Shadow_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Gem_PickupParticle_Draw(void)",
    ),
    Ok(
        "LearnToDiveData::Jump(void)",
    ),
    Ok(
        "SpecialPickupStruct::Update(void)",
    ),
    Ok(
        "Ty::SwimSelectIdleOrMove(void)",
    ),
    Ok(
        "Ty::InitLongFall(void)",
    ),
    Ok(
        "Boomerang::DoCurvedTargeting(float)",
    ),
    Ok(
        "ModuleInfo<SpyEgg> virtual table",
    ),
    Ok(
        "Lenny::TweenAnim(tagLennyAnim, short)",
    ),
    Ok(
        "Yabby::AttackInit(void)",
    ),
    Ok(
        "FrillLizard::AttackIdlePunch(bool)",
    ),
    Ok(
        "MiniGameObjective::GetDesc(void)",
    ),
    Ok(
        "ProgressBar::IncrementProgress(void)",
    ),
    Ok(
        "Emu::InitDrag(void)",
    ),
    Ok(
        "AuroraKid_ListStart(int *)",
    ),
    Ok(
        "Emu::DeinitFight(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_lock",
        ),
    ),
    Ok(
        "GS_ClearRegs(void)",
    ),
    Ok(
        "Groper::Init(GameObjDesc *)",
    ),
    Ok(
        "MKWater::pMenu",
    ),
    Ok(
        "ModuleInfo<AquarangProp>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CrikeyCanister::CheckBoomerangs(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_fmodf",
        ),
    ),
    Ok(
        "DialogPlayer::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Emu::DeinitBreakout(void)",
    ),
    Ok(
        "GameCamera::Launch_Init(void)",
    ),
    Ok(
        "Moth virtual table",
    ),
    Ok(
        "EnemyWaypoints::Init(void)",
    ),
    Ok(
        "TyFSM::Set(HeroActorState)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Croc::LogicUpdate(void)",
    ),
    Ok(
        "Bull::UpdatePath(GameObject *)",
    ),
    Ok(
        "ModuleInfo<MusicalIcicleObjective>::ConstructObject(void *)",
    ),
    Ok(
        "global constructors keyed to C3_Ringo_LoadResources(KromeIni *)",
    ),
    Ok(
        "Crikey::StartEatingChum(void)",
    ),
    Ok(
        "CritterCruiseMove::Init(void)",
    ),
    Ok(
        "Material::Create(char *)",
    ),
    Ok(
        "OpalCollector::Message(MKMessage *)",
    ),
    Ok(
        "C3Chest::GetDropPos(void)",
    ),
    Ok(
        "GreySmoke::greySmokeType",
    ),
    Ok(
        "SnowSpider::ChaseInit(void)",
    ),
    Ok(
        "PubeCrab::WaitInit(void)",
    ),
    Ok(
        "Croc::Cruise(void)",
    ),
    Ok(
        "CameraOverride::High_Update(void)",
    ),
    Ok(
        "KingFisherField::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "BushPig::AnimateUsingDistance(float, float)",
    ),
    Ok(
        "Gecko::UpdateWorldMatrix(void)",
    ),
    Ok(
        "ModuleInfo<KingFisher>::ConstructObject(void *)",
    ),
    Ok(
        "Animation::Tween(float, float)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Heap_MemAllocAligned(int, int)",
    ),
    Ok(
        "Particle_BullSplash_Init(ParticleSystem **, Vector *)",
    ),
    Ok(
        "MKShadow_EndScene(void)",
    ),
    Ok(
        "Portal_Draw(Portal *)",
    ),
    Ok(
        "global constructors keyed to SMOKE_SOURCE_L",
    ),
    Ok(
        "MKWater::SortWaterPropsByType(void)",
    ),
    Ok(
        "GameCamera::CustomCameraMatrix_Deinit(void)",
    ),
    Ok(
        "GameData::RescueBilby(BilbyType)",
    ),
    Ok(
        "BarbedWire_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillBike::InitParticles(void)",
    ),
    Ok(
        "Bat::Deinit(void)",
    ),
    Ok(
        "GameCamera::SetHeroInfo(GameCameraHeroInfo *)",
    ),
    Ok(
        "ModuleInfo<AirPlatform>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<BonusPickup>::ConstructObject(void *)",
    ),
    Ok(
        "Crikey::CheckWake(void)",
    ),
    Ok(
        "BlueTongue::Hit(void)",
    ),
    Ok(
        "Wombat::Message(MKMessage *)",
    ),
    Ok(
        "Gem_FireCustomUpdate(ParticleSystem *)",
    ),
    Ok(
        "Ty::InitIdleDogPaddle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CompareModelRenderFunc(VUFunction const *, VUFunction const *)",
    ),
    Ok(
        "ModuleInfo<BuzzSaw2> virtual table",
    ),
    Ok(
        "GameData::Reset(LevelNumber)",
    ),
    Ok(
        "SpyEgg::Reset(void)",
    ),
    Ok(
        "MetalSpikes_LoadResources(KromeIni *)",
    ),
    Ok(
        "Blitter_Image::Draw(int, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Roach::Flip(void)",
    ),
    Ok(
        "Ty::GetNodesAndSubObjects(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Elevator::WaitState(void)",
    ),
    Ok(
        "MiniBoulder_Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Hud_DrawLives(void)",
    ),
    Ok(
        "Wake_Init(void)",
    ),
    Ok(
        "EnemyObject::LogicUpdate(void)",
    ),
    Ok(
        "AirPlatform::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FallGuideProp::Init(GameObjDesc *)",
    ),
    Ok(
        "ModuleInfo<Shatterable>::Init(void)",
    ),
    Ok(
        "SoundMaterial::Play(Vector *, int, SoundEvent *)",
    ),
    Ok(
        "FaderObject::GetNextState(FaderObject::FadeState, FaderObject::FadeMode)",
    ),
    Ok(
        "Lenny::eventLeftFoot",
    ),
    Ok(
        "SynkerBlueTongue::Draw(void)",
    ),
    Ok(
        "ShadowBatStalactite::Init(GameObjDesc *)",
    ),
    Ok(
        "SeaMine::ReSpawnInit(void)",
    ),
    Ok(
        "LevelObjective::Increment(void)",
    ),
    Ok(
        "Tools_CollisionBounce(Vector *, Vector *, CollisionResult *, float)",
    ),
    Ok(
        "TriggerSphereProp::IsTyInZone(void)",
    ),
    Ok(
        "Furnace::Init(GameObjDesc *)",
    ),
    Ok(
        "CrateStruct::waypoints",
    ),
    Ok(
        "ScubaFrill::Reset(void)",
    ),
    Ok(
        "BoundingRegion::Init(PathSegment *)",
    ),
    Ok(
        "ModuleInfo<Torch>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "HeatFlare_Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sentinel::ToppleDeath(void)",
    ),
    Ok(
        "NodeOverride_Init(NodeOverride *, Animation *, Matrix *, int)",
    ),
    Ok(
        "EnemySpawner::GetAvailableEnemy(void)",
    ),
    Ok(
        "Str_UnicodeToChar(unsigned short *)",
    ),
    Ok(
        "AuroraKid::Draw(void)",
    ),
    Ok(
        "LavaBurner virtual table",
    ),
    Ok(
        "Farlapp::Draw(void)",
    ),
    Ok(
        "CameraOverride::TopDown_Create(void *)",
    ),
    Ok(
        "Rex::RaceInit(void)",
    ),
    Ok(
        "SaveStates_GetBilby(char *, int)",
    ),
    Ok(
        "MKWaterManager_Init(int)",
    ),
    Ok(
        "ReflectionStruct::Update(void)",
    ),
    Ok(
        "Bubble_CustomUpdate(ParticleSystem *)",
    ),
    Ok(
        "NinjaGecko::Reset(void)",
    ),
    Ok(
        "GameCamera::UseUnderwaterCamera(bool)",
    ),
    Ok(
        "TimeAttack_OnRace(void)",
    ),
    Ok(
        "Dma::AddGif_AD_TEX2_1(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "SnowBallExplode::snowBallType",
    ),
    Ok(
        "ModuleInfo<Talisman>::Init(void)",
    ),
    Ok(
        "C3Chest virtual table",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lenny::TurnToPoint(Vector *)",
    ),
    Ok(
        "Leech::Init(GameObjDesc *)",
    ),
    Ok(
        "TyHealth::Deinit(void)",
    ),
    Ok(
        "GameData::SetCollectedGems(int)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "VU1Manager::LoadCodeMPG(unsigned int *, unsigned int *, int, int)",
    ),
    Ok(
        "void LoadDescriptors<MobilePlatformDesc>(KromeIni *, char *, MobilePlatformDesc *)",
    ),
    Ok(
        "TyFSM::AirState(int)",
    ),
    Ok(
        "UniformSpline::RegulateSpeed(void)",
    ),
    Ok(
        "MKAnimScript::ApplyNode(Animation *, int)",
    ),
    Ok(
        "Rex::BubbleUpdate(int)",
    ),
    Ok(
        "Font::DrawString(char *, float, float, Matrix *, int, unsigned int, void (*)(Font::TextCharStrip *, int), void (*)(Font::TextCharStrip *, int))",
    ),
    Ok(
        "Gecko::GenerateInitialPostion(void)",
    ),
    Ok(
        "Tools_AnimEventManager::Init(Tools_AnimEventDesc *)",
    ),
    Ok(
        "StreamBuffer::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rhino::InitIdle(void)",
    ),
    Ok(
        "GameCamera_OverrideHigh_Add(CameraOverrideHighLoadInfo *)",
    ),
    Ok(
        "CheckpointStruct::Draw(void)",
    ),
    Ok(
        "Crikey::DeathDeinit(void)",
    ),
    Ok(
        "GameCamera::CycleDistance(int, bool)",
    ),
    Ok(
        "Matrix::Multiply(Matrix *)",
    ),
    Ok(
        "Material::ScrollUVOffset(float, float)",
    ),
    Ok(
        "Shark::LookOutInit(void)",
    ),
    Ok(
        "StalactiteTrap virtual table",
    ),
    Ok(
        "Dma::stackTopIndex",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterSlideData::Slow(void)",
    ),
    Ok(
        "SpyEgg::Init(GameObjDesc *)",
    ),
    Ok(
        "DiveRing::ThroughRing(void)",
    ),
    Ok(
        "DiveRing::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Rock::DamageTy(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Shazza>::ConstructObject(void *)",
    ),
    Ok(
        "Bat::IsTyVisible(void)",
    ),
    Ok(
        "FireWorks::Reset(void)",
    ),
    Ok(
        "QuatRotation::Dot(QuatRotation *)",
    ),
    Ok(
        "MKWater::bUseVUCode",
    ),
    Ok(
        "BeachHut::Burn(void)",
    ),
    Ok(
        "Damageable virtual table",
    ),
    Ok(
        "DropPontoon virtual table",
    ),
    Ok(
        "Ty::DeinitDogPaddle(void)",
    ),
    Ok(
        "bad_cast::~bad_cast(void)",
    ),
    Ok(
        "NinjaGecko::LeapStartInit(void)",
    ),
    Ok(
        "ScubaFrill_LoadResources(KromeIni *)",
    ),
    Ok(
        "Drum::Hit(void)",
    ),
    Ok(
        "Shark::Turn(void)",
    ),
    Ok(
        "SpeedboatObjective virtual table",
    ),
    Ok(
        "Speedboat::Draw(void)",
    ),
    Ok(
        "BlueTongue::Alert(bool)",
    ),
    Ok(
        "Furnace::Explode(void)",
    ),
    Ok(
        "Rufus::ConfrontInit(void)",
    ),
    Ok(
        "RedButton::Hit(void)",
    ),
    Ok(
        "CaveBat::FlyBackDeinit(void)",
    ),
    Ok(
        "Speedboat::DeinitFlinch(void)",
    ),
    Ok(
        "ModuleInfo<FireDrum> virtual table",
    ),
    Ok(
        "MiniGameObjective::LoadDone(void)",
    ),
    Ok(
        "Collision_SphereCollide(Vector *, float, CollisionResult *, int, int)",
    ),
    Ok(
        "IceBlockStruct::BergQuickShatter(void)",
    ),
    Ok(
        "MiniGameC3_Deinit(void)",
    ),
    Ok(
        "ZoomerangHud::SetZoom(void)",
    ),
    Ok(
        "StopwatchStruct::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "__si_type_info virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "C3Chest::Draw(void)",
    ),
    Ok(
        "Frostyrang::CollideWithEnvironment(CollisionResult *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBat::LogicUpdate(void)",
    ),
    Ok(
        "GameSubStateFSM::Deinit(void)",
    ),
    Ok(
        "FrontEnd_MainMenu_Update(void)",
    ),
    Ok(
        "Talisman::Update(void)",
    ),
    Ok(
        "BoundingRegion::ArePointsWithinAndAdjacent(Vector *, Vector *)",
    ),
    Ok(
        "Rhino::InitRecover(void)",
    ),
    Ok(
        "BossHud::Reset(void)",
    ),
    Ok(
        "GasJet::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Wombat::Stop(void)",
    ),
    Ok(
        "FrillLizard::RepairPipeInit(void)",
    ),
    Ok(
        "TyMemCard_SetState(TyMemCardState, int)",
    ),
    Ok(
        "GameData::Deinit(void)",
    ),
    Ok(
        "Furnace::Open(void)",
    ),
    Ok(
        "AntHill_Next(AntHill *)",
    ),
    Ok(
        "BushPig::InitDeath(void)",
    ),
    Ok(
        "Tools_LinePlaneIntersection(Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "MKSceneManager::AddOcclusionModel(Model *)",
    ),
    Ok(
        "SnowSpider::PatrolInit(void)",
    ),
    Ok(
        "Moth::Assign(CritterField2 *)",
    ),
    Ok(
        "BezierPathFollower::DrawPath(float)",
    ),
    Ok(
        "Jeep::Moving(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CheckpointStruct::Deinit(void)",
    ),
    Ok(
        "Hud_LoadResources(void)",
    ),
    Ok(
        "FireDrum::nFlameRef",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dialog_LoadResources(KromeIni *)",
    ),
    Ok(
        "KidObjective::Message(MKMessage *)",
    ),
    Ok(
        "RingoArm::IdleInit(void)",
    ),
    Ok(
        "GameCamera::PlayerAdjust_Init(void)",
    ),
    Ok(
        "ZoneBlockerProp virtual table",
    ),
    Ok(
        "Basket_SpawnBonus(Vector *)",
    ),
    Ok(
        "Ibis::Assign(CritterField2 *)",
    ),
    Ok(
        "MKWaterProp::Update(void)",
    ),
    Ok(
        "Barracuda::DeathDeinit(void)",
    ),
    Ok(
        "FrillBike::Idle(void)",
    ),
    Ok(
        "InitializeGame(void)",
    ),
    Ok(
        "TyFSM::SneakState(int)",
    ),
    Ok(
        "MKShadow_SetMetreScale(float)",
    ),
    Ok(
        "Rhino::TurnAround(void)",
    ),
    Ok(
        "GameCamera::AnimatingCamera_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::ResetDrownTimer(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Particle_KickUpDust_Init(ParticleSystem **, Vector *, float)",
    ),
    Ok(
        "Ty::DeinitBreakAndTurn(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_sqrtf",
        ),
    ),
    Ok(
        "GameCamera::AutoPlayerAdjust_Deinit(void)",
    ),
    Ok(
        "Frog::Assign(CritterField2 *)",
    ),
    Ok(
        "Tools_SideOfLine2D(Vector *, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "__si_type_info::dcast(type_info const &, int, void *, type_info const *, void *) const",
    ),
    Ok(
        "TriggerBoxProp::IsTyInZone(void)",
    ),
    Ok(
        "Lasso::LassoCaughtEmu(void)",
    ),
    Ok(
        "Texture::DeinitModule(void)",
    ),
    Ok(
        "SmallCrab::GenerateInitialPosition(void)",
    ),
    Ok(
        "ModuleInfo<TyFlyField>::ConstructObject(void *)",
    ),
    Ok(
        "SpecialPickupStruct::SetState(SpecialPickupState, bool)",
    ),
    Ok(
        "Tools_CapsuleTest(Vector *, Vector *, Vector *, float, bool)",
    ),
    Ok(
        "Game_InitSystem(void)",
    ),
    Ok(
        "SnowGun::animIdle",
    ),
    Ok(
        "RingoArm::GrabbingInit(void)",
    ),
    Ok(
        "TyMemCard_AutoSaveGame(void)",
    ),
    Ok(
        "RingoArm::Reset(void)",
    ),
    Ok(
        "RingoArm::DownInit(void)",
    ),
    Ok(
        "TyMemCard_String(int)",
    ),
    Ok(
        "SoundBank_PlayMusic(MusicType, float, float)",
    ),
    Ok(
        "GameCamera_UseEnemyCamera(bool)",
    ),
    Ok(
        "AirPlatform::SpawnParticles(Vector *)",
    ),
    Ok(
        "PathManager::NextPoint(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKShadow_CreateAnimatedFromModel(char *)",
    ),
    Ok(
        "SpecialPickup_ShowAll(void)",
    ),
    Ok(
        "Model::GetInverseScaleValue(int)",
    ),
    Ok(
        "BlueTongueRock_LoadResources(KromeIni *)",
    ),
    Ok(
        "Speedboat::propNode",
    ),
    Ok(
        "Ty_Init(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "eh_free",
        ),
    ),
    Ok(
        "Collision_Draw(void)",
    ),
    Ok(
        "PickupCounter::SetCounterTexture(void)",
    ),
    Ok(
        "Draw_DrawPostDrawModels(bool)",
    ),
    Ok(
        "global constructors keyed to SynkerFrillLizard_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Neddy>::Init(void)",
    ),
    Ok(
        "global constructors keyed to FishShoalField::LoadDone(void)",
    ),
    Ok(
        "LilNeddy::Alert(void)",
    ),
    Ok(
        "Leech::AttachInit(void)",
    ),
    Ok(
        "FrillLizard::WalkToWaypoint(void)",
    ),
    Ok(
        "Dma::AddGif_AD_BITBLTBUF(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "AuroraKid_PathReset(void)",
    ),
    Ok(
        "Gem::Collect(void)",
    ),
    Ok(
        "Wombat::ChaseDeinit(void)",
    ),
    Ok(
        "Wallaby::Deinit(void)",
    ),
    Ok(
        "Weather_SetType(int)",
    ),
    Ok(
        "Bull::LogicUpdate(void)",
    ),
    Ok(
        "HealthLivesHud::Update(void)",
    ),
    Ok(
        "OpalCrate::Message(MKMessage *)",
    ),
    Err(
        InvalidSpecialMethod(
            "cp_pop_exception",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SoundProp::Deinit(void)",
    ),
    Ok(
        "Speedboat::LobbingBarrel(void)",
    ),
    Ok(
        "FrillBike::LogicUpdate(void)",
    ),
    Ok(
        "MobilePlatform::GetTime(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::HitWallTransition(void)",
    ),
    Ok(
        "Str_Dup(char *)",
    ),
    Ok(
        "Generator::On(void)",
    ),
    Ok(
        "BoomerangManager::ShowAll(void)",
    ),
    Ok(
        "SnowSpider::IdleInit(void)",
    ),
    Ok(
        "Bat::Flinch(void)",
    ),
    Ok(
        "Portal::Outro(void)",
    ),
    Ok(
        "Tools_PlaneTest(Vector *, Vector *, Vector *)",
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_max_total_mem",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dennis::ReachedTarget_Update(void)",
    ),
    Ok(
        "WaterfallStruct::SpawnWaterfallSplash(Vector *, Vector *, int, float, Blitter_Particle *, WaterfallStruct::SplashData *)",
    ),
    Ok(
        "CameraOverrideManager::EnableAndInitOverride(CameraOverride *, CameraDescriptor *)",
    ),
    Ok(
        "GameObjectManager::GetClosestObjectInRange(Vector *, float, int)",
    ),
    Ok(
        "CaveBat::LoadDone(void)",
    ),
    Ok(
        "UniformSpline::Init(int, bool)",
    ),
    Ok(
        "Ty::Swim(void)",
    ),
    Ok(
        "TotalCount::Init(void)",
    ),
    Ok(
        "MKWaterProp::IsStripLowDetail(WaterStripHeader *)",
    ),
    Ok(
        "WhiteBat::AttackTy(void)",
    ),
    Ok(
        "ModuleInfo<AquarangProp>::ConstructObject(void *)",
    ),
    Ok(
        "FrillBike::CrashDeinit(void)",
    ),
    Ok(
        "BadBoonie::Bitten_Init(void)",
    ),
    Ok(
        "QuatRotation::Multiply(QuatRotation *)",
    ),
    Ok(
        "GameCamera::GetStandardSourceHeight(bool)",
    ),
    Ok(
        "Rex::Idle(void)",
    ),
    Ok(
        "ModuleInfo<CritterField2>::Init(void)",
    ),
    Ok(
        "bad_exception type_info node",
    ),
    Ok(
        "Model::SetAnimation(Animation *)",
    ),
    Ok(
        "UIModel::SetScale(float)",
    ),
    Ok(
        "FrillBike::nRopeAttach",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::LandMediumUpdate(void)",
    ),
    Ok(
        "ShadowBatProps_LoadResources(KromeIni *)",
    ),
    Ok(
        "PE_Goo_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "double type_info function",
    ),
    Ok(
        "Dma::AddGif_AD_ZBUF_2(unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "Model::GetNmbrOfFaces(int)",
    ),
    Ok(
        "Boulder::Start(BoulderTrap *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Mist_Deinit(void)",
    ),
    Ok(
        "FishShoalField::ClampPos(Vector *)",
    ),
    Ok(
        "File_Sync(int, int)",
    ),
    Ok(
        "Platform::UpdateTilt(void)",
    ),
    Ok(
        "Platform::Attach(GameObject *)",
    ),
    Ok(
        "Texture::ResyncDma(void)",
    ),
    Ok(
        "RkvTOC::GetAsyncHandle(void)",
    ),
    Ok(
        "Camera::Reposition(Camera_Mode, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterTankStruct::Reset(void)",
    ),
    Ok(
        "Emu::LoadDone(void)",
    ),
    Ok(
        "WaterSlideData::Jump(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "NinjaGecko::Rebound(void)",
    ),
    Ok(
        "MetalSpikes::Init(GameObjDesc *)",
    ),
    Ok(
        "File_Write(int, void *, int)",
    ),
    Ok(
        "GameCamera_LoadCameraINI(void)",
    ),
    Ok(
        "ModuleInfo<IceCoolant>::ConstructObject(void *)",
    ),
    Ok(
        "SpyEgg::Deinit(void)",
    ),
    Ok(
        "Rhino::InitWhomp(void)",
    ),
    Ok(
        "Crikey::Deinit(void)",
    ),
    Ok(
        "Ty::LongFallTransition(void)",
    ),
    Ok(
        "exception type_info node",
    ),
    Ok(
        "Sly::Message(MKMessage *)",
    ),
    Ok(
        "EnemyObject::CheckForBushPig(void)",
    ),
    Ok(
        "Teleport::Deinit(void)",
    ),
    Ok(
        "BoomerangWeapon::DoCatch(Boomerang *)",
    ),
    Ok(
        "ParticleSystemManager::DestroyParticleSystem(ParticleSystem *)",
    ),
    Ok(
        "Crikey::Draw(void)",
    ),
    Ok(
        "BonusPickup_Deinit(void)",
    ),
    Ok(
        "Tick::Rotate(Vector *)",
    ),
    Ok(
        "Tick::MoveInit(void)",
    ),
    Ok(
        "ModuleInfo<Speedboat> virtual table",
    ),
    Ok(
        "ShatterableDescriptor::Load(KromeIni *)",
    ),
    Ok(
        "BushPig::Brake(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "get_eh_table_language",
        ),
    ),
    Ok(
        "npmPuts(char *)",
    ),
    Ok(
        "Aurora::Init(GameObjDesc *)",
    ),
    Ok(
        "ScrubTurkey::DropEgg(void)",
    ),
    Ok(
        "Fluffy::DeadInit(void)",
    ),
    Ok(
        "CaveBat::FlyBack(void)",
    ),
    Ok(
        "Wombat::UpdateMovement(void)",
    ),
    Ok(
        "PubeCrab::PatrolInit(void)",
    ),
    Ok(
        "Groper::Spit(void)",
    ),
    Ok(
        "StopwatchStruct::Reset(void)",
    ),
    Ok(
        "CrateStruct::Reset(void)",
    ),
    Ok(
        "SpeedboatObjective::Draw(void)",
    ),
    Ok(
        "BezierPathFollower::GetPositionAlongPath(Vector *)",
    ),
    Ok(
        "CollisionObject::CheckCollisions(Vector *, Vector *, CollisionResult *)",
    ),
    Ok(
        "TyMemCard_GetQueryType(void)",
    ),
    Ok(
        "BoomerangTrail::Draw(void)",
    ),
    Ok(
        "Tick::Miss(void)",
    ),
    Ok(
        "Critter2::Assign(CritterField2 *)",
    ),
    Ok(
        "ModuleInfo<Sentinel>::ConstructObject(void *)",
    ),
    Ok(
        "HeatFlare_Init(void)",
    ),
    Ok(
        "Ty::UpdateHorzVel(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrontEnd_NewGame_OnExit(void)",
    ),
    Ok(
        "RingoArm::Flinch(void)",
    ),
    Ok(
        "HeadTurningCallback(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sentinel::Init(GameObjDesc *)",
    ),
    Ok(
        "FrontEnd_NewGame_Draw(void)",
    ),
    Ok(
        "LedgePullUpData::InitGrab(void)",
    ),
    Ok(
        "ModuleInfo<Lenny>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Vector::Projection(Vector *, Vector *)",
    ),
    Ok(
        "type_info::operator==(type_info const &) const",
    ),
    Ok(
        "Ty::LandMediumDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Coconut::Falling(void)",
    ),
    Ok(
        "Leech::Debug(void)",
    ),
    Ok(
        "BushPig::StableReposition(Vector *, Vector *)",
    ),
    Ok(
        "Draw_AddPostDrawModel(Model *, float, bool)",
    ),
    Ok(
        "global constructors keyed to Bird_LoadResources(void)",
    ),
    Ok(
        "Skink::AnimateRetreat(bool)",
    ),
    Ok(
        "Sly::LogicUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "__ptmd_type_info virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Leech::Reset(void)",
    ),
    Ok(
        "Ty::UpdateIcePhysics(Vector, Vector, Vector)",
    ),
    Ok(
        "BushPig::CheckForPositionChange(void)",
    ),
    Ok(
        "Ty::SharkCageEnterInit(void)",
    ),
    Ok(
        "IceRamp virtual table",
    ),
    Ok(
        "Matrix::Inverse(void)",
    ),
    Ok(
        "RenderTexture_LavaEnd(void)",
    ),
    Ok(
        "ModuleInfo<Pontoon>::ConstructObject(void *)",
    ),
    Ok(
        "WaterSlideData::InitExit(void)",
    ),
    Ok(
        "Ty::SharkCageLeaveDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKMemoryCard_UnFormat(int)",
    ),
    Ok(
        "Sentinel::Update(void)",
    ),
    Ok(
        "IceCoolant_LoadResources(KromeIni *)",
    ),
    Ok(
        "Crikey::Hurt(void)",
    ),
    Ok(
        "DropPontoon::LoadDone(void)",
    ),
    Ok(
        "DeinitializeLevel(void)",
    ),
    Ok(
        "Texture::Create(char *)",
    ),
    Ok(
        "Gem_ParticleSystem_Deinit(void)",
    ),
    Ok(
        "Teleport::pMat",
    ),
    Ok(
        "LilNeddy::Message(MKMessage *)",
    ),
    Ok(
        "BonusPickup::CollectingInit(void)",
    ),
    Ok(
        "CheckpointStruct::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Input_StopAllVibration(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "AsciiString2Sjis(char *, unsigned short *)",
    ),
    Ok(
        "Bull::DieInit(void)",
    ),
    Ok(
        "Emu::DeinitDrag(void)",
    ),
    Ok(
        "Tools_WayPoints::Reset(void)",
    ),
    Ok(
        "BoomerangDesc virtual table",
    ),
    Ok(
        "SnowSpider::JumpInit(void)",
    ),
    Ok(
        "Ty::DeinitSurfacing(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "View::GetCurrentZBUF(bool, bool)",
    ),
    Ok(
        "Wombat::Race(void)",
    ),
    Ok(
        "ModuleInfo<SnowRoo>::Init(void)",
    ),
    Ok(
        "SoundEvent::CountSoundMaterials(KromeIni *)",
    ),
    Ok(
        "Ty::UnderWaterToWaterTransition(void)",
    ),
    Ok(
        "Neddy::ChargeInit(void)",
    ),
    Ok(
        "EnemySpawner::Reset(void)",
    ),
    Ok(
        "GameCamera::ClearVelocities(void)",
    ),
    Ok(
        "GameObjectManager::UpdateModules(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "sclose",
        ),
    ),
    Ok(
        "Furnace::fTempDelta",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverrideSpiral_Reset(void)",
    ),
    Ok(
        "Tools_RayToVertCyl(Vector *, Vector *, Vector *, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillBike::Ram(void)",
    ),
    Ok(
        "Roach virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tools_GroundColor(CollisionResult *)",
    ),
    Ok(
        "Shark::ChargeInit(void)",
    ),
    Ok(
        "UIImage::Deinit(void)",
    ),
    Ok(
        "Eel::DeathInit(void)",
    ),
    Ok(
        "CritterField2::Deinit(void)",
    ),
    Ok(
        "TurningPlatform virtual table",
    ),
    Ok(
        "KoalaKid::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Frostyrang::HitWorld(Vector *, int)",
    ),
    Ok(
        "void LoadDescriptors<GateDescriptor>(KromeIni *, char *, GateDescriptor *)",
    ),
    Ok(
        "Groper::LoadDone(void)",
    ),
    Ok(
        "TyFSM::KnockBackState(int)",
    ),
    Ok(
        "Main_UpdateGlobalGameCameraHeroInfo(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BoundingRegion::setPolyBoundingRect(RectXZ *, PathSegment *)",
    ),
    Ok(
        "Gem::Spawn(void)",
    ),
    Ok(
        "global constructors keyed to projectileModule",
    ),
    Ok(
        "BezierPathFollower::GetPreviousNode(void)",
    ),
    Ok(
        "Speedboat::Idle(void)",
    ),
    Ok(
        "ModuleInfo<Ibis> virtual table",
    ),
    Ok(
        "TyAttributes virtual table",
    ),
    Ok(
        "MKWater::radiusDraw",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SaveStates_SetLevelUnlocked(char *)",
    ),
    Ok(
        "WaterSlideData::ShouldSlip(void)",
    ),
    Ok(
        "SmallCrabDesc virtual table",
    ),
    Ok(
        "WaterTankStruct::Init(GameObjDesc *)",
    ),
    Ok(
        "type_info::type_info(char const *)",
    ),
    Ok(
        "SynkerBlueTongueDesc::Load(KromeIni *)",
    ),
    Ok(
        "EnemyWaypoints::GetClosestWaypoint(Vector *)",
    ),
    Ok(
        "Ty::InSharkCageInit(void)",
    ),
    Ok(
        "Sheila_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<TriggerBoxProp>::Init(void)",
    ),
    Ok(
        "BushPig::SplatOnGround(void)",
    ),
    Ok(
        "Jeep::LoadDone(void)",
    ),
    Ok(
        "exception virtual table",
    ),
    Ok(
        "Maurie::FlyInInit(void)",
    ),
    Ok(
        "Bunyip_Draw(void)",
    ),
    Ok(
        "Ty::AddShadowLight(Vector *, float)",
    ),
    Ok(
        "Ty::IdleEdgeWobble(void)",
    ),
    Ok(
        "Material::GetMaterialIni(void)",
    ),
    Ok(
        "Sly::WalkInit(void)",
    ),
    Ok(
        "Collapsible::Hidden(void)",
    ),
    Ok(
        "HudCounter::Init(int)",
    ),
    Ok(
        "CrateStruct::UpdateShadow(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongueThrower::LogicUpdate(void)",
    ),
    Ok(
        "GameData::ReceiveOpalLifeup(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model_UpdateProfileData(void)",
    ),
    Ok(
        "ModuleInfo<Sly> virtual table",
    ),
    Ok(
        "Fly::GetDesc(void)",
    ),
    Ok(
        "BreakAndTurnData::TurnRunInit(void)",
    ),
    Ok(
        "Heap_AllocHeapProfile(void *, int, char *, char *)",
    ),
    Ok(
        "LilNeddy::LogicUpdate(void)",
    ),
    Ok(
        "FireDrum::pFlameMat",
    ),
    Ok(
        "MobilePlatform::mpfLoadInfo",
    ),
    Ok(
        "Bunyip_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StalactiteTrap::Init(GameObjDesc *)",
    ),
    Ok(
        "Ty::DeinitFindItem(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::Use(bool)",
    ),
    Ok(
        "SoundProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "TyFSM::SolidSurfaceState(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Heap_MemFreeAligned(void *)",
    ),
    Ok(
        "Projectile::Init(GameObjDesc *)",
    ),
    Ok(
        "BushPig::SplatOnGroundTransition(void)",
    ),
    Ok(
        "LilNeddy::Init(GameObjDesc *)",
    ),
    Ok(
        "Spider::moveInfo",
    ),
    Ok(
        "ModuleInfo<Aquarang> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Gem_GetCount(void)",
    ),
    Ok(
        "Burner::Message(MKMessage *)",
    ),
    Ok(
        "KromeIniLine::AsString(int, char **)",
    ),
    Ok(
        "Dialog_Play(int, bool)",
    ),
    Ok(
        "Hud_ResetZoomerangProjection(void)",
    ),
    Ok(
        "PauseScreen_OptionControls_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::Normal_Update(void)",
    ),
    Ok(
        "BlitterCritter virtual table",
    ),
    Ok(
        "Flame::Init(Vector *, BoundingVolume *, float)",
    ),
    Ok(
        "ScriptProp::Init(GameObjDesc *)",
    ),
    Ok(
        "Tools_GetPYR(Matrix *, float *, float *, float *)",
    ),
    Ok(
        "Rhino::LogicUpdate(void)",
    ),
    Ok(
        "MetalSpikes::Reset(void)",
    ),
    Ok(
        "TyIdleAnimTable::Update(bool, unsigned int, IdleAnimNumber, float)",
    ),
    Ok(
        "MKWater::debugNumStripsInvisible",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "UniformSpline::AddNode(Vector *)",
    ),
    Ok(
        "C3_MiniGameActors_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TrapdoorSpider::Chase(void)",
    ),
    Ok(
        "ModuleInfo<AntHill> virtual table",
    ),
    Ok(
        "Shatter_Deinit(void)",
    ),
    Ok(
        "WaterWheel virtual table",
    ),
    Ok(
        "MKPackage_LoadDynamic(char *, bool)",
    ),
    Ok(
        "__pointer_type_info::~__pointer_type_info(void)",
    ),
    Ok(
        "RkvTOC::GetEntry(char *)",
    ),
    Ok(
        "GameCamera::Fall_Deinit(void)",
    ),
    Ok(
        "Gem::Collecting(void)",
    ),
    Ok(
        "Gem::gemPtrList",
    ),
    Ok(
        "BonusPickup::Reset(void)",
    ),
    Ok(
        "Fly_DeinitTyFlies(void)",
    ),
    Ok(
        "Camera::Init(void)",
    ),
    Ok(
        "ModuleInfo<Doomerang>::ConstructObject(void *)",
    ),
    Ok(
        "Ty::AirMediumInit(void)",
    ),
    Ok(
        "ModuleInfo<Burner> virtual table",
    ),
    Ok(
        "Roach::RunAway(void)",
    ),
    Ok(
        "GameCamera::DoSnaps(void)",
    ),
    Ok(
        "Tick::FireInit(void)",
    ),
    Ok(
        "PauseScreen_RangInfo_Init(void)",
    ),
    Ok(
        "Particle_KickUpSplash_Init(ParticleSystem **, Vector *, float)",
    ),
    Ok(
        "Jeep::PathInit(void)",
    ),
    Ok(
        "SoundEventHelper::Deinit(void)",
    ),
    Ok(
        "LearnToDiveData::InitDive(void)",
    ),
    Ok(
        "BunyipElder::Draw(void)",
    ),
    Ok(
        "Roach_LoadResources(KromeIni *)",
    ),
    Ok(
        "Rocket_CustomUpdate(ParticleSystem *)",
    ),
    Ok(
        "Material::Find(char *)",
    ),
    Ok(
        "Windmill_Update(void)",
    ),
    Ok(
        "SnowSpider::LogicUpdate(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "submore",
        ),
    ),
    Ok(
        "Generator_LoadResources(KromeIni *)",
    ),
    Ok(
        "SpiderCrate::LoadDone(void)",
    ),
    Ok(
        "Rhino::InitStopAggressive(void)",
    ),
    Ok(
        "global constructors keyed to Ibis_LoadResources(void)",
    ),
    Ok(
        "LoadLevel_Path_End(void)",
    ),
    Ok(
        "Portal::Show(bool)",
    ),
    Ok(
        "Wombat::StartChase(void)",
    ),
    Ok(
        "CrateStruct::Wait(void)",
    ),
    Ok(
        "Ty::UpdateRangSpecial(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera_UseFluffyCamera(bool, Model *)",
    ),
    Ok(
        "CameraOverride::Spiral_Create(void *)",
    ),
    Ok(
        "Ty::DeinitSurfaceSwim(void)",
    ),
    Ok(
        "SeaMine virtual table",
    ),
    Ok(
        "Ty::Init(void)",
    ),
    Ok(
        "Yabby::ScaredDeinit(void)",
    ),
    Ok(
        "Dennis::FreakOut_Update(void)",
    ),
    Ok(
        "CritterField2::TestFloor(Vector *, CollisionResult *, int, CollisionMode)",
    ),
    Ok(
        "TreasureChest::Message(MKMessage *)",
    ),
    Ok(
        "WhirlyWind virtual table",
    ),
    Ok(
        "CrikeyCanister virtual table",
    ),
    Ok(
        "BonusPickup_SetAbsolutePos(BonusPickup *, Vector *)",
    ),
    Ok(
        "Ty::GlideTransition(void)",
    ),
    Ok(
        "Wombat::JumpIdle(void)",
    ),
    Ok(
        "GameCamera::UseLaunchCamera(bool)",
    ),
    Ok(
        "Target::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GCT_Camera::Deinit(void)",
    ),
    Ok(
        "FeatherStruct::Draw(void)",
    ),
    Ok(
        "TyBite::Init(void)",
    ),
    Ok(
        "Material::ConfigureVRam(Material **)",
    ),
    Ok(
        "View::ClearZBuffer(void)",
    ),
    Ok(
        "Ibis::IdleInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BushPig::IsClaiming(void)",
    ),
    Ok(
        "SpeedUpCrate_Draw(void)",
    ),
    Ok(
        "Translation_GetLanguageCode(TranslationLanguage)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Julius::Message(MKMessage *)",
    ),
    Ok(
        "BoulderTrap::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "YabbyStalactite::Landing(void)",
    ),
    Ok(
        "Hud_DrawSpecial(void)",
    ),
    Ok(
        "MKProp virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TyBite::CheckBitten(Model *)",
    ),
    Ok(
        "Geyser_LoadResources(KromeIni *)",
    ),
    Ok(
        "Tools_RandomRadialVectorXZ(Vector &)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Animation::GetNmbrOfAnimDefs(void)",
    ),
    Ok(
        "SmallCrab::FleeState(void)",
    ),
    Ok(
        "SpyEgg virtual table",
    ),
    Ok(
        "Rufus::HopForward(bool)",
    ),
    Ok(
        "CameraOverride::Create(CameraOverrideCreateType, void *, CameraOverrideManager *)",
    ),
    Ok(
        "TyParticleManager::SpawnFeather(Vector *, Vector *)",
    ),
    Ok(
        "GameData_New(void)",
    ),
    Ok(
        "GameSubStateFSM::Init(GameSubState)",
    ),
    Ok(
        "Ty::SharkCageLeave(void)",
    ),
    Ok(
        "ScrubTurkey::JumpFromRang_Init(void)",
    ),
    Ok(
        "Material::CreateRenderTarget(char *, int, int, int)",
    ),
    Ok(
        "FrillLizard_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<WaterVolume>::ConstructObject(void *)",
    ),
    Ok(
        "SoundProp::Reset(void)",
    ),
    Ok(
        "temp(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBat::SteamInit(void)",
    ),
    Ok(
        "ModuleInfo<RockProjectile> virtual table",
    ),
    Ok(
        "BlitterCritter::Init(GameObjDesc *)",
    ),
    Ok(
        "TumbleWeed::LoadDone(void)",
    ),
    Ok(
        "Texture::CreateFromMem(char *, void *)",
    ),
    Ok(
        "ModuleInfo<SpinningLog> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameData::GetThunderEgg(ThunderEggType)",
    ),
    Ok(
        "ModuleInfo<Ice> virtual table",
    ),
    Ok(
        "CommonGameObjFlagsComponent::Clear(CommonGameObjFlags)",
    ),
    Ok(
        "TyParticleManager::SpawnBilbyPickupAtom(Vector *, float, int)",
    ),
    Ok(
        "ModuleInfo<Damageable>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowGun::gunNode",
    ),
    Ok(
        "PubeCrab::Taunt(bool)",
    ),
    Ok(
        "ModuleInfo<TumbleWeed> virtual table",
    ),
    Ok(
        "LightningInit::CreateDebugMenus(DebugOptionMenu *)",
    ),
    Ok(
        "MiniBoulder_Add(Vector *, Vector *, Vector *, MiniBoulderDescriptor *)",
    ),
    Ok(
        "Ty::DeinitSlide(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<WhirlyWind> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Input_IsKeyMappingEnabled(void)",
    ),
    Ok(
        "BushPig::Deinit(void)",
    ),
    Ok(
        "MKWaterManager_GetSine(float)",
    ),
    Ok(
        "Skink::AnimateRun(bool)",
    ),
    Ok(
        "GameCamera::Fluffy_Update(void)",
    ),
    Ok(
        "PlatformDesc::Init(ModuleInfoBase *, char *, char *, int, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKPackage_Cancel(void)",
    ),
    Ok(
        "LODManager::Draw(Model *, int, float, float, bool)",
    ),
    Ok(
        "int type_info node",
    ),
    Ok(
        "Geyser::IdleInit(void)",
    ),
    Ok(
        "BushPig::SetPower(float, float, float)",
    ),
    Ok(
        "StreamBuffer::LinearDataAvailable(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<FireworksCrate>::ConstructObject(void *)",
    ),
    Ok(
        "Emu::DeinitStopped(void)",
    ),
    Ok(
        "IsAlpha(char)",
    ),
    Err(
        InvalidSpecialMethod(
            "fixunssfdi",
        ),
    ),
    Ok(
        "Speedboat::UpdateBarrelExploding(void)",
    ),
    Ok(
        "__user_type_info type_info node",
    ),
    Ok(
        "ScrubTurkey::Bitten_Init(void)",
    ),
    Ok(
        "MobilePlatform::Deinit(void)",
    ),
    Ok(
        "Critters_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<PubeCrab>::Init(void)",
    ),
    Ok(
        "PubeCrab::Wait(void)",
    ),
    Ok(
        "Bull::Breath(void)",
    ),
    Ok(
        "EnemySpawner::Activate(void)",
    ),
    Ok(
        "MobilePlatform::Message(MKMessage *)",
    ),
    Ok(
        "MKShadow_DetectEdges(MKShadow *, Vector *, Model *, Vector *)",
    ),
    Ok(
        "BouncingBoulder_LoadResources(KromeIni *)",
    ),
    Ok(
        "Model::SubObjectExists(char *, int *)",
    ),
    Ok(
        "CameraOverride::IdealTarget(void)",
    ),
    Ok(
        "Ty::InitRun(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "kernel_tanf",
        ),
    ),
    Ok(
        "Geyser virtual table",
    ),
    Ok(
        "GameCamera::PlayerAdjust_SetControlPointsClamped(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Projectile::ResolveHit(void)",
    ),
    Ok(
        "Portal::SetState(PortalState)",
    ),
    Ok(
        "PauseScreen_Continue_Draw(void)",
    ),
    Ok(
        "ModuleInfo<StopwatchStruct>::Init(void)",
    ),
    Ok(
        "OmniLight_InitModule(void)",
    ),
    Ok(
        "MiniGameB1_Deinit(void)",
    ),
    Ok(
        "Lava::Init(GameObjDesc *)",
    ),
    Ok(
        "ModuleInfo<Boomerang>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillBike::CrashInit(void)",
    ),
    Ok(
        "EnemyWaypoints::SetWaypoint(int)",
    ),
    Ok(
        "GameCamera_SnapSource(Vector *)",
    ),
    Ok(
        "BonusPickupDesc::Init(ModuleInfoBase *, char *, char *, int, int)",
    ),
    Ok(
        "PubeCrab::Init(GameObjDesc *)",
    ),
    Ok(
        "Ty::Launch(void)",
    ),
    Ok(
        "ModuleInfo<Wallaby> virtual table",
    ),
    Ok(
        "ModuleInfo<Furnace> virtual table",
    ),
    Ok(
        "global constructors keyed to bDrawCheatLines",
    ),
    Ok(
        "Neddy_LoadResources(KromeIni *)",
    ),
    Ok(
        "CritterField2::Draw(void)",
    ),
    Ok(
        "ModuleInfo<Yabby>::ConstructObject(void *)",
    ),
    Ok(
        "FireDrum::UpdateShadow(void)",
    ),
    Ok(
        "Lasso::LassoThrow(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Crikey::GenerateRandomPos(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Shatter_Reset(void)",
    ),
    Ok(
        "Ty::PlatformUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Elle> virtual table",
    ),
    Ok(
        "Furnace::Update(void)",
    ),
    Ok(
        "Model::Destroy(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillLizard::ThrowBurningJunk(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Farlapp::Init(GameObjDesc *)",
    ),
    Ok(
        "Speedboat::DeinitCrash(void)",
    ),
    Ok(
        "WaterfallBaseStruct::CreateNewSplash(float, float)",
    ),
    Ok(
        "Ty::FindItem(void)",
    ),
    Ok(
        "Elle::Init(GameObjDesc *)",
    ),
    Ok(
        "SnowSpider::GenerateRandomTargetPos(Vector const &, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Collision_Deinit(void)",
    ),
    Ok(
        "GameObjDesc::Init(ModuleInfoBase *, char *, char *, int, int)",
    ),
    Ok(
        "GreySmoke::Spawn(Vector *)",
    ),
    Ok(
        "DialogEffect::GetActorModelNodePos(void)",
    ),
    Ok(
        "Boulder::Reset(void)",
    ),
    Ok(
        "FreeManuallyScrollingTexturePointers(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "sjpopnthrow",
        ),
    ),
    Ok(
        "Eel::LoadDone(void)",
    ),
    Ok(
        "WaterWheel::Deinit(void)",
    ),
    Ok(
        "Ty::LoadAnimations(void)",
    ),
    Ok(
        "BaseCritter::UpdateLogic(void)",
    ),
    Ok(
        "ScrubTurkey::BittenIdle(void)",
    ),
    Ok(
        "Gecko_LoadResources(void)",
    ),
    Ok(
        "ModuleInfo<Geyser> virtual table",
    ),
    Ok(
        "Roach::Message(MKMessage *)",
    ),
    Ok(
        "C1Water::Appear(void)",
    ),
    Ok(
        "Torch::Message(MKMessage *)",
    ),
    Ok(
        "GameData::StartTime(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowSpider::DeathDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Shadow::CheckForShadowShift(float, Vector *, float, Vector *)",
    ),
    Ok(
        "BoomerangManager::Reset(void)",
    ),
    Ok(
        "System_SetOrthoSize(int, int)",
    ),
    Ok(
        "WindmillStruct::MaxWindmills",
    ),
    Ok(
        "System_FlashScreen(int)",
    ),
    Ok(
        "ModuleInfo<Fluffy>::Init(void)",
    ),
    Ok(
        "KoalaKid::PlaySound(void)",
    ),
    Ok(
        "CameraOverrideDir_Line(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Wombat::Teleport(void)",
    ),
    Ok(
        "MKAnimScript::GetStartAndEnd(MKAnim *, short *, short *)",
    ),
    Ok(
        "OpalCollector::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Skink::Die(void)",
    ),
    Ok(
        "OpalCollector::vEffectEnd",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::InitDive(void)",
    ),
    Ok(
        "Shark::SetState(int, bool)",
    ),
    Ok(
        "Rufus::IdleInit(void)",
    ),
    Ok(
        "EnemyWaypoints::Reset(void)",
    ),
    Ok(
        "LineEmitter::Emit(int)",
    ),
    Ok(
        "unsigned int type_info node",
    ),
    Ok(
        "GameCameraPointsDelta::RestoreCycleDeltas(void)",
    ),
    Ok(
        "TriggerBoxProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Dma::AddGif_AD_TRXDIR(unsigned long)",
    ),
    Ok(
        "Kin_GetInitialVelocity(float *, float *, float *, float *)",
    ),
    Ok(
        "GuideParticle_HasPassedThoughAll(void)",
    ),
    Ok(
        "MKWater::debugNumModelsClipped",
    ),
    Ok(
        "MKWater::bDrawWireFrame",
    ),
    Ok(
        "TrapdoorSpider::LoadDone(void)",
    ),
    Ok(
        "GameCamera_SetAnimationFrame(float)",
    ),
    Ok(
        "BushPig::DeinitWalk(void)",
    ),
    Ok(
        "Material::CaptureDrawBuffer(float, float, float, float)",
    ),
    Ok(
        "Ty::TyCameraChecksUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Bat>::ConstructObject(void *)",
    ),
    Ok(
        "WakeStruct::Draw(void)",
    ),
    Ok(
        "Eel::Reset(void)",
    ),
    Ok(
        "TyBite::BiteGrowl(void)",
    ),
    Ok(
        "MorayEel::Message(MKMessage *)",
    ),
    Ok(
        "SmallCrab::GetDesc(void)",
    ),
    Ok(
        "WaterPipe::Reset(void)",
    ),
    Ok(
        "StopwatchStruct::ScaleOut(void)",
    ),
    Ok(
        "MKProp::Message(MKMessage *)",
    ),
    Ok(
        "CaveBatObjective::LoadDone(void)",
    ),
    Ok(
        "Ringo::SetAnimState(RingoStates)",
    ),
    Ok(
        "FindNearestPickup(Vector *, char *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<BuzzSaw2>::Init(void)",
    ),
    Ok(
        "Boomerang::Load(void)",
    ),
    Ok(
        "ModuleInfo<WaterTankStruct>::ConstructObject(void *)",
    ),
    Ok(
        "SpecialHud::Update(void)",
    ),
    Ok(
        "LilNeddy::Block(void)",
    ),
    Ok(
        "Gem_HideAll(void)",
    ),
    Ok(
        "global constructors keyed to ArsonTorch::refPoint",
    ),
    Ok(
        "GetFloor(Vector *, float, CollisionResult *)",
    ),
    Ok(
        "Dma::AddGif_AD_TEST_2(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "GeneratePos_RunAwayFromTy(Vector &, Vector const &, Vector const &, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Ty>::Init(void)",
    ),
    Ok(
        "Ty::EnableHead(TyHeads)",
    ),
    Ok(
        "Dma::AddVif_FLUSHE(void)",
    ),
    Ok(
        "Tendril::Setup(float, Vector *)",
    ),
    Ok(
        "Platform::GetDesc(void)",
    ),
    Ok(
        "LODDescriptor::ResolveSubObjects(Model *)",
    ),
    Ok(
        "Ty::InitLaunch(void)",
    ),
    Ok(
        "Camera::SetMode(Camera_Mode)",
    ),
    Ok(
        "ModuleInfo<Maurie> virtual table",
    ),
    Ok(
        "Jeep_LoadResources(KromeIni *)",
    ),
    Ok(
        "MKWater::debugNumQuadsClipped",
    ),
    Ok(
        "MKRumble_Stop(InputDevices)",
    ),
    Ok(
        "Tick::Fire(void)",
    ),
    Ok(
        "ParticleSystem::DestroyAll(void)",
    ),
    Ok(
        "LoadLevel_LoadRotation(KromeIniLine *, char *, Rotation *)",
    ),
    Ok(
        "Spline::GetVelocity(float)",
    ),
    Ok(
        "ModuleInfo<Ty> virtual table",
    ),
    Ok(
        "PubeCrab::StopAttack(bool)",
    ),
    Ok(
        "PontoonRope virtual table",
    ),
    Ok(
        "ModuleInfo<LilNeddy>::Init(void)",
    ),
    Ok(
        "FlameThrower::FollowTy(void)",
    ),
    Ok(
        "SnowSpider::UpdateModelNormal(void)",
    ),
    Ok(
        "Wombat::Finish(void)",
    ),
    Ok(
        "global constructors keyed to WaterPipe_LoadResources(KromeIni *)",
    ),
    Ok(
        "BossCass virtual table",
    ),
    Ok(
        "LoadLevel_LoadFloat(KromeIniLine *, char *, float *)",
    ),
    Ok(
        "ModuleInfo<Aquarang>::ConstructObject(void *)",
    ),
    Ok(
        "Wallaby::IdleState(void)",
    ),
    Ok(
        "Skink::LogicUpdate(void)",
    ),
    Ok(
        "Jeep::DamageJeep(void)",
    ),
    Ok(
        "Elle::Message(MKMessage *)",
    ),
    Ok(
        "CritterField2Desc::FieldAdded(void)",
    ),
    Ok(
        "Animation::GetAnimDef(char *)",
    ),
    Ok(
        "Skink::AnimateWalk(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrontEnd_DrawB(char *, char *, char *, char *)",
    ),
    Ok(
        "FrillLizard::AttackIdle(void)",
    ),
    Ok(
        "ParticleSystemManager::menuInit",
    ),
    Ok(
        "FrontEnd_Title_Init(void)",
    ),
    Ok(
        "CameraOverrideFixedRail_Start(void)",
    ),
    Ok(
        "MKShadow_InitModule(void)",
    ),
    Ok(
        "Texture::Destroy(void)",
    ),
    Ok(
        "DebugPoint(Vector *, unsigned int, float)",
    ),
    Ok(
        "ModuleInfo<BlueTongueRockObjective>::Init(void)",
    ),
    Err(
        UnrecognizedSpecialMethod(
            "DTOR_LIST",
        ),
    ),
    Ok(
        "File_FileServerIrxName(char *)",
    ),
    Ok(
        "ThinIceProp::ShatteredUpdate(void)",
    ),
    Ok(
        "DDASession::DrawDebugMessage(void)",
    ),
    Ok(
        "LedgePullUpData::PushOff(void)",
    ),
    Ok(
        "CameraOverrideFixedPoint_Line(KromeIniLine *)",
    ),
    Ok(
        "IceBlockStruct::BergSink(void)",
    ),
    Ok(
        "Matrix::Multiply(Matrix *, Matrix *)",
    ),
    Ok(
        "Crikey::StartEatingChumDeinit(void)",
    ),
    Ok(
        "IceCoolant virtual table",
    ),
    Ok(
        "SpiderTrapdoor::SetAnimIndex(SpiderTrapdoorAnim)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TrapdoorSpider::Message(MKMessage *)",
    ),
    Ok(
        "GameCamera::Collision_UpdateHitQ(void)",
    ),
    Ok(
        "__class_type_info::__class_type_info(char const *, __class_type_info::base_info const *, unsigned int)",
    ),
    Ok(
        "Matrix::Scale(Matrix *, Vector *)",
    ),
    Ok(
        "Roach::PatrolDeinit(void)",
    ),
    Ok(
        "NinjaGecko::Deinit(void)",
    ),
    Ok(
        "Aurora::SetUpKidPositions(void)",
    ),
    Ok(
        "GameCamera_GetEnemyCameraTarget(void)",
    ),
    Ok(
        "Bull::Roar(void)",
    ),
    Ok(
        "Kin_GetDiscretefinalVel(float *, float *, float *, float *)",
    ),
    Ok(
        "WaterSlideSection::LastPt(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<RedButton>::Init(void)",
    ),
    Ok(
        "Explosion::Explode(Vector *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKGrassType::InitDraw(void)",
    ),
    Ok(
        "BlueTongueThrower::TauntInit(void)",
    ),
    Ok(
        "Gem::totalGems",
    ),
    Ok(
        "CrikeyProps_LoadResources(KromeIni *)",
    ),
    Ok(
        "Dma::AddGif_AD_ZBUF_1(unsigned long, unsigned long, unsigned long)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SaveStates_GetTotalGems(void)",
    ),
    Ok(
        "View::TransformPoint2Dto3D(float, float, float, Vector *)",
    ),
    Ok(
        "StaticFXProp::UpdateDropLeaf(void)",
    ),
    Ok(
        "YabbyStalactite_LoadResources(KromeIni *)",
    ),
    Ok(
        "Flamerang::Deinit(void)",
    ),
    Ok(
        "CameraOverride_GetContainterPoints(Matrix *, Vector *, Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "BurningTree::Burning(void)",
    ),
    Ok(
        "UIButton::SetPosition(Vector *, char)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LilNeddy::BlockInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterProp::DrawDebugInfo(void)",
    ),
    Ok(
        "View::SetFogPlanes(float, float)",
    ),
    Ok(
        "SpikeyIce_Deinit(void)",
    ),
    Ok(
        "TyHealth::Init(TyHealthType)",
    ),
    Ok(
        "__ptmd_type_info::~__ptmd_type_info(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKAnimScript::SetAnimKeepingPosition(MKAnim *)",
    ),
    Ok(
        "Muddie::Taunt(bool)",
    ),
    Ok(
        "GameCamera::Swim_Deinit(void)",
    ),
    Ok(
        "UIButtonGroup::SelectPrev(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "UIButton::GetPosition(Vector *)",
    ),
    Ok(
        "ModuleInfo<WaterPipeObjective>::ConstructObject(void *)",
    ),
    Ok(
        "Gecko::UpdateTargetForwardVector(void)",
    ),
    Ok(
        "ReflectionStruct::Deinit(void)",
    ),
    Ok(
        "FileSys_GetOffset(char *)",
    ),
    Ok(
        "ModuleInfo<RockProjectile>::ConstructObject(void *)",
    ),
    Ok(
        "BoomerangHud::Draw(void)",
    ),
    Ok(
        "BlueTongue::HuntShazzaDeinit(void)",
    ),
    Ok(
        "TyBite::DeinitDiveBiteToFall(void)",
    ),
    Ok(
        "Lenny::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "BadBoonie::DropEgg(void)",
    ),
    Ok(
        "ModuleInfo<Platform>::Init(void)",
    ),
    Ok(
        "TyMemCard_Draw(void)",
    ),
    Ok(
        "Emu::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<BurnerObjective>::Init(void)",
    ),
    Ok(
        "LogicState::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Gate::Message(MKMessage *)",
    ),
    Ok(
        "GameCamera_Use(bool)",
    ),
    Ok(
        "global constructors keyed to Rhino_LoadResources(KromeIni *)",
    ),
    Ok(
        "Skink::IdleInit(void)",
    ),
    Ok(
        "IcePlatform::Init(Model *, PlatformConfig *)",
    ),
    Ok(
        "FrillProblemObjective virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKAnimScript_InitModule(void)",
    ),
    Ok(
        "BushPig_Init(void)",
    ),
    Ok(
        "GetAngleDifference(float, float)",
    ),
    Ok(
        "MKWater::cameraPos",
    ),
    Ok(
        "AuroraKid::InitModule(void)",
    ),
    Ok(
        "KoalaKid::DeinitSound(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Elevator::bStateChange",
    ),
    Ok(
        "ModuleInfo<WeatherProp>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Material::CaptureZBuffer(float, float, float, float)",
    ),
    Ok(
        "ModuleInfo<FrillBike>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<CaveBat>::Init(void)",
    ),
    Ok(
        "Tools_DynamicStringTable::Deinit(void)",
    ),
    Ok(
        "RandomI(int *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Material::CaptureZBuffer(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Yabby::Reset(void)",
    ),
    Ok(
        "wchar_t type_info function",
    ),
    Ok(
        "GameCamera_UseMiniGameC2Camera(bool)",
    ),
    Ok(
        "global constructors keyed to Rufus_LoadResources(KromeIni *)",
    ),
    Ok(
        "GuideParticle::Deinit(void)",
    ),
    Ok(
        "Boomerang::UpdateTrail(void)",
    ),
    Ok(
        "StaticFXProp virtual table",
    ),
    Ok(
        "GameObjectManager::AddDescriptor(GameObjDesc *)",
    ),
    Err(
        InvalidSpecialMethod(
            "fixunsdfdi",
        ),
    ),
    Ok(
        "GameCamera::SphereCollide(Vector *, float, int)",
    ),
    Ok(
        "PickupCounter::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "ZoneBlockerProp::Message(MKMessage *)",
    ),
    Ok(
        "DDASession::DeathCount(void)",
    ),
    Ok(
        "SpeedUpCrate_Reset(void)",
    ),
    Ok(
        "Level_ParseColor(KromeIniLine *, Vector *)",
    ),
    Ok(
        "AnimatingProp::Show(bool)",
    ),
    Ok(
        "OmniLight_DestroyLight(OmniLightScene *, OmniLight *)",
    ),
    Ok(
        "Yabby::UpdateFloorNormal(void)",
    ),
    Ok(
        "ModuleInfo<FrillBike> virtual table",
    ),
    Ok(
        "EnemyObject_LoadResources(KromeIni *)",
    ),
    Ok(
        "BoomerangWeapon::IsReady(void)",
    ),
    Ok(
        "Speedboat virtual table",
    ),
    Ok(
        "TimeTrial_StopTimeAttack(void)",
    ),
    Ok(
        "global constructors keyed to ThinIceProp::states",
    ),
    Ok(
        "MungCompare(unsigned char *)",
    ),
    Ok(
        "Moth::Fly(void)",
    ),
    Ok(
        "PathManager::Init(signed char)",
    ),
    Ok(
        "EnemySpawner::Update(void)",
    ),
    Ok(
        "Sly::RunDeinit(void)",
    ),
    Ok(
        "YabbyObjective::bCompleted",
    ),
    Ok(
        "Ty::StartAnimation(MKAnimScript *, MKAnim *, int, bool)",
    ),
    Err(
        InvalidSpecialMethod(
            "deregister_frame",
        ),
    ),
    Ok(
        "C3Actor::CheckEvents(void)",
    ),
    Ok(
        "SaveStates_GetThunderEgg(char *, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowBallExplode::pMat",
    ),
    Ok(
        "Ibis_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Skink::ChaseInit(void)",
    ),
    Ok(
        "Moth::Idle(void)",
    ),
    Ok(
        "Drum virtual table",
    ),
    Ok(
        "Wake_Draw(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_func",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "C3Actor::GetNextPoint(void)",
    ),
    Ok(
        "ModuleInfo<SeaMine>::Init(void)",
    ),
    Ok(
        "Shatterable_LoadResources(KromeIni *)",
    ),
    Ok(
        "FrontEnd_Extras_Draw(void)",
    ),
    Ok(
        "CameraOverrideFixedRail_End(void)",
    ),
    Ok(
        "Ty::SetFakeFloor(void)",
    ),
    Ok(
        "Util_BinarySearch(void *, void *, int, int, int (*)(void *, void *))",
    ),
    Ok(
        "MKWaterProp::GenerateEnvMapUV(WaterUV *, Vector *, WaterUV *, Vector *, float, MKWaterType::RenderType)",
    ),
    Ok(
        "WhiteBat::FollowBoss(void)",
    ),
    Ok(
        "Friend::GetStartPos(void)",
    ),
    Ok(
        "LavaDesc::Load(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<DDACheckpoint>::Init(void)",
    ),
    Ok(
        "WaterfallStreamStruct::SpawnWaterfallSplash(Vector *, Vector *, int, float, Blitter_Particle *, WaterfallStreamStruct::SplashData *)",
    ),
    Ok(
        "global constructors keyed to WaterVolume_LoadResources(KromeIni *)",
    ),
    Ok(
        "PauseScreen_Options_Deinit(void)",
    ),
    Ok(
        "WaterPipeObjective virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SkinkDropTail::Update(void)",
    ),
    Ok(
        "HeatFlare_Update(void)",
    ),
    Ok(
        "Sheila virtual table",
    ),
    Ok(
        "SnowRoo::CheckEvents(void)",
    ),
    Ok(
        "FlameThrower_LoadResources(KromeIni *)",
    ),
    Ok(
        "Jeep virtual table",
    ),
    Ok(
        "Ty::Bite(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Image::Copy(Image *, int, int, int, int, int, int)",
    ),
    Ok(
        "GameObjectManager::DrawModules(void)",
    ),
    Ok(
        "CameraOverride::Deinit(CameraDescriptor *, int)",
    ),
    Ok(
        "StaticFXProp::UpdateShake(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LineOfSightObject::Reset(Vector *, Vector *, Vector *)",
    ),
    Ok(
        "ModuleInfo<EnemySpawner> virtual table",
    ),
    Ok(
        "FrontEnd_ExitScreen(tagFrontEndScreen)",
    ),
    Ok(
        "BeachHut_LoadResources(KromeIni *)",
    ),
    Ok(
        "BonusPickup_Scale(BonusPickup *, float)",
    ),
    Ok(
        "TyMemCard_SaveGame(void)",
    ),
    Ok(
        "TimeTrial_Active(void)",
    ),
    Ok(
        "ShoalFish::Draw(void)",
    ),
    Ok(
        "Grasshopper::Assign(CritterField2 *)",
    ),
    Ok(
        "ZoneBlockerProp::Idle(void)",
    ),
    Ok(
        "ModuleInfo<CrikeyCanister>::ConstructObject(void *)",
    ),
    Ok(
        "Furnace::SetAnim(unsigned int)",
    ),
    Ok(
        "GameObjDesc::ConstructObject(void *)",
    ),
    Ok(
        "AnimatingProp::Message(MKMessage *)",
    ),
    Ok(
        "Skink::DodgeInit(void)",
    ),
    Ok(
        "StaticSpikes_Init(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "eh_rtime_match",
        ),
    ),
    Ok(
        "Dma::AddGif_CLAMP_2(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "TimeTrial_IntroductionDialog(void)",
    ),
    Ok(
        "LevelObjective::Activate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CuttleFish::CheckAlert(void)",
    ),
    Ok(
        "CrikeyCanister::MovingUp(void)",
    ),
    Ok(
        "Ty::SetFakeWall(Vector *)",
    ),
    Ok(
        "StarTrail::Reset(void)",
    ),
    Ok(
        "IceRamp::LoadDone(void)",
    ),
    Ok(
        "NewFailureHandler(void)",
    ),
    Ok(
        "Ty::InitKnockBack(void)",
    ),
    Ok(
        "Video_CbStrM2V(sceMpeg *, sceMpegCbDataStr *, Video *)",
    ),
    Ok(
        "FrillBike virtual table",
    ),
    Ok(
        "BlueTongueThrower::FindThrowTargetPos(Vector *, Vector *)",
    ),
    Ok(
        "ModuleInfo<MobilePlatform>::ConstructObject(void *)",
    ),
    Ok(
        "AntHill_Begin(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongueThrower::Death(void)",
    ),
    Ok(
        "GameCamera::Fall_CanDisableState(void)",
    ),
    Ok(
        "Bull::Idle(void)",
    ),
    Ok(
        "CritterField2::ClipPointToField(Vector *, bool)",
    ),
    Ok(
        "FriendDescriptor::Init(ModuleInfoBase *, char *, char *, int, int)",
    ),
    Ok(
        "Muddie::Wait(void)",
    ),
    Ok(
        "GalleryScreenData::FadeIn(int, int)",
    ),
    Ok(
        "global constructors keyed to gSceneManager",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to TurningPlatform::LoadDone(void)",
    ),
    Ok(
        "ModuleInfo<Projectile>::ConstructObject(void *)",
    ),
    Err(
        InvalidSpecialMethod(
            "swsetup",
        ),
    ),
    Ok(
        "Crikey::HurtDeinit(void)",
    ),
    Ok(
        "Tools_DrawDropShadow(Material *, Vector *, float, float, float, float, float, float, float, float, bool)",
    ),
    Ok(
        "BushPig_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScrubTurkey::TeleportInit(void)",
    ),
    Ok(
        "DialogEffect::Particles(void)",
    ),
    Ok(
        "MKMemoryCard_Save(int, int, void *, int)",
    ),
    Ok(
        "StaticProp_LoadResources(KromeIni *)",
    ),
    Ok(
        "Ty::InitIdleStand(void)",
    ),
    Ok(
        "FrontEnd_LoadGame_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Crikey_GetPos(void)",
    ),
    Ok(
        "YabbyObjective::LoadDone(void)",
    ),
    Ok(
        "ModuleInfo<Boulder>::ConstructObject(void *)",
    ),
    Ok(
        "SpeedUpCrate::Reset(void)",
    ),
    Ok(
        "LedgePullUpData::LedgeMoved(Vector *, float)",
    ),
    Ok(
        "StaticSpikes_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rufus::GetTyAttacker(void)",
    ),
    Ok(
        "ThinIceProp::IdleInit(void)",
    ),
    Ok(
        "SaveStates_Init(void)",
    ),
    Ok(
        "WaterSlideData::Fast(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StreamBuffer::SpaceAvailable(void)",
    ),
    Ok(
        "ClipPoly(Vector *, Vector *, int *, float (*)(Vector *, float), float)",
    ),
    Ok(
        "Shark::IsTyVisible(float)",
    ),
    Ok(
        "GasJet::LoadDone(void)",
    ),
    Ok(
        "BunyipStruct::PunchCombo(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Groper::Deinit(void)",
    ),
    Ok(
        "ConditionalScriptProp::Init(GameObjDesc *)",
    ),
    Ok(
        "SoundEvent::Play(Vector *, unsigned int)",
    ),
    Ok(
        "QuatRotation::ConvertRotation(AxisRotation *)",
    ),
    Ok(
        "Input_WasDirectionReleased(InputDevices, int, InputDevices *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GetVertexColorFromPoly(Vector *, Vector *, Item *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PubeCrab::Message(MKMessage *)",
    ),
    Ok(
        "TriggerProp::Reset(void)",
    ),
    Ok(
        "Ty::Slide(void)",
    ),
    Ok(
        "Fluffy::LoadDone(void)",
    ),
    Ok(
        "SeaMine::Warning(void)",
    ),
    Ok(
        "MKSceneManager::UpdateProps(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKMemoryCard_CalculateBlocks(int, int, int *)",
    ),
    Ok(
        "Dma::AddGif_AD_CLAMP_2(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "TurtleStruct::Breathing(void)",
    ),
    Ok(
        "Torch_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RockProjectile::ResolveHit(void)",
    ),
    Ok(
        "BushPig::AfterDunny(void)",
    ),
    Ok(
        "StreamBuffer::SkipData(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FireworksCrate::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Material::LoadMadFile(char *)",
    ),
    Ok(
        "RockProjectile::CheckForHit(void)",
    ),
    Ok(
        "Basket::Init(GameObjDesc *)",
    ),
    Ok(
        "BoomerangWeapon::StartCatch(Boomerang *)",
    ),
    Ok(
        "ModelExplorer_P2::PrimeStrip(void)",
    ),
    Ok(
        "Projectile::SetPos(Vector *)",
    ),
    Ok(
        "MKMemoryCard_CreateIconSys(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<C3Chest> virtual table",
    ),
    Ok(
        "Blitter_TriFan::Draw2D(int, float)",
    ),
    Ok(
        "Lasso::LassoPullIn(void)",
    ),
    Ok(
        "LODDescriptor::ReplicateLODData(int, int)",
    ),
    Ok(
        "IceBlockStruct::AddIceberg(Vector *)",
    ),
    Ok(
        "WaterSlideManager::CurrWayPt(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "fixdfdi",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Parser::IsComment(void)",
    ),
    Ok(
        "TrapdoorSpider::Flinch(void)",
    ),
    Ok(
        "GalleryScreenData::Init(float, float, float, float, int)",
    ),
    Ok(
        "BonusPickup::MagnetisedInit(void)",
    ),
    Ok(
        "SnowRoo::Dodge(void)",
    ),
    Ok(
        "SynkerFrog::Deinit(void)",
    ),
    Ok(
        "Ty::FallDive(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Eel::Chase(void)",
    ),
    Ok(
        "GuideBarrel_HideAll(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SoundBank_Init(void)",
    ),
    Ok(
        "ModuleInfo<RedButton> virtual table",
    ),
    Ok(
        "Drum::Bitten(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Texture::InitModule(void)",
    ),
    Ok(
        "BlueTongue::ThrowRock(void)",
    ),
    Ok(
        "ScriptProp::Update(void)",
    ),
    Ok(
        "Platform::Message(MKMessage *)",
    ),
    Ok(
        "ScrubTurkey::Reset(void)",
    ),
    Ok(
        "CritterField2Desc * descr_cast<CritterField2Desc *>(MKPropDescriptor *)",
    ),
    Ok(
        "EnemyObject::Activate(void)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_C2_Update(void)",
    ),
    Ok(
        "Image::LoadTGA(char *)",
    ),
    Ok(
        "WeatherProp::LoadDone(void)",
    ),
    Ok(
        "TyHealth::FillUp(void)",
    ),
    Ok(
        "BoomerangTrail::Reset(void)",
    ),
    Ok(
        "GCT_LoadInt(KromeIniLine *, char *, int *)",
    ),
    Ok(
        "SimpleParticleSystemType::CalculateEnvelope(void)",
    ),
    Ok(
        "Grasshopper::Draw(void)",
    ),
    Ok(
        "CausticEffect::LoadLine(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StreamBuffer::DataAvailable(void)",
    ),
    Ok(
        "EnemyRefPoints::IsNearSq(Vector *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BeachHut::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LilNeddy::Reset(void)",
    ),
    Ok(
        "DialogEffect::ShowPropDeinit(void)",
    ),
    Ok(
        "Dma::Send(void)",
    ),
    Ok(
        "C3Actor::Init(GameObjDesc *)",
    ),
    Ok(
        "SnowSpider::Death(void)",
    ),
    Ok(
        "ModuleInfo<Spear>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<FrillLizard>::ConstructObject(void *)",
    ),
    Ok(
        "BadBoonie::Alert_Init(void)",
    ),
    Ok(
        "Gem_DrawModel(Vector *, Vector *, ElementType)",
    ),
    Ok(
        "Bull::DieDeinit(void)",
    ),
    Ok(
        "WhirlyWind::Deinit(void)",
    ),
    Ok(
        "TumbleWeed virtual table",
    ),
    Ok(
        "SpeedUpCrate::Delete(void)",
    ),
    Ok(
        "ModuleInfo<Kaboomerang> virtual table",
    ),
    Ok(
        "FrillBike::Lasso(void)",
    ),
    Ok(
        "Spider::Update(void)",
    ),
    Ok(
        "Grasshopper_LoadResources(void)",
    ),
    Ok(
        "ShadowBat::KissOfDeathEnd(void)",
    ),
    Ok(
        "Rhino::Reset(void)",
    ),
    Ok(
        "ModuleInfo<SeaMine>::ConstructObject(void *)",
    ),
    Ok(
        "Bat::Death(void)",
    ),
    Ok(
        "WeatherProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Elle_LoadResources(KromeIni *)",
    ),
    Ok(
        "C3Actor::Jump(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<PubeCrab> virtual table",
    ),
    Ok(
        "Emu::DeinitEscape(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DataVal::Load(void)",
    ),
    Ok(
        "Coconut::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Material::matRenderMarker",
    ),
    Ok(
        "Font::InitModule(void)",
    ),
    Ok(
        "WaterVolume virtual table",
    ),
    Ok(
        "Projectile::GetDesc(void)",
    ),
    Ok(
        "SeaMine::Deinit(void)",
    ),
    Ok(
        "Boomerang_GetName(BoomerangType)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DDASession::EndSession(void)",
    ),
    Ok(
        "GameCamera::RayCollide(Vector *, Vector *, CollisionMode, int)",
    ),
    Ok(
        "MusicalIcicle::miStates",
    ),
    Ok(
        "Ty::Death(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sheila::Reset(void)",
    ),
    Ok(
        "BushPig::Reset(void)",
    ),
    Ok(
        "LensFlare_Deinit(void)",
    ),
    Ok(
        "C1Water virtual table",
    ),
    Ok(
        "GameObject::GetPos(void)",
    ),
    Ok(
        "TyParticleManager::SpawnCrateChunk(Vector *, Vector *, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Main_LoadStaticResources(void)",
    ),
    Ok(
        "unsigned char type_info node",
    ),
    Ok(
        "Dma::AddGif_AD_TEX2_2(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "ModuleInfo<SeaMine> virtual table",
    ),
    Ok(
        "BunyipStruct::CheckEvents(void)",
    ),
    Ok(
        "GameObject::Draw(void)",
    ),
    Ok(
        "PauseScreen_LoadResources(void)",
    ),
    Ok(
        "Ty::QuickSandTransition(void)",
    ),
    Ok(
        "Bull::Init(GameObjDesc *)",
    ),
    Ok(
        "Particle_WaterMist_Init(ParticleSystem **, Vector *, BoundingVolume *, float)",
    ),
    Ok(
        "DropShadow::Draw(void)",
    ),
    Ok(
        "Ty::SwitchToAquaRang(void)",
    ),
    Ok(
        "EnemyObject::DampenedTurn(float)",
    ),
    Ok(
        "Spider_Deinit(void)",
    ),
    Ok(
        "Ty::UpdateLocalToWorldMatrix(void)",
    ),
    Ok(
        "YabbyObjective::Reset(void)",
    ),
    Ok(
        "CableCar::MovingInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EventMessage::LoadLine(KromeIniLine *, char const *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EnemyObject::PreUpdate(void)",
    ),
    Ok(
        "ThinIceProp::states",
    ),
    Ok(
        "BezierPathFollower::Deinit(void)",
    ),
    Ok(
        "Elevator::LoadRot(KromeIniLine *)",
    ),
    Ok(
        "Basket::Hit(void)",
    ),
    Ok(
        "TyParticleManager::StopExclamation(bool)",
    ),
    Ok(
        "Material::frameCounter",
    ),
    Ok(
        "Model::SetAlphaLightIntensity(int, float)",
    ),
    Ok(
        "Enemies_DeinitBoundingRegions(void)",
    ),
    Ok(
        "GreySmoke_LoadResources(void)",
    ),
    Ok(
        "MorayEel::Init(GameObjDesc *)",
    ),
    Ok(
        "Shazza::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "ShadowBat::LandDeinit(void)",
    ),
    Ok(
        "ModuleInfo<CaveBat> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "System_GetNumParameters(void)",
    ),
    Ok(
        "Roach::FlyDeinit(void)",
    ),
    Ok(
        "Tools_TestFloor(Vector *, CollisionResult *, float, bool)",
    ),
    Ok(
        "ExactMag(Vector const *, Vector const *)",
    ),
    Ok(
        "ModuleInfo<Target>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TurtleStruct::Init(Vector *, float, float, bool)",
    ),
    Ok(
        "Gate::Opening_Init(void)",
    ),
    Ok(
        "ModuleInfo<MetalSpikes>::Init(void)",
    ),
    Ok(
        "ModuleInfo<Julius>::ConstructObject(void *)",
    ),
    Ok(
        "WaterSlide::Init(void)",
    ),
    Ok(
        "FinishLineStruct::IsCrossedBy(Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EventTriggers_ShowAll(void)",
    ),
    Ok(
        "WobbleTexture::Draw(Material *, bool)",
    ),
    Ok(
        "global constructors keyed to Neddy_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::SendFromInterrupt(void)",
    ),
    Ok(
        "ModuleInfo<Portal>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBatPipe::Idle(void)",
    ),
    Ok(
        "Vector::Cross(Vector *, Vector *)",
    ),
    Ok(
        "Ty::IdleStand(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DialogPlayer::UpdateActors(void)",
    ),
    Ok(
        "AngleDifference(float, float)",
    ),
    Ok(
        "LavaEffect virtual table",
    ),
    Ok(
        "GameData::GetThunderEggCount(ElementType)",
    ),
    Ok(
        "Dma::AddGif_AD_TEXFLUSH(void)",
    ),
    Ok(
        "MKGrass_GetGrassTypeId(int)",
    ),
    Ok(
        "Rock virtual table",
    ),
    Ok(
        "Fluffy::RotateTorso(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "EnemyObject::StartAnimation(MKAnim *)",
    ),
    Ok(
        "GetGoldenCog(GoldenCogType)",
    ),
    Ok(
        "Gate::Open_Update(void)",
    ),
    Ok(
        "MKWaterManager_Deinit(void)",
    ),
    Ok(
        "Fluffy::UpdateSound(void)",
    ),
    Ok(
        "PlatformDesc::Load(KromeIni *)",
    ),
    Ok(
        "global constructors keyed to CrikeyProps_LoadResources(KromeIni *)",
    ),
    Ok(
        "View::MoveGreenToAlpha(void)",
    ),
    Ok(
        "GameCamera::Fall_RaiseHeight_SetSource(void)",
    ),
    Ok(
        "KoalaKid::Happy(void)",
    ),
    Ok(
        "Tools_SquareDistanceFromLine(Vector *, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Texture::UploadToDrawBuffer(void)",
    ),
    Ok(
        "TurtleStruct::Reset(void)",
    ),
    Ok(
        "Level_ParseRot(KromeIniLine *, Vector *)",
    ),
    Ok(
        "ParticleSystem::UploadVUDrawData(void)",
    ),
    Ok(
        "PlatformRider::ToLocal(Vector *)",
    ),
    Ok(
        "FrillProblem_HouseLost(void)",
    ),
    Ok(
        "FootEffect::pSnowMat",
    ),
    Ok(
        "Kin_GetDiscreteInitialVelocity(float *, float *, float *, float *)",
    ),
    Ok(
        "Matrix::CopyRotation(Matrix *)",
    ),
    Ok(
        "Shadow::Deinit(void)",
    ),
    Ok(
        "Collapsible::LoadDone(void)",
    ),
    Ok(
        "Weather_Update(void)",
    ),
    Ok(
        "PtrList<Animation>::Destroy(Animation *)",
    ),
    Ok(
        "ModuleInfo<SpiderDirt> virtual table",
    ),
    Ok(
        "Sentinel::IdleInit(void)",
    ),
    Ok(
        "Tools_DebugPtLine(Vector, Vector, float, int, int, float)",
    ),
    Ok(
        "global constructors keyed to NinjaGecko::nStarObj",
    ),
    Ok(
        "Tick::Debug(void)",
    ),
    Ok(
        "FileSys_Open(char *, int *, bool)",
    ),
    Ok(
        "FrillLizard::Chase(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowSpider::AttackInit(void)",
    ),
    Ok(
        "WaterPipeObjective::Message(MKMessage *)",
    ),
    Ok(
        "Ty_Line(KromeIniLine *)",
    ),
    Ok(
        "MKAnimScript::GetEventByName(char *)",
    ),
    Ok(
        "WaterDrip::Update(void)",
    ),
    Ok(
        "StaticProp::GetDesc(void)",
    ),
    Ok(
        "MKPackage_IsLoaded(float *)",
    ),
    Ok(
        "ShadowBat::GetCurrentHoverPos(void)",
    ),
    Ok(
        "Ty::SwallowedByGroper(void)",
    ),
    Ok(
        "LedgePullUpData::Grab(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TyMemCard_AutoSaveUpdate(void)",
    ),
    Ok(
        "LearnToDiveData::MissCrate(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Texture::CreateFromRawData(char *, void *, int, int, int)",
    ),
    Ok(
        "BlueTongue::Punch(bool)",
    ),
    Ok(
        "StopwatchStruct::SetState(StopwatchState)",
    ),
    Ok(
        "Ty::UpdateBoomerangs(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::debugNumLowDetailStrips",
    ),
    Ok(
        "BlueTongue_LoadResources(KromeIni *)",
    ),
    Ok(
        "SpikeyIce_Draw(void)",
    ),
    Ok(
        "TyAnimTables_InitIndexTable(MKAnimScript *)",
    ),
    Ok(
        "WhiteBat::Reset(void)",
    ),
    Ok(
        "ShadowBatPipe::LoadDone(void)",
    ),
    Ok(
        "ModuleInfo<OpalCrate> virtual table",
    ),
    Ok(
        "BurningBat::Init(Vector *, BoundingVolume *)",
    ),
    Ok(
        "Dennis::FreakOut_Init(void)",
    ),
    Ok(
        "Emu::Init(GameObjDesc *)",
    ),
    Ok(
        "ParticleSystem::DrawDebug(float, float *)",
    ),
    Ok(
        "BunyipElder_LoadResources(KromeIni *)",
    ),
    Ok(
        "EnemyWaypoints::PrevWaypoint(void)",
    ),
    Ok(
        "OpalCollector::nNextPoint",
    ),
    Ok(
        "type_info::_GLOBAL_$F$before(type_info const &) const",
    ),
    Ok(
        "Speedboat::RotatePropeller(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::UnderWaterMediumUpdate(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_ptr",
        ),
    ),
    Ok(
        "ModuleInfo<ConditionalScriptProp>::Init(void)",
    ),
    Ok(
        "GameObjectManager::Begin(void)",
    ),
    Ok(
        "BoulderTrap::Init(GameObjDesc *)",
    ),
    Ok(
        "WaterfallPointStruct::pointType",
    ),
    Ok(
        "BoomerangTrail::Deinit(void)",
    ),
    Ok(
        "Avalanche::cloudType",
    ),
    Ok(
        "SnowRoo::Init(GameObjDesc *)",
    ),
    Ok(
        "TyBite::IsTargeting(Model *)",
    ),
    Ok(
        "__ptmd_type_info type_info node",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bubble::bubbleType",
    ),
    Ok(
        "Texture::FreeAllVRam(void)",
    ),
    Ok(
        "Elle::Reset(void)",
    ),
    Ok(
        "SnowBallAttack::AddShadow(void)",
    ),
    Ok(
        "KoalaKid::LogicUpdate(void)",
    ),
    Ok(
        "Ty::LandMediumInit(void)",
    ),
    Ok(
        "Sly::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<ShadowBatSonar> virtual table",
    ),
    Ok(
        "Collision_AddDynamicModel(Model *, CollisionInfo *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowSpider::Chase(void)",
    ),
    Ok(
        "GameCamera::Deinit(void)",
    ),
    Ok(
        "FallGuideProp virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillLizard::RunToBunkerInit(void)",
    ),
    Ok(
        "LavaBurner::Deinit(void)",
    ),
    Ok(
        "Burnable::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterSlideManager::GetNextWayPoint(Vector *)",
    ),
    Ok(
        "Sheila::IdleInit(void)",
    ),
    Ok(
        "Furnace::Message(MKMessage *)",
    ),
    Ok(
        "SnowBall::CheckForHit(void)",
    ),
    Ok(
        "FrontEnd_Title_Deinit(void)",
    ),
    Ok(
        "FlameThrower::Update(void)",
    ),
    Ok(
        "DialogEffect::ParticlesInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ParticleSystem::Init(ParticleSystemType *, Vector *, BoundingVolume *, float, int)",
    ),
    Ok(
        "Sheila::Message(MKMessage *)",
    ),
    Ok(
        "SnowSpider::FlinchInit(void)",
    ),
    Ok(
        "Path_Exists(signed char)",
    ),
    Ok(
        "long double type_info function",
    ),
    Ok(
        "CaveBat::LogicUpdate(void)",
    ),
    Ok(
        "RockProjectile::Pickup(void)",
    ),
    Ok(
        "ArsonTorch::Deinit(void)",
    ),
    Ok(
        "TriggerProp::LoadDone(void)",
    ),
    Ok(
        "FrillBike::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<Crikey>::ConstructObject(void *)",
    ),
    Ok(
        "Talisman::LoadDone(void)",
    ),
    Ok(
        "ParticleSystem::nextUniqueId",
    ),
    Ok(
        "MorayEel::GetBiteRange(void)",
    ),
    Ok(
        "WaterTank_IsMember(MKPropDescriptor *)",
    ),
    Ok(
        "Dma::AddGif_AD_FBA_1(unsigned long)",
    ),
    Ok(
        "SnowGun::StartFiring(void)",
    ),
    Ok(
        "Wombat::InitPath(void)",
    ),
    Ok(
        "CrikeyChum::MovingUp(void)",
    ),
    Ok(
        "Portal_CheckForEnter(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MiniGame_C3_DDA::Update(Ringo *)",
    ),
    Ok(
        "TyBite::DeinitBiteCharge(void)",
    ),
    Ok(
        "Torch::CheckForHit(void)",
    ),
    Ok(
        "CheckpointStruct::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterDrip::pWaterDripMat",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_log",
        ),
    ),
    Ok(
        "ModuleInfo<SnowBallAttack>::Init(void)",
    ),
    Ok(
        "ModuleInfo<FishShoalField>::Init(void)",
    ),
    Ok(
        "WaterfallStreamStruct::Deinit(void)",
    ),
    Ok(
        "Hud_DrawTimeFont(float, float, float, int)",
    ),
    Ok(
        "Model::GetName(void)",
    ),
    Ok(
        "HeatFlare_LoadResources(void)",
    ),
    Ok(
        "ModuleInfo<Elle>::Init(void)",
    ),
    Ok(
        "FishShoal_LoadResources(void)",
    ),
    Ok(
        "LavaBurner::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "DialogEffectManager::GetStringValue(char *)",
    ),
    Ok(
        "LevelObjective::Deactivate(void)",
    ),
    Ok(
        "BarbedWire_Reset(void)",
    ),
    Ok(
        "EventTriggers_LoadResources(KromeIni *)",
    ),
    Ok(
        "MKShadow_DeinitModule(void)",
    ),
    Ok(
        "GCT_WaypointPlaneManager::Init(WayPointLoadInfo *, float, float)",
    ),
    Ok(
        "ModuleInfo<SnowRoo>::ConstructObject(void *)",
    ),
    Ok(
        "Fluffy::DeinitModule(void)",
    ),
    Ok(
        "SynkerFrog::GetDesc(void)",
    ),
    Ok(
        "BoomerangManager::DrawShadow(Vector *)",
    ),
    Ok(
        "Muddie::Init(GameObjDesc *)",
    ),
    Ok(
        "Fish_End(void)",
    ),
    Ok(
        "Model_InitModule(void)",
    ),
    Ok(
        "ModuleInfo<Frog>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tools_GetFloor2(Vector *, CollisionResult *, float, CollisionMode, unsigned int)",
    ),
    Ok(
        "ModuleInfo<BuzzSaw2>::ConstructObject(void *)",
    ),
    Ok(
        "SoundEventManager::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bat::GenerateRandomPos(void)",
    ),
    Ok(
        "Avalanche::pMat",
    ),
    Ok(
        "Windmill_Deinit(void)",
    ),
    Ok(
        "Blitter_Box::DrawNoMat(int)",
    ),
    Ok(
        "Wombat::Spawn(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "hrow_bad_typeid",
        ),
    ),
    Ok(
        "LilNeddy::HandleBoomerangHit(Boomerang *)",
    ),
    Ok(
        "Croc virtual table",
    ),
    Ok(
        "Frog::UpdateLogic(void)",
    ),
    Ok(
        "void LoadDescriptors<StaticPropDescriptor>(KromeIni *, char *, StaticPropDescriptor *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Eel>::ConstructObject(void *)",
    ),
    Ok(
        "Kaboomerang virtual table",
    ),
    Ok(
        "LedgePullUpData::InitPull(void)",
    ),
    Ok(
        "Lenny::LoadDone(void)",
    ),
    Ok(
        "Wombat::Attack(void)",
    ),
    Ok(
        "Flamerang::Init(GameObjDesc *, BoomerangWeapon *)",
    ),
    Ok(
        "SpyEgg::Draw(void)",
    ),
    Ok(
        "GameCamera::GetDesiredSourceY(void)",
    ),
    Ok(
        "BoomerangWeapon::Deinit(void)",
    ),
    Ok(
        "BoomerangTrail::Update(Vector *, Vector *)",
    ),
    Ok(
        "BunyipElder::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Geyser::states",
    ),
    Ok(
        "CrateStruct::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Speedboat>::ConstructObject(void *)",
    ),
    Ok(
        "WaterSlide_Init(void)",
    ),
    Ok(
        "global constructors keyed to Geyser::states",
    ),
    Ok(
        "KoalaKid::Walk(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Material::Use(void)",
    ),
    Ok(
        "Shadow::GetLightPos(Vector *)",
    ),
    Ok(
        "Sly::CheckEvents(void)",
    ),
    Ok(
        "ShadowBat::GetFreeSonar(void)",
    ),
    Ok(
        "BurningJunk::Init(GameObjDesc *)",
    ),
    Ok(
        "GameCamera::SmoothY_Update(void)",
    ),
    Ok(
        "ModuleInfo<Frostyrang>::Init(void)",
    ),
    Ok(
        "EnemyObject::IsNearSq(Vector *, Vector *, float)",
    ),
    Ok(
        "LogicState::DebugState(GameState)",
    ),
    Ok(
        "exception::exception(void)",
    ),
    Ok(
        "TrapdoorSpider::AttackDeinit(void)",
    ),
    Ok(
        "RockProjectile::Reset(void)",
    ),
    Ok(
        "ModuleInfo<Shazza>::Init(void)",
    ),
    Ok(
        "ModuleInfo<TyFlyField>::Init(void)",
    ),
    Ok(
        "Boomerang virtual table",
    ),
    Ok(
        "Emu::InitIdle(void)",
    ),
    Ok(
        "ArsonTorch::Init(Model *)",
    ),
    Ok(
        "KingFisherField::Init(GameObjDesc *)",
    ),
    Ok(
        "WaterPipe::SendEnable(void)",
    ),
    Ok(
        "KoalaKid::RunInit(void)",
    ),
    Ok(
        "Shadow_EndDraw(void)",
    ),
    Ok(
        "Ty::StartDeath(HurtType, bool)",
    ),
    Ok(
        "UpdateFillState(void *)",
    ),
    Ok(
        "Path_Load(PathLoadInfo *)",
    ),
    Ok(
        "ParticleSystemManager::Init(int, int)",
    ),
    Ok(
        "Wombat::DeathInit(void)",
    ),
    Ok(
        "ModuleInfo<BurningTree>::Init(void)",
    ),
    Ok(
        "CrikeyCanister::Update(void)",
    ),
    Ok(
        "Tools_GetFloor(Vector const &, CollisionResult *, float, bool, unsigned int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Muddie::PatrolInit(void)",
    ),
    Ok(
        "Critter2::SetAnim(unsigned int, int)",
    ),
    Ok(
        "EnemyObject::Message(MKMessage *)",
    ),
    Ok(
        "WobbleTexture::WobbleUVs(float)",
    ),
    Ok(
        "Tools_DynamicStringTable::FindString(char *)",
    ),
    Ok(
        "LearnToDiveData::InitJump(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CameraOverride::SnapToSource(void)",
    ),
    Ok(
        "ShatterStruct::GetFragInfo(void)",
    ),
    Ok(
        "QuatRotation::ConvertNormal(Vector *, float)",
    ),
    Ok(
        "BoomerangWeapon::Init(BoomerangSide, BoomerangDesc *, BoomerangManager *)",
    ),
    Ok(
        "PauseScreen_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Jeep::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Blitter_Box::Draw(int)",
    ),
    Ok(
        "OpalCollector_GetPos(void)",
    ),
    Ok(
        "FireWorks::Smoke_Update(ParticleSystem *)",
    ),
    Ok(
        "CritterDesc2 * descr_cast<CritterDesc2 *>(MKPropDescriptor *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "KingFisherDesc::InitKookaburra(ModuleInfoBase *, char *, char *)",
    ),
    Ok(
        "Crc_Calculate(void const *, int)",
    ),
    Ok(
        "GameCamera_UseDropCamera(bool)",
    ),
    Ok(
        "Aquarang::UpdateParticleEffect(void)",
    ),
    Ok(
        "PE_WaterMist_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterTankStruct::FallInit(void)",
    ),
    Ok(
        "Reeds_Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RainbowEffect_Update(ParticleSystem *)",
    ),
    Ok(
        "IceBlockStruct::BergIntro(void)",
    ),
    Ok(
        "Gem_PickupParticle_Update(void)",
    ),
    Ok(
        "FinishLineStruct::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Maurie::LandInit(void)",
    ),
    Ok(
        "Video_IsReady(Video *)",
    ),
    Ok(
        "BushPig virtual table",
    ),
    Ok(
        "TyMemCard_NewGame(void)",
    ),
    Ok(
        "Ty::AddWaterSplash(void)",
    ),
    Ok(
        "KromeIni::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<BeerCan> virtual table",
    ),
    Ok(
        "DDACheckpoint::Message(MKMessage *)",
    ),
    Ok(
        "ChumBox::Reset(void)",
    ),
    Ok(
        "BossCass::Init(GameObjDesc *)",
    ),
    Ok(
        "DialogEffectManager::Reset(void)",
    ),
    Ok(
        "FireDrum::Draw(void)",
    ),
    Ok(
        "Ty::DeinitFall(void)",
    ),
    Ok(
        "unsigned short type_info node",
    ),
    Ok(
        "ScubaFrill::Message(MKMessage *)",
    ),
    Ok(
        "TyMemCard_LoadResources(void)",
    ),
    Ok(
        "global constructors keyed to Moth_LoadResources(void)",
    ),
    Ok(
        "FileSys_InitModule(void)",
    ),
    Ok(
        "CameraOverride::UpdateModifyType(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TyBite::InitBiteGrowl(void)",
    ),
    Ok(
        "ScubaFrill::Swim(void)",
    ),
    Ok(
        "Input_GetNumConnectedJoypads(void)",
    ),
    Ok(
        "ModuleInfo<CableCar>::ConstructObject(void *)",
    ),
    Ok(
        "ParticleSystem::UploadVUChunk(ParticleChunk *)",
    ),
    Ok(
        "MKShadow_CreateStaticFromModel(char *, char *)",
    ),
    Ok(
        "CritterCruiseMove::Update(Matrix &, CritterCruiseMoveInfo const &, float)",
    ),
    Ok(
        "Props_LoadResources(KromeIni *)",
    ),
    Ok(
        "Input_AllPadsGetButtonState(InputDevices *, int)",
    ),
    Ok(
        "AntHill::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterManager_Add(MKWater *)",
    ),
    Ok(
        "MKGrassGen::Deinit(void)",
    ),
    Ok(
        "CameraOverrideManager::UpdateOverride(CameraDescriptor *)",
    ),
    Ok(
        "Collapsible::Init(GameObjDesc *)",
    ),
    Ok(
        "__user_type_info::__user_type_info(char const *)",
    ),
    Ok(
        "View::CalcScreenZ(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Julius::Startled(void)",
    ),
    Ok(
        "Leech::MoveInit(void)",
    ),
    Ok(
        "Speedboat::LogicUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ringo::Update(void)",
    ),
    Ok(
        "BushPig::CloseCameraState(void)",
    ),
    Ok(
        "Gate::Deinit(void)",
    ),
    Ok(
        "Eel::AttackInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GreySmoke::Emit(void)",
    ),
    Ok(
        "ElevatorDescriptor * descr_cast<ElevatorDescriptor *>(MKPropDescriptor *)",
    ),
    Ok(
        "ParticleSystem::Destroy(float)",
    ),
    Ok(
        "Input_HasAnyButtonChanged(void)",
    ),
    Ok(
        "ModuleInfo<GuideParticle> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TrapdoorSpider::ChaseDeinit(void)",
    ),
    Ok(
        "CaveBat::Land(void)",
    ),
    Ok(
        "BoundingRegion::isCounterClockWise(Vector *, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RhinoGround::UpdateModelNormal(void)",
    ),
    Ok(
        "ThrowingStar::Deinit(void)",
    ),
    Ok(
        "TriggerSphereProp virtual table",
    ),
    Ok(
        "Ty::FirstPersonCalcCamInfo(FirstPersonInitInfo *)",
    ),
    Ok(
        "Elevator::UpdateFX(void)",
    ),
    Ok(
        "PontoonRope::Init(GameObjDesc *)",
    ),
    Ok(
        "SpeedUpCrate_LoadResources(void)",
    ),
    Ok(
        "MKMemoryCard_DeinitModule(void)",
    ),
    Ok(
        "PubeCrab::AlertSpin(bool)",
    ),
    Ok(
        "FrillLizard::AttackRun(void)",
    ),
    Ok(
        "OpalCollector::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Particle_CanSpray_Create(ParticleSystem **, Vector *, Vector *)",
    ),
    Ok(
        "Model::ExploreNextMaterial(ModelExplorer *)",
    ),
    Ok(
        "ModuleInfo<Gate>::Init(void)",
    ),
    Ok(
        "FrillLizard::LogicUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lenny::ChaseTyInit(void)",
    ),
    Ok(
        "AuroraKid::Idle(void)",
    ),
    Ok(
        "EnemySpawner::AddEnemyManual(void)",
    ),
    Ok(
        "StaticSpikes_Delete(StaticSpikesStruct *)",
    ),
    Ok(
        "GameCamera_Init(GameCameraHeroInfo *, int)",
    ),
    Ok(
        "IceBlockStruct::SetPos(float, float, float)",
    ),
    Ok(
        "Ty::InitSurfacing(void)",
    ),
    Ok(
        "float type_info function",
    ),
    Ok(
        "ModuleInfo<Wombat>::ConstructObject(void *)",
    ),
    Ok(
        "Ice virtual table",
    ),
    Ok(
        "Cattle::StartMove(void)",
    ),
    Ok(
        "SynkerFrillLizard::Draw(void)",
    ),
    Ok(
        "Basket_CanSpawnBonus(void)",
    ),
    Ok(
        "ConditionalScriptProp virtual table",
    ),
    Ok(
        "GameObjectManager::DrawObjects(void)",
    ),
    Ok(
        "MKWater::boxDraw",
    ),
    Ok(
        "FrillBike::LassoLost(void)",
    ),
    Ok(
        "CollisionObject::IsEnabled(void)",
    ),
    Ok(
        "Lenny::SetAnim(tagLennyAnim)",
    ),
    Ok(
        "EnemyObject::CheckForLedge(Vector *)",
    ),
    Ok(
        "BubbleSpawner::LoadDone(void)",
    ),
    Ok(
        "Ty::CheckForRangChange(void)",
    ),
    Ok(
        "Shark::Init(GameObjDesc *)",
    ),
    Ok(
        "TriggerBoxProp::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lenny::currentBankNr",
    ),
    Ok(
        "FileSys_OutputFileOrder(void)",
    ),
    Ok(
        "Basket::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKMemoryCard_InitModule(void)",
    ),
    Ok(
        "SeaMine::DriftBack(void)",
    ),
    Ok(
        "Input_GetDeviceStatus(InputDevices)",
    ),
    Ok(
        "global constructors keyed to SpiderWeb_LoadResources(KromeIni *)",
    ),
    Ok(
        "SnowSpider::UpdateFloorNormal(void)",
    ),
    Ok(
        "LavaDesc virtual table",
    ),
    Ok(
        "Ty_LoadResources(void)",
    ),
    Ok(
        "Ty::SharkCageEnter(void)",
    ),
    Ok(
        "Translation_GetLanguageLocalName(TranslationLanguage)",
    ),
    Ok(
        "FrillLizard::AlertIdle(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StarTrail::Init(void)",
    ),
    Ok(
        "WaterfallSprayStruct::mistType",
    ),
    Ok(
        "Torch::Reset(void)",
    ),
    Ok(
        "Portal_HideAll(void)",
    ),
    Ok(
        "ScrubTurkey::SetState(ScrubTurkeyState, bool)",
    ),
    Ok(
        "SaveStates_GetCogs(char *)",
    ),
    Ok(
        "MKGrassGen::bStaticDataUploaded",
    ),
    Ok(
        "SynkerFrillLizard::Deinit(void)",
    ),
    Ok(
        "BlueTongue::ChaseInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Roach::LogicUpdate(void)",
    ),
    Ok(
        "ResetLevel(void)",
    ),
    Ok(
        "pauseabit(void)",
    ),
    Ok(
        "Turtle_Init(void)",
    ),
    Ok(
        "Ty::GetTargetRollFromJoyXAxis(float)",
    ),
    Ok(
        "Yabby::UpdateModelNormal(void)",
    ),
    Ok(
        "ModuleInfo<Generator>::Init(void)",
    ),
    Ok(
        "Flamerang::HitWorld(Vector *, int)",
    ),
    Ok(
        "Boomerang_Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Basket::GetPos(void)",
    ),
    Ok(
        "__ptmf_type_info::~__ptmf_type_info(void)",
    ),
    Ok(
        "RenderTexture_CausticsLine(KromeIniLine *)",
    ),
    Ok(
        "ShadowBat::LandInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<C1Water> virtual table",
    ),
    Ok(
        "FrillBike::IsTyWithinChaseArea(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<ConditionalScriptProp> virtual table",
    ),
    Ok(
        "Hud_ResetPositions(void)",
    ),
    Ok(
        "ModuleInfo<SpeedboatObjective>::Init(void)",
    ),
    Ok(
        "WaterTankStruct::HasFallenOver(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::DefaultDraw(void)",
    ),
    Ok(
        "FrillBike::PatrolInit(void)",
    ),
    Ok(
        "TrapdoorSpider::WaitForRespawnInit(void)",
    ),
    Ok(
        "Roach::UpdateFloorNormal(void)",
    ),
    Ok(
        "FlameThrower virtual table",
    ),
    Ok(
        "Elevator::TyGrabs(void)",
    ),
    Ok(
        "Matrix::SetLookAt(Vector *, Vector *)",
    ),
    Ok(
        "ModuleInfo<GasJet>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Flamerang>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<BlueTongue>::ConstructObject(void *)",
    ),
    Ok(
        "MKParticleGenType::CreateDebugMenus(DebugOptionMenu *)",
    ),
    Ok(
        "Rhino::Patrol(void)",
    ),
    Ok(
        "CameraOverride::Path_Update(void)",
    ),
    Ok(
        "RainbowEffect::Deinit(void)",
    ),
    Ok(
        "Elle::IdleInit(void)",
    ),
    Ok(
        "BlueTongue::Idle(void)",
    ),
    Ok(
        "A1FrillObjective::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Basket::LoadDone(void)",
    ),
    Ok(
        "SpiderDirt virtual table",
    ),
    Ok(
        "Neddy::Idle(void)",
    ),
    Ok(
        "GameCamera::MiniGameB1_Init(void)",
    ),
    Ok(
        "EnemyObject::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "SoundBank_PlayExclusiveAmbientSound(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "IceRamp::IdleUpdate(void)",
    ),
    Ok(
        "OpalCollector::Deinit(void)",
    ),
    Ok(
        "Bubble::Deinit(void)",
    ),
    Ok(
        "Font::RenderChars(Font::TextCharStrip *, int)",
    ),
    Ok(
        "Emu::Message(MKMessage *)",
    ),
    Ok(
        "Hud_DeinitBossHealth(void)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_B3_Draw(void)",
    ),
    Ok(
        "SpinningLog::LoadDone(void)",
    ),
    Ok(
        "Groper::SwallowInit(void)",
    ),
    Ok(
        "EnemyObject::AllowedToAttack(void)",
    ),
    Ok(
        "ModuleInfo<CuttleFish>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<Projectile>::Init(void)",
    ),
    Ok(
        "Tools_TurnLR(Vector *, Vector *, float)",
    ),
    Ok(
        "KingFisher::Dive(void)",
    ),
    Ok(
        "SnowGun virtual table",
    ),
    Ok(
        "NinjaGecko_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<YabbyStalactite>::Init(void)",
    ),
    Ok(
        "AnimatingProp::Update(void)",
    ),
    Ok(
        "Weather_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BurningBat::Deinit(void)",
    ),
    Ok(
        "UIModel::SetScale(Vector *)",
    ),
    Ok(
        "global constructors keyed to LilNeddy_LoadResources(KromeIni *)",
    ),
    Ok(
        "IceBlock_Reset(void)",
    ),
    Ok(
        "MKWaterProp::DrawQuad_LowDetail(WaterStripHeader *, int, WaterStripVertex *, WaterStripNormal *, WaterStripUV *, WaterStripColor *, Vector *, Material *)",
    ),
    Ok(
        "UIImage::Init(char *)",
    ),
    Ok(
        "Ty::BreakAndTurn(void)",
    ),
    Ok(
        "Barracuda::Flinch(void)",
    ),
    Ok(
        "ModuleInfo<Furnace>::ConstructObject(void *)",
    ),
    Ok(
        "EmuRoundupObjective::Update(void)",
    ),
    Ok(
        "StopwatchStruct::Draw(void)",
    ),
    Ok(
        "OpalCollector::Open(void)",
    ),
    Ok(
        "__si_type_info type_info function",
    ),
    Ok(
        "Shazza::IdleInit(void)",
    ),
    Ok(
        "MiniGameC2_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<BlueTongueThrower> virtual table",
    ),
    Ok(
        "CameraOverride::Camera(void)",
    ),
    Ok(
        "StaticFXProp::Show(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::bDrawOverideMat",
    ),
    Ok(
        "Shark::TurnInit(void)",
    ),
    Ok(
        "Emu_LoadResources(void)",
    ),
    Ok(
        "Bird::UpdateLogic(void)",
    ),
    Ok(
        "Collapsible virtual table",
    ),
    Ok(
        "long type_info node",
    ),
    Ok(
        "Friend::Message(MKMessage *)",
    ),
    Ok(
        "TyBite::InitBite(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterManager_Remove(MKWater *)",
    ),
    Ok(
        "ShatterStruct::Update(void)",
    ),
    Ok(
        "Font::Dump(void)",
    ),
    Ok(
        "MKWaterProp::UploadVUTypeData(MKWaterType *)",
    ),
    Ok(
        "BlueTongueThrower::LoadDone(void)",
    ),
    Ok(
        "Bull_GetModel(void)",
    ),
    Ok(
        "Hud_ShowCogs(void)",
    ),
    Ok(
        "ParticleSystemManager::RemoveAll(void)",
    ),
    Ok(
        "Julius::SnoreInit(void)",
    ),
    Ok(
        "ScrubTurkey::Teleport(void)",
    ),
    Ok(
        "FrillBike::Reset(void)",
    ),
    Ok(
        "Rex::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Rufus::Init(GameObjDesc *)",
    ),
    Ok(
        "CaveBat_LoadResources(KromeIni *)",
    ),
    Ok(
        "OpalCollector virtual table",
    ),
    Ok(
        "FireDrum::nFlameSO",
    ),
    Ok(
        "MKWater::debugNumStripsClipped",
    ),
    Ok(
        "Talisman::Deinit(void)",
    ),
    Ok(
        "MobilePlatform::PushTy(void)",
    ),
    Ok(
        "Parser::ResetCurrLine(void)",
    ),
    Ok(
        "ModuleInfo<Roach>::ConstructObject(void *)",
    ),
    Ok(
        "CausticEffect::Render(void)",
    ),
    Ok(
        "Croc::Init(GameObjDesc *)",
    ),
    Ok(
        "Geyser::PoofInit(void)",
    ),
    Ok(
        "MiniGameB3_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BadBoonie::LogicUpdate(void)",
    ),
    Ok(
        "View::SetAspectRatio(float, float)",
    ),
    Ok(
        "GlueToGround(Vector *)",
    ),
    Ok(
        "MKAnimScript::GetAnim(int)",
    ),
    Ok(
        "Burnable::Draw(void)",
    ),
    Ok(
        "ModuleInfo<OpalCrate>::Init(void)",
    ),
    Ok(
        "Ty::SwitchBackFromAquaRang(void)",
    ),
    Ok(
        "ModuleInfo<Talisman>::ConstructObject(void *)",
    ),
    Ok(
        "ModuleInfo<FlameThrower> virtual table",
    ),
    Ok(
        "Wombat::Deinit(void)",
    ),
    Ok(
        "Basket virtual table",
    ),
    Ok(
        "MorayEel::anims",
    ),
    Ok(
        "global constructors keyed to MiniGameObjective::pActiveMiniGame",
    ),
    Ok(
        "System_SetGSDisplayRegs(void)",
    ),
    Ok(
        "Croc::Chase(void)",
    ),
    Ok(
        "ModuleInfo<Frog> virtual table",
    ),
    Ok(
        "Rotation::GetRotVector(void)",
    ),
    Ok(
        "ModuleInfo<Wombat>::Init(void)",
    ),
    Ok(
        "WhiteBat::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<LilyPad> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterTankStruct::BeingPulled(bool)",
    ),
    Ok(
        "FireworksCrate::Reset(void)",
    ),
    Ok(
        "MKGrass_InitMixTable(void)",
    ),
    Ok(
        "NinjaGecko::Message(MKMessage *)",
    ),
    Ok(
        "MKWaterType::Init(char *, MKWaterType *)",
    ),
    Ok(
        "MKWaterProp::CalcNextStartMixValues(Vector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "SpinningLog virtual table",
    ),
    Ok(
        "Ty::ClearRangTrails(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<KidObjective>::ConstructObject(void *)",
    ),
    Ok(
        "BeachHut::Init(GameObjDesc *)",
    ),
    Ok(
        "WaterSlide_Update(void)",
    ),
    Ok(
        "Fluffy::Message(MKMessage *)",
    ),
    Ok(
        "NinjaGecko::ThrowStar(void)",
    ),
    Ok(
        "DialogEffectManager::ParseEffects(char *)",
    ),
    Ok(
        "Crate_HideAll(void)",
    ),
    Ok(
        "Ty::IceRunToStopTransition(bool)",
    ),
    Ok(
        "Tick::FireDeinit(void)",
    ),
    Ok(
        "ShadowBat::DeadInit(void)",
    ),
    Ok(
        "CaveBat::InitPathManager(void)",
    ),
    Ok(
        "TimeAttack_OnDeinit(void)",
    ),
    Ok(
        "GameCamera_CycleDistance(void)",
    ),
    Ok(
        "global constructors keyed to Shark_LoadResources(KromeIni *)",
    ),
    Ok(
        "Cloud::Update(float, float)",
    ),
    Ok(
        "TrapdoorSpider::JumpFromHoleInit(void)",
    ),
    Ok(
        "Dennis::MoveToPrevPoint_Update(void)",
    ),
    Ok(
        "Boomerang::PlaySound(BoomerangSound, int)",
    ),
    Ok(
        "GameData::SetHasExtraHealth(bool)",
    ),
    Ok(
        "Boomerang::UpdateLoaded(void)",
    ),
    Ok(
        "GuideBarrel::Update(void)",
    ),
    Ok(
        "ModuleInfo<Cattle>::Init(void)",
    ),
    Ok(
        "Generator::Update(void)",
    ),
    Ok(
        "Coconut::LoadDone(void)",
    ),
    Ok(
        "BoomerangHud::Scroll(BoomerangType)",
    ),
    Ok(
        "MKSceneManager::DrawTerrain(int)",
    ),
    Ok(
        "Fluffy::Deinit(void)",
    ),
    Ok(
        "GameCamera::EnemyCamera_CheckStateChange(void)",
    ),
    Ok(
        "GameCamera::Collision_FindSafePointLR(Vector *, int, int, float, SafePointResult *)",
    ),
    Ok(
        "TyBite::InitBiteUncharge(void)",
    ),
    Ok(
        "ValidPIRange(float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lightning::CalcNextSpawnPoint(void)",
    ),
    Ok(
        "A1FrillObjective virtual table",
    ),
    Ok(
        "FireworksCrate::CheckFramerang(void)",
    ),
    Ok(
        "Mist_Draw(void)",
    ),
    Ok(
        "Ty::InitFall(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "UIButton::SetSelected(bool)",
    ),
    Ok(
        "Speedboat::Flinch(void)",
    ),
    Ok(
        "GameCameraState::InitState(CameraState)",
    ),
    Ok(
        "ModuleInfo<SignPost> virtual table",
    ),
    Ok(
        "ModuleInfo<TrapdoorSpider>::Init(void)",
    ),
    Ok(
        "KromeIni::InitFromBuffer(char *, char *)",
    ),
    Ok(
        "Moth::GenerateValidRandomPos(Vector *, Vector *)",
    ),
    Ok(
        "Str_CopyString(char *, int)",
    ),
    Ok(
        "WaterTankStruct::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Setup_Start(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BaseCritter virtual table",
    ),
    Ok(
        "Waterfall_Lock(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "KidObjective::Init(GameObjDesc *)",
    ),
    Ok(
        "Font::DrawTextWrapped(char *, float, float, Vector *, FontJustify, unsigned int, int)",
    ),
    Ok(
        "MKWaterManager_InitPerFrameDebugData(void)",
    ),
    Ok(
        "DiveRing::Message(MKMessage *)",
    ),
    Ok(
        "FrontEnd_Gallery_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Teleporter>::Init(void)",
    ),
    Ok(
        "SaveStates_SetBoomerang(int, bool)",
    ),
    Ok(
        "WaterSlideData::CalcHeading(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PE_BlackSmoke_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bat::Init(GameObjDesc *)",
    ),
    Ok(
        "Bouncer_LoadResources(KromeIni *)",
    ),
    Ok(
        "LavaEffect::Render(void)",
    ),
    Ok(
        "View::LightPoint(IntVector *, Vector *, Vector *, Vector *)",
    ),
    Ok(
        "Leech::Miss(void)",
    ),
    Ok(
        "FallGuideProp::Message(MKMessage *)",
    ),
    Ok(
        "ScrubTurkey::RunToWaypoint_Deinit(void)",
    ),
    Ok(
        "Neddy::Fall(void)",
    ),
    Ok(
        "BoomerangHud::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpiderTrapdoor_GetDescriptor(void)",
    ),
    Ok(
        "ToggleE3Mode(void)",
    ),
    Ok(
        "SoundEvent::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Drum_LoadResources(KromeIni *)",
    ),
    Ok(
        "Leech::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "Rufus::Death(void)",
    ),
    Ok(
        "PubeCrab virtual table",
    ),
    Ok(
        "KingFisher::DrawDebug(void)",
    ),
    Ok(
        "BoomerangWeapon::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::IsVisible(void)",
    ),
    Ok(
        "ModuleInfo<Maurie>::Init(void)",
    ),
    Ok(
        "Skink::burningBat",
    ),
    Ok(
        "PathFindingObject::AddWaypoint(Vector *, Vector *)",
    ),
    Ok(
        "GameData::SetZoneTalismanLocated(ZoneNumber, bool)",
    ),
    Ok(
        "ModuleInfo<LavaBurner>::Init(void)",
    ),
    Ok(
        "EnemyObject::FindNeighbours(float)",
    ),
    Ok(
        "NinjaGecko::Land(void)",
    ),
    Ok(
        "Croc::CheckForWaterEdge(void)",
    ),
    Ok(
        "CameraOverride::Direction_Create(void *)",
    ),
    Ok(
        "GameCamera::UseMiniGameB1Camera(bool)",
    ),
    Ok(
        "Frog::SharedUpdate(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_sqrt",
        ),
    ),
    Ok(
        "ModuleInfo<C3Chest>::ConstructObject(void *)",
    ),
    Ok(
        "BoomerangWeapon::Enable(void)",
    ),
    Ok(
        "Checkpoint_ClearLast(void)",
    ),
    Ok(
        "GameObject::Deinit(void)",
    ),
    Ok(
        "SnowRoo::nSnowBallObj",
    ),
    Ok(
        "Animation::FrameInstance::Dump(char *)",
    ),
    Ok(
        "ModuleInfo<Platform>::ConstructObject(void *)",
    ),
    Ok(
        "MKGrass_LoadIni(char *)",
    ),
    Ok(
        "Maurie virtual table",
    ),
    Ok(
        "ModuleInfo<TumbleWeed>::ConstructObject(void *)",
    ),
    Ok(
        "RingoArm::UpInit(void)",
    ),
    Ok(
        "Shark::BackOffInit(void)",
    ),
    Ok(
        "ModuleInfo<Eel>::Init(void)",
    ),
    Ok(
        "BunyipStruct::Show(bool)",
    ),
    Ok(
        "ModuleInfo<CaveBatObjective>::ConstructObject(void *)",
    ),
    Ok(
        "WaterTankStruct::Deinit(void)",
    ),
    Ok(
        "FrillBike::Recover(void)",
    ),
    Ok(
        "global constructors keyed to BoomerangDesc::Load(KromeIni *)",
    ),
    Ok(
        "Spline::MergeEnds(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWave::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<BunyipElder>::Init(void)",
    ),
    Ok(
        "CritterField2::Init(GameObjDesc *)",
    ),
    Ok(
        "FriendDescriptor virtual table",
    ),
    Ok(
        "Ty::DogPaddle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Weather_CreateDebugMenus(DebugOptionMenu *, char **)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<OpalCrate>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongue::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "Collision_AddDynamicSubobject(Model *, int, CollisionInfo *)",
    ),
    Ok(
        "ProgressBar::Init(char *, char *, int, int, float, int, float, float)",
    ),
    Ok(
        "IceBlock_Update(void)",
    ),
    Ok(
        "Vector::ApplyMatrix(Matrix *)",
    ),
    Ok(
        "Rain::Init(RainInit *)",
    ),
    Ok(
        "AquarangProp::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CollisionObject::CheckObjectCollision(Vector *, Vector *, CollisionObject *, CollisionResult *)",
    ),
    Ok(
        "ModuleInfo<Zappyrang>::ConstructObject(void *)",
    ),
    Ok(
        "CheckpointStruct::GetPos(void)",
    ),
    Ok(
        "Tick::StickToHead(void)",
    ),
    Ok(
        "Skink::BurnBatInit(void)",
    ),
    Ok(
        "Skink::Attack(void)",
    ),
    Ok(
        "ShadowBat::StandOnPipeInit(void)",
    ),
    Ok(
        "PontoonRope::Deinit(void)",
    ),
    Ok(
        "Tools_BuildMatrixFromFwd(Matrix *, Vector *, Vector *)",
    ),
    Ok(
        "Tools_WayPoints::LoadLine(KromeIniLine *, Tools_WayPoints::LoadMode)",
    ),
    Ok(
        "BushPig_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Jeep::Message(MKMessage *)",
    ),
    Ok(
        "Aurora::Idle(void)",
    ),
    Ok(
        "RockProjectile::CanPickup(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StarTrail::Deinit(void)",
    ),
    Ok(
        "Muddie::BlockRecoilInit(void)",
    ),
    Ok(
        "FrillBike::UpdateExhaust(void)",
    ),
    Ok(
        "Ty::UpdateSlipperyPhysics(Vector, Vector, Vector)",
    ),
    Ok(
        "TyParticleManager::SpawnFireParticle(Vector *, float)",
    ),
    Ok(
        "GameCamera::UsePontoonCamera(bool)",
    ),
    Err(
        InvalidSpecialMethod(
            "sce_sema_id",
        ),
    ),
    Ok(
        "SwapShort(unsigned short)",
    ),
    Ok(
        "WaterVolume::Deinit(void)",
    ),
    Ok(
        "Boomerang::SendHitMessage(CollisionResult *)",
    ),
    Ok(
        "Gate::Update(void)",
    ),
    Ok(
        "ModuleInfo<ScubaFrill>::ConstructObject(void *)",
    ),
    Ok(
        "Sjis2Ascii(char *)",
    ),
    Ok(
        "IceBlockStruct::Shatter(void)",
    ),
    Ok(
        "Spline::Reset(void)",
    ),
    Ok(
        "OmniLight_FindNearest(OmniLightScene *, Vector *, float)",
    ),
    Ok(
        "Elevator::SetState(Elevator::State)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongueThrower::DrawDebug(void)",
    ),
    Ok(
        "EnemySpawner::IsActive(void)",
    ),
    Ok(
        "WaterPipe::Update(void)",
    ),
    Ok(
        "GameCamera_Reset(GameCameraHeroInfo *, int)",
    ),
    Ok(
        "BreakAndTurnData::RunStopUpdate(void)",
    ),
    Ok(
        "IsAscii(char *)",
    ),
    Ok(
        "MobilePlatformDesc::Init(ModuleInfoBase *, char *, char *, int, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::AddGif_AD_TEST_1(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "AutoTargetStruct::SetNearestTargetEnemy(Vector *, Model *, Vector *)",
    ),
    Ok(
        "IceCoolant::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "PerimeterCheckObjective virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rufus::DeathInit(void)",
    ),
    Ok(
        "SpikeyIce_Delete(SpikeyIceStruct *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PontoonRope_LoadResource(KromeIni *)",
    ),
    Ok(
        "CheckpointStruct::Activating(void)",
    ),
    Ok(
        "ShadowBatPipe::Init(GameObjDesc *)",
    ),
    Ok(
        "Boomerang::UpdateParticleEffect(void)",
    ),
    Ok(
        "DebugInfo_Sphere(char *, Vector *, float, int, Vector *)",
    ),
    Ok(
        "FireworksCrate::LoadDone(void)",
    ),
    Ok(
        "Tools_CapsuleTestMagSq(Vector *, Vector *, Vector *, float)",
    ),
    Ok(
        "MKMem_Mark(void)",
    ),
    Ok(
        "FrontEnd_Gallery_Deinit(void)",
    ),
    Ok(
        "CrikeyCanister_GetDescriptor(void)",
    ),
    Ok(
        "FrontEnd_Gallery_OnExit(void)",
    ),
    Ok(
        "global constructors keyed to SnowPile_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Skink::nBeerObj",
    ),
    Ok(
        "ZoneBlockerProp::LoadLine(KromeIniLine *)",
    ),
    Err(
        InvalidSpecialMethod(
            "sce_eh_sema_id",
        ),
    ),
    Ok(
        "SnowSpider::PatrolDeinit(void)",
    ),
    Ok(
        "NinjaGecko::ReboundInit(void)",
    ),
    Ok(
        "BoomerangWeapon::Idle(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "_MKMem_TFree(void *, char *, int)",
    ),
    Ok(
        "Boomerang::CollideWithEnvironment(CollisionResult *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "OpalCollector::Draw(void)",
    ),
    Ok(
        "FireDrum::LightDrum(void)",
    ),
    Ok(
        "Shatter_Draw(void)",
    ),
    Ok(
        "Crikey::CheckAvailableChumOrCanister(void)",
    ),
    Ok(
        "Hud_ShowSpecialPickups(void)",
    ),
    Ok(
        "Matrix::SetRotationPYR(Vector *)",
    ),
    Ok(
        "Texture::AddToUploadQueue(void)",
    ),
    Ok(
        "Skink::Chase(void)",
    ),
    Ok(
        "ScrubTurkey::RunToWaypoint_Event(char *)",
    ),
    Ok(
        "Bull::DoAnAttack(void)",
    ),
    Ok(
        "FinishLine_Hide(void)",
    ),
    Ok(
        "MKProp::Reset(void)",
    ),
    Ok(
        "Tick::Move(void)",
    ),
    Ok(
        "Neddy::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "WaterVolume_IsWithin(Vector *, float *)",
    ),
    Ok(
        "MKWater::pWhiteTexture",
    ),
    Ok(
        "Matrix::RotateYaw(Matrix *, float)",
    ),
    Ok(
        "operator new [](unsigned int, void *)",
    ),
    Ok(
        "WaterDragon_End(void)",
    ),
    Ok(
        "Ty::PlayFootSFX(FootSide, bool, bool)",
    ),
    Ok(
        "Ty::DeinitIdleSurfaceSwim(void)",
    ),
    Ok(
        "PtrList<GameObject>::Destroy(GameObject *)",
    ),
    Ok(
        "SignPost virtual table",
    ),
    Ok(
        "Rufus::HopOnSpot(bool)",
    ),
    Ok(
        "CuttleFish::GenerateRandomPos(void)",
    ),
    Ok(
        "SnowPile::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "BoomerangWeapon::DrawReflection(void)",
    ),
    Ok(
        "BoomerangDesc * descr_cast<BoomerangDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "global constructors keyed to pStaticCamEye",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DirectLight::Set(Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Image::Init(int, int, unsigned int *)",
    ),
    Ok(
        "PontoonRope::Draw(void)",
    ),
    Ok(
        "Boomerang::StopSounds(void)",
    ),
    Ok(
        "BunyipStruct::SetState(BunyipState)",
    ),
    Ok(
        "CaveBat::RunAwayDeinit(void)",
    ),
    Ok(
        "ConditionalScriptProp::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<SynkerFrillLizard>::ConstructObject(void *)",
    ),
    Ok(
        "BlueTongue::Taunt(bool)",
    ),
    Ok(
        "ModuleInfo<SpiderWeb>::Init(void)",
    ),
    Ok(
        "GameData::CollectCog(GoldenCogType)",
    ),
    Ok(
        "FrillProblemObjective::Init(GameObjDesc *)",
    ),
    Ok(
        "Muddie::WaitInit(void)",
    ),
    Ok(
        "Elevator::Update(void)",
    ),
    Ok(
        "Dma::AddGif_AD_HWREG(unsigned long)",
    ),
    Ok(
        "Skink::Struck(void)",
    ),
    Ok(
        "FireworksCrate::Message(MKMessage *)",
    ),
    Ok(
        "Shark::CircleCageInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Shark::CruiseInit(void)",
    ),
    Ok(
        "IceBlockStruct::Idle(void)",
    ),
    Ok(
        "LilNeddy::Idle(void)",
    ),
    Ok(
        "SpeedboatWake::Reset(void)",
    ),
    Ok(
        "BlueTongueThrower::Flinch(void)",
    ),
    Ok(
        "BurningTree::Reset(void)",
    ),
    Ok(
        "GetJeep(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongue::HuntShazza(void)",
    ),
    Ok(
        "BoomerangManager::IsOwnRang(Boomerang *)",
    ),
    Ok(
        "ModuleInfo<WhiteBat>::ConstructObject(void *)",
    ),
    Ok(
        "CaveBat::Idle(void)",
    ),
    Ok(
        "CrikeyCanister::Shaking(void)",
    ),
    Ok(
        "Ice::Update(void)",
    ),
    Ok(
        "KoalaKid::UnloadSound(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TurningPlatform::TurnToNext(void)",
    ),
    Ok(
        "Heap_TrackAlloc(void *, int, char *, int, char *)",
    ),
    Ok(
        "ModuleInfo<FrillBike>::Init(void)",
    ),
    Ok(
        "GameCamera::GetMoveYaw(void)",
    ),
    Ok(
        "WaterSlideData::InitJump(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model::AddSubObjectDraw(void *, int)",
    ),
    Ok(
        "RkvTOC::Init(char *)",
    ),
    Ok(
        "ModuleInfo<Dennis>::ConstructObject(void *)",
    ),
    Ok(
        "Game_DebugModeUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::Smooth(void)",
    ),
    Ok(
        "MusicalIcicleObjective::Init(GameObjDesc *)",
    ),
    Ok(
        "RenderTexture_RenderWater(void)",
    ),
    Ok(
        "Vector::Inverse(void)",
    ),
    Ok(
        "ModuleInfo<ThinIceProp>::Init(void)",
    ),
    Ok(
        "Jeep::AvoidObstacles(void)",
    ),
    Ok(
        "KromeIni::Init(char *)",
    ),
    Ok(
        "BoundingRegion::ArePointsWithin(Vector *, Vector *)",
    ),
    Ok(
        "ModuleInfo<Spear> virtual table",
    ),
    Ok(
        "Enemies_GetTrackedPos(void *, Vector *)",
    ),
    Ok(
        "IcePlatform::MoveTy(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBat::ShootSonar(void)",
    ),
    Ok(
        "BilbyHud::Init(void)",
    ),
    Ok(
        "RenderTexture_SetWaterHigh(char *, float)",
    ),
    Ok(
        "Jeep::Reset(void)",
    ),
    Ok(
        "Dennis::Reset(void)",
    ),
    Ok(
        "ParticleSystem::identityMatrix",
    ),
    Ok(
        "GameCamera::Glide_Update(void)",
    ),
    Ok(
        "ModuleInfo<BubbleSpawner>::Init(void)",
    ),
    Ok(
        "ModuleInfo<DialogProp>::Init(void)",
    ),
    Ok(
        "ShoalFish::DashState(void)",
    ),
    Ok(
        "TyFSM::SetState(HeroActorState, bool)",
    ),
    Ok(
        "MKAnimScript::SetAnimNormalised(MKAnim *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::AddGif_AD_MIPTBP1_2(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "Boulder::Message(MKMessage *)",
    ),
    Ok(
        "Emu::Idle(void)",
    ),
    Ok(
        "ModuleInfo<Gate>::ConstructObject(void *)",
    ),
    Ok(
        "WaterSlideSection::SetToClosest(Vector *)",
    ),
    Ok(
        "Maurie::Hit(void)",
    ),
    Ok(
        "GameObject::DeinitModule(void)",
    ),
    Ok(
        "Ty::HeadStuckInFloor(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RockCollection::SetThrowDelay(int)",
    ),
    Ok(
        "DropPontoon::FallUpdate(void)",
    ),
    Ok(
        "SpyEgg::Message(MKMessage *)",
    ),
    Ok(
        "GameCamera::Fall_ForceNormal_SetSource(void)",
    ),
    Ok(
        "PipePart_IsPipeRepaired(GameObject *)",
    ),
    Ok(
        "Gem::Idle(void)",
    ),
    Ok(
        "ModuleInfo<BoulderTrap>::ConstructObject(void *)",
    ),
    Ok(
        "Leech::Deinit(void)",
    ),
    Ok(
        "Critter2::Init(GameObjDesc *)",
    ),
    Ok(
        "CameraOverrideRail_Line(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CritterField2::Update(void)",
    ),
    Ok(
        "GameCameraPoint::SmoothY(float, float)",
    ),
    Ok(
        "GameCamera_AddDynamicCollisionItem(Model *, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::CurrentVector_Update(void)",
    ),
    Ok(
        "Ty::SwallowedByGroperInit(void)",
    ),
    Ok(
        "UniformSpline::MergeEnds(void)",
    ),
    Ok(
        "Hud_DrawGems(void)",
    ),
    Ok(
        "OpalCollector::Init(GameObjDesc *)",
    ),
    Ok(
        "Emu::Escape(void)",
    ),
    Ok(
        "MKRumble_Play(InputDevices, float, float, float, char, float)",
    ),
    Ok(
        "MKWaterProp::CheckMix(int, int, Vector *)",
    ),
    Ok(
        "ShadowBat::DropStalactite(Vector *)",
    ),
    Err(
        InvalidSpecialMethod(
            "get_dynamic_handler_chain",
        ),
    ),
    Ok(
        "GS_SendRegs(void)",
    ),
    Ok(
        "ModuleInfo<FrogField> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BoomerangWeapon::InitFiring(void)",
    ),
    Ok(
        "Tools_MatIDToStr(int)",
    ),
    Ok(
        "TyFSM::SwimmingState(int)",
    ),
    Ok(
        "GlobalVar::ResetLight(void)",
    ),
    Ok(
        "ModuleInfo<Bird>::ConstructObject(void *)",
    ),
    Ok(
        "NinjaGecko::ThrowStarInit(void)",
    ),
    Ok(
        "Quadratic_Interpolate(float, Vector *)",
    ),
    Ok(
        "Tick virtual table",
    ),
    Ok(
        "Crikey::AttackDeinit(void)",
    ),
    Ok(
        "Boomerang::UpdateSplineEndPosition(void)",
    ),
    Ok(
        "ThinIceProp::Reset(void)",
    ),
    Ok(
        "BushPig::InitBrake(void)",
    ),
    Ok(
        "LetterBox_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "QuatRotation::IsNear(QuatRotation *, float)",
    ),
    Ok(
        "BeachHut::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<CrikeyChum>::Init(void)",
    ),
    Ok(
        "ParticleSystemManager_Draw(void)",
    ),
    Ok(
        "ModuleInfo<DiveRing>::ConstructObject(void *)",
    ),
    Ok(
        "Pontoon::SpawnParticles(Vector *)",
    ),
    Ok(
        "Ty::UnderWaterKnockBack(void)",
    ),
    Ok(
        "KenOath virtual table",
    ),
    Ok(
        "SynkerFrillLizardDesc virtual table",
    ),
    Ok(
        "TySounds::FadeSwimSoundIn(int, int *)",
    ),
    Ok(
        "FrontEnd_MainMenu_Init(void)",
    ),
    Ok(
        "Farlapp::IdleInit(void)",
    ),
    Ok(
        "BadBoonie::AlertPause_CanGoToState(void)",
    ),
    Ok(
        "Boomerang::HitWorld(Vector *, int)",
    ),
    Ok(
        "BushPig::InitCharge(void)",
    ),
    Ok(
        "Ty::FirstPerson(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Collision_Decal(Vector *, Vector *, float, float, Blitter_Tri *, int, Matrix *, int)",
    ),
    Ok(
        "Shark::Deinit(void)",
    ),
    Ok(
        "TrapdoorSpider_LoadResources(KromeIni *)",
    ),
    Ok(
        "MKSceneManager::MakePropTree(void)",
    ),
    Ok(
        "SMTree::LinkUp(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Grasshopper::UpdateLogic(void)",
    ),
    Ok(
        "Dennis::LogicUpdate(void)",
    ),
    Ok(
        "BeachHut::Draw(void)",
    ),
    Ok(
        "TyBite::SuperBite(void)",
    ),
    Ok(
        "SpeedboatWake::Init(char *)",
    ),
    Ok(
        "Sly::Skid(void)",
    ),
    Ok(
        "EnemySpawner::Deactivate(void)",
    ),
    Ok(
        "BushPig::MoveBull2(void)",
    ),
    Ok(
        "MobilePlatform::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "SaveStates_GetLevelVisited(char *)",
    ),
    Ok(
        "WaterSlideData::CheckSlide(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SmallCrab::GenerateNextPosition_Flee(void)",
    ),
    Ok(
        "wchar_t type_info node",
    ),
    Ok(
        "FrillBike::Init(GameObjDesc *)",
    ),
    Ok(
        "EnemyObject::GetWaypointRangeSq(void)",
    ),
    Ok(
        "SeaMine::ReSpawn(void)",
    ),
    Ok(
        "EnemyObject::GetCurrentAnim(void)",
    ),
    Ok(
        "LedgePullUpData::Init(void)",
    ),
    Ok(
        "Wombat::Chase(void)",
    ),
    Ok(
        "GameCamera::Collision_AddDynamicItem(Model *, int)",
    ),
    Ok(
        "TyAttributes_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<Flamerang>::ConstructObject(void *)",
    ),
    Ok(
        "Ty::Jump(void)",
    ),
    Ok(
        "Model::GetSubObjectName(int)",
    ),
    Ok(
        "Copyright_Draw(void)",
    ),
    Ok(
        "AuroraKid::Reset(void)",
    ),
    Ok(
        "MiniGameObjective::Reset(void)",
    ),
    Ok(
        "MiniGameC3_LoadResources(KromeIni *)",
    ),
    Ok(
        "SoundProp::Play(void)",
    ),
    Ok(
        "Matrix::SetTranslation(Vector *)",
    ),
    Ok(
        "C3Actor::LoadDone(void)",
    ),
    Ok(
        "SnowGun::animScript",
    ),
    Ok(
        "GameCamera::UsePlayerAdjustCamera(bool)",
    ),
    Ok(
        "StaticFXProp::UpdateWaterRipple(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LearnToDiveData::InitStart(void)",
    ),
    Ok(
        "ModuleInfo<WhiteBat> virtual table",
    ),
    Ok(
        "GameCamera::JumpAdjustTarget_GetOffset(void)",
    ),
    Ok(
        "Flame::Reset(void)",
    ),
    Ok(
        "global constructors keyed to Sly_LoadResources(KromeIni *)",
    ),
    Ok(
        "SynkerFrillLizardDesc * descr_cast<SynkerFrillLizardDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_B1_Deinit(void)",
    ),
    Ok(
        "StreamBuffer::Get(void *, int)",
    ),
    Ok(
        "GameData::Init(void)",
    ),
    Ok(
        "Sly::Knockdown(void)",
    ),
    Ok(
        "DropPontoon::NormalInit(void)",
    ),
    Ok(
        "RainbowEffect::rainbowEffectType",
    ),
    Ok(
        "Rufus::CheckForConfrontation(void)",
    ),
    Ok(
        "Bat::Sweep(void)",
    ),
    Ok(
        "RingoArm virtual table",
    ),
    Ok(
        "TyMemCard_WasCardRemoved(void)",
    ),
    Ok(
        "LedgePullUpData::Hang(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "cp_eh_info",
        ),
    ),
    Ok(
        "Julius::GoToSleepInit(void)",
    ),
    Ok(
        "PickupCounter virtual table",
    ),
    Ok(
        "C3Chest::SetNewPos(Vector *, float)",
    ),
    Ok(
        "Tools_DropShadow_Add(float, Vector *, Vector *, float)",
    ),
    Ok(
        "Lenny::Message(MKMessage *)",
    ),
    Ok(
        "Gate::Closed_Init(void)",
    ),
    Ok(
        "LedgePullUpData::Update(void)",
    ),
    Ok(
        "Dma::DeinitModule(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBat::GetCurrentPipe(void)",
    ),
    Ok(
        "Damageable::Draw(void)",
    ),
    Ok(
        "Gate::GetDesc(void)",
    ),
    Ok(
        "IsNumeric(char)",
    ),
    Ok(
        "BlueTongueRockObjective::bCompleted",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "__si_type_info type_info node",
    ),
    Ok(
        "Lightning::CreateDebugMenus(DebugOptionMenu *)",
    ),
    Ok(
        "RhinoGround::Message(MKMessage *)",
    ),
    Ok(
        "ModuleInfo<AnimatingProp> virtual table",
    ),
    Ok(
        "Tools_StripExtension(char *, char const *)",
    ),
    Ok(
        "BunyipElder virtual table",
    ),
    Ok(
        "DropPontoon::HangUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Camera::GetAnalogButtonState(InputDevices, int)",
    ),
    Ok(
        "Rain::CreateDebugMenus(DebugOptionMenu *)",
    ),
    Ok(
        "TumbleWeed::Reset(void)",
    ),
    Ok(
        "RandomIR(int *, int, int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FILOList::Clear(float)",
    ),
    Ok(
        "ModuleInfo<TriggerSphereProp>::Init(void)",
    ),
    Ok(
        "Gem_ParticleSystem_Init(void)",
    ),
    Ok(
        "Aurora::Update(void)",
    ),
    Ok(
        "ModuleInfo<Leech>::ConstructObject(void *)",
    ),
    Ok(
        "ShatterStruct::Fall(void)",
    ),
    Ok(
        "LavaBurner::LoadDone(void)",
    ),
    Ok(
        "BushPig::HitWall(void)",
    ),
    Ok(
        "FileSys_Close(int)",
    ),
    Ok(
        "SignPost::Hit(void)",
    ),
    Ok(
        "Ty::InitSlide(void)",
    ),
    Ok(
        "MiniGame_Deinit(void)",
    ),
    Ok(
        "Eel::Flinch(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::AddGif_AD_SIGNAL(unsigned long, unsigned long)",
    ),
    Ok(
        "PtrList<ModelTemplate>::Destroy(ModelTemplate *)",
    ),
    Ok(
        "Image::GetWidth(void)",
    ),
    Ok(
        "ModuleInfo<Coconut>::ConstructObject(void *)",
    ),
    Ok(
        "ScreenData::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StreamBuffer::SkipSpace(int)",
    ),
    Ok(
        "GameCamera_OverridePath_Add(CameraOverridePathLoadInfo *)",
    ),
    Ok(
        "GuideBarrel::LoadDone(void)",
    ),
    Ok(
        "ModuleInfo<FinishLineStruct> virtual table",
    ),
    Ok(
        "Eel::Message(MKMessage *)",
    ),
    Ok(
        "BlueTongue::Patrol(void)",
    ),
    Ok(
        "PauseScreen_SaveGame_Update(void)",
    ),
    Ok(
        "Ty::ProcessAnimationEvents(MKAnimScript *)",
    ),
    Ok(
        "Sentinel::ToppleDeathInit(void)",
    ),
    Ok(
        "Torch::Init(GameObjDesc *)",
    ),
    Ok(
        "FinishLineStruct::PostFinish(void)",
    ),
    Ok(
        "Ty::WaterToUnderWaterTransition(void)",
    ),
    Ok(
        "TyBite::DeinitBite(void)",
    ),
    Ok(
        "Pontoon virtual table",
    ),
    Ok(
        "System_GetCommandLineParameterByIndex(int)",
    ),
    Ok(
        "Projectile::DamageTy(void)",
    ),
    Ok(
        "Aquarang virtual table",
    ),
    Ok(
        "ModuleInfo<ChumBox>::Init(void)",
    ),
    Ok(
        "Ty::IsClaiming(void)",
    ),
    Ok(
        "Sly::Run(void)",
    ),
    Ok(
        "CameraOverrideFixedRail_Line(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SharkCage_LoadResources(KromeIni *)",
    ),
    Ok(
        "GameCamera_UseFirstPerson(bool, FirstPersonInitInfo *)",
    ),
    Ok(
        "Groper::IsTyCloseEnoughToSwallow(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Damageable::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongue::Deinit(void)",
    ),
    Ok(
        "Talisman::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Bilby_Rescued(BilbyType)",
    ),
    Ok(
        "LoadLevel_LoadBool(KromeIniLine *, char *, bool *)",
    ),
    Ok(
        "Furnace::Idle(void)",
    ),
    Ok(
        "BootTest_Init(void)",
    ),
    Ok(
        "ObjectiveFinder::Init(void)",
    ),
    Ok(
        "Ty::SetTyCameraChecks(unsigned int)",
    ),
    Ok(
        "MKWater::UpdateFillState(void)",
    ),
    Ok(
        "IceBlockStruct::SpawnShardAndSnow(Vector *)",
    ),
    Ok(
        "SnowBall::ResolveHit(void)",
    ),
    Ok(
        "SafePointResult::Side::GetSafestPoint(void)",
    ),
    Ok(
        "WaterfallSprayStruct::splashType",
    ),
    Ok(
        "LODDescriptor::ParseIni(KromeIni *, KromeIniLine *)",
    ),
    Ok(
        "MKWater::debugNumLowDetailSubObjects",
    ),
    Ok(
        "BlueTongue::Walk(bool)",
    ),
    Ok(
        "FILOList::Init(int, float)",
    ),
    Ok(
        "Shatterable::GetDesc(void)",
    ),
    Ok(
        "View::Init(Material *, Material *)",
    ),
    Ok(
        "SawDust::StopEffect(bool)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model::GetSubObjectMaterial(int, int)",
    ),
    Ok(
        "GameCamera::Swim_Init(void)",
    ),
    Ok(
        "Level_ParseEffect(KromeIniLine *, int *)",
    ),
    Ok(
        "CameraOverrideManager::GetOverrideType(CameraOverride *)",
    ),
    Ok(
        "ModuleInfo<FinishLineStruct>::Init(void)",
    ),
    Ok(
        "Tools_LogOpen(char *, int *, bool)",
    ),
    Ok(
        "GameCamera::CameraOverride_Init(void)",
    ),
    Ok(
        "IceCoolant::Message(MKMessage *)",
    ),
    Ok(
        "LoadLevel_LoadFlags(KromeIniLine *, char *, NameFlagPair *, int, int *)",
    ),
    Ok(
        "YMin(Vector *, float)",
    ),
    Ok(
        "Rhino::Recover(void)",
    ),
    Ok(
        "BurniningTree_GetTreeInRange(Vector *, float)",
    ),
    Ok(
        "EventTriggers_HideAll(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TyParticleManager::SpawnWaterRipple(Vector *, float)",
    ),
    Ok(
        "Bull::Toss(void)",
    ),
    Ok(
        "Vector::Inverse(Vector *)",
    ),
    Ok(
        "ModuleInfo<BlueTongueRockObjective>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CollisionObject::Update(Vector *, float)",
    ),
    Ok(
        "LavaEffect::Update(void)",
    ),
    Ok(
        "ModuleInfo<BoulderTrap> virtual table",
    ),
    Ok(
        "Model_GetVertex(ModelTemplate *, int, int, int, int)",
    ),
    Ok(
        "ModuleInfo<PontoonRope> virtual table",
    ),
    Ok(
        "SawDust::Update(Vector *)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_C3_Draw(void)",
    ),
    Ok(
        "FrontEnd_NewGame_Deinit(void)",
    ),
    Ok(
        "DirectLight::Init(void)",
    ),
    Ok(
        "MusicalIcicle::Grow(void)",
    ),
    Ok(
        "Gate::Closed_Update(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "swrite",
        ),
    ),
    Ok(
        "MKGrassGen::UploadStaticData(void)",
    ),
    Ok(
        "FrillLizard::LoadDone(void)",
    ),
    Ok(
        "DustTrail::Init(Vector *, float, float, float)",
    ),
    Ok(
        "KromeIniLine::AsFloatRange(int, float *, float *)",
    ),
    Ok(
        "global constructors keyed to Target::LoadDone(void)",
    ),
    Ok(
        "Friend::SetState(int, bool)",
    ),
    Ok(
        "WhirlyWind::SetupPath(void)",
    ),
    Ok(
        "GameCamera_UseFreeCamera(bool)",
    ),
    Ok(
        "Kaboomerang::Init(GameObjDesc *, BoomerangWeapon *)",
    ),
    Ok(
        "NodeOverride_Update(NodeOverride *)",
    ),
    Err(
        InvalidSpecialMethod(
            "malloc_trim_threshold",
        ),
    ),
    Ok(
        "QuadTriStrip::Init(Vector *, float, float, bool, Vector *, Vector *)",
    ),
    Ok(
        "BarbedWire_Add(Vector *, Vector *)",
    ),
    Ok(
        "Tools_MakePlane(Vector *, Vector *)",
    ),
    Ok(
        "ShadowBat::Draw(void)",
    ),
    Ok(
        "GameData::SetLearntToSwim(bool)",
    ),
    Ok(
        "ShadowBat::GetCurrentState(void)",
    ),
    Ok(
        "FrillBike::TurnWheels(void)",
    ),
    Ok(
        "FrontEnd_Gallery_Draw(void)",
    ),
    Ok(
        "Elevator::MoveTy(float)",
    ),
    Ok(
        "Shears_Deinit(void)",
    ),
    Ok(
        "BossCass_LoadResources(KromeIni *)",
    ),
    Ok(
        "BushPig::Update(void)",
    ),
    Ok(
        "Ty::InitGlideJump(void)",
    ),
    Ok(
        "CritterField2::SetUpBounds(void)",
    ),
    Ok(
        "MKShadow_RenderStatic(MKShadow *)",
    ),
    Ok(
        "BadBoonie::Teleport(void)",
    ),
    Ok(
        "Skink::AlertInit(void)",
    ),
    Ok(
        "NinjaGecko::Run(void)",
    ),
    Ok(
        "Gem::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "RenderTexture_LavaLine(KromeIniLine *)",
    ),
    Ok(
        "ModuleInfo<ShadowBatPipe>::ConstructObject(void *)",
    ),
    Ok(
        "CrikeyCanister::FinishEaten(void)",
    ),
    Ok(
        "GameCamera_GetMoveYaw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to MORAY_EEL_HOLE_MDL",
    ),
    Ok(
        "MKMem_GetInfo(int *, int *)",
    ),
    Ok(
        "MiniGameObjective::Deactivate(void)",
    ),
    Ok(
        "AnimatingProp::Draw(void)",
    ),
    Ok(
        "ReflectionStruct::Draw(void)",
    ),
    Ok(
        "Rhino_LoadResources(KromeIni *)",
    ),
    Ok(
        "Particle_SnowTrail_Create(ParticleSystem **, Vector *, Vector *)",
    ),
    Ok(
        "Model::ExploreNextFace(ModelExplorer *)",
    ),
    Ok(
        "MiniGameB1_LoadResources(KromeIni *)",
    ),
    Ok(
        "CritterField2::RemoveAll(void)",
    ),
    Ok(
        "DDASession::bDrawCameraEnabled",
    ),
    Ok(
        "MiniBoulder_IsNear(Vector *, float)",
    ),
    Ok(
        "Sly::FlinchInit(void)",
    ),
    Ok(
        "GameCamera::UseMiniGameC2Camera(bool)",
    ),
    Ok(
        "DDASession::ConvertStatsToReadable(void)",
    ),
    Ok(
        "Boomerang::Update(void)",
    ),
    Ok(
        "Julius::StartledInit(void)",
    ),
    Ok(
        "BaseCritter::Assign(CritterField2 *)",
    ),
    Ok(
        "Lasso::Update(Vector *, Vector *, float)",
    ),
    Ok(
        "Ty::InitDeath(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WhiteBat::UpdatePosition(void)",
    ),
    Ok(
        "ModuleInfo<Gecko>::ConstructObject(void *)",
    ),
    Ok(
        "Explosion::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rain::Update(void)",
    ),
    Ok(
        "ModuleInfo<SnowGun>::ConstructObject(void *)",
    ),
    Ok(
        "DrawOverlays(int)",
    ),
    Err(
        InvalidSpecialMethod(
            "default_terminate",
        ),
    ),
    Ok(
        "ModuleInfo<PubeCrab>::ConstructObject(void *)",
    ),
    Ok(
        "SpecialPickupStruct::UpdateShadow(float)",
    ),
    Ok(
        "Tools_DrawOverlay(Material *, Vector *, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Elevator_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<Fly>::ConstructObject(void *)",
    ),
    Ok(
        "Boulder::InitFall(void)",
    ),
    Ok(
        "BurningBat::Assign(Skink *)",
    ),
    Ok(
        "Ringo::Reset(void)",
    ),
    Ok(
        "ModuleInfo<Furnace>::Init(void)",
    ),
    Ok(
        "ModuleInfo<BossCass>::Init(void)",
    ),
    Ok(
        "Bull::ShockWave(void)",
    ),
    Ok(
        "YabbyStalactite::UpdateWorldMatrix(void)",
    ),
    Ok(
        "NinjaGecko virtual table",
    ),
    Ok(
        "GameData::SetTimeAttackBest(int)",
    ),
    Ok(
        "TreasureChest virtual table",
    ),
    Ok(
        "ThinIceProp_LoadResources(KromeIni *)",
    ),
    Ok(
        "SmallCrab_LoadResources(void)",
    ),
    Ok(
        "CrikeyChum::Draw(void)",
    ),
    Ok(
        "BushPig::DeinitCharge(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tools_WayPoints::Load(WayPointLoadInfo *, Tools_WayPoints::LoadMode)",
    ),
    Ok(
        "C3Actor::RunInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Sly::Defeated(void)",
    ),
    Ok(
        "Skink::AttackInit(void)",
    ),
    Ok(
        "CritterField2::GetFloor(Vector *, int, CollisionMode)",
    ),
    Ok(
        "ModuleInfo<Basket>::Init(void)",
    ),
    Ok(
        "Sly::Draw(void)",
    ),
    Ok(
        "NinjaGecko::LandInit(void)",
    ),
    Ok(
        "ShadowBatSonar::Draw(void)",
    ),
    Ok(
        "Dma::AddGif_AD_ALPHA_2(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "BadBoonie::BadBoonie_PreUpdate(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "mdiff",
        ),
    ),
    Ok(
        "KidObjective virtual table",
    ),
    Ok(
        "ModuleInfo<ShadowBatStalactite> virtual table",
    ),
    Ok(
        "Coconut::Hanging(void)",
    ),
    Ok(
        "__attr_type_info::~__attr_type_info(void)",
    ),
    Ok(
        "Input_AllPadsWasDirectionPressed(InputDevices *, int)",
    ),
    Ok(
        "ModuleInfo<Lava>::Init(void)",
    ),
    Ok(
        "Animation::List(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Barracuda::WaypointTyIsClosestTo(void)",
    ),
    Ok(
        "SpeedboatObjective::Reset(void)",
    ),
    Ok(
        "CrikeyChum::StartEaten(void)",
    ),
    Ok(
        "View::SetCameraLookAt(Vector *, Vector *)",
    ),
    Ok(
        "StreamBuffer::Put(void *, int)",
    ),
    Ok(
        "Boomerang::UpdateIdle(void)",
    ),
    Ok(
        "NinjaGecko::HitInit(void)",
    ),
    Ok(
        "Hud_ShowBoomerangs(void)",
    ),
    Ok(
        "ApproxMagXZ(Vector *, Vector *)",
    ),
    Ok(
        "Quadratic_SetPoints(Vector *, Vector *, Vector *)",
    ),
    Ok(
        "RainbowEffect_LoadResources(void)",
    ),
    Ok(
        "Roach::Patrol(void)",
    ),
    Ok(
        "CameraOverride::Direction_Update(void)",
    ),
    Ok(
        "TreasureChest::Idle(void)",
    ),
    Ok(
        "SpikeyIce_Reset(void)",
    ),
    Ok(
        "Rhino::IsTyVisible(void)",
    ),
    Ok(
        "Jeep::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "YabbyObjective virtual table",
    ),
    Ok(
        "UIText::Draw(char *)",
    ),
    Ok(
        "Ty::FallTransition(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<SpiderTrapdoor>::Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Julius::RequestTechnoRang(void)",
    ),
    Ok(
        "PlatformDesc * descr_cast<PlatformDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "Ty::IdleDogPaddle(void)",
    ),
    Ok(
        "Str_CharToUnicode(char *)",
    ),
    Ok(
        "Model_CompressTemplate(ModelTemplate *)",
    ),
    Ok(
        "Shadow_BeginDraw(void)",
    ),
    Ok(
        "PauseScreen_Init(PauseScreen_State)",
    ),
    Ok(
        "global constructors keyed to AquarangProp::pGlow",
    ),
    Ok(
        "SMTree::Deinit(void)",
    ),
    Ok(
        "QuatRotation::InterpolateSlerp(QuatRotation *, QuatRotation *, float)",
    ),
    Ok(
        "ModuleInfo<Rufus>::Init(void)",
    ),
    Ok(
        "UIModel::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SnowBallAttack::Update(void)",
    ),
    Ok(
        "UniformSpline::Deinit(void)",
    ),
    Ok(
        "HeatFlare_Lock(void)",
    ),
    Ok(
        "Wombat::GiveUp(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Julius::GoToSleep(void)",
    ),
    Ok(
        "ModuleInfo<BubbleSpawner>::ConstructObject(void *)",
    ),
    Ok(
        "DialogEffect::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<MusicalIcicle>::Init(void)",
    ),
    Ok(
        "Yabby::Reverse(void)",
    ),
    Ok(
        "Groper::Message(MKMessage *)",
    ),
    Ok(
        "GameCamera::Collision_FindSafePoint(Vector *, int, float, Vector *)",
    ),
    Ok(
        "Croc::MunchInit(void)",
    ),
    Ok(
        "BossHud::Draw(void)",
    ),
    Ok(
        "Collision_DeleteDynamicModel(Model *)",
    ),
    Ok(
        "Ty::UpdateBodyNodeRoll(float, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Skink virtual table",
    ),
    Ok(
        "Setup_PreloadLevel(void)",
    ),
    Ok(
        "Ty::AirMediumUpdate(void)",
    ),
    Ok(
        "Tools_GetRefPointPos(Model *, char *)",
    ),
    Ok(
        "SynkerBlueTongue virtual table",
    ),
    Ok(
        "ModuleInfo<Aquarang>::Init(void)",
    ),
    Ok(
        "Gem_DeleteList(void)",
    ),
    Ok(
        "operator new(unsigned int, void *)",
    ),
    Ok(
        "GameCamera::Pontoon_Update(void)",
    ),
    Ok(
        "type_info virtual table",
    ),
    Ok(
        "Elevator::Draw(void)",
    ),
    Ok(
        "PipePart virtual table",
    ),
    Ok(
        "Matrix::SetRotationPitch(float)",
    ),
    Ok(
        "System_Update_Normal(void)",
    ),
    Ok(
        "Wombat::AttackInit(void)",
    ),
    Ok(
        "ScubaFrill::SwimInit(void)",
    ),
    Ok(
        "PlatformRider::Detach(GameObject *)",
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_class",
        ),
    ),
    Ok(
        "DDASession::SaveToMemoryCard(int, char *)",
    ),
    Ok(
        "EnemyObject::GetAngleToTarget(void)",
    ),
    Ok(
        "Ty::WaterSlideMove(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SynkerFrog::Init(GameObjDesc *)",
    ),
    Ok(
        "unsigned long type_info function",
    ),
    Ok(
        "ScrubTurkey virtual table",
    ),
    Ok(
        "CrikeyCanister::UpdateWorldMatrix(void)",
    ),
    Ok(
        "Doomerang virtual table",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "rtti_ptmf",
        ),
    ),
    Ok(
        "Geyser::IdleUpdate(void)",
    ),
    Ok(
        "WaterVolume_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LavaBurner::Init(GameObjDesc *)",
    ),
    Ok(
        "Game_DebugMenuUpdate(void)",
    ),
    Ok(
        "MKWaterType::Deinit(void)",
    ),
    Ok(
        "MKParticleGen::Draw(View *, Vector *, Vector *)",
    ),
    Ok(
        "ModuleInfo<CableCar> virtual table",
    ),
    Ok(
        "WhiteBat::GenerateRandomOffsetFromBoss(void)",
    ),
    Ok(
        "Rex::DeckChairIdle(void)",
    ),
    Ok(
        "Furnace::Deinit(void)",
    ),
    Ok(
        "Bunyip_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpiderWeb::Update(void)",
    ),
    Ok(
        "WarpFlower::Update(void)",
    ),
    Ok(
        "TyBite::InitDiveBite(void)",
    ),
    Ok(
        "GameData::SetZoneUnlocked(ZoneNumber, bool)",
    ),
    Ok(
        "SynkerBlueTongueDesc * descr_cast<SynkerBlueTongueDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "Bull::WalkInit(void)",
    ),
    Ok(
        "GameCamera::SetYaw(void)",
    ),
    Ok(
        "Fly::FireUpdate(void)",
    ),
    Ok(
        "KoalaKid::PreloadSound(void)",
    ),
    Ok(
        "ModuleInfo<Croc> virtual table",
    ),
    Ok(
        "ModuleInfo<Elevator>::Init(void)",
    ),
    Ok(
        "TyMemCard_SaveDDA(void)",
    ),
    Ok(
        "Boomerang::UpdateColor(void)",
    ),
    Ok(
        "MKWaterManager_Draw(Material *)",
    ),
    Ok(
        "Rhino::Death(void)",
    ),
    Ok(
        "GameCamera::Fall_FindApproxHeroFloor(Vector *, float, bool)",
    ),
    Ok(
        "TurtleStruct::SelectRandomWaterTarget(void)",
    ),
    Ok(
        "Matrix::RotatePYR(Vector *)",
    ),
    Ok(
        "NodeClipCheck(ScissorNode *)",
    ),
    Ok(
        "Camera::SetFixedDir(Camera_Direction)",
    ),
    Ok(
        "WaterSlide_End(void)",
    ),
    Ok(
        "Groper::SpitInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Z1RainbowScaleObjective_LoadResources(KromeIni *)",
    ),
    Ok(
        "TySounds::FadeSwimSoundOut(void)",
    ),
    Ok(
        "GameCamera_SetPlatformYawDelta(float)",
    ),
    Ok(
        "GameCamera::Collision_DoChecks(void)",
    ),
    Ok(
        "Lasso::LassoCaughtFrillBike(void)",
    ),
    Ok(
        "SpiderCrate::Message(MKMessage *)",
    ),
    Ok(
        "Tools_DynamicStringTable::Dump(void)",
    ),
    Ok(
        "Str_Upper(char *)",
    ),
    Ok(
        "Gecko::GetDesc(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<TriggerSphereProp>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PipePart_GetDamageCount(int *, int *)",
    ),
    Ok(
        "Ty::SurfaceKnockBack(void)",
    ),
    Ok(
        "uncaught_exception(void)",
    ),
    Ok(
        "View::SetCameraMatrix(Matrix *)",
    ),
    Ok(
        "Ty::SpeedLinesUpdate(void)",
    ),
    Ok(
        "ModuleInfo<OpalCollector>::Init(void)",
    ),
    Ok(
        "Ty::IdleMove(void)",
    ),
    Ok(
        "Farlapp::Message(MKMessage *)",
    ),
    Ok(
        "LoadLevel_LoadVector(KromeIniLine *, char *, Vector *)",
    ),
    Ok(
        "GameObjectManager::FindDescriptor(char *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::AddFootPrintsOnLand(void)",
    ),
    Ok(
        "Leech::Message(MKMessage *)",
    ),
    Ok(
        "FishShoalField::CalcFloor(void)",
    ),
    Ok(
        "WaterVolume::Init(GameObjDesc *)",
    ),
    Ok(
        "Maurie::IdleInit(void)",
    ),
    Ok(
        "Ty::StableReposition(Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DrawDebugUVPoint(MKWaterProp *, MKWaterType *, Vector *, Vector *)",
    ),
    Ok(
        "SoundEventManager::Deinit(void)",
    ),
    Ok(
        "LevelObjective::Success(void)",
    ),
    Ok(
        "Ty::UnderWaterSwimTransition(void)",
    ),
    Ok(
        "global constructors keyed to WhirlyWind_LoadResources(KromeIni *)",
    ),
    Ok(
        "Wombat::Hit(void)",
    ),
    Ok(
        "Bat::DeathInit(void)",
    ),
    Ok(
        "PlatformRider::ToWorld(Vector *)",
    ),
    Ok(
        "FriendDescriptor::Load(KromeIni *)",
    ),
    Ok(
        "OpalCrate::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Script_LoadResources(KromeIni *)",
    ),
    Ok(
        "WindMill_LoadResources(void)",
    ),
    Ok(
        "Skink::nBatObj",
    ),
    Ok(
        "Groper_LoadResources(KromeIni *)",
    ),
    Ok(
        "SnowRoo::Idle(void)",
    ),
    Ok(
        "GameCamera::UseRobotEffect(bool)",
    ),
    Ok(
        "ModuleInfo<LilyPad>::ConstructObject(void *)",
    ),
    Ok(
        "WaterWheel::LoadDone(void)",
    ),
    Ok(
        "LilNeddy::AttackInit(void)",
    ),
    Ok(
        "Lasso::Init(void)",
    ),
    Ok(
        "ScreenData::Draw(void)",
    ),
    Ok(
        "Dma::AddGif_AD_TEXA(unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "Shark::CrashInit(void)",
    ),
    Ok(
        "Drum::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_C2_Draw(void)",
    ),
    Ok(
        "MKWaterProp::DrawQuadDebugInfo(WaterStripHeader *, int)",
    ),
    Ok(
        "Rock::Draw(void)",
    ),
    Ok(
        "LoadManuallyScrollingTextures(void)",
    ),
    Ok(
        "DDASession::SaveCurrentSession(void)",
    ),
    Ok(
        "PerimeterCheckObjective::LoadDone(void)",
    ),
    Ok(
        "GameData::GetTotalTalismanCount(void)",
    ),
    Ok(
        "BurningJunk virtual table",
    ),
    Ok(
        "FrillLizard::WalkToPipeInit(void)",
    ),
    Ok(
        "ModuleInfo<WaterPipe>::ConstructObject(void *)",
    ),
    Ok(
        "TreasureChest::Init(GameObjDesc *)",
    ),
    Ok(
        "FallGuideProp::LoadDone(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "sccl",
        ),
    ),
    Ok(
        "WhiteBat::AttackTyInit(void)",
    ),
    Ok(
        "ModuleInfo<GasJet>::Init(void)",
    ),
    Ok(
        "BilbyStruct::SetState(BilbyState)",
    ),
    Ok(
        "Texture::pUploadVRamLocked",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "AuroraKid virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tools_TurnToAngle(float, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MorayEel_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Damageable::Init(GameObjDesc *)",
    ),
    Ok(
        "ModuleInfo<ChuteLog> virtual table",
    ),
    Ok(
        "File_Length(char *)",
    ),
    Ok(
        "Ty::WaterSlide(void)",
    ),
    Ok(
        "PathManager::GetNextNearestNode(Vector *, PathSegment *, float)",
    ),
    Ok(
        "Critter_ClipToCircleXZ(Vector *, Vector *, Vector *, float)",
    ),
    Ok(
        "Matrix::SetRotationRoll(float)",
    ),
    Ok(
        "global constructors keyed to bDisplayEventAreas",
    ),
    Ok(
        "FrogDesc * descr_cast<FrogDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "GasJet::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Timer_GetSystemTime(TimerInfo *)",
    ),
    Ok(
        "Ty::GlideJump(void)",
    ),
    Ok(
        "ModuleInfo<SpinningLog>::ConstructObject(void *)",
    ),
    Ok(
        "Spear::ResolveHit(void)",
    ),
    Ok(
        "Neddy::HitOnBackInit(void)",
    ),
    Ok(
        "C1Water::Message(MKMessage *)",
    ),
    Ok(
        "Burnable_LoadResources(KromeIni *)",
    ),
    Ok(
        "Model::Explore(int *, int *, int *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpiderCrate::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "KoalaKid::Run(void)",
    ),
    Ok(
        "LevelObjective::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Muddie::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::CustomVectors_Update(void)",
    ),
    Ok(
        "ModuleInfo<ShadowBatStalactite>::Init(void)",
    ),
    Ok(
        "Platform_LoadResources(KromeIni *)",
    ),
    Ok(
        "RainbowScaleObjective virtual table",
    ),
    Ok(
        "C1Water::Reset(void)",
    ),
    Ok(
        "CollisionObject::SetColObjList(unsigned char, CollisionObject **)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Animation_InterpolateFrame(Animation::FrameInstance *, AnimationData::Node *, float)",
    ),
    Ok(
        "GameData::CollectThunderEgg(ThunderEggType)",
    ),
    Ok(
        "global constructors keyed to BadBoonie_LoadResources(KromeIni *)",
    ),
    Ok(
        "Input_AllPadsWasDirectionReleased(InputDevices *, int)",
    ),
    Ok(
        "global constructors keyed to SoundProp_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lasso::InitLassoSnapped(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "System_DoGameLoop(void)",
    ),
    Ok(
        "EnemyObject::enemyAnimEvents",
    ),
    Ok(
        "GameCamera::LoadSavedData(CameraDebugSaveInfo *)",
    ),
    Ok(
        "Tools_DrawDebugCircle(Vector const *, float, int, float, int)",
    ),
    Ok(
        "DrawQuad(Vector *, Vector *, Vector *, Vector *, Vector *, Vector *, Vector *, Vector *, Material *, Matrix *)",
    ),
    Ok(
        "ModuleInfo<GuideBarrel>::ConstructObject(void *)",
    ),
    Ok(
        "SnowSpider::DeathInit(void)",
    ),
    Ok(
        "UIButtonGroup::Init(int)",
    ),
    Ok(
        "Farlapp::Update(void)",
    ),
    Ok(
        "Weather_Init(WeatherInit *, int, char **)",
    ),
    Ok(
        "DiveRing_ThroughAllRings(void)",
    ),
    Ok(
        "SynkerFrillLizard_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GasJet virtual table",
    ),
    Ok(
        "TimeTrial_TimeExceededDialog(void)",
    ),
    Ok(
        "Dma::AddGifTag_REGLIST_LwrUpr(unsigned long, unsigned long)",
    ),
    Ok(
        "EnemyObject::GetWalkTurnSpeed(void)",
    ),
    Ok(
        "CameraOverrideTopDown_End(void)",
    ),
    Ok(
        "ModuleInfo<Drum> virtual table",
    ),
    Ok(
        "BonusPickup::Draw(void)",
    ),
    Ok(
        "SpyEgg::BlinkSpyEgg(void)",
    ),
    Ok(
        "global constructors keyed to Checkpoint_LoadResources(KromeIni *)",
    ),
    Err(
        InvalidSpecialMethod(
            "builtin_delete",
        ),
    ),
    Ok(
        "AquarangProp::Draw(void)",
    ),
    Ok(
        "MetalSpikes virtual table",
    ),
    Ok(
        "GameCamera::CameraOverride_Deinit(void)",
    ),
    Ok(
        "PipePart::LoadDone(void)",
    ),
    Ok(
        "FrillLizard::KnockedOffTower(void)",
    ),
    Ok(
        "Ibis virtual table",
    ),
    Ok(
        "CrikeyChum::Eaten(void)",
    ),
    Ok(
        "RhinoGround::IdleInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScreenEffect_Activate(bool)",
    ),
    Err(
        InvalidSpecialMethod(
            "moddi3",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Burner virtual table",
    ),
    Ok(
        "Game_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "OpalCollector::LoadDone(void)",
    ),
    Ok(
        "AntHill::Idle(void)",
    ),
    Ok(
        "global constructors keyed to SynkerBlueTongue_LoadResources(KromeIni *)",
    ),
    Ok(
        "ProgressBar::SetForegroundBlitterUV(float, float, float, float)",
    ),
    Ok(
        "Vector::ApplyMatrix(Vector *, Matrix *)",
    ),
    Ok(
        "global constructors keyed to DiveRing::pSystem",
    ),
    Ok(
        "MKWater::bDrawSubObjectName",
    ),
    Ok(
        "UIModel::SetColour(Vector *)",
    ),
    Ok(
        "WaterSlideData::CheckSpeedMatID(void)",
    ),
    Ok(
        "Dennis::MoveToNextPoint_Init(void)",
    ),
    Ok(
        "Rufus::Hit(void)",
    ),
    Ok(
        "Roach::Fly(void)",
    ),
    Ok(
        "DialogPlayer::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Explosion::Init(Vector *, bool, float)",
    ),
    Ok(
        "Ty::DeinitHeadStuckInFloor(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Maurie_SnapToSign(void)",
    ),
    Ok(
        "Main_SetCheatText(int)",
    ),
    Ok(
        "VU0Manager::UploadCode(unsigned int *, unsigned int *)",
    ),
    Ok(
        "EnemySpawner::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Crikey::FinishEatingChumInit(void)",
    ),
    Ok(
        "Coconut virtual table",
    ),
    Ok(
        "SeaMine::LoadDone(void)",
    ),
    Ok(
        "TimeTrial_DrawTimer(void)",
    ),
    Ok(
        "Ty::GetYawFromJoy(void)",
    ),
    Ok(
        "NodeOverride_SetTarget(NodeOverride *, Vector *, Model *)",
    ),
    Ok(
        "global constructors keyed to Friend_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Yabby::Init(GameObjDesc *)",
    ),
    Ok(
        "OpalCollector::OpalCollectionEffect(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Crate_ShowAll(void)",
    ),
    Ok(
        "Ty::EventLedgePullUp(char *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BoundingRegion::isIntersect(Vector *, Vector *, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterWheel::Update(void)",
    ),
    Ok(
        "ModuleInfo<Rex> virtual table",
    ),
    Ok(
        "Bilby_Deinit(void)",
    ),
    Ok(
        "EnemyObject::EnableTyCollision(bool)",
    ),
    Ok(
        "RainbowEffect::Reset(void)",
    ),
    Ok(
        "KromeIniLine::AsIntRange(int, int *, int *)",
    ),
    Ok(
        "Heap_MungwallCheck(void)",
    ),
    Ok(
        "Dma::AddGif_AD_TEX1_1(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "Explosion::Draw(void)",
    ),
    Ok(
        "ModuleInfo<RhinoGround>::ConstructObject(void *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PubeCrab::BlockInit(void)",
    ),
    Ok(
        "LensFlare_DrawSun(Vector, float)",
    ),
    Ok(
        "WaterfallStruct::MoveSplash(Blitter_Particle *, WaterfallStruct::SplashData *, int)",
    ),
    Ok(
        "CritterField2::LoadDone(void)",
    ),
    Ok(
        "Boulder::Init(GameObjDesc *)",
    ),
    Ok(
        "BunyipStruct::Idle(void)",
    ),
    Ok(
        "Ty::InitSurfaceSwim(void)",
    ),
    Ok(
        "global constructors keyed to IceRamp_LoadResources(KromeIni *)",
    ),
    Ok(
        "Vector::ApplyRotMatrix(Matrix *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model::GetNmbrOfSubObjectMaterials(int)",
    ),
    Ok(
        "Rufus_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Platform::Detach(GameObject *)",
    ),
    Ok(
        "SmallCrab::UpdateNormalAndForward(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Neddy::HitOnBack(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "fpcmp_parts_f",
        ),
    ),
    Ok(
        "Crikey::DeathInit(void)",
    ),
    Ok(
        "ModuleInfo<FallGuideProp>::Init(void)",
    ),
    Ok(
        "KoalaKid::InitSound(void)",
    ),
    Ok(
        "ShatterStruct::Draw(void)",
    ),
    Ok(
        "TrapdoorSpider::Idle(void)",
    ),
    Ok(
        "ModuleInfo<ZoneBlockerProp> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Portal::Init(GameObjDesc *)",
    ),
    Ok(
        "Emu::Fight(void)",
    ),
    Ok(
        "Boomerang::Init(GameObjDesc *, BoomerangWeapon *)",
    ),
    Ok(
        "GameData::SetGoldenCog(GoldenCogType, SpecialPickupStruct *)",
    ),
    Ok(
        "global constructors keyed to C3Chest_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Fluffy::StompInit(void)",
    ),
    Ok(
        "Shark::IsTyInCage(void)",
    ),
    Ok(
        "FrillBike::fAccelerationRate",
    ),
    Ok(
        "TimeAttack::Message(MKMessage *)",
    ),
    Ok(
        "Matrix::RotateQ(Matrix *, QuatRotation *)",
    ),
    Ok(
        "Matrix::RotateRoll(Matrix *, float)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lightning::Update(void)",
    ),
    Ok(
        "Skink::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "MKGrass_GetGrassTypeId(char *)",
    ),
    Ok(
        "ShadowBat::CheckCollideWithTy(void)",
    ),
    Ok(
        "Bird virtual table",
    ),
    Ok(
        "LevelObjective::GetStatus(short *, short *, Material **)",
    ),
    Err(
        InvalidSpecialMethod(
            "kernel_rem_pio2f",
        ),
    ),
    Ok(
        "BoomerangManager::SetHasBoth(bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "UnderWaterEffects_SetQuadColorScale(Vector *)",
    ),
    Ok(
        "ModuleInfo<Ice>::Init(void)",
    ),
    Ok(
        "RhinoGround_LoadResources(KromeIni *)",
    ),
    Ok(
        "Cattle::CalcHeroRepel(void)",
    ),
    Ok(
        "GuideParticle_CustomUpdate(ParticleSystem *)",
    ),
    Ok(
        "IceBlock_TestCollision(Vector *, float, bool)",
    ),
    Ok(
        "ShadowBatSonar::Deinit(void)",
    ),
    Ok(
        "SignPostDesc * descr_cast<SignPostDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "YabbyStalactite::Respawn(void)",
    ),
    Ok(
        "Model::GetRefPointOrigin(int)",
    ),
    Ok(
        "View::pDefaultView",
    ),
    Ok(
        "Muddie::LogicUpdate(void)",
    ),
    Ok(
        "WaterPipe::UpdateActivateEnable(void)",
    ),
    Ok(
        "Teleport_LoadResources(void)",
    ),
    Ok(
        "Camera::DrawDebug(float, float *)",
    ),
    Ok(
        "Muddie::ChaseInit(void)",
    ),
    Ok(
        "ModuleInfo<IceRamp> virtual table",
    ),
    Ok(
        "MKWaterProp::DrawLowDetail(void)",
    ),
    Ok(
        "KingFisher::GetDesc(void)",
    ),
    Ok(
        "StaticProp::Draw(void)",
    ),
    Ok(
        "GameObjectManager::AddObject(GameObject *, Model *)",
    ),
    Ok(
        "global constructors keyed to BeachHut::beachHutDesc",
    ),
    Err(
        InvalidCustomNameOnTemplate(
            "erminate",
        ),
    ),
    Ok(
        "ParticleSystem::DestroyParticle(Particle *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lenny::ChaseTy(void)",
    ),
    Ok(
        "Grasshopper::Update_Moving(void)",
    ),
    Ok(
        "SaveStates_GetBoomerang(int)",
    ),
    Ok(
        "Ty::DeinitFirstPerson(void)",
    ),
    Ok(
        "Ty::FallDiveOrBiteTransition(void)",
    ),
    Ok(
        "global constructors keyed to Collapsible::Update(void)",
    ),
    Ok(
        "Zappyrang::CollideWithEnvironment(CollisionResult *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rhino::DeinitDeath(void)",
    ),
    Ok(
        "ModuleInfo<Basket>::ConstructObject(void *)",
    ),
    Ok(
        "CheckpointStruct::LoadDone(void)",
    ),
    Ok(
        "Rufus::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "Particle_Ice_Create(ParticleSystem **, Vector *, Vector *, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Steam::pMat",
    ),
    Ok(
        "ModuleInfo<Sheila> virtual table",
    ),
    Ok(
        "RhinoGround::UpdateFloorNormal(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RedButton::CreateModel(void)",
    ),
    Ok(
        "Groper::IsTyVisible(void)",
    ),
    Ok(
        "WaterPipe::DripWater(void)",
    ),
    Ok(
        "global constructors keyed to SpiderTrapdoor_LoadResources(KromeIni *)",
    ),
    Err(
        InvalidSpecialMethod(
            "builtin_new",
        ),
    ),
    Ok(
        "GameCamera::CameraOverride_CanUseEnemyCamera(void)",
    ),
    Ok(
        "GameCamera::UseAutoCenter(bool)",
    ),
    Ok(
        "ModuleInfo<Doomerang> virtual table",
    ),
    Ok(
        "global constructors keyed to FireDrum::pFlameMat",
    ),
    Ok(
        "ModuleInfo<ShadowBat>::Init(void)",
    ),
    Ok(
        "Projectile::Update(void)",
    ),
    Ok(
        "BushPig::Run(void)",
    ),
    Ok(
        "Ty::JumpTransition(void)",
    ),
    Ok(
        "SnowSpider virtual table",
    ),
    Ok(
        "BoulderTrap virtual table",
    ),
    Err(
        InvalidSpecialMethod(
            "muldi3",
        ),
    ),
    Ok(
        "Turtle_Update(void)",
    ),
    Ok(
        "__builtin_type_info type_info function",
    ),
    Ok(
        "Spider::Init(Vector const &, Vector const &, SpiderType)",
    ),
    Ok(
        "Gem_SetElement(ElementType)",
    ),
    Ok(
        "Weather_Enable(bool)",
    ),
    Ok(
        "Animation::NodeExists(char *, int *)",
    ),
    Ok(
        "Lightning::ChangeActivation(void)",
    ),
    Ok(
        "Aurora::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "CrikeyChum::Thrown(void)",
    ),
    Ok(
        "SpiderTrapdoor::GetAnimIndex(void)",
    ),
    Ok(
        "DiveRing::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "View::GetCurrentFRAME(unsigned int)",
    ),
    Ok(
        "BarbedWire_Draw(void)",
    ),
    Ok(
        "SnowGun::Fire(void)",
    ),
    Ok(
        "PubeCrab::RunAttack(bool)",
    ),
    Ok(
        "CrikeyCanister::Message(MKMessage *)",
    ),
    Ok(
        "BonusPickupDesc virtual table",
    ),
    Ok(
        "FrillLizard::Patrol(void)",
    ),
    Ok(
        "MusicalIcicle::Idle(void)",
    ),
    Ok(
        "Blitter_Image::Draw(float, float, float, float, float)",
    ),
    Ok(
        "global constructors keyed to Maurie_LoadResources(KromeIni *)",
    ),
    Ok(
        "SynkerBlueTongue_LoadResources(KromeIni *)",
    ),
    Ok(
        "SnowPile::LoadDone(void)",
    ),
    Ok(
        "Platform::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Ty::LightTy(void)",
    ),
    Ok(
        "global constructors keyed to SpecialPickup_LoadResources(KromeIni *)",
    ),
    Ok(
        "Translation_InitModule(void)",
    ),
    Ok(
        "PauseScreen_GameInfo_Update(void)",
    ),
    Ok(
        "PtrList<Boomerang>::Destroy(Boomerang *)",
    ),
    Ok(
        "DropPontoon::CheckForSplash(void)",
    ),
    Ok(
        "LedgePullUpData::UpdateCheck(void)",
    ),
    Ok(
        "Frog::Draw(void)",
    ),
    Ok(
        "ModuleInfo<SpiderCrate>::Init(void)",
    ),
    Ok(
        "ScrubTurkey::Alert_Update(void)",
    ),
    Ok(
        "Bat::FlinchInit(void)",
    ),
    Ok(
        "FrillLizard::Spawn(void)",
    ),
    Ok(
        "EnemyObject::AcceleratedTurn(float, float)",
    ),
    Ok(
        "FrontEnd_LoadLevel_LoadResources(void)",
    ),
    Ok(
        "WaterSlide::Create(void)",
    ),
    Ok(
        "Turtle_End(void)",
    ),
    Ok(
        "MKWater::Draw(void)",
    ),
    Ok(
        "Dialog_Draw(void)",
    ),
    Ok(
        "ModuleInfo<MusicalIcicle>::ConstructObject(void *)",
    ),
    Ok(
        "BoomerangManager::DrawReflection(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "get_eh_table_version",
        ),
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::AddGif_AD_SCISSOR_2(unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "DirectLight::DeinitModule(void)",
    ),
    Ok(
        "GameCamera::Normal_MinimalUpdate(void)",
    ),
    Ok(
        "KingFisher::GetField(void)",
    ),
    Ok(
        "PauseScreen_OptionSound_Draw(void)",
    ),
    Ok(
        "Teleport::Init(Vector *, BoundingVolume *, float)",
    ),
    Ok(
        "UIText::Init(Font *, char *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillBike::ChaseAlongside(void)",
    ),
    Ok(
        "Bull::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "Wallaby virtual table",
    ),
    Ok(
        "MusicalIcicle::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "BurnerObjective::LoadDone(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Video_Destroy(Video *)",
    ),
    Ok(
        "Burnable::UpdateFires(void)",
    ),
    Ok(
        "AntHill_IsMember(MKPropDescriptor *)",
    ),
    Ok(
        "BezierPathFollower::GetOnPathPosition(void)",
    ),
    Ok(
        "Basket::SetState(int)",
    ),
    Err(
        InvalidNamespaceOnNamespacedGlobal(
            "GLOBAL_",
        ),
    ),
    Ok(
        "Bull::Charge(void)",
    ),
    Ok(
        "BeachHut::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to KingFisher_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Image::Init(unsigned char *, unsigned int)",
    ),
    Ok(
        "Skink::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<BadBoonie> virtual table",
    ),
    Ok(
        "ShadowBatSonar::UpdateWorldMatrix(void)",
    ),
    Ok(
        "Bouncer virtual table",
    ),
    Ok(
        "TyParticleManager::LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Main_GetValidJoypadAxisValue(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterSlideData::SelectState(void)",
    ),
    Ok(
        "SoundEventManager::Init(void)",
    ),
    Ok(
        "Font::Create(char *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Animation::CalculateMatrices(void)",
    ),
    Ok(
        "Ty::GetNewNodePositions(void)",
    ),
    Ok(
        "global constructors keyed to Shatterable_LoadResources(KromeIni *)",
    ),
    Ok(
        "Cattle::StartIdle(void)",
    ),
    Ok(
        "LevelObjective::Abort(void)",
    ),
    Ok(
        "Shadow_DrawAnimatingShadows(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpeedUpCrate::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<MorayEel>::ConstructObject(void *)",
    ),
    Ok(
        "GuideBarrel_ShowAll(void)",
    ),
    Ok(
        "MKSceneManager::InitModule(void)",
    ),
    Ok(
        "Particle_BlackSmoke_Init(ParticleSystem **, Vector *, BoundingVolume *, float, bool)",
    ),
    Ok(
        "Gem_ParticleSystem_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PipePart::Repair(void)",
    ),
    Ok(
        "FrontEnd_Title_Update(void)",
    ),
    Ok(
        "CritterField2Desc::FieldRemoved(void)",
    ),
    Ok(
        "ModuleInfo<CableCar>::Init(void)",
    ),
    Ok(
        "FinishLineStruct::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<YabbyStalactite>::ConstructObject(void *)",
    ),
    Ok(
        "Particle_BiteGlow_SetToExpand(bool)",
    ),
    Ok(
        "global constructors keyed to SnowRoo::nSnowBallObj",
    ),
    Ok(
        "Shazza_LoadResources(KromeIni *)",
    ),
    Ok(
        "RhinoGround::Death(void)",
    ),
    Ok(
        "Debug_InitModule(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKSceneManager::Init(MKSceneManagerInit *)",
    ),
    Ok(
        "Model_GetNmbrOfSubObjects(ModelTemplate *)",
    ),
    Ok(
        "IceBlockStruct::QuickShatter(void)",
    ),
    Ok(
        "Neddy::Taunt(void)",
    ),
    Ok(
        "GameData::SynchroniseLevel(void)",
    ),
    Ok(
        "BlueTongue::HitInit(void)",
    ),
    Ok(
        "ModuleInfo<ConditionalScriptProp>::ConstructObject(void *)",
    ),
    Ok(
        "TyMemCard_QueryUpdate(void)",
    ),
    Ok(
        "Sound_RPC(int, int, int)",
    ),
    Ok(
        "Muddie::IdleInit(void)",
    ),
    Ok(
        "KoalaKid::Idle(void)",
    ),
    Ok(
        "global constructors keyed to ToggleChangeLevel(void)",
    ),
    Ok(
        "ScubaFrill::IsTyVisible(void)",
    ),
    Ok(
        "UIModel::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SMTree::PairUp(int, int)",
    ),
    Ok(
        "GameData::UnlockZone(ZoneNumber)",
    ),
    Ok(
        "LineOfSightObject::OutsideGOV(void)",
    ),
    Ok(
        "Avalanche::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ParticleSystemManager::AllocParticleChunk(void)",
    ),
    Ok(
        "Image::Init(char *)",
    ),
    Ok(
        "ModuleInfo<SoundProp>::Init(void)",
    ),
    Ok(
        "GameCamera_Deinit(void)",
    ),
    Ok(
        "System_InitModule(char **, int)",
    ),
    Ok(
        "Sentinel::Reset(void)",
    ),
    Ok(
        "GasJet::Deinit(void)",
    ),
    Ok(
        "ParticleSystemManager_Init(int, int)",
    ),
    Ok(
        "DebugInfo_Line3d(char *, Vector *, Vector *, int, bool)",
    ),
    Ok(
        "PubeCrab::Idle(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PathManager::GetNearestNode(Vector *, float)",
    ),
    Ok(
        "Ty::SpeedLinesEnable(Vector *)",
    ),
    Ok(
        "HealthLivesHud::Draw(void)",
    ),
    Ok(
        "ThrowingStar::Reset(void)",
    ),
    Ok(
        "WaterSlideEffect::Update(void)",
    ),
    Ok(
        "Jeep::GroundCollision(void)",
    ),
    Ok(
        "RayToSphere(Vector *, Vector *, Vector *, float, float, bool)",
    ),
    Ok(
        "Hud_ShowLives(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Vector::CClamp(Vector *, float, float)",
    ),
    Ok(
        "Flame::Create(Vector *, float)",
    ),
    Ok(
        "Particle_WaterTrail_Init(ParticleSystem **, Vector *, BoundingVolume *)",
    ),
    Ok(
        "EnemyObject::GetStartPos(void)",
    ),
    Ok(
        "ModuleInfo<Sentinel>::Init(void)",
    ),
    Ok(
        "MetalSpikes::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "AutoTargetStruct::Set(TargetPriority, Vector *, Vector *, Vector *, Model *)",
    ),
    Ok(
        "UIButton::Draw(void)",
    ),
    Ok(
        "GameCameraPoint::Smooth(Vector *, float, float)",
    ),
    Ok(
        "MobilePlatform::UpdateBob(void)",
    ),
    Ok(
        "MKMemoryCard_GetFileSlotFromName(char *)",
    ),
    Ok(
        "Ty::SelectMove(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TyFSM::ControlState(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Vector::IsNormalised(void)",
    ),
    Ok(
        "BlueTongueThrower::PickUp(void)",
    ),
    Ok(
        "MKMem_Release(int)",
    ),
    Ok(
        "Spline::AddNode(Vector *)",
    ),
    Ok(
        "Ty::RangChangeTransition(void)",
    ),
    Ok(
        "Ty::InitJump(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "long long type_info node",
    ),
    Ok(
        "GameCameraState::InitStateFuncs(GameCameraStateFuncs *, void (GameCamera::*)())",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_SaveGame_Init(void)",
    ),
    Ok(
        "PauseScreen_Options_Draw(void)",
    ),
    Ok(
        "SpecialPickupStruct::IsCollected(void)",
    ),
    Ok(
        "CrikeyCanister::Deinit(void)",
    ),
    Ok(
        "SuperGlowExpand(bool)",
    ),
    Ok(
        "MKSceneManager::AddGlobalProp(MKProp *, int)",
    ),
    Ok(
        "RockProjectile::Throw(Vector *, unsigned char)",
    ),
    Ok(
        "CameraOverride::Update(CameraDescriptor *)",
    ),
    Ok(
        "unsigned short type_info function",
    ),
    Ok(
        "MKWaterManager_LoadWaterTypes(char *, int)",
    ),
    Ok(
        "TurningPlatform_LoadResources(KromeIni *)",
    ),
    Ok(
        "Boomerang::ScaleRang(void)",
    ),
    Ok(
        "Boomerang::Deinit(void)",
    ),
    Ok(
        "StaticFXProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "BoomerangHud::InitialiseVars(BoomerangType)",
    ),
    Ok(
        "long type_info function",
    ),
    Ok(
        "SnowGun::Deinit(void)",
    ),
    Ok(
        "Bull::Draw(void)",
    ),
    Ok(
        "DialogEffectManager::nEffects",
    ),
    Ok(
        "DataVal::WS::Load(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BoomerangDesc::Init(ModuleInfoBase *, char *, char *, BoomerangType)",
    ),
    Ok(
        "LedgePullUpData::InitPushOff(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MusicalIcicleObjective::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "__pointer_type_info type_info function",
    ),
    Ok(
        "EnemyObject::Update(void)",
    ),
    Ok(
        "Material::GetHeight(void)",
    ),
    Ok(
        "GameCameraCollision::Descriptor",
    ),
    Ok(
        "ShadowBatSonar virtual table",
    ),
    Ok(
        "SnowSpider::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lenny::ApproachDeinit(void)",
    ),
    Ok(
        "Tick::Reset(void)",
    ),
    Ok(
        "OpalsHud::Update(void)",
    ),
    Ok(
        "Bull::WhatThe(void)",
    ),
    Ok(
        "ModuleInfo<SignPost>::Init(void)",
    ),
    Ok(
        "TyHealth::DoLoseFX(void)",
    ),
    Ok(
        "CheatJump_GetValidJoypadAxisValue(int)",
    ),
    Ok(
        "Dma::AddGif_AD_SCISSOR_1(unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "ModuleInfo<BeerCan>::Init(void)",
    ),
    Ok(
        "Geyser::Init(GameObjDesc *)",
    ),
    Ok(
        "MKWaterProp::Draw(void)",
    ),
    Ok(
        "Bat::FlyInit(void)",
    ),
    Ok(
        "Blitter_Particle::Draw(int)",
    ),
    Ok(
        "Wombat::Idle(void)",
    ),
    Ok(
        "Rhino::InitStartAggressive(void)",
    ),
    Ok(
        "BadBoonie::CheckEvents(void)",
    ),
    Ok(
        "SpyEgg::Update(void)",
    ),
    Ok(
        "FrontEnd_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::AddGif_TEX0_1(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "Blitter_TriStrip::DrawNoPerspective(int, float)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TrapdoorSpider::IsTyVisible(void)",
    ),
    Ok(
        "ShadowBatStalactite::Draw(void)",
    ),
    Ok(
        "FireWorks::Update(void)",
    ),
    Ok(
        "TyParticleManager::SpawnLeafGrassDust(Vector *, Vector *, bool)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StaticFXProp::GetPos(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RhinoGround::Reset(void)",
    ),
    Ok(
        "ModuleInfo<PickupCounter>::Init(void)",
    ),
    Ok(
        "PipePart::Update(void)",
    ),
    Ok(
        "SnowBallAttack::FireAtTarget(Vector *, Vector *, float)",
    ),
    Ok(
        "DialogPlayer::SceneDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TriggerSphereProp::LoadDone(void)",
    ),
    Ok(
        "EnemyWaypoints::FirstWaypoint(void)",
    ),
    Ok(
        "Gate virtual table",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "srefill",
        ),
    ),
    Ok(
        "BushPig::Charge(void)",
    ),
    Ok(
        "LevelData::GetZoneFirstLevelNumber(ZoneNumber)",
    ),
    Ok(
        "Ice::ResolveHit(void)",
    ),
    Ok(
        "Ice::DamageTy(void)",
    ),
    Ok(
        "PubeCrab::Block(void)",
    ),
    Ok(
        "BilbyStruct::bVisible",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "global constructors keyed to BurningTree_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DDASession::EndCheckpoint(void)",
    ),
    Ok(
        "LODDescriptor::GetEntryFromString(char *)",
    ),
    Ok(
        "Sentinel::ToppleDeathDeinit(void)",
    ),
    Ok(
        "ModuleInfo<InvisiCrate>::ConstructObject(void *)",
    ),
    Ok(
        "TrapdoorSpider::DeathInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ringo::UpdateAnims(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ShadowBat::GetShadowPosition(void)",
    ),
    Ok(
        "EnemyObject::IsTyWithinChaseArea(void)",
    ),
    Ok(
        "ModuleInfo<GuideParticle>::ConstructObject(void *)",
    ),
    Ok(
        "CameraOverrideSpiral_End(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Leech::Suck(void)",
    ),
    Ok(
        "Geyser::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "PE_Ice_LoadResources(void)",
    ),
    Ok(
        "ShadowBat::WhiteBatAttackDeinit(void)",
    ),
    Ok(
        "PauseScreen_GameTotals_LoadResources(void)",
    ),
    Ok(
        "BurniningTree_Reset(void)",
    ),
    Ok(
        "ModuleInfo<ShadowBat>::ConstructObject(void *)",
    ),
    Ok(
        "Ty::InitSwim(void)",
    ),
    Ok(
        "Animation::GetAnimDef(int)",
    ),
    Ok(
        "BonusPickup::Update(void)",
    ),
    Ok(
        "Kin_GetDiscreteDistance(float *, float *, float *, float *)",
    ),
    Ok(
        "PE_Fire_LoadResources(void)",
    ),
    Ok(
        "Jeep::WobbleJeep(void)",
    ),
    Ok(
        "Friend::Init(GameObjDesc *)",
    ),
    Ok(
        "Timer_GetDifference(TimerInfo *, TimerInfo *, TimerInfo *)",
    ),
    Ok(
        "FootEffect::pDustMat",
    ),
    Ok(
        "ModuleInfo<Yabby> virtual table",
    ),
    Ok(
        "DialogEffect::FlashColor(void)",
    ),
    Ok(
        "Drum::Draw(void)",
    ),
    Ok(
        "Hud_SetGems(int)",
    ),
    Ok(
        "GameData::ReleaseSaveData(void)",
    ),
    Ok(
        "Hud_BoomerangScroll(int, int)",
    ),
    Ok(
        "PubeCrab::Death(void)",
    ),
    Ok(
        "Leech::AttackInit(void)",
    ),
    Ok(
        "Crikey::FlinchInit(void)",
    ),
    Ok(
        "ModuleInfo<BushPig> virtual table",
    ),
    Ok(
        "Fish_Init(void)",
    ),
    Ok(
        "Vector::InterpolatePos(Vector *, Vector *, Vector *, float, float)",
    ),
    Ok(
        "Rufus::DeathDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Speedboat::CollisionCheck(void)",
    ),
    Ok(
        "Frog::StartJump(Vector *)",
    ),
    Ok(
        "TyBite::InitDiveBiteStart(void)",
    ),
    Ok(
        "CheckpointStruct::SpringOpen(void)",
    ),
    Ok(
        "Ty::UpdateYaw(float)",
    ),
    Ok(
        "Dma::AddGif_TEX0_2(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "Hud_GetHealthLeft(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "StopwatchStruct::ScaleIn(void)",
    ),
    Ok(
        "SignPost_ShowAll(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::MoveWhileDiving(int)",
    ),
    Ok(
        "VibrateUpdate(void)",
    ),
    Ok(
        "WaterTankStruct::Message(MKMessage *)",
    ),
    Ok(
        "__ptmf_type_info type_info function",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rex::DeckChairIdleInit(void)",
    ),
    Ok(
        "FallGuide::Init(float, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Skink::Alert(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "CausticEffect::Deinit(void)",
    ),
    Ok(
        "SpecialHud::Init(void)",
    ),
    Ok(
        "SeaMine::magMineCounter",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SpiderDirt::ResolveHit(void)",
    ),
    Ok(
        "Neddy::Charge(void)",
    ),
    Ok(
        "Eel::AttackDeinit(void)",
    ),
    Ok(
        "BoulderTrap::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Lenny::GetSoundFileName(bool)",
    ),
    Ok(
        "Ty::InitLedgePullUp(void)",
    ),
    Ok(
        "ModuleInfo<RingoArm> virtual table",
    ),
    Ok(
        "Matrix::SetRotationYaw(float)",
    ),
    Ok(
        "View::SetDirectLight(DirectLight *)",
    ),
    Ok(
        "Dma::AddGif_AD_LABEL(unsigned long, unsigned long)",
    ),
    Ok(
        "NinjaGecko::ChooseNewAction(int)",
    ),
    Ok(
        "RainbowScaleObjective::Init(GameObjDesc *)",
    ),
    Ok(
        "Ty::SetLaunch(float, bool)",
    ),
    Ok(
        "DialogEffect::FlashColorDeinit(void)",
    ),
    Ok(
        "Emu::Update(void)",
    ),
    Ok(
        "MKWater::GetNumSubObjects(void)",
    ),
    Ok(
        "CaveBat::FlyBackInit(void)",
    ),
    Ok(
        "AntHill::CheckRangCollide(void)",
    ),
    Ok(
        "Kin_GetDiscreteTime(float *, float *, float *, float *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FireWorks::Rocket_Update(ParticleSystem *)",
    ),
    Ok(
        "MKShadow_BeginScene(int)",
    ),
    Ok(
        "Ty::DeinitQuickSand(void)",
    ),
    Ok(
        "Rex::GetDistToWaterSurface(void)",
    ),
    Ok(
        "DialogEffectManager::stringVals",
    ),
    Ok(
        "Julius::RequestElementalRang(void)",
    ),
    Ok(
        "GCT_Camera::Init(CameraOverrideCameraLoadInfo *)",
    ),
    Ok(
        "LetterBox_Draw(void)",
    ),
    Ok(
        "LilNeddy::ChargeRecoveryInit(void)",
    ),
    Ok(
        "FrontEnd_EnterScreen(tagFrontEndScreen)",
    ),
    Ok(
        "ModuleInfo<FrogField>::Init(void)",
    ),
    Ok(
        "HeatFlare_On(void *, int)",
    ),
    Ok(
        "Jeep::DoAnimations(void)",
    ),
    Ok(
        "Barracuda::Flee(void)",
    ),
    Ok(
        "Wombat::JumpIdleDeinit(void)",
    ),
    Ok(
        "FrillBike::LassoDeinit(void)",
    ),
    Ok(
        "Ty::Hurt(HurtType, DDADamageCause, bool, Vector *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "SmallRock::Fire(Vector *, bool)",
    ),
    Ok(
        "GameCamera::ResetView(void)",
    ),
    Ok(
        "ObjectiveFinder::RemovePointer(Vector *)",
    ),
    Ok(
        "WaterTankStruct virtual table",
    ),
    Ok(
        "Maurie::Idle(void)",
    ),
    Ok(
        "CuttleFish::Update_Swim(void)",
    ),
    Ok(
        "RingoArm::Init(GameObjDesc *)",
    ),
    Ok(
        "BushPig::InitIdle(void)",
    ),
    Ok(
        "Ty::LaunchTransition(void)",
    ),
    Ok(
        "ScubaFrill::Death(void)",
    ),
    Ok(
        "ShadowBat::TakeOff(void)",
    ),
    Ok(
        "BlueTongueThrower::Deinit(void)",
    ),
    Ok(
        "WaterfallSprayStruct::Init(Vector *, Vector *, Vector *, float)",
    ),
    Ok(
        "Hud_GetZoomerangTurnVel(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BadBoonie::Alert_Update(void)",
    ),
    Ok(
        "FrillBike::LassoGetAttachPoint(void)",
    ),
    Ok(
        "FILOList::Update(float)",
    ),
    Ok(
        "Matrix::Multiply3x3(Matrix *, Matrix *)",
    ),
    Ok(
        "Vector::InterpolateRot(Vector *, Vector *, Vector *, float, float)",
    ),
    Ok(
        "CrikeyCanister::Explode(void)",
    ),
    Ok(
        "ModuleInfo<ChuteLog>::ConstructObject(void *)",
    ),
    Ok(
        "BonusPickup virtual table",
    ),
    Ok(
        "Bull::TossRockInit(void)",
    ),
    Ok(
        "Boomerang::InitFired(void)",
    ),
    Ok(
        "TrapdoorSpider::Attack(void)",
    ),
    Ok(
        "TyFlyField::Update(void)",
    ),
    Ok(
        "Shadow::Draw(Vector *, bool)",
    ),
    Ok(
        "Texture::AddSyncToDma(void)",
    ),
    Ok(
        "OmniLight_DeinitModule(void)",
    ),
    Ok(
        "FlyDesc::Init(ModuleInfoBase *, char *, char *, float, float, float, bool)",
    ),
    Ok(
        "GameCamera_GetPitch(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MobilePlatformDesc * descr_cast<MobilePlatformDesc *>(MKPropDescriptor *)",
    ),
    Ok(
        "GasJet::Draw(void)",
    ),
    Ok(
        "GameObject::Reset(void)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_A2_Init(void)",
    ),
    Ok(
        "Shazza::Idle(void)",
    ),
    Ok(
        "BlueTongue::Alert(void)",
    ),
    Ok(
        "MorayEel::LoadDone(void)",
    ),
    Ok(
        "Coconut::Message(MKMessage *)",
    ),
    Ok(
        "Spider_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<BurningJunk>::ConstructObject(void *)",
    ),
    Ok(
        "KoalaKid::Wave(void)",
    ),
    Ok(
        "MKShadow_ClearBuffer(void)",
    ),
    Ok(
        "SignPost::Reset(void)",
    ),
    Ok(
        "WaterSlideSection::FirstPt(void)",
    ),
    Ok(
        "MKWater::maxU",
    ),
    Ok(
        "Tools_GetCentre(Model *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ScrubTurkey::ScrubTurkey_PostUpdate(void)",
    ),
    Ok(
        "PubeCrab::DeathInit(void)",
    ),
    Ok(
        "Font::CalcLength(char *)",
    ),
    Ok(
        "YabbyStalactite::Update(void)",
    ),
    Ok(
        "BarbedWire_End(void)",
    ),
    Ok(
        "ParticleSystemType::Update(ParticleSystem *)",
    ),
    Ok(
        "ModuleInfo<Dennis>::Init(void)",
    ),
    Ok(
        "Video_Update(Video *)",
    ),
    Ok(
        "ScubaFrill::Deinit(void)",
    ),
    Ok(
        "Burnable virtual table",
    ),
    Ok(
        "GetCurrentlyRenderingModel(void)",
    ),
    Ok(
        "ModuleInfo<Kaboomerang>::ConstructObject(void *)",
    ),
    Ok(
        "Portal::Deinit(void)",
    ),
    Ok(
        "Tools_GetGroundLightModel(Vector *, int *, float)",
    ),
    Ok(
        "Rhino::Alert(void)",
    ),
    Ok(
        "Aquarang::Init(GameObjDesc *, BoomerangWeapon *)",
    ),
    Ok(
        "StaticSpikes_Update(void)",
    ),
    Ok(
        "Collision_RayCollide(Vector *, Vector *, CollisionResult *, CollisionMode, int)",
    ),
    Ok(
        "Texture::CreateArrayOfAllTextures(int *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Grasshopper virtual table",
    ),
    Ok(
        "StaticPropDescriptor::Init(ModuleInfoBase *, char *, char *, int, int)",
    ),
    Ok(
        "BlueTongueRockObjective::Reset(void)",
    ),
    Ok(
        "GameCamera::GetSavedData(CameraDebugSaveInfo *)",
    ),
    Ok(
        "MorayEel::Alert(void)",
    ),
    Ok(
        "GameData::GetGameCompletePercent(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::DrawDebugInfo(void)",
    ),
    Ok(
        "ModuleInfo<Neddy> virtual table",
    ),
    Ok(
        "Neddy::ReturnInit(void)",
    ),
    Ok(
        "ModuleInfo<Elevator> virtual table",
    ),
    Ok(
        "BoomerangWeapon::Firing(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<RainbowScaleObjective>::Init(void)",
    ),
    Ok(
        "UIModel::Deinit(void)",
    ),
    Ok(
        "Torch::UpdateShadow(void)",
    ),
    Ok(
        "LevelData::IsBossLevel(LevelNumber)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "A1FrillObjective::Message(MKMessage *)",
    ),
    Ok(
        "TriggerProp::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_B3_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GalleryScreenData::Draw(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Drum::Init(GameObjDesc *)",
    ),
    Ok(
        "Animation::updateRate",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Wombat::JumpLand(void)",
    ),
    Ok(
        "ModuleInfo<Muddie> virtual table",
    ),
    Ok(
        "GameCamera::GetContouredSourceY(bool, float)",
    ),
    Ok(
        "Windmill_Draw(void)",
    ),
    Ok(
        "global constructors keyed to PipePart_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Rhino::Message(MKMessage *)",
    ),
    Ok(
        "Sly::Reset(void)",
    ),
    Ok(
        "ShadowBat::WhiteBatAttack(void)",
    ),
    Ok(
        "FlameThrower::LoadLine(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Ty::InitFindItem(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Texture::List(void)",
    ),
    Ok(
        "SnowGunAmmo virtual table",
    ),
    Ok(
        "Wombat::StopInit(void)",
    ),
    Ok(
        "FrillBike::UpdateParticlePositions(void)",
    ),
    Ok(
        "Ty::UnderWaterSelectIdleOrMove(void)",
    ),
    Ok(
        "SpecialPickupStruct::ScaleIn(void)",
    ),
    Ok(
        "Ty::IsAbleToGlide(void)",
    ),
    Ok(
        "global constructors keyed to BonusPickup_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MusicalIcicle::Update(void)",
    ),
    Ok(
        "Matrix::InverseSimple(void)",
    ),
    Ok(
        "WaterSlideSection::IsPastPoint(Vector *, Vector *)",
    ),
    Ok(
        "ModuleInfo<Ringo> virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RenderTexture::Deinit(void)",
    ),
    Ok(
        "SignPost::CheckForHit(void)",
    ),
    Ok(
        "Tools_ColorToABGR(Vector *)",
    ),
    Ok(
        "__class_type_info type_info node",
    ),
    Ok(
        "Muddie::AlertInit(void)",
    ),
    Ok(
        "GreySmoke::Init(Vector *)",
    ),
    Ok(
        "StaticPropDescriptor * descr_cast<StaticPropDescriptor *>(MKPropDescriptor *)",
    ),
    Ok(
        "FrillLizard::PatrolInit(void)",
    ),
    Ok(
        "FrontEnd_Gallery_Init(void)",
    ),
    Ok(
        "DialogPlayer::GetSubTitle(void)",
    ),
    Ok(
        "Bull::RoarInit(void)",
    ),
    Ok(
        "GameCamera::ShakeCamera_Update(void)",
    ),
    Ok(
        "C3Actor::Draw(void)",
    ),
    Ok(
        "Spider::Move(Vector const &, CritterCruiseMoveInfo const &)",
    ),
    Ok(
        "Level_ParsePos(KromeIniLine *, Vector *)",
    ),
    Ok(
        "Sly::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "MusicalIcicle::LoadDone(void)",
    ),
    Ok(
        "CableCar::Update(void)",
    ),
    Ok(
        "EnemySpawner::StealEnemy(void)",
    ),
    Ok(
        "Wombat::LoadLine(KromeIniLine *)",
    ),
    Ok(
        "MKWater::bDrawSineWave",
    ),
    Ok(
        "Bat virtual table",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<KenOath>::ConstructObject(void *)",
    ),
    Ok(
        "CommonGameObjFlagsComponent::Set(CommonGameObjFlags)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Dma::AddGif_AD_COLCLAMP(long)",
    ),
    Ok(
        "WaterfallPointStruct::Init(Vector *)",
    ),
    Ok(
        "FrillLizard::WalkHome(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DDACheckpoint::LoadLine(KromeIniLine *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaterProp::CalcCommonVertexData(Water_TriStrip *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Model_DrawCpu_Simple(Vector *, int)",
    ),
    Ok(
        "Fluffy::IceAttack(void)",
    ),
    Ok(
        "global constructors keyed to Talisman::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKPackage_InitModule(void)",
    ),
    Ok(
        "Image::Deinit(void)",
    ),
    Ok(
        "SnowGun::Reset(void)",
    ),
    Ok(
        "Skink::Message(MKMessage *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ParticleSystem::Draw(void)",
    ),
    Ok(
        "Model_GetStrip(ModelTemplate *, int, int, int)",
    ),
    Ok(
        "NinjaGecko::LeapInit(void)",
    ),
    Ok(
        "FrillBike::ChaseAlongsideInit(void)",
    ),
    Ok(
        "EnemySpawner_LoadResources(KromeIni *)",
    ),
    Ok(
        "SoundMaterial::Deinit(void)",
    ),
    Ok(
        "CheckpointStruct::Init(GameObjDesc *)",
    ),
    Ok(
        "Boulder::ReachedEndOfRoll(void)",
    ),
    Ok(
        "PathManager::PrevPoint(bool)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_C3_Deinit(void)",
    ),
    Ok(
        "Bubble::Create(Vector *, float, float, float, float)",
    ),
    Ok(
        "Blitter_Line3D::Draw(int, float)",
    ),
    Ok(
        "Fluffy::Idle(void)",
    ),
    Ok(
        "FrillBike::Crash(void)",
    ),
    Ok(
        "Lasso::InitLassoPullIn(void)",
    ),
    Ok(
        "SynkerBlueTongue::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "TyParticleManager::SpawnChomp(Vector *, float)",
    ),
    Ok(
        "BaseCritter::Update(void)",
    ),
    Ok(
        "ModuleInfo<ThinIceProp> virtual table",
    ),
    Ok(
        "Particle_KickUpParticle_Create(ParticleSystem **, Vector *, Vector *, float, float, int)",
    ),
    Ok(
        "Maurie::TakeOff(void)",
    ),
    Ok(
        "TreasureChest::Update(void)",
    ),
    Ok(
        "WarpFlower::Init(GameObjDesc *)",
    ),
    Ok(
        "SpiderTrapdoor::Reset(void)",
    ),
    Ok(
        "Boulder::ProjectOnGround(Vector *, Vector *, Vector *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::Underwater_Deinit(void)",
    ),
    Ok(
        "BarbedWire_Init(void)",
    ),
    Ok(
        "TyHealth::SetNumSymbols(int)",
    ),
    Ok(
        "BoomerangAnimInfo::Init(BoomerangSide)",
    ),
    Err(
        InvalidSpecialMethod(
            "register_frame_info_table",
        ),
    ),
    Ok(
        "BunyipElder::nScaleCheckDelay",
    ),
    Ok(
        "Barracuda::Death(void)",
    ),
    Ok(
        "Yabby::ScaredInit(void)",
    ),
    Ok(
        "EnemyObject::DamageTy(HurtType, Vector *)",
    ),
    Ok(
        "Jeep::TimeAttack(void)",
    ),
    Ok(
        "BreakAndTurnData::JogWalkUpdate(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MorayEel::nEelBody",
    ),
    Ok(
        "Ty::IdleWaterShake(void)",
    ),
    Ok(
        "Skink::Draw(void)",
    ),
    Ok(
        "UIButton::Update(void)",
    ),
    Ok(
        "SoundProp::GetPos(void)",
    ),
    Ok(
        "Emu::RopeHasSnapped(void)",
    ),
    Ok(
        "BreakAndTurnData::TurnRunDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_SaveGame_Deinit(void)",
    ),
    Ok(
        "Gecko::UpdateNormalAndForward(void)",
    ),
    Ok(
        "Shark::Push(void)",
    ),
    Ok(
        "ModuleInfo<Sly>::ConstructObject(void *)",
    ),
    Ok(
        "PhysicsObject::Init(CollisionObject *)",
    ),
    Ok(
        "Skink::Deinit(void)",
    ),
    Ok(
        "WaterSlideData::InitFall(void)",
    ),
    Ok(
        "Crc_Update(unsigned int, void const *, int)",
    ),
    Ok(
        "ShadowBat::SonarAttack(void)",
    ),
    Ok(
        "Frog::IdleState(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "bad_typeid::~bad_typeid(void)",
    ),
    Ok(
        "Furnace::HandleRangMsg(BoomerangMessage *)",
    ),
    Ok(
        "SoundBank_PlayDialogMusic(bool)",
    ),
    Ok(
        "BushPig::PullLasso(void)",
    ),
    Ok(
        "Platform::Init(GameObjDesc *)",
    ),
    Ok(
        "Dialog_DrawSubtitle(void)",
    ),
    Ok(
        "global constructors keyed to KoalaKid_LoadResources(KromeIni *)",
    ),
    Err(
        InvalidSpecialMethod(
            "sigtramp",
        ),
    ),
    Ok(
        "PauseScreen_DeinitLevel(void)",
    ),
    Ok(
        "ElevatorDescriptor::Load(KromeIni *)",
    ),
    Ok(
        "Str_FindChar(char *, int)",
    ),
    Ok(
        "Leech::Fire(void)",
    ),
    Ok(
        "GameCameraPointsDelta::SetAdjHeight(float, bool, float)",
    ),
    Ok(
        "Particle_BullSplash_Create(ParticleSystem **, Vector *, Vector *, float)",
    ),
    Ok(
        "ObjectiveProp_ResetActive(void)",
    ),
    Ok(
        "SpeedUpCrate::Add(Vector *, float, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKShadow_Animated::AddPoly(MKShadowVert *, MKShadowVert *, MKShadowVert *)",
    ),
    Ok(
        "StarTrail::Create(Vector *, Vector *, float)",
    ),
    Ok(
        "Rhino::InitAlert(void)",
    ),
    Ok(
        "LevelData::GetZone(LevelNumber)",
    ),
    Ok(
        "global constructors keyed to StalactiteTrap_LoadResources(KromeIni *)",
    ),
    Ok(
        "FireDrum_GetNearest(Vector *)",
    ),
    Ok(
        "C3Chest::Update(void)",
    ),
    Ok(
        "Pontoon::Update(void)",
    ),
    Ok(
        "AntHill::Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LODManager::TestLOD(int)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FileSys_DeinitModule(void)",
    ),
    Ok(
        "SoundEventManager::ParseSoundEvents(KromeIni *)",
    ),
    Ok(
        "SaveGameInfoDisplay::Setup(float, float)",
    ),
    Ok(
        "PauseScreen_GameTotals_Update(void)",
    ),
    Ok(
        "Ty::MakeHeroBlink(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        InvalidSpecialMethod(
            "register_frame_info",
        ),
    ),
    Ok(
        "MusicalIcicleObjective::Reset(void)",
    ),
    Ok(
        "__array_type_info::~__array_type_info(void)",
    ),
    Ok(
        "global constructors keyed to Gecko_LoadResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WaterPipeObjective::Init(GameObjDesc *)",
    ),
    Ok(
        "BarbedWire_LoadResources(void)",
    ),
    Ok(
        "ModuleInfo<Geyser>::Init(void)",
    ),
    Ok(
        "Jeep::InitTimeAttack(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ThinIceProp::ShatteredInit(void)",
    ),
    Ok(
        "StoreCollision(CollisionResult *)",
    ),
    Ok(
        "Material::InitFromMatDefs(char *)",
    ),
    Ok(
        "Sly::DefeatedInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlitterCritterField::GetDesc(void)",
    ),
    Ok(
        "Rufus::Hop(void)",
    ),
    Ok(
        "Speedboat::Crash(void)",
    ),
    Ok(
        "BlueTongueThrower::IdleInit(void)",
    ),
    Ok(
        "ModuleInfo<Aurora>::ConstructObject(void *)",
    ),
    Ok(
        "Crikey::UpdateNodes(void)",
    ),
    Ok(
        "Wallaby::Init(GameObjDesc *)",
    ),
    Ok(
        "bad_exception::~bad_exception(void)",
    ),
    Ok(
        "FrillLizard::ThrowBurningJunkInit(void)",
    ),
    Ok(
        "ThinIceProp::TyInOkState(void)",
    ),
    Ok(
        "Tools_DebugDrawCoordinateSystem(Matrix &, float)",
    ),
    Ok(
        "Hud_Update(void)",
    ),
    Ok(
        "Lasso::Deinit(void)",
    ),
    Ok(
        "LilyPad::LoadDone(void)",
    ),
    Ok(
        "Rhino::Idle(void)",
    ),
    Ok(
        "Basket::Reset(void)",
    ),
    Ok(
        "Quadratic::SetPoints(Vector *, Vector *, Vector *)",
    ),
    Ok(
        "ModuleInfo<IceRamp>::Init(void)",
    ),
    Ok(
        "BushPig::ChargeTransition(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ParticleSystem::bPaused",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "File_FileServerFilename(char *)",
    ),
    Ok(
        "File_Read(int, void *, int, int)",
    ),
    Ok(
        "AuroraKid::Follow(void)",
    ),
    Ok(
        "GCT_WaypointPlaneManager::SetTargetLinePos(Vector *, int, int, Vector *)",
    ),
    Ok(
        "GameCamera::PlayerAdjust_Deinit(void)",
    ),
    Ok(
        "LavaBurner::Update(void)",
    ),
    Ok(
        "AnimatingProp::GetDesc(void)",
    ),
    Ok(
        "ThinIceProp::Deinit(void)",
    ),
    Ok(
        "global constructors keyed to Elevator::bStateChange",
    ),
    Ok(
        "SnowPile::Reset(void)",
    ),
    Ok(
        "global constructors keyed to Aurora_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RainbowEffect::Spawn(Vector *, Vector *)",
    ),
    Ok(
        "PauseScreen_OptionScreen_Deinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongueRockObjective::LoadDone(void)",
    ),
    Ok(
        "Cattle::Assign(CritterField2 *)",
    ),
    Ok(
        "Ty::IdleSwim(void)",
    ),
    Ok(
        "global constructors keyed to LilyPad_LoadResources(KromeIni *)",
    ),
    Ok(
        "Input_ForceInitialise(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKSceneManager::DrawStaticProps(int)",
    ),
    Ok(
        "Video_CbRestartDMA(sceMpeg *, sceMpegCbData *, Video *)",
    ),
    Ok(
        "Fly virtual table",
    ),
    Ok(
        "EnemyObject::GetPos(void)",
    ),
    Ok(
        "FrontEnd_NewGame_Update(void)",
    ),
    Ok(
        "Ty::InitIdleSurfaceSwim(void)",
    ),
    Ok(
        "A1FrillObjective::Reset(void)",
    ),
    Ok(
        "GameSubStateFSM::BushPig_Draw(void)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_B1_Init(void)",
    ),
    Ok(
        "WaterSlideData::InitSlow(void)",
    ),
    Ok(
        "Ty::SpeedLinesDraw(void)",
    ),
    Ok(
        "Bull::LoadDone(void)",
    ),
    Ok(
        "TyAttributes::LoadDone(void)",
    ),
    Ok(
        "Blitter_Tri::Draw(int)",
    ),
    Ok(
        "SnowRoo::Reset(void)",
    ),
    Ok(
        "TurningPlatform::Init(GameObjDesc *)",
    ),
    Ok(
        "TyParticleManager::SpawnBreathMist(Vector *, Vector *, float)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PE_BiteGlow_Update(ParticleSystem *)",
    ),
    Ok(
        "Lasso::DeinitLassoSnapped(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Particle_Ice_Init(ParticleSystem **, Vector *)",
    ),
    Ok(
        "ThrowingStar::EndLife(void)",
    ),
    Ok(
        "Kin_GetAcceleration(float *, float *, float *, float *)",
    ),
    Ok(
        "Sheila::Init(GameObjDesc *)",
    ),
    Ok(
        "MorayEel::Retreating(void)",
    ),
    Ok(
        "RenderTexture_WaterSlideEnd(void)",
    ),
    Ok(
        "Ty::AirToWaterTransition(void)",
    ),
    Ok(
        "__builtin_type_info type_info node",
    ),
    Ok(
        "Water_TriStrip::Draw(int)",
    ),
    Ok(
        "Skink::Reset(void)",
    ),
    Ok(
        "Bull::SearchInit(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "eh_alloc",
        ),
    ),
    Ok(
        "WaterPipe::LoadDone(void)",
    ),
    Ok(
        "Translation_GetLanguageName(TranslationLanguage)",
    ),
    Ok(
        "TyBite::Bite(void)",
    ),
    Ok(
        "global constructors keyed to PickupCounter_LoadResources(KromeIni *)",
    ),
    Ok(
        "Rex::IdleInit(void)",
    ),
    Ok(
        "Gem::Deinit(void)",
    ),
    Ok(
        "DialogEffect::FlashColorInit(void)",
    ),
    Ok(
        "ProcessCommandLine(void)",
    ),
    Ok(
        "Ty::FreeResources(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Maurie::FlyIn(void)",
    ),
    Ok(
        "TumbleWeed::Init(GameObjDesc *)",
    ),
    Ok(
        "global constructors keyed to Shazza::LoadDone(void)",
    ),
    Ok(
        "ModuleInfo<Rufus>::ConstructObject(void *)",
    ),
    Ok(
        "MovementDescriptor::Load(KromeIni *, char *)",
    ),
    Ok(
        "WaterfallStreamStruct::Init(Vector *, Vector *)",
    ),
    Ok(
        "TyParticleManager::SpawnGhost(Vector *)",
    ),
    Ok(
        "SnowGunAmmo::ResolveHit(void)",
    ),
    Ok(
        "Skink::DieInit(void)",
    ),
    Ok(
        "KoalaKid::SighInit(void)",
    ),
    Ok(
        "CrateStruct::LoadDone(void)",
    ),
    Ok(
        "UIImage::SetUVs(float, float, float, float)",
    ),
    Ok(
        "PlatformDesc virtual table",
    ),
    Ok(
        "Julius::Init(GameObjDesc *)",
    ),
    Ok(
        "Gecko::Init(GameObjDesc *)",
    ),
    Ok(
        "Friend_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "ModuleInfo<PipePart>::Init(void)",
    ),
    Ok(
        "Dma::AddGif_AD_MIPTBP2_2(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "FireWorks_LoadResources(void)",
    ),
    Ok(
        "global constructors keyed to FarLapp_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKPackage_DeinitModule(void)",
    ),
    Ok(
        "KingFisherField::LoadDone(void)",
    ),
    Ok(
        "YabbyObjective::bActivated",
    ),
    Ok(
        "Collision_Init(int, float, float, float, float, float, int, int)",
    ),
    Ok(
        "CheckForSurfaceSwimSplashes(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "dynamic_cast",
        ),
    ),
    Ok(
        "BadBoonie::RunToWaypoint_Update(void)",
    ),
    Ok(
        "Bunyip_Hide(void)",
    ),
    Ok(
        "global constructors keyed to Damageable_LoadResources(KromeIni *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "PauseScreen_OptionSound_Init(void)",
    ),
    Ok(
        "Spider::Deinit(void)",
    ),
    Ok(
        "Font::Destroy(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MiniBoulderStruct::Spin(void)",
    ),
    Ok(
        "ShadowBatValve::Update(void)",
    ),
    Ok(
        "OmniLight_UpdateParameters(OmniLight *, OmniLightParameters *)",
    ),
    Ok(
        "Skink::Animate(MKAnim *)",
    ),
    Ok(
        "RandomVector(Vector *, Vector const &, Vector const &)",
    ),
    Ok(
        "System_DestroyZRequest(ZCheckRequest *)",
    ),
    Ok(
        "Jeep::DoJeepSounds(void)",
    ),
    Err(
        InvalidSpecialMethod(
            "pack_d",
        ),
    ),
    Ok(
        "MorayEel::Attacking(void)",
    ),
    Ok(
        "Boulder::Update(void)",
    ),
    Ok(
        "FrillBike::MatchTargetVelocity(void)",
    ),
    Ok(
        "FrillBike::LassoInit(void)",
    ),
    Ok(
        "GameCamera::UsingExactCycleValues(void)",
    ),
    Ok(
        "GameCamera::UseDoomarangCamera(bool, Vector *, Vector *, Vector *, float)",
    ),
    Ok(
        "GameData::GetHasUnplacedTalisman(void)",
    ),
    Ok(
        "BlueTongue::ThrowRockDeinit(void)",
    ),
    Ok(
        "Platform virtual table",
    ),
    Ok(
        "PubeCrab::DeathDeinit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "RhinoGround::AlertInit(void)",
    ),
    Ok(
        "Animation::Create(char *, Matrix *)",
    ),
    Ok(
        "Bilby_Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bull::Slide(void)",
    ),
    Ok(
        "TurningPlatform::LoadDone(void)",
    ),
    Ok(
        "IceRamp_LoadResources(KromeIni *)",
    ),
    Ok(
        "Jeep::BasicCollisionDetection(CollisionResult *, Vector *)",
    ),
    Ok(
        "File_FileServerOutputFilename(char *)",
    ),
    Ok(
        "GameCamera::AutoCenter_Deinit(void)",
    ),
    Ok(
        "AnimatingProp::Enable(bool)",
    ),
    Ok(
        "BoomerangManager::Enable(void)",
    ),
    Ok(
        "SpiderTrapdoor::IsAnimFinished(void)",
    ),
    Ok(
        "FrillBike::IdleInit(void)",
    ),
    Ok(
        "DDASession::DrawDebugStats(void)",
    ),
    Ok(
        "Dennis::Message(MKMessage *)",
    ),
    Ok(
        "BlitterCritterField virtual table",
    ),
    Ok(
        "WaterSlideData::InitIdle(void)",
    ),
    Ok(
        "Quadratic::Init(void)",
    ),
    Ok(
        "Vector::Cross(Vector *)",
    ),
    Ok(
        "InvisiCrate::Update(void)",
    ),
    Ok(
        "ModuleInfo<Damageable>::ConstructObject(void *)",
    ),
    Ok(
        "BubbleSpawner_LoadResources(KromeIni *)",
    ),
    Ok(
        "MKSceneManager::AddDynamicProp(MKProp *, int)",
    ),
    Ok(
        "SnowSpider::Jump(void)",
    ),
    Ok(
        "ScrubTurkey::RunToWaypoint_Update(void)",
    ),
    Ok(
        "Eel::Deinit(void)",
    ),
    Ok(
        "ModuleInfo<Grasshopper> virtual table",
    ),
    Ok(
        "LavaBurner::Reset(void)",
    ),
    Ok(
        "WhiteBat_LoadResources(KromeIni *)",
    ),
    Ok(
        "ModuleInfo<Ringo>::Init(void)",
    ),
    Ok(
        "BonusPickup::Magnetised(void)",
    ),
    Ok(
        "LODDescriptor::Deinit(void)",
    ),
    Ok(
        "Doomerang::InitFired(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Parser::IsName(void)",
    ),
    Ok(
        "ShadowBat::Dying(void)",
    ),
    Ok(
        "AquarangProp::Message(MKMessage *)",
    ),
    Ok(
        "SpeedUpCrate_Deinit(void)",
    ),
    Ok(
        "global constructors keyed to pTorchPlayingSFX",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "void type_info node",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WeatherProp::SetType(int)",
    ),
    Ok(
        "CrikeyChum::FinishEaten(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Bunyip_On(void)",
    ),
    Ok(
        "long double type_info node",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWater::SubObjectExists(char *, int *)",
    ),
    Ok(
        "ScreenData::FadeIn(int, int)",
    ),
    Ok(
        "Doomerang::Deactivate(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "WhiteBat::GenerateRandomOffsetFromTy(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FILOList::Deinit(void)",
    ),
    Ok(
        "Video_CbNoData(sceMpeg *, sceMpegCbData *, Video *)",
    ),
    Ok(
        "Dma::AddGif_AD_TEXCLUT(unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "LevelData::EnableBoss(bool)",
    ),
    Ok(
        "Ty::AirMediumDeinit(void)",
    ),
    Ok(
        "CritterCruiseMove::SetNextPoint(Vector &)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "KoalaKidObjective::Init(GameObjDesc *)",
    ),
    Ok(
        "BezierPathFollower::MatchVelocityTo(Vector *, Vector *)",
    ),
    Ok(
        "Boulder::UpdateFall(void)",
    ),
    Ok(
        "GameObjectManager::SendMessage(MKMessage *, unsigned int, Vector *, float, bool)",
    ),
    Ok(
        "ModuleInfo<Elevator>::ConstructObject(void *)",
    ),
    Ok(
        "Collapsible::Reset(void)",
    ),
    Ok(
        "SaveStates_GetTotalGems(int)",
    ),
    Ok(
        "AuroraKid::UpdateModule(void)",
    ),
    Ok(
        "Platform::BeginUpdate(void)",
    ),
    Ok(
        "Neddy::Return(void)",
    ),
    Ok(
        "Wake_LoadResources(void)",
    ),
    Ok(
        "Ty::InitIceRunToStop(void)",
    ),
    Ok(
        "ScrubTurkey::DropEggInit(void)",
    ),
    Ok(
        "ShadowBat::FlyToHoverPosInit(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "Tools_AnimDesc::Init(Tools_AnimEntry *, int, MKAnimScript *)",
    ),
    Ok(
        "Shark::BackOff(void)",
    ),
    Ok(
        "CameraOverride::Init(CameraDescriptor *)",
    ),
    Ok(
        "Sentinel::WatchDeinit(void)",
    ),
    Ok(
        "GameSubStateFSM::MiniGame_C2_Init(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BlueTongueThrower::Reset(void)",
    ),
    Ok(
        "Lasso::Draw(void)",
    ),
    Ok(
        "EnemyWaypoints::waypointLoadInfo",
    ),
    Ok(
        "Burner::Init(GameObjDesc *)",
    ),
    Ok(
        "Particle_BiteGlow_Create(ParticleSystem **, float)",
    ),
    Ok(
        "Model::GetNmbrOfMatrices(void)",
    ),
    Ok(
        "PauseScreen_GameInfo_Init(void)",
    ),
    Ok(
        "BushPig::SetFindItem(Vector *, SpecialPickupStruct *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BoomerangManager::IsReady(BoomerangSide)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BadBoonie::SpawnThunderEggParticle(float)",
    ),
    Ok(
        "EnemySpawner::GetSpawner(char *)",
    ),
    Ok(
        "ScrubTurkey::checkToIncCatchAttemps",
    ),
    Ok(
        "Neddy::PantInit(void)",
    ),
    Ok(
        "Sly::DoThrowRangs(bool)",
    ),
    Ok(
        "RhinoGround::Run(void)",
    ),
    Ok(
        "Neddy_Show(void)",
    ),
    Ok(
        "Cattle virtual table",
    ),
    Ok(
        "EnemyObject::Reset(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "DialogProp::Init(GameObjDesc *)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "MKWaveType::Init(void)",
    ),
    Ok(
        "Groper::Reset(void)",
    ),
    Ok(
        "ModuleInfo<MorayEel>::Init(void)",
    ),
    Ok(
        "BuzzSaw2::Update(void)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "BunyipElder::Message(MKMessage *)",
    ),
    Ok(
        "Platform::UpdateShadow(void)",
    ),
    Ok(
        "Waterfall_LoadResources(void)",
    ),
    Ok(
        "Particle_FrostyBreath_Init(ParticleSystem **, Vector *, BoundingVolume *)",
    ),
    Err(
        InvalidSpecialMethod(
            "ieee754_atan2f",
        ),
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameCamera::PontoonPlayerAdjust_Update(void)",
    ),
    Ok(
        "CommonGameObjFlagsComponent::Message(MKMessage *)",
    ),
    Ok(
        "PauseScreen_Draw(void)",
    ),
    Ok(
        "Camera::AddMenuItems(DebugOptionMenu *)",
    ),
    Ok(
        "UIText::GetPosition(Vector *)",
    ),
    Ok(
        "Ty::MessageFloorObject(MKMessage *)",
    ),
    Err(
        InvalidSpecialMethod(
            "do_global_ctors",
        ),
    ),
    Ok(
        "BaseParticleSystemType::Init(char *, Material *, float, float, float, int)",
    ),
    Ok(
        "Dma::AddGif_CLAMP_1(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)",
    ),
    Ok(
        "Frog::SetSubObject(int)",
    ),
    Ok(
        "Rex::CheckForLedge(void)",
    ),
    Err(
        NotMangled,
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "FrillBike::Animate(MKAnim *, bool)",
    ),
    Ok(
        "EnemyObject::SetSubState(int)",
    ),
    Ok(
        "Avalanche::Deinit(void)",
    ),
    Ok(
        "BiteTrail_Update(void)",
    ),
    Ok(
        "BiteTrail_Deinit(void)",
    ),
    Ok(
        "BlueTongueRockObjective::bActivated",
    ),
    Ok(
        "global constructors keyed to _FindLowestPipe(float)",
    ),
    Ok(
        "DialogEffectManager::Init(void)",
    ),
    Ok(
        "SoundBank_GetID(int, unsigned int)",
    ),
    Ok(
        "UWUpdate(void)",
    ),
    Ok(
        "GameCamera_LoadSavedData(CameraDebugSaveInfo *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "GameData::SetBothRangs(bool)",
    ),
    Ok(
        "Ty::CommonPostLogicChecks(void)",
    ),
    Ok(
        "Video_CbStrADPCM(sceMpeg *, sceMpegCbDataStr *, Video *)",
    ),
    Err(
        NotMangled,
    ),
    Ok(
        "LevelData::GetID(void)",
    ),
]
